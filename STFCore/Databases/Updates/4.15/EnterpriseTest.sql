USE [EnterpriseTest]
GO

---------------------------------------------------------------------------
-- bmyers 10/1/18  Modify all column types to match proposed schema

-- Drop keys/constraints where required to modify columns

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ScenarioDefault]') AND type = 'D')
ALTER TABLE [dbo].[EnterpriseScenario] DROP CONSTRAINT [ScenarioDefault]
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[EnterpriseScenarioGroupAssoc]') AND name = N'PK_EnterpriseScenarioGroupAssoc')
ALTER TABLE [dbo].[EnterpriseScenarioGroupAssoc] DROP CONSTRAINT [PK_EnterpriseScenarioGroupAssoc] WITH ( ONLINE = OFF )
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_EnterpriseScenarioGroupAssoc_OperatorGroup]') AND parent_object_id = OBJECT_ID(N'[dbo].[EnterpriseScenarioGroupAssoc]'))
ALTER TABLE [dbo].[EnterpriseScenarioGroupAssoc] DROP CONSTRAINT [FK_EnterpriseScenarioGroupAssoc_OperatorGroup]
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[MetadataInstallerPackageAssoc]') AND name = N'PK_MetadataInstallerPackageAssoc')
ALTER TABLE [dbo].[MetadataInstallerPackageAssoc] DROP CONSTRAINT [PK_MetadataInstallerPackageAssoc] WITH ( ONLINE = OFF )
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_MetadataInstallerPackageAssoc_MetadataType]') AND parent_object_id = OBJECT_ID(N'[dbo].[MetadataInstallerPackageAssoc]'))
ALTER TABLE [dbo].[MetadataInstallerPackageAssoc] DROP CONSTRAINT [FK_MetadataInstallerPackageAssoc_MetadataType]
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_MetadataTypeResourceTypeAssoc_MetadataType]') AND parent_object_id = OBJECT_ID(N'[dbo].[MetadataTypeResourceTypeAssoc]'))
ALTER TABLE [dbo].[MetadataTypeResourceTypeAssoc] DROP CONSTRAINT [FK_MetadataTypeResourceTypeAssoc_MetadataType]
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_ProductPluginAssociation_MetadataType]') AND parent_object_id = OBJECT_ID(N'[dbo].[ProductPluginAssociation]'))
ALTER TABLE [dbo].[ProductPluginAssociation] DROP CONSTRAINT [FK_ProductPluginAssociation_MetadataType]
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[MetadataType]') AND name = N'PK_MetadataType')
ALTER TABLE [dbo].[MetadataType] DROP CONSTRAINT [PK_MetadataType] WITH ( ONLINE = OFF )
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[MetadataTypeResourceTypeAssoc]') AND name = N'PK_MetadataTypeResourceTypeAssoc')
ALTER TABLE [dbo].[MetadataTypeResourceTypeAssoc] DROP CONSTRAINT [PK_MetadataTypeResourceTypeAssoc] WITH ( ONLINE = OFF )
GO

-- Primary key for ProductPluginAssociation is autogenerated, so we have to do this the hard way
DECLARE @SQL VARCHAR(4000)
SET @SQL = 'ALTER TABLE ProductPluginAssociation DROP CONSTRAINT |ConstraintName| '
SET @SQL = REPLACE(@SQL, '|ConstraintName|', ( SELECT name FROM sysobjects WHERE xtype = 'PK' AND parent_obj = OBJECT_ID('ProductPluginAssociation')))
EXEC (@SQL)
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ResourceTypePlatformAssoc]') AND name = N'PK_ResourceTypePlatformAssoc')
ALTER TABLE [dbo].[ResourceTypePlatformAssoc] DROP CONSTRAINT [PK_ResourceTypePlatformAssoc] WITH ( ONLINE = OFF )
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_ResourceTypePlatformAssoc_VirtualMachinePlatform]') AND parent_object_id = OBJECT_ID(N'[dbo].[ResourceTypePlatformAssoc]'))
ALTER TABLE [dbo].[ResourceTypePlatformAssoc] DROP CONSTRAINT [FK_ResourceTypePlatformAssoc_VirtualMachinePlatform]
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ScenarioSession]') AND name = N'PK_ScenarioSession')
ALTER TABLE [dbo].[ScenarioSession] DROP CONSTRAINT [PK_ScenarioSession] WITH ( ONLINE = OFF )
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[SystemSetting]') AND name = N'PK_SystemSetting')
ALTER TABLE [dbo].[SystemSetting] DROP CONSTRAINT [PK_SystemSetting] WITH ( ONLINE = OFF )
GO

DECLARE @SQL VARCHAR(4000)
SET @SQL = 'ALTER TABLE SystemSetting DROP CONSTRAINT |ConstraintName| '
SET @SQL = REPLACE(@SQL, '|ConstraintName|', ( SELECT name FROM sysobjects WHERE xtype = 'D' AND parent_obj = OBJECT_ID('SystemSetting')))
EXEC (@SQL)
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_UserGroupAssoc_User]') AND parent_object_id = OBJECT_ID(N'[dbo].[UserGroupAssoc]'))
ALTER TABLE [dbo].[UserGroupAssoc] DROP CONSTRAINT [FK_UserGroupAssoc_User]
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[User]') AND name = N'PK_User')
ALTER TABLE [dbo].[User] DROP CONSTRAINT [PK_User] WITH ( ONLINE = OFF )
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[DF_User_Domain]') AND type = 'D')
ALTER TABLE [dbo].[User] DROP CONSTRAINT [DF_User_Domain]
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_UserGroupAssoc_UserGroup]') AND parent_object_id = OBJECT_ID(N'[dbo].[UserGroupAssoc]'))
ALTER TABLE [dbo].[UserGroupAssoc] DROP CONSTRAINT [FK_UserGroupAssoc_UserGroup]
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_VirtualMachineGroupAssoc_OperatorGroup]') AND parent_object_id = OBJECT_ID(N'[dbo].[VirtualMachineGroupAssoc]'))
ALTER TABLE [dbo].[VirtualMachineGroupAssoc] DROP CONSTRAINT [FK_VirtualMachineGroupAssoc_OperatorGroup]
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[UserGroup]') AND name = N'PK_OperatorGroup')
ALTER TABLE [dbo].[UserGroup] DROP CONSTRAINT [PK_OperatorGroup] WITH ( ONLINE = OFF )
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[UserGroupAssoc]') AND name = N'PK_UserGroupAssoc')
ALTER TABLE [dbo].[UserGroupAssoc] DROP CONSTRAINT [PK_UserGroupAssoc] WITH ( ONLINE = OFF )
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[VirtualMachineGroupAssoc]') AND name = N'PK_VirtualMachineGroupAssoc_1')
ALTER TABLE [dbo].[VirtualMachineGroupAssoc] DROP CONSTRAINT [PK_VirtualMachineGroupAssoc_1] WITH ( ONLINE = OFF )
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_VirtualMachinePlatformAssoc_VirtualMachinePlatform]') AND parent_object_id = OBJECT_ID(N'[dbo].[VirtualMachinePlatformAssoc]'))
ALTER TABLE [dbo].[VirtualMachinePlatformAssoc] DROP CONSTRAINT [FK_VirtualMachinePlatformAssoc_VirtualMachinePlatform]
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[VirtualMachinePlatform]') AND name = N'PK_VirtualMachinePlatform')
ALTER TABLE [dbo].[VirtualMachinePlatform] DROP CONSTRAINT [PK_VirtualMachinePlatform] WITH ( ONLINE = OFF )
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[VirtualMachinePlatformAssoc]') AND name = N'PK_VirtualMachinePlatformAssoc')
ALTER TABLE [dbo].[VirtualMachinePlatformAssoc] DROP CONSTRAINT [PK_VirtualMachinePlatformAssoc] WITH ( ONLINE = OFF )
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[DF_VirtualResource_Platform]') AND type = 'D')
ALTER TABLE [dbo].[VirtualResource] DROP CONSTRAINT [DF_VirtualResource_Platform]
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[VirtualResourceMetadata]') AND name = N'IDX_MetadataType')
DROP INDEX [IDX_MetadataType] ON [dbo].[VirtualResourceMetadata]
GO


-- Make sure there are no nulls in columns that will change

UPDATE ConfigurationObjectHistory SET ConfigurationObjectType = '' WHERE ConfigurationObjectType IS NULL
UPDATE EnterpriseScenario SET Name = '' WHERE Name IS NULL
UPDATE MetadataType SET AssemblyName = '' WHERE AssemblyName IS NULL
GO


-- Modify column types

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ActiveDirectoryGroup' AND COLUMN_NAME = 'Description')
ALTER TABLE ActiveDirectoryGroup ALTER COLUMN Description nvarchar(1024) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'AdminWorker' AND COLUMN_NAME = 'ExecutionMode')
ALTER TABLE AdminWorker ALTER COLUMN ExecutionMode varchar(20) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'AssociatedProduct' AND COLUMN_NAME = 'Name')
ALTER TABLE AssociatedProduct ALTER COLUMN Name nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'AssociatedProduct' AND COLUMN_NAME = 'Vendor')
ALTER TABLE AssociatedProduct ALTER COLUMN Vendor nvarchar(50) NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CitrixWorker' AND COLUMN_NAME = 'DBWorkerRunMode')
ALTER TABLE CitrixWorker ALTER COLUMN DBWorkerRunMode varchar(20) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CitrixWorker' AND COLUMN_NAME = 'PublishedApp')
ALTER TABLE CitrixWorker ALTER COLUMN PublishedApp nvarchar(50) NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ConfigurationObjectHistory' AND COLUMN_NAME = 'ConfigurationObjectType')
ALTER TABLE ConfigurationObjectHistory ALTER COLUMN ConfigurationObjectType varchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ConfigurationObjectHistory' AND COLUMN_NAME = 'ModificationType')
ALTER TABLE ConfigurationObjectHistory ALTER COLUMN ModificationType varchar(10) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ConfigurationObjectHistory' AND COLUMN_NAME = 'Modifier')
ALTER TABLE ConfigurationObjectHistory ALTER COLUMN Modifier nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ConfigurationTreeFolder' AND COLUMN_NAME = 'Name')
ALTER TABLE ConfigurationTreeFolder ALTER COLUMN Name nvarchar(255) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'EnterpriseScenario' AND COLUMN_NAME = 'Name')
ALTER TABLE EnterpriseScenario ALTER COLUMN Name nvarchar(255) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'EnterpriseScenario' AND COLUMN_NAME = 'Description')
ALTER TABLE EnterpriseScenario ALTER COLUMN Description nvarchar(1024) NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'EnterpriseScenario' AND COLUMN_NAME = 'Owner')
ALTER TABLE EnterpriseScenario ALTER COLUMN Owner nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'EnterpriseScenarioGroupAssoc' AND COLUMN_NAME = 'GroupName')
ALTER TABLE EnterpriseScenarioGroupAssoc ALTER COLUMN GroupName nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'EventLogCollector' AND COLUMN_NAME = 'HostName')
ALTER TABLE EventLogCollector ALTER COLUMN HostName nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MetadataInstallerPackageAssoc' AND COLUMN_NAME = 'MetadataType')
ALTER TABLE MetadataInstallerPackageAssoc ALTER COLUMN MetadataType nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MetadataType' AND COLUMN_NAME = 'Name')
ALTER TABLE MetadataType ALTER COLUMN Name nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MetadataType' AND COLUMN_NAME = 'AssemblyName')
ALTER TABLE MetadataType ALTER COLUMN AssemblyName nvarchar(255) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MetadataType' AND COLUMN_NAME = 'Title')
ALTER TABLE MetadataType ALTER COLUMN Title nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MetadataType' AND COLUMN_NAME = 'Group')
ALTER TABLE MetadataType ALTER COLUMN [Group] nvarchar(50) NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MetadataTypeResourceTypeAssoc' AND COLUMN_NAME = 'MetadataTypeName')
ALTER TABLE MetadataTypeResourceTypeAssoc ALTER COLUMN MetadataTypeName nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'PerfMonCollector' AND COLUMN_NAME = 'HostName')
ALTER TABLE PerfMonCollector ALTER COLUMN HostName nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ProductPluginAssociation' AND COLUMN_NAME = 'MetadataType')
ALTER TABLE ProductPluginAssociation ALTER COLUMN MetadataType nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ResourceTypePlatformAssoc' AND COLUMN_NAME = 'PlatformId')
ALTER TABLE ResourceTypePlatformAssoc ALTER COLUMN PlatformId nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ResourceWindowsCategory' AND COLUMN_NAME = 'CategoryType')
ALTER TABLE ResourceWindowsCategory ALTER COLUMN CategoryType nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ResourceWindowsCategory' AND COLUMN_NAME = 'Name')
ALTER TABLE ResourceWindowsCategory ALTER COLUMN Name nvarchar(255) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ScenarioSession' AND COLUMN_NAME = 'Name')
ALTER TABLE ScenarioSession ALTER COLUMN Name nvarchar(255) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ScenarioSession' AND COLUMN_NAME = 'Notes')
ALTER TABLE ScenarioSession ALTER COLUMN Notes nvarchar(MAX) NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SoftwareInstaller' AND COLUMN_NAME = 'Description')
ALTER TABLE SoftwareInstaller ALTER COLUMN Description nvarchar(1024) NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SoftwareInstaller' AND COLUMN_NAME = 'FilePath')
ALTER TABLE SoftwareInstaller ALTER COLUMN FilePath nvarchar(255) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SoftwareInstaller' AND COLUMN_NAME = 'Arguments')
ALTER TABLE SoftwareInstaller ALTER COLUMN Arguments nvarchar(255) NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SoftwareInstaller' AND COLUMN_NAME = 'RebootSetting')
ALTER TABLE SoftwareInstaller ALTER COLUMN RebootSetting varchar(20) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SoftwareInstallerPackage' AND COLUMN_NAME = 'Description')
ALTER TABLE SoftwareInstallerPackage ALTER COLUMN Description nvarchar(1024) NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SolutionTester' AND COLUMN_NAME = 'CredentialType')
ALTER TABLE SolutionTester ALTER COLUMN CredentialType varchar(20) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SolutionTester' AND COLUMN_NAME = 'CredentialPassword')
ALTER TABLE SolutionTester ALTER COLUMN CredentialPassword nvarchar(50) NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SystemSetting' AND COLUMN_NAME = 'Type')
ALTER TABLE SystemSetting ALTER COLUMN Type varchar(20) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SystemSetting' AND COLUMN_NAME = 'SubType')
ALTER TABLE SystemSetting ALTER COLUMN SubType nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SystemSetting' AND COLUMN_NAME = 'Name')
ALTER TABLE SystemSetting ALTER COLUMN Name nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SystemSetting' AND COLUMN_NAME = 'Value')
ALTER TABLE SystemSetting ALTER COLUMN Value nvarchar(MAX) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SystemSetting' AND COLUMN_NAME = 'Description')
ALTER TABLE SystemSetting ALTER COLUMN Description nvarchar(1024) NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'User' AND COLUMN_NAME = 'UserName')
ALTER TABLE [User] ALTER COLUMN UserName nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'User' AND COLUMN_NAME = 'Domain')
ALTER TABLE [User] ALTER COLUMN Domain nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'User' AND COLUMN_NAME = 'RoleName')
ALTER TABLE [User] ALTER COLUMN RoleName varchar(20) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'UserGroup' AND COLUMN_NAME = 'GroupName')
ALTER TABLE UserGroup ALTER COLUMN GroupName nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'UserGroup' AND COLUMN_NAME = 'Creator')
ALTER TABLE UserGroup ALTER COLUMN Creator nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'UserGroup' AND COLUMN_NAME = 'Description')
ALTER TABLE UserGroup ALTER COLUMN Description nvarchar(1024) NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'UserGroupAssoc' AND COLUMN_NAME = 'UserName')
ALTER TABLE UserGroupAssoc ALTER COLUMN UserName nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'UserGroupAssoc' AND COLUMN_NAME = 'GroupName')
ALTER TABLE UserGroupAssoc ALTER COLUMN GroupName nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'VirtualMachineGroupAssoc' AND COLUMN_NAME = 'GroupName')
ALTER TABLE VirtualMachineGroupAssoc ALTER COLUMN GroupName nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'VirtualMachineGroupAssoc' AND COLUMN_NAME = 'MachineName')
ALTER TABLE VirtualMachineGroupAssoc ALTER COLUMN MachineName nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'VirtualMachinePlatform' AND COLUMN_NAME = 'PlatformId')
ALTER TABLE VirtualMachinePlatform ALTER COLUMN PlatformId nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'VirtualMachinePlatform' AND COLUMN_NAME = 'Name')
ALTER TABLE VirtualMachinePlatform ALTER COLUMN Name nvarchar(255) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'VirtualMachinePlatformAssoc' AND COLUMN_NAME = 'PlatformId')
ALTER TABLE VirtualMachinePlatformAssoc ALTER COLUMN PlatformId nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'VirtualMachinePlatformAssoc' AND COLUMN_NAME = 'Name')
ALTER TABLE VirtualMachinePlatformAssoc ALTER COLUMN Name nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'VirtualResource' AND COLUMN_NAME = 'Description')
ALTER TABLE VirtualResource ALTER COLUMN Description nvarchar(1024) NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'VirtualResource' AND COLUMN_NAME = 'Platform')
ALTER TABLE VirtualResource ALTER COLUMN Platform nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'VirtualResourceMetadata' AND COLUMN_NAME = 'MetadataType')
ALTER TABLE VirtualResourceMetadata ALTER COLUMN MetadataType nvarchar(50) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'VirtualResourceMetadata' AND COLUMN_NAME = 'MetadataVersion')
ALTER TABLE VirtualResourceMetadata ALTER COLUMN MetadataVersion nvarchar(50) NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'VirtualResourceMetadataRetrySetting' AND COLUMN_NAME = 'State')
ALTER TABLE VirtualResourceMetadataRetrySetting ALTER COLUMN State varchar(20) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'VirtualResourceMetadataRetrySetting' AND COLUMN_NAME = 'Action')
ALTER TABLE VirtualResourceMetadataRetrySetting ALTER COLUMN Action varchar(20) NOT NULL
GO

IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'VirtualResourceMetadataRetrySetting' AND COLUMN_NAME = 'LimitExceededAction')
ALTER TABLE VirtualResourceMetadataRetrySetting ALTER COLUMN LimitExceededAction varchar(20) NOT NULL
GO


-- Recreate keys/constraints

ALTER TABLE [dbo].[EnterpriseScenario] ADD  CONSTRAINT [ScenarioDefault]  DEFAULT ('Unknown') FOR [Owner]
GO

ALTER TABLE [dbo].[EnterpriseScenarioGroupAssoc] ADD  CONSTRAINT [PK_EnterpriseScenarioGroupAssoc] PRIMARY KEY CLUSTERED 
(
	[ScenarioId] ASC,
	[GroupName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[UserGroup] ADD  CONSTRAINT [PK_OperatorGroup] PRIMARY KEY CLUSTERED 
(
	[GroupName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[EnterpriseScenarioGroupAssoc]  WITH CHECK ADD  CONSTRAINT [FK_EnterpriseScenarioGroupAssoc_OperatorGroup] FOREIGN KEY([GroupName])
REFERENCES [dbo].[UserGroup] ([GroupName])
ON UPDATE CASCADE
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[EnterpriseScenarioGroupAssoc] CHECK CONSTRAINT [FK_EnterpriseScenarioGroupAssoc_OperatorGroup]
GO

ALTER TABLE [dbo].[MetadataInstallerPackageAssoc] ADD  CONSTRAINT [PK_MetadataInstallerPackageAssoc] PRIMARY KEY CLUSTERED 
(
	[MetadataType] ASC,
	[InstallerPackageId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[MetadataType] ADD  CONSTRAINT [PK_MetadataType] PRIMARY KEY CLUSTERED 
(
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[MetadataInstallerPackageAssoc]  WITH CHECK ADD  CONSTRAINT [FK_MetadataInstallerPackageAssoc_MetadataType] FOREIGN KEY([MetadataType])
REFERENCES [dbo].[MetadataType] ([Name])
GO

ALTER TABLE [dbo].[MetadataInstallerPackageAssoc] CHECK CONSTRAINT [FK_MetadataInstallerPackageAssoc_MetadataType]
GO

ALTER TABLE [dbo].[MetadataTypeResourceTypeAssoc]  WITH CHECK ADD  CONSTRAINT [FK_MetadataTypeResourceTypeAssoc_MetadataType] FOREIGN KEY([MetadataTypeName])
REFERENCES [dbo].[MetadataType] ([Name])
GO

ALTER TABLE [dbo].[MetadataTypeResourceTypeAssoc] CHECK CONSTRAINT [FK_MetadataTypeResourceTypeAssoc_MetadataType]
GO

ALTER TABLE [dbo].[ProductPluginAssociation]  WITH CHECK ADD  CONSTRAINT [FK_ProductPluginAssociation_MetadataType] FOREIGN KEY([MetadataType])
REFERENCES [dbo].[MetadataType] ([Name])
ON UPDATE CASCADE
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[ProductPluginAssociation] CHECK CONSTRAINT [FK_ProductPluginAssociation_MetadataType]
GO

ALTER TABLE [dbo].[MetadataTypeResourceTypeAssoc] ADD  CONSTRAINT [PK_MetadataTypeResourceTypeAssoc] PRIMARY KEY CLUSTERED 
(
	[MetadataTypeName] ASC,
	[ResourceTypeName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[ProductPluginAssociation] ADD  CONSTRAINT [PK_ProductPluginAssociation] PRIMARY KEY CLUSTERED 
(
	[MetadataType] ASC,
	[AssociatedProductId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[ResourceTypePlatformAssoc] ADD  CONSTRAINT [PK_ResourceTypePlatformAssoc] PRIMARY KEY CLUSTERED 
(
	[Name] ASC,
	[PlatformId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[VirtualMachinePlatform] ADD  CONSTRAINT [PK_VirtualMachinePlatform] PRIMARY KEY CLUSTERED 
(
	[PlatformId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[ResourceTypePlatformAssoc]  WITH CHECK ADD  CONSTRAINT [FK_ResourceTypePlatformAssoc_VirtualMachinePlatform] FOREIGN KEY([PlatformId])
REFERENCES [dbo].[VirtualMachinePlatform] ([PlatformId])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[ResourceTypePlatformAssoc] CHECK CONSTRAINT [FK_ResourceTypePlatformAssoc_VirtualMachinePlatform]
GO

ALTER TABLE [dbo].[ScenarioSession] ADD  CONSTRAINT [PK_ScenarioSession] PRIMARY KEY CLUSTERED 
(
	[EnterpriseScenarioId] ASC,
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[SystemSetting] ADD  CONSTRAINT [PK_SystemSetting] PRIMARY KEY CLUSTERED 
(
	[Type] ASC,
	[SubType] ASC,
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[SystemSetting] ADD  CONSTRAINT [DF_SystemSettingSubType]  DEFAULT ('') FOR [SubType]
GO

ALTER TABLE [dbo].[User] ADD  CONSTRAINT [PK_User] PRIMARY KEY CLUSTERED 
(
	[UserName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[UserGroupAssoc]  WITH CHECK ADD  CONSTRAINT [FK_UserGroupAssoc_User] FOREIGN KEY([UserName])
REFERENCES [dbo].[User] ([UserName])
ON UPDATE CASCADE
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[UserGroupAssoc] CHECK CONSTRAINT [FK_UserGroupAssoc_User]
GO

ALTER TABLE [dbo].[User] ADD  CONSTRAINT [DF_User_Domain]  DEFAULT ('') FOR [Domain]
GO

ALTER TABLE [dbo].[VirtualMachineGroupAssoc]  WITH CHECK ADD  CONSTRAINT [FK_VirtualMachineGroupAssoc_OperatorGroup] FOREIGN KEY([GroupName])
REFERENCES [dbo].[UserGroup] ([GroupName])
ON UPDATE CASCADE
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[VirtualMachineGroupAssoc] CHECK CONSTRAINT [FK_VirtualMachineGroupAssoc_OperatorGroup]
GO

ALTER TABLE [dbo].[UserGroupAssoc]  WITH CHECK ADD  CONSTRAINT [FK_UserGroupAssoc_UserGroup] FOREIGN KEY([GroupName])
REFERENCES [dbo].[UserGroup] ([GroupName])
ON UPDATE CASCADE
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[UserGroupAssoc] CHECK CONSTRAINT [FK_UserGroupAssoc_UserGroup]
GO

ALTER TABLE [dbo].[UserGroupAssoc] ADD  CONSTRAINT [PK_UserGroupAssoc] PRIMARY KEY CLUSTERED 
(
	[UserName] ASC,
	[GroupName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[VirtualMachineGroupAssoc] ADD  CONSTRAINT [PK_VirtualMachineGroupAssoc_1] PRIMARY KEY CLUSTERED 
(
	[MachineName] ASC,
	[GroupName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[VirtualMachinePlatformAssoc]  WITH CHECK ADD  CONSTRAINT [FK_VirtualMachinePlatformAssoc_VirtualMachinePlatform] FOREIGN KEY([PlatformId])
REFERENCES [dbo].[VirtualMachinePlatform] ([PlatformId])
ON UPDATE CASCADE
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[VirtualMachinePlatformAssoc] CHECK CONSTRAINT [FK_VirtualMachinePlatformAssoc_VirtualMachinePlatform]
GO

ALTER TABLE [dbo].[VirtualMachinePlatformAssoc] ADD  CONSTRAINT [PK_VirtualMachinePlatformAssoc] PRIMARY KEY CLUSTERED 
(
	[PlatformId] ASC,
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[VirtualResource] ADD  CONSTRAINT [DF_VirtualResource_Platform]  DEFAULT ('NONE') FOR [Platform]
GO

CREATE NONCLUSTERED INDEX [IDX_MetadataType] ON [dbo].[VirtualResourceMetadata]
(
	[MetadataType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO


---------------------------------------------------------------------------
-- bmyers 10/3/18  Drop unused stored procedures

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[del_SessionInfoCascading]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[del_SessionInfoCascading]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sel_SessionsWithCounts]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[sel_SessionsWithCounts]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[upd_ReserveVMContiguous]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[upd_ReserveVMContiguous]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[upd_ReserveVMsByPlatformContiguous]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[upd_ReserveVMsByPlatformContiguous]
GO



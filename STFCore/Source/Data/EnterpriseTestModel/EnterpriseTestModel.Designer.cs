//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("EnterpriseTestModel", "ResourceWindowsCategoryParent", "ResourceWindowsCategory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.ResourceWindowsCategory), "ResourceWindowsCategory1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.ResourceWindowsCategory))]
[assembly: EdmRelationshipAttribute("EnterpriseTestModel", "ResourceTypeMetadataTypeAssoc", "MetadataType", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.MetadataType), "ResourceType", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.ResourceType))]
[assembly: EdmRelationshipAttribute("EnterpriseTestModel", "FK_VirtualResourceMetadata_VirtualResource", "VirtualResource", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.VirtualResource), "VirtualResourceMetadata", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.VirtualResourceMetadata), true)]
[assembly: EdmRelationshipAttribute("EnterpriseTestModel", "FK_UserGroupFrameworkClientAssociation_UserGroup", "UserGroup", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.UserGroup), "UserGroupFrameworkClientAssociation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.VirtualMachineGroupAssoc), true)]
[assembly: EdmRelationshipAttribute("EnterpriseTestModel", "FK_VirtualResourceMetadataAssetUsage_VirtualResourceMetadata", "VirtualResourceMetadata", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.VirtualResourceMetadata), "VirtualResourceMetadataAssetUsage", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.VirtualResourceMetadataAssetUsage), true)]
[assembly: EdmRelationshipAttribute("EnterpriseTestModel", "FK_VirtualResourceMetadataDocumentUsage_VirtualResourceMetadata", "VirtualResourceMetadata", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.VirtualResourceMetadata), "VirtualResourceMetadataDocumentUsage", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.VirtualResourceMetadataDocumentUsage), true)]
[assembly: EdmRelationshipAttribute("EnterpriseTestModel", "FK_VirtualResourceMetadataServerUsage_VirtualResourceMetadata", "VirtualResourceMetadata", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.VirtualResourceMetadata), "VirtualResourceMetadataServerUsage", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.VirtualResourceMetadataServerUsage), true)]
[assembly: EdmRelationshipAttribute("EnterpriseTestModel", "FK_VirtualResourceMetadataPrintQueueUsage_VirtualResourceMetadata", "VirtualResourceMetadata", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.VirtualResourceMetadata), "VirtualResourceMetadataPrintQueueUsage", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.VirtualResourceMetadataPrintQueueUsage), true)]
[assembly: EdmRelationshipAttribute("EnterpriseTestModel", "FK_VirtualResourceMetadataRetrySetting_VirtualResourceMetadata", "VirtualResourceMetadata", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.VirtualResourceMetadata), "VirtualResourceMetadataRetrySetting", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.VirtualResourceMetadataRetrySetting), true)]
[assembly: EdmRelationshipAttribute("EnterpriseTestModel", "UserGroupAssoc", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.User), "UserGroup", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.UserGroup))]
[assembly: EdmRelationshipAttribute("EnterpriseTestModel", "FK_VirtualResource_EnterpriseScenario", "EnterpriseScenario", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.EnterpriseScenario), "VirtualResource", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.VirtualResource), true)]
[assembly: EdmRelationshipAttribute("EnterpriseTestModel", "EnterpriseScenarioUserGroupAssoc", "EnterpriseScenario", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.EnterpriseScenario), "UserGroup", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.UserGroup))]
[assembly: EdmRelationshipAttribute("EnterpriseTestModel", "Fk_EnterpriseScenario", "ConfigurationTreeFolder", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.ConfigurationTreeFolder), "EnterpriseScenario", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.EnterpriseScenario), true)]
[assembly: EdmRelationshipAttribute("EnterpriseTestModel", "FK_AssociatedProductVersion_AssociatedProduct", "AssociatedProduct", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.AssociatedProduct), "AssociatedProductVersion", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.AssociatedProductVersion), true)]
[assembly: EdmRelationshipAttribute("EnterpriseTestModel", "FK_AssociatedProductVersion_EnterpriseScenario", "EnterpriseScenario", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.EnterpriseScenario), "AssociatedProductVersion", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.AssociatedProductVersion), true)]
[assembly: EdmRelationshipAttribute("EnterpriseTestModel", "AssociatedProductMetadataTypeAssoc", "AssociatedProduct", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.AssociatedProduct), "MetadataType", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.MetadataType))]
[assembly: EdmRelationshipAttribute("EnterpriseTestModel", "FK_SoftwareInstallerPackageItem_SoftwareInstaller", "SoftwareInstaller", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.SoftwareInstaller), "SoftwareInstallerPackageItem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.SoftwareInstallerSetting), true)]
[assembly: EdmRelationshipAttribute("EnterpriseTestModel", "FK_SoftwareInstallerPackageItem_SoftwareInstallerPackage", "SoftwareInstallerPackage", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.SoftwareInstallerPackage), "SoftwareInstallerPackageItem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.SoftwareInstallerSetting), true)]
[assembly: EdmRelationshipAttribute("EnterpriseTestModel", "SoftwareInstallerPackageMetadataTypeAssoc", "MetadataType", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.MetadataType), "SoftwareInstallerPackage", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.SoftwareInstallerPackage))]
[assembly: EdmRelationshipAttribute("EnterpriseTestModel", "SoftwareInstallerPackageResourceTypeAssoc", "ResourceType", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.ResourceType), "SoftwareInstallerPackage", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HP.ScalableTest.Data.EnterpriseTest.Model.SoftwareInstallerPackage))]

#endregion

namespace HP.ScalableTest.Data.EnterpriseTest.Model
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class EnterpriseTestEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new EnterpriseTestEntities object using the connection string found in the 'EnterpriseTestEntities' section of the application configuration file.
        /// </summary>
        public EnterpriseTestEntities() : base("name=EnterpriseTestEntities", "EnterpriseTestEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new EnterpriseTestEntities object.
        /// </summary>
        public EnterpriseTestEntities(string connectionString) : base(connectionString, "EnterpriseTestEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new EnterpriseTestEntities object.
        /// </summary>
        public EnterpriseTestEntities(EntityConnection connection) : base(connection, "EnterpriseTestEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<VirtualResource> VirtualResources
        {
            get
            {
                if ((_VirtualResources == null))
                {
                    _VirtualResources = base.CreateObjectSet<VirtualResource>("VirtualResources");
                }
                return _VirtualResources;
            }
        }
        private ObjectSet<VirtualResource> _VirtualResources;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ResourceWindowsCategory> ResourceWindowsCategories
        {
            get
            {
                if ((_ResourceWindowsCategories == null))
                {
                    _ResourceWindowsCategories = base.CreateObjectSet<ResourceWindowsCategory>("ResourceWindowsCategories");
                }
                return _ResourceWindowsCategories;
            }
        }
        private ObjectSet<ResourceWindowsCategory> _ResourceWindowsCategories;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ConfigurationTreeFolder> ConfigurationTreeFolders
        {
            get
            {
                if ((_ConfigurationTreeFolders == null))
                {
                    _ConfigurationTreeFolders = base.CreateObjectSet<ConfigurationTreeFolder>("ConfigurationTreeFolders");
                }
                return _ConfigurationTreeFolders;
            }
        }
        private ObjectSet<ConfigurationTreeFolder> _ConfigurationTreeFolders;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<MetadataType> MetadataTypes
        {
            get
            {
                if ((_MetadataTypes == null))
                {
                    _MetadataTypes = base.CreateObjectSet<MetadataType>("MetadataTypes");
                }
                return _MetadataTypes;
            }
        }
        private ObjectSet<MetadataType> _MetadataTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ResourceType> ResourceTypes
        {
            get
            {
                if ((_ResourceTypes == null))
                {
                    _ResourceTypes = base.CreateObjectSet<ResourceType>("ResourceTypes");
                }
                return _ResourceTypes;
            }
        }
        private ObjectSet<ResourceType> _ResourceTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<VirtualResourceMetadata> VirtualResourceMetadataSet
        {
            get
            {
                if ((_VirtualResourceMetadataSet == null))
                {
                    _VirtualResourceMetadataSet = base.CreateObjectSet<VirtualResourceMetadata>("VirtualResourceMetadataSet");
                }
                return _VirtualResourceMetadataSet;
            }
        }
        private ObjectSet<VirtualResourceMetadata> _VirtualResourceMetadataSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserGroup> UserGroups
        {
            get
            {
                if ((_UserGroups == null))
                {
                    _UserGroups = base.CreateObjectSet<UserGroup>("UserGroups");
                }
                return _UserGroups;
            }
        }
        private ObjectSet<UserGroup> _UserGroups;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<VirtualMachineGroupAssoc> VirtualMachineGroupAssocs
        {
            get
            {
                if ((_VirtualMachineGroupAssocs == null))
                {
                    _VirtualMachineGroupAssocs = base.CreateObjectSet<VirtualMachineGroupAssoc>("VirtualMachineGroupAssocs");
                }
                return _VirtualMachineGroupAssocs;
            }
        }
        private ObjectSet<VirtualMachineGroupAssoc> _VirtualMachineGroupAssocs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ActiveDirectoryGroup> ActiveDirectoryGroups
        {
            get
            {
                if ((_ActiveDirectoryGroups == null))
                {
                    _ActiveDirectoryGroups = base.CreateObjectSet<ActiveDirectoryGroup>("ActiveDirectoryGroups");
                }
                return _ActiveDirectoryGroups;
            }
        }
        private ObjectSet<ActiveDirectoryGroup> _ActiveDirectoryGroups;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<VirtualResourceMetadataAssetUsage> VirtualResourceMetadataAssetUsages
        {
            get
            {
                if ((_VirtualResourceMetadataAssetUsages == null))
                {
                    _VirtualResourceMetadataAssetUsages = base.CreateObjectSet<VirtualResourceMetadataAssetUsage>("VirtualResourceMetadataAssetUsages");
                }
                return _VirtualResourceMetadataAssetUsages;
            }
        }
        private ObjectSet<VirtualResourceMetadataAssetUsage> _VirtualResourceMetadataAssetUsages;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<VirtualResourceMetadataDocumentUsage> VirtualResourceMetadataDocumentUsages
        {
            get
            {
                if ((_VirtualResourceMetadataDocumentUsages == null))
                {
                    _VirtualResourceMetadataDocumentUsages = base.CreateObjectSet<VirtualResourceMetadataDocumentUsage>("VirtualResourceMetadataDocumentUsages");
                }
                return _VirtualResourceMetadataDocumentUsages;
            }
        }
        private ObjectSet<VirtualResourceMetadataDocumentUsage> _VirtualResourceMetadataDocumentUsages;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<VirtualResourceMetadataServerUsage> VirtualResourceMetadataServerUsages
        {
            get
            {
                if ((_VirtualResourceMetadataServerUsages == null))
                {
                    _VirtualResourceMetadataServerUsages = base.CreateObjectSet<VirtualResourceMetadataServerUsage>("VirtualResourceMetadataServerUsages");
                }
                return _VirtualResourceMetadataServerUsages;
            }
        }
        private ObjectSet<VirtualResourceMetadataServerUsage> _VirtualResourceMetadataServerUsages;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<VirtualResourceMetadataPrintQueueUsage> VirtualResourceMetadataPrintQueueUsages
        {
            get
            {
                if ((_VirtualResourceMetadataPrintQueueUsages == null))
                {
                    _VirtualResourceMetadataPrintQueueUsages = base.CreateObjectSet<VirtualResourceMetadataPrintQueueUsage>("VirtualResourceMetadataPrintQueueUsages");
                }
                return _VirtualResourceMetadataPrintQueueUsages;
            }
        }
        private ObjectSet<VirtualResourceMetadataPrintQueueUsage> _VirtualResourceMetadataPrintQueueUsages;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SystemSetting> SystemSettings
        {
            get
            {
                if ((_SystemSettings == null))
                {
                    _SystemSettings = base.CreateObjectSet<SystemSetting>("SystemSettings");
                }
                return _SystemSettings;
            }
        }
        private ObjectSet<SystemSetting> _SystemSettings;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<VirtualResourceMetadataRetrySetting> VirtualResourceMetadataRetrySettings
        {
            get
            {
                if ((_VirtualResourceMetadataRetrySettings == null))
                {
                    _VirtualResourceMetadataRetrySettings = base.CreateObjectSet<VirtualResourceMetadataRetrySetting>("VirtualResourceMetadataRetrySettings");
                }
                return _VirtualResourceMetadataRetrySettings;
            }
        }
        private ObjectSet<VirtualResourceMetadataRetrySetting> _VirtualResourceMetadataRetrySettings;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<User> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<User>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<User> _Users;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<EnterpriseScenario> EnterpriseScenarios
        {
            get
            {
                if ((_EnterpriseScenarios == null))
                {
                    _EnterpriseScenarios = base.CreateObjectSet<EnterpriseScenario>("EnterpriseScenarios");
                }
                return _EnterpriseScenarios;
            }
        }
        private ObjectSet<EnterpriseScenario> _EnterpriseScenarios;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AssociatedProduct> AssociatedProducts
        {
            get
            {
                if ((_AssociatedProducts == null))
                {
                    _AssociatedProducts = base.CreateObjectSet<AssociatedProduct>("AssociatedProducts");
                }
                return _AssociatedProducts;
            }
        }
        private ObjectSet<AssociatedProduct> _AssociatedProducts;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AssociatedProductVersion> AssociatedProductVersions
        {
            get
            {
                if ((_AssociatedProductVersions == null))
                {
                    _AssociatedProductVersions = base.CreateObjectSet<AssociatedProductVersion>("AssociatedProductVersions");
                }
                return _AssociatedProductVersions;
            }
        }
        private ObjectSet<AssociatedProductVersion> _AssociatedProductVersions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SoftwareInstaller> SoftwareInstallers
        {
            get
            {
                if ((_SoftwareInstallers == null))
                {
                    _SoftwareInstallers = base.CreateObjectSet<SoftwareInstaller>("SoftwareInstallers");
                }
                return _SoftwareInstallers;
            }
        }
        private ObjectSet<SoftwareInstaller> _SoftwareInstallers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SoftwareInstallerPackage> SoftwareInstallerPackages
        {
            get
            {
                if ((_SoftwareInstallerPackages == null))
                {
                    _SoftwareInstallerPackages = base.CreateObjectSet<SoftwareInstallerPackage>("SoftwareInstallerPackages");
                }
                return _SoftwareInstallerPackages;
            }
        }
        private ObjectSet<SoftwareInstallerPackage> _SoftwareInstallerPackages;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SoftwareInstallerSetting> SoftwareInstallerSettings
        {
            get
            {
                if ((_SoftwareInstallerSettings == null))
                {
                    _SoftwareInstallerSettings = base.CreateObjectSet<SoftwareInstallerSetting>("SoftwareInstallerSettings");
                }
                return _SoftwareInstallerSettings;
            }
        }
        private ObjectSet<SoftwareInstallerSetting> _SoftwareInstallerSettings;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ScenarioSession> ScenarioSessions
        {
            get
            {
                if ((_ScenarioSessions == null))
                {
                    _ScenarioSessions = base.CreateObjectSet<ScenarioSession>("ScenarioSessions");
                }
                return _ScenarioSessions;
            }
        }
        private ObjectSet<ScenarioSession> _ScenarioSessions;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the VirtualResources EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToVirtualResources(VirtualResource virtualResource)
        {
            base.AddObject("VirtualResources", virtualResource);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ResourceWindowsCategories EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToResourceWindowsCategories(ResourceWindowsCategory resourceWindowsCategory)
        {
            base.AddObject("ResourceWindowsCategories", resourceWindowsCategory);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ConfigurationTreeFolders EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToConfigurationTreeFolders(ConfigurationTreeFolder configurationTreeFolder)
        {
            base.AddObject("ConfigurationTreeFolders", configurationTreeFolder);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the MetadataTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMetadataTypes(MetadataType metadataType)
        {
            base.AddObject("MetadataTypes", metadataType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ResourceTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToResourceTypes(ResourceType resourceType)
        {
            base.AddObject("ResourceTypes", resourceType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the VirtualResourceMetadataSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToVirtualResourceMetadataSet(VirtualResourceMetadata virtualResourceMetadata)
        {
            base.AddObject("VirtualResourceMetadataSet", virtualResourceMetadata);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserGroups EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserGroups(UserGroup userGroup)
        {
            base.AddObject("UserGroups", userGroup);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the VirtualMachineGroupAssocs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToVirtualMachineGroupAssocs(VirtualMachineGroupAssoc virtualMachineGroupAssoc)
        {
            base.AddObject("VirtualMachineGroupAssocs", virtualMachineGroupAssoc);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ActiveDirectoryGroups EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToActiveDirectoryGroups(ActiveDirectoryGroup activeDirectoryGroup)
        {
            base.AddObject("ActiveDirectoryGroups", activeDirectoryGroup);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the VirtualResourceMetadataAssetUsages EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToVirtualResourceMetadataAssetUsages(VirtualResourceMetadataAssetUsage virtualResourceMetadataAssetUsage)
        {
            base.AddObject("VirtualResourceMetadataAssetUsages", virtualResourceMetadataAssetUsage);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the VirtualResourceMetadataDocumentUsages EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToVirtualResourceMetadataDocumentUsages(VirtualResourceMetadataDocumentUsage virtualResourceMetadataDocumentUsage)
        {
            base.AddObject("VirtualResourceMetadataDocumentUsages", virtualResourceMetadataDocumentUsage);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the VirtualResourceMetadataServerUsages EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToVirtualResourceMetadataServerUsages(VirtualResourceMetadataServerUsage virtualResourceMetadataServerUsage)
        {
            base.AddObject("VirtualResourceMetadataServerUsages", virtualResourceMetadataServerUsage);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the VirtualResourceMetadataPrintQueueUsages EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToVirtualResourceMetadataPrintQueueUsages(VirtualResourceMetadataPrintQueueUsage virtualResourceMetadataPrintQueueUsage)
        {
            base.AddObject("VirtualResourceMetadataPrintQueueUsages", virtualResourceMetadataPrintQueueUsage);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SystemSettings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSystemSettings(SystemSetting systemSetting)
        {
            base.AddObject("SystemSettings", systemSetting);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the VirtualResourceMetadataRetrySettings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToVirtualResourceMetadataRetrySettings(VirtualResourceMetadataRetrySetting virtualResourceMetadataRetrySetting)
        {
            base.AddObject("VirtualResourceMetadataRetrySettings", virtualResourceMetadataRetrySetting);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Users EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUsers(User user)
        {
            base.AddObject("Users", user);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the EnterpriseScenarios EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToEnterpriseScenarios(EnterpriseScenario enterpriseScenario)
        {
            base.AddObject("EnterpriseScenarios", enterpriseScenario);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the AssociatedProducts EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAssociatedProducts(AssociatedProduct associatedProduct)
        {
            base.AddObject("AssociatedProducts", associatedProduct);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the AssociatedProductVersions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAssociatedProductVersions(AssociatedProductVersion associatedProductVersion)
        {
            base.AddObject("AssociatedProductVersions", associatedProductVersion);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SoftwareInstallers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSoftwareInstallers(SoftwareInstaller softwareInstaller)
        {
            base.AddObject("SoftwareInstallers", softwareInstaller);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SoftwareInstallerPackages EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSoftwareInstallerPackages(SoftwareInstallerPackage softwareInstallerPackage)
        {
            base.AddObject("SoftwareInstallerPackages", softwareInstallerPackage);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SoftwareInstallerSettings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSoftwareInstallerSettings(SoftwareInstallerSetting softwareInstallerSetting)
        {
            base.AddObject("SoftwareInstallerSettings", softwareInstallerSetting);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ScenarioSessions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToScenarioSessions(ScenarioSession scenarioSession)
        {
            base.AddObject("ScenarioSessions", scenarioSession);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="ActiveDirectoryGroup")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ActiveDirectoryGroup : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ActiveDirectoryGroup object.
        /// </summary>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="description">Initial value of the Description property.</param>
        public static ActiveDirectoryGroup CreateActiveDirectoryGroup(global::System.String name, global::System.String description)
        {
            ActiveDirectoryGroup activeDirectoryGroup = new ActiveDirectoryGroup();
            activeDirectoryGroup.Name = name;
            activeDirectoryGroup.Description = description;
            return activeDirectoryGroup;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = StructuralObject.SetValidValue(value, false, "Name");
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false, "Description");
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="AdminWorker")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AdminWorker : VirtualResource
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new AdminWorker object.
        /// </summary>
        /// <param name="virtualResourceId">Initial value of the VirtualResourceId property.</param>
        /// <param name="enterpriseScenarioId">Initial value of the EnterpriseScenarioId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="resourceType">Initial value of the ResourceType property.</param>
        /// <param name="instanceCount">Initial value of the InstanceCount property.</param>
        /// <param name="platform">Initial value of the Platform property.</param>
        /// <param name="enabled">Initial value of the Enabled property.</param>
        /// <param name="testCaseId">Initial value of the TestCaseId property.</param>
        public static AdminWorker CreateAdminWorker(global::System.Guid virtualResourceId, global::System.Guid enterpriseScenarioId, global::System.String name, global::System.String resourceType, global::System.Int32 instanceCount, global::System.String platform, global::System.Boolean enabled, global::System.Int32 testCaseId)
        {
            AdminWorker adminWorker = new AdminWorker();
            adminWorker.VirtualResourceId = virtualResourceId;
            adminWorker.EnterpriseScenarioId = enterpriseScenarioId;
            adminWorker.Name = name;
            adminWorker.ResourceType = resourceType;
            adminWorker.InstanceCount = instanceCount;
            adminWorker.Platform = platform;
            adminWorker.Enabled = enabled;
            adminWorker.TestCaseId = testCaseId;
            return adminWorker;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        private global::System.String DBExecutionMode
        {
            get
            {
                return _DBExecutionMode;
            }
            set
            {
                OnDBExecutionModeChanging(value);
                ReportPropertyChanging("DBExecutionMode");
                _DBExecutionMode = StructuralObject.SetValidValue(value, false, "DBExecutionMode");
                ReportPropertyChanged("DBExecutionMode");
                OnDBExecutionModeChanged();
            }
        }
        private global::System.String _DBExecutionMode;
        partial void OnDBExecutionModeChanging(global::System.String value);
        partial void OnDBExecutionModeChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="AssociatedProduct")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AssociatedProduct : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new AssociatedProduct object.
        /// </summary>
        /// <param name="associatedProductId">Initial value of the AssociatedProductId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static AssociatedProduct CreateAssociatedProduct(global::System.Guid associatedProductId, global::System.String name)
        {
            AssociatedProduct associatedProduct = new AssociatedProduct();
            associatedProduct.AssociatedProductId = associatedProductId;
            associatedProduct.Name = name;
            return associatedProduct;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid AssociatedProductId
        {
            get
            {
                return _AssociatedProductId;
            }
            set
            {
                if (_AssociatedProductId != value)
                {
                    OnAssociatedProductIdChanging(value);
                    ReportPropertyChanging("AssociatedProductId");
                    _AssociatedProductId = StructuralObject.SetValidValue(value, "AssociatedProductId");
                    ReportPropertyChanged("AssociatedProductId");
                    OnAssociatedProductIdChanged();
                }
            }
        }
        private global::System.Guid _AssociatedProductId;
        partial void OnAssociatedProductIdChanging(global::System.Guid value);
        partial void OnAssociatedProductIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Vendor
        {
            get
            {
                return _Vendor;
            }
            set
            {
                OnVendorChanging(value);
                ReportPropertyChanging("Vendor");
                _Vendor = StructuralObject.SetValidValue(value, true, "Vendor");
                ReportPropertyChanged("Vendor");
                OnVendorChanged();
            }
        }
        private global::System.String _Vendor;
        partial void OnVendorChanging(global::System.String value);
        partial void OnVendorChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_AssociatedProductVersion_AssociatedProduct", "AssociatedProductVersion")]
        public EntityCollection<AssociatedProductVersion> AssociatedProductVersions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<AssociatedProductVersion>("EnterpriseTestModel.FK_AssociatedProductVersion_AssociatedProduct", "AssociatedProductVersion");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<AssociatedProductVersion>("EnterpriseTestModel.FK_AssociatedProductVersion_AssociatedProduct", "AssociatedProductVersion", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "AssociatedProductMetadataTypeAssoc", "MetadataType")]
        public EntityCollection<MetadataType> MetadataTypes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MetadataType>("EnterpriseTestModel.AssociatedProductMetadataTypeAssoc", "MetadataType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MetadataType>("EnterpriseTestModel.AssociatedProductMetadataTypeAssoc", "MetadataType", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="AssociatedProductVersion")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AssociatedProductVersion : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new AssociatedProductVersion object.
        /// </summary>
        /// <param name="version">Initial value of the Version property.</param>
        /// <param name="associatedProductId">Initial value of the AssociatedProductId property.</param>
        /// <param name="enterpriseScenarioId">Initial value of the EnterpriseScenarioId property.</param>
        /// <param name="active">Initial value of the Active property.</param>
        public static AssociatedProductVersion CreateAssociatedProductVersion(global::System.String version, global::System.Guid associatedProductId, global::System.Guid enterpriseScenarioId, global::System.Boolean active)
        {
            AssociatedProductVersion associatedProductVersion = new AssociatedProductVersion();
            associatedProductVersion.Version = version;
            associatedProductVersion.AssociatedProductId = associatedProductId;
            associatedProductVersion.EnterpriseScenarioId = enterpriseScenarioId;
            associatedProductVersion.Active = active;
            return associatedProductVersion;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Version
        {
            get
            {
                return _Version;
            }
            set
            {
                OnVersionChanging(value);
                ReportPropertyChanging("Version");
                _Version = StructuralObject.SetValidValue(value, false, "Version");
                ReportPropertyChanged("Version");
                OnVersionChanged();
            }
        }
        private global::System.String _Version;
        partial void OnVersionChanging(global::System.String value);
        partial void OnVersionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid AssociatedProductId
        {
            get
            {
                return _AssociatedProductId;
            }
            set
            {
                if (_AssociatedProductId != value)
                {
                    OnAssociatedProductIdChanging(value);
                    ReportPropertyChanging("AssociatedProductId");
                    _AssociatedProductId = StructuralObject.SetValidValue(value, "AssociatedProductId");
                    ReportPropertyChanged("AssociatedProductId");
                    OnAssociatedProductIdChanged();
                }
            }
        }
        private global::System.Guid _AssociatedProductId;
        partial void OnAssociatedProductIdChanging(global::System.Guid value);
        partial void OnAssociatedProductIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid EnterpriseScenarioId
        {
            get
            {
                return _EnterpriseScenarioId;
            }
            set
            {
                if (_EnterpriseScenarioId != value)
                {
                    OnEnterpriseScenarioIdChanging(value);
                    ReportPropertyChanging("EnterpriseScenarioId");
                    _EnterpriseScenarioId = StructuralObject.SetValidValue(value, "EnterpriseScenarioId");
                    ReportPropertyChanged("EnterpriseScenarioId");
                    OnEnterpriseScenarioIdChanged();
                }
            }
        }
        private global::System.Guid _EnterpriseScenarioId;
        partial void OnEnterpriseScenarioIdChanging(global::System.Guid value);
        partial void OnEnterpriseScenarioIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Active
        {
            get
            {
                return _Active;
            }
            set
            {
                OnActiveChanging(value);
                ReportPropertyChanging("Active");
                _Active = StructuralObject.SetValidValue(value, "Active");
                ReportPropertyChanged("Active");
                OnActiveChanged();
            }
        }
        private global::System.Boolean _Active;
        partial void OnActiveChanging(global::System.Boolean value);
        partial void OnActiveChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_AssociatedProductVersion_AssociatedProduct", "AssociatedProduct")]
        public AssociatedProduct AssociatedProduct
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AssociatedProduct>("EnterpriseTestModel.FK_AssociatedProductVersion_AssociatedProduct", "AssociatedProduct").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AssociatedProduct>("EnterpriseTestModel.FK_AssociatedProductVersion_AssociatedProduct", "AssociatedProduct").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<AssociatedProduct> AssociatedProductReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AssociatedProduct>("EnterpriseTestModel.FK_AssociatedProductVersion_AssociatedProduct", "AssociatedProduct");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<AssociatedProduct>("EnterpriseTestModel.FK_AssociatedProductVersion_AssociatedProduct", "AssociatedProduct", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_AssociatedProductVersion_EnterpriseScenario", "EnterpriseScenario")]
        public EnterpriseScenario EnterpriseScenario
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EnterpriseScenario>("EnterpriseTestModel.FK_AssociatedProductVersion_EnterpriseScenario", "EnterpriseScenario").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EnterpriseScenario>("EnterpriseTestModel.FK_AssociatedProductVersion_EnterpriseScenario", "EnterpriseScenario").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<EnterpriseScenario> EnterpriseScenarioReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EnterpriseScenario>("EnterpriseTestModel.FK_AssociatedProductVersion_EnterpriseScenario", "EnterpriseScenario");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<EnterpriseScenario>("EnterpriseTestModel.FK_AssociatedProductVersion_EnterpriseScenario", "EnterpriseScenario", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="CitrixWorker")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CitrixWorker : OfficeWorker
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CitrixWorker object.
        /// </summary>
        /// <param name="virtualResourceId">Initial value of the VirtualResourceId property.</param>
        /// <param name="enterpriseScenarioId">Initial value of the EnterpriseScenarioId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="resourceType">Initial value of the ResourceType property.</param>
        /// <param name="instanceCount">Initial value of the InstanceCount property.</param>
        /// <param name="platform">Initial value of the Platform property.</param>
        /// <param name="enabled">Initial value of the Enabled property.</param>
        /// <param name="testCaseId">Initial value of the TestCaseId property.</param>
        /// <param name="repeatCount">Initial value of the RepeatCount property.</param>
        /// <param name="randomizeStartupDelay">Initial value of the RandomizeStartupDelay property.</param>
        /// <param name="minStartupDelay">Initial value of the MinStartupDelay property.</param>
        /// <param name="maxStartupDelay">Initial value of the MaxStartupDelay property.</param>
        /// <param name="randomizeActivities">Initial value of the RandomizeActivities property.</param>
        /// <param name="randomizeActivityDelay">Initial value of the RandomizeActivityDelay property.</param>
        /// <param name="minActivityDelay">Initial value of the MinActivityDelay property.</param>
        /// <param name="maxActivityDelay">Initial value of the MaxActivityDelay property.</param>
        /// <param name="durationTime">Initial value of the DurationTime property.</param>
        /// <param name="userPool">Initial value of the UserPool property.</param>
        /// <param name="serverHostname">Initial value of the ServerHostname property.</param>
        /// <param name="dBWorkerRunMode">Initial value of the DBWorkerRunMode property.</param>
        /// <param name="publishedApp">Initial value of the PublishedApp property.</param>
        public static CitrixWorker CreateCitrixWorker(global::System.Guid virtualResourceId, global::System.Guid enterpriseScenarioId, global::System.String name, global::System.String resourceType, global::System.Int32 instanceCount, global::System.String platform, global::System.Boolean enabled, global::System.Int32 testCaseId, global::System.Int32 repeatCount, global::System.Boolean randomizeStartupDelay, global::System.Int32 minStartupDelay, global::System.Int32 maxStartupDelay, global::System.Boolean randomizeActivities, global::System.Boolean randomizeActivityDelay, global::System.Int32 minActivityDelay, global::System.Int32 maxActivityDelay, global::System.Int32 durationTime, global::System.String userPool, global::System.String serverHostname, global::System.String dBWorkerRunMode, global::System.String publishedApp)
        {
            CitrixWorker citrixWorker = new CitrixWorker();
            citrixWorker.VirtualResourceId = virtualResourceId;
            citrixWorker.EnterpriseScenarioId = enterpriseScenarioId;
            citrixWorker.Name = name;
            citrixWorker.ResourceType = resourceType;
            citrixWorker.InstanceCount = instanceCount;
            citrixWorker.Platform = platform;
            citrixWorker.Enabled = enabled;
            citrixWorker.TestCaseId = testCaseId;
            citrixWorker.RepeatCount = repeatCount;
            citrixWorker.RandomizeStartupDelay = randomizeStartupDelay;
            citrixWorker.MinStartupDelay = minStartupDelay;
            citrixWorker.MaxStartupDelay = maxStartupDelay;
            citrixWorker.RandomizeActivities = randomizeActivities;
            citrixWorker.RandomizeActivityDelay = randomizeActivityDelay;
            citrixWorker.MinActivityDelay = minActivityDelay;
            citrixWorker.MaxActivityDelay = maxActivityDelay;
            citrixWorker.DurationTime = durationTime;
            citrixWorker.UserPool = userPool;
            citrixWorker.ServerHostname = serverHostname;
            citrixWorker.DBWorkerRunMode = dBWorkerRunMode;
            citrixWorker.PublishedApp = publishedApp;
            return citrixWorker;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ServerHostname
        {
            get
            {
                return _ServerHostname;
            }
            set
            {
                OnServerHostnameChanging(value);
                ReportPropertyChanging("ServerHostname");
                _ServerHostname = StructuralObject.SetValidValue(value, false, "ServerHostname");
                ReportPropertyChanged("ServerHostname");
                OnServerHostnameChanged();
            }
        }
        private global::System.String _ServerHostname;
        partial void OnServerHostnameChanging(global::System.String value);
        partial void OnServerHostnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DBWorkerRunMode
        {
            get
            {
                return _DBWorkerRunMode;
            }
            set
            {
                OnDBWorkerRunModeChanging(value);
                ReportPropertyChanging("DBWorkerRunMode");
                _DBWorkerRunMode = StructuralObject.SetValidValue(value, false, "DBWorkerRunMode");
                ReportPropertyChanged("DBWorkerRunMode");
                OnDBWorkerRunModeChanged();
            }
        }
        private global::System.String _DBWorkerRunMode;
        partial void OnDBWorkerRunModeChanging(global::System.String value);
        partial void OnDBWorkerRunModeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PublishedApp
        {
            get
            {
                return _PublishedApp;
            }
            set
            {
                OnPublishedAppChanging(value);
                ReportPropertyChanging("PublishedApp");
                _PublishedApp = StructuralObject.SetValidValue(value, false, "PublishedApp");
                ReportPropertyChanged("PublishedApp");
                OnPublishedAppChanged();
            }
        }
        private global::System.String _PublishedApp;
        partial void OnPublishedAppChanging(global::System.String value);
        partial void OnPublishedAppChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="ConfigurationTreeFolder")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ConfigurationTreeFolder : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ConfigurationTreeFolder object.
        /// </summary>
        /// <param name="configurationTreeFolderId">Initial value of the ConfigurationTreeFolderId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="folderType">Initial value of the FolderType property.</param>
        public static ConfigurationTreeFolder CreateConfigurationTreeFolder(global::System.Guid configurationTreeFolderId, global::System.String name, global::System.String folderType)
        {
            ConfigurationTreeFolder configurationTreeFolder = new ConfigurationTreeFolder();
            configurationTreeFolder.ConfigurationTreeFolderId = configurationTreeFolderId;
            configurationTreeFolder.Name = name;
            configurationTreeFolder.FolderType = folderType;
            return configurationTreeFolder;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ConfigurationTreeFolderId
        {
            get
            {
                return _ConfigurationTreeFolderId;
            }
            set
            {
                if (_ConfigurationTreeFolderId != value)
                {
                    OnConfigurationTreeFolderIdChanging(value);
                    ReportPropertyChanging("ConfigurationTreeFolderId");
                    _ConfigurationTreeFolderId = StructuralObject.SetValidValue(value, "ConfigurationTreeFolderId");
                    ReportPropertyChanged("ConfigurationTreeFolderId");
                    OnConfigurationTreeFolderIdChanged();
                }
            }
        }
        private global::System.Guid _ConfigurationTreeFolderId;
        partial void OnConfigurationTreeFolderIdChanging(global::System.Guid value);
        partial void OnConfigurationTreeFolderIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FolderType
        {
            get
            {
                return _FolderType;
            }
            set
            {
                OnFolderTypeChanging(value);
                ReportPropertyChanging("FolderType");
                _FolderType = StructuralObject.SetValidValue(value, false, "FolderType");
                ReportPropertyChanged("FolderType");
                OnFolderTypeChanged();
            }
        }
        private global::System.String _FolderType;
        partial void OnFolderTypeChanging(global::System.String value);
        partial void OnFolderTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> ParentId
        {
            get
            {
                return _ParentId;
            }
            set
            {
                OnParentIdChanging(value);
                ReportPropertyChanging("ParentId");
                _ParentId = StructuralObject.SetValidValue(value, "ParentId");
                ReportPropertyChanged("ParentId");
                OnParentIdChanged();
            }
        }
        private Nullable<global::System.Guid> _ParentId;
        partial void OnParentIdChanging(Nullable<global::System.Guid> value);
        partial void OnParentIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "Fk_EnterpriseScenario", "EnterpriseScenario")]
        public EntityCollection<EnterpriseScenario> EnterpriseScenarios
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<EnterpriseScenario>("EnterpriseTestModel.Fk_EnterpriseScenario", "EnterpriseScenario");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<EnterpriseScenario>("EnterpriseTestModel.Fk_EnterpriseScenario", "EnterpriseScenario", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="EnterpriseScenario")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class EnterpriseScenario : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new EnterpriseScenario object.
        /// </summary>
        /// <param name="enterpriseScenarioId">Initial value of the EnterpriseScenarioId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="owner">Initial value of the Owner property.</param>
        public static EnterpriseScenario CreateEnterpriseScenario(global::System.Guid enterpriseScenarioId, global::System.String name, global::System.String owner)
        {
            EnterpriseScenario enterpriseScenario = new EnterpriseScenario();
            enterpriseScenario.EnterpriseScenarioId = enterpriseScenarioId;
            enterpriseScenario.Name = name;
            enterpriseScenario.Owner = owner;
            return enterpriseScenario;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid EnterpriseScenarioId
        {
            get
            {
                return _EnterpriseScenarioId;
            }
            set
            {
                if (_EnterpriseScenarioId != value)
                {
                    OnEnterpriseScenarioIdChanging(value);
                    ReportPropertyChanging("EnterpriseScenarioId");
                    _EnterpriseScenarioId = StructuralObject.SetValidValue(value, "EnterpriseScenarioId");
                    ReportPropertyChanged("EnterpriseScenarioId");
                    OnEnterpriseScenarioIdChanged();
                }
            }
        }
        private global::System.Guid _EnterpriseScenarioId;
        partial void OnEnterpriseScenarioIdChanging(global::System.Guid value);
        partial void OnEnterpriseScenarioIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true, "Description");
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Vertical
        {
            get
            {
                return _Vertical;
            }
            set
            {
                OnVerticalChanging(value);
                ReportPropertyChanging("Vertical");
                _Vertical = StructuralObject.SetValidValue(value, true, "Vertical");
                ReportPropertyChanged("Vertical");
                OnVerticalChanged();
            }
        }
        private global::System.String _Vertical;
        partial void OnVerticalChanging(global::System.String value);
        partial void OnVerticalChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Company
        {
            get
            {
                return _Company;
            }
            set
            {
                OnCompanyChanging(value);
                ReportPropertyChanging("Company");
                _Company = StructuralObject.SetValidValue(value, true, "Company");
                ReportPropertyChanged("Company");
                OnCompanyChanged();
            }
        }
        private global::System.String _Company;
        partial void OnCompanyChanging(global::System.String value);
        partial void OnCompanyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> FolderId
        {
            get
            {
                return _FolderId;
            }
            set
            {
                OnFolderIdChanging(value);
                ReportPropertyChanging("FolderId");
                _FolderId = StructuralObject.SetValidValue(value, "FolderId");
                ReportPropertyChanged("FolderId");
                OnFolderIdChanged();
            }
        }
        private Nullable<global::System.Guid> _FolderId;
        partial void OnFolderIdChanging(Nullable<global::System.Guid> value);
        partial void OnFolderIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Owner
        {
            get
            {
                return _Owner;
            }
            set
            {
                OnOwnerChanging(value);
                ReportPropertyChanging("Owner");
                _Owner = StructuralObject.SetValidValue(value, false, "Owner");
                ReportPropertyChanged("Owner");
                OnOwnerChanged();
            }
        }
        private global::System.String _Owner;
        partial void OnOwnerChanging(global::System.String value);
        partial void OnOwnerChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScenarioSettings
        {
            get
            {
                return _ScenarioSettings;
            }
            set
            {
                OnScenarioSettingsChanging(value);
                ReportPropertyChanging("ScenarioSettings");
                _ScenarioSettings = StructuralObject.SetValidValue(value, true, "ScenarioSettings");
                ReportPropertyChanged("ScenarioSettings");
                OnScenarioSettingsChanged();
            }
        }
        private global::System.String _ScenarioSettings;
        partial void OnScenarioSettingsChanging(global::System.String value);
        partial void OnScenarioSettingsChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_VirtualResource_EnterpriseScenario", "VirtualResource")]
        public EntityCollection<VirtualResource> VirtualResources
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<VirtualResource>("EnterpriseTestModel.FK_VirtualResource_EnterpriseScenario", "VirtualResource");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<VirtualResource>("EnterpriseTestModel.FK_VirtualResource_EnterpriseScenario", "VirtualResource", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "EnterpriseScenarioUserGroupAssoc", "UserGroup")]
        public EntityCollection<UserGroup> UserGroups
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserGroup>("EnterpriseTestModel.EnterpriseScenarioUserGroupAssoc", "UserGroup");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserGroup>("EnterpriseTestModel.EnterpriseScenarioUserGroupAssoc", "UserGroup", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "Fk_EnterpriseScenario", "ConfigurationTreeFolder")]
        public ConfigurationTreeFolder ConfigurationTreeFolder
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ConfigurationTreeFolder>("EnterpriseTestModel.Fk_EnterpriseScenario", "ConfigurationTreeFolder").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ConfigurationTreeFolder>("EnterpriseTestModel.Fk_EnterpriseScenario", "ConfigurationTreeFolder").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ConfigurationTreeFolder> ConfigurationTreeFolderReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ConfigurationTreeFolder>("EnterpriseTestModel.Fk_EnterpriseScenario", "ConfigurationTreeFolder");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ConfigurationTreeFolder>("EnterpriseTestModel.Fk_EnterpriseScenario", "ConfigurationTreeFolder", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_AssociatedProductVersion_EnterpriseScenario", "AssociatedProductVersion")]
        public EntityCollection<AssociatedProductVersion> AssociatedProductVersions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<AssociatedProductVersion>("EnterpriseTestModel.FK_AssociatedProductVersion_EnterpriseScenario", "AssociatedProductVersion");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<AssociatedProductVersion>("EnterpriseTestModel.FK_AssociatedProductVersion_EnterpriseScenario", "AssociatedProductVersion", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="EventLogCollector")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class EventLogCollector : VirtualResource
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new EventLogCollector object.
        /// </summary>
        /// <param name="virtualResourceId">Initial value of the VirtualResourceId property.</param>
        /// <param name="enterpriseScenarioId">Initial value of the EnterpriseScenarioId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="resourceType">Initial value of the ResourceType property.</param>
        /// <param name="instanceCount">Initial value of the InstanceCount property.</param>
        /// <param name="platform">Initial value of the Platform property.</param>
        /// <param name="enabled">Initial value of the Enabled property.</param>
        /// <param name="testCaseId">Initial value of the TestCaseId property.</param>
        /// <param name="hostName">Initial value of the HostName property.</param>
        /// <param name="pollingInterval">Initial value of the PollingInterval property.</param>
        /// <param name="componentsData">Initial value of the ComponentsData property.</param>
        /// <param name="entryTypesData">Initial value of the EntryTypesData property.</param>
        public static EventLogCollector CreateEventLogCollector(global::System.Guid virtualResourceId, global::System.Guid enterpriseScenarioId, global::System.String name, global::System.String resourceType, global::System.Int32 instanceCount, global::System.String platform, global::System.Boolean enabled, global::System.Int32 testCaseId, global::System.String hostName, global::System.Int32 pollingInterval, global::System.String componentsData, global::System.String entryTypesData)
        {
            EventLogCollector eventLogCollector = new EventLogCollector();
            eventLogCollector.VirtualResourceId = virtualResourceId;
            eventLogCollector.EnterpriseScenarioId = enterpriseScenarioId;
            eventLogCollector.Name = name;
            eventLogCollector.ResourceType = resourceType;
            eventLogCollector.InstanceCount = instanceCount;
            eventLogCollector.Platform = platform;
            eventLogCollector.Enabled = enabled;
            eventLogCollector.TestCaseId = testCaseId;
            eventLogCollector.HostName = hostName;
            eventLogCollector.PollingInterval = pollingInterval;
            eventLogCollector.ComponentsData = componentsData;
            eventLogCollector.EntryTypesData = entryTypesData;
            return eventLogCollector;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String HostName
        {
            get
            {
                return _HostName;
            }
            set
            {
                OnHostNameChanging(value);
                ReportPropertyChanging("HostName");
                _HostName = StructuralObject.SetValidValue(value, false, "HostName");
                ReportPropertyChanged("HostName");
                OnHostNameChanged();
            }
        }
        private global::System.String _HostName;
        partial void OnHostNameChanging(global::System.String value);
        partial void OnHostNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PollingInterval
        {
            get
            {
                return _PollingInterval;
            }
            set
            {
                OnPollingIntervalChanging(value);
                ReportPropertyChanging("PollingInterval");
                _PollingInterval = StructuralObject.SetValidValue(value, "PollingInterval");
                ReportPropertyChanged("PollingInterval");
                OnPollingIntervalChanged();
            }
        }
        private global::System.Int32 _PollingInterval;
        partial void OnPollingIntervalChanging(global::System.Int32 value);
        partial void OnPollingIntervalChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ComponentsData
        {
            get
            {
                return _ComponentsData;
            }
            set
            {
                OnComponentsDataChanging(value);
                ReportPropertyChanging("ComponentsData");
                _ComponentsData = StructuralObject.SetValidValue(value, false, "ComponentsData");
                ReportPropertyChanged("ComponentsData");
                OnComponentsDataChanged();
            }
        }
        private global::System.String _ComponentsData;
        partial void OnComponentsDataChanging(global::System.String value);
        partial void OnComponentsDataChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String EntryTypesData
        {
            get
            {
                return _EntryTypesData;
            }
            set
            {
                OnEntryTypesDataChanging(value);
                ReportPropertyChanging("EntryTypesData");
                _EntryTypesData = StructuralObject.SetValidValue(value, false, "EntryTypesData");
                ReportPropertyChanged("EntryTypesData");
                OnEntryTypesDataChanged();
            }
        }
        private global::System.String _EntryTypesData;
        partial void OnEntryTypesDataChanging(global::System.String value);
        partial void OnEntryTypesDataChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="LoadTester")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LoadTester : VirtualResource
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new LoadTester object.
        /// </summary>
        /// <param name="virtualResourceId">Initial value of the VirtualResourceId property.</param>
        /// <param name="enterpriseScenarioId">Initial value of the EnterpriseScenarioId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="resourceType">Initial value of the ResourceType property.</param>
        /// <param name="instanceCount">Initial value of the InstanceCount property.</param>
        /// <param name="platform">Initial value of the Platform property.</param>
        /// <param name="enabled">Initial value of the Enabled property.</param>
        /// <param name="testCaseId">Initial value of the TestCaseId property.</param>
        /// <param name="threadsPerVM">Initial value of the ThreadsPerVM property.</param>
        public static LoadTester CreateLoadTester(global::System.Guid virtualResourceId, global::System.Guid enterpriseScenarioId, global::System.String name, global::System.String resourceType, global::System.Int32 instanceCount, global::System.String platform, global::System.Boolean enabled, global::System.Int32 testCaseId, global::System.Int32 threadsPerVM)
        {
            LoadTester loadTester = new LoadTester();
            loadTester.VirtualResourceId = virtualResourceId;
            loadTester.EnterpriseScenarioId = enterpriseScenarioId;
            loadTester.Name = name;
            loadTester.ResourceType = resourceType;
            loadTester.InstanceCount = instanceCount;
            loadTester.Platform = platform;
            loadTester.Enabled = enabled;
            loadTester.TestCaseId = testCaseId;
            loadTester.ThreadsPerVM = threadsPerVM;
            return loadTester;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ThreadsPerVM
        {
            get
            {
                return _ThreadsPerVM;
            }
            set
            {
                OnThreadsPerVMChanging(value);
                ReportPropertyChanging("ThreadsPerVM");
                _ThreadsPerVM = StructuralObject.SetValidValue(value, "ThreadsPerVM");
                ReportPropertyChanged("ThreadsPerVM");
                OnThreadsPerVMChanged();
            }
        }
        private global::System.Int32 _ThreadsPerVM;
        partial void OnThreadsPerVMChanging(global::System.Int32 value);
        partial void OnThreadsPerVMChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="MetadataType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MetadataType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new MetadataType object.
        /// </summary>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="title">Initial value of the Title property.</param>
        public static MetadataType CreateMetadataType(global::System.String name, global::System.String title)
        {
            MetadataType metadataType = new MetadataType();
            metadataType.Name = name;
            metadataType.Title = title;
            return metadataType;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = StructuralObject.SetValidValue(value, false, "Name");
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false, "Title");
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Group
        {
            get
            {
                return _Group;
            }
            set
            {
                OnGroupChanging(value);
                ReportPropertyChanging("Group");
                _Group = StructuralObject.SetValidValue(value, true, "Group");
                ReportPropertyChanged("Group");
                OnGroupChanged();
            }
        }
        private global::System.String _Group;
        partial void OnGroupChanging(global::System.String value);
        partial void OnGroupChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AssemblyName
        {
            get
            {
                return _AssemblyName;
            }
            set
            {
                OnAssemblyNameChanging(value);
                ReportPropertyChanging("AssemblyName");
                _AssemblyName = StructuralObject.SetValidValue(value, true, "AssemblyName");
                ReportPropertyChanged("AssemblyName");
                OnAssemblyNameChanged();
            }
        }
        private global::System.String _AssemblyName;
        partial void OnAssemblyNameChanging(global::System.String value);
        partial void OnAssemblyNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] Icon
        {
            get
            {
                return StructuralObject.GetValidValue(_Icon);
            }
            set
            {
                OnIconChanging(value);
                ReportPropertyChanging("Icon");
                _Icon = StructuralObject.SetValidValue(value, true, "Icon");
                ReportPropertyChanged("Icon");
                OnIconChanged();
            }
        }
        private global::System.Byte[] _Icon;
        partial void OnIconChanging(global::System.Byte[] value);
        partial void OnIconChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "SoftwareInstallerPackageMetadataTypeAssoc", "SoftwareInstallerPackage")]
        public EntityCollection<SoftwareInstallerPackage> SoftwareInstallerPackages
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SoftwareInstallerPackage>("EnterpriseTestModel.SoftwareInstallerPackageMetadataTypeAssoc", "SoftwareInstallerPackage");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SoftwareInstallerPackage>("EnterpriseTestModel.SoftwareInstallerPackageMetadataTypeAssoc", "SoftwareInstallerPackage", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "ResourceTypeMetadataTypeAssoc", "ResourceType")]
        public EntityCollection<ResourceType> ResourceTypes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ResourceType>("EnterpriseTestModel.ResourceTypeMetadataTypeAssoc", "ResourceType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ResourceType>("EnterpriseTestModel.ResourceTypeMetadataTypeAssoc", "ResourceType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "AssociatedProductMetadataTypeAssoc", "AssociatedProduct")]
        public EntityCollection<AssociatedProduct> AssociatedProducts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<AssociatedProduct>("EnterpriseTestModel.AssociatedProductMetadataTypeAssoc", "AssociatedProduct");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<AssociatedProduct>("EnterpriseTestModel.AssociatedProductMetadataTypeAssoc", "AssociatedProduct", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="OfficeWorker")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [KnownTypeAttribute(typeof(CitrixWorker))]
    [KnownTypeAttribute(typeof(SolutionTester))]
    public partial class OfficeWorker : VirtualResource
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new OfficeWorker object.
        /// </summary>
        /// <param name="virtualResourceId">Initial value of the VirtualResourceId property.</param>
        /// <param name="enterpriseScenarioId">Initial value of the EnterpriseScenarioId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="resourceType">Initial value of the ResourceType property.</param>
        /// <param name="instanceCount">Initial value of the InstanceCount property.</param>
        /// <param name="platform">Initial value of the Platform property.</param>
        /// <param name="enabled">Initial value of the Enabled property.</param>
        /// <param name="testCaseId">Initial value of the TestCaseId property.</param>
        /// <param name="repeatCount">Initial value of the RepeatCount property.</param>
        /// <param name="randomizeStartupDelay">Initial value of the RandomizeStartupDelay property.</param>
        /// <param name="minStartupDelay">Initial value of the MinStartupDelay property.</param>
        /// <param name="maxStartupDelay">Initial value of the MaxStartupDelay property.</param>
        /// <param name="randomizeActivities">Initial value of the RandomizeActivities property.</param>
        /// <param name="randomizeActivityDelay">Initial value of the RandomizeActivityDelay property.</param>
        /// <param name="minActivityDelay">Initial value of the MinActivityDelay property.</param>
        /// <param name="maxActivityDelay">Initial value of the MaxActivityDelay property.</param>
        /// <param name="durationTime">Initial value of the DurationTime property.</param>
        /// <param name="userPool">Initial value of the UserPool property.</param>
        public static OfficeWorker CreateOfficeWorker(global::System.Guid virtualResourceId, global::System.Guid enterpriseScenarioId, global::System.String name, global::System.String resourceType, global::System.Int32 instanceCount, global::System.String platform, global::System.Boolean enabled, global::System.Int32 testCaseId, global::System.Int32 repeatCount, global::System.Boolean randomizeStartupDelay, global::System.Int32 minStartupDelay, global::System.Int32 maxStartupDelay, global::System.Boolean randomizeActivities, global::System.Boolean randomizeActivityDelay, global::System.Int32 minActivityDelay, global::System.Int32 maxActivityDelay, global::System.Int32 durationTime, global::System.String userPool)
        {
            OfficeWorker officeWorker = new OfficeWorker();
            officeWorker.VirtualResourceId = virtualResourceId;
            officeWorker.EnterpriseScenarioId = enterpriseScenarioId;
            officeWorker.Name = name;
            officeWorker.ResourceType = resourceType;
            officeWorker.InstanceCount = instanceCount;
            officeWorker.Platform = platform;
            officeWorker.Enabled = enabled;
            officeWorker.TestCaseId = testCaseId;
            officeWorker.RepeatCount = repeatCount;
            officeWorker.RandomizeStartupDelay = randomizeStartupDelay;
            officeWorker.MinStartupDelay = minStartupDelay;
            officeWorker.MaxStartupDelay = maxStartupDelay;
            officeWorker.RandomizeActivities = randomizeActivities;
            officeWorker.RandomizeActivityDelay = randomizeActivityDelay;
            officeWorker.MinActivityDelay = minActivityDelay;
            officeWorker.MaxActivityDelay = maxActivityDelay;
            officeWorker.DurationTime = durationTime;
            officeWorker.UserPool = userPool;
            return officeWorker;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RepeatCount
        {
            get
            {
                return _RepeatCount;
            }
            set
            {
                OnRepeatCountChanging(value);
                ReportPropertyChanging("RepeatCount");
                _RepeatCount = StructuralObject.SetValidValue(value, "RepeatCount");
                ReportPropertyChanged("RepeatCount");
                OnRepeatCountChanged();
            }
        }
        private global::System.Int32 _RepeatCount;
        partial void OnRepeatCountChanging(global::System.Int32 value);
        partial void OnRepeatCountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean RandomizeStartupDelay
        {
            get
            {
                return _RandomizeStartupDelay;
            }
            set
            {
                OnRandomizeStartupDelayChanging(value);
                ReportPropertyChanging("RandomizeStartupDelay");
                _RandomizeStartupDelay = StructuralObject.SetValidValue(value, "RandomizeStartupDelay");
                ReportPropertyChanged("RandomizeStartupDelay");
                OnRandomizeStartupDelayChanged();
            }
        }
        private global::System.Boolean _RandomizeStartupDelay;
        partial void OnRandomizeStartupDelayChanging(global::System.Boolean value);
        partial void OnRandomizeStartupDelayChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MinStartupDelay
        {
            get
            {
                return _MinStartupDelay;
            }
            set
            {
                OnMinStartupDelayChanging(value);
                ReportPropertyChanging("MinStartupDelay");
                _MinStartupDelay = StructuralObject.SetValidValue(value, "MinStartupDelay");
                ReportPropertyChanged("MinStartupDelay");
                OnMinStartupDelayChanged();
            }
        }
        private global::System.Int32 _MinStartupDelay;
        partial void OnMinStartupDelayChanging(global::System.Int32 value);
        partial void OnMinStartupDelayChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MaxStartupDelay
        {
            get
            {
                return _MaxStartupDelay;
            }
            set
            {
                OnMaxStartupDelayChanging(value);
                ReportPropertyChanging("MaxStartupDelay");
                _MaxStartupDelay = StructuralObject.SetValidValue(value, "MaxStartupDelay");
                ReportPropertyChanged("MaxStartupDelay");
                OnMaxStartupDelayChanged();
            }
        }
        private global::System.Int32 _MaxStartupDelay;
        partial void OnMaxStartupDelayChanging(global::System.Int32 value);
        partial void OnMaxStartupDelayChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean RandomizeActivities
        {
            get
            {
                return _RandomizeActivities;
            }
            set
            {
                OnRandomizeActivitiesChanging(value);
                ReportPropertyChanging("RandomizeActivities");
                _RandomizeActivities = StructuralObject.SetValidValue(value, "RandomizeActivities");
                ReportPropertyChanged("RandomizeActivities");
                OnRandomizeActivitiesChanged();
            }
        }
        private global::System.Boolean _RandomizeActivities;
        partial void OnRandomizeActivitiesChanging(global::System.Boolean value);
        partial void OnRandomizeActivitiesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean RandomizeActivityDelay
        {
            get
            {
                return _RandomizeActivityDelay;
            }
            set
            {
                OnRandomizeActivityDelayChanging(value);
                ReportPropertyChanging("RandomizeActivityDelay");
                _RandomizeActivityDelay = StructuralObject.SetValidValue(value, "RandomizeActivityDelay");
                ReportPropertyChanged("RandomizeActivityDelay");
                OnRandomizeActivityDelayChanged();
            }
        }
        private global::System.Boolean _RandomizeActivityDelay;
        partial void OnRandomizeActivityDelayChanging(global::System.Boolean value);
        partial void OnRandomizeActivityDelayChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MinActivityDelay
        {
            get
            {
                return _MinActivityDelay;
            }
            set
            {
                OnMinActivityDelayChanging(value);
                ReportPropertyChanging("MinActivityDelay");
                _MinActivityDelay = StructuralObject.SetValidValue(value, "MinActivityDelay");
                ReportPropertyChanged("MinActivityDelay");
                OnMinActivityDelayChanged();
            }
        }
        private global::System.Int32 _MinActivityDelay;
        partial void OnMinActivityDelayChanging(global::System.Int32 value);
        partial void OnMinActivityDelayChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MaxActivityDelay
        {
            get
            {
                return _MaxActivityDelay;
            }
            set
            {
                OnMaxActivityDelayChanging(value);
                ReportPropertyChanging("MaxActivityDelay");
                _MaxActivityDelay = StructuralObject.SetValidValue(value, "MaxActivityDelay");
                ReportPropertyChanged("MaxActivityDelay");
                OnMaxActivityDelayChanged();
            }
        }
        private global::System.Int32 _MaxActivityDelay;
        partial void OnMaxActivityDelayChanging(global::System.Int32 value);
        partial void OnMaxActivityDelayChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        private global::System.String DBRunMode
        {
            get
            {
                return _DBRunMode;
            }
            set
            {
                OnDBRunModeChanging(value);
                ReportPropertyChanging("DBRunMode");
                _DBRunMode = StructuralObject.SetValidValue(value, false, "DBRunMode");
                ReportPropertyChanged("DBRunMode");
                OnDBRunModeChanged();
            }
        }
        private global::System.String _DBRunMode;
        partial void OnDBRunModeChanging(global::System.String value);
        partial void OnDBRunModeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DurationTime
        {
            get
            {
                return _DurationTime;
            }
            set
            {
                OnDurationTimeChanging(value);
                ReportPropertyChanging("DurationTime");
                _DurationTime = StructuralObject.SetValidValue(value, "DurationTime");
                ReportPropertyChanged("DurationTime");
                OnDurationTimeChanged();
            }
        }
        private global::System.Int32 _DurationTime;
        partial void OnDurationTimeChanging(global::System.Int32 value);
        partial void OnDurationTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SecurityGroups
        {
            get
            {
                return _SecurityGroups;
            }
            set
            {
                OnSecurityGroupsChanging(value);
                ReportPropertyChanging("SecurityGroups");
                _SecurityGroups = StructuralObject.SetValidValue(value, true, "SecurityGroups");
                ReportPropertyChanged("SecurityGroups");
                OnSecurityGroupsChanged();
            }
        }
        private global::System.String _SecurityGroups;
        partial void OnSecurityGroupsChanging(global::System.String value);
        partial void OnSecurityGroupsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ExecutionSchedule
        {
            get
            {
                return _ExecutionSchedule;
            }
            set
            {
                OnExecutionScheduleChanging(value);
                ReportPropertyChanging("ExecutionSchedule");
                _ExecutionSchedule = StructuralObject.SetValidValue(value, true, "ExecutionSchedule");
                ReportPropertyChanged("ExecutionSchedule");
                OnExecutionScheduleChanged();
            }
        }
        private global::System.String _ExecutionSchedule;
        partial void OnExecutionScheduleChanging(global::System.String value);
        partial void OnExecutionScheduleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UserPool
        {
            get
            {
                return _UserPool;
            }
            set
            {
                OnUserPoolChanging(value);
                ReportPropertyChanging("UserPool");
                _UserPool = StructuralObject.SetValidValue(value, false, "UserPool");
                ReportPropertyChanged("UserPool");
                OnUserPoolChanged();
            }
        }
        private global::System.String _UserPool;
        partial void OnUserPoolChanging(global::System.String value);
        partial void OnUserPoolChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="PerfMonCollector")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PerfMonCollector : VirtualResource
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PerfMonCollector object.
        /// </summary>
        /// <param name="virtualResourceId">Initial value of the VirtualResourceId property.</param>
        /// <param name="enterpriseScenarioId">Initial value of the EnterpriseScenarioId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="resourceType">Initial value of the ResourceType property.</param>
        /// <param name="instanceCount">Initial value of the InstanceCount property.</param>
        /// <param name="platform">Initial value of the Platform property.</param>
        /// <param name="enabled">Initial value of the Enabled property.</param>
        /// <param name="testCaseId">Initial value of the TestCaseId property.</param>
        /// <param name="hostName">Initial value of the HostName property.</param>
        public static PerfMonCollector CreatePerfMonCollector(global::System.Guid virtualResourceId, global::System.Guid enterpriseScenarioId, global::System.String name, global::System.String resourceType, global::System.Int32 instanceCount, global::System.String platform, global::System.Boolean enabled, global::System.Int32 testCaseId, global::System.String hostName)
        {
            PerfMonCollector perfMonCollector = new PerfMonCollector();
            perfMonCollector.VirtualResourceId = virtualResourceId;
            perfMonCollector.EnterpriseScenarioId = enterpriseScenarioId;
            perfMonCollector.Name = name;
            perfMonCollector.ResourceType = resourceType;
            perfMonCollector.InstanceCount = instanceCount;
            perfMonCollector.Platform = platform;
            perfMonCollector.Enabled = enabled;
            perfMonCollector.TestCaseId = testCaseId;
            perfMonCollector.HostName = hostName;
            return perfMonCollector;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String HostName
        {
            get
            {
                return _HostName;
            }
            set
            {
                OnHostNameChanging(value);
                ReportPropertyChanging("HostName");
                _HostName = StructuralObject.SetValidValue(value, false, "HostName");
                ReportPropertyChanged("HostName");
                OnHostNameChanged();
            }
        }
        private global::System.String _HostName;
        partial void OnHostNameChanging(global::System.String value);
        partial void OnHostNameChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="ResourceType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ResourceType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ResourceType object.
        /// </summary>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="maxResourcesPerHost">Initial value of the MaxResourcesPerHost property.</param>
        public static ResourceType CreateResourceType(global::System.String name, global::System.Int32 maxResourcesPerHost)
        {
            ResourceType resourceType = new ResourceType();
            resourceType.Name = name;
            resourceType.MaxResourcesPerHost = maxResourcesPerHost;
            return resourceType;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = StructuralObject.SetValidValue(value, false, "Name");
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MaxResourcesPerHost
        {
            get
            {
                return _MaxResourcesPerHost;
            }
            set
            {
                OnMaxResourcesPerHostChanging(value);
                ReportPropertyChanging("MaxResourcesPerHost");
                _MaxResourcesPerHost = StructuralObject.SetValidValue(value, "MaxResourcesPerHost");
                ReportPropertyChanged("MaxResourcesPerHost");
                OnMaxResourcesPerHostChanged();
            }
        }
        private global::System.Int32 _MaxResourcesPerHost;
        partial void OnMaxResourcesPerHostChanging(global::System.Int32 value);
        partial void OnMaxResourcesPerHostChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "ResourceTypeMetadataTypeAssoc", "MetadataType")]
        public EntityCollection<MetadataType> MetadataTypes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MetadataType>("EnterpriseTestModel.ResourceTypeMetadataTypeAssoc", "MetadataType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MetadataType>("EnterpriseTestModel.ResourceTypeMetadataTypeAssoc", "MetadataType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "SoftwareInstallerPackageResourceTypeAssoc", "SoftwareInstallerPackage")]
        public EntityCollection<SoftwareInstallerPackage> SoftwareInstallerPackages
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SoftwareInstallerPackage>("EnterpriseTestModel.SoftwareInstallerPackageResourceTypeAssoc", "SoftwareInstallerPackage");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SoftwareInstallerPackage>("EnterpriseTestModel.SoftwareInstallerPackageResourceTypeAssoc", "SoftwareInstallerPackage", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="ResourceWindowsCategory")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ResourceWindowsCategory : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ResourceWindowsCategory object.
        /// </summary>
        /// <param name="categoryId">Initial value of the CategoryId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="categoryType">Initial value of the CategoryType property.</param>
        public static ResourceWindowsCategory CreateResourceWindowsCategory(global::System.Int32 categoryId, global::System.String name, global::System.String categoryType)
        {
            ResourceWindowsCategory resourceWindowsCategory = new ResourceWindowsCategory();
            resourceWindowsCategory.CategoryId = categoryId;
            resourceWindowsCategory.Name = name;
            resourceWindowsCategory.CategoryType = categoryType;
            return resourceWindowsCategory;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CategoryId
        {
            get
            {
                return _CategoryId;
            }
            set
            {
                if (_CategoryId != value)
                {
                    OnCategoryIdChanging(value);
                    ReportPropertyChanging("CategoryId");
                    _CategoryId = StructuralObject.SetValidValue(value, "CategoryId");
                    ReportPropertyChanged("CategoryId");
                    OnCategoryIdChanged();
                }
            }
        }
        private global::System.Int32 _CategoryId;
        partial void OnCategoryIdChanging(global::System.Int32 value);
        partial void OnCategoryIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CategoryType
        {
            get
            {
                return _CategoryType;
            }
            set
            {
                OnCategoryTypeChanging(value);
                ReportPropertyChanging("CategoryType");
                _CategoryType = StructuralObject.SetValidValue(value, false, "CategoryType");
                ReportPropertyChanged("CategoryType");
                OnCategoryTypeChanged();
            }
        }
        private global::System.String _CategoryType;
        partial void OnCategoryTypeChanging(global::System.String value);
        partial void OnCategoryTypeChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "ResourceWindowsCategoryParent", "ResourceWindowsCategory1")]
        public EntityCollection<ResourceWindowsCategory> Parents
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ResourceWindowsCategory>("EnterpriseTestModel.ResourceWindowsCategoryParent", "ResourceWindowsCategory1");
            }
            private set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ResourceWindowsCategory>("EnterpriseTestModel.ResourceWindowsCategoryParent", "ResourceWindowsCategory1", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "ResourceWindowsCategoryParent", "ResourceWindowsCategory")]
        public EntityCollection<ResourceWindowsCategory> Children
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ResourceWindowsCategory>("EnterpriseTestModel.ResourceWindowsCategoryParent", "ResourceWindowsCategory");
            }
            private set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ResourceWindowsCategory>("EnterpriseTestModel.ResourceWindowsCategoryParent", "ResourceWindowsCategory", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="ScenarioSession")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ScenarioSession : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ScenarioSession object.
        /// </summary>
        /// <param name="enterpriseScenarioId">Initial value of the EnterpriseScenarioId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="editedDate">Initial value of the EditedDate property.</param>
        public static ScenarioSession CreateScenarioSession(global::System.Guid enterpriseScenarioId, global::System.String name, global::System.DateTime editedDate)
        {
            ScenarioSession scenarioSession = new ScenarioSession();
            scenarioSession.EnterpriseScenarioId = enterpriseScenarioId;
            scenarioSession.Name = name;
            scenarioSession.EditedDate = editedDate;
            return scenarioSession;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid EnterpriseScenarioId
        {
            get
            {
                return _EnterpriseScenarioId;
            }
            set
            {
                if (_EnterpriseScenarioId != value)
                {
                    OnEnterpriseScenarioIdChanging(value);
                    ReportPropertyChanging("EnterpriseScenarioId");
                    _EnterpriseScenarioId = StructuralObject.SetValidValue(value, "EnterpriseScenarioId");
                    ReportPropertyChanged("EnterpriseScenarioId");
                    OnEnterpriseScenarioIdChanged();
                }
            }
        }
        private global::System.Guid _EnterpriseScenarioId;
        partial void OnEnterpriseScenarioIdChanging(global::System.Guid value);
        partial void OnEnterpriseScenarioIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = StructuralObject.SetValidValue(value, false, "Name");
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true, "Notes");
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime EditedDate
        {
            get
            {
                return _EditedDate;
            }
            set
            {
                OnEditedDateChanging(value);
                ReportPropertyChanging("EditedDate");
                _EditedDate = StructuralObject.SetValidValue(value, "EditedDate");
                ReportPropertyChanged("EditedDate");
                OnEditedDateChanged();
            }
        }
        private global::System.DateTime _EditedDate;
        partial void OnEditedDateChanging(global::System.DateTime value);
        partial void OnEditedDateChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="SoftwareInstaller")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SoftwareInstaller : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SoftwareInstaller object.
        /// </summary>
        /// <param name="installerId">Initial value of the InstallerId property.</param>
        /// <param name="filePath">Initial value of the FilePath property.</param>
        /// <param name="rebootSetting">Initial value of the RebootSetting property.</param>
        /// <param name="copyDirectory">Initial value of the CopyDirectory property.</param>
        public static SoftwareInstaller CreateSoftwareInstaller(global::System.Guid installerId, global::System.String filePath, global::System.String rebootSetting, global::System.Boolean copyDirectory)
        {
            SoftwareInstaller softwareInstaller = new SoftwareInstaller();
            softwareInstaller.InstallerId = installerId;
            softwareInstaller.FilePath = filePath;
            softwareInstaller.RebootSetting = rebootSetting;
            softwareInstaller.CopyDirectory = copyDirectory;
            return softwareInstaller;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid InstallerId
        {
            get
            {
                return _InstallerId;
            }
            set
            {
                if (_InstallerId != value)
                {
                    OnInstallerIdChanging(value);
                    ReportPropertyChanging("InstallerId");
                    _InstallerId = StructuralObject.SetValidValue(value, "InstallerId");
                    ReportPropertyChanged("InstallerId");
                    OnInstallerIdChanged();
                }
            }
        }
        private global::System.Guid _InstallerId;
        partial void OnInstallerIdChanging(global::System.Guid value);
        partial void OnInstallerIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true, "Description");
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FilePath
        {
            get
            {
                return _FilePath;
            }
            set
            {
                OnFilePathChanging(value);
                ReportPropertyChanging("FilePath");
                _FilePath = StructuralObject.SetValidValue(value, false, "FilePath");
                ReportPropertyChanged("FilePath");
                OnFilePathChanged();
            }
        }
        private global::System.String _FilePath;
        partial void OnFilePathChanging(global::System.String value);
        partial void OnFilePathChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Arguments
        {
            get
            {
                return _Arguments;
            }
            set
            {
                OnArgumentsChanging(value);
                ReportPropertyChanging("Arguments");
                _Arguments = StructuralObject.SetValidValue(value, true, "Arguments");
                ReportPropertyChanged("Arguments");
                OnArgumentsChanged();
            }
        }
        private global::System.String _Arguments;
        partial void OnArgumentsChanging(global::System.String value);
        partial void OnArgumentsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RebootSetting
        {
            get
            {
                return _RebootSetting;
            }
            set
            {
                OnRebootSettingChanging(value);
                ReportPropertyChanging("RebootSetting");
                _RebootSetting = StructuralObject.SetValidValue(value, false, "RebootSetting");
                ReportPropertyChanged("RebootSetting");
                OnRebootSettingChanged();
            }
        }
        private global::System.String _RebootSetting;
        partial void OnRebootSettingChanging(global::System.String value);
        partial void OnRebootSettingChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean CopyDirectory
        {
            get
            {
                return _CopyDirectory;
            }
            set
            {
                OnCopyDirectoryChanging(value);
                ReportPropertyChanging("CopyDirectory");
                _CopyDirectory = StructuralObject.SetValidValue(value, "CopyDirectory");
                ReportPropertyChanged("CopyDirectory");
                OnCopyDirectoryChanged();
            }
        }
        private global::System.Boolean _CopyDirectory;
        partial void OnCopyDirectoryChanging(global::System.Boolean value);
        partial void OnCopyDirectoryChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_SoftwareInstallerPackageItem_SoftwareInstaller", "SoftwareInstallerPackageItem")]
        public EntityCollection<SoftwareInstallerSetting> SoftwareInstallerSettings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SoftwareInstallerSetting>("EnterpriseTestModel.FK_SoftwareInstallerPackageItem_SoftwareInstaller", "SoftwareInstallerPackageItem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SoftwareInstallerSetting>("EnterpriseTestModel.FK_SoftwareInstallerPackageItem_SoftwareInstaller", "SoftwareInstallerPackageItem", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="SoftwareInstallerPackage")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SoftwareInstallerPackage : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SoftwareInstallerPackage object.
        /// </summary>
        /// <param name="packageId">Initial value of the PackageId property.</param>
        public static SoftwareInstallerPackage CreateSoftwareInstallerPackage(global::System.Guid packageId)
        {
            SoftwareInstallerPackage softwareInstallerPackage = new SoftwareInstallerPackage();
            softwareInstallerPackage.PackageId = packageId;
            return softwareInstallerPackage;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PackageId
        {
            get
            {
                return _PackageId;
            }
            set
            {
                if (_PackageId != value)
                {
                    OnPackageIdChanging(value);
                    ReportPropertyChanging("PackageId");
                    _PackageId = StructuralObject.SetValidValue(value, "PackageId");
                    ReportPropertyChanged("PackageId");
                    OnPackageIdChanged();
                }
            }
        }
        private global::System.Guid _PackageId;
        partial void OnPackageIdChanging(global::System.Guid value);
        partial void OnPackageIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true, "Description");
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_SoftwareInstallerPackageItem_SoftwareInstallerPackage", "SoftwareInstallerPackageItem")]
        public EntityCollection<SoftwareInstallerSetting> SoftwareInstallerSettings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SoftwareInstallerSetting>("EnterpriseTestModel.FK_SoftwareInstallerPackageItem_SoftwareInstallerPackage", "SoftwareInstallerPackageItem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SoftwareInstallerSetting>("EnterpriseTestModel.FK_SoftwareInstallerPackageItem_SoftwareInstallerPackage", "SoftwareInstallerPackageItem", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "SoftwareInstallerPackageMetadataTypeAssoc", "MetadataType")]
        public EntityCollection<MetadataType> MetadataTypes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MetadataType>("EnterpriseTestModel.SoftwareInstallerPackageMetadataTypeAssoc", "MetadataType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MetadataType>("EnterpriseTestModel.SoftwareInstallerPackageMetadataTypeAssoc", "MetadataType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "SoftwareInstallerPackageResourceTypeAssoc", "ResourceType")]
        public EntityCollection<ResourceType> ResourceTypes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ResourceType>("EnterpriseTestModel.SoftwareInstallerPackageResourceTypeAssoc", "ResourceType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ResourceType>("EnterpriseTestModel.SoftwareInstallerPackageResourceTypeAssoc", "ResourceType", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="SoftwareInstallerSetting")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SoftwareInstallerSetting : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SoftwareInstallerSetting object.
        /// </summary>
        /// <param name="packageId">Initial value of the PackageId property.</param>
        /// <param name="installerId">Initial value of the InstallerId property.</param>
        /// <param name="installOrderNumber">Initial value of the InstallOrderNumber property.</param>
        public static SoftwareInstallerSetting CreateSoftwareInstallerSetting(global::System.Guid packageId, global::System.Guid installerId, global::System.Int32 installOrderNumber)
        {
            SoftwareInstallerSetting softwareInstallerSetting = new SoftwareInstallerSetting();
            softwareInstallerSetting.PackageId = packageId;
            softwareInstallerSetting.InstallerId = installerId;
            softwareInstallerSetting.InstallOrderNumber = installOrderNumber;
            return softwareInstallerSetting;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PackageId
        {
            get
            {
                return _PackageId;
            }
            set
            {
                if (_PackageId != value)
                {
                    OnPackageIdChanging(value);
                    ReportPropertyChanging("PackageId");
                    _PackageId = StructuralObject.SetValidValue(value, "PackageId");
                    ReportPropertyChanged("PackageId");
                    OnPackageIdChanged();
                }
            }
        }
        private global::System.Guid _PackageId;
        partial void OnPackageIdChanging(global::System.Guid value);
        partial void OnPackageIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid InstallerId
        {
            get
            {
                return _InstallerId;
            }
            set
            {
                if (_InstallerId != value)
                {
                    OnInstallerIdChanging(value);
                    ReportPropertyChanging("InstallerId");
                    _InstallerId = StructuralObject.SetValidValue(value, "InstallerId");
                    ReportPropertyChanged("InstallerId");
                    OnInstallerIdChanged();
                }
            }
        }
        private global::System.Guid _InstallerId;
        partial void OnInstallerIdChanging(global::System.Guid value);
        partial void OnInstallerIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 InstallOrderNumber
        {
            get
            {
                return _InstallOrderNumber;
            }
            set
            {
                OnInstallOrderNumberChanging(value);
                ReportPropertyChanging("InstallOrderNumber");
                _InstallOrderNumber = StructuralObject.SetValidValue(value, "InstallOrderNumber");
                ReportPropertyChanged("InstallOrderNumber");
                OnInstallOrderNumberChanged();
            }
        }
        private global::System.Int32 _InstallOrderNumber;
        partial void OnInstallOrderNumberChanging(global::System.Int32 value);
        partial void OnInstallOrderNumberChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_SoftwareInstallerPackageItem_SoftwareInstaller", "SoftwareInstaller")]
        public SoftwareInstaller SoftwareInstaller
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SoftwareInstaller>("EnterpriseTestModel.FK_SoftwareInstallerPackageItem_SoftwareInstaller", "SoftwareInstaller").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SoftwareInstaller>("EnterpriseTestModel.FK_SoftwareInstallerPackageItem_SoftwareInstaller", "SoftwareInstaller").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SoftwareInstaller> SoftwareInstallerReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SoftwareInstaller>("EnterpriseTestModel.FK_SoftwareInstallerPackageItem_SoftwareInstaller", "SoftwareInstaller");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SoftwareInstaller>("EnterpriseTestModel.FK_SoftwareInstallerPackageItem_SoftwareInstaller", "SoftwareInstaller", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_SoftwareInstallerPackageItem_SoftwareInstallerPackage", "SoftwareInstallerPackage")]
        public SoftwareInstallerPackage SoftwareInstallerPackage
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SoftwareInstallerPackage>("EnterpriseTestModel.FK_SoftwareInstallerPackageItem_SoftwareInstallerPackage", "SoftwareInstallerPackage").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SoftwareInstallerPackage>("EnterpriseTestModel.FK_SoftwareInstallerPackageItem_SoftwareInstallerPackage", "SoftwareInstallerPackage").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SoftwareInstallerPackage> SoftwareInstallerPackageReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SoftwareInstallerPackage>("EnterpriseTestModel.FK_SoftwareInstallerPackageItem_SoftwareInstallerPackage", "SoftwareInstallerPackage");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SoftwareInstallerPackage>("EnterpriseTestModel.FK_SoftwareInstallerPackageItem_SoftwareInstallerPackage", "SoftwareInstallerPackage", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="SolutionTester")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SolutionTester : OfficeWorker
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SolutionTester object.
        /// </summary>
        /// <param name="virtualResourceId">Initial value of the VirtualResourceId property.</param>
        /// <param name="enterpriseScenarioId">Initial value of the EnterpriseScenarioId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="resourceType">Initial value of the ResourceType property.</param>
        /// <param name="instanceCount">Initial value of the InstanceCount property.</param>
        /// <param name="platform">Initial value of the Platform property.</param>
        /// <param name="enabled">Initial value of the Enabled property.</param>
        /// <param name="testCaseId">Initial value of the TestCaseId property.</param>
        /// <param name="repeatCount">Initial value of the RepeatCount property.</param>
        /// <param name="randomizeStartupDelay">Initial value of the RandomizeStartupDelay property.</param>
        /// <param name="minStartupDelay">Initial value of the MinStartupDelay property.</param>
        /// <param name="maxStartupDelay">Initial value of the MaxStartupDelay property.</param>
        /// <param name="randomizeActivities">Initial value of the RandomizeActivities property.</param>
        /// <param name="randomizeActivityDelay">Initial value of the RandomizeActivityDelay property.</param>
        /// <param name="minActivityDelay">Initial value of the MinActivityDelay property.</param>
        /// <param name="maxActivityDelay">Initial value of the MaxActivityDelay property.</param>
        /// <param name="durationTime">Initial value of the DurationTime property.</param>
        /// <param name="userPool">Initial value of the UserPool property.</param>
        /// <param name="credentialType">Initial value of the CredentialType property.</param>
        /// <param name="useCredential">Initial value of the UseCredential property.</param>
        public static SolutionTester CreateSolutionTester(global::System.Guid virtualResourceId, global::System.Guid enterpriseScenarioId, global::System.String name, global::System.String resourceType, global::System.Int32 instanceCount, global::System.String platform, global::System.Boolean enabled, global::System.Int32 testCaseId, global::System.Int32 repeatCount, global::System.Boolean randomizeStartupDelay, global::System.Int32 minStartupDelay, global::System.Int32 maxStartupDelay, global::System.Boolean randomizeActivities, global::System.Boolean randomizeActivityDelay, global::System.Int32 minActivityDelay, global::System.Int32 maxActivityDelay, global::System.Int32 durationTime, global::System.String userPool, global::System.String credentialType, global::System.Boolean useCredential)
        {
            SolutionTester solutionTester = new SolutionTester();
            solutionTester.VirtualResourceId = virtualResourceId;
            solutionTester.EnterpriseScenarioId = enterpriseScenarioId;
            solutionTester.Name = name;
            solutionTester.ResourceType = resourceType;
            solutionTester.InstanceCount = instanceCount;
            solutionTester.Platform = platform;
            solutionTester.Enabled = enabled;
            solutionTester.TestCaseId = testCaseId;
            solutionTester.RepeatCount = repeatCount;
            solutionTester.RandomizeStartupDelay = randomizeStartupDelay;
            solutionTester.MinStartupDelay = minStartupDelay;
            solutionTester.MaxStartupDelay = maxStartupDelay;
            solutionTester.RandomizeActivities = randomizeActivities;
            solutionTester.RandomizeActivityDelay = randomizeActivityDelay;
            solutionTester.MinActivityDelay = minActivityDelay;
            solutionTester.MaxActivityDelay = maxActivityDelay;
            solutionTester.DurationTime = durationTime;
            solutionTester.UserPool = userPool;
            solutionTester.CredentialType = credentialType;
            solutionTester.UseCredential = useCredential;
            return solutionTester;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CredentialType
        {
            get
            {
                return _CredentialType;
            }
            private set
            {
                OnCredentialTypeChanging(value);
                ReportPropertyChanging("CredentialType");
                _CredentialType = StructuralObject.SetValidValue(value, false, "CredentialType");
                ReportPropertyChanged("CredentialType");
                OnCredentialTypeChanged();
            }
        }
        private global::System.String _CredentialType;
        partial void OnCredentialTypeChanging(global::System.String value);
        partial void OnCredentialTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean UseCredential
        {
            get
            {
                return _UseCredential;
            }
            set
            {
                OnUseCredentialChanging(value);
                ReportPropertyChanging("UseCredential");
                _UseCredential = StructuralObject.SetValidValue(value, "UseCredential");
                ReportPropertyChanged("UseCredential");
                OnUseCredentialChanged();
            }
        }
        private global::System.Boolean _UseCredential;
        partial void OnUseCredentialChanging(global::System.Boolean value);
        partial void OnUseCredentialChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CredentialName
        {
            get
            {
                return _CredentialName;
            }
            private set
            {
                OnCredentialNameChanging(value);
                ReportPropertyChanging("CredentialName");
                _CredentialName = StructuralObject.SetValidValue(value, true, "CredentialName");
                ReportPropertyChanged("CredentialName");
                OnCredentialNameChanged();
            }
        }
        private global::System.String _CredentialName;
        partial void OnCredentialNameChanging(global::System.String value);
        partial void OnCredentialNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CredentialDomain
        {
            get
            {
                return _CredentialDomain;
            }
            private set
            {
                OnCredentialDomainChanging(value);
                ReportPropertyChanging("CredentialDomain");
                _CredentialDomain = StructuralObject.SetValidValue(value, true, "CredentialDomain");
                ReportPropertyChanged("CredentialDomain");
                OnCredentialDomainChanged();
            }
        }
        private global::System.String _CredentialDomain;
        partial void OnCredentialDomainChanging(global::System.String value);
        partial void OnCredentialDomainChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CredentialPassword
        {
            get
            {
                return _CredentialPassword;
            }
            private set
            {
                OnCredentialPasswordChanging(value);
                ReportPropertyChanging("CredentialPassword");
                _CredentialPassword = StructuralObject.SetValidValue(value, true, "CredentialPassword");
                ReportPropertyChanged("CredentialPassword");
                OnCredentialPasswordChanged();
            }
        }
        private global::System.String _CredentialPassword;
        partial void OnCredentialPasswordChanging(global::System.String value);
        partial void OnCredentialPasswordChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="SystemSetting")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SystemSetting : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SystemSetting object.
        /// </summary>
        /// <param name="type">Initial value of the Type property.</param>
        /// <param name="subType">Initial value of the SubType property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="value">Initial value of the Value property.</param>
        public static SystemSetting CreateSystemSetting(global::System.String type, global::System.String subType, global::System.String name, global::System.String value)
        {
            SystemSetting systemSetting = new SystemSetting();
            systemSetting.Type = type;
            systemSetting.SubType = subType;
            systemSetting.Name = name;
            systemSetting.Value = value;
            return systemSetting;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Type
        {
            get
            {
                return _Type;
            }
            set
            {
                if (_Type != value)
                {
                    OnTypeChanging(value);
                    ReportPropertyChanging("Type");
                    _Type = StructuralObject.SetValidValue(value, false, "Type");
                    ReportPropertyChanged("Type");
                    OnTypeChanged();
                }
            }
        }
        private global::System.String _Type;
        partial void OnTypeChanging(global::System.String value);
        partial void OnTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SubType
        {
            get
            {
                return _SubType;
            }
            set
            {
                if (_SubType != value)
                {
                    OnSubTypeChanging(value);
                    ReportPropertyChanging("SubType");
                    _SubType = StructuralObject.SetValidValue(value, false, "SubType");
                    ReportPropertyChanged("SubType");
                    OnSubTypeChanged();
                }
            }
        }
        private global::System.String _SubType;
        partial void OnSubTypeChanging(global::System.String value);
        partial void OnSubTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = StructuralObject.SetValidValue(value, false, "Name");
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value, false, "Value");
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.String _Value;
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true, "Description");
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new User object.
        /// </summary>
        /// <param name="userName">Initial value of the UserName property.</param>
        /// <param name="domain">Initial value of the Domain property.</param>
        /// <param name="roleName">Initial value of the RoleName property.</param>
        public static User CreateUser(global::System.String userName, global::System.String domain, global::System.String roleName)
        {
            User user = new User();
            user.UserName = userName;
            user.Domain = domain;
            user.RoleName = roleName;
            return user;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
                if (_UserName != value)
                {
                    OnUserNameChanging(value);
                    ReportPropertyChanging("UserName");
                    _UserName = StructuralObject.SetValidValue(value, false, "UserName");
                    ReportPropertyChanged("UserName");
                    OnUserNameChanged();
                }
            }
        }
        private global::System.String _UserName;
        partial void OnUserNameChanging(global::System.String value);
        partial void OnUserNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Domain
        {
            get
            {
                return _Domain;
            }
            set
            {
                OnDomainChanging(value);
                ReportPropertyChanging("Domain");
                _Domain = StructuralObject.SetValidValue(value, false, "Domain");
                ReportPropertyChanged("Domain");
                OnDomainChanged();
            }
        }
        private global::System.String _Domain;
        partial void OnDomainChanging(global::System.String value);
        partial void OnDomainChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RoleName
        {
            get
            {
                return _RoleName;
            }
            set
            {
                OnRoleNameChanging(value);
                ReportPropertyChanging("RoleName");
                _RoleName = StructuralObject.SetValidValue(value, false, "RoleName");
                ReportPropertyChanged("RoleName");
                OnRoleNameChanged();
            }
        }
        private global::System.String _RoleName;
        partial void OnRoleNameChanging(global::System.String value);
        partial void OnRoleNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "UserGroupAssoc", "UserGroup")]
        public EntityCollection<UserGroup> UserGroups
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserGroup>("EnterpriseTestModel.UserGroupAssoc", "UserGroup");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserGroup>("EnterpriseTestModel.UserGroupAssoc", "UserGroup", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="UserGroup")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UserGroup : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new UserGroup object.
        /// </summary>
        /// <param name="groupName">Initial value of the GroupName property.</param>
        /// <param name="creator">Initial value of the Creator property.</param>
        public static UserGroup CreateUserGroup(global::System.String groupName, global::System.String creator)
        {
            UserGroup userGroup = new UserGroup();
            userGroup.GroupName = groupName;
            userGroup.Creator = creator;
            return userGroup;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String GroupName
        {
            get
            {
                return _GroupName;
            }
            set
            {
                if (_GroupName != value)
                {
                    OnGroupNameChanging(value);
                    ReportPropertyChanging("GroupName");
                    _GroupName = StructuralObject.SetValidValue(value, false, "GroupName");
                    ReportPropertyChanged("GroupName");
                    OnGroupNameChanged();
                }
            }
        }
        private global::System.String _GroupName;
        partial void OnGroupNameChanging(global::System.String value);
        partial void OnGroupNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Creator
        {
            get
            {
                return _Creator;
            }
            set
            {
                OnCreatorChanging(value);
                ReportPropertyChanging("Creator");
                _Creator = StructuralObject.SetValidValue(value, false, "Creator");
                ReportPropertyChanged("Creator");
                OnCreatorChanged();
            }
        }
        private global::System.String _Creator;
        partial void OnCreatorChanging(global::System.String value);
        partial void OnCreatorChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true, "Description");
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_UserGroupFrameworkClientAssociation_UserGroup", "UserGroupFrameworkClientAssociation")]
        public EntityCollection<VirtualMachineGroupAssoc> VirtualMachineGroupAssocs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<VirtualMachineGroupAssoc>("EnterpriseTestModel.FK_UserGroupFrameworkClientAssociation_UserGroup", "UserGroupFrameworkClientAssociation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<VirtualMachineGroupAssoc>("EnterpriseTestModel.FK_UserGroupFrameworkClientAssociation_UserGroup", "UserGroupFrameworkClientAssociation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "UserGroupAssoc", "User")]
        public EntityCollection<User> Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<User>("EnterpriseTestModel.UserGroupAssoc", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<User>("EnterpriseTestModel.UserGroupAssoc", "User", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "EnterpriseScenarioUserGroupAssoc", "EnterpriseScenario")]
        public EntityCollection<EnterpriseScenario> EnterpriseScenarios
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<EnterpriseScenario>("EnterpriseTestModel.EnterpriseScenarioUserGroupAssoc", "EnterpriseScenario");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<EnterpriseScenario>("EnterpriseTestModel.EnterpriseScenarioUserGroupAssoc", "EnterpriseScenario", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="VirtualMachineGroupAssoc")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class VirtualMachineGroupAssoc : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new VirtualMachineGroupAssoc object.
        /// </summary>
        /// <param name="machineName">Initial value of the MachineName property.</param>
        /// <param name="groupName">Initial value of the GroupName property.</param>
        public static VirtualMachineGroupAssoc CreateVirtualMachineGroupAssoc(global::System.String machineName, global::System.String groupName)
        {
            VirtualMachineGroupAssoc virtualMachineGroupAssoc = new VirtualMachineGroupAssoc();
            virtualMachineGroupAssoc.MachineName = machineName;
            virtualMachineGroupAssoc.GroupName = groupName;
            return virtualMachineGroupAssoc;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String MachineName
        {
            get
            {
                return _MachineName;
            }
            set
            {
                if (_MachineName != value)
                {
                    OnMachineNameChanging(value);
                    ReportPropertyChanging("MachineName");
                    _MachineName = StructuralObject.SetValidValue(value, false, "MachineName");
                    ReportPropertyChanged("MachineName");
                    OnMachineNameChanged();
                }
            }
        }
        private global::System.String _MachineName;
        partial void OnMachineNameChanging(global::System.String value);
        partial void OnMachineNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String GroupName
        {
            get
            {
                return _GroupName;
            }
            set
            {
                if (_GroupName != value)
                {
                    OnGroupNameChanging(value);
                    ReportPropertyChanging("GroupName");
                    _GroupName = StructuralObject.SetValidValue(value, false, "GroupName");
                    ReportPropertyChanged("GroupName");
                    OnGroupNameChanged();
                }
            }
        }
        private global::System.String _GroupName;
        partial void OnGroupNameChanging(global::System.String value);
        partial void OnGroupNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_UserGroupFrameworkClientAssociation_UserGroup", "UserGroup")]
        public UserGroup UserGroup
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserGroup>("EnterpriseTestModel.FK_UserGroupFrameworkClientAssociation_UserGroup", "UserGroup").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserGroup>("EnterpriseTestModel.FK_UserGroupFrameworkClientAssociation_UserGroup", "UserGroup").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UserGroup> UserGroupReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserGroup>("EnterpriseTestModel.FK_UserGroupFrameworkClientAssociation_UserGroup", "UserGroup");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UserGroup>("EnterpriseTestModel.FK_UserGroupFrameworkClientAssociation_UserGroup", "UserGroup", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="VirtualResource")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [KnownTypeAttribute(typeof(EventLogCollector))]
    [KnownTypeAttribute(typeof(AdminWorker))]
    [KnownTypeAttribute(typeof(PerfMonCollector))]
    [KnownTypeAttribute(typeof(LoadTester))]
    [KnownTypeAttribute(typeof(OfficeWorker))]
    public partial class VirtualResource : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new VirtualResource object.
        /// </summary>
        /// <param name="virtualResourceId">Initial value of the VirtualResourceId property.</param>
        /// <param name="enterpriseScenarioId">Initial value of the EnterpriseScenarioId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="resourceType">Initial value of the ResourceType property.</param>
        /// <param name="instanceCount">Initial value of the InstanceCount property.</param>
        /// <param name="platform">Initial value of the Platform property.</param>
        /// <param name="enabled">Initial value of the Enabled property.</param>
        /// <param name="testCaseId">Initial value of the TestCaseId property.</param>
        public static VirtualResource CreateVirtualResource(global::System.Guid virtualResourceId, global::System.Guid enterpriseScenarioId, global::System.String name, global::System.String resourceType, global::System.Int32 instanceCount, global::System.String platform, global::System.Boolean enabled, global::System.Int32 testCaseId)
        {
            VirtualResource virtualResource = new VirtualResource();
            virtualResource.VirtualResourceId = virtualResourceId;
            virtualResource.EnterpriseScenarioId = enterpriseScenarioId;
            virtualResource.Name = name;
            virtualResource.ResourceType = resourceType;
            virtualResource.InstanceCount = instanceCount;
            virtualResource.Platform = platform;
            virtualResource.Enabled = enabled;
            virtualResource.TestCaseId = testCaseId;
            return virtualResource;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid VirtualResourceId
        {
            get
            {
                return _VirtualResourceId;
            }
            set
            {
                if (_VirtualResourceId != value)
                {
                    OnVirtualResourceIdChanging(value);
                    ReportPropertyChanging("VirtualResourceId");
                    _VirtualResourceId = StructuralObject.SetValidValue(value, "VirtualResourceId");
                    ReportPropertyChanged("VirtualResourceId");
                    OnVirtualResourceIdChanged();
                }
            }
        }
        private global::System.Guid _VirtualResourceId;
        partial void OnVirtualResourceIdChanging(global::System.Guid value);
        partial void OnVirtualResourceIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid EnterpriseScenarioId
        {
            get
            {
                return _EnterpriseScenarioId;
            }
            set
            {
                OnEnterpriseScenarioIdChanging(value);
                ReportPropertyChanging("EnterpriseScenarioId");
                _EnterpriseScenarioId = StructuralObject.SetValidValue(value, "EnterpriseScenarioId");
                ReportPropertyChanged("EnterpriseScenarioId");
                OnEnterpriseScenarioIdChanged();
            }
        }
        private global::System.Guid _EnterpriseScenarioId;
        partial void OnEnterpriseScenarioIdChanging(global::System.Guid value);
        partial void OnEnterpriseScenarioIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true, "Description");
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ResourceType
        {
            get
            {
                return _ResourceType;
            }
            set
            {
                OnResourceTypeChanging(value);
                ReportPropertyChanging("ResourceType");
                _ResourceType = StructuralObject.SetValidValue(value, false, "ResourceType");
                ReportPropertyChanged("ResourceType");
                OnResourceTypeChanged();
            }
        }
        private global::System.String _ResourceType;
        partial void OnResourceTypeChanging(global::System.String value);
        partial void OnResourceTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 InstanceCount
        {
            get
            {
                return _InstanceCount;
            }
            set
            {
                OnInstanceCountChanging(value);
                ReportPropertyChanging("InstanceCount");
                _InstanceCount = StructuralObject.SetValidValue(value, "InstanceCount");
                ReportPropertyChanged("InstanceCount");
                OnInstanceCountChanged();
            }
        }
        private global::System.Int32 _InstanceCount;
        partial void OnInstanceCountChanging(global::System.Int32 value);
        partial void OnInstanceCountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Platform
        {
            get
            {
                return _Platform;
            }
            set
            {
                OnPlatformChanging(value);
                ReportPropertyChanging("Platform");
                _Platform = StructuralObject.SetValidValue(value, false, "Platform");
                ReportPropertyChanged("Platform");
                OnPlatformChanged();
            }
        }
        private global::System.String _Platform;
        partial void OnPlatformChanging(global::System.String value);
        partial void OnPlatformChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ResourcesPerVM
        {
            get
            {
                return _ResourcesPerVM;
            }
            set
            {
                OnResourcesPerVMChanging(value);
                ReportPropertyChanging("ResourcesPerVM");
                _ResourcesPerVM = StructuralObject.SetValidValue(value, "ResourcesPerVM");
                ReportPropertyChanged("ResourcesPerVM");
                OnResourcesPerVMChanged();
            }
        }
        private Nullable<global::System.Int32> _ResourcesPerVM;
        partial void OnResourcesPerVMChanging(Nullable<global::System.Int32> value);
        partial void OnResourcesPerVMChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Enabled
        {
            get
            {
                return _Enabled;
            }
            set
            {
                OnEnabledChanging(value);
                ReportPropertyChanging("Enabled");
                _Enabled = StructuralObject.SetValidValue(value, "Enabled");
                ReportPropertyChanged("Enabled");
                OnEnabledChanged();
            }
        }
        private global::System.Boolean _Enabled;
        partial void OnEnabledChanging(global::System.Boolean value);
        partial void OnEnabledChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> FolderId
        {
            get
            {
                return _FolderId;
            }
            set
            {
                OnFolderIdChanging(value);
                ReportPropertyChanging("FolderId");
                _FolderId = StructuralObject.SetValidValue(value, "FolderId");
                ReportPropertyChanged("FolderId");
                OnFolderIdChanged();
            }
        }
        private Nullable<global::System.Guid> _FolderId;
        partial void OnFolderIdChanging(Nullable<global::System.Guid> value);
        partial void OnFolderIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TestCaseId
        {
            get
            {
                return _TestCaseId;
            }
            set
            {
                OnTestCaseIdChanging(value);
                ReportPropertyChanging("TestCaseId");
                _TestCaseId = StructuralObject.SetValidValue(value, "TestCaseId");
                ReportPropertyChanged("TestCaseId");
                OnTestCaseIdChanged();
            }
        }
        private global::System.Int32 _TestCaseId;
        partial void OnTestCaseIdChanging(global::System.Int32 value);
        partial void OnTestCaseIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_VirtualResourceMetadata_VirtualResource", "VirtualResourceMetadata")]
        public EntityCollection<VirtualResourceMetadata> VirtualResourceMetadataSet
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<VirtualResourceMetadata>("EnterpriseTestModel.FK_VirtualResourceMetadata_VirtualResource", "VirtualResourceMetadata");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<VirtualResourceMetadata>("EnterpriseTestModel.FK_VirtualResourceMetadata_VirtualResource", "VirtualResourceMetadata", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_VirtualResource_EnterpriseScenario", "EnterpriseScenario")]
        public EnterpriseScenario EnterpriseScenario
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EnterpriseScenario>("EnterpriseTestModel.FK_VirtualResource_EnterpriseScenario", "EnterpriseScenario").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EnterpriseScenario>("EnterpriseTestModel.FK_VirtualResource_EnterpriseScenario", "EnterpriseScenario").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<EnterpriseScenario> EnterpriseScenarioReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EnterpriseScenario>("EnterpriseTestModel.FK_VirtualResource_EnterpriseScenario", "EnterpriseScenario");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<EnterpriseScenario>("EnterpriseTestModel.FK_VirtualResource_EnterpriseScenario", "EnterpriseScenario", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="VirtualResourceMetadata")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class VirtualResourceMetadata : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new VirtualResourceMetadata object.
        /// </summary>
        /// <param name="virtualResourceMetadataId">Initial value of the VirtualResourceMetadataId property.</param>
        /// <param name="virtualResourceId">Initial value of the VirtualResourceId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="resourceType">Initial value of the ResourceType property.</param>
        /// <param name="metadataType">Initial value of the MetadataType property.</param>
        /// <param name="metadata">Initial value of the Metadata property.</param>
        /// <param name="enabled">Initial value of the Enabled property.</param>
        public static VirtualResourceMetadata CreateVirtualResourceMetadata(global::System.Guid virtualResourceMetadataId, global::System.Guid virtualResourceId, global::System.String name, global::System.String resourceType, global::System.String metadataType, global::System.String metadata, global::System.Boolean enabled)
        {
            VirtualResourceMetadata virtualResourceMetadata = new VirtualResourceMetadata();
            virtualResourceMetadata.VirtualResourceMetadataId = virtualResourceMetadataId;
            virtualResourceMetadata.VirtualResourceId = virtualResourceId;
            virtualResourceMetadata.Name = name;
            virtualResourceMetadata.ResourceType = resourceType;
            virtualResourceMetadata.MetadataType = metadataType;
            virtualResourceMetadata.Metadata = metadata;
            virtualResourceMetadata.Enabled = enabled;
            return virtualResourceMetadata;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid VirtualResourceMetadataId
        {
            get
            {
                return _VirtualResourceMetadataId;
            }
            set
            {
                if (_VirtualResourceMetadataId != value)
                {
                    OnVirtualResourceMetadataIdChanging(value);
                    ReportPropertyChanging("VirtualResourceMetadataId");
                    _VirtualResourceMetadataId = StructuralObject.SetValidValue(value, "VirtualResourceMetadataId");
                    ReportPropertyChanged("VirtualResourceMetadataId");
                    OnVirtualResourceMetadataIdChanged();
                }
            }
        }
        private global::System.Guid _VirtualResourceMetadataId;
        partial void OnVirtualResourceMetadataIdChanging(global::System.Guid value);
        partial void OnVirtualResourceMetadataIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid VirtualResourceId
        {
            get
            {
                return _VirtualResourceId;
            }
            set
            {
                OnVirtualResourceIdChanging(value);
                ReportPropertyChanging("VirtualResourceId");
                _VirtualResourceId = StructuralObject.SetValidValue(value, "VirtualResourceId");
                ReportPropertyChanged("VirtualResourceId");
                OnVirtualResourceIdChanged();
            }
        }
        private global::System.Guid _VirtualResourceId;
        partial void OnVirtualResourceIdChanging(global::System.Guid value);
        partial void OnVirtualResourceIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ResourceType
        {
            get
            {
                return _ResourceType;
            }
            set
            {
                OnResourceTypeChanging(value);
                ReportPropertyChanging("ResourceType");
                _ResourceType = StructuralObject.SetValidValue(value, false, "ResourceType");
                ReportPropertyChanged("ResourceType");
                OnResourceTypeChanged();
            }
        }
        private global::System.String _ResourceType;
        partial void OnResourceTypeChanging(global::System.String value);
        partial void OnResourceTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String MetadataType
        {
            get
            {
                return _MetadataType;
            }
            set
            {
                OnMetadataTypeChanging(value);
                ReportPropertyChanging("MetadataType");
                _MetadataType = StructuralObject.SetValidValue(value, false, "MetadataType");
                ReportPropertyChanged("MetadataType");
                OnMetadataTypeChanged();
            }
        }
        private global::System.String _MetadataType;
        partial void OnMetadataTypeChanging(global::System.String value);
        partial void OnMetadataTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Metadata
        {
            get
            {
                return _Metadata;
            }
            set
            {
                OnMetadataChanging(value);
                ReportPropertyChanging("Metadata");
                _Metadata = StructuralObject.SetValidValue(value, false, "Metadata");
                ReportPropertyChanged("Metadata");
                OnMetadataChanged();
            }
        }
        private global::System.String _Metadata;
        partial void OnMetadataChanging(global::System.String value);
        partial void OnMetadataChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Enabled
        {
            get
            {
                return _Enabled;
            }
            set
            {
                OnEnabledChanging(value);
                ReportPropertyChanging("Enabled");
                _Enabled = StructuralObject.SetValidValue(value, "Enabled");
                ReportPropertyChanged("Enabled");
                OnEnabledChanged();
            }
        }
        private global::System.Boolean _Enabled;
        partial void OnEnabledChanging(global::System.Boolean value);
        partial void OnEnabledChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> FolderId
        {
            get
            {
                return _FolderId;
            }
            set
            {
                OnFolderIdChanging(value);
                ReportPropertyChanging("FolderId");
                _FolderId = StructuralObject.SetValidValue(value, "FolderId");
                ReportPropertyChanged("FolderId");
                OnFolderIdChanged();
            }
        }
        private Nullable<global::System.Guid> _FolderId;
        partial void OnFolderIdChanging(Nullable<global::System.Guid> value);
        partial void OnFolderIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ExecutionPlan
        {
            get
            {
                return _ExecutionPlan;
            }
            set
            {
                OnExecutionPlanChanging(value);
                ReportPropertyChanging("ExecutionPlan");
                _ExecutionPlan = StructuralObject.SetValidValue(value, true, "ExecutionPlan");
                ReportPropertyChanged("ExecutionPlan");
                OnExecutionPlanChanged();
            }
        }
        private global::System.String _ExecutionPlan;
        partial void OnExecutionPlanChanging(global::System.String value);
        partial void OnExecutionPlanChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MetadataVersion
        {
            get
            {
                return _MetadataVersion;
            }
            set
            {
                OnMetadataVersionChanging(value);
                ReportPropertyChanging("MetadataVersion");
                _MetadataVersion = StructuralObject.SetValidValue(value, true, "MetadataVersion");
                ReportPropertyChanged("MetadataVersion");
                OnMetadataVersionChanged();
            }
        }
        private global::System.String _MetadataVersion;
        partial void OnMetadataVersionChanging(global::System.String value);
        partial void OnMetadataVersionChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_VirtualResourceMetadata_VirtualResource", "VirtualResource")]
        public VirtualResource VirtualResource
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResource>("EnterpriseTestModel.FK_VirtualResourceMetadata_VirtualResource", "VirtualResource").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResource>("EnterpriseTestModel.FK_VirtualResourceMetadata_VirtualResource", "VirtualResource").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<VirtualResource> VirtualResourceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResource>("EnterpriseTestModel.FK_VirtualResourceMetadata_VirtualResource", "VirtualResource");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<VirtualResource>("EnterpriseTestModel.FK_VirtualResourceMetadata_VirtualResource", "VirtualResource", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_VirtualResourceMetadataAssetUsage_VirtualResourceMetadata", "VirtualResourceMetadataAssetUsage")]
        public VirtualResourceMetadataAssetUsage AssetUsage
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadataAssetUsage>("EnterpriseTestModel.FK_VirtualResourceMetadataAssetUsage_VirtualResourceMetadata", "VirtualResourceMetadataAssetUsage").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadataAssetUsage>("EnterpriseTestModel.FK_VirtualResourceMetadataAssetUsage_VirtualResourceMetadata", "VirtualResourceMetadataAssetUsage").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<VirtualResourceMetadataAssetUsage> AssetUsageReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadataAssetUsage>("EnterpriseTestModel.FK_VirtualResourceMetadataAssetUsage_VirtualResourceMetadata", "VirtualResourceMetadataAssetUsage");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<VirtualResourceMetadataAssetUsage>("EnterpriseTestModel.FK_VirtualResourceMetadataAssetUsage_VirtualResourceMetadata", "VirtualResourceMetadataAssetUsage", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_VirtualResourceMetadataDocumentUsage_VirtualResourceMetadata", "VirtualResourceMetadataDocumentUsage")]
        public VirtualResourceMetadataDocumentUsage DocumentUsage
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadataDocumentUsage>("EnterpriseTestModel.FK_VirtualResourceMetadataDocumentUsage_VirtualResourceMetadata", "VirtualResourceMetadataDocumentUsage").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadataDocumentUsage>("EnterpriseTestModel.FK_VirtualResourceMetadataDocumentUsage_VirtualResourceMetadata", "VirtualResourceMetadataDocumentUsage").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<VirtualResourceMetadataDocumentUsage> DocumentUsageReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadataDocumentUsage>("EnterpriseTestModel.FK_VirtualResourceMetadataDocumentUsage_VirtualResourceMetadata", "VirtualResourceMetadataDocumentUsage");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<VirtualResourceMetadataDocumentUsage>("EnterpriseTestModel.FK_VirtualResourceMetadataDocumentUsage_VirtualResourceMetadata", "VirtualResourceMetadataDocumentUsage", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_VirtualResourceMetadataServerUsage_VirtualResourceMetadata", "VirtualResourceMetadataServerUsage")]
        public VirtualResourceMetadataServerUsage ServerUsage
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadataServerUsage>("EnterpriseTestModel.FK_VirtualResourceMetadataServerUsage_VirtualResourceMetadata", "VirtualResourceMetadataServerUsage").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadataServerUsage>("EnterpriseTestModel.FK_VirtualResourceMetadataServerUsage_VirtualResourceMetadata", "VirtualResourceMetadataServerUsage").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<VirtualResourceMetadataServerUsage> ServerUsageReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadataServerUsage>("EnterpriseTestModel.FK_VirtualResourceMetadataServerUsage_VirtualResourceMetadata", "VirtualResourceMetadataServerUsage");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<VirtualResourceMetadataServerUsage>("EnterpriseTestModel.FK_VirtualResourceMetadataServerUsage_VirtualResourceMetadata", "VirtualResourceMetadataServerUsage", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_VirtualResourceMetadataPrintQueueUsage_VirtualResourceMetadata", "VirtualResourceMetadataPrintQueueUsage")]
        public VirtualResourceMetadataPrintQueueUsage PrintQueueUsage
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadataPrintQueueUsage>("EnterpriseTestModel.FK_VirtualResourceMetadataPrintQueueUsage_VirtualResourceMetadata", "VirtualResourceMetadataPrintQueueUsage").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadataPrintQueueUsage>("EnterpriseTestModel.FK_VirtualResourceMetadataPrintQueueUsage_VirtualResourceMetadata", "VirtualResourceMetadataPrintQueueUsage").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<VirtualResourceMetadataPrintQueueUsage> PrintQueueUsageReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadataPrintQueueUsage>("EnterpriseTestModel.FK_VirtualResourceMetadataPrintQueueUsage_VirtualResourceMetadata", "VirtualResourceMetadataPrintQueueUsage");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<VirtualResourceMetadataPrintQueueUsage>("EnterpriseTestModel.FK_VirtualResourceMetadataPrintQueueUsage_VirtualResourceMetadata", "VirtualResourceMetadataPrintQueueUsage", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_VirtualResourceMetadataRetrySetting_VirtualResourceMetadata", "VirtualResourceMetadataRetrySetting")]
        public EntityCollection<VirtualResourceMetadataRetrySetting> VirtualResourceMetadataRetrySettings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<VirtualResourceMetadataRetrySetting>("EnterpriseTestModel.FK_VirtualResourceMetadataRetrySetting_VirtualResourceMetadata", "VirtualResourceMetadataRetrySetting");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<VirtualResourceMetadataRetrySetting>("EnterpriseTestModel.FK_VirtualResourceMetadataRetrySetting_VirtualResourceMetadata", "VirtualResourceMetadataRetrySetting", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="VirtualResourceMetadataAssetUsage")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class VirtualResourceMetadataAssetUsage : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new VirtualResourceMetadataAssetUsage object.
        /// </summary>
        /// <param name="virtualResourceMetadataId">Initial value of the VirtualResourceMetadataId property.</param>
        /// <param name="assetSelectionData">Initial value of the AssetSelectionData property.</param>
        public static VirtualResourceMetadataAssetUsage CreateVirtualResourceMetadataAssetUsage(global::System.Guid virtualResourceMetadataId, global::System.String assetSelectionData)
        {
            VirtualResourceMetadataAssetUsage virtualResourceMetadataAssetUsage = new VirtualResourceMetadataAssetUsage();
            virtualResourceMetadataAssetUsage.VirtualResourceMetadataId = virtualResourceMetadataId;
            virtualResourceMetadataAssetUsage.AssetSelectionData = assetSelectionData;
            return virtualResourceMetadataAssetUsage;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid VirtualResourceMetadataId
        {
            get
            {
                return _VirtualResourceMetadataId;
            }
            set
            {
                if (_VirtualResourceMetadataId != value)
                {
                    OnVirtualResourceMetadataIdChanging(value);
                    ReportPropertyChanging("VirtualResourceMetadataId");
                    _VirtualResourceMetadataId = StructuralObject.SetValidValue(value, "VirtualResourceMetadataId");
                    ReportPropertyChanged("VirtualResourceMetadataId");
                    OnVirtualResourceMetadataIdChanged();
                }
            }
        }
        private global::System.Guid _VirtualResourceMetadataId;
        partial void OnVirtualResourceMetadataIdChanging(global::System.Guid value);
        partial void OnVirtualResourceMetadataIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String AssetSelectionData
        {
            get
            {
                return _AssetSelectionData;
            }
            set
            {
                OnAssetSelectionDataChanging(value);
                ReportPropertyChanging("AssetSelectionData");
                _AssetSelectionData = StructuralObject.SetValidValue(value, false, "AssetSelectionData");
                ReportPropertyChanged("AssetSelectionData");
                OnAssetSelectionDataChanged();
            }
        }
        private global::System.String _AssetSelectionData;
        partial void OnAssetSelectionDataChanging(global::System.String value);
        partial void OnAssetSelectionDataChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_VirtualResourceMetadataAssetUsage_VirtualResourceMetadata", "VirtualResourceMetadata")]
        public VirtualResourceMetadata VirtualResourceMetadata
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadata>("EnterpriseTestModel.FK_VirtualResourceMetadataAssetUsage_VirtualResourceMetadata", "VirtualResourceMetadata").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadata>("EnterpriseTestModel.FK_VirtualResourceMetadataAssetUsage_VirtualResourceMetadata", "VirtualResourceMetadata").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<VirtualResourceMetadata> VirtualResourceMetadataReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadata>("EnterpriseTestModel.FK_VirtualResourceMetadataAssetUsage_VirtualResourceMetadata", "VirtualResourceMetadata");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<VirtualResourceMetadata>("EnterpriseTestModel.FK_VirtualResourceMetadataAssetUsage_VirtualResourceMetadata", "VirtualResourceMetadata", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="VirtualResourceMetadataDocumentUsage")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class VirtualResourceMetadataDocumentUsage : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new VirtualResourceMetadataDocumentUsage object.
        /// </summary>
        /// <param name="virtualResourceMetadataId">Initial value of the VirtualResourceMetadataId property.</param>
        /// <param name="documentSelectionData">Initial value of the DocumentSelectionData property.</param>
        public static VirtualResourceMetadataDocumentUsage CreateVirtualResourceMetadataDocumentUsage(global::System.Guid virtualResourceMetadataId, global::System.String documentSelectionData)
        {
            VirtualResourceMetadataDocumentUsage virtualResourceMetadataDocumentUsage = new VirtualResourceMetadataDocumentUsage();
            virtualResourceMetadataDocumentUsage.VirtualResourceMetadataId = virtualResourceMetadataId;
            virtualResourceMetadataDocumentUsage.DocumentSelectionData = documentSelectionData;
            return virtualResourceMetadataDocumentUsage;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid VirtualResourceMetadataId
        {
            get
            {
                return _VirtualResourceMetadataId;
            }
            set
            {
                if (_VirtualResourceMetadataId != value)
                {
                    OnVirtualResourceMetadataIdChanging(value);
                    ReportPropertyChanging("VirtualResourceMetadataId");
                    _VirtualResourceMetadataId = StructuralObject.SetValidValue(value, "VirtualResourceMetadataId");
                    ReportPropertyChanged("VirtualResourceMetadataId");
                    OnVirtualResourceMetadataIdChanged();
                }
            }
        }
        private global::System.Guid _VirtualResourceMetadataId;
        partial void OnVirtualResourceMetadataIdChanging(global::System.Guid value);
        partial void OnVirtualResourceMetadataIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DocumentSelectionData
        {
            get
            {
                return _DocumentSelectionData;
            }
            set
            {
                OnDocumentSelectionDataChanging(value);
                ReportPropertyChanging("DocumentSelectionData");
                _DocumentSelectionData = StructuralObject.SetValidValue(value, false, "DocumentSelectionData");
                ReportPropertyChanged("DocumentSelectionData");
                OnDocumentSelectionDataChanged();
            }
        }
        private global::System.String _DocumentSelectionData;
        partial void OnDocumentSelectionDataChanging(global::System.String value);
        partial void OnDocumentSelectionDataChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_VirtualResourceMetadataDocumentUsage_VirtualResourceMetadata", "VirtualResourceMetadata")]
        public VirtualResourceMetadata VirtualResourceMetadata
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadata>("EnterpriseTestModel.FK_VirtualResourceMetadataDocumentUsage_VirtualResourceMetadata", "VirtualResourceMetadata").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadata>("EnterpriseTestModel.FK_VirtualResourceMetadataDocumentUsage_VirtualResourceMetadata", "VirtualResourceMetadata").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<VirtualResourceMetadata> VirtualResourceMetadataReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadata>("EnterpriseTestModel.FK_VirtualResourceMetadataDocumentUsage_VirtualResourceMetadata", "VirtualResourceMetadata");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<VirtualResourceMetadata>("EnterpriseTestModel.FK_VirtualResourceMetadataDocumentUsage_VirtualResourceMetadata", "VirtualResourceMetadata", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="VirtualResourceMetadataPrintQueueUsage")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class VirtualResourceMetadataPrintQueueUsage : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new VirtualResourceMetadataPrintQueueUsage object.
        /// </summary>
        /// <param name="virtualResourceMetadataId">Initial value of the VirtualResourceMetadataId property.</param>
        /// <param name="printQueueSelectionData">Initial value of the PrintQueueSelectionData property.</param>
        public static VirtualResourceMetadataPrintQueueUsage CreateVirtualResourceMetadataPrintQueueUsage(global::System.Guid virtualResourceMetadataId, global::System.String printQueueSelectionData)
        {
            VirtualResourceMetadataPrintQueueUsage virtualResourceMetadataPrintQueueUsage = new VirtualResourceMetadataPrintQueueUsage();
            virtualResourceMetadataPrintQueueUsage.VirtualResourceMetadataId = virtualResourceMetadataId;
            virtualResourceMetadataPrintQueueUsage.PrintQueueSelectionData = printQueueSelectionData;
            return virtualResourceMetadataPrintQueueUsage;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid VirtualResourceMetadataId
        {
            get
            {
                return _VirtualResourceMetadataId;
            }
            set
            {
                if (_VirtualResourceMetadataId != value)
                {
                    OnVirtualResourceMetadataIdChanging(value);
                    ReportPropertyChanging("VirtualResourceMetadataId");
                    _VirtualResourceMetadataId = StructuralObject.SetValidValue(value, "VirtualResourceMetadataId");
                    ReportPropertyChanged("VirtualResourceMetadataId");
                    OnVirtualResourceMetadataIdChanged();
                }
            }
        }
        private global::System.Guid _VirtualResourceMetadataId;
        partial void OnVirtualResourceMetadataIdChanging(global::System.Guid value);
        partial void OnVirtualResourceMetadataIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PrintQueueSelectionData
        {
            get
            {
                return _PrintQueueSelectionData;
            }
            set
            {
                OnPrintQueueSelectionDataChanging(value);
                ReportPropertyChanging("PrintQueueSelectionData");
                _PrintQueueSelectionData = StructuralObject.SetValidValue(value, false, "PrintQueueSelectionData");
                ReportPropertyChanged("PrintQueueSelectionData");
                OnPrintQueueSelectionDataChanged();
            }
        }
        private global::System.String _PrintQueueSelectionData;
        partial void OnPrintQueueSelectionDataChanging(global::System.String value);
        partial void OnPrintQueueSelectionDataChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_VirtualResourceMetadataPrintQueueUsage_VirtualResourceMetadata", "VirtualResourceMetadata")]
        public VirtualResourceMetadata VirtualResourceMetadata
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadata>("EnterpriseTestModel.FK_VirtualResourceMetadataPrintQueueUsage_VirtualResourceMetadata", "VirtualResourceMetadata").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadata>("EnterpriseTestModel.FK_VirtualResourceMetadataPrintQueueUsage_VirtualResourceMetadata", "VirtualResourceMetadata").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<VirtualResourceMetadata> VirtualResourceMetadataReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadata>("EnterpriseTestModel.FK_VirtualResourceMetadataPrintQueueUsage_VirtualResourceMetadata", "VirtualResourceMetadata");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<VirtualResourceMetadata>("EnterpriseTestModel.FK_VirtualResourceMetadataPrintQueueUsage_VirtualResourceMetadata", "VirtualResourceMetadata", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="VirtualResourceMetadataRetrySetting")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class VirtualResourceMetadataRetrySetting : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new VirtualResourceMetadataRetrySetting object.
        /// </summary>
        /// <param name="settingId">Initial value of the SettingId property.</param>
        /// <param name="virtualResourceMetadataId">Initial value of the VirtualResourceMetadataId property.</param>
        /// <param name="state">Initial value of the State property.</param>
        /// <param name="action">Initial value of the Action property.</param>
        /// <param name="retryLimit">Initial value of the RetryLimit property.</param>
        /// <param name="retryDelay">Initial value of the RetryDelay property.</param>
        /// <param name="limitExceededAction">Initial value of the LimitExceededAction property.</param>
        public static VirtualResourceMetadataRetrySetting CreateVirtualResourceMetadataRetrySetting(global::System.Guid settingId, global::System.Guid virtualResourceMetadataId, global::System.String state, global::System.String action, global::System.Int32 retryLimit, global::System.Int32 retryDelay, global::System.String limitExceededAction)
        {
            VirtualResourceMetadataRetrySetting virtualResourceMetadataRetrySetting = new VirtualResourceMetadataRetrySetting();
            virtualResourceMetadataRetrySetting.SettingId = settingId;
            virtualResourceMetadataRetrySetting.VirtualResourceMetadataId = virtualResourceMetadataId;
            virtualResourceMetadataRetrySetting.State = state;
            virtualResourceMetadataRetrySetting.Action = action;
            virtualResourceMetadataRetrySetting.RetryLimit = retryLimit;
            virtualResourceMetadataRetrySetting.RetryDelay = retryDelay;
            virtualResourceMetadataRetrySetting.LimitExceededAction = limitExceededAction;
            return virtualResourceMetadataRetrySetting;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid VirtualResourceMetadataId
        {
            get
            {
                return _VirtualResourceMetadataId;
            }
            set
            {
                OnVirtualResourceMetadataIdChanging(value);
                ReportPropertyChanging("VirtualResourceMetadataId");
                _VirtualResourceMetadataId = StructuralObject.SetValidValue(value, "VirtualResourceMetadataId");
                ReportPropertyChanged("VirtualResourceMetadataId");
                OnVirtualResourceMetadataIdChanged();
            }
        }
        private global::System.Guid _VirtualResourceMetadataId;
        partial void OnVirtualResourceMetadataIdChanging(global::System.Guid value);
        partial void OnVirtualResourceMetadataIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String State
        {
            get
            {
                return _State;
            }
            set
            {
                OnStateChanging(value);
                ReportPropertyChanging("State");
                _State = StructuralObject.SetValidValue(value, false, "State");
                ReportPropertyChanged("State");
                OnStateChanged();
            }
        }
        private global::System.String _State;
        partial void OnStateChanging(global::System.String value);
        partial void OnStateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Action
        {
            get
            {
                return _Action;
            }
            set
            {
                OnActionChanging(value);
                ReportPropertyChanging("Action");
                _Action = StructuralObject.SetValidValue(value, false, "Action");
                ReportPropertyChanged("Action");
                OnActionChanged();
            }
        }
        private global::System.String _Action;
        partial void OnActionChanging(global::System.String value);
        partial void OnActionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RetryLimit
        {
            get
            {
                return _RetryLimit;
            }
            set
            {
                OnRetryLimitChanging(value);
                ReportPropertyChanging("RetryLimit");
                _RetryLimit = StructuralObject.SetValidValue(value, "RetryLimit");
                ReportPropertyChanged("RetryLimit");
                OnRetryLimitChanged();
            }
        }
        private global::System.Int32 _RetryLimit;
        partial void OnRetryLimitChanging(global::System.Int32 value);
        partial void OnRetryLimitChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RetryDelay
        {
            get
            {
                return _RetryDelay;
            }
            set
            {
                OnRetryDelayChanging(value);
                ReportPropertyChanging("RetryDelay");
                _RetryDelay = StructuralObject.SetValidValue(value, "RetryDelay");
                ReportPropertyChanged("RetryDelay");
                OnRetryDelayChanged();
            }
        }
        private global::System.Int32 _RetryDelay;
        partial void OnRetryDelayChanging(global::System.Int32 value);
        partial void OnRetryDelayChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LimitExceededAction
        {
            get
            {
                return _LimitExceededAction;
            }
            set
            {
                OnLimitExceededActionChanging(value);
                ReportPropertyChanging("LimitExceededAction");
                _LimitExceededAction = StructuralObject.SetValidValue(value, false, "LimitExceededAction");
                ReportPropertyChanged("LimitExceededAction");
                OnLimitExceededActionChanged();
            }
        }
        private global::System.String _LimitExceededAction;
        partial void OnLimitExceededActionChanging(global::System.String value);
        partial void OnLimitExceededActionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SettingId
        {
            get
            {
                return _SettingId;
            }
            set
            {
                if (_SettingId != value)
                {
                    OnSettingIdChanging(value);
                    ReportPropertyChanging("SettingId");
                    _SettingId = StructuralObject.SetValidValue(value, "SettingId");
                    ReportPropertyChanged("SettingId");
                    OnSettingIdChanged();
                }
            }
        }
        private global::System.Guid _SettingId;
        partial void OnSettingIdChanging(global::System.Guid value);
        partial void OnSettingIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_VirtualResourceMetadataRetrySetting_VirtualResourceMetadata", "VirtualResourceMetadata")]
        public VirtualResourceMetadata VirtualResourceMetadata
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadata>("EnterpriseTestModel.FK_VirtualResourceMetadataRetrySetting_VirtualResourceMetadata", "VirtualResourceMetadata").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadata>("EnterpriseTestModel.FK_VirtualResourceMetadataRetrySetting_VirtualResourceMetadata", "VirtualResourceMetadata").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<VirtualResourceMetadata> VirtualResourceMetadataReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadata>("EnterpriseTestModel.FK_VirtualResourceMetadataRetrySetting_VirtualResourceMetadata", "VirtualResourceMetadata");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<VirtualResourceMetadata>("EnterpriseTestModel.FK_VirtualResourceMetadataRetrySetting_VirtualResourceMetadata", "VirtualResourceMetadata", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EnterpriseTestModel", Name="VirtualResourceMetadataServerUsage")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class VirtualResourceMetadataServerUsage : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new VirtualResourceMetadataServerUsage object.
        /// </summary>
        /// <param name="virtualResourceMetadataId">Initial value of the VirtualResourceMetadataId property.</param>
        /// <param name="serverSelectionData">Initial value of the ServerSelectionData property.</param>
        public static VirtualResourceMetadataServerUsage CreateVirtualResourceMetadataServerUsage(global::System.Guid virtualResourceMetadataId, global::System.String serverSelectionData)
        {
            VirtualResourceMetadataServerUsage virtualResourceMetadataServerUsage = new VirtualResourceMetadataServerUsage();
            virtualResourceMetadataServerUsage.VirtualResourceMetadataId = virtualResourceMetadataId;
            virtualResourceMetadataServerUsage.ServerSelectionData = serverSelectionData;
            return virtualResourceMetadataServerUsage;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid VirtualResourceMetadataId
        {
            get
            {
                return _VirtualResourceMetadataId;
            }
            set
            {
                if (_VirtualResourceMetadataId != value)
                {
                    OnVirtualResourceMetadataIdChanging(value);
                    ReportPropertyChanging("VirtualResourceMetadataId");
                    _VirtualResourceMetadataId = StructuralObject.SetValidValue(value, "VirtualResourceMetadataId");
                    ReportPropertyChanged("VirtualResourceMetadataId");
                    OnVirtualResourceMetadataIdChanged();
                }
            }
        }
        private global::System.Guid _VirtualResourceMetadataId;
        partial void OnVirtualResourceMetadataIdChanging(global::System.Guid value);
        partial void OnVirtualResourceMetadataIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ServerSelectionData
        {
            get
            {
                return _ServerSelectionData;
            }
            set
            {
                OnServerSelectionDataChanging(value);
                ReportPropertyChanging("ServerSelectionData");
                _ServerSelectionData = StructuralObject.SetValidValue(value, false, "ServerSelectionData");
                ReportPropertyChanged("ServerSelectionData");
                OnServerSelectionDataChanged();
            }
        }
        private global::System.String _ServerSelectionData;
        partial void OnServerSelectionDataChanging(global::System.String value);
        partial void OnServerSelectionDataChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EnterpriseTestModel", "FK_VirtualResourceMetadataServerUsage_VirtualResourceMetadata", "VirtualResourceMetadata")]
        public VirtualResourceMetadata VirtualResourceMetadata
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadata>("EnterpriseTestModel.FK_VirtualResourceMetadataServerUsage_VirtualResourceMetadata", "VirtualResourceMetadata").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadata>("EnterpriseTestModel.FK_VirtualResourceMetadataServerUsage_VirtualResourceMetadata", "VirtualResourceMetadata").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<VirtualResourceMetadata> VirtualResourceMetadataReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VirtualResourceMetadata>("EnterpriseTestModel.FK_VirtualResourceMetadataServerUsage_VirtualResourceMetadata", "VirtualResourceMetadata");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<VirtualResourceMetadata>("EnterpriseTestModel.FK_VirtualResourceMetadataServerUsage_VirtualResourceMetadata", "VirtualResourceMetadata", value);
                }
            }
        }

        #endregion

    }

    #endregion

}

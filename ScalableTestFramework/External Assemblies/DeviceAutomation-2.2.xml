<?xml version="1.0"?>
<doc>
  <assembly>
    <name>DeviceAutomation-2.2</name>
  </assembly>
  <members>
    <member name="T:HP.DeviceAutomation.BoundingBox">
      <summary>
            Represents a bounding box for a screen element.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.BoundingBox.#ctor(HP.DeviceAutomation.Coordinate,HP.DeviceAutomation.Size)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.BoundingBox" /> struct.
            </summary>
      <param name="location">The location of the upper-left corner of the bounding box.</param>
      <param name="size">The size of the bounding box.</param>
    </member>
    <member name="M:HP.DeviceAutomation.BoundingBox.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this <see cref="T:HP.DeviceAutomation.BoundingBox" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this <see cref="T:HP.DeviceAutomation.BoundingBox" />.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.BoundingBox.Equals(HP.DeviceAutomation.BoundingBox)">
      <summary>
            Tests whether this <see cref="T:HP.DeviceAutomation.BoundingBox" /> represents the same rectangular area as another <see cref="T:HP.DeviceAutomation.BoundingBox" />.
            </summary>
      <param name="other">The <see cref="T:HP.DeviceAutomation.BoundingBox" /> to compare with this <see cref="T:HP.DeviceAutomation.BoundingBox" />.</param>
      <returns>
        <c>true</c> if the current <see cref="T:HP.DeviceAutomation.BoundingBox" /> represents the same rectangular area as the <paramref name="other" /> parameter; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.BoundingBox.Equals(System.Object)">
      <summary>
            Tests whether <paramref name="obj" /> is a <see cref="T:HP.DeviceAutomation.BoundingBox" /> representing the same rectangular area as this <see cref="T:HP.DeviceAutomation.BoundingBox" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this <see cref="T:HP.DeviceAutomation.BoundingBox" />.</param>
      <returns>
        <c>true</c> if <paramref name="obj" /> is a <see cref="T:HP.DeviceAutomation.BoundingBox" /> representing the same rectangular area as this <see cref="T:HP.DeviceAutomation.BoundingBox" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.BoundingBox.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:HP.DeviceAutomation.BoundingBox" />.
            </summary>
      <returns>A hash code for this <see cref="T:HP.DeviceAutomation.BoundingBox" />, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.BoundingBox.op_Equality(HP.DeviceAutomation.BoundingBox,HP.DeviceAutomation.BoundingBox)">
      <summary>
            Tests whether two <see cref="T:HP.DeviceAutomation.BoundingBox" /> structures represent the same rectangular area.
            </summary>
      <param name="left">The <see cref="T:HP.DeviceAutomation.BoundingBox" /> that is to the left of the equality operator.</param>
      <param name="right">The <see cref="T:HP.DeviceAutomation.BoundingBox" /> that is to the right of the equality operator.</param>
      <returns>
        <c>true</c> if the <see cref="T:HP.DeviceAutomation.BoundingBox" /> structures represent the same rectangular area; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.BoundingBox.op_Inequality(HP.DeviceAutomation.BoundingBox,HP.DeviceAutomation.BoundingBox)">
      <summary>
            Tests whether two <see cref="T:HP.DeviceAutomation.BoundingBox" /> structures represent different rectangular areas.
            </summary>
      <param name="left">The <see cref="T:HP.DeviceAutomation.BoundingBox" /> that is to the left of the inequality operator.</param>
      <param name="right">The <see cref="T:HP.DeviceAutomation.BoundingBox" /> that is to the right of the inequality operator.</param>
      <returns>
        <c>true</c> if the <see cref="T:HP.DeviceAutomation.BoundingBox" /> structures represent different rectangular areas; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.BoundingBox.Location">
      <summary>
            Gets the location of the upper-left corner of this <see cref="T:HP.DeviceAutomation.BoundingBox" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.BoundingBox.Size">
      <summary>
            Gets the size of this <see cref="T:HP.DeviceAutomation.BoundingBox" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.BoundingBox.Left">
      <summary>
            Gets the x-coordinate of the left edge of this <see cref="T:HP.DeviceAutomation.BoundingBox" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.BoundingBox.Right">
      <summary>
            Gets the x-coordinate of the right edge of this <see cref="T:HP.DeviceAutomation.BoundingBox" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.BoundingBox.Top">
      <summary>
            Gets the y-coordinate of the top edge of this <see cref="T:HP.DeviceAutomation.BoundingBox" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.BoundingBox.Bottom">
      <summary>
            Gets the y-coordinate of the bottom edge of this <see cref="T:HP.DeviceAutomation.BoundingBox" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.BoundingBox.Width">
      <summary>
            Gets the width of this <see cref="T:HP.DeviceAutomation.BoundingBox" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.BoundingBox.Height">
      <summary>
            Gets the height of this <see cref="T:HP.DeviceAutomation.BoundingBox" />.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.BsiHttpBinding">
      <summary>
            Defines the HTTP binding for a BSI-r service.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.BsiHttpBinding.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.BsiHttpBinding" /> class with <see cref="F:System.ServiceModel.SecurityMode.None" />.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.BsiHttpBinding.#ctor(System.ServiceModel.SecurityMode)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.BsiHttpBinding" /> class with the specified <see cref="T:System.ServiceModel.SecurityMode" />.
            </summary>
      <param name="securityMode">The <see cref="T:System.ServiceModel.SecurityMode" /> that specifies the type of security that is used with the SOAP message and for the client.</param>
    </member>
    <member name="M:HP.DeviceAutomation.BsiHttpBinding.CreateBindingElements">
      <summary>
            Returns an ordered collection of binding elements contained in the current binding.
            </summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> that contains the ordered stack of binding elements described by the binding.</returns>
    </member>
    <member name="T:HP.DeviceAutomation.Coordinate">
      <summary>
            Represents a screen location with x- and y-coordinates.
            </summary>
      <remarks>
            The coordinate system for a screen is defined with the origin (0,0) in the upper-left corner.
            The x-coordinate represents the number of pixels from the left edge of the screen;
            the y-coordinate represents the number of pixels from the top edge of the screen.
            
            Negative x- or y-coordinates represent locations beyond the left or top edge of the screen.
            Positive x- or y-coordinates may represent locations beyond the right or bottom edges of the screen
            if their value is larger than the width or height of the screen.
            </remarks>
    </member>
    <member name="M:HP.DeviceAutomation.Coordinate.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Coordinate" /> struct.
            </summary>
      <param name="x">The x-coordinate.</param>
      <param name="y">The y-coordinate.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Coordinate.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this <see cref="T:HP.DeviceAutomation.Coordinate" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this <see cref="T:HP.DeviceAutomation.Coordinate" />.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Coordinate.Equals(HP.DeviceAutomation.Coordinate)">
      <summary>
            Tests whether this <see cref="T:HP.DeviceAutomation.Coordinate" /> represents the same location as another <see cref="T:HP.DeviceAutomation.Coordinate" />.
            </summary>
      <param name="other">The <see cref="T:HP.DeviceAutomation.Coordinate" /> to compare with this <see cref="T:HP.DeviceAutomation.Coordinate" />.</param>
      <returns>
        <c>true</c> if the current <see cref="T:HP.DeviceAutomation.Coordinate" /> represents the same location as the <paramref name="other" /> parameter; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Coordinate.Equals(System.Object)">
      <summary>
            Tests whether <paramref name="obj" /> is a <see cref="T:HP.DeviceAutomation.Coordinate" /> representing the same location as this <see cref="T:HP.DeviceAutomation.Coordinate" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this <see cref="T:HP.DeviceAutomation.Coordinate" />.</param>
      <returns>
        <c>true</c> if <paramref name="obj" /> is a <see cref="T:HP.DeviceAutomation.Coordinate" /> representing the same location as this <see cref="T:HP.DeviceAutomation.Coordinate" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Coordinate.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:HP.DeviceAutomation.Coordinate" />.
            </summary>
      <returns>A hash code for this <see cref="T:HP.DeviceAutomation.Coordinate" />, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Coordinate.op_Equality(HP.DeviceAutomation.Coordinate,HP.DeviceAutomation.Coordinate)">
      <summary>
            Tests whether two <see cref="T:HP.DeviceAutomation.Coordinate" /> structures represent the same location.
            </summary>
      <param name="left">The <see cref="T:HP.DeviceAutomation.Coordinate" /> that is to the left of the equality operator.</param>
      <param name="right">The <see cref="T:HP.DeviceAutomation.Coordinate" /> that is to the right of the equality operator.</param>
      <returns>
        <c>true</c> if the <see cref="T:HP.DeviceAutomation.Coordinate" /> structures represent the same location; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Coordinate.op_Inequality(HP.DeviceAutomation.Coordinate,HP.DeviceAutomation.Coordinate)">
      <summary>
            Tests whether two <see cref="T:HP.DeviceAutomation.Coordinate" /> structures represent different locations.
            </summary>
      <param name="left">The <see cref="T:HP.DeviceAutomation.Coordinate" /> that is to the left of the inequality operator.</param>
      <param name="right">The <see cref="T:HP.DeviceAutomation.Coordinate" /> that is to the right of the inequality operator.</param>
      <returns>
        <c>true</c> if the <see cref="T:HP.DeviceAutomation.Coordinate" /> structures represent different locations; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.Coordinate.X">
      <summary>
            Gets the x-component of this <see cref="T:HP.DeviceAutomation.Coordinate" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Coordinate.Y">
      <summary>
            Gets the y-component of this <see cref="T:HP.DeviceAutomation.Coordinate" />.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.DeviceAddressParameter">
      <summary>
            A <see cref="T:HP.DeviceAutomation.DeviceConstructionParameter" /> containing a device's network address.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceAddressParameter.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceAddressParameter" /> class.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceAddressParameter.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceAddressParameter" /> class.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="P:HP.DeviceAutomation.DeviceAddressParameter.Address">
      <summary>
            Gets the <see cref="T:HP.DeviceAutomation.DeviceNetworkAddress" /> stored in this <see cref="T:HP.DeviceAutomation.DeviceAddressParameter" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.DeviceAddressParameter.Name">
      <summary>
            Gets the name of this <see cref="T:HP.DeviceAutomation.DeviceConstructionParameter" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.DeviceAddressParameter.Value">
      <summary>
            Gets the value of this <see cref="T:HP.DeviceAutomation.DeviceConstructionParameter" />.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.DeviceAdminPasswordParameter">
      <summary>
            A <see cref="T:HP.DeviceAutomation.DeviceConstructionParameter" /> containing a device's administrator password.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceAdminPasswordParameter.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceAdminPasswordParameter" /> class.
            </summary>
      <param name="adminPassword">The admin password.</param>
    </member>
    <member name="P:HP.DeviceAutomation.DeviceAdminPasswordParameter.AdminPassword">
      <summary>
            Gets the admin password stored in this <see cref="T:HP.DeviceAutomation.DeviceAdminPasswordParameter" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.DeviceAdminPasswordParameter.Name">
      <summary>
            Gets the name of this <see cref="T:HP.DeviceAutomation.DeviceConstructionParameter" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.DeviceAdminPasswordParameter.Value">
      <summary>
            Gets the value of this <see cref="T:HP.DeviceAutomation.DeviceConstructionParameter" />.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.DeviceCommunicationException">
      <summary>
            Exception thrown when a device does not respond to a network call,
            or when a network connection to a device cannot be established.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceCommunicationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceCommunicationException" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceCommunicationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceCommunicationException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceCommunicationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceCommunicationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceCommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceCommunicationException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:HP.DeviceAutomation.DeviceConstructionException">
      <summary>
            Exception thrown when device construction fails due to missing or conflicting parameters.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceConstructionException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceConstructionException" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceConstructionException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceConstructionException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceConstructionException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceConstructionException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceConstructionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceConstructionException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:HP.DeviceAutomation.DeviceConstructionParameter">
      <summary>
            A parameter used in device construction.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceConstructionParameter.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this <see cref="T:HP.DeviceAutomation.DeviceConstructionParameter" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this <see cref="T:HP.DeviceAutomation.DeviceConstructionParameter" />.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.DeviceConstructionParameter.Name">
      <summary>
            Gets the name of this <see cref="T:HP.DeviceAutomation.DeviceConstructionParameter" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.DeviceConstructionParameter.Value">
      <summary>
            Gets the value of this <see cref="T:HP.DeviceAutomation.DeviceConstructionParameter" />.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.DeviceConstructionParameterCollection">
      <summary>
            A collection of <see cref="T:HP.DeviceAutomation.DeviceConstructionParameter" /> objects.
            </summary>
      <remarks>
            This class is used to allow parameters for many different device types to be passed into DeviceFactory,
            without requiring that each of the child device types know about each of those parameters.
            Each device type can look for and use the parameters it is interested in, while ignoring those that don't apply.
            </remarks>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceConstructionParameterCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceConstructionParameterCollection" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceConstructionParameterCollection.#ctor(HP.DeviceAutomation.DeviceConstructionParameter[])">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceConstructionParameterCollection" /> class
            with the specified parameters.
            </summary>
      <param name="parameters">The parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceConstructionParameterCollection.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceConstructionParameterCollection" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceConstructionParameterCollection.#ctor(System.Net.IPAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceConstructionParameterCollection" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceConstructionParameterCollection.GetAddress">
      <summary>
            Gets the value of the <see cref="T:HP.DeviceAutomation.DeviceAddressParameter" /> in this <see cref="T:HP.DeviceAutomation.DeviceConstructionParameterCollection" />.
            </summary>
      <returns>The device address.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">This instance does not contain a <see cref="T:HP.DeviceAutomation.DeviceAddressParameter" />.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceConstructionParameterCollection.GetAdminPassword">
      <summary>
            Gets the value of the <see cref="T:HP.DeviceAutomation.DeviceAdminPasswordParameter" /> in this <see cref="T:HP.DeviceAutomation.DeviceConstructionParameterCollection" />, or null if none is found.
            </summary>
      <returns>The device admin password, or null if no <see cref="T:HP.DeviceAutomation.DeviceAdminPasswordParameter" /> is found.</returns>
    </member>
    <member name="T:HP.DeviceAutomation.DeviceFactory">
      <summary>
            Factory for creating <see cref="T:HP.DeviceAutomation.IDevice" /> objects.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceFactory.Create(System.String)">
      <summary>
            Creates an <see cref="T:HP.DeviceAutomation.IDevice" /> object for the device at the specified address.
            </summary>
      <param name="address">The device address.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.IDevice" /> object for the device at the specified address.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.UnknownDeviceTypeException">The type of device at the specified address could not be determined.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceFactory.Create(System.Net.IPAddress)">
      <summary>
            Creates an <see cref="T:HP.DeviceAutomation.IDevice" /> object for the device at the specified address.
            </summary>
      <param name="address">The device address.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.IDevice" /> object for the device at the specified address.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.UnknownDeviceTypeException">The type of device at the specified address could not be determined.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceFactory.Create(System.String,System.String)">
      <summary>
            Creates an <see cref="T:HP.DeviceAutomation.IDevice" /> object for the device at the specified address with the specified admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.IDevice" /> object for the device at the specified address.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.UnknownDeviceTypeException">The type of device at the specified address could not be determined.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceFactory.Create(System.Net.IPAddress,System.String)">
      <summary>
            Creates an <see cref="T:HP.DeviceAutomation.IDevice" /> object for the device at the specified address with the specified admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.IDevice" /> object for the device at the specified address.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.UnknownDeviceTypeException">The type of device at the specified address could not be determined.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceFactory.Create(HP.DeviceAutomation.DeviceConstructionParameterCollection)">
      <summary>
            Creates an <see cref="T:HP.DeviceAutomation.IDevice" /> object using the specified construction parameters.
            </summary>
      <param name="parameters">The device construction parameters.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.IDevice" /> object for the device constructed from the specified parameters.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.UnknownDeviceTypeException">The type of device at the specified address could not be determined.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.DeviceInvalidOperationException">
      <summary>
            Exception thrown when a device method call is invalid for the device's current state.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceInvalidOperationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceInvalidOperationException" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceInvalidOperationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceInvalidOperationException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceInvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceInvalidOperationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceInvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceInvalidOperationException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:HP.DeviceAutomation.DeviceNetworkAddress">
      <summary>
            Contains a device network address, expressed either as a <see cref="T:System.String" /> or an <see cref="T:System.Net.IPAddress" />.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceNetworkAddress.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceNetworkAddress" /> class.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceNetworkAddress.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceNetworkAddress" /> class.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceNetworkAddress.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this <see cref="T:HP.DeviceAutomation.DeviceNetworkAddress" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this <see cref="T:HP.DeviceAutomation.DeviceNetworkAddress" />.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.DeviceNetworkAddress.StringAddress">
      <summary>
            Gets the network address as a <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.DeviceNetworkAddress.IPAddress">
      <summary>
            Gets the network address as an <see cref="T:System.Net.IPAddress" />.
            Will be null if this instance was not created using an <see cref="T:System.Net.IPAddress" /> object.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.DeviceSecurityException">
      <summary>
            Exception thrown when a device operation cannot be completed due to an incorrect or missing admin password.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceSecurityException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceSecurityException" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceSecurityException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceSecurityException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceSecurityException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceSecurityException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceSecurityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.DeviceSecurityException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:HP.DeviceAutomation.DeviceSnmp">
      <summary>
            Helper class for retrieving or setting common SNMP values from a device.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceSnmp.GetModelName(HP.DeviceAutomation.Snmp)">
      <summary>
            Gets the device model name.
            </summary>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <returns>The device model name, or null if the information could not be retrieved.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceSnmp.GetModelNumber(HP.DeviceAutomation.Snmp)">
      <summary>
            Gets the device model number.
            </summary>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <returns>The device model number, or null if the information could not be retrieved.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceSnmp.GetSerialNumber(HP.DeviceAutomation.Snmp)">
      <summary>
            Gets the device serial number.
            </summary>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <returns>The device serial number, or null if the information could not be retrieved.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceSnmp.GetFirmwareRevision(HP.DeviceAutomation.Snmp)">
      <summary>
            Gets the device firmware revision.
            </summary>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <returns>The device firmware revision, or null if the information could not be retrieved.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceSnmp.GetFirmwareDateCode(HP.DeviceAutomation.Snmp)">
      <summary>
            Gets the device firmware date code.
            </summary>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <returns>The device firmware date code, or null if the information could not be retrieved.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceSnmp.GetDeviceId(HP.DeviceAutomation.Snmp)">
      <summary>
            Gets the device product ID.
            </summary>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <returns>The device product ID, or null if the information could not be retrieved.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceSnmp.GetDeviceStatus(HP.DeviceAutomation.Snmp)">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.DeviceStatus" /> object representing the current device operational state.
            </summary>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <returns>The device status, or <see cref="F:HP.DeviceAutomation.DeviceStatus.None" /> if the device did not respond.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceSnmp.GetPrinterStatus(HP.DeviceAutomation.Snmp)">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.PrinterStatus" /> object representing the current printer state.
            </summary>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <returns>The printer status, or <see cref="F:HP.DeviceAutomation.PrinterStatus.None" /> if the device did not respond.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceSnmp.GetPowerState(HP.DeviceAutomation.Snmp)">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.PowerState" /> object representing the current device power state.
            </summary>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <returns>The power state, or <see cref="F:HP.DeviceAutomation.PowerState.None" /> if the device did not respond.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceSnmp.SetSleepModeStatus(HP.DeviceAutomation.Snmp,System.Int32)">
      <summary>
            Sets the sleep mode status.
            </summary>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <param name="value">The value to set.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceSnmp.GeneralReset(HP.DeviceAutomation.Snmp,System.Int32)">
      <summary>
            Performs a reset command.
            </summary>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <param name="value">The value to set.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceSnmp.GetInfo(HP.DeviceAutomation.Snmp,System.String)">
      <summary>
            Gets SNMP information using the specified object identifier.
            Exceptions are caught and converted to a null return value.
            </summary>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <param name="oid">The SNMP object identifier.</param>
      <returns>The SNMP object value, if successful; null otherwise.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.DeviceSnmp.GetInfo``1(HP.DeviceAutomation.Snmp,System.String)">
      <summary>
            Gets SNMP information using the specified object identifier.
            Exceptions are caught and converted to the default value of <typeparamref name="T" />.
            </summary>
      <typeparam name="T">The type of value to return.</typeparam>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <param name="oid">The SNMP object identifier.</param>
      <returns>The SNMP object value, if successful; the default value of <typeparamref name="T" /> otherwise.</returns>
    </member>
    <member name="T:HP.DeviceAutomation.DeviceStatus">
      <summary>
            Represents the operational state of a device.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.DeviceStatus.None">
      <summary>
            No status returned.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.DeviceStatus.Unknown">
      <summary>
            The current state of the device is unknown.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.DeviceStatus.Running">
      <summary>
            The device is ready for use or is currently in use.
            May be in power save mode.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.DeviceStatus.Warning">
      <summary>
            A condition exists that needs attention but is not preventing use.
            A non-critical alert is active.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.DeviceStatus.Testing">
      <summary>
            The device is not available for use because it is in the testing state.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.DeviceStatus.Down">
      <summary>
            The device is not available for use because it is offline or a critical alert is active.
            Human interaction is needed to bring the device to a ready state.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.HttpMessenger">
      <summary>
            Provides methods for communicating with a device using HTTP.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.HttpMessenger.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.HttpMessenger" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.HttpMessenger.BuildRequest(System.Uri,HP.DeviceAutomation.HttpVerb)">
      <summary>
            Builds an <see cref="T:System.Net.HttpWebRequest" /> for the specified <see cref="T:System.Uri" /> and HTTP method.
            </summary>
      <param name="uri">The <see cref="T:System.Uri" />.</param>
      <param name="method">The HTTP method.</param>
      <returns>An <see cref="T:System.Net.HttpWebRequest" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.HttpMessenger.BuildRequest(System.Uri,HP.DeviceAutomation.HttpVerb,System.Object)">
      <summary>
            Builds an <see cref="T:System.Net.HttpWebRequest" /> for the specified <see cref="T:System.Uri" />, HTTP method, and request data.
            </summary>
      <param name="uri">The <see cref="T:System.Uri" />.</param>
      <param name="method">The HTTP method.</param>
      <param name="requestData">The request data.  If null, the returned <see cref="T:System.Net.HttpWebRequest" /> will contain no data.</param>
      <returns>An <see cref="T:System.Net.HttpWebRequest" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.HttpMessenger.BuildRequest(System.Uri,HP.DeviceAutomation.HttpVerb,System.Net.WebHeaderCollection)">
      <summary>
            Builds an <see cref="T:System.Net.HttpWebRequest" /> for the specified <see cref="T:System.Uri" /> and HTTP method.
            The specified headers are added to the request.
            </summary>
      <param name="uri">The <see cref="T:System.Uri" />.</param>
      <param name="method">The HTTP method.</param>
      <param name="headers">The headers to be added to the web request.  Ignored if null.</param>
      <returns>An <see cref="T:System.Net.HttpWebRequest" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.HttpMessenger.BuildRequest(System.Uri,HP.DeviceAutomation.HttpVerb,System.Net.WebHeaderCollection,System.Object)">
      <summary>
            Builds an <see cref="T:System.Net.HttpWebRequest" /> for the specified <see cref="T:System.Uri" />, HTTP method, and request data.
            The specified headers are added to the request.
            </summary>
      <param name="uri">The <see cref="T:System.Uri" />.</param>
      <param name="method">The HTTP method.</param>
      <param name="headers">The headers to be added to the web request.  Ignored if null.</param>
      <param name="requestData">The request data.  If null, the returned <see cref="T:System.Net.HttpWebRequest" /> will contain no data.</param>
      <returns>An <see cref="T:System.Net.HttpWebRequest" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.HttpMessenger.ExecuteRequest(System.Uri,HP.DeviceAutomation.HttpVerb)">
      <summary>
            Builds and executes an <see cref="T:System.Net.HttpWebRequest" /> for the specified <see cref="T:System.Uri" /> and HTTP method.
            </summary>
      <param name="uri">The <see cref="T:System.Uri" />.</param>
      <param name="method">The HTTP method.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.HttpResponse" /> object containing the result of the HTTP request.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null.</exception>
      <exception cref="T:System.Net.WebException">An error occurred while processing the request.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.HttpMessenger.ExecuteRequest(System.Uri,HP.DeviceAutomation.HttpVerb,System.Boolean)">
      <summary>
            Builds and executes an <see cref="T:System.Net.HttpWebRequest" /> for the specified <see cref="T:System.Uri" /> and HTTP method.
            </summary>
      <param name="uri">The <see cref="T:System.Uri" />.</param>
      <param name="method">The HTTP method.</param>
      <param name="readResponseBody">if set to <c>true</c> read the body of the response; otherwise, ignore the response body.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.HttpResponse" /> object containing the result of the HTTP request.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null.</exception>
      <exception cref="T:System.Net.WebException">An error occurred while processing the request.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.HttpMessenger.ExecuteRequest(System.Uri,HP.DeviceAutomation.HttpVerb,System.Object)">
      <summary>
            Builds and executes an <see cref="T:System.Net.HttpWebRequest" /> for the specified <see cref="T:System.Uri" />, HTTP method, and request data.
            </summary>
      <param name="uri">The <see cref="T:System.Uri" />.</param>
      <param name="method">The HTTP method.</param>
      <param name="requestData">The request data.  If null, the request will contain no data.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.HttpResponse" /> object containing the result of the HTTP request.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null.</exception>
      <exception cref="T:System.Net.WebException">An error occurred while processing the request.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.HttpMessenger.ExecuteRequest(System.Uri,HP.DeviceAutomation.HttpVerb,System.Object,System.Boolean)">
      <summary>
            Builds and executes an <see cref="T:System.Net.HttpWebRequest" /> for the specified <see cref="T:System.Uri" />, HTTP method, and request data.
            </summary>
      <param name="uri">The <see cref="T:System.Uri" />.</param>
      <param name="method">The HTTP method.</param>
      <param name="requestData">The request data.  If null, the request will contain no data.</param>
      <param name="readResponseBody">if set to <c>true</c> read the body of the response; otherwise, ignore the response body.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.HttpResponse" /> object containing the result of the HTTP request.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null.</exception>
      <exception cref="T:System.Net.WebException">An error occurred while processing the request.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.HttpMessenger.ExecuteRequest(System.Net.HttpWebRequest)">
      <summary>
            Executes the specified <see cref="T:System.Net.HttpWebRequest" />.
            </summary>
      <param name="request">The <see cref="T:System.Net.HttpWebRequest" /> to execute.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.HttpResponse" /> object containing the result of the HTTP request.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> is null.</exception>
      <exception cref="T:System.Net.WebException">An error occurred while processing the request.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.HttpMessenger.ExecuteRequest(System.Net.HttpWebRequest,System.Boolean)">
      <summary>
            Executes the specified <see cref="T:System.Net.HttpWebRequest" />.
            </summary>
      <param name="request">The <see cref="T:System.Net.HttpWebRequest" /> to execute.</param>
      <param name="readResponseBody">if set to <c>true</c> read the body of the response; otherwise, ignore the response body.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.HttpResponse" /> object containing the result of the HTTP request.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> is null.</exception>
      <exception cref="T:System.Net.WebException">An error occurred while processing the request.</exception>
    </member>
    <member name="P:HP.DeviceAutomation.HttpMessenger.Accept">
      <summary>
            Gets or sets the Accept HTTP header to use for requests.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.HttpMessenger.AllowAutoRedirect">
      <summary>
            Gets or sets a value indicating whether requests should follow redirection responses.
            The default value is <c>true</c>.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.HttpMessenger.ContentType">
      <summary>
            Gets or sets the Content-Type HTTP header to use for requests.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.HttpMessenger.Credential">
      <summary>
            Gets or sets authentication information to use for requests.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.HttpMessenger.Encoding">
      <summary>
            Gets or sets the <see cref="T:System.Text.Encoding" /> to use for request data.
            The default is <see cref="P:System.Text.Encoding.UTF8" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.HttpMessenger.Expect100Continue">
      <summary>
            Gets or sets a value indicating whether 100-Continue behavior is used.
            The default value is <c>true</c>.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.HttpResponse">
      <summary>
            Represents a response received from an HTTP request.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.HttpResponse.#ctor(System.Net.HttpWebResponse)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.HttpResponse" /> class from the specified <see cref="T:System.Net.HttpWebResponse" />.
            </summary>
      <param name="webResponse">The <see cref="T:System.Net.HttpWebResponse" /> from which to create this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="webResponse" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.HttpResponse.#ctor(System.Net.HttpWebResponse,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.HttpResponse" /> class from the specified <see cref="T:System.Net.HttpWebResponse" />,
            optionally ignoring the response body.
            </summary>
      <param name="webResponse">The <see cref="T:System.Net.HttpWebResponse" /> from which to create this instance.</param>
      <param name="readResponseBody">if set to <c>true</c> read the body of the response; otherwise, ignore the response body.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="webResponse" /> is null.</exception>
    </member>
    <member name="P:HP.DeviceAutomation.HttpResponse.StatusCode">
      <summary>
            Gets the response status code.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.HttpResponse.ContentType">
      <summary>
            Gets the response content type.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.HttpResponse.Headers">
      <summary>
            Gets the response headers.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.HttpResponse.Body">
      <summary>
            Gets the response body.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.HttpVerb">
      <summary>
            Specifies HTTP "verbs" (methods) that can be used by requests.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.HttpVerb.Get">
      <summary>
            Request will perform a GET operation to read a resource.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.HttpVerb.Post">
      <summary>
            Request will perform a POST operation to create a new resource.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.HttpVerb.Put">
      <summary>
            Request will perform a PUT operation to update a resource.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.HttpVerb.Delete">
      <summary>
            Request will perform a DELETE operation to delete a resource.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.IDevice">
      <summary>
            Interface for a basic device class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.IDevice.GetDeviceInfo">
      <summary>
            Gets an <see cref="T:HP.DeviceAutomation.IDeviceInfo" /> object containing information about the device.
            </summary>
      <returns>An <see cref="T:HP.DeviceAutomation.IDeviceInfo" /> object.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.IDevice.GetDeviceStatus">
      <summary>
            Gets the current operational state of the device.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.DeviceStatus" /> representing the state of the device.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.IDevice.GetPrinterStatus">
      <summary>
            Gets the current printer status of the device.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.PrinterStatus" /> representing the state of the device.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.IDevice.Address">
      <summary>
            Gets the network address of the device.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.IDevice.AdminPassword">
      <summary>
            Gets the admin password that will be used for communication with the device.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.IDevice.FirmwareType">
      <summary>
            Gets the type of firmware running on the device.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.IDeviceFactory">
      <summary>
            Interface for a firmware-specific device factory implementation.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.IDeviceFactory.Create(HP.DeviceAutomation.DeviceConstructionParameterCollection)">
      <summary>
            Creates an <see cref="T:HP.DeviceAutomation.IDevice" /> object using the specified construction parameters.
            </summary>
      <param name="parameters">The device construction parameters.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.IDevice" /> object for the device constructed from the specified parameters.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">A device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.IDeviceInfo">
      <summary>
            Interface for a class containing basic information about a device.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.IDeviceInfo.ModelName">
      <summary>
            Gets the device model name, if available; null otherwise.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.IDeviceInfo.ModelNumber">
      <summary>
            Gets the device model number, if available; null otherwise.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.IDeviceInfo.SerialNumber">
      <summary>
            Gets the device serial number, if available; null otherwise.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.IDeviceInfo.FirmwareRevision">
      <summary>
            Gets the revision (version) of the device firmware, if available; null otherwise.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.IDeviceInfo.FirmwareDateCode">
      <summary>
            Gets the date code of the device firmware, if available; null otherwise.
            (The format of the date code is firmware-specific and is not necessarily parseable.)
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.IJavaScriptExecutor">
      <summary>
            Interface for a component that can execute JavaScript on a remote device browser.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.IJavaScriptExecutor.ExecuteJavaScript(System.String,System.String)">
      <summary>
            Executes the specified JavaScript in the embedded browser using the specified UI context ID.
            </summary>
      <param name="uiContextId">The UI context identifier.  (Passing in null executes the JavaScript in the topmost browser.)</param>
      <param name="script">The JavaScript to execute.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.IJavaScriptExecutor.ExecuteJavaScript(System.String,System.String,System.TimeSpan)">
      <summary>
            Executes the specified JavaScript in the embedded browser using the specified UI context ID.
            Waits for the browser to be idle before executing the script and throws if the browser does not become idle within the specified time.
            </summary>
      <param name="uiContextId">The UI context identifier.  (Passing in null executes the JavaScript in the topmost browser.)</param>
      <param name="script">The JavaScript to execute.</param>
      <param name="browserIdleWaitTime">The amount of time to wait for the browser to be idle.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">
            The device browser did not reach an idle state within the specified <paramref name="browserIdleWaitTime" />.
            <para>or</para>
            The device service threw an exception.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.JavaScriptEngine">
      <summary>
            Engine for executing JavaScript code on a remote device browser.
            </summary>
      <remarks>
            This class provides a wrapper than can be used around various device control panel that support JavaScript injection.
            It also handles "minifying" the injected JavaScript to minimize the impact on the device browser.
            </remarks>
    </member>
    <member name="M:HP.DeviceAutomation.JavaScriptEngine.#ctor(HP.DeviceAutomation.IJavaScriptExecutor)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.JavaScriptEngine" /> class
            with a null UI context ID and default browser idle settings.
            </summary>
      <param name="javaScriptExecutor">The <see cref="T:HP.DeviceAutomation.IJavaScriptExecutor" /> for this engine to use.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="javaScriptExecutor" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.JavaScriptEngine.#ctor(HP.DeviceAutomation.IJavaScriptExecutor,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.JavaScriptEngine" /> class
            with the specified UI context ID and default browser idle settings.
            </summary>
      <param name="javaScriptExecutor">The <see cref="T:HP.DeviceAutomation.IJavaScriptExecutor" /> for this engine to use.</param>
      <param name="uiContextId">The UI context ID.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="javaScriptExecutor" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.JavaScriptEngine.ExecuteJavaScript(System.String)">
      <summary>
            Executes the specified JavaScript using the contained <see cref="T:HP.DeviceAutomation.IJavaScriptExecutor" />.
            </summary>
      <param name="script">The JavaScript to execute.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">
        <see cref="P:HP.DeviceAutomation.JavaScriptEngine.WaitForBrowserIdle" /> is <c>true</c> and the device browser did not reach an idle state within the time specified by <see cref="P:HP.DeviceAutomation.JavaScriptEngine.BrowserIdleWaitTime" />.
            <para>or</para>
            The device service threw an exception.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.JavaScriptExecutionException">The executed JavaScript returned an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="P:HP.DeviceAutomation.JavaScriptEngine.UIContextId">
      <summary>
            Gets or sets the UI context ID to use for executing JavaScript.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.JavaScriptEngine.WaitForBrowserIdle">
      <summary>
            Gets or sets a value indicating whether to wait for the browser to be idle before executing JavaScript.
            The default value is <c>true</c>.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.JavaScriptEngine.BrowserIdleWaitTime">
      <summary>
            Gets or sets the amount of time this instance should wait for a browser idle state.
            The default value is 30 seconds.  (Ignored if <see cref="P:HP.DeviceAutomation.JavaScriptEngine.WaitForBrowserIdle" /> is <c>false</c>.)
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.JavaScriptExecutionException">
      <summary>
            Exception thrown when the script executed by a <see cref="T:HP.DeviceAutomation.JavaScriptEngine" /> returns an exception.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.JavaScriptExecutionException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.JavaScriptExecutionException" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.JavaScriptExecutionException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.JavaScriptExecutionException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:HP.DeviceAutomation.JavaScriptExecutionException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.JavaScriptExecutionException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.JavaScriptExecutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.JavaScriptExecutionException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:HP.DeviceAutomation.LogEventArgs">
      <summary>
        <see cref="T:System.EventArgs" /> for events raised by the <see cref="T:HP.DeviceAutomation.Logger" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.LogEventArgs.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.LogEventArgs" /> class.
            </summary>
      <param name="message">The <see cref="T:System.Object" /> representing the message.</param>
    </member>
    <member name="M:HP.DeviceAutomation.LogEventArgs.#ctor(System.Object,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.LogEventArgs" /> class.
            </summary>
      <param name="message">The <see cref="T:System.Object" /> representing the message.</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with this log event.</param>
    </member>
    <member name="M:HP.DeviceAutomation.LogEventArgs.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this <see cref="T:HP.DeviceAutomation.LogEventArgs" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this <see cref="T:HP.DeviceAutomation.LogEventArgs" />.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.LogEventArgs.Message">
      <summary>
            Gets the <see cref="T:System.Object" /> representing the log message.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.LogEventArgs.Exception">
      <summary>
            Gets the <see cref="T:System.Exception" /> associated with this log event, if any.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Logger">
      <summary>
            Provides access to tracing and logging statements.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Logger.Trace(System.Object)">
      <summary>
            Logs a trace message.  Should be used for individual network calls to devices.
            </summary>
      <param name="message">The <see cref="T:System.Object" /> representing the message to log.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Logger.Debug(System.Object)">
      <summary>
            Logs a debug message.  Should be used for higher-level calls
            describing an action that is being performed on a device.
            </summary>
      <param name="message">The <see cref="T:System.Object" /> representing the message to log.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Logger.Warn(System.Object)">
      <summary>
            Logs a warning message.  Should be used for device interaction that
            was not directly initiated by the consumer, e.g. reestablishing a lost connection.
            </summary>
      <param name="message">The <see cref="T:System.Object" /> representing the message to log.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Logger.Error(System.Object)">
      <summary>
            Logs an error message.  Should be used for failed attempts to interact with a device.
            </summary>
      <param name="message">The <see cref="T:System.Object" /> representing the message to log.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Logger.Error(System.Object,System.Exception)">
      <summary>
            Logs an error message.  Should be used for failed attempts to interact with a device.
            </summary>
      <param name="message">The <see cref="T:System.Object" /> representing the message to log.</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the log event.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Logger.BuildMethodCall(System.String,System.Object[])">
      <summary>
            Builds a string representing a method call.
            </summary>
      <param name="methodName">The method name.</param>
      <param name="parameters">The parameters.</param>
      <returns>A string representing a method call.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Logger.BuildParameterList(System.Object[])">
      <summary>
            Builds a string representing a comma-separated method parameter list.
            </summary>
      <param name="parameters">The parameters.</param>
      <returns>A string representing a comma-separated method parameter list.</returns>
    </member>
    <member name="E:HP.DeviceAutomation.Logger.OnTrace">
      <summary>
            Occurs when a Trace event is logged.
            Raised for individual network calls to devices.
            </summary>
    </member>
    <member name="E:HP.DeviceAutomation.Logger.OnDebug">
      <summary>
            Occurs when a Debug event is logged.
            Raised for higher-level calls describing an action
            that is being performed on a device.
            </summary>
    </member>
    <member name="E:HP.DeviceAutomation.Logger.OnWarn">
      <summary>
            Occurs when a Warn event is logged.
            Raised for device interaction that was not directly initiated
            by the consumer, e.g. reestablishing a device connection that was lost.
            </summary>
    </member>
    <member name="E:HP.DeviceAutomation.Logger.OnError">
      <summary>
            Occurs when an Error event is logged.
            Raised when attempted device interaction fails, typically
            because the device responded with an error or did not respond at all.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.NetworkConfiguration">
      <summary>
            Provides management for global network-related configuration.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.NetworkConfiguration.ConfigureCertificateAcceptance">
      <summary>
            If <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is set, configures the <see cref="T:System.Net.ServicePointManager" /> to accept all remote certificates.
            </summary>
      <remarks>
            This method is automatically called by components that depend on certificate acceptance.
            Clients are not required to call this method for certificate acceptance to be configured.
            </remarks>
    </member>
    <member name="M:HP.DeviceAutomation.NetworkConfiguration.OverrideSecurityProtocol">
      <summary>
            If <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AllowSecurityProtocolOverride" /> is set, overrides the <see cref="T:System.Net.ServicePointManager" /> security protocol
            to allow protocols defined by <see cref="P:HP.DeviceAutomation.NetworkConfiguration.SecurityProtocolOverrideValue" />.
            </summary>
      <remarks>
            This method is automatically called by components that depend on security protocols.
            Clients are not required to call this method for security protocols to be configured.
            </remarks>
    </member>
    <member name="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates">
      <summary>
            Gets or sets a value indicating whether to accept all remote certificates.
            The default value is <c>true</c>.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.NetworkConfiguration.AllowSecurityProtocolOverride">
      <summary>
            Gets or sets a value indicating whether use of <see cref="M:HP.DeviceAutomation.NetworkConfiguration.OverrideSecurityProtocol" /> is allowed.
            The default value is <c>true</c>.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.NetworkConfiguration.SecurityProtocolOverrideValue">
      <summary>
            Gets or sets the <see cref="T:System.Net.SecurityProtocolType" /> to set when <see cref="M:HP.DeviceAutomation.NetworkConfiguration.OverrideSecurityProtocol" /> is called.
            The default value allows <see cref="F:System.Net.SecurityProtocolType.Ssl3" />, <see cref="F:System.Net.SecurityProtocolType.Tls" />,
            <see cref="F:System.Net.SecurityProtocolType.Tls11" />, and <see cref="F:System.Net.SecurityProtocolType.Tls12" />.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.NetworkConfigurationException">
      <summary>
            Exception thrown when a device connection cannot be established due to network configuration settings.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.NetworkConfigurationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.NetworkConfigurationException" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.NetworkConfigurationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.NetworkConfigurationException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:HP.DeviceAutomation.NetworkConfigurationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.NetworkConfigurationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.NetworkConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.NetworkConfigurationException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:HP.DeviceAutomation.PowerState">
      <summary>
            Represents the power state of a device.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.PowerState.None">
      <summary>
            No status returned.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.PowerState.Awake">
      <summary>
            The device is awake (ready).
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.PowerState.PowerSave">
      <summary>
            The device is in a power-saving state (shallow suspend).
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.PowerState.Sleep">
      <summary>
            The device is asleep (suspend or A1W).
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.PowerState.Off">
      <summary>
            The device is off.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.PowerState.TransitioningToAwake">
      <summary>
            The device is transitioning to <see cref="F:HP.DeviceAutomation.PowerState.Awake" />.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.PowerState.TransitioningToPowerSave">
      <summary>
            The device is transitioning to <see cref="F:HP.DeviceAutomation.PowerState.PowerSave" />.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.PowerState.TransitioningToSleep">
      <summary>
            The device is transitioning to <see cref="F:HP.DeviceAutomation.PowerState.Sleep" />.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.PowerState.TransitioningToOff">
      <summary>
            The device is transitioning to <see cref="F:HP.DeviceAutomation.PowerState.Off" />.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.PowerState.Reboot">
      <summary>
            The device is rebooting.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.PowerState.AutoOff">
      <summary>
            The device is in an automatic off state.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.PowerState.OneWatt">
      <summary>
            The device is in 1W state (deep suspend).
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.PrinterStatus">
      <summary>
            Represents the printer state of a device.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.PrinterStatus.None">
      <summary>
            No status returned.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.PrinterStatus.Other">
      <summary>
            The printer is offline or a critical alert is active.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.PrinterStatus.Unknown">
      <summary>
            The printer state is unknown.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.PrinterStatus.Idle">
      <summary>
            The printer is not performing any significant actions.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.PrinterStatus.Printing">
      <summary>
            A job is currently being processed or printed, or a PJL job is being processed.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.PrinterStatus.WarmUp">
      <summary>
            If the <see cref="T:HP.DeviceAutomation.DeviceStatus" /> is <see cref="F:HP.DeviceAutomation.DeviceStatus.Down" />, then the printer is
            currently offline but is resolving the condition that caused it to be offline.
            If the <see cref="T:HP.DeviceAutomation.DeviceStatus" /> is <see cref="F:HP.DeviceAutomation.DeviceStatus.Running" />, then the printer
            was in power save mode and is now ready to print.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.ScreenCaptureImage">
      <summary>
            Helper class for capturing device control panel screenshots.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.ScreenCaptureImage.FromStream(System.IO.Stream)">
      <summary>
            Creates an <see cref="T:System.Drawing.Image" /> from the specified <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> containing the image data.</param>
      <returns>An <see cref="T:System.Drawing.Image" />.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.ScreenCaptureImage.FromBytes(System.Byte[])">
      <summary>
            Creates an <see cref="T:System.Drawing.Image" /> from the specified byte array.
            </summary>
      <param name="screenData">The byte array containing the image data.</param>
      <returns>An <see cref="T:System.Drawing.Image" />.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.ScreenCaptureImage.FromPhoenixBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Creates an <see cref="T:System.Drawing.Image" /> from the specified Phoenix-format byte array and image data.
            </summary>
      <param name="screenData">The byte array containing the image data.</param>
      <param name="width">The width of the screen.</param>
      <param name="height">The height of the screen.</param>
      <returns>An <see cref="T:System.Drawing.Image" />.</returns>
      <remarks>
            Phoenix devices return screen capture data in a strange format.  This code was adapted from Python scripts
            used by the firmware team.  The colors don't come out quite correct, but it's close enough for most needs.
            </remarks>
    </member>
    <member name="T:HP.DeviceAutomation.Size">
      <summary>
            Represents the width and height of an object.
            </summary>
      <remarks>Neither the width nor height of a <see cref="T:HP.DeviceAutomation.Size" /> structure may be negative.</remarks>
    </member>
    <member name="M:HP.DeviceAutomation.Size.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Size" /> struct with the specified width and height.
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="width" /> is less than zero.
            <para>or</para><paramref name="height" /> is less than zero.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Size.#ctor(HP.DeviceAutomation.Coordinate,HP.DeviceAutomation.Coordinate)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Size" /> struct based on the corners of an object.
            </summary>
      <param name="topLeft">A <see cref="T:HP.DeviceAutomation.Coordinate" /> representing the upper-left corner of an object.</param>
      <param name="bottomRight">A <see cref="T:HP.DeviceAutomation.Coordinate" /> representing the lower-right corner of an object.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Size.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this <see cref="T:HP.DeviceAutomation.Size" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this <see cref="T:HP.DeviceAutomation.Size" />.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Size.Equals(HP.DeviceAutomation.Size)">
      <summary>
            Tests whether this <see cref="T:HP.DeviceAutomation.Size" /> represents the same width and height as another <see cref="T:HP.DeviceAutomation.Size" />.
            </summary>
      <param name="other">The <see cref="T:HP.DeviceAutomation.Size" /> to compare with this <see cref="T:HP.DeviceAutomation.Size" />.</param>
      <returns>
        <c>true</c> if the current <see cref="T:HP.DeviceAutomation.Size" /> represents the same width and height as the <paramref name="other" /> parameter; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Size.Equals(System.Object)">
      <summary>
            Tests whether <paramref name="obj" /> is a <see cref="T:HP.DeviceAutomation.Size" /> representing the same width and height as this <see cref="T:HP.DeviceAutomation.Size" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this <see cref="T:HP.DeviceAutomation.Size" />.</param>
      <returns>
        <c>true</c> if <paramref name="obj" /> is a <see cref="T:HP.DeviceAutomation.Size" /> representing the same width and height as this <see cref="T:HP.DeviceAutomation.Size" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Size.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:HP.DeviceAutomation.Size" />.
            </summary>
      <returns>A hash code for this <see cref="T:HP.DeviceAutomation.Size" />, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Size.op_Equality(HP.DeviceAutomation.Size,HP.DeviceAutomation.Size)">
      <summary>
            Tests whether two <see cref="T:HP.DeviceAutomation.Size" /> structures represent the same width and height.
            </summary>
      <param name="left">The <see cref="T:HP.DeviceAutomation.Size" /> that is to the left of the equality operator.</param>
      <param name="right">The <see cref="T:HP.DeviceAutomation.Size" /> that is to the right of the equality operator.</param>
      <returns>
        <c>true</c> if the <see cref="T:HP.DeviceAutomation.Size" /> structures represent the same width and height; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Size.op_Inequality(HP.DeviceAutomation.Size,HP.DeviceAutomation.Size)">
      <summary>
            Tests whether two <see cref="T:HP.DeviceAutomation.Size" /> structures represent different widths and/or heights.
            </summary>
      <param name="left">The <see cref="T:HP.DeviceAutomation.Size" /> that is to the left of the inequality operator.</param>
      <param name="right">The <see cref="T:HP.DeviceAutomation.Size" /> that is to the right of the inequality operator.</param>
      <returns>
        <c>true</c> if the <see cref="T:HP.DeviceAutomation.Size" /> structures represent different widths and/or heights; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.Size.Width">
      <summary>
            Gets the horizontal component of this <see cref="T:HP.DeviceAutomation.Size" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Size.Height">
      <summary>
            Gets the vertical component of this <see cref="T:HP.DeviceAutomation.Size" />.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Snmp">
      <summary>
            Provides methods for communicating with a device using SNMP.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Snmp.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Snmp" /> class.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Snmp.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Snmp" /> class.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Snmp.#ctor(System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Snmp" /> class, with the option to force SNMP v1 instead of v2.
            </summary>
      <param name="address">The device address.</param>
      <param name="forceSnmpV1">if set to <c>true</c> force this instance to use SNMP v1.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Snmp.#ctor(System.Net.IPAddress,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Snmp" /> class, with the option to force SNMP v1 instead of v2.
            </summary>
      <param name="address">The device address.</param>
      <param name="forceSnmpV1">if set to <c>true</c> force this instance to use SNMP v1.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Snmp.#ctor(HP.DeviceAutomation.DeviceNetworkAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Snmp" /> class.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Snmp.#ctor(HP.DeviceAutomation.DeviceNetworkAddress,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Snmp" /> class, with the option to force SNMP v1 instead of v2.
            </summary>
      <param name="address">The device address.</param>
      <param name="forceSnmpV1">if set to <c>true</c> force this instance to use SNMP v1.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Snmp.AreEquivalent(System.String,System.String)">
      <summary>
            Tests whether two SNMP object identifiers are equivalent.
            </summary>
      <param name="oid1">The first OID.</param>
      <param name="oid2">The second OID.</param>
      <returns>
        <c>true</c> if the OIDs are equivalent; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Snmp.Get(System.String)">
      <summary>
            Gets the value of the specified SNMP object.
            </summary>
      <param name="oid">The SNMP object identifier.</param>
      <returns>The value of the SNMP object.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.SnmpException">The SNMP operation resulted in an SNMP-related error.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Snmp.Get(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Gets the values of the specified SNMP objects.
            </summary>
      <param name="oids">The SNMP object identifiers.</param>
      <returns>The values of the SNMP objects.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oids" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.SnmpException">The SNMP operation resulted in an SNMP-related error.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Snmp.Get``1(System.String)">
      <summary>
            Gets the value of the specified SNMP object.
            </summary>
      <typeparam name="T">The type of value to return.</typeparam>
      <param name="oid">The SNMP object identifier.</param>
      <returns>The value of the SNMP object.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:System.FormatException">The value could not be converted to the specified type <typeparamref name="T" />.</exception>
      <exception cref="T:System.InvalidCastException">Conversion to the specified type <typeparamref name="T" /> is not supported.</exception>
      <exception cref="T:HP.DeviceAutomation.SnmpException">The SNMP operation resulted in an SNMP-related error.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Snmp.Get``1(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Gets the values of the specified SNMP objects.
            </summary>
      <typeparam name="T">The type of values to return.</typeparam>
      <param name="oids">The SNMP object identifiers.</param>
      <returns>The values of the SNMP objects.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oids" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:System.FormatException">The values could not be converted to the specified type <typeparamref name="T" />.</exception>
      <exception cref="T:System.InvalidCastException">Conversion to the specified type <typeparamref name="T" /> is not supported.</exception>
      <exception cref="T:HP.DeviceAutomation.SnmpException">The SNMP operation resulted in an SNMP-related error.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Snmp.GetRaw(System.String)">
      <summary>
            Gets the specified SNMP object.
            </summary>
      <param name="oid">The SNMP object identifier.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.SnmpOidValue" /> object containing the identifier and value of the SNMP object.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.SnmpException">The SNMP operation resulted in an SNMP-related error.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Snmp.GetRaw(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Gets the specified SNMP objects.
            </summary>
      <param name="oids">The SNMP object identifiers.</param>
      <returns>A collection of <see cref="T:HP.DeviceAutomation.SnmpOidValue" /> objects containing the identifiers and values of the SNMP objects.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oids" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.SnmpException">The SNMP operation resulted in an SNMP-related error.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Snmp.Set(System.String,System.String)">
      <summary>
            Sets the specified SNMP object to the specified string value.
            </summary>
      <param name="oid">The SNMP object identifier.</param>
      <param name="value">The string value to set.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.SnmpOidValue" /> object representing the result of the operation.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.SnmpException">The SNMP operation resulted in an SNMP-related error.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Snmp.Set(System.String,System.Int32)">
      <summary>
            Sets the specified SNMP object to the specified integer value.
            </summary>
      <param name="oid">The SNMP object identifier.</param>
      <param name="value">The integer value to set.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.SnmpOidValue" /> object representing the result of the operation.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.SnmpException">The SNMP operation resulted in an SNMP-related error.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Snmp.Set(HP.DeviceAutomation.SnmpOidValue)">
      <summary>
            Sets the specified SNMP object to the specified value.
            </summary>
      <param name="value">An <see cref="T:HP.DeviceAutomation.SnmpOidValue" /> object containing the object identifier and value to set.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.SnmpOidValue" /> object representing the result of the operation.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.SnmpException">The SNMP operation resulted in an SNMP-related error.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Snmp.Set(System.Collections.Generic.IEnumerable{HP.DeviceAutomation.SnmpOidValue})">
      <summary>
            Sets the specified SNMP objects to the specified values.
            </summary>
      <param name="values">A collection of <see cref="T:HP.DeviceAutomation.SnmpOidValue" /> objects containing the object identifiers and values to set.</param>
      <returns>A collection of <see cref="T:HP.DeviceAutomation.SnmpOidValue" /> objects representing the result of the operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.SnmpException">The SNMP operation resulted in an SNMP-related error.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Snmp.GetNext(System.String)">
      <summary>
            Gets the next SNMP object after the specified object.
            </summary>
      <param name="oid">The SNMP object identifier to search from.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.SnmpOidValue" /> object containing the identifier and value of the next SNMP object.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.SnmpException">The SNMP operation resulted in an SNMP-related error.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Snmp.GetBulk(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Gets multiple SNMP objects after the specified object(s).
            </summary>
      <param name="nonRepeaters">The number of object identifiers in <paramref name="oids" /> for which only a single object should be retrieved.</param>
      <param name="maxRepetitions">The maximum number of objects to get for each identifier in <paramref name="oids" />.</param>
      <param name="oids">The SNMP object identifiers to search from.</param>
      <returns>A collection of <see cref="T:HP.DeviceAutomation.SnmpOidValue" /> objects containing the identifiers and values of the next SNMP object(s).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oids" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:HP.DeviceAutomation.Snmp" /> object is configured to use only SNMP v1, which does not support GetBulk operations.</exception>
      <exception cref="T:HP.DeviceAutomation.SnmpException">The SNMP operation resulted in an SNMP-related error.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Snmp.Walk(System.String)">
      <summary>
            Walks the subtree under the specified SNMP object and returns all SNMP objects found.
            </summary>
      <param name="oid">The SNMP object identifier to search under.</param>
      <returns>A collection of <see cref="T:HP.DeviceAutomation.SnmpOidValue" /> objects containing the identifiers and values of the SNMP objects in the subtree.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.SnmpException">The SNMP operation resulted in an SNMP-related error.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Snmp.Walk(System.String,System.Int32)">
      <summary>
            Walks the subtree under the specified SNMP object and returns all SNMP objects found.
            </summary>
      <param name="oid">The SNMP object identifier to search under.</param>
      <param name="maxRepetitions">The maximum number of GetBulk repetitions. (Ignored if this instance is configured to only use SNMP v1.)</param>
      <returns>A collection of <see cref="T:HP.DeviceAutomation.SnmpOidValue" /> objects containing the identifiers and values of the SNMP objects in the subtree.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.SnmpException">The SNMP operation resulted in an SNMP-related error.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Snmp.Stream(System.String,System.String)">
      <summary>
            Gets a <see cref="T:System.IO.Stream" /> of raw data under the specified SNMP object,
            using another SNMP object as a checksum to ensure the data stream has not changed.
            </summary>
      <param name="oid">The SNMP object identifier to search under.</param>
      <param name="checkOid">The SNMP object identifier to use for the checksum.</param>
      <returns>A <see cref="T:System.IO.Stream" /> of raw data from under the specified object.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.SnmpException">The SNMP operation resulted in an SNMP-related error.</exception>
    </member>
    <member name="P:HP.DeviceAutomation.Snmp.Address">
      <summary>
            Gets the network address of the device this <see cref="T:HP.DeviceAutomation.Snmp" /> instance will connect to.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Snmp.CommunityName">
      <summary>
            Gets or sets the community name to use for SNMP operations.
            The default value is "public".
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Snmp.Timeout">
      <summary>
            Gets or sets the timeout for SNMP operations.
            The default value is 5 seconds.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Snmp.Retries">
      <summary>
            Gets or sets the number of times to retry after a timeout on an SNMP operation.
            The default value is 2.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.SnmpException">
      <summary>
            Exception thrown when an invalid SNMP operation is attempted.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.SnmpException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.SnmpException" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.SnmpException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.SnmpException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:HP.DeviceAutomation.SnmpException.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.SnmpException" /> class with a specified error message and SNMP error code.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="errorCode">The SNMP error code.</param>
    </member>
    <member name="M:HP.DeviceAutomation.SnmpException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.SnmpException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.SnmpException.#ctor(System.String,System.Int32,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.SnmpException" /> class with a specified error message, SNMP error code, and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="errorCode">The SNMP error code.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.SnmpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.SnmpException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:HP.DeviceAutomation.SnmpException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:HP.DeviceAutomation.SnmpException.ErrorCode">
      <summary>
            Gets the SNMP error code associated with this <see cref="T:HP.DeviceAutomation.SnmpException" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.SnmpException.SnmpNameNotFound">
      <summary>
            Checks to see if the exception type is a valid "not found" exception
            The older Jedi types will return to us that the input string was not in the correct format
            The newer type actually lets us know that there was no such name for the SNMP type
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.SnmpOidValue">
      <summary>
            Represents an SNMP object identifier and its associated value.
            </summary>
      <remarks>
            This class acts as a wrapper around a SharpSnmpLib <see cref="T:Lextm.SharpSnmpLib.Variable" /> object
            to avoid exposing SharpSnmpLib code to consumers.
            </remarks>
    </member>
    <member name="M:HP.DeviceAutomation.SnmpOidValue.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.SnmpOidValue" /> class with no value.
            </summary>
      <param name="oid">The SNMP object identifier.</param>
    </member>
    <member name="M:HP.DeviceAutomation.SnmpOidValue.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.SnmpOidValue" /> class with a string value.
            </summary>
      <param name="oid">The SNMP object identifier.</param>
      <param name="value">The string value.</param>
    </member>
    <member name="M:HP.DeviceAutomation.SnmpOidValue.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.SnmpOidValue" /> class with an integer value.
            </summary>
      <param name="oid">The SNMP object identifier.</param>
      <param name="value">The integer value.</param>
    </member>
    <member name="M:HP.DeviceAutomation.SnmpOidValue.#ctor(System.String,System.Object,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.SnmpOidValue" /> class with the specified type and value.
            </summary>
      <param name="oid">The SNMP object identifier.</param>
      <param name="value">The value.</param>
      <param name="snmpType">The SNMP object type.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="snmpType" /> is not supported.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not in the correct format for the specified SNMP object type.</exception>
      <remarks>
            This constructor allows consumers to use less-common SNMP data types without having to create a comprehensive lists.
            Valid values for <paramref name="snmpType" /> can be found by examining the SharpSnmpLib <see cref="T:Lextm.SharpSnmpLib.SnmpType" /> object.
            </remarks>
    </member>
    <member name="M:HP.DeviceAutomation.SnmpOidValue.#ctor(Lextm.SharpSnmpLib.Variable)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.SnmpOidValue" /> class wrapping the specified SharpSnmpLib <see cref="T:Lextm.SharpSnmpLib.Variable" /> object.
            </summary>
      <param name="variable">The SharpSnmpLib <see cref="T:Lextm.SharpSnmpLib.Variable" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.SnmpOidValue.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> with the data from this <see cref="T:HP.DeviceAutomation.SnmpOidValue" />.
            </summary>
      <returns>The data from this <see cref="T:HP.DeviceAutomation.SnmpOidValue" /> as a <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.SnmpOidValue.ToType``1">
      <summary>
            Returns an object of type <typeparamref name="T" /> with the data from this <see cref="T:HP.DeviceAutomation.SnmpOidValue" />.
            </summary>
      <typeparam name="T">The type of data to return.</typeparam>
      <returns>The data from this <see cref="T:HP.DeviceAutomation.SnmpOidValue" /> as the specified type.</returns>
      <exception cref="T:System.FormatException">The data could not be converted to the specified type <typeparamref name="T" />.</exception>
      <exception cref="T:System.InvalidCastException">Conversion to the specified type <typeparamref name="T" /> is not supported.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.SnmpOidValue.ToBytes">
      <summary>
            Returns a byte array of the data from this <see cref="T:HP.DeviceAutomation.SnmpOidValue" />.
            </summary>
      <returns>The data from this <see cref="T:HP.DeviceAutomation.SnmpOidValue" /> as a byte array.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.SnmpOidValue.SnmpVariable">
      <summary>
            Gets the SharpSnmpLib <see cref="T:Lextm.SharpSnmpLib.Variable" /> stored in this <see cref="T:HP.DeviceAutomation.SnmpOidValue" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.SnmpOidValue.Oid">
      <summary>
            Gets the SNMP object identifier.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.SnmpOidValue.Value">
      <summary>
            Gets the SNMP object value.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.SnmpOidValue.ValueType">
      <summary>
            Gets the SNMP object type.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.SpecialCharacter">
      <summary>
            Represents a special character that can be entered on a device keyboard.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.SpecialCharacter.Escape">
      <summary>
            Escape
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.SpecialCharacter.Backspace">
      <summary>
            Backspace
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.SpecialCharacter.Tab">
      <summary>
            Tab
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.SpecialCharacter.Enter">
      <summary>
            Enter
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.SpecialCharacter.UpArrow">
      <summary>
            Up arrow
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.SpecialCharacter.DownArrow">
      <summary>
            Down arrow
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.SpecialCharacter.LeftArrow">
      <summary>
            Left arrow
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.SpecialCharacter.RightArrow">
      <summary>
            Right arrow
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.StringMatch">
      <summary>
            Methods for matching strings.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.StringMatch.Exact">
      <summary>
            The input string must be the same as the target value.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.StringMatch.Contains">
      <summary>
            The input string must contain the target value.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.StringMatch.StartsWith">
      <summary>
            The input string must start with the target value.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.StringMatch.EndsWith">
      <summary>
            The input string must end with the target value.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.StringMatch.Regex">
      <summary>
            The input string must match the regex pattern of the target value.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.StringMatcher">
      <summary>
            Provides methods for string matching.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.StringMatcher.IsMatch(System.String,System.String,HP.DeviceAutomation.StringMatch,System.Boolean)">
      <summary>
            Determines whether the specified <paramref name="input" /> is a match for <paramref name="value" /> based
            on the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method, optionally ignoring case.
            </summary>
      <param name="value">The target value to match; e.g. a substring to look for in the input, or a regular expression pattern.</param>
      <param name="input">The input string to check for a match with the target value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="ignoreCase">if set to <c>true</c> perform a case-insensitive match.</param>
      <returns>
        <c>true</c> if the input string matches the target value; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.StringMatcher.IsMatch(System.String,System.String,HP.DeviceAutomation.StringMatch,System.StringComparison)">
      <summary>
            Determines whether the specified <paramref name="input" /> is a match for <paramref name="value" /> based
            on the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method and <see cref="T:System.StringComparison" />.
            </summary>
      <param name="value">The target value to match; e.g. a substring to look for in the input, or a regular expression pattern.</param>
      <param name="input">The input string to check for a match with the target value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="comparison">The <see cref="T:System.StringComparison" /> to use.</param>
      <returns>
        <c>true</c> if the input string matches the target value; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.StringMatcher.IsMatch(System.String,System.String,HP.DeviceAutomation.StringMatch,System.Boolean,System.Boolean)">
      <summary>
            Determines whether the specified <paramref name="input" /> is a match for <paramref name="value" /> based
            on the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method, optionally ignoring case and/or white space.
            </summary>
      <param name="value">The target value to match; e.g. a substring to look for in the input, or a regular expression pattern.</param>
      <param name="input">The input string to check for a match with the target value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="ignoreCase">if set to <c>true</c> perform a case-insensitive match.</param>
      <param name="ignoreWhiteSpace">if set to <c>true</c> ignore white space in the target value and string input.</param>
      <returns>
        <c>true</c> if the input string matches the target value; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.StringMatcher.IsMatch(System.String,System.String,HP.DeviceAutomation.StringMatch,System.StringComparison,System.Boolean)">
      <summary>
            Determines whether the specified <paramref name="input" /> is a match for <paramref name="value" /> based
            on the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method and <see cref="T:System.StringComparison" />, optionally ignoring white space.
            </summary>
      <param name="value">The target value to match; e.g. a substring to look for in the input, or a regular expression pattern.</param>
      <param name="input">The input string to check for a match with the target value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="comparison">The <see cref="T:System.StringComparison" /> to use.</param>
      <param name="ignoreWhiteSpace">if set to <c>true</c> ignore white space in the target value and string input.</param>
      <returns>
        <c>true</c> if the input string matches the target value; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.StringMatcher.HasMatch(System.String,System.Collections.Generic.IEnumerable{System.String},HP.DeviceAutomation.StringMatch,System.Boolean)">
      <summary>
            Determines whether any of the specified <paramref name="inputs" /> is a match for <paramref name="value" /> based
            on the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method, optionally ignoring case.
            </summary>
      <param name="value">The target value to match; e.g. a substring to look for in the input, or a regular expression pattern.</param>
      <param name="inputs">The input strings to check for a match with the target value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="ignoreCase">if set to <c>true</c> perform a case-insensitive match.</param>
      <returns>
        <c>true</c> if at least one input string matches the target value; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputs" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.StringMatcher.HasMatch(System.String,System.Collections.Generic.IEnumerable{System.String},HP.DeviceAutomation.StringMatch,System.StringComparison)">
      <summary>
            Determines whether any of the specified <paramref name="inputs" /> is a match for <paramref name="value" /> based
            on the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method and <see cref="T:System.StringComparison" />.
            </summary>
      <param name="value">The target value to match; e.g. a substring to look for in the input, or a regular expression pattern.</param>
      <param name="inputs">The input strings to check for a match with the target value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="comparison">The <see cref="T:System.StringComparison" /> to use.</param>
      <returns>
        <c>true</c> if at least one input string matches the target value; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputs" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.StringMatcher.FindBestMatch(System.String,System.Collections.Generic.IEnumerable{System.String},HP.DeviceAutomation.StringMatch,System.Boolean)">
      <summary>
            Finds the best matching input from <paramref name="inputs" /> for <paramref name="value" /> based
            on the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method, optionally ignoring case.
            </summary>
      <param name="value">The target value to match; e.g. a substring to look for in the input, or a regular expression pattern.</param>
      <param name="inputs">The input strings to check for a match with the target value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="ignoreCase">if set to <c>true</c> perform a case-insensitive match.</param>
      <returns>The input string of greatest length that matches the target value, or null if no match is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputs" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.StringMatcher.FindBestMatch(System.String,System.Collections.Generic.IEnumerable{System.String},HP.DeviceAutomation.StringMatch,System.StringComparison)">
      <summary>
            Finds the best matching input from <paramref name="inputs" /> for <paramref name="value" /> based
            on the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method and <see cref="T:System.StringComparison" />.
            </summary>
      <param name="value">The target value to match; e.g. a substring to look for in the input, or a regular expression pattern.</param>
      <param name="inputs">The input strings to check for a match with the target value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="comparison">The <see cref="T:System.StringComparison" /> to use.</param>
      <returns>The input string of greatest length that matches the target value, or null if no match is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputs" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.StringMatcher.FindBestMatch(System.String,System.Collections.Generic.IEnumerable{System.String},HP.DeviceAutomation.StringMatch,System.Boolean,System.Boolean)">
      <summary>
            Finds the best matching input from <paramref name="inputs" /> for <paramref name="value" /> based
            on the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method, optionally ignoring case and/or white space.
            </summary>
      <param name="value">The target value to match; e.g. a substring to look for in the input, or a regular expression pattern.</param>
      <param name="inputs">The input strings to check for a match with the target value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="ignoreCase">if set to <c>true</c> perform a case-insensitive match.</param>
      <param name="ignoreWhiteSpace">if set to <c>true</c> ignore white space in the target value and string input.</param>
      <returns>The input string of greatest length that matches the target value, or null if no match is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputs" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.StringMatcher.FindBestMatch(System.String,System.Collections.Generic.IEnumerable{System.String},HP.DeviceAutomation.StringMatch,System.StringComparison,System.Boolean)">
      <summary>
            Finds the best matching input from <paramref name="inputs" /> for <paramref name="value" /> based
            on the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method and <see cref="T:System.StringComparison" />, optionally ignoring white space.
            </summary>
      <param name="value">The target value to match; e.g. a substring to look for in the input, or a regular expression pattern.</param>
      <param name="inputs">The input strings to check for a match with the target value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="comparison">The <see cref="T:System.StringComparison" /> to use.</param>
      <param name="ignoreWhiteSpace">if set to <c>true</c> ignore white space in the target value and string input.</param>
      <returns>The input string of greatest length that matches the target value, or null if no match is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputs" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.StringMatcher.FindBestMatch(System.String,System.Collections.Generic.IEnumerable{System.String},HP.DeviceAutomation.StringMatch,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Finds the best matching input from <paramref name="inputs" /> for <paramref name="value" /> based
            on the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method, optionally ignoring case and/or white space.
            Provides the option to accept a match that contains only the first portion of the target value.
            </summary>
      <param name="value">The target value to match; e.g. a substring to look for in the input, or a regular expression pattern.</param>
      <param name="inputs">The input strings to check for a match with the target value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="ignoreCase">if set to <c>true</c> perform a case-insensitive match.</param>
      <param name="ignoreWhiteSpace">if set to <c>true</c> ignore white space in the target value and string input.</param>
      <param name="allowPartialMatch">if set to <c>true</c> allow a match that contains only part of the target value.</param>
      <returns>The input string of greatest length that matches the target value, or null if no match is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputs" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.StringMatcher.FindBestMatch(System.String,System.Collections.Generic.IEnumerable{System.String},HP.DeviceAutomation.StringMatch,System.StringComparison,System.Boolean,System.Boolean)">
      <summary>
            Finds the best matching input from <paramref name="inputs" /> for <paramref name="value" /> based
            on the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method and <see cref="T:System.StringComparison" />, optionally ignoring white space.
            Provides the option to accept a match that contains only the first portion of the target value.
            </summary>
      <param name="value">The target value to match; e.g. a substring to look for in the input, or a regular expression pattern.</param>
      <param name="inputs">The input strings to check for a match with the target value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="comparison">The <see cref="T:System.StringComparison" /> to use.</param>
      <param name="ignoreWhiteSpace">if set to <c>true</c> ignore white space in the target value and string input.</param>
      <param name="allowPartialMatch">if set to <c>true</c> allow a match that contains only part of the target value.</param>
      <returns>The input string of greatest length that matches the target value, or null if no match is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputs" /> is null.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.UnknownDeviceTypeException">
      <summary>
            Exception thrown when the <see cref="T:HP.DeviceAutomation.DeviceFactory" /> cannot determine the type of a device.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.UnknownDeviceTypeException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.UnknownDeviceTypeException" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.UnknownDeviceTypeException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.UnknownDeviceTypeException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:HP.DeviceAutomation.UnknownDeviceTypeException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.UnknownDeviceTypeException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.UnknownDeviceTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.UnknownDeviceTypeException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:HP.DeviceAutomation.Wait">
      <summary>
            Provides static methods for waiting for a condition.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Wait.ForTrue(System.Func{System.Boolean},System.TimeSpan)">
      <summary>
            Waits for the specified function to evaluate to <c>true</c>.
            Evaluates the function once per second until <paramref name="waitTime" /> is reached.
            </summary>
      <param name="action">The action to test.</param>
      <param name="waitTime">The amount of time to wait for <paramref name="action" /> to evaluate to <c>true</c>.</param>
      <returns>
        <c>true</c> if <paramref name="action" /> evaluated to <c>true</c> within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Wait.ForTrue(System.Func{System.Boolean},System.TimeSpan,System.TimeSpan)">
      <summary>
            Waits for the specified function to evaluate to <c>true</c>.
            Evaluates the function at the rate specified by <paramref name="checkInterval" /> until <paramref name="waitTime" /> is reached.
            </summary>
      <param name="action">The action to test.</param>
      <param name="waitTime">The amount of time to wait for <paramref name="action" /> to evaluate to <c>true</c>.</param>
      <param name="checkInterval">The amount of time to wait between each check.</param>
      <returns>
        <c>true</c> if <paramref name="action" /> evaluated to <c>true</c> within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.
            <para>or</para><paramref name="checkInterval" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Wait.ForFalse(System.Func{System.Boolean},System.TimeSpan)">
      <summary>
            Waits for the specified function to evaluate to <c>false</c>.
            Evaluates the function once per second until <paramref name="waitTime" /> is reached.
            </summary>
      <param name="action">The action to test.</param>
      <param name="waitTime">The amount of time to wait for <paramref name="action" /> to evaluate to <c>false</c>.</param>
      <returns>
        <c>true</c> if <paramref name="action" /> evaluated to <c>false</c> within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Wait.ForFalse(System.Func{System.Boolean},System.TimeSpan,System.TimeSpan)">
      <summary>
            Waits for the specified function to evaluate to <c>false</c>.
            Evaluates the function at the rate specified by <paramref name="checkInterval" /> until <paramref name="waitTime" /> is reached.
            </summary>
      <param name="action">The action to test.</param>
      <param name="waitTime">The amount of time to wait for <paramref name="action" /> to evaluate to <c>false</c>.</param>
      <param name="checkInterval">The amount of time to wait between each check.</param>
      <returns>
        <c>true</c> if <paramref name="action" /> evaluated to <c>false</c> within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.
            <para>or</para><paramref name="checkInterval" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Wait.ForEquals(System.Func{System.String},System.String,System.TimeSpan)">
      <summary>
            Waits for the specified function to evaluate to the same value as <paramref name="target" />.
            Evaluates the function once per second until <paramref name="waitTime" /> is reached.
            This method uses <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> to compare the value and target.
            </summary>
      <param name="value">The value to test.</param>
      <param name="target">The target value to wait for.</param>
      <param name="waitTime">The amount of time to wait for <paramref name="value" /> to equal <paramref name="target" />.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> was equal to the target within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Wait.ForEquals(System.Func{System.String},System.String,System.TimeSpan,System.TimeSpan)">
      <summary>
            Waits for the specified function to evaluate to the same value as <paramref name="target" />.
            Evaluates the function at the rate specified by <paramref name="checkInterval" /> until <paramref name="waitTime" /> is reached.
            This method uses <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> to compare the value and target.
            </summary>
      <param name="value">The value to test.</param>
      <param name="target">The target value to wait for.</param>
      <param name="waitTime">The amount of time to wait for <paramref name="value" /> to equal <paramref name="target" />.</param>
      <param name="checkInterval">The amount of time to wait between each check.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> was equal to the target within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.
            <para>or</para><paramref name="checkInterval" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Wait.ForEquals(System.Func{System.String},System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for the specified function to evaluate to the same value as <paramref name="target" /> using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Evaluates the function once per second until <paramref name="waitTime" /> is reached.
            This method uses <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> to compare the value and target.
            </summary>
      <param name="value">The value to test.</param>
      <param name="target">The target value to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for <paramref name="value" /> to equal <paramref name="target" />.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> was equal to the target within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Wait.ForEquals(System.Func{System.String},System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan,System.TimeSpan)">
      <summary>
            Waits for the specified function to evaluate to the same value as <paramref name="target" /> using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Evaluates the function at the rate specified by <paramref name="checkInterval" /> until <paramref name="waitTime" /> is reached.
            This method uses <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> to compare the value and target.
            </summary>
      <param name="value">The value to test.</param>
      <param name="target">The target value to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for <paramref name="value" /> to equal <paramref name="target" />.</param>
      <param name="checkInterval">The amount of time to wait between each check.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> was equal to the target within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.
            <para>or</para><paramref name="checkInterval" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Wait.ForEquals(System.Func{System.String},System.String,System.StringComparison,System.TimeSpan)">
      <summary>
            Waits for the specified function to evaluate to the same value as <paramref name="target" />.
            Evaluates the function once per second until <paramref name="waitTime" /> is reached.
            This method uses the specified <see cref="T:System.StringComparison" /> to compare the value and target.
            </summary>
      <param name="value">The value to test.</param>
      <param name="target">The target value to wait for.</param>
      <param name="comparison">The <see cref="T:System.StringComparison" /> to use.</param>
      <param name="waitTime">The amount of time to wait for <paramref name="value" /> to equal <paramref name="target" />.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> was equal to the target within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Wait.ForEquals(System.Func{System.String},System.String,System.StringComparison,System.TimeSpan,System.TimeSpan)">
      <summary>
            Waits for the specified function to evaluate to the same value as <paramref name="target" />.
            Evaluates the function at the rate specified by <paramref name="checkInterval" /> until <paramref name="waitTime" /> is reached.
            This method uses the specified <see cref="T:System.StringComparison" /> to compare the value and target.
            </summary>
      <param name="value">The value to test.</param>
      <param name="target">The target value to wait for.</param>
      <param name="comparison">The <see cref="T:System.StringComparison" /> to use.</param>
      <param name="waitTime">The amount of time to wait for <paramref name="value" /> to equal <paramref name="target" />.</param>
      <param name="checkInterval">The amount of time to wait between each check.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> was equal to the target within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.
            <para>or</para><paramref name="checkInterval" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Wait.ForEquals(System.Func{System.String},System.String,HP.DeviceAutomation.StringMatch,System.StringComparison,System.TimeSpan)">
      <summary>
            Waits for the specified function to evaluate to the same value as <paramref name="target" /> using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Evaluates the function once per second until <paramref name="waitTime" /> is reached.
            This method uses the specified <see cref="T:System.StringComparison" /> to compare the value and target.
            </summary>
      <param name="value">The value to test.</param>
      <param name="target">The target value to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="comparison">The <see cref="T:System.StringComparison" /> to use.</param>
      <param name="waitTime">The amount of time to wait for <paramref name="value" /> to equal <paramref name="target" />.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> was equal to the target within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Wait.ForEquals(System.Func{System.String},System.String,HP.DeviceAutomation.StringMatch,System.StringComparison,System.TimeSpan,System.TimeSpan)">
      <summary>
            Waits for the specified function to evaluate to the same value as <paramref name="target" /> using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Evaluates the function at the rate specified by <paramref name="checkInterval" /> until <paramref name="waitTime" /> is reached.
            This method uses the specified <see cref="T:System.StringComparison" /> to compare the value and target.
            </summary>
      <param name="value">The value to test.</param>
      <param name="target">The target value to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="comparison">The <see cref="T:System.StringComparison" /> to use.</param>
      <param name="waitTime">The amount of time to wait for <paramref name="value" /> to equal <paramref name="target" />.</param>
      <param name="checkInterval">The amount of time to wait between each check.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> was equal to the target within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.
            <para>or</para><paramref name="checkInterval" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Wait.ForChange(System.Func{System.String},System.String,System.TimeSpan)">
      <summary>
            Waits for the specified function to evaluate to a different value than <paramref name="original" />.
            Evaluates the function once per second until <paramref name="waitTime" /> is reached.
            This method uses <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> to compare the value and target.
            </summary>
      <param name="value">The value to test.</param>
      <param name="original">The original value that the function should change from.</param>
      <param name="waitTime">The amount of time to wait for <paramref name="value" /> to be different than <paramref name="original" />.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> changed from the original within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Wait.ForChange(System.Func{System.String},System.String,System.TimeSpan,System.TimeSpan)">
      <summary>
            Waits for the specified function to evaluate to a different value than <paramref name="original" />.
            Evaluates the function at the rate specified by <paramref name="checkInterval" /> until <paramref name="waitTime" /> is reached.
            This method uses <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> to compare the value and target.
            </summary>
      <param name="value">The value to test.</param>
      <param name="original">The original value that the function should change from.</param>
      <param name="waitTime">The amount of time to wait for <paramref name="value" /> to be different than <paramref name="original" />.</param>
      <param name="checkInterval">The amount of time to wait between each check.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> changed from the original within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.
            <para>or</para><paramref name="checkInterval" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Wait.ForChange(System.Func{System.String},System.String,System.StringComparison,System.TimeSpan)">
      <summary>
            Waits for the specified function to evaluate to a different value than <paramref name="original" />.
            Evaluates the function once per second until <paramref name="waitTime" /> is reached.
            This method uses the specified <see cref="T:System.StringComparison" /> to compare the value and target.
            </summary>
      <param name="value">The value to test.</param>
      <param name="original">The original value that the function should change from.</param>
      <param name="comparison">The <see cref="T:System.StringComparison" /> to use.</param>
      <param name="waitTime">The amount of time to wait for <paramref name="value" /> to be different than <paramref name="original" />.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> changed from the original within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Wait.ForChange(System.Func{System.String},System.String,System.StringComparison,System.TimeSpan,System.TimeSpan)">
      <summary>
            Waits for the specified function to evaluate to a different value than <paramref name="original" />.
            Evaluates the function at the rate specified by <paramref name="checkInterval" /> until <paramref name="waitTime" /> is reached.
            This method uses the specified <see cref="T:System.StringComparison" /> to compare the value and target.
            </summary>
      <param name="value">The value to test.</param>
      <param name="original">The original value that the function should change from.</param>
      <param name="comparison">The <see cref="T:System.StringComparison" /> to use.</param>
      <param name="waitTime">The amount of time to wait for <paramref name="value" /> to be different than <paramref name="original" />.</param>
      <param name="checkInterval">The amount of time to wait between each check.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> changed from the original within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.
            <para>or</para><paramref name="checkInterval" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Wait.ForEquals``1(System.Func{``0},``0,System.TimeSpan)">
      <summary>
            Waits for the specified function to evaluate to the same value as <paramref name="target" />.
            Evaluates the function once per second until <paramref name="waitTime" /> is reached.
            </summary>
      <typeparam name="T">The type of object that the function will return.</typeparam>
      <param name="value">The value to test.</param>
      <param name="target">The target value to wait for.</param>
      <param name="waitTime">The amount of time to wait for <paramref name="value" /> to equal <paramref name="target" />.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> was equal to the target within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Wait.ForEquals``1(System.Func{``0},``0,System.TimeSpan,System.TimeSpan)">
      <summary>
            Waits for the specified function to evaluate to the same value as <paramref name="target" />.
            Evaluates the function at the rate specified by <paramref name="checkInterval" /> until <paramref name="waitTime" /> is reached.
            </summary>
      <typeparam name="T">The type of object that the function will return.</typeparam>
      <param name="value">The value to test.</param>
      <param name="target">The target value to wait for.</param>
      <param name="waitTime">The amount of time to wait for <paramref name="value" /> to equal <paramref name="target" />.</param>
      <param name="checkInterval">The amount of time to wait between each check.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> was equal to the target within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.
            <para>or</para><paramref name="checkInterval" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Wait.ForChange``1(System.Func{``0},``0,System.TimeSpan)">
      <summary>
            Waits for the specified function to evaluate to a different value than <paramref name="original" />.
            Evaluates the function once per second until <paramref name="waitTime" /> is reached.
            </summary>
      <typeparam name="T">The type of object that the function will return.</typeparam>
      <param name="value">The value to test.</param>
      <param name="original">The original value that the function should change from.</param>
      <param name="waitTime">The amount of time to wait for <paramref name="value" /> to be different than <paramref name="original" />.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> changed from the original within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Wait.ForChange``1(System.Func{``0},``0,System.TimeSpan,System.TimeSpan)">
      <summary>
            Waits for the specified function to evaluate to a different value than <paramref name="original" />.
            Evaluates the function at the rate specified by <paramref name="checkInterval" /> until <paramref name="waitTime" /> is reached.
            </summary>
      <typeparam name="T">The type of object that the function will return.</typeparam>
      <param name="value">The value to test.</param>
      <param name="original">The original value that the function should change from.</param>
      <param name="waitTime">The amount of time to wait for <paramref name="value" /> to be different than <paramref name="original" />.</param>
      <param name="checkInterval">The amount of time to wait between each check.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> changed from the original within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.
            <para>or</para><paramref name="checkInterval" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Wait.ForNotNull``1(System.Func{``0},System.TimeSpan)">
      <summary>
            Waits for the specified function to evaluate to a non-null value.
            Evaluates the function once per second until <paramref name="waitTime" /> is reached.
            </summary>
      <typeparam name="T">The type of object that the function will return.</typeparam>
      <param name="value">The value to test.</param>
      <param name="waitTime">The amount of time to wait for <paramref name="value" /> to evaluate to a non-null value.</param>
      <returns>The value returned from the function.  Will be null if the function did not return a non-null value within the specified <paramref name="waitTime" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Wait.ForNotNull``1(System.Func{``0},System.TimeSpan,System.TimeSpan)">
      <summary>
            Waits for the specified function to evaluate to a non-null value.
            Evaluates the function at the rate specified by <paramref name="checkInterval" /> until <paramref name="waitTime" /> is reached.
            </summary>
      <typeparam name="T">The type of object that the function will return.</typeparam>
      <param name="value">The value to test.</param>
      <param name="waitTime">The amount of time to wait for <paramref name="value" /> to evaluate to a non-null value.</param>
      <param name="checkInterval">The amount of time to wait between each check.</param>
      <returns>The value returned from the function.  Will be null if the function did not return a non-null value within the specified <paramref name="waitTime" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.
            <para>or</para><paramref name="checkInterval" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.
            </exception>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">
      <summary>
            Exception thrown when the Sirius control panel could not find the specified element.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.ElementNotFoundException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.ElementNotFoundException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.ElementNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.ElementNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.LedState">
      <summary>
            Represents the state of an LED on a Sirius control panel.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.LedState.Off">
      <summary>
            LED is off.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.LedState.Blinking">
      <summary>
            LED is blinking.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.LedState.On">
      <summary>
            LED is on.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.LedStateDictionary">
      <summary>
            A dictionary of <see cref="T:HP.DeviceAutomation.Sirius.SiriusLed" /> values and their states.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.LedStateDictionary.#ctor(System.Xml.Linq.XElement)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.LedStateDictionary" /> class.
            </summary>
      <param name="ledsXml">The LEDs XML.</param>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.PageInfo">
      <summary>
            Information about the number of pages present on the control panel screen.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.PageInfo.#ctor(System.Xml.Linq.XElement)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.PageInfo" /> class.
            </summary>
      <param name="pageInfoXml">The page info XML.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.PageInfo.PageNumber">
      <summary>
            Gets the current page number, or null if the <see cref="T:HP.DeviceAutomation.Sirius.ScreenInfo" /> included no page information.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.PageInfo.TotalPages">
      <summary>
            Gets the total number of pages, or null if the <see cref="T:HP.DeviceAutomation.Sirius.ScreenInfo" /> included no page information.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.ScreenInfo">
      <summary>
            Represents the contents of a Sirius device control panel.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.ScreenInfo.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.ScreenInfo" /> class.
            </summary>
      <param name="screenInfoXml">The screen info XML.</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="screenInfoXml" /> is not a valid XML string.</exception>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.ScreenInfo.ScreenId">
      <summary>
            Gets the screen ID.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.ScreenInfo.ScreenLabel">
      <summary>
            Gets the screen label.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.ScreenInfo.ScreenIds">
      <summary>
            Gets the collection of screen IDs.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.ScreenInfo.ScreenLabels">
      <summary>
            Gets the collection of screen labels.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.ScreenInfo.Pages">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.Sirius.PageInfo" /> object containing control panel page information.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.ScreenInfo.Leds">
      <summary>
            Gets an <see cref="T:HP.DeviceAutomation.Sirius.LedStateDictionary" /> representing the state of the control panel LEDs.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.ScreenInfo.Widgets">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.Sirius.WidgetCollection" /> representing the widgets displayed on the control panel.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.ScreenInfo.LegacyScreenId">
      <summary>
            Gets the legacy screen ID (only applicable for ScreenInfo V1).
            </summary>
      <remarks>
            This property is a "back door" to the obsolete ScreenId property.
            This allows internal code to reference the property without triggering compiler warnings.
            </remarks>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.ScreenInfo.LegacyScreenLabel">
      <summary>
            Gets the legacy screen label (only applicable for ScreenInfo V1).
            </summary>
      <remarks>
            This property is a "back door" to the obsolete ScreenLabel property.
            This allows internal code to reference the property without triggering compiler warnings.
            </remarks>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.ScreenInfoVersion">
      <summary>
            Possible versions of ScreenInfo XML.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.ScreenInfoVersion.V1">
      <summary>
            ScreenInfo V1
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.ScreenInfoVersion.V2">
      <summary>
            ScreenInfo V2
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.SiriusControlPanelService">
      <summary>
            Helper class for Sirius devices that wraps Test UI service capability.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.#ctor(HP.DeviceAutomation.DeviceNetworkAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusControlPanelService" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.GetScreenInfo">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.Sirius.ScreenInfo" /> object that represents the current state of the control panel.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.Sirius.ScreenInfo" /> object that represents the contents of the control panel.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.GetScreenInfoVersion">
      <summary>
            Gets the <see cref="T:HP.DeviceAutomation.Sirius.ScreenInfoVersion" /> for the control panel.
            </summary>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.ScreenInfoVersion" />.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.ActiveScreenId">
      <summary>
            Gets the ID of the active (topmost) screen on the display.
            </summary>
      <returns>The active screen ID.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.ActiveScreenLabel">
      <summary>
            Gets the label of the active (topmost) screen on the display.
            </summary>
      <returns>The active screen label.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.PressKey(HP.DeviceAutomation.Sirius.SiriusSoftKey)">
      <summary>
            Presses the specified soft key.
            </summary>
      <param name="key">The <see cref="T:HP.DeviceAutomation.Sirius.SiriusSoftKey" /> to press.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is not a valid soft key.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.PressScreen(HP.DeviceAutomation.Coordinate)">
      <summary>
            Presses the touchscreen at the specified <see cref="T:HP.DeviceAutomation.Coordinate" />.
            </summary>
      <param name="coordinate">The coordinate to press.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinate" /> is not a valid coordinate.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.Press(System.String)">
      <summary>
            Presses the widget with the specified ID.
            </summary>
      <param name="widgetId">The ID of the widget to press.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="widgetId" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">No widget with the specified ID could be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">
            The specified widget does not have an associated <see cref="T:HP.DeviceAutomation.Sirius.WidgetAction" /> that corresponds to a press.
            <para>or</para>
            The device responded to the request with an HTTP error code.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.PressByValue(System.String)">
      <summary>
            Presses the widget that has a value matching the specified value.
            </summary>
      <param name="widgetValue">The value of the widget to press.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="widgetValue" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">No widget with the specified value could be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">
            The specified widget does not have an associated <see cref="T:HP.DeviceAutomation.Sirius.WidgetAction" /> that corresponds to a press.
            <para>or</para>
            The device responded to the request with an HTTP error code.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.PressByValue(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Presses the widget that has a value matching the specified value
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="widgetValue">The value of the widget to press.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="widgetValue" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">No widget with the specified value could be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">
            The specified widget does not have an associated <see cref="T:HP.DeviceAutomation.Sirius.WidgetAction" /> that corresponds to a press.
            <para>or</para>
            The device responded to the request with an HTTP error code.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.Press(HP.DeviceAutomation.Sirius.Widget)">
      <summary>
            Presses the specified widget.
            </summary>
      <param name="widget">The widget to press.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="widget" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">The specified widget could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">
            The specified widget does not have an associated <see cref="T:HP.DeviceAutomation.Sirius.WidgetAction" /> that corresponds to a press.
            <para>or</para>
            The device responded to the request with an HTTP error code.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.SetValue(System.String,System.String)">
      <summary>
            Sets the value of the widget with the specified ID.
            </summary>
      <param name="widgetId">The widget ID.</param>
      <param name="value">The value to set in the widget.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">No widget with the specified ID could be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.ScrollToItem(System.String,System.String)">
      <summary>
            Scrolls to the widget with the specified ID.
            </summary>
      <param name="scrollWidgetId">The ID of the scroll widget that contains the item to scroll to.</param>
      <param name="widgetId">The ID of the item to scroll to.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with the specified ID.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">
            The widget specified by <paramref name="scrollWidgetId" /> could not be found on the control panel.
            <para>or</para>
            The widget specified by <paramref name="widgetId" /> could not be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.ScrollToItemByValue(System.String,System.String)">
      <summary>
            Scrolls to the widget that has a value matching the specified value.
            </summary>
      <param name="scrollWidgetId">The ID of the scroll widget that contains the item to scroll to.</param>
      <param name="widgetValue">The value of the item to scroll to.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with the specified value.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">
            The widget specified by <paramref name="scrollWidgetId" /> could not be found on the control panel.
            <para>or</para>
            No widget with the specified value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.ScrollToItemByValue(System.String,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Scrolls to the widget that has a value matching the specified value
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="scrollWidgetId">The ID of the scroll widget that contains the item to scroll to.</param>
      <param name="widgetValue">The value of the item to scroll to.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with the specified value.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">
            The widget specified by <paramref name="scrollWidgetId" /> could not be found on the control panel.
            <para>or</para>
            No widget with the specified value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.ScrollPress(System.String,System.String)">
      <summary>
            Scrolls to and presses the widget with the specified ID.
            </summary>
      <param name="scrollWidgetId">The ID of the scroll widget that contains the item to scroll to.</param>
      <param name="widgetId">The ID of the item to scroll to.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">
            The widget specified by <paramref name="scrollWidgetId" /> could not be found on the control panel.
            <para>or</para>
            The widget specified by <paramref name="widgetId" /> could not be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.ScrollPressByValue(System.String,System.String)">
      <summary>
            Scrolls to and presses the widget that has a value matching the specified value.
            </summary>
      <param name="scrollWidgetId">The ID of the scroll widget that contains the item to scroll to.</param>
      <param name="widgetValue">The value of the item to scroll to.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">
            The widget specified by <paramref name="scrollWidgetId" /> could not be found on the control panel.
            <para>or</para>
            No widget with the specified value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.ScrollPressByValue(System.String,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Scrolls to and presses the widget that has a value matching the specified value
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="scrollWidgetId">The ID of the scroll widget that contains the item to scroll to.</param>
      <param name="widgetValue">The value of the item to scroll to.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">
            The widget specified by <paramref name="scrollWidgetId" /> could not be found on the control panel.
            <para>or</para>
            No widget with the specified value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.PerformAction(HP.DeviceAutomation.Sirius.WidgetAction,System.String)">
      <summary>
            Performs the specified action on the widget with the specified ID.
            </summary>
      <param name="action">The <see cref="T:HP.DeviceAutomation.Sirius.WidgetAction" /> to perform.</param>
      <param name="widgetId">The ID of the widget.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.WaitForWidget(System.String,System.TimeSpan)">
      <summary>
            Waits for a widget with the specified ID to exist.
            </summary>
      <param name="widgetId">The ID of the widget to wait for.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with the specified ID, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.WaitForWidgetByValue(System.String,System.TimeSpan)">
      <summary>
            Waits for a widget that has a value matching the specified value to exist.
            </summary>
      <param name="widgetValue">The value of the widget to wait for.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with the specified value, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.WaitForWidgetByValue(System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for a widget that has a value matching the specified value to exist.
            </summary>
      <param name="widgetValue">The value of the widget to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with a matching value, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.WaitForActiveScreenId(System.String,System.TimeSpan)">
      <summary>
            Waits for the specified screen to be the active (topmost) screen on the display.
            </summary>
      <param name="identifier">The screen identifier to wait for.  May be a substring of the expected screen ID.</param>
      <param name="waitTime">The amount of time to wait for the specified screen.</param>
      <returns>
        <c>true</c> if the specified screen becomes active within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.WaitForActiveScreenLabel(System.String,System.TimeSpan)">
      <summary>
            Waits for the specified screen to be the active (topmost) screen on the display.
            </summary>
      <param name="label">The screen label to wait for.  May be a substring of the expected screen label.</param>
      <param name="waitTime">The amount of time to wait for the specified screen.</param>
      <returns>
        <c>true</c> if the specified screen becomes active within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.WaitForScreenId(System.String,System.TimeSpan)">
      <summary>
            Waits for the specified screen ID to exist.
            </summary>
      <param name="screenId">The screen ID to wait for.</param>
      <param name="waitTime">The amount of time to wait for the specified screen ID.</param>
      <returns>
        <c>true</c> if the specified screen is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.WaitForScreenId(System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for the specified screen ID to exist using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="screenId">The screen ID to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the specified screen ID.</param>
      <returns>
        <c>true</c> if the specified screen is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.WaitForScreenLabel(System.String,System.TimeSpan)">
      <summary>
            Waits for the specified screen label to exist.
            </summary>
      <param name="screenLabel">The screen label to wait for.</param>
      <param name="waitTime">The amount of time to wait for the specified screen label.</param>
      <returns>
        <c>true</c> if the specified screen is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.WaitForScreenLabel(System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for the specified screen label to exist using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="screenLabel">The screen label to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the specified screen label.</param>
      <returns>
        <c>true</c> if the specified screen is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusControlPanelService.ScreenCapture">
      <summary>
            Retrieves an <see cref="T:System.Drawing.Image" /> containing a screen capture of the control panel.
            </summary>
      <returns>An image of the control panel in PNG format.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.SiriusDevice">
      <summary>
            Represents a device running Sirius firmware.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusDevice.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusDevice.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusDevice.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusDevice.#ctor(System.Net.IPAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusDevice.#ctor(HP.DeviceAutomation.DeviceConstructionParameterCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusDevice" /> class
            with the specified <see cref="T:HP.DeviceAutomation.DeviceConstructionParameterCollection" />.
            </summary>
      <param name="parameters">The device construction parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusDevice.GetDeviceInfo">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.Sirius.SiriusDeviceInfo" /> object containing information about the device.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.Sirius.SiriusDeviceInfo" /> object.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusDevice.GetDeviceStatus">
      <summary>
            Gets the current operational state of the device.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.DeviceStatus" /> representing the state of the device.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusDevice.GetPrinterStatus">
      <summary>
            Gets the current printer status of the device.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.PrinterStatus" /> representing the state of the device.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusDevice.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusDevice.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.SiriusDevice.Address">
      <summary>
            Gets the network address of the device.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.SiriusDevice.AdminPassword">
      <summary>
            Gets the admin password that will be used for communication with the device.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.SiriusDevice.FirmwareType">
      <summary>
            Gets the type of firmware running on the device.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.SiriusDevice.Snmp">
      <summary>
            Gets the SNMP communication interface for this <see cref="T:HP.DeviceAutomation.Sirius.SiriusDevice" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.SiriusDevice.PowerManagement">
      <summary>
            Gets the power management interface for this <see cref="T:HP.DeviceAutomation.Sirius.SiriusDevice" />.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.SiriusDeviceFactory">
      <summary>
            Implementation of <see cref="T:HP.DeviceAutomation.IDeviceFactory" /> for Sirius devices.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusDeviceFactory.Create(HP.DeviceAutomation.DeviceConstructionParameterCollection)">
      <summary>
            Creates an <see cref="T:HP.DeviceAutomation.IDevice" /> object using the specified construction parameters.
            </summary>
      <param name="parameters">The device construction parameters.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.IDevice" /> object for the device constructed from the specified parameters.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.SiriusDeviceInfo">
      <summary>
            Contains information about a <see cref="T:HP.DeviceAutomation.Sirius.SiriusDevice" />.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusDeviceInfo.#ctor">
      <summary>
            Prevents a default instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusDeviceInfo" /> class from being created.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusDeviceInfo.Retrieve(HP.DeviceAutomation.Snmp)">
      <summary>
            Constructs a <see cref="T:HP.DeviceAutomation.Sirius.SiriusDeviceInfo" /> object using the specified <see cref="T:HP.DeviceAutomation.Snmp" /> communication interface.
            </summary>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Sirius.SiriusDeviceInfo" /> object.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.SiriusDeviceInfo.ModelName">
      <summary>
            Gets the device model name, if available; null otherwise.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.SiriusDeviceInfo.ModelNumber">
      <summary>
            Gets the device model number, if available; null otherwise.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.SiriusDeviceInfo.SerialNumber">
      <summary>
            Gets the device serial number, if available; null otherwise.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.SiriusDeviceInfo.FirmwareRevision">
      <summary>
            Gets the revision (version) of the device firmware, if available; null otherwise.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.SiriusDeviceInfo.FirmwareDateCode">
      <summary>
            Gets the date code of the device firmware, if available; null otherwise.
            (The format of the date code is firmware-specific and is not necessarily parseable.)
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.SiriusDeviceInfo.DeviceId">
      <summary>
            Gets the HP MIB device identifier.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">
      <summary>
            Exception thrown when a Sirius method call is invalid for the device's current state.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException.#ctor(System.Net.HttpStatusCode)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException" /> class with a specified <see cref="T:System.Net.HttpStatusCode" />.
            </summary>
      <param name="statusCode">The HTTP status code.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException.#ctor(System.String,System.Net.HttpStatusCode)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException" /> class with a specified error message and <see cref="T:System.Net.HttpStatusCode" />.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="statusCode">The HTTP status code.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException.#ctor(System.String,System.Net.HttpStatusCode,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException" /> class with a specified error message, <see cref="T:System.Net.HttpStatusCode" /> and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="statusCode">The HTTP status code.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException.StatusCode">
      <summary>
            Gets the <see cref="T:System.Net.HttpStatusCode" /> associated with this <see cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException" />.
            (If this exception was not caused by a particular HTTP error, <see cref="P:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException.StatusCode" /> will have a value of <see cref="F:System.Net.HttpStatusCode.OK" />.)
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.SiriusLed">
      <summary>
            Represents an LED display indicator on a Sirius device.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.SiriusLed.Home">
      <summary>
            Home
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.SiriusLed.Help">
      <summary>
            Help
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.SiriusLed.Back">
      <summary>
            Back
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.SiriusLed.Cancel">
      <summary>
            Cancel
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.SiriusLed.Left">
      <summary>
            Left
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.SiriusLed.Right">
      <summary>
            Right
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.SiriusLed.Power">
      <summary>
            Power
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.SiriusLed.Ready">
      <summary>
            Ready
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.SiriusLed.Error">
      <summary>
            Error
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.SiriusLed.Wireless">
      <summary>
            Wireless
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.SiriusLed.MassStorage">
      <summary>
            Mass Storage
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.SiriusLed.ePrint">
      <summary>
            ePrint
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.SiriusPayloadAttribute">
      <summary>
            Marks a <see cref="T:HP.DeviceAutomation.Sirius.WidgetAction" /> or <see cref="T:HP.DeviceAutomation.Sirius.SiriusSoftKey" /> with
            the corresponding payload string for the action or soft key.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusPayloadAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusPayloadAttribute" /> class.
            </summary>
      <param name="payload">The payload string.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusPayloadAttribute.GetPayloadString(System.Enum)">
      <summary>
            Gets the payload string stored in the <see cref="T:HP.DeviceAutomation.Sirius.SiriusPayloadAttribute" /> of the specified value,
            or null if no such attribute exists.
            </summary>
      <param name="value">The <see cref="T:System.Enum" /> value.</param>
      <returns>The payload string stored in the <see cref="T:HP.DeviceAutomation.Sirius.SiriusPayloadAttribute" /> of the specified value.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.SiriusPayloadAttribute.Payload">
      <summary>
            Gets the action payload string.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.SiriusPowerManager">
      <summary>
            Provides access to settings and functionality related to power management.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusPowerManager.#ctor(HP.DeviceAutomation.DeviceNetworkAddress,System.String,HP.DeviceAutomation.Snmp)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusPowerManager" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.
            <para>or</para><paramref name="snmp" /> is null.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusPowerManager.Wake">
      <summary>
            Wakes the device.
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusPowerManager.Reboot">
      <summary>
            Reboots the device.  Equivalent to turning the device off and then on again.
            (This method does not wait for the device to return to a ready state.)
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusPowerManager.PartialReset">
      <summary>
            Invokes the Partial Reset feature and reboots the device.
            (This method does not wait for the device to return to a ready state.)
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusPowerManager.RestoreFactorySettings">
      <summary>
            Invokes the Restore Factory Settings feature.
            (This method does not wait for the device to return to a ready state.)
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.SiriusSoftKey">
      <summary>
            Represents a soft key on a Sirius device.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.SiriusSoftKey.Home">
      <summary>
            The Home key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.SiriusSoftKey.Help">
      <summary>
            The Help key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.SiriusSoftKey.Back">
      <summary>
            The Back key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.SiriusSoftKey.Cancel">
      <summary>
            The Cancel key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.SiriusSoftKey.Left">
      <summary>
            The left arrow key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.SiriusSoftKey.Right">
      <summary>
            The right arrow key.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.SiriusUIConfigurationService">
      <summary>
            Helper class for Sirius devices that wraps UI Configuration service capability.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIConfigurationService.#ctor(HP.DeviceAutomation.DeviceNetworkAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusUIConfigurationService" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIConfigurationService.GetVintage">
      <summary>
            Gets the <see cref="T:HP.DeviceAutomation.Sirius.SiriusVintage" /> of the device UI.
            </summary>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.SiriusVintage" />.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIConfigurationService.GetUIVersion">
      <summary>
            Gets the device UI version.
            </summary>
      <returns>The UI version.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel">
      <summary>
            Control panel for a Sirius device using the Sirius UIv2 presentation framework.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.#ctor(HP.DeviceAutomation.DeviceNetworkAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.GetScreenInfo">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.Sirius.ScreenInfo" /> object that represents the current state of the control panel.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.Sirius.ScreenInfo" /> object that represents the contents of the control panel.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.ActiveScreenId">
      <summary>
            Gets the ID of the active (topmost) screen on the display.
            </summary>
      <returns>The active screen ID.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.ActiveScreenLabel">
      <summary>
            Gets the label of the active (topmost) screen on the display.
            </summary>
      <returns>The active screen label.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.Press(System.String)">
      <summary>
            Presses the widget with the specified ID.
            </summary>
      <param name="widgetId">The ID of the widget to press.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="widgetId" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">No widget with the specified ID could be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">
            The specified widget does not have an associated <see cref="T:HP.DeviceAutomation.Sirius.WidgetAction" /> that corresponds to a press.
            <para>or</para>
            The device responded to the request with an HTTP error code.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.PressByValue(System.String)">
      <summary>
            Presses the widget that has a value matching the specified value.
            </summary>
      <param name="widgetValue">The value of the widget to press.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="widgetValue" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">No widget with the specified value could be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">
            The specified widget does not have an associated <see cref="T:HP.DeviceAutomation.Sirius.WidgetAction" /> that corresponds to a press.
            <para>or</para>
            The device responded to the request with an HTTP error code.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.PressByValue(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Presses the widget that has a value matching the specified value
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="widgetValue">The value of the widget to press.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="widgetValue" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">No widget with the specified value could be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">
            The specified widget does not have an associated <see cref="T:HP.DeviceAutomation.Sirius.WidgetAction" /> that corresponds to a press.
            <para>or</para>
            The device responded to the request with an HTTP error code.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.Press(HP.DeviceAutomation.Sirius.Widget)">
      <summary>
            Presses the specified widget.
            </summary>
      <param name="widget">The widget to press.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="widget" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">The specified widget could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">
            The specified widget does not have an associated <see cref="T:HP.DeviceAutomation.Sirius.WidgetAction" /> that corresponds to a press.
            <para>or</para>
            The device responded to the request with an HTTP error code.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.PressKey(HP.DeviceAutomation.Sirius.SiriusSoftKey)">
      <summary>
            Presses the specified soft key.
            </summary>
      <param name="key">The <see cref="T:HP.DeviceAutomation.Sirius.SiriusSoftKey" /> to press.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is not a valid soft key.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.PressScreen(System.Int32,System.Int32)">
      <summary>
            Presses the touchscreen at the specified coordinates.
            </summary>
      <param name="x">The x-coordinate.</param>
      <param name="y">The y-coordinate.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="y" /> do not represent a valid coordinate.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.PressScreen(HP.DeviceAutomation.Coordinate)">
      <summary>
            Presses the touchscreen at the specified <see cref="T:HP.DeviceAutomation.Coordinate" />.
            </summary>
      <param name="coordinate">The coordinate to press.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinate" /> is not a valid coordinate.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.SetValue(System.String,System.String)">
      <summary>
            Sets the value of the widget with the specified ID.
            </summary>
      <param name="widgetId">The widget ID.</param>
      <param name="value">The value to set in the widget.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">No widget with the specified ID could be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.ScrollToItem(System.String,System.String)">
      <summary>
            Scrolls to the widget with the specified ID.
            </summary>
      <param name="scrollWidgetId">The ID of the scroll widget that contains the item to scroll to.</param>
      <param name="widgetId">The ID of the item to scroll to.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with the specified ID.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">
            The widget specified by <paramref name="scrollWidgetId" /> could not be found on the control panel.
            <para>or</para>
            The widget specified by <paramref name="widgetId" /> could not be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.ScrollToItemByValue(System.String,System.String)">
      <summary>
            Scrolls to the widget with the specified value.
            </summary>
      <param name="scrollWidgetId">The ID of the scroll widget that contains the item to scroll to.</param>
      <param name="widgetValue">The value of the item to scroll to.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with the specified value.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">
            The widget specified by <paramref name="scrollWidgetId" /> could not be found on the control panel.
            <para>or</para>
            No widget with the specified value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.ScrollToItemByValue(System.String,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Scrolls to the widget that has a value matching the specified value
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="scrollWidgetId">The ID of the scroll widget that contains the item to scroll to.</param>
      <param name="widgetValue">The value of the item to scroll to.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with the specified value.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">
            The widget specified by <paramref name="scrollWidgetId" /> could not be found on the control panel.
            <para>or</para>
            No widget with the specified value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.ScrollPress(System.String,System.String)">
      <summary>
            Scrolls to and presses the widget with the specified ID.
            </summary>
      <param name="scrollWidgetId">The ID of the scroll widget that contains the item to scroll to.</param>
      <param name="widgetId">The ID of the item to scroll to.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">
            The widget specified by <paramref name="scrollWidgetId" /> could not be found on the control panel.
            <para>or</para>
            The widget specified by <paramref name="widgetId" /> could not be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.ScrollPressByValue(System.String,System.String)">
      <summary>
            Scrolls to and presses the widget that has a value matching the specified value.
            </summary>
      <param name="scrollWidgetId">The ID of the scroll widget that contains the item to scroll to.</param>
      <param name="widgetValue">The value of the item to scroll to.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">
            The widget specified by <paramref name="scrollWidgetId" /> could not be found on the control panel.
            <para>or</para>
            No widget with the specified value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.ScrollPressByValue(System.String,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Scrolls to and presses the widget that has a value matching the specified value
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="scrollWidgetId">The ID of the scroll widget that contains the item to scroll to.</param>
      <param name="widgetValue">The value of the item to scroll to.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">
            The widget specified by <paramref name="scrollWidgetId" /> could not be found on the control panel.
            <para>or</para>
            No widget with the specified value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.PerformAction(HP.DeviceAutomation.Sirius.WidgetAction,System.String)">
      <summary>
            Performs the specified action on the widget with the specified ID.
            </summary>
      <param name="action">The <see cref="T:HP.DeviceAutomation.Sirius.WidgetAction" /> to perform.</param>
      <param name="widgetId">The ID of the widget.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.WaitForWidget(System.String)">
      <summary>
            Waits for a widget with the specified ID to exist.
            Uses <see cref="P:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="widgetId">The ID of the widget to wait for.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with the specified ID, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.WaitForWidget(System.String,System.TimeSpan)">
      <summary>
            Waits for a widget with the specified ID to exist.
            </summary>
      <param name="widgetId">The ID of the widget to wait for.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with the specified ID, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.WaitForWidgetByValue(System.String)">
      <summary>
            Waits for a widget that has a value matching the specified value to exist.
            Uses <see cref="P:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="widgetValue">The value of the widget to wait for.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with the specified value, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.WaitForWidgetByValue(System.String,System.TimeSpan)">
      <summary>
            Waits for a widget that has a value matching the specified value to exist.
            </summary>
      <param name="widgetValue">The value of the widget to wait for.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with the specified value, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.WaitForWidgetByValue(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Waits for a widget that has a value matching the specified value to exist.
            Uses <see cref="P:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="widgetValue">The value of the widget to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with a matching value, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.WaitForWidgetByValue(System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for a widget that has a value matching the specified value to exist.
            </summary>
      <param name="widgetValue">The value of the widget to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with a matching value, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.WaitForActiveScreenId(System.String)">
      <summary>
            Waits for the specified screen to be the active (topmost) screen on the display.
            Uses <see cref="P:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="identifier">The screen identifier to wait for.  May be a substring of the expected screen ID.</param>
      <returns>
        <c>true</c> if the specified screen becomes active within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.WaitForActiveScreenId(System.String,System.TimeSpan)">
      <summary>
            Waits for the specified screen to be the active (topmost) screen on the display.
            </summary>
      <param name="identifier">The screen identifier to wait for.  May be a substring of the expected screen ID.</param>
      <param name="waitTime">The amount of time to wait for the specified screen.</param>
      <returns>
        <c>true</c> if the specified screen becomes active within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.WaitForActiveScreenLabel(System.String)">
      <summary>
            Waits for the specified screen to be the active (topmost) screen on the display.
            Uses <see cref="P:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="label">The screen label to wait for.  May be a substring of the expected screen label.</param>
      <returns>
        <c>true</c> if the specified screen becomes active within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.WaitForActiveScreenLabel(System.String,System.TimeSpan)">
      <summary>
            Waits for the specified screen to be the active (topmost) screen on the display.
            </summary>
      <param name="label">The screen label to wait for.  May be a substring of the expected screen label.</param>
      <param name="waitTime">The amount of time to wait for the specified screen.</param>
      <returns>
        <c>true</c> if the specified screen becomes active within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.ScreenCapture">
      <summary>
            Retrieves an <see cref="T:System.Drawing.Image" /> containing a screen capture of the control panel.
            </summary>
      <returns>An image of the control panel in PNG format.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.SiriusUIv2ControlPanel.DefaultWaitTime">
      <summary>
            Gets or sets the default wait time for control panel operations that require waiting for a new state.
            The default value is 30 seconds.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.SiriusUIv2Device">
      <summary>
            Represents a device running Sirius firmware with the Sirius UIv2 presentation framework.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2Device.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusUIv2Device" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2Device.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusUIv2Device" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2Device.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusUIv2Device" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2Device.#ctor(System.Net.IPAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusUIv2Device" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv2Device.#ctor(HP.DeviceAutomation.DeviceConstructionParameterCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusUIv2Device" /> class
            with the specified <see cref="T:HP.DeviceAutomation.DeviceConstructionParameterCollection" />.
            </summary>
      <param name="parameters">The device construction parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.SiriusUIv2Device.ControlPanel">
      <summary>
            Gets the control panel for this <see cref="T:HP.DeviceAutomation.Sirius.SiriusUIv2Device" />.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel">
      <summary>
            Control panel for a Sirius device using the Sirius UIv3 presentation framework.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.#ctor(HP.DeviceAutomation.DeviceNetworkAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.GetVintageInfo">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.Sirius.SiriusVintageInfo" /> object containing information about the control panel UI.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.Sirius.SiriusVintageInfo" /> object.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.GetScreenInfo">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.Sirius.ScreenInfo" /> object that represents the current state of the control panel.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.Sirius.ScreenInfo" /> object that represents the contents of the control panel.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.ActiveScreenId">
      <summary>
            Gets the ID of the active (topmost) screen on the display.
            </summary>
      <returns>The active screen ID.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.ActiveScreenLabel">
      <summary>
            Gets the label of the active (topmost) screen on the display.
            </summary>
      <returns>The active screen label.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.Press(System.String)">
      <summary>
            Presses the widget with the specified ID.
            </summary>
      <param name="widgetId">The ID of the widget to press.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="widgetId" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">No widget with the specified ID could be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">
            The specified widget does not have an associated <see cref="T:HP.DeviceAutomation.Sirius.WidgetAction" /> that corresponds to a press.
            <para>or</para>
            The device responded to the request with an HTTP error code.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.PressByValue(System.String)">
      <summary>
            Presses the widget that has a value matching the specified value.
            </summary>
      <param name="widgetValue">The value of the widget to press.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="widgetValue" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">No widget with the specified value could be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">
            The specified widget does not have an associated <see cref="T:HP.DeviceAutomation.Sirius.WidgetAction" /> that corresponds to a press.
            <para>or</para>
            The device responded to the request with an HTTP error code.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.PressByValue(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Presses the widget that has a value matching the specified value
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="widgetValue">The value of the widget to press.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="widgetValue" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">No widget with the specified value could be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">
            The specified widget does not have an associated <see cref="T:HP.DeviceAutomation.Sirius.WidgetAction" /> that corresponds to a press.
            <para>or</para>
            The device responded to the request with an HTTP error code.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.Press(HP.DeviceAutomation.Sirius.Widget)">
      <summary>
            Presses the specified widget.
            </summary>
      <param name="widget">The widget to press.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="widget" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">The specified widget could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">
            The specified widget does not have an associated <see cref="T:HP.DeviceAutomation.Sirius.WidgetAction" /> that corresponds to a press.
            <para>or</para>
            The device responded to the request with an HTTP error code.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.PressKey(HP.DeviceAutomation.Sirius.SiriusSoftKey)">
      <summary>
            Presses the specified soft key.
            </summary>
      <param name="key">The <see cref="T:HP.DeviceAutomation.Sirius.SiriusSoftKey" /> to press.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is not a valid soft key.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.PressScreen(System.Int32,System.Int32)">
      <summary>
            Presses the touchscreen at the specified coordinates.
            </summary>
      <param name="x">The x-coordinate.</param>
      <param name="y">The y-coordinate.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="y" /> do not represent a valid coordinate.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.PressScreen(HP.DeviceAutomation.Coordinate)">
      <summary>
            Presses the touchscreen at the specified <see cref="T:HP.DeviceAutomation.Coordinate" />.
            </summary>
      <param name="coordinate">The coordinate to press.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinate" /> is not a valid coordinate.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.SetValue(System.String,System.String)">
      <summary>
            Sets the value of the widget with the specified ID.
            </summary>
      <param name="widgetId">The widget ID.</param>
      <param name="value">The value to set in the widget.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">No widget with the specified ID could be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.ScrollToItem(System.String,System.String)">
      <summary>
            Scrolls to the widget with the specified ID.
            </summary>
      <param name="scrollWidgetId">The ID of the scroll widget that contains the item to scroll to.</param>
      <param name="widgetId">The ID of the item to scroll to.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with the specified ID.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">
            The widget specified by <paramref name="scrollWidgetId" /> could not be found on the control panel.
            <para>or</para>
            The widget specified by <paramref name="widgetId" /> could not be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.ScrollToItemByValue(System.String,System.String)">
      <summary>
            Scrolls to the widget with the specified value.
            </summary>
      <param name="scrollWidgetId">The ID of the scroll widget that contains the item to scroll to.</param>
      <param name="widgetValue">The value of the item to scroll to.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with the specified value.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">
            The widget specified by <paramref name="scrollWidgetId" /> could not be found on the control panel.
            <para>or</para>
            No widget with the specified value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.ScrollToItemByValue(System.String,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Scrolls to the widget that has a value matching the specified value
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="scrollWidgetId">The ID of the scroll widget that contains the item to scroll to.</param>
      <param name="widgetValue">The value of the item to scroll to.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with the specified value.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">
            The widget specified by <paramref name="scrollWidgetId" /> could not be found on the control panel.
            <para>or</para>
            No widget with the specified value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.ScrollPress(System.String,System.String)">
      <summary>
            Scrolls to and presses the widget with the specified ID.
            </summary>
      <param name="scrollWidgetId">The ID of the scroll widget that contains the item to scroll to.</param>
      <param name="widgetId">The ID of the item to scroll to.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">
            The widget specified by <paramref name="scrollWidgetId" /> could not be found on the control panel.
            <para>or</para>
            The widget specified by <paramref name="widgetId" /> could not be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.ScrollPressByValue(System.String,System.String)">
      <summary>
            Scrolls to and presses the widget that has a value matching the specified value.
            </summary>
      <param name="scrollWidgetId">The ID of the scroll widget that contains the item to scroll to.</param>
      <param name="widgetValue">The value of the item to scroll to.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">
            The widget specified by <paramref name="scrollWidgetId" /> could not be found on the control panel.
            <para>or</para>
            No widget with the specified value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.ScrollPressByValue(System.String,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Scrolls to and presses the widget that has a value matching the specified value
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="scrollWidgetId">The ID of the scroll widget that contains the item to scroll to.</param>
      <param name="widgetValue">The value of the item to scroll to.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">
            The widget specified by <paramref name="scrollWidgetId" /> could not be found on the control panel.
            <para>or</para>
            No widget with the specified value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.PerformAction(HP.DeviceAutomation.Sirius.WidgetAction,System.String)">
      <summary>
            Performs the specified action on the widget with the specified ID.
            </summary>
      <param name="action">The <see cref="T:HP.DeviceAutomation.Sirius.WidgetAction" /> to perform.</param>
      <param name="widgetId">The ID of the widget.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.WaitForWidget(System.String)">
      <summary>
            Waits for a widget with the specified ID to exist.
            Uses <see cref="P:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="widgetId">The ID of the widget to wait for.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with the specified ID, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.WaitForWidget(System.String,System.TimeSpan)">
      <summary>
            Waits for a widget with the specified ID to exist.
            </summary>
      <param name="widgetId">The ID of the widget to wait for.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with the specified ID, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.WaitForWidgetByValue(System.String)">
      <summary>
            Waits for a widget that has a value matching the specified value to exist.
            Uses <see cref="P:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="widgetValue">The value of the widget to wait for.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with the specified value, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.WaitForWidgetByValue(System.String,System.TimeSpan)">
      <summary>
            Waits for a widget that has a value matching the specified value to exist.
            </summary>
      <param name="widgetValue">The value of the widget to wait for.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with the specified value, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.WaitForWidgetByValue(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Waits for a widget that has a value matching the specified value to exist.
            Uses <see cref="P:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="widgetValue">The value of the widget to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with a matching value, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.WaitForWidgetByValue(System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for a widget that has a value matching the specified value to exist.
            </summary>
      <param name="widgetValue">The value of the widget to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with a matching value, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.WaitForActiveScreenId(System.String)">
      <summary>
            Waits for the specified screen to be the active (topmost) screen on the display.
            Uses <see cref="P:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="identifier">The screen identifier to wait for.  May be a substring of the expected screen ID.</param>
      <returns>
        <c>true</c> if the specified screen becomes active within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.WaitForActiveScreenId(System.String,System.TimeSpan)">
      <summary>
            Waits for the specified screen to be the active (topmost) screen on the display.
            </summary>
      <param name="identifier">The screen identifier to wait for.  May be a substring of the expected screen ID.</param>
      <param name="waitTime">The amount of time to wait for the specified screen.</param>
      <returns>
        <c>true</c> if the specified screen becomes active within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.WaitForActiveScreenLabel(System.String)">
      <summary>
            Waits for the specified screen to be the active (topmost) screen on the display.
            Uses <see cref="P:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="label">The screen label to wait for.  May be a substring of the expected screen label.</param>
      <returns>
        <c>true</c> if the specified screen becomes active within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.WaitForActiveScreenLabel(System.String,System.TimeSpan)">
      <summary>
            Waits for the specified screen to be the active (topmost) screen on the display.
            </summary>
      <param name="label">The screen label to wait for.  May be a substring of the expected screen label.</param>
      <param name="waitTime">The amount of time to wait for the specified screen.</param>
      <returns>
        <c>true</c> if the specified screen becomes active within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.WaitForScreenId(System.String)">
      <summary>
            Waits for the specified screen ID to exist.
            Uses <see cref="P:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="screenId">The screen ID to wait for.</param>
      <returns>
        <c>true</c> if the specified screen is found within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.WaitForScreenId(System.String,System.TimeSpan)">
      <summary>
            Waits for the specified screen ID to exist.
            </summary>
      <param name="screenId">The screen ID to wait for.</param>
      <param name="waitTime">The amount of time to wait for the specified screen ID.</param>
      <returns>
        <c>true</c> if the specified screen is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.WaitForScreenId(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Waits for the specified screen ID to exist using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Uses <see cref="P:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="screenId">The screen ID to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>
        <c>true</c> if the specified screen is found within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.WaitForScreenId(System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for the specified screen ID to exist using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="screenId">The screen ID to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the specified screen ID.</param>
      <returns>
        <c>true</c> if the specified screen is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.WaitForScreenLabel(System.String)">
      <summary>
            Waits for the specified screen label to exist.
            Uses <see cref="P:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="screenLabel">The screen label to wait for.</param>
      <returns>
        <c>true</c> if the specified screen is found within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.WaitForScreenLabel(System.String,System.TimeSpan)">
      <summary>
            Waits for the specified screen label to exist.
            </summary>
      <param name="screenLabel">The screen label to wait for.</param>
      <param name="waitTime">The amount of time to wait for the specified screen label.</param>
      <returns>
        <c>true</c> if the specified screen is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.WaitForScreenLabel(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Waits for the specified screen label to exist using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Uses <see cref="P:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="screenLabel">The screen label to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>
        <c>true</c> if the specified screen is found within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.WaitForScreenLabel(System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for the specified screen label to exist using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="screenLabel">The screen label to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the specified screen label.</param>
      <returns>
        <c>true</c> if the specified screen is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.ScreenCapture">
      <summary>
            Retrieves an <see cref="T:System.Drawing.Image" /> containing a screen capture of the control panel.
            </summary>
      <returns>An image of the control panel in PNG format.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.SiriusInvalidOperationException">The device responded to the request with an HTTP error code.</exception>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.SiriusUIv3ControlPanel.DefaultWaitTime">
      <summary>
            Gets or sets the default wait time for control panel operations that require waiting for a new state.
            The default value is 30 seconds.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.SiriusUIv3Device">
      <summary>
            Represents a device running Sirius firmware with the Sirius UIv3 presentation framework.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3Device.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusUIv3Device" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3Device.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusUIv3Device" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3Device.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusUIv3Device" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3Device.#ctor(System.Net.IPAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusUIv3Device" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusUIv3Device.#ctor(HP.DeviceAutomation.DeviceConstructionParameterCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusUIv3Device" /> class
            with the specified <see cref="T:HP.DeviceAutomation.DeviceConstructionParameterCollection" />.
            </summary>
      <param name="parameters">The device construction parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.SiriusUIv3Device.ControlPanel">
      <summary>
            Gets the control panel for this <see cref="T:HP.DeviceAutomation.Sirius.SiriusUIv3Device" />.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.SiriusVintage">
      <summary>
            A Sirius control panel UI vintage.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.SiriusVintage.Unknown">
      <summary>
            Unknown
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.SiriusVintage.Latte">
      <summary>
            Latte
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.SiriusVintage.Chai">
      <summary>
            Chai
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.SiriusVintage.Mocha">
      <summary>
            Mocha
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.SiriusVintageInfo">
      <summary>
            Information about a Sirius control panel UI vintage.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.SiriusVintageInfo.#ctor(HP.DeviceAutomation.Sirius.SiriusVintage,HP.DeviceAutomation.Sirius.ScreenInfoVersion)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.SiriusVintageInfo" /> class.
            </summary>
      <param name="vintage">The <see cref="T:HP.DeviceAutomation.Sirius.SiriusVintage" />.</param>
      <param name="screenInfoVersion">The <see cref="T:HP.DeviceAutomation.Sirius.ScreenInfoVersion" />.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.SiriusVintageInfo.Vintage">
      <summary>
            Gets the <see cref="T:HP.DeviceAutomation.Sirius.SiriusVintage" /> for the control panel.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.SiriusVintageInfo.ScreenInfoVersion">
      <summary>
            Gets the <see cref="T:HP.DeviceAutomation.Sirius.ScreenInfoVersion" /> for the control panel.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.Widget">
      <summary>
            Represents a widget on a Sirius control panel.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Widget.#ctor(System.Xml.Linq.XElement)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> class.
            </summary>
      <param name="widgetXml">The widget XML.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Widget.HasValue(System.String)">
      <summary>
            Determines whether this widget's set of values contains the specified value.
            </summary>
      <param name="value">The value.</param>
      <returns>
        <c>true</c> if this widget's set of values contains the specified value; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Widget.HasValue(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Determines whether this widget's set of values contains a value matching the specified value
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="value">The value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>
        <c>true</c> if this widget's set of values contains a matching value; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Widget.HasAction(HP.DeviceAutomation.Sirius.WidgetAction)">
      <summary>
            Determines whether this widget's available actions include the specified action.
            </summary>
      <param name="action">The action.</param>
      <returns>
        <c>true</c> if this widget's available actions include the specified action; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Widget.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this <see cref="T:HP.DeviceAutomation.Sirius.Widget" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this <see cref="T:HP.DeviceAutomation.Sirius.Widget" />.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.Widget.Id">
      <summary>
            Gets the ID of the widget.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.Widget.WidgetType">
      <summary>
            Gets the type of the widget.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.Widget.Location">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.Coordinate" /> structure representing the location of the upper-left corner of the widget.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.Widget.Size">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.Size" /> structure containing the width and height of the widget.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.Widget.Values">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.Sirius.WidgetValuesDictionary" /> representing the set of values for the widget.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.Widget.Actions">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.Sirius.WidgetActionCollection" /> containing the actions that can be performed on the widget.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.WidgetAction">
      <summary>
            Represents an action that can be performed on a Sirius widget.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetAction.Select">
      <summary>
            Select the widget.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetAction.ScrollNext">
      <summary>
            Scroll to the next page.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetAction.ScrollPrev">
      <summary>
            Scroll to the previous page.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetAction.Increment">
      <summary>
            Increment the widget value.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetAction.Decrement">
      <summary>
            Decrement the widget value.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetAction.SlideForward">
      <summary>
            Slide forward.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetAction.SlideBackward">
      <summary>
            Slide backward.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetAction.SetValue">
      <summary>
            Set the widget value.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetAction.Check">
      <summary>
            Check the widget.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetAction.Toggle">
      <summary>
            Toggle the widget state.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetAction.Play">
      <summary>
            Play the animation.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetAction.Pause">
      <summary>
            Pause the animation.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetAction.Stop">
      <summary>
            Stop the animation.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetAction.Tap">
      <summary>
            Tap on the widget.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetAction.TapAndHold">
      <summary>
            Tap and hold the widget.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetAction.Pan">
      <summary>
            Pan the widget view.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetAction.MultiTap">
      <summary>
            Tap the widget multiple times.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.WidgetActionCollection">
      <summary>
            A collection of <see cref="T:HP.DeviceAutomation.Sirius.WidgetAction" /> values.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.WidgetActionCollection.#ctor(System.Xml.Linq.XElement)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.WidgetActionCollection" /> class.
            </summary>
      <param name="actionsXml">The actions XML.</param>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.WidgetCollection">
      <summary>
            A collection of <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> objects.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.WidgetCollection.#ctor(System.Xml.Linq.XElement)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.WidgetCollection" /> class.
            </summary>
      <param name="screenInfoXml">The screen info XML.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.WidgetCollection.Find(System.String)">
      <summary>
            Finds the <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with the specified ID.
            </summary>
      <param name="widgetId">The widget ID.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with the specified ID.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="widgetId" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">No widget with the specified ID was found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.WidgetCollection.FindByValue(System.String)">
      <summary>
            Gets the first <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> that has a value matching the specified value.
            </summary>
      <param name="value">The value to look for.</param>
      <returns>The first <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with the specified value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">No widget with the specified value was found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.WidgetCollection.FindByValue(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Gets the first <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> that has a value matching the specified value
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="value">The value to look for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>The first <see cref="T:HP.DeviceAutomation.Sirius.Widget" /> with a value matching the specified value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.Sirius.ElementNotFoundException">No widget with the specified value was found.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.WidgetType">
      <summary>
            Represents the type of a Sirius widget.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.Unknown">
      <summary>
            Unknown widget type.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.Widget">
      <summary>
            Generic widget type.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.Button">
      <summary>
            A button.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.SingleLineEditBox">
      <summary>
            A single line edit box.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.MultiLineEditBox">
      <summary>
            A multi line edit box.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.StaticText">
      <summary>
            A static text display.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.Icon">
      <summary>
            An icon.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.SlideBar">
      <summary>
            A slide bar.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.CheckBox">
      <summary>
            A check box.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.RadioButton">
      <summary>
            A radio button.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.BackgroundImage">
      <summary>
            A background image.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.Status">
      <summary>
            A status.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.Dashboard">
      <summary>
            A dashboard.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.IPEntry">
      <summary>
            An IP entry widget.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.Popup">
      <summary>
            A pop-up.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.FrameItem">
      <summary>
            A frame item.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.SegmentedButton">
      <summary>
            A segmented button.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.DialVkb">
      <summary>
            A dial VKB.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.S12Vkb">
      <summary>
            An S12 VKB.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.VkbButton">
      <summary>
            A VKB button.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.FooterButton">
      <summary>
            A footer button.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.GroupView">
      <summary>
            A group view.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.Shortcut">
      <summary>
            A shortcut.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.TextView">
      <summary>
            A text view.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.RectItem">
      <summary>
            A rect item.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.AlertDialog">
      <summary>
            An alert dialog.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.ApplicationHeader">
      <summary>
            An application header.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.ApplicationFooter">
      <summary>
            An application footer.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.Toolbar">
      <summary>
            A toolbar.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.MixedTextView">
      <summary>
            A mixed text view.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.MessageView">
      <summary>
            A message view.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.List">
      <summary>
            A list.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.Table">
      <summary>
            A table.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.Footer">
      <summary>
            A footer.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.Header">
      <summary>
            A header.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.SpinBox">
      <summary>
            A spin box.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.Keyboard">
      <summary>
            A keyboard.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.Keypad">
      <summary>
            A keypad.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.MediaPlayer">
      <summary>
            A media player.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.Animation">
      <summary>
            An animation.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.Crop">
      <summary>
            A crop.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.Grid">
      <summary>
            A grid.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.InkLevel">
      <summary>
            An ink level.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.Menu">
      <summary>
            A menu.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Sirius.WidgetType.Preview">
      <summary>
            A preview.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.WidgetValuesDictionary">
      <summary>
            A set of named values for a <see cref="T:HP.DeviceAutomation.Sirius.Widget" />.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.WidgetValuesDictionary.#ctor(System.Xml.Linq.XElement)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.WidgetValuesDictionary" /> class.
            </summary>
      <param name="valuesXml">The values XML.</param>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.Rest.LedmClientBase">
      <summary>
            Base class for an LEDM REST client.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.LedmClientBase.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.Rest.LedmClientBase" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.LedmClientBase.#ctor(System.Net.IPAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.Rest.LedmClientBase" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.LedmClientBase.LedmGet(System.String)">
      <summary>
            Executes an LEDM GET request for the specified path.
            </summary>
      <param name="path">The path.</param>
      <returns>The result of the LEDM request.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.LedmClientBase.LedmGet(System.String,System.TimeSpan)">
      <summary>
            Executes an LEDM GET request for the specified path.
            </summary>
      <param name="path">The path.</param>
      <param name="timeout">The amount of time to wait for the request to complete.</param>
      <returns>The result of the LEDM request.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.LedmClientBase.LedmPut(System.String,System.Xml.Linq.XElement)">
      <summary>
            Executes an LEDM PUT request for the specified path.
            </summary>
      <param name="path">The path.</param>
      <param name="payload">The payload to send.  May be null.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.LedmClientBase.LedmPost(System.String,System.Xml.Linq.XElement)">
      <summary>
            Executes an LEDM POST request for the specified path.
            </summary>
      <param name="path">The path.</param>
      <param name="payload">The payload to send.  May be null.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.LedmClientBase.LedmGetStream(System.String)">
      <summary>
            Executes an LEDM GET request for the specified path.
            </summary>
      <param name="path">The path.</param>
      <returns>A <see cref="T:System.IO.Stream" /> containing the result of the LEDM request.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.Sirius.Rest.LedmClientBase.Address">
      <summary>
            Gets the address of the device this LEDM client will connect to.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.Rest.ProductActionsClient">
      <summary>
            Client class for the Product Actions LEDM endpoint.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.ProductActionsClient.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.Rest.ProductActionsClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.ProductActionsClient.#ctor(System.Net.IPAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.Rest.ProductActionsClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.ProductActionsClient.Reboot">
      <summary>
            Reboots the device.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.ProductActionsClient.ResetOnNextBoot">
      <summary>
            Invokes the Partial Reset feature.  (This method does not reboot the device.)
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.ProductActionsClient.FactoryDefaults">
      <summary>
            Invokes the Restore Factory Settings feature.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.Rest.SiriusTestClient">
      <summary>
            Client class for the Sirius TestService LEDM endpoint.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.SiriusTestClient.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.Rest.SiriusTestClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.SiriusTestClient.#ctor(System.Net.IPAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.Rest.SiriusTestClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.SiriusTestClient.GetConfigState">
      <summary>
            Gets the configuration state, i.e. whether or not the service is enabled.
            </summary>
      <returns>
        <c>true</c> if the service is enabled; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.SiriusTestClient.SetConfigState(System.Boolean)">
      <summary>
            Sets the configuration state, i.e. whether or not the service is enabled.
            </summary>
      <param name="enable">if set to <c>true</c> enable the service; otherwise, disable it.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.SiriusTestClient.GetManifest">
      <summary>
            Gets the TestService manifest.
            </summary>
      <returns>The TestService manifest.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.SiriusTestClient.GetCapabilities">
      <summary>
            Gets the TestService capabilities tree.
            </summary>
      <returns>The TestService capabilities tree.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.SiriusTestClient.ScreenCapture">
      <summary>
            Retrieves a <see cref="T:System.IO.Stream" /> containing a screen capture of the control panel.
            </summary>
      <returns>An image of the control panel in PNG format.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.SiriusTestClient.ScreenPress(System.Int32,System.Int32)">
      <summary>
            Simulates pressing the touchscreen at the specified coordinates.
            </summary>
      <param name="xCoordinate">The x-coordinate.</param>
      <param name="yCoordinate">The y-coordinate.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.SiriusTestClient.KeyPress(System.String)">
      <summary>
            Simulates pressing the specified key.
            </summary>
      <param name="key">The key to press.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.SiriusTestClient.GetScreenInfo">
      <summary>
            Gets an XML payload representing the contents of the control panel.
            </summary>
      <returns>A screen info XML payload.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.SiriusTestClient.GetScreenInfoV2">
      <summary>
            Gets an XML payload representing the contents of the control panel.
            </summary>
      <returns>A screen info XML payload.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.SiriusTestClient.PerformAction(System.String,System.String)">
      <summary>
            Performs the specified action on the specified widget.
            </summary>
      <param name="widgetId">The widget ID.</param>
      <param name="action">The action to perform.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.SiriusTestClient.PerformAction(System.String,System.String,System.String)">
      <summary>
            Performs the specified action on the specified widget.
            </summary>
      <param name="widgetId">The widget ID.</param>
      <param name="action">The action to perform.</param>
      <param name="value">The value to include in the action payload.</param>
    </member>
    <member name="T:HP.DeviceAutomation.Sirius.Rest.UIConfigurationClient">
      <summary>
            Client class for the UI Configuration LEDM endpoint.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.UIConfigurationClient.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.Rest.UIConfigurationClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.UIConfigurationClient.#ctor(System.Net.IPAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Sirius.Rest.UIConfigurationClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.UIConfigurationClient.GetManifest">
      <summary>
            Gets the UI Configuration manifest.
            </summary>
      <returns>The UI Configuration manifest.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.UIConfigurationClient.GetCapabilities">
      <summary>
            Gets the UI Configuration capabilities tree.
            </summary>
      <returns>The UI Configuration capabilities tree.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Sirius.Rest.UIConfigurationClient.GetUIAttributes">
      <summary>
            Gets a dictionary of control panel UI attributes.
            </summary>
      <returns>The UI attributes.</returns>
    </member>
    <member name="T:HP.DeviceAutomation.S900.ConnectedModule">
      <summary>
            Represents a module that makes up an <see cref="T:HP.DeviceAutomation.S900.S900Device" /> configuration.
            This could be the main MFP module or any of its peripherals.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.S900.ConnectedModule.#ctor(System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.S900.ConnectedModule" /> class.
            </summary>
      <param name="deviceIndex">The device's index for this module.</param>
      <param name="name">The name.</param>
    </member>
    <member name="M:HP.DeviceAutomation.S900.ConnectedModule.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this <see cref="T:HP.DeviceAutomation.S900.ConnectedModule" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this <see cref="T:HP.DeviceAutomation.S900.ConnectedModule" />.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.S900.ConnectedModule.DeviceIndex">
      <summary>
            Gets the device's index for this module.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.S900.ConnectedModule.Name">
      <summary>
            Gets the name of this module.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.S900.ConnectedModuleCollection">
      <summary>
            A collection of <see cref="T:HP.DeviceAutomation.S900.ConnectedModule" /> objects.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.S900.ConnectedModuleCollection.#ctor(System.Collections.Generic.IList{HP.DeviceAutomation.S900.ConnectedModule})">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.S900.ConnectedModuleCollection" /> class.
            </summary>
      <param name="connectedModules">The list of connected modules.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connectedModules" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.S900.ConnectedModuleCollection.Find(System.String)">
      <summary>
            Gets the first <see cref="T:HP.DeviceAutomation.S900.ConnectedModule" /> with the specified name.
            </summary>
      <param name="name">The connected module name.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.S900.ConnectedModule" /> with the specified name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.S900.ConnectedModuleNotFoundException">No module with the specified name was found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.S900.ConnectedModuleCollection.Find(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Gets the first <see cref="T:HP.DeviceAutomation.S900.ConnectedModule" /> that has a name matching the specified name.
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="name">The connected module name.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.S900.ConnectedModule" /> with the specified name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.S900.ConnectedModuleNotFoundException">No module with a matching name was found.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.S900.ConnectedModuleManager">
      <summary>
            Manages retrieval of connected modules from an <see cref="T:HP.DeviceAutomation.S900.S900Device" />.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.S900.ConnectedModuleManager.#ctor(HP.DeviceAutomation.Snmp)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.S900.ConnectedModuleManager" /> class.
            </summary>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
    </member>
    <member name="M:HP.DeviceAutomation.S900.ConnectedModuleManager.RefreshModules">
      <summary>
            Refreshes the connected module information from the device.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.S900.ConnectedModuleManager.ConnectedModules">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.S900.ConnectedModuleCollection" /> representing the modules connected to the device.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.S900.ConnectedModuleNotFoundException">
      <summary>
            Exception thrown when a <see cref="T:HP.DeviceAutomation.S900.ConnectedModuleCollection" /> does not contain the specified module.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.S900.ConnectedModuleNotFoundException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.S900.ConnectedModuleNotFoundException" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.S900.ConnectedModuleNotFoundException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.S900.ConnectedModuleNotFoundException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:HP.DeviceAutomation.S900.ConnectedModuleNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.S900.ConnectedModuleNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.S900.ConnectedModuleNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.S900.ConnectedModuleNotFoundException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:HP.DeviceAutomation.S900.S900Device">
      <summary>
            Represents a device running S900 firmware.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.S900.S900Device.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.S900.S900Device" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.S900.S900Device.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.S900.S900Device" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.S900.S900Device.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.S900.S900Device" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.S900.S900Device.#ctor(System.Net.IPAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.S900.S900Device" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.S900.S900Device.#ctor(HP.DeviceAutomation.DeviceConstructionParameterCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.S900.S900Device" /> class
            with the specified <see cref="T:HP.DeviceAutomation.DeviceConstructionParameterCollection" />.
            </summary>
      <param name="parameters">The device construction parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.S900.S900Device.GetDeviceInfo">
      <summary>
            Gets an <see cref="T:HP.DeviceAutomation.S900.S900DeviceInfo" /> object containing information about the device.
            </summary>
      <returns>An <see cref="T:HP.DeviceAutomation.S900.S900DeviceInfo" /> object.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.S900.S900Device.GetDeviceStatus">
      <summary>
            Gets the current operational state of the device.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.DeviceStatus" /> representing the state of the device.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.S900.S900Device.GetPrinterStatus">
      <summary>
            Gets the current printer status of the device.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.PrinterStatus" /> representing the state of the device.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.S900.S900Device.RefreshConnectedModules">
      <summary>
            Refreshes the list of connected modules attached to this <see cref="T:HP.DeviceAutomation.S900.S900Device" />.
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.S900.S900Device.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.S900.S900Device.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:HP.DeviceAutomation.S900.S900Device.Address">
      <summary>
            Gets the network address of the device.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.S900.S900Device.AdminPassword">
      <summary>
            Gets the admin password that will be used for communication with the device.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.S900.S900Device.FirmwareType">
      <summary>
            Gets the type of firmware running on the device.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.S900.S900Device.Snmp">
      <summary>
            Gets the SNMP communication interface for this <see cref="T:HP.DeviceAutomation.S900.S900Device" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.S900.S900Device.ConnectedModules">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.S900.ConnectedModuleCollection" /> representing the modules connected to the device.
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.S900.S900DeviceFactory">
      <summary>
            Implementation of <see cref="T:HP.DeviceAutomation.IDeviceFactory" /> for S900 devices.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.S900.S900DeviceFactory.Create(HP.DeviceAutomation.DeviceConstructionParameterCollection)">
      <summary>
            Creates an <see cref="T:HP.DeviceAutomation.IDevice" /> object using the specified construction parameters.
            </summary>
      <param name="parameters">The device construction parameters.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.IDevice" /> object for the device constructed from the specified parameters.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.S900.S900DeviceInfo">
      <summary>
            Contains information about an <see cref="T:HP.DeviceAutomation.S900.S900Device" />.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.S900.S900DeviceInfo.#ctor">
      <summary>
            Prevents a default instance of the <see cref="T:HP.DeviceAutomation.S900.S900DeviceInfo" /> class from being created.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.S900.S900DeviceInfo.Retrieve(HP.DeviceAutomation.Snmp)">
      <summary>
            Constructs an <see cref="T:HP.DeviceAutomation.S900.S900DeviceInfo" /> object using the specified <see cref="T:HP.DeviceAutomation.Snmp" /> communication interface.
            </summary>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.S900.S900DeviceInfo" /> object.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.S900.S900DeviceInfo.ModelName">
      <summary>
            Gets the device model name, if available; null otherwise.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.S900.S900DeviceInfo.SerialNumber">
      <summary>
            Gets the device serial number, if available; null otherwise.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.S900.S900DeviceInfo.FirmwareRevision">
      <summary>
            Gets the revision (version) of the device firmware, if available; null otherwise.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.ButtonNameAttribute">
      <summary>
            Marks a <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixHardKey" /> or <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixSoftKey" /> with
            the corresponding button name string.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.ButtonNameAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.ButtonNameAttribute" /> class.
            </summary>
      <param name="buttonName">The button name.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.ButtonNameAttribute.GetButtonName(System.Enum)">
      <summary>
            Gets the button name stored in the <see cref="T:HP.DeviceAutomation.Phoenix.ButtonNameAttribute" /> of the specified value,
            or null if no such attribute exists.
            </summary>
      <param name="value">The <see cref="T:System.Enum" /> value.</param>
      <returns>The button name stored in the <see cref="T:HP.DeviceAutomation.Phoenix.ButtonNameAttribute" /> of the specified value.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.ButtonNameAttribute.ButtonName">
      <summary>
            Gets the button name string.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.LedState">
      <summary>
            Represents the state of an LED on a Phoenix control panel.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.LedState.#ctor(System.Xml.Linq.XElement)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.LedState" /> class.
            </summary>
      <param name="ledStateXml">The LED state XML.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.LedState.Id">
      <summary>
            Gets the ID of the LED.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.LedState.State">
      <summary>
            Gets the state of the LED.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.LedState.BlinkRate">
      <summary>
            Gets the blink rate of the LED.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.LedStateDictionary">
      <summary>
            A dictionary of LEDs and their states.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.LedStateDictionary.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.LedStateDictionary" /> class.
            </summary>
      <param name="ledStatusXml">The LED status XML.</param>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService">
      <summary>
            Helper class for Phoenix devices that wraps Remote Control Panel capability.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.#ctor(HP.DeviceAutomation.DeviceNetworkAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService" /> class.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.IsDisplayReady">
      <summary>
            Determines whether the display is ready.
            </summary>
      <returns>
        <c>true</c> if the display is ready; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.GetLedStates">
      <summary>
            Gets the state of the LEDs on the control panel.
            </summary>
      <returns>An <see cref="T:HP.DeviceAutomation.Phoenix.LedStateDictionary" /> representing the state of the control panel LEDs.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.GetPhysicalButtons">
      <summary>
            Gets the available physical buttons.
            </summary>
      <returns>The names of all available physical buttons.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.GetVirtualButtons">
      <summary>
            Gets the available virtual buttons.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.Phoenix.VirtualButtonCollection" /> representing the virtual buttons.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.GetDisplayedStrings">
      <summary>
            Gets the strings displayed on the control panel.
            </summary>
      <returns>A collection of strings displayed on the control panel.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.GetSelectedListItem">
      <summary>
            Gets the selected list item.
            </summary>
      <returns>The text of the item that is currently selected.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.Press(System.String)">
      <summary>
            Presses the virtual button with the specified name.
            </summary>
      <param name="buttonName">The name of the button to press.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException">
            The virtual button specified by <paramref name="buttonName" /> could not be found on the control panel.
            <para>or</para>
            The virtual button could not be pressed.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.PressKey(HP.DeviceAutomation.Phoenix.PhoenixHardKey)">
      <summary>
            Presses the specified hard key.
            </summary>
      <param name="key">The <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixHardKey" /> to press.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException">
            The specified hard key is not valid for this device.
            <para>or</para>
            The hard key could not be pressed.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.PressKey(HP.DeviceAutomation.Phoenix.PhoenixSoftKey)">
      <summary>
            Presses the specified soft key.
            </summary>
      <param name="key">The <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixSoftKey" /> to press.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException">
            The specified soft key is not valid for this device.
            <para>or</para>
            The soft key could not be pressed.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.PressScreen(HP.DeviceAutomation.Coordinate)">
      <summary>
            Presses the touchscreen at the specified <see cref="T:HP.DeviceAutomation.Coordinate" />.
            </summary>
      <param name="coordinate">The coordinate to press.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.SelectListItem(System.String)">
      <summary>
            Selects the list item with the specified name, scrolling as necessary.
            </summary>
      <param name="itemName">The name of the list item to select.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException">
            The list item specified by <paramref name="itemName" /> could not be found on the control panel.
            <para>or</para>
            The list item could not be selected.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.SelectListItemByText(System.String)">
      <summary>
            Selects the list item with the specified text, scrolling as necessary.
            </summary>
      <param name="itemText">The text of the list item to select.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException">
            No list item with the specified text could be found on the control panel.
            <para>or</para>
            The list item could not be selected.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.SelectItem(System.String)">
      <summary>
            Selects the item with the specified name, scrolling as necessary.
            </summary>
      <param name="itemName">The name of the item to select.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException">
            The item specified by <paramref name="itemName" /> could not be found on the control panel.
            <para>or</para>
            The item could not be selected.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.SelectItemByText(System.String)">
      <summary>
            Selects the item with the specified text, scrolling as necessary.
            </summary>
      <param name="itemText">The text of the item to select.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException">
            No item with the specified text could be found on the control panel.
            <para>or</para>
            The item could not be selected.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.ScrollLeft(System.Int32)">
      <summary>
            Scrolls left the specified number of pixels.
            </summary>
      <param name="pixels">The number of pixels to scroll.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.ScrollRight(System.Int32)">
      <summary>
            Scrolls right the specified number of pixels.
            </summary>
      <param name="pixels">The number of pixels to scroll.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.ScrollUp(System.Int32)">
      <summary>
            Scrolls up the specified number of pixels.
            </summary>
      <param name="pixels">The number of pixels to scroll.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.ScrollDown(System.Int32)">
      <summary>
            Scrolls down the specified number of pixels.
            </summary>
      <param name="pixels">The number of pixels to scroll.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.TypeOnVirtualKeyboard(System.String)">
      <summary>
            Types the specified text on a 2- or 3-panel virtual keyboard displayed on the control panel.
            </summary>
      <param name="text">The text to type.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="text" /> contains a character that could not be entered on the keyboard.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.TypeOnTwoPanelKeyboard(System.String)">
      <summary>
            Types the specified text on a 2-panel virtual keyboard displayed on the control panel.
            </summary>
      <param name="text">The text to type.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="text" /> contains a character that could not be entered on the keyboard.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.TypeOnThreePanelKeyboard(System.String)">
      <summary>
            Types the specified text on a 3-panel virtual keyboard displayed on the control panel.
            </summary>
      <param name="text">The text to type.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="text" /> contains a character that could not be entered on the keyboard.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.WaitForVirtualButton(System.String,System.TimeSpan)">
      <summary>
            Waits for a virtual button with the specified name to exist.
            </summary>
      <param name="buttonName">The name of the virtual button to wait for.</param>
      <param name="waitTime">The amount of time to wait for the virtual button.</param>
      <returns>
        <c>true</c> if the virtual button is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.WaitForVirtualButton(System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for a virtual button with the specified name to exist using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="buttonName">The name of the virtual button to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the virtual button.</param>
      <returns>
        <c>true</c> if the virtual button is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.WaitForDisplayedText(System.String,System.TimeSpan)">
      <summary>
            Waits for the specified text to be displayed on the control panel.
            </summary>
      <param name="text">The text to wait for.</param>
      <param name="waitTime">The amount of time to wait for the text.</param>
      <returns>
        <c>true</c> if the specified text is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.WaitForDisplayedText(System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for text that matches the specified text to be displayed on the control panel.
            </summary>
      <param name="text">The text to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the text.</param>
      <returns>
        <c>true</c> if text matching the specified text is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.ScreenCapture">
      <summary>
            Retrieves an <see cref="T:System.Drawing.Image" /> containing a screen capture of the control panel.
            </summary>
      <returns>An image of the control panel in PNG format.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.GetDisplayInfo">
      <summary>
            Gets the display information.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoResponse" /> containing the display information.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixControlPanelService.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.PhoenixDevice">
      <summary>
            Represents a device running Phoenix firmware.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixDevice.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixDevice.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixDevice.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixDevice.#ctor(System.Net.IPAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixDevice.#ctor(HP.DeviceAutomation.DeviceConstructionParameterCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixDevice" /> class
            with the specified <see cref="T:HP.DeviceAutomation.DeviceConstructionParameterCollection" />.
            </summary>
      <param name="parameters">The device construction parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixDevice.GetDeviceInfo">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixDeviceInfo" /> object containing information about the device.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixDeviceInfo" /> object.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixDevice.GetDeviceStatus">
      <summary>
            Gets the current operational state of the device.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.DeviceStatus" /> representing the state of the device.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixDevice.GetPrinterStatus">
      <summary>
            Gets the current printer status of the device.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.PrinterStatus" /> representing the state of the device.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixDevice.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixDevice.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.PhoenixDevice.Address">
      <summary>
            Gets the network address of the device.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.PhoenixDevice.AdminPassword">
      <summary>
            Gets the admin password that will be used for communication with the device.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.PhoenixDevice.FirmwareType">
      <summary>
            Gets the type of firmware running on the device.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.PhoenixDevice.Snmp">
      <summary>
            Gets the SNMP communication interface for this <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixDevice" />.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.PhoenixDeviceFactory">
      <summary>
            Implementation of <see cref="T:HP.DeviceAutomation.IDeviceFactory" /> for Phoenix devices.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixDeviceFactory.Create(HP.DeviceAutomation.DeviceConstructionParameterCollection)">
      <summary>
            Creates an <see cref="T:HP.DeviceAutomation.IDevice" /> object using the specified construction parameters.
            </summary>
      <param name="parameters">The device construction parameters.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.IDevice" /> object for the device constructed from the specified parameters.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.PhoenixDeviceInfo">
      <summary>
            Contains information about a <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixDevice" />.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixDeviceInfo.#ctor">
      <summary>
            Prevents a default instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixDeviceInfo" /> class from being created.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixDeviceInfo.Retrieve(HP.DeviceAutomation.Snmp)">
      <summary>
            Constructs a <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixDeviceInfo" /> object using the specified <see cref="T:HP.DeviceAutomation.Snmp" /> communication interface.
            </summary>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixDeviceInfo" /> object.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.PhoenixDeviceInfo.ModelName">
      <summary>
            Gets the device model name, if available; null otherwise.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.PhoenixDeviceInfo.ModelNumber">
      <summary>
            Gets the device model number, if available; null otherwise.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.PhoenixDeviceInfo.SerialNumber">
      <summary>
            Gets the device serial number, if available; null otherwise.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.PhoenixDeviceInfo.FirmwareDateCode">
      <summary>
            Gets the date code of the device firmware, if available; null otherwise.
            (The format of the date code is firmware-specific and is not necessarily parseable.)
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.PhoenixDeviceInfo.DeviceId">
      <summary>
            Gets the HP MIB device identifier.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.PhoenixHardKey">
      <summary>
            Represents a hard key on a Phoenix device.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Phoenix.PhoenixHardKey.Ok">
      <summary>
            The OK key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Phoenix.PhoenixHardKey.Back">
      <summary>
            The Back key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Phoenix.PhoenixHardKey.Cancel">
      <summary>
            The Cancel key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Phoenix.PhoenixHardKey.Left">
      <summary>
            The left arrow key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Phoenix.PhoenixHardKey.Right">
      <summary>
            The right arrow key.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException">
      <summary>
            Exception thrown when a Phoenix UI method call is invalid for the device's current state.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel">
      <summary>
            Control panel for a Phoenix device with a Magic Frame control panel.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.#ctor(HP.DeviceAutomation.DeviceNetworkAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel" /> class.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.IsDisplayReady">
      <summary>
            Determines whether the display is ready.
            </summary>
      <returns>
        <c>true</c> if the display is ready; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.GetLedStates">
      <summary>
            Gets the state of the LEDs on the control panel.
            </summary>
      <returns>An <see cref="T:HP.DeviceAutomation.Phoenix.LedStateDictionary" /> representing the state of the control panel LEDs.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.GetVirtualButtons">
      <summary>
            Gets the available virtual buttons.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.Phoenix.VirtualButtonCollection" /> representing the virtual buttons.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.GetDisplayedStrings">
      <summary>
            Gets the strings displayed on the control panel.
            </summary>
      <returns>A collection of strings displayed on the control panel.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.GetSelectedListItem">
      <summary>
            Gets the selected list item.
            </summary>
      <returns>The text of the item that is currently selected.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.Press(System.String)">
      <summary>
            Presses the virtual button with the specified name.
            </summary>
      <param name="buttonName">The name of the button to press.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException">
            The virtual button specified by <paramref name="buttonName" /> could not be found on the control panel.
            <para>or</para>
            The virtual button could not be pressed.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.PressKey(HP.DeviceAutomation.Phoenix.PhoenixSoftKey)">
      <summary>
            Presses the specified soft key.
            </summary>
      <param name="key">The <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixSoftKey" /> to press.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException">
            The specified soft key is not valid for this device.
            <para>or</para>
            The soft key could not be pressed.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.PressScreen(System.Int32,System.Int32)">
      <summary>
            Presses the touchscreen at the specified coordinates.
            </summary>
      <param name="x">The x-coordinate.</param>
      <param name="y">The y-coordinate.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.PressScreen(HP.DeviceAutomation.Coordinate)">
      <summary>
            Presses the touchscreen at the specified <see cref="T:HP.DeviceAutomation.Coordinate" />.
            </summary>
      <param name="coordinate">The coordinate to press.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.TypeOnVirtualKeyboard(System.String)">
      <summary>
            Types the specified text on a virtual keyboard displayed on the control panel.
            </summary>
      <param name="text">The text to type.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="text" /> contains a character that could not be entered on the keyboard.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.SelectListItem(System.String)">
      <summary>
            Selects the list item with the specified name, scrolling as necessary.
            </summary>
      <param name="itemName">The name of the list item to select.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException">
            The list item specified by <paramref name="itemName" /> could not be found on the control panel.
            <para>or</para>
            The list item could not be selected.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.SelectListItemByText(System.String)">
      <summary>
            Selects the list item with the specified text, scrolling as necessary.
            </summary>
      <param name="itemText">The text of the list item to select.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException">
            No list item with the specified text could be found on the control panel.
            <para>or</para>
            The list item could not be selected.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.WaitForVirtualButton(System.String)">
      <summary>
            Waits for a virtual button with the specified name to exist.
            Uses <see cref="P:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="buttonName">The name of the virtual button to wait for.</param>
      <returns>
        <c>true</c> if the virtual button is found within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.WaitForVirtualButton(System.String,System.TimeSpan)">
      <summary>
            Waits for a virtual button with the specified name to exist.
            </summary>
      <param name="buttonName">The name of the virtual button to wait for.</param>
      <param name="waitTime">The amount of time to wait for the virtual button.</param>
      <returns>
        <c>true</c> if the virtual button is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.WaitForVirtualButton(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Waits for a virtual button with the specified name to exist using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Uses <see cref="P:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="buttonName">The name of the virtual button to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>
        <c>true</c> if the virtual button is found within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.WaitForVirtualButton(System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for a virtual button with the specified name to exist using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="buttonName">The name of the virtual button to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the virtual button.</param>
      <returns>
        <c>true</c> if the virtual button is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.WaitForDisplayedText(System.String)">
      <summary>
            Waits for the specified text to be displayed on the control panel.
            Uses <see cref="P:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="text">The text to wait for.</param>
      <returns>
        <c>true</c> if the specified text is found within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.WaitForDisplayedText(System.String,System.TimeSpan)">
      <summary>
            Waits for the specified text to be displayed on the control panel.
            </summary>
      <param name="text">The text to wait for.</param>
      <param name="waitTime">The amount of time to wait for the text.</param>
      <returns>
        <c>true</c> if the specified text is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.WaitForDisplayedText(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Waits for text that matches the specified text to be displayed on the control panel.
            Uses <see cref="P:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="text">The text to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>
        <c>true</c> if text matching the specified text is found within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.WaitForDisplayedText(System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for text that matches the specified text to be displayed on the control panel.
            </summary>
      <param name="text">The text to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the text.</param>
      <returns>
        <c>true</c> if text matching the specified text is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.ScreenCapture">
      <summary>
            Retrieves an <see cref="T:System.Drawing.Image" /> containing a screen capture of the control panel.
            </summary>
      <returns>An image of the control panel in PNG format.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameControlPanel.DefaultWaitTime">
      <summary>
            Gets or sets the default wait time for control panel operations that require waiting for a new state.
            The default value is 30 seconds.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameDevice">
      <summary>
            Represents a device running Phoenix firmware with a Magic Frame control panel.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameDevice.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameDevice.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameDevice.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameDevice.#ctor(System.Net.IPAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameDevice.#ctor(HP.DeviceAutomation.DeviceConstructionParameterCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameDevice" /> class
            with the specified <see cref="T:HP.DeviceAutomation.DeviceConstructionParameterCollection" />.
            </summary>
      <param name="parameters">The device construction parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameDevice.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameDevice.ControlPanel">
      <summary>
            Gets the control panel for this <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixMagicFrameDevice" />.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel">
      <summary>
            Control panel for a Phoenix device with a Nova/Supernova control panel.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.#ctor(HP.DeviceAutomation.DeviceNetworkAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel" /> class.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.IsDisplayReady">
      <summary>
            Determines whether the display is ready.
            </summary>
      <returns>
        <c>true</c> if the display is ready; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.GetVirtualButtons">
      <summary>
            Gets the available virtual buttons.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.Phoenix.VirtualButtonCollection" /> representing the virtual buttons.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.GetDisplayedStrings">
      <summary>
            Gets the strings displayed on the control panel.
            </summary>
      <returns>A collection of strings displayed on the control panel.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.GetSelectedListItem">
      <summary>
            Gets the selected list item.
            </summary>
      <returns>The text of the item that is currently selected.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.Press(System.String)">
      <summary>
            Presses the virtual button with the specified name.
            </summary>
      <param name="buttonName">The name of the button to press.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException">
            The virtual button specified by <paramref name="buttonName" /> could not be found on the control panel.
            <para>or</para>
            The virtual button could not be pressed.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.PressKey(HP.DeviceAutomation.Phoenix.PhoenixSoftKey)">
      <summary>
            Presses the specified soft key.
            </summary>
      <param name="key">The <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixSoftKey" /> to press.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException">
            The specified soft key is not valid for this device.
            <para>or</para>
            The soft key could not be pressed.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.PressScreen(System.Int32,System.Int32)">
      <summary>
            Presses the touchscreen at the specified coordinates.
            </summary>
      <param name="x">The x-coordinate.</param>
      <param name="y">The y-coordinate.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.PressScreen(HP.DeviceAutomation.Coordinate)">
      <summary>
            Presses the touchscreen at the specified <see cref="T:HP.DeviceAutomation.Coordinate" />.
            </summary>
      <param name="coordinate">The coordinate to press.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.TypeOnVirtualKeyboard(System.String)">
      <summary>
            Types the specified text on a virtual keyboard displayed on the control panel.
            </summary>
      <param name="text">The text to type.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="text" /> contains a character that could not be entered on the keyboard.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.SelectListItem(System.String)">
      <summary>
            Selects the list item with the specified name, scrolling as necessary.
            </summary>
      <param name="itemName">The name of the list item to select.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException">
            The list item specified by <paramref name="itemName" /> could not be found on the control panel.
            <para>or</para>
            The list item could not be selected.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.SelectListItemByText(System.String)">
      <summary>
            Selects the list item with the specified text, scrolling as necessary.
            </summary>
      <param name="itemText">The text of the list item to select.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException">
            No list item with the specified text could be found on the control panel.
            <para>or</para>
            The list item could not be selected.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.ScrollLeft(System.Int32)">
      <summary>
            Scrolls left the specified number of pixels.
            </summary>
      <param name="pixels">The number of pixels to scroll.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.ScrollRight(System.Int32)">
      <summary>
            Scrolls right the specified number of pixels.
            </summary>
      <param name="pixels">The number of pixels to scroll.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.ScrollUp(System.Int32)">
      <summary>
            Scrolls up the specified number of pixels.
            </summary>
      <param name="pixels">The number of pixels to scroll.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.ScrollDown(System.Int32)">
      <summary>
            Scrolls down the specified number of pixels.
            </summary>
      <param name="pixels">The number of pixels to scroll.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.WaitForVirtualButton(System.String)">
      <summary>
            Waits for a virtual button with the specified name to exist.
            Uses <see cref="P:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="buttonName">The name of the virtual button to wait for.</param>
      <returns>
        <c>true</c> if the virtual button is found within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.WaitForVirtualButton(System.String,System.TimeSpan)">
      <summary>
            Waits for a virtual button with the specified name to exist.
            </summary>
      <param name="buttonName">The name of the virtual button to wait for.</param>
      <param name="waitTime">The amount of time to wait for the virtual button.</param>
      <returns>
        <c>true</c> if the virtual button is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.WaitForVirtualButton(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Waits for a virtual button with the specified name to exist using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Uses <see cref="P:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="buttonName">The name of the virtual button to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>
        <c>true</c> if the virtual button is found within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.WaitForVirtualButton(System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for a virtual button with the specified name to exist using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="buttonName">The name of the virtual button to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the virtual button.</param>
      <returns>
        <c>true</c> if the virtual button is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.WaitForDisplayedText(System.String)">
      <summary>
            Waits for the specified text to be displayed on the control panel.
            Uses <see cref="P:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="text">The text to wait for.</param>
      <returns>
        <c>true</c> if the specified text is found within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.WaitForDisplayedText(System.String,System.TimeSpan)">
      <summary>
            Waits for the specified text to be displayed on the control panel.
            </summary>
      <param name="text">The text to wait for.</param>
      <param name="waitTime">The amount of time to wait for the text.</param>
      <returns>
        <c>true</c> if the specified text is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.WaitForDisplayedText(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Waits for text that matches the specified text to be displayed on the control panel.
            Uses <see cref="P:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="text">The text to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>
        <c>true</c> if text matching the specified text is found within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.WaitForDisplayedText(System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for text that matches the specified text to be displayed on the control panel.
            </summary>
      <param name="text">The text to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the text.</param>
      <returns>
        <c>true</c> if text matching the specified text is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.ScreenCapture">
      <summary>
            Retrieves an <see cref="T:System.Drawing.Image" /> containing a screen capture of the control panel.
            </summary>
      <returns>An image of the control panel in PNG format.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.PhoenixNovaControlPanel.DefaultWaitTime">
      <summary>
            Gets or sets the default wait time for control panel operations that require waiting for a new state.
            The default value is 30 seconds.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.PhoenixNovaDevice">
      <summary>
            Represents a device running Phoenix firmware with a Nova/Supernova control panel.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaDevice.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixNovaDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaDevice.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixNovaDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaDevice.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixNovaDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaDevice.#ctor(System.Net.IPAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixNovaDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaDevice.#ctor(HP.DeviceAutomation.DeviceConstructionParameterCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixNovaDevice" /> class
            with the specified <see cref="T:HP.DeviceAutomation.DeviceConstructionParameterCollection" />.
            </summary>
      <param name="parameters">The device construction parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixNovaDevice.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.PhoenixNovaDevice.ControlPanel">
      <summary>
            Gets the control panel for this <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixNovaDevice" />.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.PhoenixSoftKey">
      <summary>
            Represents a soft key on a Phoenix device.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Phoenix.PhoenixSoftKey.Home">
      <summary>
            The Home key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Phoenix.PhoenixSoftKey.Help">
      <summary>
            The Help key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Phoenix.PhoenixSoftKey.Back">
      <summary>
            The Back key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Phoenix.PhoenixSoftKey.Cancel">
      <summary>
            The Cancel key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Phoenix.PhoenixSoftKey.Left">
      <summary>
            The left arrow key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Phoenix.PhoenixSoftKey.Right">
      <summary>
            The right arrow key.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.PhoenixTwoLineControlPanel">
      <summary>
            Control panel for a Phoenix device with a two-line display.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixTwoLineControlPanel.#ctor(HP.DeviceAutomation.DeviceNetworkAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixTwoLineControlPanel" /> class.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixTwoLineControlPanel.GetLedStates">
      <summary>
            Gets the state of the LEDs on the control panel.
            </summary>
      <returns>An <see cref="T:HP.DeviceAutomation.Phoenix.LedStateDictionary" /> representing the state of the control panel LEDs.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixTwoLineControlPanel.GetPhysicalButtons">
      <summary>
            Gets the available physical buttons.
            </summary>
      <returns>The names of all available physical buttons.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixTwoLineControlPanel.GetDisplayedStrings">
      <summary>
            Gets the strings displayed on the control panel.
            </summary>
      <returns>A collection of strings displayed on the control panel.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixTwoLineControlPanel.PressKey(HP.DeviceAutomation.Phoenix.PhoenixHardKey)">
      <summary>
            Presses the specified hard key.
            </summary>
      <param name="key">The <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixHardKey" /> to press.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException">
            The specified hard key is not valid for this device.
            <para>or</para>
            The hard key could not be pressed.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixTwoLineControlPanel.SelectItem(System.String)">
      <summary>
            Selects the item with the specified name, scrolling as necessary.
            </summary>
      <param name="itemName">The name of the item to select.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException">
            The item specified by <paramref name="itemName" /> could not be found on the control panel.
            <para>or</para>
            The item could not be selected.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixTwoLineControlPanel.SelectItemByText(System.String)">
      <summary>
            Selects the item with the specified text, scrolling as necessary.
            </summary>
      <param name="itemText">The text of the item to select.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Phoenix.PhoenixInvalidOperationException">
            No item with the specified text could be found on the control panel.
            <para>or</para>
            The item could not be selected.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixTwoLineControlPanel.WaitForDisplayedText(System.String)">
      <summary>
            Waits for the specified text to be displayed on the control panel.
            Uses <see cref="P:HP.DeviceAutomation.Phoenix.PhoenixTwoLineControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="text">The text to wait for.</param>
      <returns>
        <c>true</c> if the specified text is found within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixTwoLineControlPanel.WaitForDisplayedText(System.String,System.TimeSpan)">
      <summary>
            Waits for the specified text to be displayed on the control panel.
            </summary>
      <param name="text">The text to wait for.</param>
      <param name="waitTime">The amount of time to wait for the text.</param>
      <returns>
        <c>true</c> if the specified text is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixTwoLineControlPanel.WaitForDisplayedText(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Waits for text that matches the specified text to be displayed on the control panel.
            Uses <see cref="P:HP.DeviceAutomation.Phoenix.PhoenixTwoLineControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="text">The text to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>
        <c>true</c> if text matching the specified text is found within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixTwoLineControlPanel.WaitForDisplayedText(System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for text that matches the specified text to be displayed on the control panel.
            </summary>
      <param name="text">The text to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the text.</param>
      <returns>
        <c>true</c> if text matching the specified text is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.PhoenixTwoLineControlPanel.DefaultWaitTime">
      <summary>
            Gets or sets the default wait time for control panel operations that require waiting for a new state.
            The default value is 30 seconds.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.PhoenixTwoLineDevice">
      <summary>
            Represents a device running Phoenix firmware with a two-line display.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixTwoLineDevice.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixTwoLineDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixTwoLineDevice.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixTwoLineDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixTwoLineDevice.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixTwoLineDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixTwoLineDevice.#ctor(System.Net.IPAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixTwoLineDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixTwoLineDevice.#ctor(HP.DeviceAutomation.DeviceConstructionParameterCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixTwoLineDevice" /> class
            with the specified <see cref="T:HP.DeviceAutomation.DeviceConstructionParameterCollection" />.
            </summary>
      <param name="parameters">The device construction parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.PhoenixTwoLineDevice.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.PhoenixTwoLineDevice.ControlPanel">
      <summary>
            Gets the control panel for this <see cref="T:HP.DeviceAutomation.Phoenix.PhoenixTwoLineDevice" />.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.VirtualButton">
      <summary>
            Represents a virtual button on a Phoenix control panel.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.VirtualButton.#ctor(System.Xml.Linq.XElement)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.VirtualButton" /> class.
            </summary>
      <param name="virtualButtonXml">The virtual button XML.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.VirtualButton.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this <see cref="T:HP.DeviceAutomation.Phoenix.VirtualButton" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this <see cref="T:HP.DeviceAutomation.Phoenix.VirtualButton" />.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.VirtualButton.Name">
      <summary>
            Gets the name of the button.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.VirtualButton.Text">
      <summary>
            Gets the text displayed on the button.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.VirtualButton.State">
      <summary>
            Gets the state of the button.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.VirtualButton.IsSelected">
      <summary>
            Gets a value indicating whether the button is selected.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.VirtualButton.Location">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.Coordinate" /> structure representing the location of the upper-left corner of the button.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.VirtualButton.Size">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.Size" /> structure containing the width and height of the button.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.VirtualButtonCollection">
      <summary>
            A collection of <see cref="T:HP.DeviceAutomation.Phoenix.VirtualButton" /> objects.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.VirtualButtonCollection.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.VirtualButtonCollection" /> class.
            </summary>
      <param name="virtualButtonsXml">The virtual buttons XML.</param>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableAnimationsRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetAvailableAnimations(HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableAnimationsRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableAnimationsRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableAnimationsRequest" /> class.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableAnimationsResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetAvailableAnimations(HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableAnimationsRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableAnimationsResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableAnimationsResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableAnimationsResponse.#ctor(System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableAnimationsResponse" /> class.
            </summary>
      <param name="numberOfAnimations">The number of animations.</param>
      <param name="animations">The XML string describing the available animations.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableAnimationsResponse.NumberOfAnimations">
      <summary>
            Gets the number of animations.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableAnimationsResponse.Animations">
      <summary>
            Gets an XML string describing the available animations.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableIconsRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetAvailableIcons(HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableIconsRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableIconsRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableIconsRequest" /> class.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableIconsResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetAvailableIcons(HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableIconsRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableIconsResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableIconsResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableIconsResponse.#ctor(System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableIconsResponse" /> class.
            </summary>
      <param name="numberOfIcons">The number of icons.</param>
      <param name="icons">The XML string describing the available icons.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableIconsResponse.NumberOfIcons">
      <summary>
            Gets the number of icons.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableIconsResponse.Icons">
      <summary>
            Gets an XML string describing the available icons.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenuBarsRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetAvailableMenuBars(HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenuBarsRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenuBarsRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenuBarsRequest" /> class.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenuBarsResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetAvailableMenuBars(HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenuBarsRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenuBarsResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenuBarsResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenuBarsResponse.#ctor(System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenuBarsResponse" /> class.
            </summary>
      <param name="numberOfMenuBars">The number of menu bars.</param>
      <param name="menuBars">The XML string describing the available menu bars.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenuBarsResponse.NumberOfMenuBars">
      <summary>
            Gets the number of menu bars.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenuBarsResponse.MenuBars">
      <summary>
            Gets an XML string describing the available menu bars.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenusRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetAvailableMenus(HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenusRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenusRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenusRequest" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenusRequest.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenusRequest" /> class.
            </summary>
      <param name="menuBar">The menu bar.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenusRequest.MenuBar">
      <summary>
            Gets the menu bar.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenusResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetAvailableMenus(HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenusRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenusResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenusResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenusResponse.#ctor(System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenusResponse" /> class.
            </summary>
      <param name="numberOfMenus">The number of menus.</param>
      <param name="menus">The XML string describing the available menus.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenusResponse.NumberOfMenus">
      <summary>
            Gets the number of menus.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenusResponse.Menus">
      <summary>
            Gets an XML string describing the available menus.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailablePhysicalButtonsRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetAvailablePhysicalButtons(HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailablePhysicalButtonsRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailablePhysicalButtonsRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailablePhysicalButtonsRequest" /> class.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailablePhysicalButtonsResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetAvailablePhysicalButtons(HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailablePhysicalButtonsRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailablePhysicalButtonsResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailablePhysicalButtonsResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailablePhysicalButtonsResponse.#ctor(System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailablePhysicalButtonsResponse" /> class.
            </summary>
      <param name="numberOfButtons">The number of buttons.</param>
      <param name="buttons">The XML string describing the available physical buttons.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailablePhysicalButtonsResponse.NumberOfButtons">
      <summary>
            Gets the number of buttons.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailablePhysicalButtonsResponse.Buttons">
      <summary>
            Gets an XML string describing the available physical buttons.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableVirtualButtonsRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetAvailableVirtualButtons(HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableVirtualButtonsRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableVirtualButtonsRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableVirtualButtonsRequest" /> class.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableVirtualButtonsResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetAvailableVirtualButtons(HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableVirtualButtonsRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableVirtualButtonsResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableVirtualButtonsResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableVirtualButtonsResponse.#ctor(System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableVirtualButtonsResponse" /> class.
            </summary>
      <param name="numberOfButtons">The number of buttons.</param>
      <param name="buttons">The XML string describing the available virtual buttons.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableVirtualButtonsResponse.NumberOfButtons">
      <summary>
            Gets the number of buttons.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableVirtualButtonsResponse.Buttons">
      <summary>
            Gets an XML string describing the available virtual buttons.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableWidgetsRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetAvailableWidgets(HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableWidgetsRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableWidgetsRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableWidgetsRequest" /> class.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableWidgetsResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetAvailableWidgets(HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableWidgetsRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableWidgetsResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableWidgetsResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableWidgetsResponse.#ctor(System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableWidgetsResponse" /> class.
            </summary>
      <param name="numberOfWidgets">The number of widgets.</param>
      <param name="widgets">The XML string describing the available widgets.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableWidgetsResponse.NumberOfWidgets">
      <summary>
            Gets the number of widgets.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableWidgetsResponse.Widgets">
      <summary>
            Gets an XML string describing the available widgets.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetDisplayInfo(HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoRequest" /> class.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetDisplayInfo(HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoResponse.#ctor(HP.DeviceAutomation.Phoenix.RemoteControlPanel.LedmEnabled,HP.DeviceAutomation.Phoenix.RemoteControlPanel.LedmEnabled,HP.DeviceAutomation.Phoenix.RemoteControlPanel.LedmEnabled,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,HP.DeviceAutomation.Phoenix.RemoteControlPanel.LedmEnabled,HP.DeviceAutomation.Phoenix.RemoteControlPanel.LedmEnabled)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoResponse" /> class.
            </summary>
      <param name="graphical">Indicates whether this is a graphical display.</param>
      <param name="color">Indicates whether this is a color display.</param>
      <param name="ascii">Indicates whether this display is ASCII.</param>
      <param name="screenMemorySize">The screen memory size.</param>
      <param name="verticalResolution">The vertical resolution.</param>
      <param name="horizontalResolution">The horizontal resolution.</param>
      <param name="numberOfLines">The number of lines.</param>
      <param name="numberOfChars">The number of chars.</param>
      <param name="bpp">The bits per pixel.</param>
      <param name="numberOfScreens">The number of screens.</param>
      <param name="touchEnabled">Indicates whether this display is touch-enabled.</param>
      <param name="gestureEnabled">Indicates whether this display is gesture-enabled.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoResponse.Graphical">
      <summary>
            Gets a value indicating whether the device display is graphical.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoResponse.Color">
      <summary>
            Gets a value indicating whether the device display is color.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoResponse.Ascii">
      <summary>
            Gets a value indicating whether the device display is ASCII.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoResponse.ScreenMemorySize">
      <summary>
            Gets the screen memory size.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoResponse.VerticalResolution">
      <summary>
            Gets the vertical resolution.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoResponse.HorizontalResolution">
      <summary>
            Gets the horizontal resolution.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoResponse.NumberOfLines">
      <summary>
            Gets the number of lines.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoResponse.NumberOfChars">
      <summary>
            Gets the number of chars.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoResponse.Bpp">
      <summary>
            Gets the bits per pixel.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoResponse.NumberOfScreens">
      <summary>
            Gets the number of screens.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoResponse.TouchEnabled">
      <summary>
            Gets a value indicating whether the display is touch-enabled.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoResponse.GestureEnabled">
      <summary>
            Gets a value indicating whether the display is gesture-enabled.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel">
      <summary>
            Service contract for the Phoenix Remote Control Panel service.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.PressButton(HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressButtonRequest)">
      <summary>
            Presses the button with the specified name.
            </summary>
      <param name="request">A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressButtonRequest" /> specifying the button to press.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressButtonResponse" /> object containing the result of the operation.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.PressVirtualButton(HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressVirtualButtonRequest)">
      <summary>
            Presses the virtual button with the specified name.
            </summary>
      <param name="request">A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressVirtualButtonRequest" /> specifying the virtual button to press.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressButtonResponse" /> object containing the result of the operation.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.SelectMenu(HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuRequest)">
      <summary>
            Selects the specified menu from the specified menu bar.
            </summary>
      <param name="request">A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuRequest" /> specifying the menu to select.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuResponse" /> object containing the result of the operation.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.SelectMenuItem(HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuItemRequest)">
      <summary>
            Selects the specified menu item.
            </summary>
      <param name="request">A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuItemRequest" /> specifying the menu item to select.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuResponse" /> object containing the result of the operation.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.SelectListItem(HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectListItemRequest)">
      <summary>
            Selects the specified list item.
            </summary>
      <param name="request">A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectListItemRequest" /> specifying the list item to select.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuResponse" /> object containing the result of the operation.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.MoveScreen(HP.DeviceAutomation.Phoenix.RemoteControlPanel.MoveScreenRequest)">
      <summary>
            Moves the screen the specified amount.
            </summary>
      <param name="request">A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.MoveScreenRequest" /> specifying the amount to move the screen.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.MoveScreenResponse" /> object containing the result of the operation.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.TouchScreen(HP.DeviceAutomation.Phoenix.RemoteControlPanel.TouchScreenRequest)">
      <summary>
            Touches the screen at the specified coordinates.
            </summary>
      <param name="request">A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.TouchScreenRequest" /> specifying the coordinates to press.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.TouchScreenResponse" /> object containing the result of the operation.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetScreenStatus(HP.DeviceAutomation.Phoenix.RemoteControlPanel.ScreenStatusRequest)">
      <summary>
            Gets the screen status.
            </summary>
      <param name="request">A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.ScreenStatusRequest" /> object.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.ScreenStatusResponse" /> object containing the screen status.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetLedStatus(HP.DeviceAutomation.Phoenix.RemoteControlPanel.LedStatusRequest)">
      <summary>
            Gets the LED status.
            </summary>
      <param name="request">An <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LedStatusRequest" /> object.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LedStatusResponse" /> object containing the LED status.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetAvailablePhysicalButtons(HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailablePhysicalButtonsRequest)">
      <summary>
            Gets the available physical buttons.
            </summary>
      <param name="request">An <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailablePhysicalButtonsRequest" /> object.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailablePhysicalButtonsResponse" /> containing the physical button information.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetAvailableVirtualButtons(HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableVirtualButtonsRequest)">
      <summary>
            Gets the available virtual buttons.
            </summary>
      <param name="request">An <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableVirtualButtonsRequest" /> object.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableVirtualButtonsResponse" /> containing the virtual button information.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetAvailableMenuBars(HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenuBarsRequest)">
      <summary>
            Gets the available menu bars.
            </summary>
      <param name="request">An <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenuBarsRequest" /> object.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenuBarsResponse" /> containing the menu bar information.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetAvailableMenus(HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenusRequest)">
      <summary>
            Gets the available menus for the specified menu bar.
            </summary>
      <param name="request">An <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenusRequest" /> specifying the menu bar.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableMenusResponse" /> containing the menu information.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetAvailableIcons(HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableIconsRequest)">
      <summary>
            Gets the available icons.
            </summary>
      <param name="request">An <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableIconsRequest" /> object.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableIconsResponse" /> containing the icon information.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetAvailableWidgets(HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableWidgetsRequest)">
      <summary>
            Gets the available widgets.
            </summary>
      <param name="request">An <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableWidgetsRequest" /> object.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableWidgetsResponse" /> containing the widget information.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetAvailableAnimations(HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableAnimationsRequest)">
      <summary>
            Gets the available animations.
            </summary>
      <param name="request">An <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableAnimationsRequest" /> object.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.AvailableAnimationsResponse" /> containing the animation information.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetLocalizedStrings(HP.DeviceAutomation.Phoenix.RemoteControlPanel.LocalizedStringsRequest)">
      <summary>
            Gets the localized strings displayed on the screen.
            </summary>
      <param name="request">A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LocalizedStringsRequest" /> object.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LocalizedStringsResponse" /> containing the localized string information.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetDisplayInfo(HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoRequest)">
      <summary>
            Gets information about the control panel display.
            </summary>
      <param name="request">A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoRequest" /> object.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoResponse" /> containing the display information.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.RetrieveImage(HP.DeviceAutomation.Phoenix.RemoteControlPanel.RetrieveImageRequest)">
      <summary>
            Retrieves an image of the control panel.
            </summary>
      <param name="request">A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RetrieveImageRequest" /> object.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RetrieveImageResponse" /> containing the image data.</returns>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LedmEnabled">
      <summary>
            LEDM enumeration for enabled/disabled features.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LedmEnabled.True">
      <summary>
            True
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LedmEnabled.False">
      <summary>
            False
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LedStatusRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetLedStatus(HP.DeviceAutomation.Phoenix.RemoteControlPanel.LedStatusRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LedStatusRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LedStatusRequest" /> class.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LedStatusResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetLedStatus(HP.DeviceAutomation.Phoenix.RemoteControlPanel.LedStatusRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LedStatusResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LedStatusResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LedStatusResponse.#ctor(System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LedStatusResponse" /> class.
            </summary>
      <param name="numberOfLeds">The number of LEDs.</param>
      <param name="ledInfo">The LED information.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LedStatusResponse.NumberOfLeds">
      <summary>
            Gets the number of LEDs.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LedStatusResponse.LedInfo">
      <summary>
            Gets an XML string describing the LED status.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LocalizedStringsRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetLocalizedStrings(HP.DeviceAutomation.Phoenix.RemoteControlPanel.LocalizedStringsRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LocalizedStringsRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LocalizedStringsRequest" /> class.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LocalizedStringsResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetLocalizedStrings(HP.DeviceAutomation.Phoenix.RemoteControlPanel.LocalizedStringsRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LocalizedStringsResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LocalizedStringsResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LocalizedStringsResponse.#ctor(System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LocalizedStringsResponse" /> class.
            </summary>
      <param name="numberOfStrings">The number of strings.</param>
      <param name="strings">The XML string describing the available localized strings.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LocalizedStringsResponse.NumberOfStrings">
      <summary>
            Gets the number of strings.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.LocalizedStringsResponse.Strings">
      <summary>
            Gets an XML string describing the available localized strings.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.MoveScreenRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.MoveScreen(HP.DeviceAutomation.Phoenix.RemoteControlPanel.MoveScreenRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.MoveScreenRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.MoveScreenRequest" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.MoveScreenRequest.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.MoveScreenRequest" /> class.
            </summary>
      <param name="distanceX">The X distance.</param>
      <param name="distanceY">The Y distance.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.MoveScreenRequest.DistanceX">
      <summary>
            Gets the X distance.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.MoveScreenRequest.DistanceY">
      <summary>
            Gets the Y distance.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.MoveScreenResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.MoveScreen(HP.DeviceAutomation.Phoenix.RemoteControlPanel.MoveScreenRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.MoveScreenResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.MoveScreenResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.MoveScreenResponse.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.MoveScreenResponse" /> class.
            </summary>
      <param name="distanceX">The X distance.</param>
      <param name="distanceY">The Y distance.</param>
      <param name="result">The result.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.MoveScreenResponse.DistanceX">
      <summary>
            Gets the X distance.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.MoveScreenResponse.DistanceY">
      <summary>
            Gets the Y distance.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.MoveScreenResponse.Result">
      <summary>
            Gets the result.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressButtonRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.PressButton(HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressButtonRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressButtonRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressButtonRequest" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressButtonRequest.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressButtonRequest" /> class.
            </summary>
      <param name="buttonName">The button name.</param>
      <param name="delay">The delay.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressButtonRequest.ButtonName">
      <summary>
            Gets the button name.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressButtonRequest.Delay">
      <summary>
            Gets the delay.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressButtonResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.PressButton(HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressButtonRequest)" /> and <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.PressVirtualButton(HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressVirtualButtonRequest)" /> methods.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressButtonResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressButtonResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressButtonResponse.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressButtonResponse" /> class.
            </summary>
      <param name="buttonName">The button name.</param>
      <param name="delay">The delay.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressButtonResponse.ButtonName">
      <summary>
            Gets the button name.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressButtonResponse.Delay">
      <summary>
            Gets the delay.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressVirtualButtonRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.PressVirtualButton(HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressVirtualButtonRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressVirtualButtonRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressVirtualButtonRequest" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressVirtualButtonRequest.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressVirtualButtonRequest" /> class.
            </summary>
      <param name="buttonName">The button name.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.PressVirtualButtonRequest.ButtonName">
      <summary>
            Gets the button name.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient">
      <summary>
            Client class for the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel" /> service.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.#ctor(System.String,System.ServiceModel.BasicHttpBinding)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="binding">The binding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.
            <para>or</para><paramref name="binding" /> is null.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.#ctor(System.Net.IPAddress,System.ServiceModel.BasicHttpBinding)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="binding">The binding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.
            <para>or</para><paramref name="binding" /> is null.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.PressButton(System.String,System.Int32)">
      <summary>
            Presses the button with the specified name.
            </summary>
      <param name="buttonName">The name of the button to press.</param>
      <param name="delay">The delay.</param>
      <returns>The name of the button that was pressed.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.PressVirtualButton(System.String)">
      <summary>
            Presses the virtual button with the specified name.
            </summary>
      <param name="buttonName">The name of the virtual button to press.</param>
      <returns>The name of the button that was pressed.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.SelectMenu(System.String,System.String)">
      <summary>
            Selects the specified menu from the specified menu bar.
            </summary>
      <param name="menuBar">The menu bar.</param>
      <param name="menu">The menu to select.</param>
      <returns>A value indicating the result of the operation.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.SelectMenuItem(System.String,System.String,System.String,System.String)">
      <summary>
            Selects the specified menu item.
            </summary>
      <param name="menuBar">The menu bar.</param>
      <param name="parentMenu">The parent menu.</param>
      <param name="menu">The menu.</param>
      <param name="menuItem">The menu item to select.</param>
      <returns>A value indicating the result of the operation.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.SelectListItem(System.String,System.String)">
      <summary>
            Selects the specified list item.
            </summary>
      <param name="itemName">The item name.</param>
      <param name="itemText">The item text.</param>
      <returns>A value indicating the result of the operation.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.MoveScreen(System.Int32,System.Int32)">
      <summary>
            Moves the screen the specified amount.
            </summary>
      <param name="distanceX">The X distance.</param>
      <param name="distanceY">The Y distance.</param>
      <returns>A value indicating the result of the operation.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.TouchScreen(System.Int32,System.Int32)">
      <summary>
            Touches the screen at the specified coordinates.
            </summary>
      <param name="x">The x-coordinate.</param>
      <param name="y">The y-coordinate.</param>
      <returns>A value indicating the result of the operation.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.GetScreenStatus">
      <summary>
            Gets the screen status.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.ScreenStatusResponse" /> object containing the screen status.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.GetLedStatus">
      <summary>
            Gets the LED status.
            </summary>
      <returns>An XML string describing the LED status.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.GetAvailablePhysicalButtons">
      <summary>
            Gets the available physical buttons.
            </summary>
      <returns>An XML string describing the available physical buttons.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.GetAvailableVirtualButtons">
      <summary>
            Gets the available virtual buttons.
            </summary>
      <returns>An XML string describing the available virtual buttons.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.GetAvailableMenuBars">
      <summary>
            Gets the available menu bars.
            </summary>
      <returns>An XML string describing the available menu bars.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.GetAvailableMenus(System.String)">
      <summary>
            Gets the available menus for the specified menu bar.
            </summary>
      <param name="menuBar">The menu bar.</param>
      <returns>An XML string describing the available menus.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.GetAvailableIcons">
      <summary>
            Gets the available icons.
            </summary>
      <returns>An XML string describing the available icons.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.GetAvailableWidgets">
      <summary>
            Gets the available widgets.
            </summary>
      <returns>An XML string describing the available widgets.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.GetAvailableAnimations">
      <summary>
            Gets the available animations.
            </summary>
      <returns>An XML string describing the available animations.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.GetLocalizedStrings">
      <summary>
            Gets the localized strings displayed on the screen.
            </summary>
      <returns>An XML string describing the available localized strings.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.GetDisplayInfo">
      <summary>
            Gets information about the control panel display.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.DisplayInfoResponse" /> containing the display information.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.RetrieveImage">
      <summary>
            Retrieves an image of the control panel.
            </summary>
      <returns>The image as a byte array.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient.Address">
      <summary>
            Gets the address of the device this <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RemoteControlPanelClient" /> will connect to.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RetrieveImageRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.RetrieveImage(HP.DeviceAutomation.Phoenix.RemoteControlPanel.RetrieveImageRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RetrieveImageRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RetrieveImageRequest" /> class.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RetrieveImageResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.RetrieveImage(HP.DeviceAutomation.Phoenix.RemoteControlPanel.RetrieveImageRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RetrieveImageResponse.GetImageBytes">
      <summary>
            Gets the image as a byte array.
            </summary>
      <returns>The image as a byte array.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RetrieveImageResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RetrieveImageResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RetrieveImageResponse.#ctor(System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.RetrieveImageResponse" /> class.
            </summary>
      <param name="image">The image as a byte array.</param>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.ScreenStatusRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetScreenStatus(HP.DeviceAutomation.Phoenix.RemoteControlPanel.ScreenStatusRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.ScreenStatusRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.ScreenStatusRequest" /> class.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.ScreenStatusResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.GetScreenStatus(HP.DeviceAutomation.Phoenix.RemoteControlPanel.ScreenStatusRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.ScreenStatusResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.ScreenStatusResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.ScreenStatusResponse.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.ScreenStatusResponse" /> class.
            </summary>
      <param name="deviceReady">The device ready status.</param>
      <param name="displayReady">The display ready status.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.ScreenStatusResponse.DeviceReady">
      <summary>
            Gets the device ready status.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.ScreenStatusResponse.DisplayReady">
      <summary>
            Gets the display ready status.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectListItemRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.SelectListItem(HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectListItemRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectListItemRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectListItemRequest" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectListItemRequest.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectListItemRequest" /> class.
            </summary>
      <param name="itemName">The item name.</param>
      <param name="itemText">The item text.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectListItemRequest.ItemName">
      <summary>
            Gets the item name.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectListItemRequest.ItemText">
      <summary>
            Gets the item text.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuItemRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.SelectMenuItem(HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuItemRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuItemRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuItemRequest" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuItemRequest.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuItemRequest" /> class.
            </summary>
      <param name="menuBar">The menu bar.</param>
      <param name="parentMenu">The parent menu.</param>
      <param name="menu">The menu.</param>
      <param name="menuItem">The menu item.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuItemRequest.MenuBar">
      <summary>
            Gets the menu bar.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuItemRequest.ParentMenu">
      <summary>
            Gets the parent menu.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuItemRequest.Menu">
      <summary>
            Gets the menu.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuItemRequest.MenuItem">
      <summary>
            Gets the menu item.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.SelectMenu(HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuRequest" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuRequest.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuRequest" /> class.
            </summary>
      <param name="menuBar">The menu bar.</param>
      <param name="menu">The menu.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuRequest.MenuBar">
      <summary>
            Gets the menu bar.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuRequest.Menu">
      <summary>
            Gets the menu.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.SelectMenu(HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuRequest)" />,
            <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.SelectMenuItem(HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuItemRequest)" />, and <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.SelectListItem(HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectListItemRequest)" /> methods.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuResponse.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuResponse" /> class.
            </summary>
      <param name="selected">The selected.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.SelectMenuResponse.Selected">
      <summary>
            Gets the selected.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.TouchScreenRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.TouchScreen(HP.DeviceAutomation.Phoenix.RemoteControlPanel.TouchScreenRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.TouchScreenRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.TouchScreenRequest" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.TouchScreenRequest.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.TouchScreenRequest" /> class.
            </summary>
      <param name="x">The x-coordinate.</param>
      <param name="y">The y-coordinate.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.TouchScreenRequest.X">
      <summary>
            Gets the x-coordinate.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.TouchScreenRequest.Y">
      <summary>
            Gets the y-coordinate.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.TouchScreenResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.IRemoteControlPanel.TouchScreen(HP.DeviceAutomation.Phoenix.RemoteControlPanel.TouchScreenRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.TouchScreenResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.TouchScreenResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Phoenix.RemoteControlPanel.TouchScreenResponse.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Phoenix.RemoteControlPanel.TouchScreenResponse" /> class.
            </summary>
      <param name="x">The x-coordinate.</param>
      <param name="y">The y-coordinate.</param>
      <param name="result">The result.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.TouchScreenResponse.X">
      <summary>
            Gets the x-coordinate.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.TouchScreenResponse.Y">
      <summary>
            Gets the y-coordinate.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Phoenix.RemoteControlPanel.TouchScreenResponse.Result">
      <summary>
            Gets the result.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Oz.IOzBrowser">
      <summary>
            Service contract for the browser functionality in the OXPd Test service.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.IOzBrowser.GetBrowserState">
      <summary>
            Gets the state of the topmost embedded browser.
            </summary>
      <returns>The state of the topmost embedded browser.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.IOzBrowser.ExecuteJavaScript(System.String,System.String)">
      <summary>
            Executes an arbitrary segment of JavaScript in the embedded browser.
            </summary>
      <param name="uiContextId">The UI context identifier.  (Passing in null executes the JavaScript in the topmost browser.)</param>
      <param name="script">The JavaScript to execute.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
    </member>
    <member name="T:HP.DeviceAutomation.Oz.OzBrowserClient">
      <summary>
            Client class for the <see cref="T:HP.DeviceAutomation.Oz.IOzBrowser" /> service.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzBrowserClient.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.OzBrowserClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzBrowserClient.GetBrowserState">
      <summary>
            Gets the state of the topmost embedded browser.
            </summary>
      <returns>The state of the topmost embedded browser.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzBrowserClient.ExecuteJavaScript(System.String,System.String)">
      <summary>
            Executes an arbitrary segment of JavaScript in the embedded browser.
            </summary>
      <param name="uiContextId">The UI context identifier.  (Passing in null executes the JavaScript in the topmost browser.)</param>
      <param name="script">The JavaScript to execute.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.OzBrowserClient.Address">
      <summary>
            Gets the address of the device this <see cref="T:HP.DeviceAutomation.Oz.OzBrowserClient" /> will connect to.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Oz.OzBrowserService">
      <summary>
            Helper class for Oz devices that wraps browser capability.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzBrowserService.#ctor(HP.DeviceAutomation.DeviceNetworkAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.OzBrowserService" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzBrowserService.ExecuteJavaScript(System.String,System.String)">
      <summary>
            Executes the specified JavaScript in the embedded browser using the specified UI context ID.
            </summary>
      <param name="uiContextId">The UI context identifier.  (Passing in null executes the JavaScript in the topmost browser.)</param>
      <param name="script">The JavaScript to execute.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzBrowserService.ExecuteJavaScript(System.String,System.String,System.TimeSpan)">
      <summary>
            Executes the specified JavaScript in the embedded browser using the specified UI context ID.
            Waits for the browser to be idle before executing the script and throws if the browser does not become idle within the specified time.
            </summary>
      <param name="uiContextId">The UI context identifier.  (Passing in null executes the JavaScript in the topmost browser.)</param>
      <param name="script">The JavaScript to execute.</param>
      <param name="browserIdleWaitTime">The amount of time to wait for the browser to be idle.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">
            The device browser did not reach an idle state within the specified <paramref name="browserIdleWaitTime" />.
            <para>or</para>
            The device service threw an exception.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Oz.OzControlPanelService">
      <summary>
            Helper class for Oz devices that wraps SNMP control panel capability.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.#ctor(HP.DeviceAutomation.Snmp)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.OzControlPanelService" /> class.
            </summary>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="snmp" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.ActiveScreenId">
      <summary>
            Gets the ID of the active (topmost) screen on the display.
            (If the window is a pop-up, its ID will be negative.)
            </summary>
      <returns>The active screen ID.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.GetWidgetCount">
      <summary>
            Gets the number of widgets displayed on the control panel.
            </summary>
      <returns>The number of widgets displayed on the control panel.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.GetWidgets">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.Oz.WidgetCollection" /> representing the widgets displayed on the control panel.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.Oz.WidgetCollection" /> representing the widgets displayed on the control panel.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.Press(System.Int32)">
      <summary>
            Presses the widget with the specified ID.
            </summary>
      <param name="id">The ID of the widget to press.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with the specified ID were found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetNotFoundException">No widget with the specified ID could be found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.Press(System.Int32[])">
      <summary>
            Presses the widget with one of the specified IDs.
            </summary>
      <param name="ids">The potential IDs of the widget to press.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ids" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with one of the specified IDs were found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetNotFoundException">No widget with one of the specified IDs could be found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.Press(System.String)">
      <summary>
            Presses the widget with the specified text.
            </summary>
      <param name="text">The widget text.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with the specified text were found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetNotFoundException">No widget with the specified text could be found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.Press(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Presses the widget with text that matches the specified text
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="text">The widget text.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with text matching the specified text were found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetNotFoundException">No widget with matching text could be found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.Press(System.String,System.String)">
      <summary>
            Presses the widget with the specified property value.
            </summary>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with the specified property value were found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetNotFoundException">No widget with the specified property value could be found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.Press(System.String,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Presses the widget with a property value that matches the specified value
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with a matching property value were found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetNotFoundException">No widget with a matching property value could be found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.Press(HP.DeviceAutomation.Oz.Widget)">
      <summary>
            Presses the specified widget.
            </summary>
      <param name="widget">The widget to press.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="widget" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.PressScreen(HP.DeviceAutomation.Coordinate)">
      <summary>
            Presses the touchscreen at the specified <see cref="T:HP.DeviceAutomation.Coordinate" />.
            </summary>
      <param name="coordinate">The coordinate to press.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.PressKey(HP.DeviceAutomation.Oz.OzHardKey)">
      <summary>
            Presses the specified hard key.
            </summary>
      <param name="key">The <see cref="T:HP.DeviceAutomation.Oz.OzHardKey" /> to press.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is equal to <see cref="F:HP.DeviceAutomation.Oz.OzHardKey.None" />.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.TypeOnVirtualKeyboard(System.String)">
      <summary>
            Types the specified text on a virtual keyboard displayed on the control panel.
            </summary>
      <param name="text">The text to type.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="text" /> contains a character that could not be entered on the keyboard.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The keyboard could not be found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.TypeOnNumericKeypad(System.String)">
      <summary>
            Types the specified text on a virtual numeric keypad displayed on the control panel.
            </summary>
      <param name="text">The text to type.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="text" /> contains a character that could not be entered on the keypad.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.ScrollToItem(System.String,System.String)">
      <summary>
            Scrolls to the widget with the specified property value.
            </summary>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified property value, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The scroll bar controls could not be identified.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with the specified property value were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.WaitForScreen(System.Int32,System.TimeSpan)">
      <summary>
            Waits for the specified screen to be the active (topmost) screen on the display.
            </summary>
      <param name="screenId">The screen ID to wait for.</param>
      <param name="waitTime">The amount of time to wait for the specified screen.</param>
      <returns>
        <c>true</c> if the specified screen becomes active within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.WaitForWidget(System.Int32,System.TimeSpan)">
      <summary>
            Waits for a widget with the specified ID to exist on the screen.
            </summary>
      <param name="id">The ID of the widget to wait for.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified ID, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with the specified ID were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.WaitForWidget(System.Collections.Generic.IEnumerable{System.Int32},System.TimeSpan)">
      <summary>
            Waits for a widget with one of the specified IDs to exist on the screen.
            </summary>
      <param name="ids">The potential IDs of the widget to wait for.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with one of the specified IDs, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ids" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with one of the specified IDs were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.WaitForWidget(System.String,System.TimeSpan)">
      <summary>
            Waits for a widget with the specified text to exist on the screen.
            </summary>
      <param name="text">The text of the widget to wait for.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified text, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with the specified text were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.WaitForWidget(System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for a widget with text that matches the specified text to exist on the screen.
            </summary>
      <param name="text">The text of the widget to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with matching text, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with text matching the specified text were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.WaitForWidget(System.String,System.String,System.TimeSpan)">
      <summary>
            Waits for a widget with the specified property value to exist on the screen.
            </summary>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified property value, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with the specified property value were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.WaitForWidget(System.String,System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for a widget with a property value that matches the specified value to exist on the screen.
            </summary>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with a matching property value, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with a matching property value were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.WaitForWidget(HP.DeviceAutomation.Oz.WidgetType,System.String,System.TimeSpan)">
      <summary>
            Waits for a widget of the specified type with the specified text to exist on the screen.
            </summary>
      <param name="type">The widget type.</param>
      <param name="text">The text of the widget to wait for.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with the specified text, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets of the specified type with the specified text were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.WaitForWidget(HP.DeviceAutomation.Oz.WidgetType,System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for a widget of the specified type with text that matches the specified text to exist on the screen.
            </summary>
      <param name="type">The widget type.</param>
      <param name="text">The text of the widget to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with matching text, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets of the specified type with text matching the specified text were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.WaitForWidget(HP.DeviceAutomation.Oz.WidgetType,System.String,System.String,System.TimeSpan)">
      <summary>
            Waits for a widget of the specified type with the specified property value to exist on the screen.
            </summary>
      <param name="type">The widget type.</param>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with the specified property value, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets of the specified type with the specified property value were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.WaitForWidget(HP.DeviceAutomation.Oz.WidgetType,System.String,System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for a widget of the specified type with a property value that matches the specified value to exist on the screen.
            </summary>
      <param name="type">The widget type.</param>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with a matching property value, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets of the specified type with a matching property value were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzControlPanelService.ScreenCapture">
      <summary>
            Retrieves an <see cref="T:System.Drawing.Image" /> containing a screen capture of the control panel.
            </summary>
      <returns>An image of the control panel in PNG format.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Oz.OzDevice">
      <summary>
            Represents a device running Oz firmware.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzDevice.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.OzDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzDevice.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.OzDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzDevice.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.OzDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzDevice.#ctor(System.Net.IPAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.OzDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzDevice.#ctor(HP.DeviceAutomation.DeviceConstructionParameterCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.OzDevice" /> class
            with the specified <see cref="T:HP.DeviceAutomation.DeviceConstructionParameterCollection" />.
            </summary>
      <param name="parameters">The device construction parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzDevice.GetDeviceInfo">
      <summary>
            Gets an <see cref="T:HP.DeviceAutomation.Oz.OzDeviceInfo" /> object containing information about the device.
            </summary>
      <returns>An <see cref="T:HP.DeviceAutomation.Oz.OzDeviceInfo" /> object.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzDevice.GetDeviceStatus">
      <summary>
            Gets the current operational state of the device.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.DeviceStatus" /> representing the state of the device.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzDevice.GetPrinterStatus">
      <summary>
            Gets the current printer status of the device.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.PrinterStatus" /> representing the state of the device.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzDevice.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzDevice.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.OzDevice.Address">
      <summary>
            Gets the network address of the device.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.OzDevice.AdminPassword">
      <summary>
            Gets the admin password that will be used for communication with the device.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.OzDevice.FirmwareType">
      <summary>
            Gets the type of firmware running on the device.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.OzDevice.Snmp">
      <summary>
            Gets the SNMP communication interface for this <see cref="T:HP.DeviceAutomation.Oz.OzDevice" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.OzDevice.PowerManagement">
      <summary>
            Gets the power management interface for this <see cref="T:HP.DeviceAutomation.Oz.OzDevice" />.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Oz.OzDeviceFactory">
      <summary>
            Implementation of <see cref="T:HP.DeviceAutomation.IDeviceFactory" /> for Oz devices.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzDeviceFactory.Create(HP.DeviceAutomation.DeviceConstructionParameterCollection)">
      <summary>
            Creates an <see cref="T:HP.DeviceAutomation.IDevice" /> object using the specified construction parameters.
            </summary>
      <param name="parameters">The device construction parameters.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.IDevice" /> object for the device constructed from the specified parameters.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Oz.OzDeviceInfo">
      <summary>
            Contains information about an <see cref="T:HP.DeviceAutomation.Oz.OzDevice" />.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzDeviceInfo.#ctor">
      <summary>
            Prevents a default instance of the <see cref="T:HP.DeviceAutomation.Oz.OzDeviceInfo" /> class from being created.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzDeviceInfo.Retrieve(HP.DeviceAutomation.Snmp)">
      <summary>
            Constructs an <see cref="T:HP.DeviceAutomation.Oz.OzDeviceInfo" /> object using the specified <see cref="T:HP.DeviceAutomation.Snmp" /> communication interface.
            </summary>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.Oz.OzDeviceInfo" /> object.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.OzDeviceInfo.ModelName">
      <summary>
            Gets the device model name, if available; null otherwise.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.OzDeviceInfo.ModelNumber">
      <summary>
            Gets the device model number, if available; null otherwise.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.OzDeviceInfo.SerialNumber">
      <summary>
            Gets the device serial number, if available; null otherwise.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.OzDeviceInfo.FirmwareRevision">
      <summary>
            Gets the revision (version) of the device firmware, if available; null otherwise.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.OzDeviceInfo.FirmwareDateCode">
      <summary>
            Gets the date code of the device firmware, if available; null otherwise.
            (The format of the date code is firmware-specific and is not necessarily parseable.)
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.OzDeviceInfo.DeviceId">
      <summary>
            Gets the HP MIB device identifier.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Oz.OzFourLineControlPanel">
      <summary>
            Control panel for an Oz device with a four-line display.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzFourLineControlPanel.#ctor(HP.DeviceAutomation.DeviceNetworkAddress,HP.DeviceAutomation.Snmp,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.OzFourLineControlPanel" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.
            <para>or</para><paramref name="snmp" /> is null.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzFourLineControlPanel.PressKey(HP.DeviceAutomation.Oz.OzHardKey)">
      <summary>
            Presses the specified hard key.
            </summary>
      <param name="key">The <see cref="T:HP.DeviceAutomation.Oz.OzHardKey" /> to press.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is equal to <see cref="F:HP.DeviceAutomation.Oz.OzHardKey.None" />.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzFourLineControlPanel.PressMenu">
      <summary>
            Presses the menu key.
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzFourLineControlPanel.PressSelect">
      <summary>
            Presses the select key.
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzFourLineControlPanel.PressUp">
      <summary>
            Presses the up arrow key.
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzFourLineControlPanel.PressDown">
      <summary>
            Presses the down arrow key.
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzFourLineControlPanel.PressBack">
      <summary>
            Presses the back key.
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzFourLineControlPanel.ScreenCapture">
      <summary>
            Retrieves an <see cref="T:System.Drawing.Image" /> containing a screen capture of the control panel.
            </summary>
      <returns>An image of the control panel in PNG format.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzFourLineControlPanel.ExecuteJavaScript(System.String)">
      <summary>
            Executes the specified JavaScript in the topmost embedded browser.
            </summary>
      <param name="script">The JavaScript to execute.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzFourLineControlPanel.ExecuteJavaScript(System.String,System.String)">
      <summary>
            Executes the specified JavaScript in the embedded browser using the specified UI context ID.
            </summary>
      <param name="uiContextId">The UI context identifier.  (Passing in null executes the JavaScript in the topmost browser.)</param>
      <param name="script">The JavaScript to execute.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzFourLineControlPanel.ExecuteJavaScript(System.String,System.TimeSpan)">
      <summary>
            Executes the specified JavaScript in the topmost embedded browser.
            Waits for the browser to be idle before executing the script and throws if the browser does not become idle within the specified time.
            </summary>
      <param name="script">The JavaScript to execute.</param>
      <param name="browserIdleWaitTime">The amount of time to wait for the browser to be idle.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">
            The device browser did not reach an idle state within the specified <paramref name="browserIdleWaitTime" />.
            <para>or</para>
            The device service threw an exception.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzFourLineControlPanel.ExecuteJavaScript(System.String,System.String,System.TimeSpan)">
      <summary>
            Executes the specified JavaScript in the embedded browser using the specified UI context ID.
            Waits for the browser to be idle before executing the script and throws if the browser does not become idle within the specified time.
            </summary>
      <param name="uiContextId">The UI context identifier.  (Passing in null executes the JavaScript in the topmost browser.)</param>
      <param name="script">The JavaScript to execute.</param>
      <param name="browserIdleWaitTime">The amount of time to wait for the browser to be idle.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">
            The device browser did not reach an idle state within the specified <paramref name="browserIdleWaitTime" />.
            <para>or</para>
            The device service threw an exception.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Oz.OzFourLineDevice">
      <summary>
            Represents a device running Oz firmware with a four-line display.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzFourLineDevice.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.OzFourLineDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzFourLineDevice.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.OzFourLineDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzFourLineDevice.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.OzFourLineDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzFourLineDevice.#ctor(System.Net.IPAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.OzFourLineDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzFourLineDevice.#ctor(HP.DeviceAutomation.DeviceConstructionParameterCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.OzFourLineDevice" /> class
            with the specified <see cref="T:HP.DeviceAutomation.DeviceConstructionParameterCollection" />.
            </summary>
      <param name="parameters">The device construction parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.OzFourLineDevice.ControlPanel">
      <summary>
            Gets the control panel for this <see cref="T:HP.DeviceAutomation.Oz.OzFourLineDevice" />.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Oz.OzHardKey">
      <summary>
            Represents a hard key on an Oz device.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.None">
      <summary>
            None
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.Start">
      <summary>
            Start
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.Cancel">
      <summary>
            Cancel
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.Reset">
      <summary>
            Reset
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.Clear">
      <summary>
            Clear
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.Select">
      <summary>
            Select
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.Return">
      <summary>
            Return
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.Down">
      <summary>
            Down
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.Up">
      <summary>
            Up
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.Menu">
      <summary>
            Menu
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.Status">
      <summary>
            Status
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.Sleep">
      <summary>
            Sleep
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.Pound">
      <summary>
            Pound (#)
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.Star">
      <summary>
            Star (*)
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.Number0">
      <summary>
            The number 0
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.Number1">
      <summary>
            The number 1
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.Number2">
      <summary>
            The number 2
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.Number3">
      <summary>
            The number 3
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.Number4">
      <summary>
            The number 4
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.Number5">
      <summary>
            The number 5
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.Number6">
      <summary>
            The number 6
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.Number7">
      <summary>
            The number 7
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.Number8">
      <summary>
            The number 8
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.OzHardKey.Number9">
      <summary>
            The number 9
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Oz.OzPowerManager">
      <summary>
            Provides access to settings and functionality related to power management.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzPowerManager.#ctor(HP.DeviceAutomation.Snmp)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.OzPowerManager" /> class.
            </summary>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="snmp" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzPowerManager.Wake">
      <summary>
            Wakes the device.
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzPowerManager.GetInactivityTimeout">
      <summary>
            Gets the device inactivity timeout.
            </summary>
      <returns>The device inactivity timeout.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzPowerManager.SetInactivityTimeout(System.TimeSpan)">
      <summary>
            Sets the device inactivity timeout.
            </summary>
      <param name="timeout">The inactivity timeout to set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is not in the allowable range for the device.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzPowerManager.Reboot">
      <summary>
            Reboots the device.  Equivalent to turning the device off and then on again.
            (This method does not wait for the device to return to a ready state.)
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzPowerManager.ResetToNvram">
      <summary>
            Resets the device to NVRAM, clearing all data and settings.
            (This method does not wait for the device to return to a ready state.)
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzPowerManager.ResetToFactoryDefaults">
      <summary>
            Performs power on initialization routines and changes all configurable settings back to factory defaults.
            Equivalent to a Cold Reset from the control panel.
            (This method does not wait for the device to return to a ready state.)
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Oz.OzWindjammerControlPanel">
      <summary>
            Control panel for an Oz device using a Windjammer presentation framework.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.#ctor(HP.DeviceAutomation.DeviceNetworkAddress,HP.DeviceAutomation.Snmp,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.OzWindjammerControlPanel" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.
            <para>or</para><paramref name="snmp" /> is null.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.ActiveScreenId">
      <summary>
            Gets the ID of the active (topmost) screen on the display.
            (If the window is a pop-up, its ID will be negative.)
            </summary>
      <returns>The active screen ID.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.GetWidgetCount">
      <summary>
            Gets the number of widgets displayed on the control panel.
            </summary>
      <returns>The number of widgets displayed on the control panel.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.GetWidgets">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.Oz.WidgetCollection" /> representing the widgets displayed on the control panel.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.Oz.WidgetCollection" /> representing the widgets displayed on the control panel.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.Press(System.Int32)">
      <summary>
            Presses the widget with the specified ID.
            </summary>
      <param name="id">The ID of the widget to press.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with the specified ID were found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetNotFoundException">No widget with the specified ID could be found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.Press(System.Int32[])">
      <summary>
            Presses the widget with one of the specified IDs.
            </summary>
      <param name="ids">The potential IDs of the widget to press.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ids" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with one of the specified IDs were found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetNotFoundException">No widget with one of the specified IDs could be found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.Press(System.String)">
      <summary>
            Presses the widget with the specified text.
            </summary>
      <param name="text">The widget text.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with the specified text were found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetNotFoundException">No widget with the specified text could be found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.Press(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Presses the widget with text that matches the specified text
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="text">The widget text.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with text matching the specified text were found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetNotFoundException">No widget with matching text could be found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.Press(System.String,System.String)">
      <summary>
            Presses the widget with the specified property value.
            </summary>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with the specified property value were found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetNotFoundException">No widget with the specified property value could be found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.Press(System.String,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Presses the widget with a property value that matches the specified value
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with a matching property value were found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetNotFoundException">No widget with a matching property value could be found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.Press(HP.DeviceAutomation.Oz.Widget)">
      <summary>
            Presses the specified widget.
            </summary>
      <param name="widget">The widget to press.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="widget" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.PressKey(HP.DeviceAutomation.Oz.OzHardKey)">
      <summary>
            Presses the specified hard key.
            </summary>
      <param name="key">The <see cref="T:HP.DeviceAutomation.Oz.OzHardKey" /> to press.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is equal to <see cref="F:HP.DeviceAutomation.Oz.OzHardKey.None" />.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.PressScreen(System.Int32,System.Int32)">
      <summary>
            Presses the touchscreen at the specified coordinates.
            </summary>
      <param name="x">The x-coordinate.</param>
      <param name="y">The y-coordinate.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.PressScreen(HP.DeviceAutomation.Coordinate)">
      <summary>
            Presses the touchscreen at the specified <see cref="T:HP.DeviceAutomation.Coordinate" />.
            </summary>
      <param name="coordinate">The coordinate to press.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.TypeOnVirtualKeyboard(System.String)">
      <summary>
            Types the specified text on a virtual keyboard displayed on the control panel.
            </summary>
      <param name="text">The text to type.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="text" /> contains a character that could not be entered on the keyboard.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.TypeOnNumericKeypad(System.String)">
      <summary>
            Types the specified text on a virtual numeric keypad displayed on the control panel.
            </summary>
      <param name="text">The text to type.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="text" /> contains a character that could not be entered on the keypad.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.ScrollToItem(System.String,System.String)">
      <summary>
            Scrolls to the widget with the specified property value.
            </summary>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified property value, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The scroll bar controls could not be identified.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with the specified property value were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.WaitForScreen(System.Int32)">
      <summary>
            Waits for the specified screen to be the active (topmost) screen on the display.
            Uses <see cref="P:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="screenId">The screen ID to wait for.</param>
      <returns>
        <c>true</c> if the specified screen becomes active within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.WaitForScreen(System.Int32,System.TimeSpan)">
      <summary>
            Waits for the specified screen to be the active (topmost) screen on the display.
            </summary>
      <param name="screenId">The screen ID to wait for.</param>
      <param name="waitTime">The amount of time to wait for the specified screen.</param>
      <returns>
        <c>true</c> if the specified screen becomes active within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.WaitForWidget(System.Int32)">
      <summary>
            Waits for a widget with the specified ID to exist on the screen.
            Uses <see cref="P:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="id">The ID of the widget to wait for.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified ID, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with the specified ID were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.WaitForWidget(System.Int32,System.TimeSpan)">
      <summary>
            Waits for a widget with the specified ID to exist on the screen.
            </summary>
      <param name="id">The ID of the widget to wait for.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified ID, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with the specified ID were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.WaitForWidget(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Waits for a widget with one of the specified IDs to exist on the screen.
            Uses <see cref="P:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="ids">The potential IDs of the widget to wait for.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with one of the specified IDs, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ids" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with one of the specified IDs were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.WaitForWidget(System.Collections.Generic.IEnumerable{System.Int32},System.TimeSpan)">
      <summary>
            Waits for a widget with one of the specified IDs to exist on the screen.
            </summary>
      <param name="ids">The potential IDs of the widget to wait for.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with one of the specified IDs, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ids" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with one of the specified IDs were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.WaitForWidget(System.String)">
      <summary>
            Waits for a widget with the specified text to exist on the screen.
            Uses <see cref="P:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="text">The text of the widget to wait for.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified text, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with the specified text were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.WaitForWidget(System.String,System.TimeSpan)">
      <summary>
            Waits for a widget with the specified text to exist on the screen.
            </summary>
      <param name="text">The text of the widget to wait for.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified text, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with the specified text were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.WaitForWidget(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Waits for a widget with text that matches the specified text to exist on the screen.
            Uses <see cref="P:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="text">The text of the widget to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with matching text, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with text matching the specified text were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.WaitForWidget(System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for a widget with text that matches the specified text to exist on the screen.
            </summary>
      <param name="text">The text of the widget to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with matching text, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with text matching the specified text were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.WaitForWidget(System.String,System.String)">
      <summary>
            Waits for a widget with the specified property value to exist on the screen.
            Uses <see cref="P:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified property value, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with the specified property value were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.WaitForWidget(System.String,System.String,System.TimeSpan)">
      <summary>
            Waits for a widget with the specified property value to exist on the screen.
            </summary>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified property value, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with the specified property value were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.WaitForWidget(System.String,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Waits for a widget with a property value that matches the specified value to exist on the screen.
            Uses <see cref="P:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with a matching property value, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with a matching property value were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.WaitForWidget(System.String,System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for a widget with a property value that matches the specified value to exist on the screen.
            </summary>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with a matching property value, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with a matching property value were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.WaitForWidget(HP.DeviceAutomation.Oz.WidgetType,System.String)">
      <summary>
            Waits for a widget of the specified type with the specified text to exist on the screen.
            Uses <see cref="P:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="type">The widget type.</param>
      <param name="text">The text of the widget to wait for.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with the specified text, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets of the specified type with the specified text were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.WaitForWidget(HP.DeviceAutomation.Oz.WidgetType,System.String,System.TimeSpan)">
      <summary>
            Waits for a widget of the specified type with the specified text to exist on the screen.
            </summary>
      <param name="type">The widget type.</param>
      <param name="text">The text of the widget to wait for.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with the specified text, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets of the specified type with the specified text were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.WaitForWidget(HP.DeviceAutomation.Oz.WidgetType,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Waits for a widget of the specified type with text that matches the specified text to exist on the screen.
            Uses <see cref="P:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="type">The widget type.</param>
      <param name="text">The text of the widget to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with matching text, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets of the specified type with text matching the specified text were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.WaitForWidget(HP.DeviceAutomation.Oz.WidgetType,System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for a widget of the specified type with text that matches the specified text to exist on the screen.
            </summary>
      <param name="type">The widget type.</param>
      <param name="text">The text of the widget to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with matching text, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets of the specified type with text matching the specified text were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.WaitForWidget(HP.DeviceAutomation.Oz.WidgetType,System.String,System.String)">
      <summary>
            Waits for a widget of the specified type with the specified property value to exist on the screen.
            Uses <see cref="P:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="type">The widget type.</param>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with the specified property value, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets of the specified type with the specified property value were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.WaitForWidget(HP.DeviceAutomation.Oz.WidgetType,System.String,System.String,System.TimeSpan)">
      <summary>
            Waits for a widget of the specified type with the specified property value to exist on the screen.
            </summary>
      <param name="type">The widget type.</param>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with the specified property value, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets of the specified type with the specified property value were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.WaitForWidget(HP.DeviceAutomation.Oz.WidgetType,System.String,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Waits for a widget of the specified type with a property value that matches the specified value to exist on the screen.
            Uses <see cref="P:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="type">The widget type.</param>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with a matching property value, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets of the specified type with a matching property value were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.WaitForWidget(HP.DeviceAutomation.Oz.WidgetType,System.String,System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for a widget of the specified type with a property value that matches the specified value to exist on the screen.
            </summary>
      <param name="type">The widget type.</param>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the widget.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with a matching property value, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets of the specified type with a matching property value were found on the control panel.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.ScreenCapture">
      <summary>
            Retrieves an <see cref="T:System.Drawing.Image" /> containing a screen capture of the control panel.
            </summary>
      <returns>An image of the control panel in PNG format.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.ExecuteJavaScript(System.String)">
      <summary>
            Executes the specified JavaScript in the topmost embedded browser.
            </summary>
      <param name="script">The JavaScript to execute.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.ExecuteJavaScript(System.String,System.String)">
      <summary>
            Executes the specified JavaScript in the embedded browser using the specified UI context ID.
            </summary>
      <param name="uiContextId">The UI context identifier.  (Passing in null executes the JavaScript in the topmost browser.)</param>
      <param name="script">The JavaScript to execute.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.ExecuteJavaScript(System.String,System.TimeSpan)">
      <summary>
            Executes the specified JavaScript in the topmost embedded browser.
            Waits for the browser to be idle before executing the script and throws if the browser does not become idle within the specified time.
            </summary>
      <param name="script">The JavaScript to execute.</param>
      <param name="browserIdleWaitTime">The amount of time to wait for the browser to be idle.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">
            The device browser did not reach an idle state within the specified <paramref name="browserIdleWaitTime" />.
            <para>or</para>
            The device service threw an exception.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.ExecuteJavaScript(System.String,System.String,System.TimeSpan)">
      <summary>
            Executes the specified JavaScript in the embedded browser using the specified UI context ID.
            Waits for the browser to be idle before executing the script and throws if the browser does not become idle within the specified time.
            </summary>
      <param name="uiContextId">The UI context identifier.  (Passing in null executes the JavaScript in the topmost browser.)</param>
      <param name="script">The JavaScript to execute.</param>
      <param name="browserIdleWaitTime">The amount of time to wait for the browser to be idle.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">
            The device browser did not reach an idle state within the specified <paramref name="browserIdleWaitTime" />.
            <para>or</para>
            The device service threw an exception.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.OzWindjammerControlPanel.DefaultWaitTime">
      <summary>
            Gets or sets the default wait time for control panel operations that require waiting for a new state.
            The default value is 30 seconds.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Oz.OzWindjammerDevice">
      <summary>
            Represents a device running Oz firmware with a Windjammer presentation framework.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerDevice.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.OzWindjammerDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerDevice.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.OzWindjammerDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerDevice.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.OzWindjammerDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerDevice.#ctor(System.Net.IPAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.OzWindjammerDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.OzWindjammerDevice.#ctor(HP.DeviceAutomation.DeviceConstructionParameterCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.OzWindjammerDevice" /> class
            with the specified <see cref="T:HP.DeviceAutomation.DeviceConstructionParameterCollection" />.
            </summary>
      <param name="parameters">The device construction parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.OzWindjammerDevice.ControlPanel">
      <summary>
            Gets the control panel for this <see cref="T:HP.DeviceAutomation.Oz.OzWindjammerDevice" />.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Oz.Widget">
      <summary>
            Represents a widget on an Oz control panel.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.Widget.#ctor(System.Int32,HP.DeviceAutomation.Oz.WidgetType,HP.DeviceAutomation.Oz.WidgetState,HP.DeviceAutomation.Coordinate,HP.DeviceAutomation.Size,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.Widget" /> class.
            </summary>
      <param name="id">The widget ID.</param>
      <param name="type">The widget type.</param>
      <param name="state">The widget state.</param>
      <param name="location">The widget location.</param>
      <param name="size">The widget size.</param>
      <param name="text">The widget text.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.Widget.#ctor(HP.DeviceAutomation.Oz.WidgetProperties)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.Widget" /> class from a <see cref="T:HP.DeviceAutomation.Oz.WidgetProperties" /> object.
            </summary>
      <param name="properties">The <see cref="T:HP.DeviceAutomation.Oz.WidgetProperties" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="properties" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.Widget.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this <see cref="T:HP.DeviceAutomation.Oz.Widget" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this <see cref="T:HP.DeviceAutomation.Oz.Widget" />.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.Widget.Properties">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.Oz.WidgetProperties" /> object containing all properties of the widget.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.Widget.Id">
      <summary>
            Gets the ID of the widget.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.Widget.WidgetType">
      <summary>
            Gets the type of the widget.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.Widget.State">
      <summary>
            Gets the state of the widget.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.Widget.Location">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.Coordinate" /> structure representing the location of the upper-left corner of the widget.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.Widget.Size">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.Size" /> structure containing the width and height of the widget.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.Widget.Text">
      <summary>
            Gets a representation of the text displayed on the widget.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Oz.WidgetCollection">
      <summary>
            A collection of <see cref="T:HP.DeviceAutomation.Oz.Widget" /> objects.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.#ctor(System.Collections.Generic.IList{HP.DeviceAutomation.Oz.Widget})">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.WidgetCollection" /> class
            that wraps the specified list.
            </summary>
      <param name="widgets">The list of widgets to wrap.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="widgets" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.Contains(System.Int32)">
      <summary>
            Determines whether this collection contains a <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified ID.
            </summary>
      <param name="id">The widget ID.</param>
      <returns>
        <c>true</c> if this collection contains a <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified ID; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.Contains(System.Int32[])">
      <summary>
            Determines whether this collection contains a <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with one of the specified IDs.
            </summary>
      <param name="ids">The widget IDs.</param>
      <returns>
        <c>true</c> if this collection contains a <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with one of the specified IDs; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ids" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.Contains(System.String)">
      <summary>
            Determines whether this collection contains a <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified text.
            </summary>
      <param name="text">The text.</param>
      <returns>
        <c>true</c> if this collection contains a <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified text; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.Contains(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Determines whether this collection contains a <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with text
            that matches the specified text using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="text">The text.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>
        <c>true</c> if this collection contains a <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with matching text; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.Contains(System.String,System.String)">
      <summary>
            Determines whether this collection contains a <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified property value.
            </summary>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <returns>
        <c>true</c> if this collection contains a <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified property value; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.Contains(System.String,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Determines whether this collection contains a <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with a property value
            that matches the specified value using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>
        <c>true</c> if this collection contains a <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with a matching property value; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.Find(System.Int32)">
      <summary>
            Finds the <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified ID.
            Returns null if no widget with the specified ID is found.
            </summary>
      <param name="id">The widget ID.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified ID, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with the specified ID were found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.Find(System.Int32[])">
      <summary>
            Finds the <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with one of the specified IDs.
            Returns null if no widget with one of the specified IDs is found.
            </summary>
      <param name="ids">The widget IDs.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with one of the specified IDs, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ids" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with one of the specified IDs were found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.Find(System.String)">
      <summary>
            Finds the <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified text.
            Returns null if no widget with the specified text is found.
            </summary>
      <param name="text">The text.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified text, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with the specified text were found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.Find(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Finds the <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with text that matches the specified text
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Returns null if no widget with matching text is found.
            </summary>
      <param name="text">The text.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with matching text, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with text matching the specified text were found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.Find(System.String,System.String)">
      <summary>
            Finds the <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified property value.
            Returns null if no widget with the specified property value is found.
            </summary>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified property value, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with the specified property value were found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.Find(System.String,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Finds the <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with a property value that matches the specified value
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Returns null if no widget with a matching property value is found.
            </summary>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with a matching property value, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with a matching property value were found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.Find(HP.DeviceAutomation.Oz.WidgetType,System.String)">
      <summary>
            Finds the <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with the specified text.
            Returns null if no widget of the specified type with the specified text is found.
            </summary>
      <param name="type">The widget type.</param>
      <param name="text">The text.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with the specified text, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets of the specified type with the specified text were found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.Find(HP.DeviceAutomation.Oz.WidgetType,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Finds the <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with text that matches the specified text
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Returns null if no widget of the specified type with matching text is found.
            </summary>
      <param name="type">The widget type.</param>
      <param name="text">The text.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with matching text, if found; null otherwise.</returns>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets of the specified type with text matching the specified text were found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.Find(HP.DeviceAutomation.Oz.WidgetType,System.String,System.String)">
      <summary>
            Finds the <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with the specified property value.
            Returns null if no widget of the specified type with the specified property value is found.
            </summary>
      <param name="type">The widget type.</param>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with the specified property value, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets of the specified type with the specified property value were found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.Find(HP.DeviceAutomation.Oz.WidgetType,System.String,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Finds the <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with a property value that matches the specified value
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Returns null if no widget of the specified type with a matching property value is found.
            </summary>
      <param name="type">The widget type.</param>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with a matching property value, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets of the specified type with a matching property value were found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.FindExtended(System.String,System.String)">
      <summary>
            Finds the <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified property value.
            Includes "extended" properties, which have the same name but append a digit to the end.
            Returns null if no widget with the specified property value is found.
            </summary>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with the specified property value, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with the specified property value were found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.FindExtended(System.String,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Finds the <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with a property value that matches the specified value
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Includes "extended" properties, which have the same name but append a digit to the end.
            Returns null if no widget with a matching property value is found.
            </summary>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> with a matching property value, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with a matching property value were found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.FindExtended(HP.DeviceAutomation.Oz.WidgetType,System.String,System.String)">
      <summary>
            Finds the <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with the specified property value.
            Includes "extended" properties, which have the same name but append a digit to the end.
            Returns null if no widget of the specified type with the specified property value is found.
            </summary>
      <param name="type">The widget type.</param>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with the specified property value, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets of the specified type with the specified property value were found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.FindExtended(HP.DeviceAutomation.Oz.WidgetType,System.String,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Finds the <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with a property value that matches the specified value
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Includes "extended" properties, which have the same name but append a digit to the end.
            Returns null if no widget of the specified type with a matching property value is found.
            </summary>
      <param name="type">The widget type.</param>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of the specified type with a matching property value, if found; null otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets of the specified type with a matching property value were found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.FindByLabel(System.String,HP.DeviceAutomation.Oz.WidgetType[])">
      <summary>
            Finds the <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of one of the specified types that is labeled by a widget with the specified text.
            Looks for the widget that is directly underneath or to the right of the label widget.
            </summary>
      <param name="text">The text of the label widget.</param>
      <param name="types">The widget types.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> that is labeled by a widget with the specified text.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetNotFoundException">
            No label widget with the specified text was found.
            <para>or</para>
            No widget of one of the specified types labeled by the specified widget was found.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with the specified text were found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.FindByLabel(System.String,HP.DeviceAutomation.StringMatch,HP.DeviceAutomation.Oz.WidgetType[])">
      <summary>
            Finds the <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of one of the specified types that is labeled by a widget with text
            that matches the specified text using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Looks for the widget that is directly underneath or to the right of the label widget.
            </summary>
      <param name="text">The text of the label widget.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="types">The widget types.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> that is labeled by a widget with matching text.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetNotFoundException">
            No label widget with text matching the specified text was found.
            <para>or</para>
            No widget of one of the specified types labeled by the specified widget was found.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with text matching the specified text were found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.FindByLabel(System.String,System.String,HP.DeviceAutomation.Oz.WidgetType[])">
      <summary>
            Finds the <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of one of the specified types that is labeled by a widget with the specified property value.
            Looks for the widget that is directly underneath or to the right of the label widget.
            </summary>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <param name="types">The widget types.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> that is labeled by a widget with the specified property value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.
            <para>or</para><paramref name="types" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetNotFoundException">
            No label widget with the specified property value was found.
            <para>or</para>
            No widget of one of the specified types labeled by the specified widget was found.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with the specified property value were found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.FindByLabel(System.String,System.String,HP.DeviceAutomation.StringMatch,HP.DeviceAutomation.Oz.WidgetType[])">
      <summary>
            Finds the <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of one of the specified types that is labeled by a widget with a property value
            that matches the specified value using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Looks for the widget that is directly underneath or to the right of the label widget.
            </summary>
      <param name="propertyName">The property name.</param>
      <param name="propertyValue">The property value.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="types">The widget types.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> that is labeled by a widget with a matching property value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.
            <para>or</para><paramref name="types" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetNotFoundException">
            No label widget with a property value matching the specified property value was found.
            <para>or</para>
            No widget of one of the specified types labeled by the specified widget was found.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">Multiple widgets with a matching property value were found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.FindByLabel(HP.DeviceAutomation.Oz.Widget,HP.DeviceAutomation.Oz.WidgetType[])">
      <summary>
            Finds the <see cref="T:HP.DeviceAutomation.Oz.Widget" /> of one of the specified types that is labeled by <paramref name="labelWidget" />.
            Looks for the widget that is directly underneath or to the right of the label widget.
            </summary>
      <param name="labelWidget">The label widget.</param>
      <param name="types">The widget types.</param>
      <returns>The <see cref="T:HP.DeviceAutomation.Oz.Widget" /> that is labeled by <paramref name="labelWidget" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="labelWidget" /> is null.
            <para>or</para><paramref name="types" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Oz.WidgetNotFoundException">No widget of one of the specified types labeled by the specified widget was found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.OfType(HP.DeviceAutomation.Oz.WidgetType)">
      <summary>
            Creates a subset of this <see cref="T:HP.DeviceAutomation.Oz.WidgetCollection" /> containing only widgets of the specified type.
            </summary>
      <param name="type">The widget type.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Oz.WidgetCollection" /> containing only the widgets of the specified type.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.OfType(HP.DeviceAutomation.Oz.WidgetType[])">
      <summary>
            Creates a subset of this <see cref="T:HP.DeviceAutomation.Oz.WidgetCollection" /> containing only widgets of the specified types.
            </summary>
      <param name="types">The widget types.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Oz.WidgetCollection" /> containing only the widgets of the specified types.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.NotOfType(HP.DeviceAutomation.Oz.WidgetType)">
      <summary>
            Creates a subset of this <see cref="T:HP.DeviceAutomation.Oz.WidgetCollection" /> excluding widgets of the specified type.
            </summary>
      <param name="type">The widget type.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Oz.WidgetCollection" /> excluding the widgets of the specified type.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.NotOfType(HP.DeviceAutomation.Oz.WidgetType[])">
      <summary>
            Creates a subset of this <see cref="T:HP.DeviceAutomation.Oz.WidgetCollection" /> excluding widgets of the specified types.
            </summary>
      <param name="types">The widget types.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Oz.WidgetCollection" /> excluding the widgets of the specified types.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.InState(HP.DeviceAutomation.Oz.WidgetState)">
      <summary>
            Creates a subset of this <see cref="T:HP.DeviceAutomation.Oz.WidgetCollection" /> containing only widgets in the specified state.
            </summary>
      <param name="state">The widget state.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Oz.WidgetCollection" /> containing only the widgets in the specified state.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.InState(HP.DeviceAutomation.Oz.WidgetState[])">
      <summary>
            Creates a subset of this <see cref="T:HP.DeviceAutomation.Oz.WidgetCollection" /> containing only widgets in any of the specified states.
            </summary>
      <param name="states">The widget states.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Oz.WidgetCollection" /> containing only the widgets in any of the specified states.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="states" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.NotInState(HP.DeviceAutomation.Oz.WidgetState)">
      <summary>
            Creates a subset of this <see cref="T:HP.DeviceAutomation.Oz.WidgetCollection" /> excluding widgets in the specified state.
            </summary>
      <param name="state">The widget state.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Oz.WidgetCollection" /> excluding the widgets in the specified state.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetCollection.NotInState(HP.DeviceAutomation.Oz.WidgetState[])">
      <summary>
            Creates a subset of this <see cref="T:HP.DeviceAutomation.Oz.WidgetCollection" /> excluding widgets in any of the specified states.
            </summary>
      <param name="states">The widget states.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Oz.WidgetCollection" /> excluding the widgets in any of the specified states.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="states" /> is null.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Oz.WidgetFactory">
      <summary>
            Converts raw SNMP widget data into <see cref="T:HP.DeviceAutomation.Oz.Widget" /> objects.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetFactory.GetWidgets(System.Collections.Generic.IEnumerable{HP.DeviceAutomation.SnmpOidValue})">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.Oz.WidgetCollection" /> representing the widgets displayed on the control panel.
            </summary>
      <param name="snmpWidgetData">The SNMP widget data.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Oz.WidgetCollection" /> representing the widgets displayed on the control panel.</returns>
    </member>
    <member name="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException">
      <summary>
            Exception thrown when a widget operation should match a single widget but actually matches multiple widgets.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.WidgetMatchAmbiguityException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:HP.DeviceAutomation.Oz.WidgetNotFoundException">
      <summary>
            Exception thrown when the Oz Windjammer control panel could not find the specified widget.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetNotFoundException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.WidgetNotFoundException" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetNotFoundException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.WidgetNotFoundException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.WidgetNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.WidgetNotFoundException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:HP.DeviceAutomation.Oz.WidgetProperties">
      <summary>
            A collection of properties for a <see cref="T:HP.DeviceAutomation.Oz.Widget" />.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetProperties.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.WidgetProperties" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetProperties.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.WidgetProperties" /> class from the specified SNMP widget data.
            </summary>
      <param name="data">The SNMP-retrieved widget data.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetProperties.Contains(System.String)">
      <summary>
            Determines whether this instance contains the specified property.
            </summary>
      <param name="property">The property.</param>
      <returns>
        <c>true</c> if this instance contains the specified property; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetProperties.GetPropertyArray(System.String)">
      <summary>
            Gets an array of properties from a specified base name.  Matching properties begin with the
            base name and end in a number, e.g. Title1, Title2, etc.
            </summary>
      <param name="propertyNameBase">The base property name.</param>
      <returns>The values of all properties with the specified base name.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.WidgetProperties.Item(System.String)">
      <summary>
            Gets the value of the specified property.
            </summary>
      <param name="property">The property.</param>
      <returns>The value of the property, if it exists; null otherwise.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.WidgetProperties.Count">
      <summary>
            Gets the number of properties in this instance.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.WidgetProperties.Names">
      <summary>
            Gets the names of all properties in this instance.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Oz.WidgetState">
      <summary>
            Represents the state of an Oz widget.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetState.Unknown">
      <summary>
            Unknown state
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetState.Up">
      <summary>
            Up
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetState.Down">
      <summary>
            Down
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetState.ModifiedUp">
      <summary>
            Modified Up
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetState.ModifiedDown">
      <summary>
            Modified Down
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetState.Selected">
      <summary>
            Selected
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetState.NotSelected">
      <summary>
            Not selected
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetState.Visible">
      <summary>
            Visible
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetState.Disabled">
      <summary>
            Disabled
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetState.Contention">
      <summary>
            Contention
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetState.Hidden">
      <summary>
            Hidden
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Oz.WidgetStateAttribute">
      <summary>
            Marks a <see cref="T:HP.DeviceAutomation.Oz.WidgetState" /> with the corresponding SNMP description for the state.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetStateAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Oz.WidgetStateAttribute" /> class.
            </summary>
      <param name="state">The SNMP widget state description.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Oz.WidgetStateAttribute.Equals(System.String)">
      <summary>
            Determines whether the state of this <see cref="T:HP.DeviceAutomation.Oz.WidgetStateAttribute" /> matches the specified state.
            </summary>
      <param name="state">The state.</param>
      <returns>
        <c>true</c> if the state of this <see cref="T:HP.DeviceAutomation.Oz.WidgetStateAttribute" /> matches the specified state; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.Oz.WidgetStateAttribute.State">
      <summary>
            Gets the SNMP widget state description.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Oz.WidgetType">
      <summary>
            Represents the type of an Oz widget.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.Unknown">
      <summary>
            Unknown widget type.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.Button">
      <summary>
            A button.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.ServiceButton">
      <summary>
            A service button.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.RadioButton">
      <summary>
            A radio button.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.ToggleButton">
      <summary>
            A toggle button.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.CheckWellsButton">
      <summary>
            A check button.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.ScrollButton">
      <summary>
            A scroll button.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.IconButton">
      <summary>
            An icon button.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.StickyButton">
      <summary>
            A sticky button.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.Text">
      <summary>
            A text display.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.Prompt">
      <summary>
            A prompt.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.StringBox">
      <summary>
            A string box.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.ScrollTextBox">
      <summary>
            A scroll text box.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.EditBox">
      <summary>
            An edit box.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.Tab">
      <summary>
            A tab.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.TitledGroup">
      <summary>
            A titled group.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.JobListItem">
      <summary>
            A job list item.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.HelpListItem">
      <summary>
            A help list item.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.SuppliesItem">
      <summary>
            A supplies item.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.InputPreviewIcon">
      <summary>
            An input preview icon.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.OutputPreviewIcon">
      <summary>
            An output preview icon.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.Animation">
      <summary>
            An animation.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.SpeedDialItem">
      <summary>
            A speed dial item.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.UIWBorder">
      <summary>
            A UIW border.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Oz.WidgetType.UIWPanel">
      <summary>
            A UIW panel.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
      <summary>
            Exception thrown when the Jedi Windjammer control panel could not find the specified control.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.ControlNotFoundException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.ControlNotFoundException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.ControlNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.ControlNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">
      <summary>
            Exception thrown when the Jedi Omni control panel could not find the specified element.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.ElementNotFoundException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.ElementNotFoundException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.ElementNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.ElementNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.JediDebugAddressParameter">
      <summary>
            A <see cref="T:HP.DeviceAutomation.DeviceConstructionParameter" /> containing the network address for a Jedi debug card.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediDebugAddressParameter.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediDebugAddressParameter" /> class.
            </summary>
      <param name="address">The debug card address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediDebugAddressParameter.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediDebugAddressParameter" /> class.
            </summary>
      <param name="address">The debug card address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediDebugAddressParameter.Address">
      <summary>
            Gets the <see cref="T:HP.DeviceAutomation.DeviceNetworkAddress" /> stored in this <see cref="T:HP.DeviceAutomation.Jedi.JediDebugAddressParameter" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediDebugAddressParameter.Name">
      <summary>
            Gets the name of this <see cref="T:HP.DeviceAutomation.DeviceConstructionParameter" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediDebugAddressParameter.Value">
      <summary>
            Gets the value of this <see cref="T:HP.DeviceAutomation.DeviceConstructionParameter" />.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.JediDevice">
      <summary>
            Represents a device running Jedi firmware.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediDevice.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediDevice.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediDevice.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediDevice.#ctor(System.Net.IPAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediDevice.#ctor(HP.DeviceAutomation.DeviceConstructionParameterCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediDevice" /> class
            with the specified <see cref="T:HP.DeviceAutomation.DeviceConstructionParameterCollection" />.
            </summary>
      <param name="parameters">The device construction parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediDevice.GetDeviceInfo">
      <summary>
            Gets a <see cref="T:HP.DeviceAutomation.Jedi.JediDeviceInfo" /> object containing information about the device.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.Jedi.JediDeviceInfo" /> object.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediDevice.GetDeviceStatus">
      <summary>
            Gets the current operational state of the device.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.DeviceStatus" /> representing the state of the device.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediDevice.GetPrinterStatus">
      <summary>
            Gets the current printer status of the device.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.PrinterStatus" /> representing the state of the device.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediDevice.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediDevice.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediDevice.Address">
      <summary>
            Gets the network address of the device.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediDevice.AdminPassword">
      <summary>
            Gets the admin password that will be used for communication with the device.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediDevice.FirmwareType">
      <summary>
            Gets the type of firmware running on the device.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediDevice.Snmp">
      <summary>
            Gets the SNMP communication interface for this <see cref="T:HP.DeviceAutomation.Jedi.JediDevice" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediDevice.WebServices">
      <summary>
            Gets the Jedi Web Services (WS*) communication interface for this <see cref="T:HP.DeviceAutomation.Jedi.JediDevice" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediDevice.PowerManagement">
      <summary>
            Gets the power management interface for this <see cref="T:HP.DeviceAutomation.Jedi.JediDevice" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediDevice.SystemTest">
      <summary>
            Gets the Jedi System Test interface for this <see cref="T:HP.DeviceAutomation.Jedi.JediDevice" />.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediDevice.Diagnostics">
      <summary>
            Gets the Jedi Diagnostics interface for this <see cref="T:HP.DeviceAutomation.Jedi.JediDevice" />.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.JediDeviceFactory">
      <summary>
            Implementation of <see cref="T:HP.DeviceAutomation.IDeviceFactory" /> for Jedi devices.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediDeviceFactory.Create(HP.DeviceAutomation.DeviceConstructionParameterCollection)">
      <summary>
            Creates an <see cref="T:HP.DeviceAutomation.IDevice" /> object using the specified construction parameters.
            </summary>
      <param name="parameters">The device construction parameters.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.IDevice" /> object for the device constructed from the specified parameters.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">A device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.JediDeviceInfo">
      <summary>
            Contains information about a <see cref="T:HP.DeviceAutomation.Jedi.JediDevice" />.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediDeviceInfo.#ctor">
      <summary>
            Prevents a default instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediDeviceInfo" /> class from being created.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediDeviceInfo.Retrieve(HP.DeviceAutomation.Snmp)">
      <summary>
            Constructs a <see cref="T:HP.DeviceAutomation.Jedi.JediDeviceInfo" /> object using the specified <see cref="T:HP.DeviceAutomation.Snmp" /> communication interface.
            </summary>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Jedi.JediDeviceInfo" /> object.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediDeviceInfo.ModelName">
      <summary>
            Gets the device model name, if available; null otherwise.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediDeviceInfo.ModelNumber">
      <summary>
            Gets the device model number, if available; null otherwise.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediDeviceInfo.SerialNumber">
      <summary>
            Gets the device serial number, if available; null otherwise.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediDeviceInfo.FirmwareRevision">
      <summary>
            Gets the revision (version) of the device firmware, if available; null otherwise.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediDeviceInfo.FirmwareDateCode">
      <summary>
            Gets the date code of the device firmware, if available; null otherwise.
            (The format of the date code is firmware-specific and is not necessarily parseable.)
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediDeviceInfo.DeviceId">
      <summary>
            Gets the HP MIB device identifier.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.JediDiagnostics">
      <summary>
            Provides access to Jedi diagnostics tools.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediDiagnostics.#ctor(HP.DeviceAutomation.DeviceNetworkAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediDiagnostics" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediDiagnostics.GetMemoryCounters">
      <summary>
            Gets a device memory counter snapshot.
            </summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> containing the device memory counters.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediDiagnostics.DumpRingBuffers">
      <summary>
            Dumps the device ring buffers.
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediDiagnostics.CreateCrashDump">
      <summary>
            Creates a crash dump.
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.JediFourLineControlPanel">
      <summary>
            Control panel for a Jedi device with a four-line display.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.#ctor(HP.DeviceAutomation.DeviceNetworkAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediFourLineControlPanel" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.#ctor(HP.DeviceAutomation.DeviceNetworkAddress,HP.DeviceAutomation.DeviceNetworkAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediFourLineControlPanel" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="debugAddress">The debug card address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.
            <para>or</para><paramref name="debugAddress" /> is null.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.CurrentForm">
      <summary>
            Returns the name of the top form on the forms manager.
            </summary>
      <returns>The name of the current form.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.GetControls">
      <summary>
            Gets the names of all controls on the current form.
            </summary>
      <returns>The names of all controls on the current form.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.GetProperty(System.String,System.String)">
      <summary>
            Gets the value of the specified property of the control with the specified name.
            </summary>
      <param name="controlName">The name of the control to inspect.</param>
      <param name="propertyPath">The path to the property to retrieve.</param>
      <returns>The property value.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyPath" /> is not valid for the specified control.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="propertyPath" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.GetProperty``1(System.String,System.String)">
      <summary>
            Gets the value of the specified property of the control with the specified name.
            </summary>
      <typeparam name="T">The type of object to retrieve.</typeparam>
      <param name="controlName">The name of the control to inspect.</param>
      <param name="propertyPath">The path to the property to retrieve.</param>
      <returns>The property value.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyPath" /> is not valid for the specified control.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="propertyPath" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:System.FormatException">The property value could not be converted to the specified type <typeparamref name="T" />.</exception>
      <exception cref="T:System.InvalidCastException">Conversion to the specified type <typeparamref name="T" /> is not supported.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.PressKey(HP.DeviceAutomation.Jedi.JediHardKey)">
      <summary>
            Presses the specified hard key.
            </summary>
      <param name="key">The <see cref="T:HP.DeviceAutomation.Jedi.JediHardKey" /> to press.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.PressKeyWait(HP.DeviceAutomation.Jedi.JediHardKey,System.String)">
      <summary>
            Presses the specified hard key and waits for the specified form to be on top of the forms stack.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="key">The <see cref="T:HP.DeviceAutomation.Jedi.JediHardKey" /> to press.</param>
      <param name="formName">The name of the form to wait for.</param>
      <returns>
        <c>true</c> if the form appears within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.PressKeyWait(HP.DeviceAutomation.Jedi.JediHardKey,System.String,System.TimeSpan)">
      <summary>
            Presses the specified hard key and waits for the specified form to be on top of the forms stack.
            </summary>
      <param name="key">The <see cref="T:HP.DeviceAutomation.Jedi.JediHardKey" /> to press.</param>
      <param name="formName">The name of the form to wait for.</param>
      <param name="waitTime">The amount of time to wait for the form.</param>
      <returns>
        <c>true</c> if the form appears within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.PressKeyWait(HP.DeviceAutomation.Jedi.JediHardKey,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Presses the specified hard key and waits for the specified form to be on top of the forms stack
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="key">The <see cref="T:HP.DeviceAutomation.Jedi.JediHardKey" /> to press.</param>
      <param name="formName">The name of the form to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>
        <c>true</c> if the form appears within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.PressKeyWait(HP.DeviceAutomation.Jedi.JediHardKey,System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Presses the specified hard key and waits for the specified form to be on top of the forms stack
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="key">The <see cref="T:HP.DeviceAutomation.Jedi.JediHardKey" /> to press.</param>
      <param name="formName">The name of the form to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the form.</param>
      <returns>
        <c>true</c> if the form appears within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.ScrollToItem(System.String,System.String)">
      <summary>
            Scrolls to the control with the specified name.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="controlName">The name of the control to scroll to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scrollControlName" /> is null.
            <para>or</para><paramref name="controlName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
            The control specified by <paramref name="scrollControlName" /> could not be found on the control panel.
            <para>or</para>
            The control specified by <paramref name="controlName" /> could not be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">The control specified by <paramref name="scrollControlName" /> is not a valid scroll control.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.ScrollToItem(System.String,System.String,System.Object)">
      <summary>
            Scrolls to the control with the specified property value.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scrollControlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
            The control specified by <paramref name="scrollControlName" /> could not be found on the control panel.
            <para>or</para>
            No control with the specified property value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">The control specified by <paramref name="scrollControlName" /> is not a valid scroll control.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.ScrollSelect(System.String,System.String)">
      <summary>
            Scrolls to and selects the control with the specified name.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="controlName">The name of the control to select.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scrollControlName" /> is null.
            <para>or</para><paramref name="controlName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
            The control specified by <paramref name="scrollControlName" /> could not be found on the control panel.
            <para>or</para>
            The control specified by <paramref name="controlName" /> could not be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">The control specified by <paramref name="scrollControlName" /> is not a valid scroll control.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.ScrollSelect(System.String,System.String,System.Object)">
      <summary>
            Scrolls to and selects the control with the specified property value.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scrollControlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
            The control specified by <paramref name="scrollControlName" /> could not be found on the control panel.
            <para>or</para>
            No control with the specified property value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">The control specified by <paramref name="scrollControlName" /> is not a valid scroll control.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.WaitForPropertyValue(System.String,System.String,System.String)">
      <summary>
            Waits for a control to have the specified property value.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="controlName">The name of the control.</param>
      <param name="propertyName">The property of the control to monitor.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyName" /> is not valid for the specified control.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.WaitForPropertyValue(System.String,System.String,System.String,System.TimeSpan)">
      <summary>
            Waits for a control to have the specified property value.
            </summary>
      <param name="controlName">The name of the control.</param>
      <param name="propertyName">The property of the control to monitor.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <param name="waitTime">The amount of time to wait for the control to have the specified property value.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyName" /> is not valid for the specified control.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.WaitForPropertyValue(System.String,System.String,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Waits for a control to have the specified property value using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="controlName">The name of the control.</param>
      <param name="propertyName">The property of the control to monitor.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyName" /> is not valid for the specified control.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.WaitForPropertyValue(System.String,System.String,System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for a control to have the specified property value using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="controlName">The name of the control.</param>
      <param name="propertyName">The property of the control to monitor.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the control to have the specified property value.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyName" /> is not valid for the specified control.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.WaitForPropertyValue``1(System.String,System.String,``0)">
      <summary>
            Waits for a control to have the specified property value.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <typeparam name="T">The type of the property value.</typeparam>
      <param name="controlName">The name of the control.</param>
      <param name="propertyName">The property of the control to monitor.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyName" /> is not valid for the specified control.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:System.FormatException">The property value could not be converted to the specified type <typeparamref name="T" />.</exception>
      <exception cref="T:System.InvalidCastException">Conversion to the specified type <typeparamref name="T" /> is not supported.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.WaitForPropertyValue``1(System.String,System.String,``0,System.TimeSpan)">
      <summary>
            Waits for a control to have the specified property value.
            </summary>
      <typeparam name="T">The type of the property value.</typeparam>
      <param name="controlName">The name of the control.</param>
      <param name="propertyName">The property of the control to monitor.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <param name="waitTime">The amount of time to wait for the control to have the specified property value.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyName" /> is not valid for the specified control.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:System.FormatException">The property value could not be converted to the specified type <typeparamref name="T" />.</exception>
      <exception cref="T:System.InvalidCastException">Conversion to the specified type <typeparamref name="T" /> is not supported.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.WaitForControl(System.String)">
      <summary>
            Waits for a control with the specified name to exist.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="controlName">The name of the control to wait for.</param>
      <returns>
        <c>true</c> if the control is found within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.WaitForControl(System.String,System.TimeSpan)">
      <summary>
            Waits for a control with the specified name to exist.
            </summary>
      <param name="controlName">The name of the control to wait for.</param>
      <param name="waitTime">The amount of time to wait for the control.</param>
      <returns>
        <c>true</c> if the control is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.WaitForControl(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Waits for a control with the specified name to exist using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="controlName">The name of the control to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>
        <c>true</c> if the control is found within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.WaitForControl(System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for a control with the specified name to exist using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="controlName">The name of the control to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the control.</param>
      <returns>
        <c>true</c> if the control is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.WaitForForm(System.String)">
      <summary>
            Waits for the specified form to be on top of the forms stack.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="formName">The name of the form to wait for.</param>
      <returns>
        <c>true</c> if the form appears within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.WaitForForm(System.String,System.TimeSpan)">
      <summary>
            Waits for the specified form to be on top of the forms stack.
            </summary>
      <param name="formName">The name of the form to wait for.</param>
      <param name="waitTime">The amount of time to wait for the form.</param>
      <returns>
        <c>true</c> if the form appears within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formName" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.WaitForForm(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Waits for the specified form to be on top of the forms stack using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="formName">The name of the form to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>
        <c>true</c> if the form appears within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.WaitForForm(System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for the specified form to be on top of the forms stack using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="formName">The name of the form to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the form.</param>
      <returns>
        <c>true</c> if the form appears within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formName" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.WaitForForm(System.String,System.Boolean)">
      <summary>
            Waits for the specified form to be on top of the forms stack, optionally ignoring pop-ups.
            </summary>
      <param name="formName">The name of the form to wait for.</param>
      <param name="ignorePopups">if set to <c>true</c> ignore pop-ups that appear before the expected form is displayed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
            The control panel timed out waiting for the specified form.
            <para>or</para><paramref name="ignorePopups" /> is set to <c>false</c> and a form appeared that was different than the expected new form.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.ScreenCapture">
      <summary>
            Retrieves an <see cref="T:System.Drawing.Image" /> containing a screen capture of the control panel.
            </summary>
      <returns>An image of the control panel in PNG format.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.ExecuteJavaScript(System.String)">
      <summary>
            Executes the specified JavaScript in the topmost embedded browser.
            </summary>
      <param name="script">The JavaScript to execute.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.ExecuteJavaScript(System.String,System.String)">
      <summary>
            Executes the specified JavaScript in the embedded browser using the specified UI context ID.
            </summary>
      <param name="uiContextId">The UI context identifier.  (Passing in null executes the JavaScript in the topmost browser.)</param>
      <param name="script">The JavaScript to execute.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.ExecuteJavaScript(System.String,System.TimeSpan)">
      <summary>
            Executes the specified JavaScript in the topmost embedded browser.
            Waits for the browser to be idle before executing the script and throws if the browser does not become idle within the specified time.
            </summary>
      <param name="script">The JavaScript to execute.</param>
      <param name="browserIdleWaitTime">The amount of time to wait for the browser to be idle.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">
            The device browser did not reach an idle state within the specified <paramref name="browserIdleWaitTime" />.
            <para>or</para>
            The device service threw an exception.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.ExecuteJavaScript(System.String,System.String,System.TimeSpan)">
      <summary>
            Executes the specified JavaScript in the embedded browser using the specified UI context ID.
            Waits for the browser to be idle before executing the script and throws if the browser does not become idle within the specified time.
            </summary>
      <param name="uiContextId">The UI context identifier.  (Passing in null executes the JavaScript in the topmost browser.)</param>
      <param name="script">The JavaScript to execute.</param>
      <param name="browserIdleWaitTime">The amount of time to wait for the browser to be idle.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">
            The device browser did not reach an idle state within the specified <paramref name="browserIdleWaitTime" />.
            <para>or</para>
            The device service threw an exception.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediFourLineControlPanel.DefaultWaitTime">
      <summary>
            Gets or sets the default wait time for control panel operations that require waiting for a new state.
            The default value is 30 seconds.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.JediFourLineDevice">
      <summary>
            Represents a device running Jedi firmware with a four-line display.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineDevice.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediFourLineDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineDevice.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediFourLineDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineDevice.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediFourLineDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineDevice.#ctor(System.Net.IPAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediFourLineDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineDevice.#ctor(HP.DeviceAutomation.DeviceConstructionParameterCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediFourLineDevice" /> class
            with the specified <see cref="T:HP.DeviceAutomation.DeviceConstructionParameterCollection" />.
            </summary>
      <param name="parameters">The device construction parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediFourLineDevice.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediFourLineDevice.ControlPanel">
      <summary>
            Gets the control panel for this <see cref="T:HP.DeviceAutomation.Jedi.JediFourLineDevice" />.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.JediHardKey">
      <summary>
            Represents a hard key on a Jedi device.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.JediHardKey.Menu">
      <summary>
            The Menu key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.JediHardKey.Ok">
      <summary>
            The OK key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.JediHardKey.Up">
      <summary>
            The up arrow key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.JediHardKey.Down">
      <summary>
            The down arrow key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.JediHardKey.Back">
      <summary>
            The Back key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.JediHardKey.Start">
      <summary>
            The Start key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.JediHardKey.Stop">
      <summary>
            The Stop key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.JediHardKey.Help">
      <summary>
            The Help key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.JediHardKey.Reset">
      <summary>
            The Reset key.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.JediOmniControlPanel">
      <summary>
            Control panel for a Jedi device using an Omni presentation framework.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.#ctor(HP.DeviceAutomation.DeviceNetworkAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediOmniControlPanel" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.#ctor(HP.DeviceAutomation.DeviceNetworkAddress,HP.DeviceAutomation.DeviceNetworkAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediOmniControlPanel" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="debugAddress">The debug card address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.
            <para>or</para><paramref name="debugAddress" /> is null.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.GetCount(System.String)">
      <summary>
            Gets the number of elements matching the specified selector.
            </summary>
      <param name="elementSelector">The element selector.</param>
      <returns>The number of elements that match the selector.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.GetString(System.String)">
      <summary>
            Resolves a string ID to a display string for the current locale.
            </summary>
      <param name="id">The string identifier.</param>
      <returns>The display string for the current locale.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.CheckState(System.String,HP.DeviceAutomation.Jedi.OmniElementState)">
      <summary>
            Checks to see whether the specified element is in the specified state.
            </summary>
      <param name="elementSelector">A selector identifying the element.</param>
      <param name="state">The <see cref="T:HP.DeviceAutomation.Jedi.OmniElementState" /> to check.</param>
      <returns>
        <c>true</c> if the element is in the specified state; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.GetIds(System.String,HP.DeviceAutomation.Jedi.OmniIdCollectionType)">
      <summary>
            Gets a collection of IDs of the specified type from an element using the specified selector and <see cref="T:HP.DeviceAutomation.Jedi.OmniIdCollectionType" />.
            </summary>
      <param name="elementSelector">The element selector.</param>
      <param name="collectionType">The type of ID collection to retrieve.</param>
      <returns>A collection of element IDs.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.GetBoundingBox(System.String)">
      <summary>
            Gets the bounding box for an element using the specified selector.
            </summary>
      <param name="elementSelector">A selector identifying the element.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.BoundingBox" /> representing the location and size of the specified element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.GetValue(System.String,System.String,HP.DeviceAutomation.Jedi.OmniPropertyType)">
      <summary>
            Gets the value of a property, attribute, or style property from an element using the specified selector.
            </summary>
      <param name="elementSelector">The element selector.</param>
      <param name="propertyName">The name of the property to retrieve.</param>
      <param name="propertyType">An <see cref="T:HP.DeviceAutomation.Jedi.OmniPropertyType" /> identifying the type of property to retrieve.</param>
      <returns>The value of the property, attribute, or style property.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">The element specified by <paramref name="elementSelector" /> does not have the requested property.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.GetValue``1(System.String,System.String,HP.DeviceAutomation.Jedi.OmniPropertyType)">
      <summary>
            Gets the value of a property, attribute, or style property from an element using the specified selector.
            </summary>
      <typeparam name="T">The type of object to retrieve.</typeparam>
      <param name="elementSelector">The element selector.</param>
      <param name="propertyName">The name of the property to retrieve.</param>
      <param name="propertyType">An <see cref="T:HP.DeviceAutomation.Jedi.OmniPropertyType" /> identifying the type of property to retrieve.</param>
      <returns>The value of the property, attribute, or style property.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:System.FormatException">The property value could not be converted to the specified type <typeparamref name="T" />.</exception>
      <exception cref="T:System.InvalidCastException">Conversion to the specified type <typeparamref name="T" /> is not supported.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">The element specified by <paramref name="elementSelector" /> does not have the requested property.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.Press(System.String)">
      <summary>
            Presses an element using the specified selector.
            </summary>
      <param name="elementSelector">A selector identifying the element to press.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">The element specified by <paramref name="elementSelector" /> is not <see cref="F:HP.DeviceAutomation.Jedi.OmniElementState.Useable" />.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.PressWait(System.String,System.String)">
      <summary>
            Presses an element using the specified selector, then waits for another element to be <see cref="F:HP.DeviceAutomation.Jedi.OmniElementState.Useable" />.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediOmniControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="elementSelector">A selector identifying the element to press.</param>
      <param name="newElementSelector">A selector identifying the element to wait for.</param>
      <returns>
        <c>true</c> if the new element was <see cref="F:HP.DeviceAutomation.Jedi.OmniElementState.Useable" /> within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.
            <para>or</para><paramref name="newElementSelector" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">The element specified by <paramref name="elementSelector" /> is not <see cref="F:HP.DeviceAutomation.Jedi.OmniElementState.Useable" />.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.PressWait(System.String,System.String,System.TimeSpan)">
      <summary>
            Presses an element using the specified selector, then waits for another element to be <see cref="F:HP.DeviceAutomation.Jedi.OmniElementState.Useable" />.
            </summary>
      <param name="elementSelector">A selector identifying the element to press.</param>
      <param name="newElementSelector">A selector identifying the element to wait for.</param>
      <param name="waitTime">The amount of time to wait for the new element to be <see cref="F:HP.DeviceAutomation.Jedi.OmniElementState.Useable" />.</param>
      <returns>
        <c>true</c> if the new element was <see cref="F:HP.DeviceAutomation.Jedi.OmniElementState.Useable" /> within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.
            <para>or</para><paramref name="newElementSelector" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">The element specified by <paramref name="elementSelector" /> is not <see cref="F:HP.DeviceAutomation.Jedi.OmniElementState.Useable" />.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.PressHome">
      <summary>
            Presses the home button on the control panel.
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.PressScreen(System.Int32,System.Int32)">
      <summary>
            Presses the touchscreen at the specified coordinates.
            </summary>
      <param name="x">The x-coordinate.</param>
      <param name="y">The y-coordinate.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.PressScreen(HP.DeviceAutomation.Coordinate)">
      <summary>
            Presses the touchscreen at the specified <see cref="T:HP.DeviceAutomation.Coordinate" />.
            </summary>
      <param name="coordinate">The coordinate to press.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.SwipeScreen(HP.DeviceAutomation.Coordinate,HP.DeviceAutomation.Coordinate,System.TimeSpan)">
      <summary>
            Performs a swipe gesture on the touchscreen between the specified coordinates.
            </summary>
      <param name="start">The coordinate where the swipe gesture should start.</param>
      <param name="end">The coordinate where the swipe gesture should end.</param>
      <param name="duration">The duration of the gesture.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.Type(System.String)">
      <summary>
            Types the specified text into the control panel.
            </summary>
      <param name="text">The text to type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.Type(HP.DeviceAutomation.SpecialCharacter)">
      <summary>
            Types the specified special character into the control panel.
            </summary>
      <param name="specialCharacter">The <see cref="T:HP.DeviceAutomation.SpecialCharacter" /> to type.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.TypeOnVirtualKeyboard(System.String)">
      <summary>
            Types the specified text on a virtual keyboard displayed on the control panel.
            </summary>
      <param name="text">The text to type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">
            No keyboard could be found on the control panel.
            <para>or</para>
            The keyboard does not support one or more of the characters in <paramref name="text" />.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.TypeOnNumericKeypad(System.String)">
      <summary>
            Types the specified text on a virtual numeric keypad displayed on the control panel.
            </summary>
      <param name="text">The text to type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">
            No keypad could be found on the control panel.
            <para>or</para>
            The keypad does not support one or more of the characters in <paramref name="text" />.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.ScrollToItem(System.String)">
      <summary>
            Scrolls to an element using the specified selector.
            </summary>
      <param name="elementSelector">A selector identifying the element to scroll to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">The scroll operation failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.ScrollPress(System.String)">
      <summary>
            Scrolls to and presses an element using the specified selector.
            </summary>
      <param name="elementSelector">A selector identifying the element to press.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">
            The element specified by <paramref name="elementSelector" /> is not <see cref="F:HP.DeviceAutomation.Jedi.OmniElementState.Useable" />.
            <para>or</para>
            The scroll operation failed.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.ScrollPressWait(System.String,System.String)">
      <summary>
            Scrolls to and presses an element using the specified selector, then waits for another element to be <see cref="F:HP.DeviceAutomation.Jedi.OmniElementState.Useable" />.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediOmniControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="elementSelector">A selector identifying the element to press.</param>
      <param name="newElementSelector">A selector identifying the element to wait for.</param>
      <returns>
        <c>true</c> if the new element was <see cref="F:HP.DeviceAutomation.Jedi.OmniElementState.Useable" /> within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.
            <para>or</para><paramref name="newElementSelector" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">
            The element specified by <paramref name="elementSelector" /> is not <see cref="F:HP.DeviceAutomation.Jedi.OmniElementState.Useable" />.
            <para>or</para>
            The scroll operation failed.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.ScrollPressWait(System.String,System.String,System.TimeSpan)">
      <summary>
            Scrolls to and presses an element using the specified selector, then waits for another element to be <see cref="F:HP.DeviceAutomation.Jedi.OmniElementState.Useable" />.
            </summary>
      <param name="elementSelector">A selector identifying the element to press.</param>
      <param name="newElementSelector">A selector identifying the element to wait for.</param>
      <param name="waitTime">The amount of time to wait for the new element to be <see cref="F:HP.DeviceAutomation.Jedi.OmniElementState.Useable" />.</param>
      <returns>
        <c>true</c> if the new element was <see cref="F:HP.DeviceAutomation.Jedi.OmniElementState.Useable" /> within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.
            <para>or</para><paramref name="newElementSelector" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">
            The element specified by <paramref name="elementSelector" /> is not <see cref="F:HP.DeviceAutomation.Jedi.OmniElementState.Useable" />.
            <para>or</para>
            The scroll operation failed.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.SetSliderValue(System.String,System.Int32)">
      <summary>
            Sets the value of a slider element using the specified selector.
            </summary>
      <param name="elementSelector">A selector identifying the slider to set.</param>
      <param name="value">The value to set the slider to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">The element specified by <paramref name="elementSelector" /> is not a valid input element.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.WaitForState(System.String,HP.DeviceAutomation.Jedi.OmniElementState)">
      <summary>
            Waits for an element to be in the specified state using the specified selector.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediOmniControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="elementSelector">A selector identifying the element to examine.</param>
      <param name="state">The <see cref="T:HP.DeviceAutomation.Jedi.OmniElementState" /> to wait for the element to be in.</param>
      <returns>
        <c>true</c> if the new element was in the specified state within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.WaitForState(System.String,HP.DeviceAutomation.Jedi.OmniElementState,System.TimeSpan)">
      <summary>
            Waits for an element to be in the specified state using the specified selector.
            </summary>
      <param name="elementSelector">A selector identifying the element to examine.</param>
      <param name="state">The <see cref="T:HP.DeviceAutomation.Jedi.OmniElementState" /> to wait for the element to be in.</param>
      <param name="waitTime">The amount of time to wait for the element to be in the specified state.</param>
      <returns>
        <c>true</c> if the new element was in the specified state within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.WaitForState(System.String,HP.DeviceAutomation.Jedi.OmniElementState,System.Boolean)">
      <summary>
            Waits for an element to enter or leave the specified state using the specified selector.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediOmniControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="elementSelector">A selector identifying the element to examine.</param>
      <param name="state">The <see cref="T:HP.DeviceAutomation.Jedi.OmniElementState" /> to check.</param>
      <param name="stateIs">if set to <c>true</c> wait for the element to be in the specified state; otherwise, wait for the element to not be in the specified state.</param>
      <returns>
        <c>true</c> if the new element entered or left the specified state within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.WaitForState(System.String,HP.DeviceAutomation.Jedi.OmniElementState,System.Boolean,System.TimeSpan)">
      <summary>
            Waits for an element to enter or leave the specified state using the specified selector.
            </summary>
      <param name="elementSelector">A selector identifying the element to examine.</param>
      <param name="state">The <see cref="T:HP.DeviceAutomation.Jedi.OmniElementState" /> to check.</param>
      <param name="stateIs">if set to <c>true</c> wait for the element to be in the specified state; otherwise, wait for the element to not be in the specified state.</param>
      <param name="waitTime">The amount of time to wait for the element to enter or leave the specified state.</param>
      <returns>
        <c>true</c> if the new element entered or left the specified state within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.WaitForValue(System.String,System.String,HP.DeviceAutomation.Jedi.OmniPropertyType,System.String)">
      <summary>
            Waits for an element to have the specified property value using the specified selector.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediOmniControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="elementSelector">A selector identifying the element to examine.</param>
      <param name="propertyName">The property of the element to monitor.</param>
      <param name="propertyType">An <see cref="T:HP.DeviceAutomation.Jedi.OmniPropertyType" /> identifying the type of property to retrieve.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">The element specified by <paramref name="elementSelector" /> does not have the requested property.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.WaitForValue(System.String,System.String,HP.DeviceAutomation.Jedi.OmniPropertyType,System.String,System.TimeSpan)">
      <summary>
            Waits for an element value to match the specified value using the specified selector.
            </summary>
      <param name="elementSelector">A selector identifying the element to examine.</param>
      <param name="propertyName">The property of the element to monitor.</param>
      <param name="propertyType">An <see cref="T:HP.DeviceAutomation.Jedi.OmniPropertyType" /> identifying the type of property to retrieve.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <param name="waitTime">The amount of time to wait for the element to have the specified property value.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">The element specified by <paramref name="elementSelector" /> does not have the requested property.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.WaitForValue(System.String,System.String,HP.DeviceAutomation.Jedi.OmniPropertyType,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Waits for an element value to match the specified value using the specified selector and <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediOmniControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="elementSelector">A selector identifying the element to examine.</param>
      <param name="propertyName">The property of the element to monitor.</param>
      <param name="propertyType">An <see cref="T:HP.DeviceAutomation.Jedi.OmniPropertyType" /> identifying the type of property to retrieve.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">The element specified by <paramref name="elementSelector" /> does not have the requested property.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.WaitForValue(System.String,System.String,HP.DeviceAutomation.Jedi.OmniPropertyType,System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for an element value to match the specified value using the specified selector and <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="elementSelector">A selector identifying the element to examine.</param>
      <param name="propertyName">The property of the element to monitor.</param>
      <param name="propertyType">An <see cref="T:HP.DeviceAutomation.Jedi.OmniPropertyType" /> identifying the type of property to retrieve.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the element to have the specified property value.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">The element specified by <paramref name="elementSelector" /> does not have the requested property.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.WaitForValue``1(System.String,System.String,HP.DeviceAutomation.Jedi.OmniPropertyType,``0)">
      <summary>
            Waits for an element value to match the specified value using the specified selector.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediOmniControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <typeparam name="T">The type of object to retrieve.</typeparam>
      <param name="elementSelector">A selector identifying the element to examine.</param>
      <param name="propertyName">The property of the element to monitor.</param>
      <param name="propertyType">An <see cref="T:HP.DeviceAutomation.Jedi.OmniPropertyType" /> identifying the type of property to retrieve.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:System.FormatException">The property value could not be converted to the specified type <typeparamref name="T" />.</exception>
      <exception cref="T:System.InvalidCastException">Conversion to the specified type <typeparamref name="T" /> is not supported.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">The element specified by <paramref name="elementSelector" /> does not have the requested property.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.WaitForValue``1(System.String,System.String,HP.DeviceAutomation.Jedi.OmniPropertyType,``0,System.TimeSpan)">
      <summary>
            Waits for an element value to match the specified value using the specified selector.
            </summary>
      <typeparam name="T">The type of object to retrieve.</typeparam>
      <param name="elementSelector">A selector identifying the element to examine.</param>
      <param name="propertyName">The property of the element to monitor.</param>
      <param name="propertyType">An <see cref="T:HP.DeviceAutomation.Jedi.OmniPropertyType" /> identifying the type of property to retrieve.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <param name="waitTime">The amount of time to wait for the element to have the specified property value.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:System.FormatException">The property value could not be converted to the specified type <typeparamref name="T" />.</exception>
      <exception cref="T:System.InvalidCastException">Conversion to the specified type <typeparamref name="T" /> is not supported.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">The element specified by <paramref name="elementSelector" /> does not have the requested property.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.SignalUserActivity">
      <summary>
            Simulates user activity at the control panel to wake the device and reset the inactivity timeout.
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.ScreenCapture">
      <summary>
            Retrieves an <see cref="T:System.Drawing.Image" /> containing a screen capture of the control panel.
            </summary>
      <returns>An image of the control panel in PNG format.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.ExecuteJavaScript(System.String)">
      <summary>
            Executes the specified JavaScript in the topmost embedded browser.
            </summary>
      <param name="script">The JavaScript to execute.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.ExecuteJavaScript(System.String,System.String)">
      <summary>
            Executes the specified JavaScript in the embedded browser using the specified UI context ID.
            </summary>
      <param name="uiContextId">The UI context identifier.  (Passing in null executes the JavaScript in the topmost browser.)</param>
      <param name="script">The JavaScript to execute.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.ExecuteJavaScript(System.String,System.TimeSpan)">
      <summary>
            Executes the specified JavaScript in the topmost embedded browser.
            Waits for the browser to be idle before executing the script and throws if the browser does not become idle within the specified time.
            </summary>
      <param name="script">The JavaScript to execute.</param>
      <param name="browserIdleWaitTime">The amount of time to wait for the browser to be idle.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">
            The device browser did not reach an idle state within the specified <paramref name="browserIdleWaitTime" />.
            <para>or</para>
            The device service threw an exception.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniControlPanel.ExecuteJavaScript(System.String,System.String,System.TimeSpan)">
      <summary>
            Executes the specified JavaScript in the embedded browser using the specified UI context ID.
            Waits for the browser to be idle before executing the script and throws if the browser does not become idle within the specified time.
            </summary>
      <param name="uiContextId">The UI context identifier.  (Passing in null executes the JavaScript in the topmost browser.)</param>
      <param name="script">The JavaScript to execute.</param>
      <param name="browserIdleWaitTime">The amount of time to wait for the browser to be idle.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">
            The device browser did not reach an idle state within the specified <paramref name="browserIdleWaitTime" />.
            <para>or</para>
            The device service threw an exception.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediOmniControlPanel.DefaultWaitTime">
      <summary>
            Gets or sets the default wait time for control panel operations that require waiting for a new state.
            The default value is 30 seconds.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.JediOmniDevice">
      <summary>
            Represents a device running Jedi firmware with an Omni presentation framework.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniDevice.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediOmniDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniDevice.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediOmniDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniDevice.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediOmniDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniDevice.#ctor(System.Net.IPAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediOmniDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniDevice.#ctor(HP.DeviceAutomation.DeviceConstructionParameterCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediOmniDevice" /> class
            with the specified <see cref="T:HP.DeviceAutomation.DeviceConstructionParameterCollection" />.
            </summary>
      <param name="parameters">The device construction parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediOmniDevice.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediOmniDevice.ControlPanel">
      <summary>
            Gets the control panel for this <see cref="T:HP.DeviceAutomation.Jedi.JediOmniDevice" />.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.JediPowerManager">
      <summary>
            Provides access to settings and functionality related to power management.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediPowerManager.#ctor(HP.DeviceAutomation.Jedi.JediWebServices,HP.DeviceAutomation.Snmp)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediPowerManager" /> class.
            </summary>
      <param name="webServices">The <see cref="T:HP.DeviceAutomation.Jedi.JediWebServices" /> communication object.</param>
      <param name="snmp">The <see cref="T:HP.DeviceAutomation.Snmp" /> communication object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="webServices" /> is null.
            <para>or</para><paramref name="snmp" /> is null.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediPowerManager.Wake">
      <summary>
            Wakes the device.
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediPowerManager.GetPowerState">
      <summary>
            Gets the current power state of the device.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.PowerState" /> object representing the power state of the device.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediPowerManager.GetInactivityTimeout">
      <summary>
            Gets the device inactivity timeout.
            </summary>
      <returns>The device inactivity timeout.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediPowerManager.SetInactivityTimeout(System.TimeSpan)">
      <summary>
            Sets the device inactivity timeout.
            </summary>
      <param name="timeout">The inactivity timeout to set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is not in the allowable range for the device.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediPowerManager.Reboot">
      <summary>
            Reboots the device.  Equivalent to turning the device off and then on again.
            (This method does not wait for the device to return to a ready state.)
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediPowerManager.ResetToNvram">
      <summary>
            Resets the device to NVRAM, clearing all data and settings.
            (This method does not wait for the device to return to a ready state.)
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediPowerManager.ResetToFactoryDefaults">
      <summary>
            Performs power on initialization routines and changes all configurable settings back to factory defaults.
            Equivalent to a Cold Reset from the control panel.
            (This method does not wait for the device to return to a ready state.)
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.JediSystemTest">
      <summary>
            Enables SystemTest mode on Jedi devices.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediSystemTest.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediSystemTest" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediSystemTest.#ctor(HP.DeviceAutomation.DeviceNetworkAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediSystemTest" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediSystemTest.IsEnabled">
      <summary>
            Determines whether the device is in Production mode with SystemTest enabled.
            </summary>
      <returns>
        <c>true</c> if the device is in Production mode and SystemTest is enabled; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediSystemTest.IsSupported">
      <summary>
            Determines whether the device is in Production mode and supports the SystemTest feature.
            </summary>
      <returns>
        <c>true</c> if the device is in Production mode and supports the SystemTest feature; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediSystemTest.Enable">
      <summary>
            Attempts to enable SystemTest on the device and returns a value indicating whether it is now enabled.
            If SystemTest is already enabled, this method returns <c>true</c>.
            If SystemTest is not supported on the device, this method returns <c>false</c>.
            </summary>
      <returns>
        <c>true</c> if SystemTest is enabled on the device; otherwise, <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.JediWebServices">
      <summary>
            Provides access to Jedi Web Services (WS*) endpoints and URNs.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWebServices.#ctor(HP.DeviceAutomation.DeviceNetworkAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediWebServices" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWebServices.GetDeviceEndpoints">
      <summary>
            Retrieves a list of WS* endpoints for the device.
            </summary>
      <returns>A list of WS* endpoints.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWebServices.GetEndpointUrns(System.String)">
      <summary>
            Gets the list of URNs for the specified WS* endpoint.
            </summary>
      <param name="endpoint">The WS* endpoint name.</param>
      <returns>A list of URNs for the specified endpoint.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWebServices.GetDeviceTicket(System.String,System.String)">
      <summary>
            Retrieves the ticket information from the specified WS* endpoint and URN.
            </summary>
      <param name="endpoint">The WS* endpoint name.</param>
      <param name="urn">The URN of the ticket to retrieve.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Jedi.WebServiceTicket" /> containing the WS* data.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WebServicesInvalidOperationException">The attempted web services operation was invalid or returned an error.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WebServicesSelectorRequiredException">A selector key and value is required for the specified action.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWebServices.GetDeviceTicket(System.String,System.String,System.String,System.String)">
      <summary>
            Retrieves the ticket information from the specified WS* endpoint and URN using the specified selector.
            </summary>
      <param name="endpoint">The WS* endpoint name.</param>
      <param name="urn">The URN of the ticket to retrieve.</param>
      <param name="selectorName">The selector name.</param>
      <param name="selectorValue">The selector value.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Jedi.WebServiceTicket" /> containing the WS* data.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WebServicesInvalidOperationException">The attempted web services operation was invalid or returned an error.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWebServices.PutDeviceTicket(System.String,System.String,HP.DeviceAutomation.Jedi.WebServiceTicket)">
      <summary>
            Submits the specified ticket information to the specified WS* endpoint and URN.
            </summary>
      <param name="endpoint">The WS* endpoint name.</param>
      <param name="urn">The URN of the ticket to submit.</param>
      <param name="body">A <see cref="T:HP.DeviceAutomation.Jedi.WebServiceTicket" /> containing the WS* data.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Jedi.WebServiceTicket" /> containing the WS* data retrieved after the put operation.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WebServicesInvalidOperationException">The attempted web services operation was invalid or returned an error.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WebServicesSelectorRequiredException">A selector key and value is required for the specified action.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWebServices.PutDeviceTicket(System.String,System.String,HP.DeviceAutomation.Jedi.WebServiceTicket,System.String,System.String)">
      <summary>
            Submits the specified ticket information to the specified WS* endpoint and URN using the specified selector.
            </summary>
      <param name="endpoint">The WS* endpoint name.</param>
      <param name="urn">The URN of the ticket to submit.</param>
      <param name="body">A <see cref="T:HP.DeviceAutomation.Jedi.WebServiceTicket" /> containing the WS* data.</param>
      <param name="selectorName">The selector name.</param>
      <param name="selectorValue">The selector value.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Jedi.WebServiceTicket" /> containing the WS* data retrieved after the put operation.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WebServicesInvalidOperationException">The attempted web services operation was invalid or returned an error.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWebServices.PutDeviceTicket(System.String,System.String,HP.DeviceAutomation.Jedi.WebServiceTicket,System.Boolean)">
      <summary>
            Submits the specified ticket information to the specified WS* endpoint and URN.
            </summary>
      <param name="endpoint">The WS* endpoint name.</param>
      <param name="urn">The URN of the ticket to submit.</param>
      <param name="body">A <see cref="T:HP.DeviceAutomation.Jedi.WebServiceTicket" /> containing the WS* data.</param>
      <param name="getResult">if set to <c>true</c> perform a get operation to retrieve the WS* data after the put operation.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Jedi.WebServiceTicket" /> containing the WS* data retrieved after the put operation, or null if <paramref name="getResult" /> is <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WebServicesInvalidOperationException">The attempted web services operation was invalid or returned an error.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WebServicesSelectorRequiredException">A selector key and value is required for the specified action.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWebServices.PutDeviceTicket(System.String,System.String,HP.DeviceAutomation.Jedi.WebServiceTicket,System.String,System.String,System.Boolean)">
      <summary>
            Submits the specified ticket information to the specified WS* endpoint and URN using the specified selector.
            </summary>
      <param name="endpoint">The WS* endpoint name.</param>
      <param name="urn">The URN of the ticket to submit.</param>
      <param name="body">A <see cref="T:HP.DeviceAutomation.Jedi.WebServiceTicket" /> containing the WS* data.</param>
      <param name="selectorName">The selector name.</param>
      <param name="selectorValue">The selector value.</param>
      <param name="getResult">if set to <c>true</c> perform a get operation to retrieve the WS* data after the put operation.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Jedi.WebServiceTicket" /> containing the WS* data retrieved after the put operation, or null if <paramref name="getResult" /> is <c>false</c>.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WebServicesInvalidOperationException">The attempted web services operation was invalid or returned an error.</exception>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediWebServices.Locale">
      <summary>
            Gets or sets the locale to use for WS* operations.
            The default value is "en-US".
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel">
      <summary>
            Control panel for a Jedi device using a Windjammer presentation framework.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.#ctor(HP.DeviceAutomation.DeviceNetworkAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.#ctor(HP.DeviceAutomation.DeviceNetworkAddress,HP.DeviceAutomation.DeviceNetworkAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="debugAddress">The debug card address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.
            <para>or</para><paramref name="debugAddress" /> is null.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.CurrentForm">
      <summary>
            Returns the name of the top form on the forms manager.
            </summary>
      <returns>The name of the current form.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.GetControls">
      <summary>
            Gets the names of all controls on the current form.
            </summary>
      <returns>The names of all controls on the current form.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.GetProperty(System.String,System.String)">
      <summary>
            Gets the value of the specified property of the control with the specified name.
            </summary>
      <param name="controlName">The name of the control to inspect.</param>
      <param name="propertyPath">The path to the property to retrieve.</param>
      <returns>The property value.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyPath" /> is not valid for the specified control.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="propertyPath" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.GetProperty``1(System.String,System.String)">
      <summary>
            Gets the value of the specified property of the control with the specified name.
            </summary>
      <typeparam name="T">The type of object to retrieve.</typeparam>
      <param name="controlName">The name of the control to inspect.</param>
      <param name="propertyPath">The path to the property to retrieve.</param>
      <returns>The property value.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyPath" /> is not valid for the specified control.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="propertyPath" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:System.FormatException">The property value could not be converted to the specified type <typeparamref name="T" />.</exception>
      <exception cref="T:System.InvalidCastException">Conversion to the specified type <typeparamref name="T" /> is not supported.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.SetProperty(System.String,System.String,System.Object)">
      <summary>
            Sets a control property to the specified value.
            </summary>
      <param name="controlName">The name of the control.</param>
      <param name="propertyPath">The path to the property that should be set.</param>
      <param name="propertyValue">The value the property should be set to.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyPath" /> is not valid for the specified control.
            <para>or</para>
            The type of <paramref name="propertyValue" /> did not match the type required by <paramref name="propertyPath" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="propertyPath" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.Press(System.String)">
      <summary>
            Presses the control with the specified name.
            </summary>
      <param name="controlName">The name of the control to press.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
            The control was not enabled.
            <para>or</para>
            The control did not fire the event indicating it had been pressed.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.PressToNavigate(System.String,System.String,System.Boolean)">
      <summary>
            Presses the control with the specified name, causing a new form to be displayed.
            </summary>
      <param name="controlName">The name of the control to press.</param>
      <param name="newFormName">The name of the new form that will be displayed.</param>
      <param name="ignorePopups">if set to <c>true</c> ignore pop-ups that appear before the expected form is displayed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
            The control was not enabled.
            <para>or</para>
            The control panel timed out waiting for the specified form.
            <para>or</para><paramref name="ignorePopups" /> is set to <c>false</c> and a form appeared that was different than the expected new form.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.PressWait(System.String,System.String)">
      <summary>
            Presses the control with the specified name and waits for the specified form.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="controlName">The name of the control to press.</param>
      <param name="newFormName">The name of the new form to wait for.</param>
      <returns>
        <c>true</c> if the new form appears within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="newFormName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">The control was not enabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.PressWait(System.String,System.String,System.TimeSpan)">
      <summary>
            Presses the control with the specified name and waits for the specified form.
            </summary>
      <param name="controlName">The name of the control to press.</param>
      <param name="newFormName">The name of the new form to wait for.</param>
      <param name="waitTime">The amount of time to wait for the new form.</param>
      <returns>
        <c>true</c> if the new form appears within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="newFormName" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">The control was not enabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.PressWait(System.String,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Presses the control with the specified name and waits for the specified form using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="controlName">The name of the control to press.</param>
      <param name="newFormName">The name of the new form to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>
        <c>true</c> if the new form appears within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="newFormName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">The control was not enabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.PressWait(System.String,System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Presses the control with the specified name and waits for the specified form using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="controlName">The name of the control to press.</param>
      <param name="newFormName">The name of the new form to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the new form.</param>
      <returns>
        <c>true</c> if the new form appears within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="newFormName" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">The control was not enabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.PressKey(HP.DeviceAutomation.Jedi.JediHardKey)">
      <summary>
            Presses the specified hard key.
            </summary>
      <param name="key">The <see cref="T:HP.DeviceAutomation.Jedi.JediHardKey" /> to press.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.PressKeyWait(HP.DeviceAutomation.Jedi.JediHardKey,System.String)">
      <summary>
            Presses the specified hard key and waits for the specified form to be on top of the forms stack.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="key">The <see cref="T:HP.DeviceAutomation.Jedi.JediHardKey" /> to press.</param>
      <param name="formName">The name of the form to wait for.</param>
      <returns>
        <c>true</c> if the form appears within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.PressKeyWait(HP.DeviceAutomation.Jedi.JediHardKey,System.String,System.TimeSpan)">
      <summary>
            Presses the specified hard key and waits for the specified form to be on top of the forms stack.
            </summary>
      <param name="key">The <see cref="T:HP.DeviceAutomation.Jedi.JediHardKey" /> to press.</param>
      <param name="formName">The name of the form to wait for.</param>
      <param name="waitTime">The amount of time to wait for the form.</param>
      <returns>
        <c>true</c> if the form appears within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.PressKeyWait(HP.DeviceAutomation.Jedi.JediHardKey,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Presses the specified hard key and waits for the specified form to be on top of the forms stack
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="key">The <see cref="T:HP.DeviceAutomation.Jedi.JediHardKey" /> to press.</param>
      <param name="formName">The name of the form to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>
        <c>true</c> if the form appears within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.PressKeyWait(HP.DeviceAutomation.Jedi.JediHardKey,System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Presses the specified hard key and waits for the specified form to be on top of the forms stack
            using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="key">The <see cref="T:HP.DeviceAutomation.Jedi.JediHardKey" /> to press.</param>
      <param name="formName">The name of the form to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the form.</param>
      <returns>
        <c>true</c> if the form appears within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.PressScreen(System.Int32,System.Int32)">
      <summary>
            Presses the touchscreen at the specified coordinates.
            </summary>
      <param name="x">The x-coordinate.</param>
      <param name="y">The y-coordinate.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.PressScreen(HP.DeviceAutomation.Coordinate)">
      <summary>
            Presses the touchscreen at the specified <see cref="T:HP.DeviceAutomation.Coordinate" />.
            </summary>
      <param name="coordinate">The coordinate to press.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.Type(System.String)">
      <summary>
            Types the specified text into the control panel.
            </summary>
      <param name="text">The text to type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.Type(HP.DeviceAutomation.SpecialCharacter)">
      <summary>
            Types the specified special character into the control panel.
            </summary>
      <param name="specialCharacter">The <see cref="T:HP.DeviceAutomation.SpecialCharacter" /> to type.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.TypeOnVirtualKeyboard(System.String,System.String)">
      <summary>
            Types the specified text on a virtual keyboard displayed on the control panel.
            </summary>
      <param name="controlName">The name of the virtual keyboard control.</param>
      <param name="text">The text to type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="text" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.ScrollToItem(System.String,System.String)">
      <summary>
            Scrolls to the control with the specified name.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="controlName">The name of the control to scroll to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scrollControlName" /> is null.
            <para>or</para><paramref name="controlName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
            The control specified by <paramref name="scrollControlName" /> could not be found on the control panel.
            <para>or</para>
            The control specified by <paramref name="controlName" /> could not be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">The control specified by <paramref name="scrollControlName" /> is not a valid scroll control.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.ScrollToItem(System.String,System.String,System.Object)">
      <summary>
            Scrolls to the control with the specified property value.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scrollControlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
            The control specified by <paramref name="scrollControlName" /> could not be found on the control panel.
            <para>or</para>
            No control with the specified property value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">The control specified by <paramref name="scrollControlName" /> is not a valid scroll control.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.ScrollPress(System.String,System.String)">
      <summary>
            Scrolls to and presses the control with the specified name.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="controlName">The name of the control to press.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scrollControlName" /> is null.
            <para>or</para><paramref name="controlName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
            The control specified by <paramref name="scrollControlName" /> could not be found on the control panel.
            <para>or</para>
            The control specified by <paramref name="controlName" /> could not be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
            The control specified by <paramref name="scrollControlName" /> is not a valid scroll control.
            <para>or</para>
            The control with the specified property value was not enabled.
            <para>or</para>
            The control did not fire the event indicating it had been pressed.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.ScrollPress(System.String,System.String,System.Object)">
      <summary>
            Scrolls to and presses the control with the specified property value.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scrollControlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
            The control specified by <paramref name="scrollControlName" /> could not be found on the control panel.
            <para>or</para>
            No control with the specified property value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
            The control specified by <paramref name="scrollControlName" /> is not a valid scroll control.
            <para>or</para>
            The control with the specified property value was not enabled.
            <para>or</para>
            The control did not fire the event indicating it had been pressed.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.ScrollPressNavigate(System.String,System.String,System.String,System.Boolean)">
      <summary>
            Scrolls to and presses the control with the specified name, causing a new form to be displayed.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="controlName">The name of the control to press.</param>
      <param name="newFormName">The name of the new form that will be displayed.</param>
      <param name="ignorePopups">if set to <c>true</c> ignore pop-ups that appear before the expected form is displayed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scrollControlName" /> is null.
            <para>or</para><paramref name="controlName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
            The control specified by <paramref name="scrollControlName" /> could not be found on the control panel.
            <para>or</para>
            The control specified by <paramref name="controlName" /> could not be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
            The control specified by <paramref name="scrollControlName" /> is not a valid scroll control.
            <para>or</para>
            The control with the specified property value was not enabled.
            <para>or</para>
            The control panel timed out waiting for the specified form.
            <para>or</para><paramref name="ignorePopups" /> is set to <c>false</c> and a form appeared that was different than the expected new form.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.ScrollPressNavigate(System.String,System.String,System.Object,System.String,System.Boolean)">
      <summary>
            Scrolls to and presses the control with the specified property value, causing a new form to be displayed.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <param name="newFormName">The name of the new form that will be displayed.</param>
      <param name="ignorePopups">if set to <c>true</c> ignore pop-ups that appear before the expected form is displayed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scrollControlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
            The control specified by <paramref name="scrollControlName" /> could not be found on the control panel.
            <para>or</para>
            No control with the specified property value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
            The control specified by <paramref name="scrollControlName" /> is not a valid scroll control.
            <para>or</para>
            The control with the specified property value was not enabled.
            <para>or</para>
            The control panel timed out waiting for the specified form.
            <para>or</para><paramref name="ignorePopups" /> is set to <c>false</c> and a form appeared that was different than the expected new form.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.ScrollPressWait(System.String,System.String,System.String)">
      <summary>
            Scrolls to and presses the control with the specified name and waits for the specified form.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="controlName">The name of the control to press.</param>
      <param name="newFormName">The name of the new form to wait for.</param>
      <returns>
        <c>true</c> if the new form appears within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scrollControlName" /> is null.
            <para>or</para><paramref name="controlName" /> is null.
            <para>or</para><paramref name="newFormName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
            The control specified by <paramref name="scrollControlName" /> could not be found on the control panel.
            <para>or</para>
            The control specified by <paramref name="controlName" /> could not be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
            The control specified by <paramref name="scrollControlName" /> is not a valid scroll control.
            <para>or</para>
            The control with the specified property value was not enabled.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.ScrollPressWait(System.String,System.String,System.String,System.TimeSpan)">
      <summary>
            Scrolls to and presses the control with the specified name and waits for the specified form.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="controlName">The name of the control to press.</param>
      <param name="newFormName">The name of the new form to wait for.</param>
      <param name="waitTime">The amount of time to wait for the new form.</param>
      <returns>
        <c>true</c> if the new form appears within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scrollControlName" /> is null.
            <para>or</para><paramref name="controlName" /> is null.
            <para>or</para><paramref name="newFormName" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
            The control specified by <paramref name="scrollControlName" /> could not be found on the control panel.
            <para>or</para>
            The control specified by <paramref name="controlName" /> could not be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
            The control specified by <paramref name="scrollControlName" /> is not a valid scroll control.
            <para>or</para>
            The control with the specified property value was not enabled.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.ScrollPressWait(System.String,System.String,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Scrolls to and presses the control with the specified name and waits for the specified form using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="controlName">The name of the control to press.</param>
      <param name="newFormName">The name of the new form to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>
        <c>true</c> if the new form appears within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scrollControlName" /> is null.
            <para>or</para><paramref name="controlName" /> is null.
            <para>or</para><paramref name="newFormName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
            The control specified by <paramref name="scrollControlName" /> could not be found on the control panel.
            <para>or</para>
            The control specified by <paramref name="controlName" /> could not be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
            The control specified by <paramref name="scrollControlName" /> is not a valid scroll control.
            <para>or</para>
            The control with the specified property value was not enabled.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.ScrollPressWait(System.String,System.String,System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Scrolls to and presses the control with the specified name and waits for the specified form using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="controlName">The name of the control to press.</param>
      <param name="newFormName">The name of the new form to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the new form.</param>
      <returns>
        <c>true</c> if the new form appears within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scrollControlName" /> is null.
            <para>or</para><paramref name="controlName" /> is null.
            <para>or</para><paramref name="newFormName" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
            The control specified by <paramref name="scrollControlName" /> could not be found on the control panel.
            <para>or</para>
            The control specified by <paramref name="controlName" /> could not be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
            The control specified by <paramref name="scrollControlName" /> is not a valid scroll control.
            <para>or</para>
            The control with the specified property value was not enabled.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.ScrollPressWait(System.String,System.String,System.Object,System.String)">
      <summary>
            Scrolls to and presses the control with the specified property value and waits for the specified form.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <param name="newFormName">The name of the new form to wait for.</param>
      <returns>
        <c>true</c> if the new form appears within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scrollControlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            <para>or</para><paramref name="newFormName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
            The control specified by <paramref name="scrollControlName" /> could not be found on the control panel.
            <para>or</para>
            No control with the specified property value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
            The control specified by <paramref name="scrollControlName" /> is not a valid scroll control.
            <para>or</para>
            The control with the specified property value was not enabled.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.ScrollPressWait(System.String,System.String,System.Object,System.String,System.TimeSpan)">
      <summary>
            Scrolls to and presses the control with the specified property value and waits for the specified form.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <param name="newFormName">The name of the new form to wait for.</param>
      <param name="waitTime">The amount of time to wait for the new form.</param>
      <returns>
        <c>true</c> if the new form appears within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scrollControlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            <para>or</para><paramref name="newFormName" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
            The control specified by <paramref name="scrollControlName" /> could not be found on the control panel.
            <para>or</para>
            No control with the specified property value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
            The control specified by <paramref name="scrollControlName" /> is not a valid scroll control.
            <para>or</para>
            The control with the specified property value was not enabled.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.ScrollPressWait(System.String,System.String,System.Object,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Scrolls to and presses the control with the specified property value and waits for the specified form using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <param name="newFormName">The name of the new form to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>
        <c>true</c> if the new form appears within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scrollControlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            <para>or</para><paramref name="newFormName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
            The control specified by <paramref name="scrollControlName" /> could not be found on the control panel.
            <para>or</para>
            No control with the specified property value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
            The control specified by <paramref name="scrollControlName" /> is not a valid scroll control.
            <para>or</para>
            The control with the specified property value was not enabled.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.ScrollPressWait(System.String,System.String,System.Object,System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Scrolls to and presses the control with the specified property value and waits for the specified form using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <param name="newFormName">The name of the new form to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the new form.</param>
      <returns>
        <c>true</c> if the new form appears within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scrollControlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            <para>or</para><paramref name="newFormName" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
            The control specified by <paramref name="scrollControlName" /> could not be found on the control panel.
            <para>or</para>
            No control with the specified property value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
            The control specified by <paramref name="scrollControlName" /> is not a valid scroll control.
            <para>or</para>
            The control with the specified property value was not enabled.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.WaitForPropertyValue(System.String,System.String,System.String)">
      <summary>
            Waits for a control to have the specified property value.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="controlName">The name of the control.</param>
      <param name="propertyName">The property of the control to monitor.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyName" /> is not valid for the specified control.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.WaitForPropertyValue(System.String,System.String,System.String,System.TimeSpan)">
      <summary>
            Waits for a control to have the specified property value.
            </summary>
      <param name="controlName">The name of the control.</param>
      <param name="propertyName">The property of the control to monitor.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <param name="waitTime">The amount of time to wait for the control to have the specified property value.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyName" /> is not valid for the specified control.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.WaitForPropertyValue(System.String,System.String,System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Waits for a control to have the specified property value using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="controlName">The name of the control.</param>
      <param name="propertyName">The property of the control to monitor.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyName" /> is not valid for the specified control.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.WaitForPropertyValue(System.String,System.String,System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for a control to have the specified property value using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="controlName">The name of the control.</param>
      <param name="propertyName">The property of the control to monitor.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the control to have the specified property value.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyName" /> is not valid for the specified control.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.WaitForPropertyValue``1(System.String,System.String,``0)">
      <summary>
            Waits for a control to have the specified property value.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <typeparam name="T">The type of the property value.</typeparam>
      <param name="controlName">The name of the control.</param>
      <param name="propertyName">The property of the control to monitor.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyName" /> is not valid for the specified control.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:System.FormatException">The property value could not be converted to the specified type <typeparamref name="T" />.</exception>
      <exception cref="T:System.InvalidCastException">Conversion to the specified type <typeparamref name="T" /> is not supported.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.WaitForPropertyValue``1(System.String,System.String,``0,System.TimeSpan)">
      <summary>
            Waits for a control to have the specified property value.
            </summary>
      <typeparam name="T">The type of the property value.</typeparam>
      <param name="controlName">The name of the control.</param>
      <param name="propertyName">The property of the control to monitor.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <param name="waitTime">The amount of time to wait for the control to have the specified property value.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyName" /> is not valid for the specified control.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:System.FormatException">The property value could not be converted to the specified type <typeparamref name="T" />.</exception>
      <exception cref="T:System.InvalidCastException">Conversion to the specified type <typeparamref name="T" /> is not supported.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.WaitForControl(System.String)">
      <summary>
            Waits for a control with the specified name to exist.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="controlName">The name of the control to wait for.</param>
      <returns>
        <c>true</c> if the control is found within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.WaitForControl(System.String,System.TimeSpan)">
      <summary>
            Waits for a control with the specified name to exist.
            </summary>
      <param name="controlName">The name of the control to wait for.</param>
      <param name="waitTime">The amount of time to wait for the control.</param>
      <returns>
        <c>true</c> if the control is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.WaitForControl(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Waits for a control with the specified name to exist using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="controlName">The name of the control to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>
        <c>true</c> if the control is found within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.WaitForControl(System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for a control with the specified name to exist using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="controlName">The name of the control to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the control.</param>
      <returns>
        <c>true</c> if the control is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.WaitForForm(System.String)">
      <summary>
            Waits for the specified form to be on top of the forms stack.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="formName">The name of the form to wait for.</param>
      <returns>
        <c>true</c> if the form appears within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.WaitForForm(System.String,System.TimeSpan)">
      <summary>
            Waits for the specified form to be on top of the forms stack.
            </summary>
      <param name="formName">The name of the form to wait for.</param>
      <param name="waitTime">The amount of time to wait for the form.</param>
      <returns>
        <c>true</c> if the form appears within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formName" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.WaitForForm(System.String,HP.DeviceAutomation.StringMatch)">
      <summary>
            Waits for the specified form to be on top of the forms stack using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            Uses <see cref="P:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.DefaultWaitTime" /> as the length of time to wait.
            </summary>
      <param name="formName">The name of the form to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <returns>
        <c>true</c> if the form appears within the default wait time; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.WaitForForm(System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for the specified form to be on top of the forms stack using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="formName">The name of the form to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the form.</param>
      <returns>
        <c>true</c> if the form appears within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formName" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.WaitForForm(System.String,System.Boolean)">
      <summary>
            Waits for the specified form to be on top of the forms stack, optionally ignoring pop-ups.
            </summary>
      <param name="formName">The name of the form to wait for.</param>
      <param name="ignorePopups">if set to <c>true</c> ignore pop-ups that appear before the expected form is displayed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
            The control panel timed out waiting for the specified form.
            <para>or</para><paramref name="ignorePopups" /> is set to <c>false</c> and a form appeared that was different than the expected new form.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.ScreenCapture">
      <summary>
            Retrieves an <see cref="T:System.Drawing.Image" /> containing a screen capture of the control panel.
            </summary>
      <returns>An image of the control panel in PNG format.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.ExecuteJavaScript(System.String)">
      <summary>
            Executes the specified JavaScript in the topmost embedded browser.
            </summary>
      <param name="script">The JavaScript to execute.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.ExecuteJavaScript(System.String,System.String)">
      <summary>
            Executes the specified JavaScript in the embedded browser using the specified UI context ID.
            </summary>
      <param name="uiContextId">The UI context identifier.  (Passing in null executes the JavaScript in the topmost browser.)</param>
      <param name="script">The JavaScript to execute.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.ExecuteJavaScript(System.String,System.TimeSpan)">
      <summary>
            Executes the specified JavaScript in the topmost embedded browser.
            Waits for the browser to be idle before executing the script and throws if the browser does not become idle within the specified time.
            </summary>
      <param name="script">The JavaScript to execute.</param>
      <param name="browserIdleWaitTime">The amount of time to wait for the browser to be idle.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">
            The device browser did not reach an idle state within the specified <paramref name="browserIdleWaitTime" />.
            <para>or</para>
            The device service threw an exception.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.ExecuteJavaScript(System.String,System.String,System.TimeSpan)">
      <summary>
            Executes the specified JavaScript in the embedded browser using the specified UI context ID.
            Waits for the browser to be idle before executing the script and throws if the browser does not become idle within the specified time.
            </summary>
      <param name="uiContextId">The UI context identifier.  (Passing in null executes the JavaScript in the topmost browser.)</param>
      <param name="script">The JavaScript to execute.</param>
      <param name="browserIdleWaitTime">The amount of time to wait for the browser to be idle.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">
            The device browser did not reach an idle state within the specified <paramref name="browserIdleWaitTime" />.
            <para>or</para>
            The device service threw an exception.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediWindjammerControlPanel.DefaultWaitTime">
      <summary>
            Gets or sets the default wait time for control panel operations that require waiting for a new state.
            The default value is 30 seconds.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.JediWindjammerDevice">
      <summary>
            Represents a device running Jedi firmware with a Windjammer presentation framework.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerDevice.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediWindjammerDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerDevice.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediWindjammerDevice" /> class
            with the specified device address.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerDevice.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediWindjammerDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerDevice.#ctor(System.Net.IPAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediWindjammerDevice" /> class
            with the specified device address and admin password.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerDevice.#ctor(HP.DeviceAutomation.DeviceConstructionParameterCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.JediWindjammerDevice" /> class
            with the specified <see cref="T:HP.DeviceAutomation.DeviceConstructionParameterCollection" />.
            </summary>
      <param name="parameters">The device construction parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceConstructionException">Device could not be constructed using the specified parameters.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.JediWindjammerDevice.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.JediWindjammerDevice.ControlPanel">
      <summary>
            Gets the control panel for this <see cref="T:HP.DeviceAutomation.Jedi.JediWindjammerDevice" />.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.OmniElementState">
      <summary>
            Represents the state of an Omni control panel element.
            (An element is typically in more than one state at a time, e.g. Enabled and Useable.)
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniElementState.ActiveElement">
      <summary>
            The element is useable and highlighted as the active element.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniElementState.Constrained">
      <summary>
            The element is constrained due to conflict with another option.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniElementState.Disabled">
      <summary>
            The element is disabled.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniElementState.Enabled">
      <summary>
            The element is enabled.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniElementState.Exists">
      <summary>
            The element exists in the DOM.  The element could be on a different tab
            or scrolled off the screen and still exist.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniElementState.Hidden">
      <summary>
            The element is not visible.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniElementState.Locked">
      <summary>
            The element was locked or the permission denied.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniElementState.Selected">
      <summary>
            The element is selected.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniElementState.Useable">
      <summary>
            The element is visible and not moving.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniElementState.VisibleCompletely">
      <summary>
            The element is fully visible on screen.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniElementState.VisiblePartially">
      <summary>
            The element is partially visible on screen.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.OmniIdCollectionType">
      <summary>
            Specifies the types of ID collections that can be retrieved from an Omni element.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniIdCollectionType.Self">
      <summary>
            All the IDs for elements returned by the selector.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniIdCollectionType.Children">
      <summary>
            The direct children IDs of an element returned by the selector.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniIdCollectionType.Descendants">
      <summary>
            All descendant IDs of an element returned by the selector.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniIdCollectionType.Selected">
      <summary>
            All selected IDs on the page.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">
      <summary>
            Exception thrown when a Jedi Omni UI method call is invalid for the device's current state.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniInvalidOperationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniInvalidOperationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniInvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniInvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.OmniPropertyType">
      <summary>
            Specifies the selector type to use for retrieving Omni element values.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniPropertyType.Attribute">
      <summary>
            An HTML attribute.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniPropertyType.Css">
      <summary>
            A Cascading Style Sheet value.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniPropertyType.Property">
      <summary>
            A DOM property.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.OmniUserInteractionService">
      <summary>
            Helper class for Jedi devices that wraps Omni UI capability.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.#ctor(HP.DeviceAutomation.DeviceNetworkAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteractionService" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.#ctor(HP.DeviceAutomation.DeviceNetworkAddress,HP.DeviceAutomation.DeviceNetworkAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteractionService" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="debugAddress">The debug card address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.
            <para>or</para><paramref name="debugAddress" /> is null.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.GetCount(System.String)">
      <summary>
            Gets the number of elements matching the specified selector.
            </summary>
      <param name="elementSelector">The element selector.</param>
      <returns>The number of elements that match the selector.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.GetString(System.String)">
      <summary>
            Resolves a string ID to a display string for the current locale.
            </summary>
      <param name="id">The string identifier.</param>
      <returns>The display string for the current locale.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.CheckState(System.String,HP.DeviceAutomation.Jedi.OmniElementState)">
      <summary>
            Checks to see whether the specified element is in the specified state.
            </summary>
      <param name="elementSelector">A selector identifying the element.</param>
      <param name="state">The <see cref="T:HP.DeviceAutomation.Jedi.OmniElementState" /> to check.</param>
      <returns>
        <c>true</c> if the element is in the specified state; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.GetIds(System.String,HP.DeviceAutomation.Jedi.OmniIdCollectionType)">
      <summary>
            Gets a collection of IDs of the specified type from an element using the specified selector and <see cref="T:HP.DeviceAutomation.Jedi.OmniIdCollectionType" />.
            </summary>
      <param name="elementSelector">The element selector.</param>
      <param name="collectionType">The type of ID collection to retrieve.</param>
      <returns>A collection of element IDs.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.GetBoundingBox(System.String)">
      <summary>
            Gets the bounding box for an element using the specified selector.
            </summary>
      <param name="elementSelector">A selector identifying the element.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.BoundingBox" /> representing the location and size of the specified element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.GetValue(System.String,System.String,HP.DeviceAutomation.Jedi.OmniPropertyType)">
      <summary>
            Gets the value of a property, attribute, or style property from an element using the specified selector.
            </summary>
      <param name="elementSelector">The element selector.</param>
      <param name="propertyName">The name of the property to retrieve.</param>
      <param name="propertyType">An <see cref="T:HP.DeviceAutomation.Jedi.OmniPropertyType" /> identifying the type of property to retrieve.</param>
      <returns>The value of the property, attribute, or style property.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">The element specified by <paramref name="elementSelector" /> does not have the requested property.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.GetValue``1(System.String,System.String,HP.DeviceAutomation.Jedi.OmniPropertyType)">
      <summary>
            Gets the value of a property, attribute, or style property from an element using the specified selector.
            </summary>
      <typeparam name="T">The type of object to retrieve.</typeparam>
      <param name="elementSelector">The element selector.</param>
      <param name="propertyName">The name of the property to retrieve.</param>
      <param name="propertyType">An <see cref="T:HP.DeviceAutomation.Jedi.OmniPropertyType" /> identifying the type of property to retrieve.</param>
      <returns>The value of the property, attribute, or style property.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:System.FormatException">The property value could not be converted to the specified type <typeparamref name="T" />.</exception>
      <exception cref="T:System.InvalidCastException">Conversion to the specified type <typeparamref name="T" /> is not supported.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">The element specified by <paramref name="elementSelector" /> does not have the requested property.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.Press(System.String)">
      <summary>
            Presses an element using the specified selector.
            </summary>
      <param name="elementSelector">A selector identifying the element to press.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">The element specified by <paramref name="elementSelector" /> is not <see cref="F:HP.DeviceAutomation.Jedi.OmniElementState.Useable" />.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.PressWait(System.String,System.String,HP.DeviceAutomation.Jedi.OmniElementState,System.TimeSpan)">
      <summary>
            Presses an element using the specified selector, then waits for another element to be in the specified state.
            </summary>
      <param name="elementSelector">A selector identifying the element to press.</param>
      <param name="newElementSelector">A selector identifying the element to wait for.</param>
      <param name="state">The <see cref="T:HP.DeviceAutomation.Jedi.OmniElementState" /> to wait for the new element to be in.</param>
      <param name="waitTime">The amount of time to wait for the new element to be in the specified state.</param>
      <returns>
        <c>true</c> if the new element was in the specified state within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.
            <para>or</para><paramref name="newElementSelector" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">The element specified by <paramref name="elementSelector" /> is not <see cref="F:HP.DeviceAutomation.Jedi.OmniElementState.Useable" />.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.TypeOnVirtualKeyboard(System.String)">
      <summary>
            Types the specified text on a virtual keyboard displayed on the control panel.
            </summary>
      <param name="text">The text to type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">
            No keyboard could be found on the control panel.
            <para>or</para>
            The keyboard does not support one or more of the characters in <paramref name="text" />.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.TypeOnNumericKeypad(System.String)">
      <summary>
            Types the specified text on a virtual numeric keypad displayed on the control panel.
            </summary>
      <param name="text">The text to type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">
            No keypad could be found on the control panel.
            <para>or</para>
            The keypad does not support one or more of the characters in <paramref name="text" />.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.ScrollToItem(System.String)">
      <summary>
            Scrolls to an element using the specified selector.
            </summary>
      <param name="elementSelector">A selector identifying the element to scroll to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">The scroll operation failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.ScrollPress(System.String)">
      <summary>
            Scrolls to and presses an element using the specified selector.
            </summary>
      <param name="elementSelector">A selector identifying the element to press.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">
            The element specified by <paramref name="elementSelector" /> is not <see cref="F:HP.DeviceAutomation.Jedi.OmniElementState.Useable" />.
            <para>or</para>
            The scroll operation failed.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.ScrollPressWait(System.String,System.String,HP.DeviceAutomation.Jedi.OmniElementState,System.TimeSpan)">
      <summary>
            Scrolls to and presses an element using the specified selector, then waits for another element to be in the specified state.
            </summary>
      <param name="elementSelector">A selector identifying the element to press.</param>
      <param name="newElementSelector">A selector identifying the element to wait for.</param>
      <param name="state">The <see cref="T:HP.DeviceAutomation.Jedi.OmniElementState" /> to wait for the new element to be in.</param>
      <param name="waitTime">The amount of time to wait for the new element to be in the specified state.</param>
      <returns>
        <c>true</c> if the new element was in the specified state within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.
            <para>or</para><paramref name="newElementSelector" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">
            The element specified by <paramref name="elementSelector" /> is not <see cref="F:HP.DeviceAutomation.Jedi.OmniElementState.Useable" />.
            <para>or</para>
            The scroll operation failed.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.SetSliderValue(System.String,System.Int32)">
      <summary>
            Sets the value of a slider element using the specified selector.
            </summary>
      <param name="elementSelector">A selector identifying the slider to set.</param>
      <param name="value">The value to set the slider to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">The element specified by <paramref name="elementSelector" /> is not a valid input element.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.WaitForState(System.String,HP.DeviceAutomation.Jedi.OmniElementState,System.TimeSpan)">
      <summary>
            Waits for an element to be in the specified state using the specified selector.
            </summary>
      <param name="elementSelector">A selector identifying the element to examine.</param>
      <param name="state">The <see cref="T:HP.DeviceAutomation.Jedi.OmniElementState" /> to wait for the element to be in.</param>
      <param name="waitTime">The amount of time to wait for the element to be in the specified state.</param>
      <returns>
        <c>true</c> if the new element was in the specified state within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.WaitForState(System.String,HP.DeviceAutomation.Jedi.OmniElementState,System.Boolean,System.TimeSpan)">
      <summary>
            Waits for an element to enter or leave the specified state using the specified selector.
            </summary>
      <param name="elementSelector">A selector identifying the element to examine.</param>
      <param name="state">The <see cref="T:HP.DeviceAutomation.Jedi.OmniElementState" /> to check.</param>
      <param name="stateIs">if set to <c>true</c> wait for the element to be in the specified state; otherwise, wait for the element to not be in the specified state.</param>
      <param name="waitTime">The amount of time to wait for the element to enter or leave the specified state.</param>
      <returns>
        <c>true</c> if the new element entered or left the specified state within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.WaitForValue(System.String,System.String,HP.DeviceAutomation.Jedi.OmniPropertyType,System.String,System.TimeSpan)">
      <summary>
            Waits for an element value to match the specified value using the specified selector.
            </summary>
      <param name="elementSelector">A selector identifying the element to examine.</param>
      <param name="propertyName">The property of the element to monitor.</param>
      <param name="propertyType">An <see cref="T:HP.DeviceAutomation.Jedi.OmniPropertyType" /> identifying the type of property to retrieve.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <param name="waitTime">The amount of time to wait for the element to have the specified property value.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">The element specified by <paramref name="elementSelector" /> does not have the requested property.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.WaitForValue(System.String,System.String,HP.DeviceAutomation.Jedi.OmniPropertyType,System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for an element value to match the specified value using the specified selector and <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="elementSelector">A selector identifying the element to examine.</param>
      <param name="propertyName">The property of the element to monitor.</param>
      <param name="propertyType">An <see cref="T:HP.DeviceAutomation.Jedi.OmniPropertyType" /> identifying the type of property to retrieve.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the element to have the specified property value.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">The element specified by <paramref name="elementSelector" /> does not have the requested property.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.WaitForValue``1(System.String,System.String,HP.DeviceAutomation.Jedi.OmniPropertyType,``0,System.TimeSpan)">
      <summary>
            Waits for an element value to match the specified value using the specified selector.
            </summary>
      <typeparam name="T">The type of object to retrieve.</typeparam>
      <param name="elementSelector">A selector identifying the element to examine.</param>
      <param name="propertyName">The property of the element to monitor.</param>
      <param name="propertyType">An <see cref="T:HP.DeviceAutomation.Jedi.OmniPropertyType" /> identifying the type of property to retrieve.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <param name="waitTime">The amount of time to wait for the element to have the specified property value.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementSelector" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ElementNotFoundException">The element specified by <paramref name="elementSelector" /> could not be found on the control panel.</exception>
      <exception cref="T:System.FormatException">The property value could not be converted to the specified type <typeparamref name="T" />.</exception>
      <exception cref="T:System.InvalidCastException">Conversion to the specified type <typeparamref name="T" /> is not supported.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniInvalidOperationException">The element specified by <paramref name="elementSelector" /> does not have the requested property.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.PressScreen(HP.DeviceAutomation.Coordinate)">
      <summary>
            Presses the touchscreen at the specified <see cref="T:HP.DeviceAutomation.Coordinate" />.
            </summary>
      <param name="coordinate">The coordinate to press.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.SwipeScreen(HP.DeviceAutomation.Coordinate,HP.DeviceAutomation.Coordinate,System.TimeSpan)">
      <summary>
            Performs a swipe gesture on the touchscreen between the specified coordinates.
            </summary>
      <param name="start">The coordinate where the swipe gesture should start.</param>
      <param name="end">The coordinate where the swipe gesture should end.</param>
      <param name="duration">The duration of the gesture.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.PressHome">
      <summary>
            Presses the home button on the control panel.
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.Type(System.String)">
      <summary>
            Types the specified text into the control panel.
            </summary>
      <param name="text">The text to type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.SignalUserActivity">
      <summary>
            Simulates user activity at the control panel to wake the device and reset the inactivity timeout.
            </summary>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteractionService.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.OxpdTestService">
      <summary>
            Helper class for Jedi devices that wraps OXPd Test capability.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OxpdTestService.#ctor(HP.DeviceAutomation.DeviceNetworkAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OxpdTestService" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OxpdTestService.PressScreen(HP.DeviceAutomation.Coordinate)">
      <summary>
            Presses the touchscreen at the specified <see cref="T:HP.DeviceAutomation.Coordinate" />.
            </summary>
      <param name="coordinate">The coordinate to press.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OxpdTestService.PressKey(HP.DeviceAutomation.Jedi.JediHardKey)">
      <summary>
            Presses the specified hard key.
            </summary>
      <param name="key">The <see cref="T:HP.DeviceAutomation.Jedi.JediHardKey" /> to press.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OxpdTestService.Type(HP.DeviceAutomation.SpecialCharacter)">
      <summary>
            Types the specified special character into the control panel.
            </summary>
      <param name="specialCharacter">The <see cref="T:HP.DeviceAutomation.SpecialCharacter" /> to type.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OxpdTestService.ScreenCapture">
      <summary>
            Retrieves an <see cref="T:System.Drawing.Image" /> containing a screen capture of the control panel.
            </summary>
      <returns>An image of the control panel in PNG format.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OxpdTestService.ExecuteJavaScript(System.String,System.String)">
      <summary>
            Executes the specified JavaScript in the embedded browser using the specified UI context ID.
            </summary>
      <param name="uiContextId">The UI context identifier.  (Passing in null executes the JavaScript in the topmost browser.)</param>
      <param name="script">The JavaScript to execute.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OxpdTestService.ExecuteJavaScript(System.String,System.String,System.TimeSpan)">
      <summary>
            Executes the specified JavaScript in the embedded browser using the specified UI context ID.
            Waits for the browser to be idle before executing the script and throws if the browser does not become idle within the specified time.
            </summary>
      <param name="uiContextId">The UI context identifier.  (Passing in null executes the JavaScript in the topmost browser.)</param>
      <param name="script">The JavaScript to execute.</param>
      <param name="browserIdleWaitTime">The amount of time to wait for the browser to be idle.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">
            The device browser did not reach an idle state within the specified <paramref name="browserIdleWaitTime" />.
            <para>or</para>
            The device service threw an exception.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OxpdTestService.GetTestConfiguration">
      <summary>
            Gets the test configuration.
            </summary>
      <returns>The XML test configuration.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OxpdTestService.SetTestConfiguration(System.Xml.XmlElement)">
      <summary>
            Sets the test configuration.
            </summary>
      <param name="configuration">The XML test configuration.</param>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceInvalidOperationException">The device service threw an exception.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OxpdTestService.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.WebServicesInvalidOperationException">
      <summary>
            Exception thrown when a Jedi Web Services (WS*) request is invalid or returns an error.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServicesInvalidOperationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServicesInvalidOperationException" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServicesInvalidOperationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServicesInvalidOperationException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServicesInvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServicesInvalidOperationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServicesInvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServicesInvalidOperationException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.WebServicesSelectorRequiredException">
      <summary>
            Exception thrown when a Jedi Web Services (WS*) request requires a selector key.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServicesSelectorRequiredException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServicesSelectorRequiredException" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServicesSelectorRequiredException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServicesSelectorRequiredException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServicesSelectorRequiredException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServicesSelectorRequiredException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServicesSelectorRequiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServicesSelectorRequiredException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.WebServiceTicket">
      <summary>
            A ticket containing Jedi Web Services (WS*) data.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServiceTicket.#ctor(System.Xml.Linq.XElement)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServiceTicket" /> class from an <see cref="T:System.Xml.Linq.XElement" />.
            </summary>
      <param name="ticket">The ticket data.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServiceTicket.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServiceTicket" /> class from an XML string.
            </summary>
      <param name="ticket">The ticket data.</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ticket" /> is not a valid XML string.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServiceTicket.FindElement(System.String)">
      <summary>
            Finds the element with the specified name.
            </summary>
      <param name="name">The name.</param>
      <returns>The matching <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <exception cref="T:System.InvalidOperationException">More than one element with the specified name was found.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServiceTicket.FindElements(System.String)">
      <summary>
            Finds all elements with the specified name.
            </summary>
      <param name="name">The name.</param>
      <returns>A collection of matching <see cref="T:System.Xml.Linq.XElement" /> objects.</returns>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
      <summary>
            Exception thrown when a Jedi Windjammer UI method call is invalid for the device's current state.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.WindjammerRuiService">
      <summary>
            Helper class for Jedi devices that wraps Windjammer RUI capability.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.#ctor(HP.DeviceAutomation.DeviceNetworkAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WindjammerRuiService" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.#ctor(HP.DeviceAutomation.DeviceNetworkAddress,HP.DeviceAutomation.DeviceNetworkAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WindjammerRuiService" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="debugAddress">The debug card address.</param>
      <param name="adminPassword">The device admin password.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.
            <para>or</para><paramref name="debugAddress" /> is null.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.CurrentForm">
      <summary>
            Returns the name of the top form on the forms manager.
            </summary>
      <returns>The name of the current form.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.GetControls">
      <summary>
            Gets the names of all controls on the current form.
            </summary>
      <returns>The names of all controls on the current form.</returns>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.GetProperty(System.String,System.String)">
      <summary>
            Gets the value of the specified property of the control with the specified name.
            </summary>
      <param name="controlName">The name of the control to inspect.</param>
      <param name="propertyPath">The path to the property to retrieve.</param>
      <returns>The property value.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyPath" /> is not valid for the specified control.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="propertyPath" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.GetProperty``1(System.String,System.String)">
      <summary>
            Gets the value of the specified property of the control with the specified name.
            </summary>
      <typeparam name="T">The type of object to retrieve.</typeparam>
      <param name="controlName">The name of the control to inspect.</param>
      <param name="propertyPath">The path to the property to retrieve.</param>
      <returns>The property value.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyPath" /> is not valid for the specified control.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="propertyPath" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:System.FormatException">The property value could not be converted to the specified type <typeparamref name="T" />.</exception>
      <exception cref="T:System.InvalidCastException">Conversion to the specified type <typeparamref name="T" /> is not supported.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.SetProperty(System.String,System.String,System.Object)">
      <summary>
            Sets a control property to the specified value.
            </summary>
      <param name="controlName">The name of the control.</param>
      <param name="propertyPath">The path to the property that should be set.</param>
      <param name="propertyValue">The value the property should be set to.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyPath" /> is not valid for the specified control.
            <para>or</para>
            The type of <paramref name="propertyValue" /> did not match the type required by <paramref name="propertyPath" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="propertyPath" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.Press(System.String)">
      <summary>
            Presses the control with the specified name.
            </summary>
      <param name="controlName">The name of the control to press.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
            The control was not enabled.
            <para>or</para>
            The control did not fire the event indicating it had been pressed.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.PressToNavigate(System.String,System.String,System.Boolean)">
      <summary>
            Presses the control with the specified name, causing a new form to be displayed.
            </summary>
      <param name="controlName">The name of the control to press.</param>
      <param name="newFormName">The name of the new form that will be displayed.</param>
      <param name="ignorePopups">if set to <c>true</c> ignore pop-ups that appear before the expected form is displayed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
            The control was not enabled.
            <para>or</para>
            The control panel timed out waiting for the specified form.
            <para>or</para><paramref name="ignorePopups" /> is set to <c>false</c> and a form appeared that was different than the expected new form.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.PressWait(System.String,System.String,System.TimeSpan)">
      <summary>
            Presses the control with the specified name and waits for the specified form.
            </summary>
      <param name="controlName">The name of the control to press.</param>
      <param name="newFormName">The name of the new form to wait for.</param>
      <param name="waitTime">The amount of time to wait for the new form.</param>
      <returns>
        <c>true</c> if the new form appears within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="newFormName" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">The control was not enabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.PressWait(System.String,System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Presses the control with the specified name and waits for the specified form using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="controlName">The name of the control to press.</param>
      <param name="newFormName">The name of the new form to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the new form.</param>
      <returns>
        <c>true</c> if the new form appears within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="newFormName" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">The control was not enabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.Type(System.String)">
      <summary>
            Types the specified text into the control panel.
            </summary>
      <param name="text">The text to type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.TypeOnVirtualKeyboard(System.String,System.String)">
      <summary>
            Types the specified text on a virtual keyboard displayed on the control panel.
            </summary>
      <param name="controlName">The name of the virtual keyboard control.</param>
      <param name="text">The text to type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="text" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.ScrollToItem(System.String,System.String,System.Object)">
      <summary>
            Scrolls to the control with the specified property value.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scrollControlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
            The control specified by <paramref name="scrollControlName" /> could not be found on the control panel.
            <para>or</para>
            No control with the specified property value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">The control specified by <paramref name="scrollControlName" /> is not a valid scroll control.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.ScrollPress(System.String,System.String,System.Object)">
      <summary>
            Scrolls to and presses the control with the specified property value.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scrollControlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
            The control specified by <paramref name="scrollControlName" /> could not be found on the control panel.
            <para>or</para>
            No control with the specified property value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
            The control specified by <paramref name="scrollControlName" /> is not a valid scroll control.
            <para>or</para>
            The control with the specified property value was not enabled.
            <para>or</para>
            The control did not fire the event indicating it had been pressed.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.ScrollPressNavigate(System.String,System.String,System.Object,System.String,System.Boolean)">
      <summary>
            Scrolls to and presses the control with the specified property value, causing a new form to be displayed.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <param name="newFormName">The name of the new form that will be displayed.</param>
      <param name="ignorePopups">if set to <c>true</c> ignore pop-ups that appear before the expected form is displayed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scrollControlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
            The control specified by <paramref name="scrollControlName" /> could not be found on the control panel.
            <para>or</para>
            No control with the specified property value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
            The control specified by <paramref name="scrollControlName" /> is not a valid scroll control.
            <para>or</para>
            The control with the specified property value was not enabled.
            <para>or</para>
            The control panel timed out waiting for the specified form.
            <para>or</para><paramref name="ignorePopups" /> is set to <c>false</c> and a form appeared that was different than the expected new form.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.ScrollPressWait(System.String,System.String,System.Object,System.String,System.TimeSpan)">
      <summary>
            Scrolls to and presses the control with the specified property value and waits for the specified form.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <param name="newFormName">The name of the new form to wait for.</param>
      <param name="waitTime">The amount of time to wait for the new form.</param>
      <returns>
        <c>true</c> if the new form appears within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scrollControlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            <para>or</para><paramref name="newFormName" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
            The control specified by <paramref name="scrollControlName" /> could not be found on the control panel.
            <para>or</para>
            No control with the specified property value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
            The control specified by <paramref name="scrollControlName" /> is not a valid scroll control.
            <para>or</para>
            The control with the specified property value was not enabled.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.ScrollPressWait(System.String,System.String,System.Object,System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Scrolls to and presses the control with the specified property value and waits for the specified form using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <param name="newFormName">The name of the new form to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the new form.</param>
      <returns>
        <c>true</c> if the new form appears within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scrollControlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            <para>or</para><paramref name="newFormName" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">
            The control specified by <paramref name="scrollControlName" /> could not be found on the control panel.
            <para>or</para>
            No control with the specified property value could be found on the control panel.
            </exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
            The control specified by <paramref name="scrollControlName" /> is not a valid scroll control.
            <para>or</para>
            The control with the specified property value was not enabled.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.WaitForPropertyValue(System.String,System.String,System.String,System.TimeSpan)">
      <summary>
            Waits for a control to have the specified property value.
            </summary>
      <param name="controlName">The name of the control.</param>
      <param name="propertyName">The property of the control to monitor.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <param name="waitTime">The amount of time to wait for the control to have the specified property value.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyName" /> is not valid for the specified control.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.WaitForPropertyValue(System.String,System.String,System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for a control to have the specified property value using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="controlName">The name of the control.</param>
      <param name="propertyName">The property of the control to monitor.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the control to have the specified property value.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyName" /> is not valid for the specified control.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.WaitForPropertyValue``1(System.String,System.String,``0,System.TimeSpan)">
      <summary>
            Waits for a control to have the specified property value.
            </summary>
      <typeparam name="T">The type of the property value.</typeparam>
      <param name="controlName">The name of the control.</param>
      <param name="propertyName">The property of the control to monitor.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <param name="waitTime">The amount of time to wait for the control to have the specified property value.</param>
      <returns>
        <c>true</c> if the property value matched the specified value within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyName" /> is not valid for the specified control.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.
            <para>or</para><paramref name="propertyName" /> is null.
            <para>or</para><paramref name="propertyValue" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.ControlNotFoundException">The control specified by <paramref name="controlName" /> could not be found on the control panel.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:System.FormatException">The property value could not be converted to the specified type <typeparamref name="T" />.</exception>
      <exception cref="T:System.InvalidCastException">Conversion to the specified type <typeparamref name="T" /> is not supported.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.WaitForControl(System.String,System.TimeSpan)">
      <summary>
            Waits for a control with the specified name to exist.
            </summary>
      <param name="controlName">The name of the control to wait for.</param>
      <param name="waitTime">The amount of time to wait for the control.</param>
      <returns>
        <c>true</c> if the control is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.WaitForControl(System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for a control with the specified name to exist using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="controlName">The name of the control to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the control.</param>
      <returns>
        <c>true</c> if the control is found within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlName" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.WaitForForm(System.String,System.TimeSpan)">
      <summary>
            Waits for the specified form to be on top of the forms stack.
            </summary>
      <param name="formName">The name of the form to wait for.</param>
      <param name="waitTime">The amount of time to wait for the form.</param>
      <returns>
        <c>true</c> if the form appears within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formName" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.WaitForForm(System.String,HP.DeviceAutomation.StringMatch,System.TimeSpan)">
      <summary>
            Waits for the specified form to be on top of the forms stack using the specified <see cref="T:HP.DeviceAutomation.StringMatch" /> method.
            </summary>
      <param name="formName">The name of the form to wait for.</param>
      <param name="match">The <see cref="T:HP.DeviceAutomation.StringMatch" /> method to use.</param>
      <param name="waitTime">The amount of time to wait for the form.</param>
      <returns>
        <c>true</c> if the form appears within the specified <paramref name="waitTime" />; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formName" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="waitTime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.WaitForForm(System.String,System.Boolean)">
      <summary>
            Waits for the specified form to be on top of the forms stack, optionally ignoring pop-ups.
            </summary>
      <param name="formName">The name of the form to wait for.</param>
      <param name="ignorePopups">if set to <c>true</c> ignore pop-ups that appear before the expected form is displayed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formName" /> is null.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceCommunicationException">Communication with the target device failed.</exception>
      <exception cref="T:HP.DeviceAutomation.DeviceSecurityException">The device admin password is missing or incorrect.</exception>
      <exception cref="T:HP.DeviceAutomation.NetworkConfigurationException">The device certificate is untrusted and <see cref="P:HP.DeviceAutomation.NetworkConfiguration.AcceptAllCertificates" /> is disabled.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.WindjammerInvalidOperationException">
            The control panel timed out waiting for the specified form.
            <para>or</para><paramref name="ignorePopups" /> is set to <c>false</c> and a form appeared that was different than the expected new form.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WindjammerRuiService.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.WebServices.GetRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Jedi.WebServices.IWSTransfer.Get(HP.DeviceAutomation.Jedi.WebServices.GetRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.GetRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServices.GetRequest" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.GetRequest.#ctor(HP.DeviceAutomation.Jedi.WebServices.ResourceUri,HP.DeviceAutomation.Jedi.WebServices.Locale,HP.DeviceAutomation.Jedi.WebServices.SelectorSet)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServices.GetRequest" /> class.
            </summary>
      <param name="resourceUri">The resource URI.</param>
      <param name="locale">The locale.</param>
      <param name="selectorSet">The selector set.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.WebServices.GetRequest.ResourceUri">
      <summary>
            Gets the resource URI.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.WebServices.GetRequest.Locale">
      <summary>
            Gets the locale.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.WebServices.GetRequest.SelectorSet">
      <summary>
            Gets the selector set.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.WebServices.GetResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Jedi.WebServices.IWSTransfer.Get(HP.DeviceAutomation.Jedi.WebServices.GetRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.GetResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServices.GetResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.GetResponse.#ctor(System.Xml.Linq.XElement)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServices.GetResponse" /> class.
            </summary>
      <param name="body">The WS* payload body.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.WebServices.GetResponse.Body">
      <summary>
            Gets the WS* payload body.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.WebServices.IWSTransfer">
      <summary>
            Service contract for the WS* Transfer service.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.IWSTransfer.Get(HP.DeviceAutomation.Jedi.WebServices.GetRequest)">
      <summary>
            Gets a WS* payload based on the specified <see cref="T:HP.DeviceAutomation.Jedi.WebServices.GetRequest" />.
            </summary>
      <param name="request">The WS* request.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Jedi.WebServices.GetResponse" /> object containing the WS* payload.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.IWSTransfer.Put(HP.DeviceAutomation.Jedi.WebServices.PutRequest)">
      <summary>
            Puts a WS* payload based on the specified <see cref="T:HP.DeviceAutomation.Jedi.WebServices.PutRequest" />.
            </summary>
      <param name="request">The WS* request.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Jedi.WebServices.PutResponse" /> object.</returns>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.WebServices.Locale">
      <summary>
            A locale used in <see cref="T:HP.DeviceAutomation.Jedi.WebServices.IWSTransfer" /> message contracts.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.Locale.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServices.Locale" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.Locale.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServices.Locale" /> class.
            </summary>
      <param name="language">A ws:language string.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.WebServices.Locale.Value">
      <summary>
            Gets the locale value.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.WebServices.PutRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Jedi.WebServices.IWSTransfer.Put(HP.DeviceAutomation.Jedi.WebServices.PutRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.PutRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServices.PutRequest" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.PutRequest.#ctor(HP.DeviceAutomation.Jedi.WebServices.ResourceUri,HP.DeviceAutomation.Jedi.WebServices.Locale,HP.DeviceAutomation.Jedi.WebServices.SelectorSet,System.Xml.Linq.XElement)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServices.PutRequest" /> class.
            </summary>
      <param name="resourceUri">The resource URI.</param>
      <param name="locale">The locale.</param>
      <param name="selectorSet">The selector set.</param>
      <param name="body">The WS* payload body.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.WebServices.PutRequest.ResourceUri">
      <summary>
            Gets the resource URI.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.WebServices.PutRequest.Locale">
      <summary>
            Gets the locale.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.WebServices.PutRequest.SelectorSet">
      <summary>
            Gets the selector set.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.WebServices.PutRequest.Body">
      <summary>
            Gets the WS* payload body.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.WebServices.PutResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Jedi.WebServices.IWSTransfer.Put(HP.DeviceAutomation.Jedi.WebServices.PutRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.PutResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServices.PutResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.PutResponse.#ctor(System.Xml.Linq.XElement)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServices.PutResponse" /> class.
            </summary>
      <param name="body">The WS* payload body.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.WebServices.PutResponse.Body">
      <summary>
            Gets the WS* payload body.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.WebServices.ResourceUri">
      <summary>
            A resource URI used in <see cref="T:HP.DeviceAutomation.Jedi.WebServices.IWSTransfer" /> message contracts.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.ResourceUri.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServices.ResourceUri" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.ResourceUri.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServices.ResourceUri" /> class.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.WebServices.ResourceUri.Value">
      <summary>
            Gets or sets the value.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.WebServices.Selector">
      <summary>
            A WS* selector used in <see cref="T:HP.DeviceAutomation.Jedi.WebServices.IWSTransfer" /> contracts.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.Selector.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServices.Selector" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.Selector.#ctor(System.String,System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServices.Selector" /> class.
            </summary>
      <param name="name">The selector name.</param>
      <param name="text">The selector text.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.WebServices.Selector.Name">
      <summary>
            Gets or sets the selector name.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.WebServices.Selector.Text">
      <summary>
            Gets or sets the selector text.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.WebServices.SelectorSet">
      <summary>
            A set of <see cref="T:HP.DeviceAutomation.Jedi.WebServices.Selector" /> objects used in <see cref="T:HP.DeviceAutomation.Jedi.WebServices.IWSTransfer" /> message contracts.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.SelectorSet.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServices.SelectorSet" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.SelectorSet.#ctor(HP.DeviceAutomation.Jedi.WebServices.Selector[])">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServices.SelectorSet" /> class.
            </summary>
      <param name="selectors">The selector(s).</param>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.WebServices.SelectorSet.Selectors">
      <summary>
            Gets or sets the selectors.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient">
      <summary>
            Client class for the <see cref="T:HP.DeviceAutomation.Jedi.WebServices.IWSTransfer" /> service.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="serviceName">The service name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient.#ctor(System.Net.IPAddress,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="serviceName">The service name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient.#ctor(System.String,System.String,HP.DeviceAutomation.BsiHttpBinding)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="serviceName">The service name.</param>
      <param name="binding">The <see cref="T:HP.DeviceAutomation.BsiHttpBinding" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.
            <para>or</para><paramref name="binding" /> is null.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient.#ctor(System.Net.IPAddress,System.String,HP.DeviceAutomation.BsiHttpBinding)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="serviceName">The service name.</param>
      <param name="binding">The <see cref="T:HP.DeviceAutomation.BsiHttpBinding" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.
            <para>or</para><paramref name="binding" /> is null.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient.#ctor(System.Uri,HP.DeviceAutomation.BsiHttpBinding)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient" /> class.
            </summary>
      <param name="serviceUri">The service URI.</param>
      <param name="binding">The <see cref="T:HP.DeviceAutomation.BsiHttpBinding" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceUri" /> is null.
            <para>or</para><paramref name="binding" /> is null.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient.Get(System.String,System.String)">
      <summary>
            Gets XML data from the specified WS* URN.
            </summary>
      <param name="urn">The URN.</param>
      <param name="locale">The locale.</param>
      <returns>The XML data.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="urn" /> is null.</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="urn" /> is not a valid URI.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient.Get(System.Uri,System.String)">
      <summary>
            Gets XML data from the specified WS* URN.
            </summary>
      <param name="urn">The URN.</param>
      <param name="locale">The locale.</param>
      <returns>The XML data.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="urn" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient.Get(System.String,System.String,System.String,System.String)">
      <summary>
            Gets XML data from the specified WS* URN using the specified selector.
            </summary>
      <param name="urn">The URN.</param>
      <param name="locale">The locale.</param>
      <param name="selectorName">The selector name.</param>
      <param name="selectorValue">The selector value.</param>
      <returns>The XML data.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="urn" /> is null.</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="urn" /> is not a valid URI.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient.Get(System.Uri,System.String,System.String,System.String)">
      <summary>
            Gets XML data from the specified WS* URN using the specified selector.
            </summary>
      <param name="urn">The URN.</param>
      <param name="locale">The locale.</param>
      <param name="selectorName">The selector name.</param>
      <param name="selectorValue">The selector value.</param>
      <returns>The XML data.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="urn" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient.Put(System.String,System.String,System.Xml.Linq.XElement)">
      <summary>
            Puts the specified XML data at the specified WS* URN.
            </summary>
      <param name="urn">The URN.</param>
      <param name="locale">The locale.</param>
      <param name="body">The XML data.</param>
      <returns>The result of the operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="urn" /> is null.</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="urn" /> is not a valid URI.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient.Put(System.Uri,System.String,System.Xml.Linq.XElement)">
      <summary>
            Puts the specified XML data at the specified WS* URN.
            </summary>
      <param name="urn">The URN.</param>
      <param name="locale">The locale.</param>
      <param name="body">The XML data.</param>
      <returns>The result of the operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="urn" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient.Put(System.String,System.String,System.String,System.String,System.Xml.Linq.XElement)">
      <summary>
            Puts the specified XML data at the specified WS* URN using the specified selector.
            </summary>
      <param name="urn">The URN.</param>
      <param name="locale">The locale.</param>
      <param name="selectorName">The selector name.</param>
      <param name="selectorValue">The selector value.</param>
      <param name="body">The XML data.</param>
      <returns>The result of the operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="urn" /> is null.</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="urn" /> is not a valid URI.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient.Put(System.Uri,System.String,System.String,System.String,System.Xml.Linq.XElement)">
      <summary>
            Puts the specified XML data at the specified WS* URN using the specified selector.
            </summary>
      <param name="urn">The URN.</param>
      <param name="locale">The locale.</param>
      <param name="selectorName">The selector name.</param>
      <param name="selectorValue">The selector value.</param>
      <param name="body">The XML data.</param>
      <returns>The result of the operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="urn" /> is null.</exception>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient.Address">
      <summary>
            Gets the address of the device this <see cref="T:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient" /> will connect to.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient.ServiceName">
      <summary>
            Gets the name of the service this <see cref="T:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient" /> will connect to.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient.UserName">
      <summary>
            Gets or sets the user name to use for communication with this client.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.WebServices.WSTransferClient.Password">
      <summary>
            Gets or sets the password to use for communication with this client.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.ControlsRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.Controls(HP.DeviceAutomation.Jedi.RemoteUserInterface.ControlsRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.ControlsRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.ControlsRequest" /> class.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.ControlsResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.Controls(HP.DeviceAutomation.Jedi.RemoteUserInterface.ControlsRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.ControlsResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.ControlsResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.ControlsResponse.#ctor(System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.ControlsResponse" /> class.
            </summary>
      <param name="controls">The list of control names.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.RemoteUserInterface.ControlsResponse.Controls">
      <summary>
            Gets the list of control names.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.CurrentFormRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.CurrentForm(HP.DeviceAutomation.Jedi.RemoteUserInterface.CurrentFormRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.CurrentFormRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.CurrentFormRequest" /> class.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.CurrentFormResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.CurrentForm(HP.DeviceAutomation.Jedi.RemoteUserInterface.CurrentFormRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.CurrentFormResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.CurrentFormResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.CurrentFormResponse.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.CurrentFormResponse" /> class.
            </summary>
      <param name="currentForm">The name of the current form.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.RemoteUserInterface.CurrentFormResponse.CurrentForm">
      <summary>
            Gets the name of the current form.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.GetProperty(HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyRequest" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyRequest.#ctor(HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyType)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyRequest" /> class.
            </summary>
      <param name="getPropertyType">The <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyType" /> object.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyRequest.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyRequest" /> class.
            </summary>
      <param name="controlName">The control name.</param>
      <param name="propertyPath">The property path.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyRequest.ControlName">
      <summary>
            Gets the control name.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyRequest.PropertyPath">
      <summary>
            Gets the property path.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.GetProperty(HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyResponse.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyResponse" /> class.
            </summary>
      <param name="value">The property value.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyResponse.Value">
      <summary>
            Gets the property value.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyType">
      <summary>
            Message contract used for the <see cref="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.GetProperty(HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyType.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyType" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyType.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyType" /> class.
            </summary>
      <param name="controlName">The control name.</param>
      <param name="propertyPath">The property path.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyType.ControlName">
      <summary>
            Gets or sets the control name.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyType.PropertyPath">
      <summary>
            Gets or sets the property path.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface">
      <summary>
            Service contract for the Remote User Interface qualification service.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.Press(System.String)">
      <summary>
            Presses the control with the specified name.
            </summary>
      <param name="controlName">The name of the control to press.</param>
      <remarks>If pressing the control will cause a new form to be displayed, use <see cref="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.PressToNavigate(System.String,System.String,System.Boolean)" /> instead.</remarks>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.PressToNavigate(System.String,System.String,System.Boolean)">
      <summary>
            Presses the control with the specified name, causing a new form to be displayed.
            </summary>
      <param name="controlName">The name of the control to press.</param>
      <param name="newFormName">The name of the new form that will be displayed.</param>
      <param name="ignorePopups">if set to <c>true</c> ignore pop-ups that appear before the expected form is displayed.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.Type(System.String)">
      <summary>
            Types the specified text into the control panel.
            </summary>
      <param name="textToType">The text to type.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.TypeOnVirtualKeyboard(System.String,System.String)">
      <summary>
            Types the specified text on a virtual keyboard displayed on the control panel.
            </summary>
      <param name="controlName">The name of the virtual keyboard control.</param>
      <param name="textToType">The text to type.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.ScrollToItem(System.String,System.String,System.String)">
      <summary>
            Scrolls to the control with the specified property value.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.ScrollPress(System.String,System.String,System.String)">
      <summary>
            Scrolls to and presses the control with the specified property value.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <remarks>If pressing the control will cause a new form to be displayed, use <see cref="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.ScrollPressNavigate(System.String,System.String,System.String,System.String,System.Boolean)" /> instead.</remarks>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.ScrollPressNavigate(System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>
            Scrolls to and presses the control with the specified property value, causing a new form to be displayed.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <param name="newFormName">The name of the new form that will be displayed.</param>
      <param name="ignorePopups">if set to <c>true</c> ignore pop-ups that appear before the expected form is displayed.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.CurrentForm(HP.DeviceAutomation.Jedi.RemoteUserInterface.CurrentFormRequest)">
      <summary>
            Returns the name of the top form on the forms manager.
            </summary>
      <param name="request">A <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.CurrentFormRequest" /> object.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.CurrentFormResponse" /> object containing the name of the current form.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.WaitForForm(System.String)">
      <summary>
            Waits for the specified form to be on top of the forms stack.
            </summary>
      <param name="formName">The name of the form to wait for.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.WaitForFormIgnorePopups(System.String,System.Boolean)">
      <summary>
            Waits for the specified form to be on top of the forms stack, optionally ignoring pop-ups.
            </summary>
      <param name="formName">The name of the form to wait for.</param>
      <param name="ignorePopups">if set to <c>true</c> ignore pop-ups that appear before the expected form is displayed.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.Controls(HP.DeviceAutomation.Jedi.RemoteUserInterface.ControlsRequest)">
      <summary>
            Gets the names of all controls on the current form.
            </summary>
      <param name="request">A <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.ControlsRequest" /> object.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.ControlsResponse" /> object containing the names of all controls on the current form.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.WaitForControl(System.String,System.Int32)">
      <summary>
            Waits for a control with the specified name to exist.
            </summary>
      <param name="controlName">The name of the control to wait for.</param>
      <param name="millisecondTimeout">The amount of time to wait for the control, in milliseconds.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.GetProperty(HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyRequest)">
      <summary>
            Gets the value of a property of a control.
            </summary>
      <param name="request">A <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyRequest" /> object specifying the control and property to retrieve.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.GetPropertyResponse" /> object containing the control property value.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.GetProperties(System.String)">
      <summary>
            Gets a serialized list of properties on a control.
            </summary>
      <param name="propertyPath">A dot-separated path to the properties that are requested.</param>
      <returns>A serialized list of properties on the specified path.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.SetProperty(System.String,System.String,System.String)">
      <summary>
            Sets a control property to the specified value.
            </summary>
      <param name="controlName">The name of the control.</param>
      <param name="propertyPath">The path to the property that should be set.</param>
      <param name="propertyValue">The value the property should be set to.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.WaitForPropertyValue(System.String,System.String,System.String,System.Int32)">
      <summary>
            Waits for a control to have the specified property value.
            </summary>
      <param name="controlName">The name of the control.</param>
      <param name="propertyName">The property of the control to monitor.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <param name="millisecondTimeout">The amount of time to wait for the control to have the specified property value, in milliseconds.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface.BringToFront">
      <summary>
            Brings the topmost form on the forms manager into focus.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient">
      <summary>
            Client class for the <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.IRemoteUserInterface" /> service.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.#ctor(System.String,HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClientMode)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="mode">The <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClientMode" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.
            <para>or</para><paramref name="mode" /> is null.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.#ctor(System.Net.IPAddress,HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClientMode)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="mode">The <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClientMode" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.
            <para>or</para><paramref name="mode" /> is null.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.#ctor(System.String,HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClientMode,HP.DeviceAutomation.BsiHttpBinding)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="mode">The <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClientMode" />.</param>
      <param name="binding">The <see cref="T:HP.DeviceAutomation.BsiHttpBinding" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.
            <para>or</para><paramref name="mode" /> is null.
            <para>or</para><paramref name="binding" /> is null.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.#ctor(System.Net.IPAddress,HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClientMode,HP.DeviceAutomation.BsiHttpBinding)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="mode">The <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClientMode" />.</param>
      <param name="binding">The <see cref="T:HP.DeviceAutomation.BsiHttpBinding" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.
            <para>or</para><paramref name="mode" /> is null.
            <para>or</para><paramref name="binding" /> is null.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.Press(System.String)">
      <summary>
            Presses the control with the specified name.
            </summary>
      <param name="controlName">The name of the control to press.</param>
      <remarks>If pressing the control will cause a new form to be displayed, use <see cref="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.PressToNavigate(System.String,System.String,System.Boolean)" /> instead.</remarks>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.PressToNavigate(System.String,System.String,System.Boolean)">
      <summary>
            Presses the control with the specified name, causing a new form to be displayed.
            </summary>
      <param name="controlName">The name of the control to press.</param>
      <param name="newFormName">The name of the new form that will be displayed.</param>
      <param name="ignorePopups">if set to <c>true</c> ignore pop-ups that appear before the expected form is displayed.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.Type(System.String)">
      <summary>
            Types the specified text into the control panel.
            </summary>
      <param name="textToType">The text to type.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.TypeOnVirtualKeyboard(System.String,System.String)">
      <summary>
            Types the specified text on a virtual keyboard displayed on the control panel.
            </summary>
      <param name="controlName">The name of the virtual keyboard control.</param>
      <param name="textToType">The text to type.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.ScrollToItem(System.String,System.String,System.Object)">
      <summary>
            Scrolls to the control with the specified property value.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.ScrollPress(System.String,System.String,System.Object)">
      <summary>
            Scrolls to and presses the control with the specified property value.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <remarks>If pressing the control will cause a new form to be displayed, use <see cref="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.ScrollPressNavigate(System.String,System.String,System.Object,System.String,System.Boolean)" /> instead.</remarks>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.ScrollPressNavigate(System.String,System.String,System.Object,System.String,System.Boolean)">
      <summary>
            Scrolls to and presses the control with the specified property value, causing a new form to be displayed.
            </summary>
      <param name="scrollControlName">The name of the scroll control that contains the item to scroll to.</param>
      <param name="propertyName">The property to inspect.</param>
      <param name="propertyValue">The property value to look for.</param>
      <param name="newFormName">The name of the new form that will be displayed.</param>
      <param name="ignorePopups">if set to <c>true</c> ignore pop-ups that appear before the expected form is displayed.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.CurrentForm">
      <summary>
            Returns the name of the top form on the forms manager.
            </summary>
      <returns>The name of the current form.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.WaitForForm(System.String)">
      <summary>
            Waits for the specified form to be on top of the forms stack.
            </summary>
      <param name="formName">The name of the form to wait for.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.WaitForFormIgnorePopups(System.String,System.Boolean)">
      <summary>
            Waits for the specified form to be on top of the forms stack, optionally ignoring pop-ups.
            </summary>
      <param name="formName">The name of the form to wait for.</param>
      <param name="ignorePopups">if set to <c>true</c> ignore pop-ups that appear before the expected form is displayed.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.Controls">
      <summary>
            Gets the names of all controls on the current form.
            </summary>
      <returns>The names of all controls on the current form.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.WaitForControl(System.String,System.Int32)">
      <summary>
            Waits for a control with the specified name to exist.
            </summary>
      <param name="controlName">The name of the control to wait for.</param>
      <param name="millisecondTimeout">The amount of time to wait for the control, in milliseconds.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.GetProperty(System.String,System.String)">
      <summary>
            Gets the value of the specified property of the control with the specified name.
            </summary>
      <param name="controlName">The name of the control to inspect.</param>
      <param name="propertyPath">The path to the property to retrieve.</param>
      <returns>The property value.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.GetProperties(System.String)">
      <summary>
            Gets a serialized list of properties on a control.
            </summary>
      <param name="propertyPath">A dot-separated path to the properties that are requested.</param>
      <returns>A serialized list of properties on the specified path.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.SetProperty(System.String,System.String,System.Object)">
      <summary>
            Sets a control property to the specified value.
            </summary>
      <param name="controlName">The name of the control.</param>
      <param name="propertyPath">The path to the property that should be set.</param>
      <param name="propertyValue">The value the property should be set to.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.WaitForPropertyValue(System.String,System.String,System.String,System.Int32)">
      <summary>
            Waits for a control to have the specified property value.
            </summary>
      <param name="controlName">The name of the control.</param>
      <param name="propertyName">The property of the control to monitor.</param>
      <param name="propertyValue">The property value to wait for.</param>
      <param name="millisecondTimeout">The amount of time to wait for the control to have the specified property value, in milliseconds.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.BringToFront">
      <summary>
            Brings the topmost form on the forms manager into focus.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.Address">
      <summary>
            Gets the address of the device this <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient" /> will connect to.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClient.AdminPassword">
      <summary>
            Gets or sets the device admin password.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClientMode">
      <summary>
            Modes in which the Remote User Interface service can be exposed in Jedi firmware.
            </summary>
      <remarks>
            This class is intended to be used like an enum, but creating a class allows each member
            to encapsulate all the data needed for each mode - security, port number, etc.
            </remarks>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClientMode.BuildEndpointAddress(System.String)">
      <summary>
            Builds an <see cref="T:System.ServiceModel.EndpointAddress" /> for accessing the Remote User Interface service at the specified address.
            </summary>
      <param name="address">The device address.</param>
      <returns>An <see cref="T:System.ServiceModel.EndpointAddress" /> for accessing the Remote User Interface service.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClientMode.CreateDefaultBinding">
      <summary>
            Creates a default <see cref="T:HP.DeviceAutomation.BsiHttpBinding" /> for accessing the Remote User Interface service in this mode.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.BsiHttpBinding" />.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClientMode.Development">
      <summary>
            The <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClientMode" /> in which RUI is accessed through development firmware.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClientMode.SystemTest">
      <summary>
            The <see cref="T:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClientMode" /> in which RUI is accessed via the SystemTest feature in production firmware.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClientMode.Scheme">
      <summary>
            Gets the URI scheme to use to connect to the Remote User Interface service in this mode.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClientMode.Port">
      <summary>
            Gets the port to use to connect to the Remote User Interface service in this mode.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.RemoteUserInterface.RemoteUserInterfaceClientMode.SecurityMode">
      <summary>
            Gets the binding <see cref="T:System.ServiceModel.SecurityMode" /> to use to connect to the Remote User Interface service in this mode.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.GetUIAttributesRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.IOxpdUIConfiguration.GetUIAttributes(HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.GetUIAttributesRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.GetUIAttributesRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.GetUIAttributesRequest" /> class.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.GetUIAttributesResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.IOxpdUIConfiguration.GetUIAttributes(HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.GetUIAttributesRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.GetUIAttributesResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.GetUIAttributesResponse" /> class.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.GetUIAttributesResponse.Attributes">
      <summary>
            Gets or sets the UI attributes.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.IOxpdUIConfiguration">
      <summary>
            Service contract for the OXPd UI Configuration service.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.IOxpdUIConfiguration.GetUIProfile">
      <summary>
            Gets the user interface profile of the device.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.UIProfile" /> object containing the UI profile information.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.IOxpdUIConfiguration.GetUIAttributes(HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.GetUIAttributesRequest)">
      <summary>
            Gets a list of UI attributes.
            </summary>
      <param name="request">A <see cref="T:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.GetUIAttributesRequest" /> object.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.GetUIAttributesResponse" /> object containing the UI attributes.</returns>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.KeyValuePair">
      <summary>
            A key/value pair.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.KeyValuePair.Key">
      <summary>
            Gets or sets the key.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.KeyValuePair.Value">
      <summary>
            Gets or sets the value.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.OxpdUIConfigurationClient">
      <summary>
            Client class for the <see cref="T:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.IOxpdUIConfiguration" /> service.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.OxpdUIConfigurationClient.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.OxpdUIConfigurationClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.OxpdUIConfigurationClient.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.OxpdUIConfigurationClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.OxpdUIConfigurationClient.GetUIProfile">
      <summary>
            Gets the user interface profile of the device.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.UIProfile" /> object containing the UI profile information.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.OxpdUIConfigurationClient.GetUIAttributes">
      <summary>
            Gets a list of UI attributes.
            </summary>
      <returns>A dictionary of UI attributes.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.OxpdUIConfigurationClient.Address">
      <summary>
            Gets the address of the device this <see cref="T:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.OxpdUIConfigurationClient" /> will connect to.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.OxpdUIConfigurationClient.AdminPassword">
      <summary>
            Gets or sets the device admin password.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.UIProfile">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.IOxpdUIConfiguration.GetUIProfile" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.UIProfile.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.UIProfile" /> class.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.UIProfile.ButtonIconWidth">
      <summary>
            Gets or sets the width of a homescreen button icon.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.UIProfile.ButtonIconHeight">
      <summary>
            Gets or sets the height of a homescreen button icon.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.UIProfile.IsColor">
      <summary>
            Gets or sets a value indicating whether the control panel is in color.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.Oxpd.UIConfiguration.UIProfile.LookAndFeel">
      <summary>
            Gets or sets the look and feel of the UI.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.Oxpd.Test.BrowserState">
      <summary>
            Embedded browser states returned by <see cref="M:HP.DeviceAutomation.Jedi.Oxpd.Test.IOxpdTest.GetBrowserState" />.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.Oxpd.Test.BrowserState.Inactive">
      <summary>
            The embedded browser is inactive (not displayed on the control panel).
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.Oxpd.Test.BrowserState.Idle">
      <summary>
            The embedded browser is active but not currently loading any content.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.Oxpd.Test.BrowserState.Loading">
      <summary>
            The embedded browser is active and is loading content.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.Oxpd.Test.GetScreenCaptureRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Jedi.Oxpd.Test.IOxpdTest.GetScreenCapture(HP.DeviceAutomation.Jedi.Oxpd.Test.GetScreenCaptureRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.Test.GetScreenCaptureRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.Oxpd.Test.GetScreenCaptureRequest" /> class.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.Oxpd.Test.GetScreenCaptureResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Jedi.Oxpd.Test.IOxpdTest.GetScreenCapture(HP.DeviceAutomation.Jedi.Oxpd.Test.GetScreenCaptureRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.Test.GetScreenCaptureResponse.GetImageBytes">
      <summary>
            Gets the screen capture image data as a byte array.
            </summary>
      <returns>The screen capture image data as a byte array.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.Test.GetScreenCaptureResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.Oxpd.Test.GetScreenCaptureResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.Test.GetScreenCaptureResponse.#ctor(System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.Oxpd.Test.GetScreenCaptureResponse" /> class.
            </summary>
      <param name="image">The screen capture image data.</param>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.Oxpd.Test.IOxpdTest">
      <summary>
            Service contract for the OXPd Test service.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.Test.IOxpdTest.EnableService">
      <summary>
            Enables OXPd Test service operations.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.Test.IOxpdTest.PressScreen(System.UInt16,System.UInt16)">
      <summary>
            Simulates pressing the touchscreen at the specified coordinates.
            </summary>
      <param name="xCoordinate">The x-coordinate.</param>
      <param name="yCoordinate">The y-coordinate.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.Test.IOxpdTest.PressKey(HP.DeviceAutomation.Jedi.Oxpd.Test.KeyCode,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Simulates pressing the specified physical key.
            </summary>
      <param name="keyCode">The key code.</param>
      <param name="isAltPressed">if set to <c>true</c> simulate holding down Alt while pressing the key.</param>
      <param name="isControlPressed">if set to <c>true</c> simulate holding down Ctrl while pressing the key.</param>
      <param name="isShiftPressed">if set to <c>true</c> simulate holding down Shift while pressing the key.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.Test.IOxpdTest.GetScreenCapture(HP.DeviceAutomation.Jedi.Oxpd.Test.GetScreenCaptureRequest)">
      <summary>
            Captures and returns the current content of the control panel display as a PNG.
            </summary>
      <param name="request">A <see cref="T:HP.DeviceAutomation.Jedi.Oxpd.Test.GetScreenCaptureRequest" /> object.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Jedi.Oxpd.Test.GetScreenCaptureResponse" /> object containing the screen capture data.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.Test.IOxpdTest.GetBrowserState">
      <summary>
            Gets the state of the topmost embedded browser.
            </summary>
      <returns>The state of the topmost embedded browser.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.Test.IOxpdTest.ExecuteJavaScript(System.String,System.String)">
      <summary>
            Executes an arbitrary segment of JavaScript in the embedded browser.
            </summary>
      <param name="uiContextId">The UI context identifier.  (Passing in null executes the JavaScript in the topmost browser.)</param>
      <param name="script">The JavaScript to execute.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.Test.IOxpdTest.GetTestConfiguration">
      <summary>
            Returns implementation-specific XML containing test configuration.
            </summary>
      <returns>The XML test configuration.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.Test.IOxpdTest.SetTestConfiguration(HP.DeviceAutomation.Jedi.Oxpd.Test.XmlElementContainer)">
      <summary>
            Sets test configuration settings using implementation-specific XML.
            </summary>
      <param name="payload">The XML test configuration.</param>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.Oxpd.Test.KeyCode">
      <summary>
            Physical keys that can be pressed using <see cref="M:HP.DeviceAutomation.Jedi.Oxpd.Test.IOxpdTest.PressKey(HP.DeviceAutomation.Jedi.Oxpd.Test.KeyCode,System.Boolean,System.Boolean,System.Boolean)" />.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.Oxpd.Test.KeyCode.EscKey">
      <summary>
            The Esc (escape) key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.Oxpd.Test.KeyCode.BackspaceKey">
      <summary>
            The Backspace key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.Oxpd.Test.KeyCode.TabKey">
      <summary>
            The Tab key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.Oxpd.Test.KeyCode.EnterKey">
      <summary>
            The Enter key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.Oxpd.Test.KeyCode.UpArrowKey">
      <summary>
            The up arrow key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.Oxpd.Test.KeyCode.DownArrowKey">
      <summary>
            The down arrow key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.Oxpd.Test.KeyCode.LeftArrowKey">
      <summary>
            The left arrow key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.Oxpd.Test.KeyCode.RightArrowKey">
      <summary>
            The right arrow key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.Oxpd.Test.KeyCode.StartKey">
      <summary>
            The Start key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.Oxpd.Test.KeyCode.ResetKey">
      <summary>
            The Reset key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.Oxpd.Test.KeyCode.StopKey">
      <summary>
            The Stop key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.Oxpd.Test.KeyCode.BackKey">
      <summary>
            The Back key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.Oxpd.Test.KeyCode.HelpKey">
      <summary>
            The Help key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.Oxpd.Test.KeyCode.MenuKey">
      <summary>
            The Menu key.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.Oxpd.Test.KeyCode.OKKey">
      <summary>
            The OK key.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.Oxpd.Test.OxpdTestClient">
      <summary>
            Client class for the <see cref="T:HP.DeviceAutomation.Jedi.Oxpd.Test.IOxpdTest" /> service.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.Test.OxpdTestClient.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.Oxpd.Test.OxpdTestClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.Test.OxpdTestClient.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.Oxpd.Test.OxpdTestClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.Test.OxpdTestClient.EnableService">
      <summary>
            Enables OXPd Test service operations.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.Test.OxpdTestClient.PressScreen(System.UInt16,System.UInt16)">
      <summary>
            Simulates pressing the touchscreen at the specified coordinates.
            </summary>
      <param name="xCoordinate">The x-coordinate.</param>
      <param name="yCoordinate">The y-coordinate.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.Test.OxpdTestClient.PressKey(HP.DeviceAutomation.Jedi.Oxpd.Test.KeyCode,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Simulates pressing the specified physical key.
            </summary>
      <param name="keyCode">The key code.</param>
      <param name="isAltPressed">if set to <c>true</c> simulate holding down Alt while pressing the key.</param>
      <param name="isControlPressed">if set to <c>true</c> simulate holding down Ctrl while pressing the key.</param>
      <param name="isShiftPressed">if set to <c>true</c> simulate holding down Shift while pressing the key.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.Test.OxpdTestClient.GetScreenCapture">
      <summary>
            Captures and returns the current content of the control panel display as a PNG.
            </summary>
      <returns>A byte array containing the screen capture data.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.Test.OxpdTestClient.GetBrowserState">
      <summary>
            Gets the state of the topmost embedded browser.
            </summary>
      <returns>The state of the topmost embedded browser.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.Test.OxpdTestClient.ExecuteJavaScript(System.String,System.String)">
      <summary>
            Executes an arbitrary segment of JavaScript in the embedded browser.
            </summary>
      <param name="uiContextId">The UI context identifier.  (Passing in null executes the JavaScript in the topmost browser.)</param>
      <param name="script">The JavaScript to execute.</param>
      <returns>The result of the JavaScript execution (in JSON).</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.Test.OxpdTestClient.GetTestConfiguration">
      <summary>
            Returns implementation-specific XML containing test configuration.
            </summary>
      <returns>The XML test configuration.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.Test.OxpdTestClient.SetTestConfiguration(HP.DeviceAutomation.Jedi.Oxpd.Test.XmlElementContainer)">
      <summary>
            Sets test configuration settings using implementation-specific XML.
            </summary>
      <param name="payload">The XML test configuration.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.Oxpd.Test.OxpdTestClient.Address">
      <summary>
            Gets the address of the device this <see cref="T:HP.DeviceAutomation.Jedi.Oxpd.Test.OxpdTestClient" /> will connect to.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.Oxpd.Test.OxpdTestClient.AdminPassword">
      <summary>
            Gets or sets the device admin password.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.Oxpd.Test.XmlElementContainer">
      <summary>
            A container for XML elements of any type.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Oxpd.Test.XmlElementContainer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.Oxpd.Test.XmlElementContainer" /> class.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.Oxpd.Test.XmlElementContainer.Any">
      <summary>
            Gets or sets the collection of XML elements.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClient">
      <summary>
            Client class for the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.IControlPanel" /> service.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClient.#ctor(System.String,HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClientMode)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="mode">The <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClientMode" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.
            <para>or</para><paramref name="mode" /> is null.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClient.#ctor(System.Net.IPAddress,HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClientMode)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="mode">The <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClientMode" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.
            <para>or</para><paramref name="mode" /> is null.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClient.#ctor(System.String,HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClientMode,HP.DeviceAutomation.BsiHttpBinding)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="mode">The <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClientMode" />.</param>
      <param name="binding">The <see cref="T:HP.DeviceAutomation.BsiHttpBinding" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.
            <para>or</para><paramref name="mode" /> is null.
            <para>or</para><paramref name="binding" /> is null.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClient.#ctor(System.Net.IPAddress,HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClientMode,HP.DeviceAutomation.BsiHttpBinding)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="mode">The <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClientMode" />.</param>
      <param name="binding">The <see cref="T:HP.DeviceAutomation.BsiHttpBinding" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.
            <para>or</para><paramref name="mode" /> is null.
            <para>or</para><paramref name="binding" /> is null.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClient.TypeOnPhysicalKeyboard(System.String,System.Boolean)">
      <summary>
            Types the specified text using a simulated physical keyboard.
            </summary>
      <param name="textToType">The text to type.</param>
      <param name="ensureActivity">if set to <c>true</c> ensure the control panel is active before typing.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClient.PressHardKey(HP.DeviceAutomation.Jedi.OmniUserInteraction.PanelButton)">
      <summary>
            Simulates pressing a physical button on the device.
            </summary>
      <param name="keyToPress">The key to press.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClient.SignalUserActivity">
      <summary>
            Simulates user activity at the control panel to wake the device and reset the inactivity timeout.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClient.Address">
      <summary>
            Gets the address of the device this <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClient" /> will connect to.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClient.AdminPassword">
      <summary>
            Gets or sets the device admin password.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClientMode">
      <summary>
            Modes in which the Control Panel qualification service can be exposed in Jedi firmware.
            </summary>
      <remarks>
            This class is intended to be used like an enum, but creating a class allows each member
            to encapsulate all the data needed for each mode - security, port number, etc.
            </remarks>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClientMode.BuildEndpointAddress(System.String)">
      <summary>
            Builds an <see cref="T:System.ServiceModel.EndpointAddress" /> for accessing the Control Panel qualification service at the specified address.
            </summary>
      <param name="address">The device address.</param>
      <returns>An <see cref="T:System.ServiceModel.EndpointAddress" /> for accessing the Control Panel qualification service.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClientMode.CreateDefaultBinding">
      <summary>
            Creates a default <see cref="T:HP.DeviceAutomation.BsiHttpBinding" /> for accessing the Control Panel qualification service in this mode.
            </summary>
      <returns>A <see cref="T:HP.DeviceAutomation.BsiHttpBinding" />.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClientMode.Development">
      <summary>
            The <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClientMode" /> in which the CPQ service is accessed through development firmware.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClientMode.SystemTest">
      <summary>
            The <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClientMode" /> in which the CPQ service is accessed via the SystemTest feature in production firmware.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClientMode.Scheme">
      <summary>
            Gets the URI scheme to use to connect to the Control Panel qualification service in this mode.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClientMode.Port">
      <summary>
            Gets the port to use to connect to the Control Panel qualification service in this mode.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.ControlPanelClientMode.SecurityMode">
      <summary>
            Gets the binding <see cref="T:System.ServiceModel.SecurityMode" /> to use to connect to the Control Panel qualification service in this mode.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition">
      <summary>
            Represents the position and visibility of a JavaScript element.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition.#ctor(HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition" /> struct.
            </summary>
      <param name="position">The <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse" /> containing the position data.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition.Equals(HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition)">
      <summary>
            Tests whether this <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition" /> has the same values as another <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition" />.
            </summary>
      <param name="other">The <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition" /> to compare with this <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition" />.</param>
      <returns>
        <c>true</c> if the current <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition" /> has the same values as the <paramref name="other" /> parameter; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition.Equals(System.Object)">
      <summary>
            Tests whether <paramref name="obj" /> is an <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition" /> with the same values as this <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition" />.</param>
      <returns>
        <c>true</c> if <paramref name="obj" /> is an <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition" /> with the same values as this <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition" />.
            </summary>
      <returns>A hash code for this <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition" />, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition.op_Equality(HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition,HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition)">
      <summary>
            Tests whether two <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition" /> structures have the same values.
            </summary>
      <param name="left">The <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition" /> that is to the left of the equality operator.</param>
      <param name="right">The <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition" /> that is to the right of the equality operator.</param>
      <returns>
        <c>true</c> if the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition" /> structures have the same values; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition.op_Inequality(HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition,HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition)">
      <summary>
            Tests whether two <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition" /> structures have any different values.
            </summary>
      <param name="left">The <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition" /> that is to the left of the inequality operator.</param>
      <param name="right">The <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition" /> that is to the right of the inequality operator.</param>
      <returns>
        <c>true</c> if the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition" /> structures have any different values; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition.Left">
      <summary>
            Gets the position of the element's left edge.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition.Right">
      <summary>
            Gets the position of the element's right edge.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition.Top">
      <summary>
            Gets the position of the element's top edge.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition.Bottom">
      <summary>
            Gets the position of the element's bottom edge.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition.Width">
      <summary>
            Gets the width of the element.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition.Height">
      <summary>
            Gets the height of the element.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition.CenterX">
      <summary>
            Gets the horizontal center of the element.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition.CenterY">
      <summary>
            Gets the vertical center of the element.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition.CenterVisible">
      <summary>
            Gets a value indicating whether the center of this element is visible.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition.TopLeftVisible">
      <summary>
            Gets a value indicating whether the upper-left corner of this element is visible.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition.TopRightVisible">
      <summary>
            Gets a value indicating whether the upper-right corner of this element is visible.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition.BottomLeftVisible">
      <summary>
            Gets a value indicating whether the lower-left corner of this element is visible.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition.BottomRightVisible">
      <summary>
            Gets a value indicating whether the lower-right corner of this element is visible.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.IControlPanel">
      <summary>
            Service contract for the Control Panel qualification service.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.IControlPanel.TypeOnPhysicalKeyboard(System.String,System.Boolean)">
      <summary>
            Types the specified text using a simulated physical keyboard.
            </summary>
      <param name="textToType">The text to type.</param>
      <param name="ensureActivity">if set to <c>true</c> ensure the control panel is active before typing.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.IControlPanel.PressHardKey(HP.DeviceAutomation.Jedi.OmniUserInteraction.PanelButton)">
      <summary>
            Simulates pressing a physical button on the device.
            </summary>
      <param name="keyToPress">The key to press.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.IControlPanel.SignalUserActivity">
      <summary>
            Simulates user activity at the control panel to wake the device and reset the inactivity timeout.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient">
      <summary>
            Client class that executes remote OmniTester JavaScript calls via <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector" />.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.#ctor(System.String,System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="timeout">The timeout for web socket operations.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.#ctor(System.Net.IPAddress,System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="timeout">The timeout for web socket operations.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.Connect">
      <summary>
            Establishes a connection to the device and loads the user interaction script.
            </summary>
      <exception cref="T:System.TimeoutException">The device connection did not complete within the default timeout.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorException">
            Connection to the remote debugger failed.
            <para>or</para>
            All inspectable pages at the specified address are already in use.
            <para>or</para>
            No inspectable endpoint was found at the specified address.
            <para>or</para>
            User interaction script could not be loaded.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.Disconnect">
      <summary>
            Disconnects from the device.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.GetCount(System.String)">
      <summary>
            Gets the number of elements matching the specified selector.
            </summary>
      <param name="elementSelector">The element selector.</param>
      <returns>The number of elements that match the selector.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.Click(System.String)">
      <summary>
            Clicks an element using the specified selector.
            </summary>
      <param name="elementSelector">A selector identifying the element to click.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.ScrollTo(System.String)">
      <summary>
            Scrolls to an element using the specified selector.
            </summary>
      <param name="elementSelector">A selector identifying the element to scroll to.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.GetAllIdsOnPage">
      <summary>
            Gets the IDs of all elements on the page.
            </summary>
      <returns>The IDs of all elements on the page.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.GetChildrenIds(System.String)">
      <summary>
            Gets the IDs of all children of an element returned by the specified selector.
            </summary>
      <param name="elementSelector">The element selector.</param>
      <returns>The IDs of all child elements.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.GetDescendantIds(System.String)">
      <summary>
            Gets the IDs of all descendants of an element returned by the specified selector.
            </summary>
      <param name="elementSelector">The element selector.</param>
      <returns>The IDs of all descendant elements.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.GetIds(System.String)">
      <summary>
            Gets the IDs of all elements returned by the specified selector.
            </summary>
      <param name="elementSelector">The element selector.</param>
      <returns>The IDs of all elements matching the selector.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.SetSliderValue(System.String,System.Int32)">
      <summary>
            Sets the value of a slider element using the specified selector.
            </summary>
      <param name="elementSelector">A selector identifying the slider element.</param>
      <param name="value">The value to set the slider to.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.GetPropertyFromElement(System.String,System.String)">
      <summary>
            Gets the value of the specified property from an element using the specified selector.
            </summary>
      <param name="elementSelector">A selector identifying the element to inspect.</param>
      <param name="propertyName">The name of the property to retrieve.</param>
      <returns>The property value.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.GetPropertyFromElement``1(System.String,System.String)">
      <summary>
            Gets the value of the specified property from an element using the specified selector.
            </summary>
      <typeparam name="T">The type of object to retrieve.</typeparam>
      <param name="elementSelector">A selector identifying the element to inspect.</param>
      <param name="propertyName">The name of the property to retrieve.</param>
      <returns>The property value.</returns>
      <exception cref="T:System.FormatException">The property value could not be converted to the specified type <typeparamref name="T" />.</exception>
      <exception cref="T:System.InvalidCastException">Conversion to the specified type <typeparamref name="T" /> is not supported.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.GetAttributeFromElement(System.String,System.String)">
      <summary>
            Gets the value of the specified attribute from an element using the specified selector.
            </summary>
      <param name="elementSelector">A selector identifying the element to inspect.</param>
      <param name="attributeName">The name of the attribute to retrieve.</param>
      <returns>The attribute value.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.GetAttributeFromElement``1(System.String,System.String)">
      <summary>
            Gets the value of the specified attribute from an element using the specified selector.
            </summary>
      <typeparam name="T">The type of object to retrieve.</typeparam>
      <param name="elementSelector">A selector identifying the element to inspect.</param>
      <param name="attributeName">The name of the attribute to retrieve.</param>
      <returns>The attribute value.</returns>
      <exception cref="T:System.FormatException">The attribute value could not be converted to the specified type <typeparamref name="T" />.</exception>
      <exception cref="T:System.InvalidCastException">Conversion to the specified type <typeparamref name="T" /> is not supported.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.GetCssFromElement(System.String,System.String)">
      <summary>
            Gets the value of the specified style property from an element using the specified selector.
            </summary>
      <param name="elementSelector">A selector identifying the element to inspect.</param>
      <param name="stylePropertyName">The name of the style property to retrieve.</param>
      <returns>The style property value.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.GetCssFromElement``1(System.String,System.String)">
      <summary>
            Gets the value of the specified style property from an element using the specified selector.
            </summary>
      <typeparam name="T">The type of object to retrieve.</typeparam>
      <param name="elementSelector">A selector identifying the element to inspect.</param>
      <param name="stylePropertyName">The name of the style property to retrieve.</param>
      <returns>The style property value.</returns>
      <exception cref="T:System.FormatException">The style property value could not be converted to the specified type <typeparamref name="T" />.</exception>
      <exception cref="T:System.InvalidCastException">Conversion to the specified type <typeparamref name="T" /> is not supported.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.GetStringFromStringId(System.String)">
      <summary>
            Resolves a string ID to a display string for the current locale.
            </summary>
      <param name="id">The string identifier.</param>
      <returns>The display string for the current locale.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.GetActiveElementId">
      <summary>
            Gets the ID of the element that is currently active.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.Exists(System.String)">
      <summary>
            Determines whether an element exists on the control panel.
            (An element may be scrolled off the screen or on another tab and still exist.)
            </summary>
      <param name="elementSelector">A selector identifying the element to look for.</param>
      <returns>
        <c>true</c> if a matching element exists; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.IsVisible(System.String)">
      <summary>
            Determines whether any portion of an element is visible.
            </summary>
      <param name="elementSelector">A selector identifying the element.</param>
      <returns>
        <c>true</c> if the specified element is visible; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.IsCompletelyVisible(System.String)">
      <summary>
            Determines whether an element is completely visible.
            </summary>
      <param name="elementSelector">A selector identifying the element.</param>
      <returns>
        <c>true</c> if the specified element is completely visible; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.IsActive(System.String)">
      <summary>
            Determines whether an element is the active element (e.g. highlighted).
            </summary>
      <param name="elementSelector">A selector identifying the element.</param>
      <returns>
        <c>true</c> if the specified element is active; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.IsDisabled(System.String)">
      <summary>
            Determines whether an element is disabled.
            </summary>
      <param name="elementSelector">A selector identifying the element.</param>
      <returns>
        <c>true</c> if the specified element is disabled; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.GetLocation(System.String)">
      <summary>
            Gets the position and visibility of an element.
            </summary>
      <param name="elementSelector">A selector identifying the element to inspect.</param>
      <returns>An <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.ElementPosition" /> object representing the position and visibility of the element.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.TypeOnVirtualKeyboard(System.String,System.Boolean)">
      <summary>
            Types the specified text on a virtual keyboard displayed on the control panel.
            </summary>
      <param name="text">The text to type.</param>
      <param name="continueOnError">if set to <c>true</c> continue typing if a character cannot be found on the keyboard.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.TypeOnNumericKeypad(System.String)">
      <summary>
            Types the specified text on a virtual numeric keypad displayed on the control panel.
            </summary>
      <param name="text">The text to type.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.IsTyping">
      <summary>
            Returns a value indicating the current status of a typing operation.
            </summary>
      <returns>
            If typing is currently executing, this method returns the number of characters typed.
            If typing is not executing, this method returns 0 or -1.
            If an error has occurred while typing, this method returns a value less than -1.
            </returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterClient.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterScript">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterScript.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterScript.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTesterScript.UserInteractionScripts">
      <summary>
              Looks up a localized string similar to var $OmniTester = (function () {
               // Private Methods
               var Keyboard;
               require(['Controls/js/keyboard'], function (keyboard) {
                   Keyboard = keyboard;
               }),
                   /*  _typing &gt;= 0 : currently typing, represents number of characters successfully typed.
                   _typing = -1 : default value, nothing is wrong and nothing is being typed.
                   _typing = -2 : glyph not found in current layout
                   _typing = -3 : target keyboard key not found on current keyboard */
                   _typing =  [rest of string was truncated]";.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTouchClient">
      <summary>
            Client class that executes Omni touch commands via HTTP.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTouchClient.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTouchClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTouchClient.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTouchClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTouchClient.Tap(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Taps the control panel the specified number of times at the specified coordinates.
            </summary>
      <param name="x">The x-coordinate.</param>
      <param name="y">The y-coordinate.</param>
      <param name="taps">The number of times to tap the control panel.</param>
      <param name="interval">The interval between taps, in milliseconds.</param>
      <exception cref="T:System.Net.WebException">An error occurred while processing the request.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.OmniTouchClient.Gesture(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Performs a hold-then-swipe gesture between the specified coordinates.
            </summary>
      <param name="startX">The starting x-coordinate.</param>
      <param name="startY">The starting y-coordinate.</param>
      <param name="endX">The ending x-coordinate.</param>
      <param name="endY">The ending y-coordinate.</param>
      <param name="duration">The duration of the gesture, in milliseconds.</param>
      <exception cref="T:System.Net.WebException">An error occurred while processing the request.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.PanelButton">
      <summary>
            Panel buttons that can be pressed using <see cref="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.IControlPanel.PressHardKey(HP.DeviceAutomation.Jedi.OmniUserInteraction.PanelButton)" />.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniUserInteraction.PanelButton.Home">
      <summary>
            The home button.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniUserInteraction.PanelButton.Info">
      <summary>
            The information button.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniUserInteraction.PanelButton.Help">
      <summary>
            The help button.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniUserInteraction.PanelButton.Start">
      <summary>
            The start button.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniUserInteraction.PanelButton.Stop">
      <summary>
            The stop button.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniUserInteraction.PanelButton.Back">
      <summary>
            The back button.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniUserInteraction.PanelButton.MessageCenter">
      <summary>
            The message center button.
            </summary>
    </member>
    <member name="F:HP.DeviceAutomation.Jedi.OmniUserInteraction.PanelButton.PrintFromJobStorage">
      <summary>
            The print from job storage button.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.RuntimeEvaluateException">
      <summary>
            Exception thrown when a <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector" /> runtime evaluation returns an exception.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.RuntimeEvaluateException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.RuntimeEvaluateException" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.RuntimeEvaluateException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.RuntimeEvaluateException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.RuntimeEvaluateException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.RuntimeEvaluateException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.RuntimeEvaluateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.RuntimeEvaluateException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector">
      <summary>
            Provides methods for interacting with a web page using remote debugging tools.
            </summary>
      <remarks>
            Documentation on remote debugging tools is available at https://chromedevtools.github.io/debugger-protocol-viewer/1-2/.
            </remarks>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector.#ctor(System.String,System.Int32,System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector" /> class.
            </summary>
      <param name="address">The web inspector address.</param>
      <param name="port">The port.</param>
      <param name="timeout">The default timeout for web socket operations.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector.#ctor(System.Net.IPAddress,System.Int32,System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector" /> class.
            </summary>
      <param name="address">The web inspector address.</param>
      <param name="port">The port.</param>
      <param name="timeout">The default timeout for web socket operations.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector.Connect">
      <summary>
            Opens a connection to a remote web page.
            </summary>
      <exception cref="T:System.TimeoutException">The remote debugger connection did not complete within the default timeout.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorException">
            Connection to the remote debugger failed.
            <para>or</para>
            All inspectable pages at the specified address are already in use.
            <para>or</para>
            No inspectable endpoint was found at the specified address.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector.Connect(HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorPage)">
      <summary>
            Opens a connection to the specified <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorPage" />.
            </summary>
      <param name="page">The <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorPage" /> to connect to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="page" /> is null.</exception>
      <exception cref="T:System.TimeoutException">The remote debugger connection did not complete within the default timeout.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorException">Connection to the remote debugger failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector.Connect(System.Uri)">
      <summary>
            Opens a connection to a remote web page using the specified <see cref="T:System.Uri" />.
            </summary>
      <param name="debuggerUri">The remote debugger URI to connect to.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="debuggerUri" /> points to a different host than this <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="debuggerUri" /> is null.</exception>
      <exception cref="T:System.TimeoutException">The remote debugger connection did not complete within the default timeout.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorException">Connection to the remote debugger failed.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector.Disconnect">
      <summary>
            Closes an open connection to a remote web page (if one exists).
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector.ForceDisconnect(HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorPage)">
      <summary>
            Forcibly disconnects any client that is connected to the specified <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorPage" />.
            </summary>
      <param name="page">The <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorPage" /> whose connection should be terminated.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="page" /> points to a different host than this <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector" />.
            <para>or</para><paramref name="page" /> does not have an inspectable page ID.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="page" /> is null.</exception>
      <exception cref="T:System.TimeoutException">The remote debugger connection did not complete within the default timeout.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector.RuntimeEvaluate(System.String)">
      <summary>
            Evaluates the specified JavaScript on the remote web page, with the default timeout.
            </summary>
      <param name="script">The script to evaluate.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse" /> containing the result of the execution.</returns>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.RuntimeEvaluateException">The executed script threw an exception.</exception>
      <exception cref="T:System.TimeoutException">The command did not complete within the default timeout.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorException">
            The command resulted in an error response.
            <para>or</para>
            The remote debugger returned an invalid response.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector.RuntimeEvaluate(System.String,System.TimeSpan)">
      <summary>
            Evaluates the specified JavaScript on the remote web page, with the specified timeout.
            </summary>
      <param name="script">The script to evaluate.</param>
      <param name="timeout">The amount of time to wait for the command to complete.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse" /> containing the result of the execution.</returns>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.RuntimeEvaluateException">The executed script threw an exception.</exception>
      <exception cref="T:System.TimeoutException">The command did not complete within the specified timeout.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorException">
            The command resulted in an error response.
            <para>or</para>
            The remote debugger returned an invalid response.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector.ClearLogMessages">
      <summary>
            Clears all log messages from the remote web page buffer.
            </summary>
      <exception cref="T:System.TimeoutException">The command did not complete within the default timeout.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorException">
            The command resulted in an error response.
            <para>or</para>
            The remote debugger returned an invalid response.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector.SendCommand(System.String)">
      <summary>
            Sends an RPC command and blocks until a response is received, up to the default timeout.
            </summary>
      <param name="command">The JSON RPC 2.0 command to execute.</param>
      <returns> A JSON serialized response.</returns>
      <exception cref="T:System.TimeoutException">The command did not complete within the default timeout.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorException">
            The command resulted in an error response.
            <para>or</para>
            The remote debugger returned an invalid response.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector.SendCommand(System.String,System.TimeSpan)">
      <summary>
            Sends an RPC command and blocks until a response is received, up to the specified timeout.
            </summary>
      <param name="command">The JSON RPC 2.0 command to execute.</param>
      <param name="timeout">The amount of time to wait for the command to complete.</param>
      <returns>A JSON serialized response.</returns>
      <exception cref="T:System.TimeoutException">The command did not complete within the specified timeout.</exception>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorException">
            The command resulted in an error response.
            <para>or</para>
            The remote debugger returned an invalid response.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector.DiscoverInspectablePages">
      <summary>
            Retrieves a list of inspectable pages from the remote debugger.
            </summary>
      <returns>A collection of <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorPage" /> objects representing the inspectable pages.</returns>
      <exception cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorException">
            Connection to the remote debugger failed.
            <para>or</para>
            The remote debugger returned an invalid response.
            </exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorDisconnectedException">
      <summary>
            Exception thrown when a <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector" /> command is attempted when the service is not connected.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorDisconnectedException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorDisconnectedException" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorDisconnectedException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorDisconnectedException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorDisconnectedException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorDisconnectedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorDisconnectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorDisconnectedException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorException">
      <summary>
            Exception thrown when a <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector" /> command returns an error.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorException" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorPage">
      <summary>
            A page that can be accessed via <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector" />.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorPage.#ctor(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorPage" /> class.
            </summary>
      <param name="address">The device address.</param>
      <param name="port">The port.</param>
      <param name="pageData">The JSON page data.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="pageData" /> does not represent a valid page.</exception>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorPage.Uri">
      <summary>
            Gets the <see cref="T:System.Uri" /> of this inspectable page.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorPage.ClientConnected">
      <summary>
            Gets a value indicating whether a client is connected to this page.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorPage.PageId">
      <summary>
            Gets the unique identifier for this page.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse">
      <summary>
            A response received from remote script execution via <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspector" />.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse" /> class.
            </summary>
      <param name="result">The result.</param>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse.GetRaw">
      <summary>
            Gets the raw data contained in this <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse" />.
            </summary>
      <returns>The raw data contained in this <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse" />.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse.GetValue">
      <summary>
            Gets the value of this <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse" /> as a <see cref="T:System.String" />.
            Should be used for primitive return values.
            </summary>
      <returns>The data from this <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse" /> as a <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse.GetValue``1">
      <summary>
            Gets the value of this <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse" /> as the specified type <typeparamref name="T" />.
            Should be used for primitive return values.
            </summary>
      <typeparam name="T">The type of data to return.</typeparam>
      <returns>The data from this <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse" /> as the specified type.</returns>
      <exception cref="T:System.FormatException">The data could not be converted to the specified type <typeparamref name="T" />.</exception>
      <exception cref="T:System.InvalidCastException">Conversion to the specified type <typeparamref name="T" /> is not supported.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse.GetValue(System.String)">
      <summary>
            Gets the specified object value from this <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse" /> as a <see cref="T:System.String" />.
            Should be used for object return values.
            </summary>
      <param name="key">The key of the value to retrieve.</param>
      <returns>The specified object value as a <see cref="T:System.String" />.</returns>
      <exception cref="T:System.InvalidOperationException">This instance does not represent an object graph.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The specified key was not found in the object graph.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse.GetValue``1(System.String)">
      <summary>
            Gets the specified object value from this <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse" /> as the specified type <typeparamref name="T" />.
            Should be used for object return values.
            </summary>
      <typeparam name="T">The type of data to return.</typeparam>
      <param name="key">The key of the value to retrieve.</param>
      <returns>The specified object value as the specified type.</returns>
      <exception cref="T:System.FormatException">The data could not be converted to the specified type <typeparamref name="T" />.</exception>
      <exception cref="T:System.InvalidCastException">Conversion to the specified type <typeparamref name="T" /> is not supported.</exception>
      <exception cref="T:System.InvalidOperationException">This instance does not represent an object graph.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The specified key was not found in the object graph.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse.GetArray">
      <summary>
            Gets the values from this <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse" /> as <see cref="T:System.String" /> objects.
            Should be used for array return values.
            </summary>
      <returns>The values from this <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse" /> as <see cref="T:System.String" /> objects.</returns>
      <exception cref="T:System.InvalidOperationException">This instance does not represent an object array.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse.GetArray``1">
      <summary>
            Gets the values from this <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse" /> as objects of the specified type <typeparamref name="T" />.
            Should be used for array return values.
            </summary>
      <typeparam name="T">The type of data to return.</typeparam>
      <returns>The values from this <see cref="T:HP.DeviceAutomation.Jedi.OmniUserInteraction.WebInspectorResponse" /> as objects of the specified type <typeparamref name="T" />.</returns>
      <exception cref="T:System.FormatException">The data could not be converted to the specified type <typeparamref name="T" />.</exception>
      <exception cref="T:System.InvalidCastException">Conversion to the specified type <typeparamref name="T" /> is not supported.</exception>
      <exception cref="T:System.InvalidOperationException">This instance does not represent an object array.</exception>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.Diagnostics.CrashDumpRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Jedi.Diagnostics.IDiagnostics.CreateCrashDump(HP.DeviceAutomation.Jedi.Diagnostics.CrashDumpRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Diagnostics.CrashDumpRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.Diagnostics.CrashDumpRequest" /> class.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.Diagnostics.CrashDumpResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Jedi.Diagnostics.IDiagnostics.CreateCrashDump(HP.DeviceAutomation.Jedi.Diagnostics.CrashDumpRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Diagnostics.CrashDumpResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.Diagnostics.CrashDumpResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Diagnostics.CrashDumpResponse.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.Diagnostics.CrashDumpResponse" /> class.
            </summary>
      <param name="response">The response.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.Diagnostics.CrashDumpResponse.Response">
      <summary>
            Gets the response.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticsClient">
      <summary>
            Client class for the <see cref="T:HP.DeviceAutomation.Jedi.Diagnostics.IDiagnostics" /> service.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticsClient.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticsClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticsClient.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticsClient" /> class.
            </summary>
      <param name="address">The device address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticsClient.RunTask(System.String,System.String,System.String[])">
      <summary>
            Executes a diagnostics task.
            </summary>
      <param name="taskName">The name of the task to run.</param>
      <param name="methodIdentifier">The method identifier of the task to run.</param>
      <param name="parameters">The parameters to use to run the task.</param>
      <returns>The result of the task.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticsClient.DumpRingBuffers">
      <summary>
            Dumps the device ring buffers.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticsClient.CreateCrashDump">
      <summary>
            Creates a crash dump.
            </summary>
      <returns>The result of the crash dump operation.</returns>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticsClient.Address">
      <summary>
            Gets the address of the device this <see cref="T:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticsClient" /> will connect to.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticsClient.AdminPassword">
      <summary>
            Gets or sets the device admin password.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticTaskRequest">
      <summary>
            Message contract sent to the <see cref="M:HP.DeviceAutomation.Jedi.Diagnostics.IDiagnostics.RunTask(HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticTaskRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticTaskRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticTaskRequest" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticTaskRequest.#ctor(System.String,System.String,System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticTaskRequest" /> class.
            </summary>
      <param name="taskName">The name of the task to run.</param>
      <param name="methodIdentifier">The method identifier of the task to run.</param>
      <param name="parameters">The parameters to use to run the task.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticTaskRequest.TaskName">
      <summary>
            Gets the name of the task to run.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticTaskRequest.MethodIdentifier">
      <summary>
            Gets the method identifier of the task to run.
            </summary>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticTaskRequest.Parameters">
      <summary>
            Gets the parameters to use to run the task.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticTaskResponse">
      <summary>
            Message contract returned by the <see cref="M:HP.DeviceAutomation.Jedi.Diagnostics.IDiagnostics.RunTask(HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticTaskRequest)" /> method.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticTaskResponse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticTaskResponse" /> class.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticTaskResponse.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticTaskResponse" /> class.
            </summary>
      <param name="response">The response.</param>
    </member>
    <member name="P:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticTaskResponse.Response">
      <summary>
            Gets the response.
            </summary>
    </member>
    <member name="T:HP.DeviceAutomation.Jedi.Diagnostics.IDiagnostics">
      <summary>
            Service contract for the Diagnostics service.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Diagnostics.IDiagnostics.RunTask(HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticTaskRequest)">
      <summary>
            Executes a diagnostics task.
            </summary>
      <param name="request">A <see cref="T:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticTaskRequest" /> specifying the task to run.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Jedi.Diagnostics.DiagnosticTaskResponse" />containing the result of the task.</returns>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Diagnostics.IDiagnostics.DumpRingBuffers">
      <summary>
            Dumps the device ring buffers.
            </summary>
    </member>
    <member name="M:HP.DeviceAutomation.Jedi.Diagnostics.IDiagnostics.CreateCrashDump(HP.DeviceAutomation.Jedi.Diagnostics.CrashDumpRequest)">
      <summary>
            Creates a crash dump.
            </summary>
      <param name="request">A <see cref="T:HP.DeviceAutomation.Jedi.Diagnostics.CrashDumpRequest" /> object.</param>
      <returns>A <see cref="T:HP.DeviceAutomation.Jedi.Diagnostics.CrashDumpResponse" /> object containing the result of the crash dump operation.</returns>
    </member>
  </members>
</doc>
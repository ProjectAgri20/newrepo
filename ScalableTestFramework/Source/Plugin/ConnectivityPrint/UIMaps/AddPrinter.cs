//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------

namespace HP.ScalableTest.Plugin.ConnectivityPrint.UIMaps
{
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class AddPrinter
    {
        /// <summary>
        /// Backing field for DevicesandPrintWindow property
        /// </summary>
        private Window fDevicesandPrintWindow;

        /// <summary>
        /// Backing field for WorkerWPane property
        /// </summary>
        private Pane fWorkerWPane;

        /// <summary>
        /// Backing field for ReBarWindow3240Dup0Pane property
        /// </summary>
        private Pane fReBarWindow3240Dup0Pane;

        /// <summary>
        /// Backing field for RebarBandI0XCustom property
        /// </summary>
        private Custom fRebarBandI0XCustom;

        /// <summary>
        /// Backing field for TravelBandPane property
        /// </summary>
        private Pane fTravelBandPane;

        /// <summary>
        /// Backing field for NavigationbuttoToolBar property
        /// </summary>
        private ToolBar fNavigationbuttoToolBar;

        /// <summary>
        /// Backing field for BackAltLeftArroButton property
        /// </summary>
        private Button fBackAltLeftArroButton;

        /// <summary>
        /// Backing field for ForwardAltRightButton property
        /// </summary>
        private Button fForwardAltRightButton;

        /// <summary>
        /// Backing field for RecentlocationsButton property
        /// </summary>
        private Button fRecentlocationsButton;

        /// <summary>
        /// Backing field for RebarBandI1XCustom property
        /// </summary>
        private Custom fRebarBandI1XCustom;

        /// <summary>
        /// Backing field for UpBandPane property
        /// </summary>
        private Pane fUpBandPane;

        /// <summary>
        /// Backing field for UpbandtoolbarToToolBar property
        /// </summary>
        private ToolBar fUpbandtoolbarToToolBar;

        /// <summary>
        /// Backing field for UptoHardwareandButton property
        /// </summary>
        private Button fUptoHardwareandButton;

        /// <summary>
        /// Backing field for RebarBandI2XCustom property
        /// </summary>
        private Custom fRebarBandI2XCustom;

        /// <summary>
        /// Backing field for AddressBandRootPane property
        /// </summary>
        private Pane fAddressBandRootPane;

        /// <summary>
        /// Backing field for msctlsprogressProgressBar property
        /// </summary>
        private ProgressBar fmsctlsprogressProgressBar;

        /// <summary>
        /// Backing field for BreadcrumbParenPane property
        /// </summary>
        private Pane fBreadcrumbParenPane;

        /// <summary>
        /// Backing field for AddressControlPToolBar property
        /// </summary>
        private ToolBar fAddressControlPToolBar;

        /// <summary>
        /// Backing field for AlllocationsIteSplitButton property
        /// </summary>
        private SplitButton fAlllocationsIteSplitButton;

        /// <summary>
        /// Backing field for ControlPanelIteSplitButton property
        /// </summary>
        private SplitButton fControlPanelIteSplitButton;

        /// <summary>
        /// Backing field for HardwareandSounSplitButton property
        /// </summary>
        private SplitButton fHardwareandSounSplitButton;

        /// <summary>
        /// Backing field for DevicesandPrintMenuItem property
        /// </summary>
        private MenuItem fDevicesandPrintMenuItem;

        /// <summary>
        /// Backing field for AddressbandtoolToolBar property
        /// </summary>
        private ToolBar fAddressbandtoolToolBar;

        /// <summary>
        /// Backing field for PreviousLocatioButton property
        /// </summary>
        private Button fPreviousLocatioButton;

        /// <summary>
        /// Backing field for RefreshDevicesaButton property
        /// </summary>
        private Button fRefreshDevicesaButton;

        /// <summary>
        /// Backing field for RebarBandI3XCustom property
        /// </summary>
        private Custom fRebarBandI3XCustom;

        /// <summary>
        /// Backing field for SeparatorBandI0XPane property
        /// </summary>
        private Pane fSeparatorBandI0XPane;

        /// <summary>
        /// Backing field for RebarBandI4XCustom property
        /// </summary>
        private Custom fRebarBandI4XCustom;

        /// <summary>
        /// Backing field for UniversalSearchPane property
        /// </summary>
        private Pane fUniversalSearchPane;

        /// <summary>
        /// Backing field for SearchBoxPane property
        /// </summary>
        private Pane fSearchBoxPane;

        /// <summary>
        /// Backing field for SearchEditBoxWrPane property
        /// </summary>
        private Pane fSearchEditBoxWrPane;

        /// <summary>
        /// Backing field for SearchDevicesanPane property
        /// </summary>
        private Pane fSearchDevicesanPane;

        /// <summary>
        /// Backing field for SearchBoxSearchEdit property
        /// </summary>
        private Edit fSearchBoxSearchEdit;

        /// <summary>
        /// Backing field for SearchButtonSeaButton property
        /// </summary>
        private Button fSearchButtonSeaButton;

        /// <summary>
        /// Backing field for RebarBandI5XCustom property
        /// </summary>
        private Custom fRebarBandI5XCustom;

        /// <summary>
        /// Backing field for SeparatorBandI1XPane property
        /// </summary>
        private Pane fSeparatorBandI1XPane;

        /// <summary>
        /// Backing field for DevicesandPrintPane property
        /// </summary>
        private Pane fDevicesandPrintPane;

        /// <summary>
        /// Backing field for DUIViewWndClassPane property
        /// </summary>
        private Pane fDUIViewWndClassPane;

        /// <summary>
        /// Backing field for ExplorerPaneHWNPane property
        /// </summary>
        private Pane fExplorerPaneHWNPane;

        /// <summary>
        /// Backing field for CtrlNotifySinkPane property
        /// </summary>
        private Pane fCtrlNotifySinkPane;

        /// <summary>
        /// Backing field for FolderLayoutPanPane property
        /// </summary>
        private Pane fFolderLayoutPanPane;

        /// <summary>
        /// Backing field for DetailsPanePrevPane property
        /// </summary>
        private Pane fDetailsPanePrevPane;

        /// <summary>
        /// Backing field for ThumbnailModuleImage property
        /// </summary>
        private Image fThumbnailModuleImage;

        /// <summary>
        /// Backing field for MetadataModulePTree property
        /// </summary>
        private Tree fMetadataModulePTree;

        /// <summary>
        /// Backing field for NumberofitemsMeEdit property
        /// </summary>
        private Edit fNumberofitemsMeEdit;

        /// <summary>
        /// Backing field for CommandModuleFoToolBar property
        /// </summary>
        private ToolBar fCommandModuleFoToolBar;

        /// <summary>
        /// Backing field for HelpButton3dHelButton property
        /// </summary>
        private Button fHelpButton3dHelButton;

        /// <summary>
        /// Backing field for ViewsViewControSplitButton property
        /// </summary>
        private SplitButton fViewsViewControSplitButton;

        /// <summary>
        /// Backing field for ViewSliderButtoButton property
        /// </summary>
        private Button fViewSliderButtoButton;

        /// <summary>
        /// Backing field for AddadeviceAJOSpButton property
        /// </summary>
        private Button fAddadeviceAJOSpButton;

        /// <summary>
        /// Backing field for AddaprinterAJOSButton property
        /// </summary>
        private Button fAddaprinterAJOSButton;

        /// <summary>
        /// Backing field for ShellFolderViewPane property
        /// </summary>
        private Pane fShellFolderViewPane;

        /// <summary>
        /// Backing field for ItemsViewUIItemList property
        /// </summary>
        private List fItemsViewUIItemList;

        /// <summary>
        /// Backing field for DevicesUIGroupIGroup property
        /// </summary>
        private Group fDevicesUIGroupIGroup;

        /// <summary>
        /// Backing field for Devices2UIGroupCustom property
        /// </summary>
        private Custom fDevices2UIGroupCustom;

        /// <summary>
        /// Backing field for CollapseGroupUIDup0Button property
        /// </summary>
        private Button fCollapseGroupUIDup0Button;

        /// <summary>
        /// Backing field for NameUIPropertySDup0Edit property
        /// </summary>
        private Edit fNameUIPropertySDup0Edit;

        /// <summary>
        /// Backing field for CountUICountDup0Edit property
        /// </summary>
        private Edit fCountUICountDup0Edit;

        /// <summary>
        /// Backing field for DEVEGOWD13UIIteListItem property
        /// </summary>
        private ListItem fDEVEGOWD13UIIteListItem;

        /// <summary>
        /// Backing field for UIImageBaselineDup0Image property
        /// </summary>
        private Image fUIImageBaselineDup0Image;

        /// <summary>
        /// Backing field for NameUIPropertySDup1Edit property
        /// </summary>
        private Edit fNameUIPropertySDup1Edit;

        /// <summary>
        /// Backing field for LogitechUnifyinListItem property
        /// </summary>
        private ListItem fLogitechUnifyinListItem;

        /// <summary>
        /// Backing field for UIImageBaselineDup1Image property
        /// </summary>
        private Image fUIImageBaselineDup1Image;

        /// <summary>
        /// Backing field for NameUIPropertySDup2Edit property
        /// </summary>
        private Edit fNameUIPropertySDup2Edit;

        /// <summary>
        /// Backing field for PrintersUIGroupGroup property
        /// </summary>
        private Group fPrintersUIGroupGroup;

        /// <summary>
        /// Backing field for Printers6UIGrouCustom property
        /// </summary>
        private Custom fPrinters6UIGrouCustom;

        /// <summary>
        /// Backing field for CollapseGroupUIDup1Button property
        /// </summary>
        private Button fCollapseGroupUIDup1Button;

        /// <summary>
        /// Backing field for NameUIPropertySDup3Edit property
        /// </summary>
        private Edit fNameUIPropertySDup3Edit;

        /// <summary>
        /// Backing field for CountUICountDup1Edit property
        /// </summary>
        private Edit fCountUICountDup1Edit;

        /// <summary>
        /// Backing field for DIRECT5CHPWiFiDListItem property
        /// </summary>
        private ListItem fDIRECT5CHPWiFiDListItem;

        /// <summary>
        /// Backing field for UIImageBaselineDup2Image property
        /// </summary>
        private Image fUIImageBaselineDup2Image;

        /// <summary>
        /// Backing field for NameUIPropertySDup4Edit property
        /// </summary>
        private Edit fNameUIPropertySDup4Edit;

        /// <summary>
        /// Backing field for FaxUIItem1ListItem property
        /// </summary>
        private ListItem fFaxUIItem1ListItem;

        /// <summary>
        /// Backing field for UIImageBaselineDup3Image property
        /// </summary>
        private Image fUIImageBaselineDup3Image;

        /// <summary>
        /// Backing field for NameUIPropertySDup5Edit property
        /// </summary>
        private Edit fNameUIPropertySDup5Edit;

        /// <summary>
        /// Backing field for HPOfficeJetPro8ListItem property
        /// </summary>
        private ListItem fHPOfficeJetPro8ListItem;

        /// <summary>
        /// Backing field for UIImageBaselineDup4Image property
        /// </summary>
        private Image fUIImageBaselineDup4Image;

        /// <summary>
        /// Backing field for NameUIPropertySDup6Edit property
        /// </summary>
        private Edit fNameUIPropertySDup6Edit;

        /// <summary>
        /// Backing field for MicrosoftPrinttListItem property
        /// </summary>
        private ListItem fMicrosoftPrinttListItem;

        /// <summary>
        /// Backing field for UIImageBaselineDup5Image property
        /// </summary>
        private Image fUIImageBaselineDup5Image;

        /// <summary>
        /// Backing field for NameUIPropertySDup7Edit property
        /// </summary>
        private Edit fNameUIPropertySDup7Edit;

        /// <summary>
        /// Backing field for MicrosoftXPSDocListItem property
        /// </summary>
        private ListItem fMicrosoftXPSDocListItem;

        /// <summary>
        /// Backing field for UIImageBaselineDup6Image property
        /// </summary>
        private Image fUIImageBaselineDup6Image;

        /// <summary>
        /// Backing field for NameUIPropertySDup8Edit property
        /// </summary>
        private Edit fNameUIPropertySDup8Edit;

        /// <summary>
        /// Backing field for SendToOneNote20ListItem property
        /// </summary>
        private ListItem fSendToOneNote20ListItem;

        /// <summary>
        /// Backing field for UIImageBaselineDup7Image property
        /// </summary>
        private Image fUIImageBaselineDup7Image;

        /// <summary>
        /// Backing field for NameUIPropertySDup9Edit property
        /// </summary>
        private Edit fNameUIPropertySDup9Edit;

        /// <summary>
        /// Backing field for WorkerW40965Pane property
        /// </summary>
        private Pane fWorkerW40965Pane;

        /// <summary>
        /// Backing field for ReBarWindow3240Dup1Pane property
        /// </summary>
        private Pane fReBarWindow3240Dup1Pane;

        /// <summary>
        /// Backing field for RebarBandI6XCustom property
        /// </summary>
        private Custom fRebarBandI6XCustom;

        /// <summary>
        /// Backing field for ApplicationToolMenuBar property
        /// </summary>
        private MenuBar fApplicationToolMenuBar;

        /// <summary>
        /// Backing field for FileItem32768MenuItem property
        /// </summary>
        private MenuItem fFileItem32768MenuItem;

        /// <summary>
        /// Backing field for EditItem32832MenuItem property
        /// </summary>
        private MenuItem fEditItem32832MenuItem;

        /// <summary>
        /// Backing field for ViewItem32896MenuItem property
        /// </summary>
        private MenuItem fViewItem32896MenuItem;

        /// <summary>
        /// Backing field for ToolsItem32960MenuItem property
        /// </summary>
        private MenuItem fToolsItem32960MenuItem;

        /// <summary>
        /// Backing field for HelpItem33024MenuItem property
        /// </summary>
        private MenuItem fHelpItem33024MenuItem;

        /// <summary>
        /// Backing field for DevicesandPrintTitleBar property
        /// </summary>
        private TitleBar fDevicesandPrintTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyMenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyMenuBar;

        /// <summary>
        /// Backing field for SystemItem1MenuItem property
        /// </summary>
        private MenuItem fSystemItem1MenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizButton property
        /// </summary>
        private Button fMinimizeMinimizButton;

        /// <summary>
        /// Backing field for RestoreRestoreButton property
        /// </summary>
        private Button fRestoreRestoreButton;

        /// <summary>
        /// Backing field for CloseCloseButton property
        /// </summary>
        private Button fCloseCloseButton;

        /// <summary>
        /// Initializes a new instance of the <see cref="AddPrinter"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public AddPrinter(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddPrinter"/> class using the default UIAFramework.
        /// </summary>
        public AddPrinter()
        {
            Desktop = new Desktop();
        }

        public void WaitForAvailable(int timeout)
        {
            DevicesandPrintWindow.WaitForAvailable(timeout);            

        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to DevicesandPrintWindow
        /// </summary>
        public Window DevicesandPrintWindow
        {
            get
            {
                if (null == fDevicesandPrintWindow)
                {
                    fDevicesandPrintWindow = new Window("DevicesandPrintWindow", Desktop);
                    fDevicesandPrintWindow.UIMap.Scope = UIASeachScope.Children;
                    fDevicesandPrintWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CabinetWClass");
                    fDevicesandPrintWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Devices and Printers");
                }

                return fDevicesandPrintWindow;
            }
        }

        /// <summary>
        /// Gets Reference to WorkerWPane
        /// </summary>
        public Pane WorkerWPane
        {
            get
            {
                if (null == fWorkerWPane)
                {
                    fWorkerWPane = new Pane("WorkerWPane", DevicesandPrintWindow);
                    fWorkerWPane.UIMap.Scope = UIASeachScope.Children;
                    fWorkerWPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"WorkerW");
                }

                return fWorkerWPane;
            }
        }

        /// <summary>
        /// Gets Reference to ReBarWindow3240Dup0Pane
        /// </summary>
        public Pane ReBarWindow3240Dup0Pane
        {
            get
            {
                if (null == fReBarWindow3240Dup0Pane)
                {
                    fReBarWindow3240Dup0Pane = new Pane("ReBarWindow3240Dup0Pane", WorkerWPane);
                    fReBarWindow3240Dup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fReBarWindow3240Dup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ReBarWindow32");
                    fReBarWindow3240Dup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"40965");
                }

                return fReBarWindow3240Dup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to RebarBandI0XCustom
        /// </summary>
        public Custom RebarBandI0XCustom
        {
            get
            {
                if (null == fRebarBandI0XCustom)
                {
                    fRebarBandI0XCustom = new Custom("RebarBandI0XCustom", ReBarWindow3240Dup0Pane);
                    fRebarBandI0XCustom.UIMap.Scope = UIASeachScope.Children;
                    fRebarBandI0XCustom.UIMap.Index = 0;
                    fRebarBandI0XCustom.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Rebar Band");
                }

                return fRebarBandI0XCustom;
            }
        }

        /// <summary>
        /// Gets Reference to TravelBandPane
        /// </summary>
        public Pane TravelBandPane
        {
            get
            {
                if (null == fTravelBandPane)
                {
                    fTravelBandPane = new Pane("TravelBandPane", RebarBandI0XCustom);
                    fTravelBandPane.UIMap.Scope = UIASeachScope.Children;
                    fTravelBandPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TravelBand");
                }

                return fTravelBandPane;
            }
        }

        /// <summary>
        /// Gets Reference to NavigationbuttoToolBar
        /// </summary>
        public ToolBar NavigationbuttoToolBar
        {
            get
            {
                if (null == fNavigationbuttoToolBar)
                {
                    fNavigationbuttoToolBar = new ToolBar("NavigationbuttoToolBar", TravelBandPane);
                    fNavigationbuttoToolBar.UIMap.Scope = UIASeachScope.Children;
                    fNavigationbuttoToolBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ToolbarWindow32");
                    fNavigationbuttoToolBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Navigation buttons");
                }

                return fNavigationbuttoToolBar;
            }
        }

        /// <summary>
        /// Gets Reference to BackAltLeftArroButton
        /// </summary>
        public Button BackAltLeftArroButton
        {
            get
            {
                if (null == fBackAltLeftArroButton)
                {
                    fBackAltLeftArroButton = new Button("BackAltLeftArroButton", NavigationbuttoToolBar);
                    fBackAltLeftArroButton.UIMap.Scope = UIASeachScope.Children;
                    fBackAltLeftArroButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 256");
                    fBackAltLeftArroButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Back (Alt + Left Arrow)");
                }

                return fBackAltLeftArroButton;
            }
        }

        /// <summary>
        /// Gets Reference to ForwardAltRightButton
        /// </summary>
        public Button ForwardAltRightButton
        {
            get
            {
                if (null == fForwardAltRightButton)
                {
                    fForwardAltRightButton = new Button("ForwardAltRightButton", NavigationbuttoToolBar);
                    fForwardAltRightButton.UIMap.Scope = UIASeachScope.Children;
                    fForwardAltRightButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 257");
                    fForwardAltRightButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Forward (Alt + Right Arrow)");
                }

                return fForwardAltRightButton;
            }
        }

        /// <summary>
        /// Gets Reference to RecentlocationsButton
        /// </summary>
        public Button RecentlocationsButton
        {
            get
            {
                if (null == fRecentlocationsButton)
                {
                    fRecentlocationsButton = new Button("RecentlocationsButton", NavigationbuttoToolBar);
                    fRecentlocationsButton.UIMap.Scope = UIASeachScope.Children;
                    fRecentlocationsButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 258");
                    fRecentlocationsButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Recent locations");
                }

                return fRecentlocationsButton;
            }
        }

        /// <summary>
        /// Gets Reference to RebarBandI1XCustom
        /// </summary>
        public Custom RebarBandI1XCustom
        {
            get
            {
                if (null == fRebarBandI1XCustom)
                {
                    fRebarBandI1XCustom = new Custom("RebarBandI1XCustom", ReBarWindow3240Dup0Pane);
                    fRebarBandI1XCustom.UIMap.Scope = UIASeachScope.Children;
                    fRebarBandI1XCustom.UIMap.Index = 1;
                    fRebarBandI1XCustom.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Rebar Band");
                }

                return fRebarBandI1XCustom;
            }
        }

        /// <summary>
        /// Gets Reference to UpBandPane
        /// </summary>
        public Pane UpBandPane
        {
            get
            {
                if (null == fUpBandPane)
                {
                    fUpBandPane = new Pane("UpBandPane", RebarBandI1XCustom);
                    fUpBandPane.UIMap.Scope = UIASeachScope.Children;
                    fUpBandPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UpBand");
                }

                return fUpBandPane;
            }
        }

        /// <summary>
        /// Gets Reference to UpbandtoolbarToToolBar
        /// </summary>
        public ToolBar UpbandtoolbarToToolBar
        {
            get
            {
                if (null == fUpbandtoolbarToToolBar)
                {
                    fUpbandtoolbarToToolBar = new ToolBar("UpbandtoolbarToToolBar", UpBandPane);
                    fUpbandtoolbarToToolBar.UIMap.Scope = UIASeachScope.Children;
                    fUpbandtoolbarToToolBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ToolbarWindow32");
                    fUpbandtoolbarToToolBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Up band toolbar");
                }

                return fUpbandtoolbarToToolBar;
            }
        }

        /// <summary>
        /// Gets Reference to UptoHardwareandButton
        /// </summary>
        public Button UptoHardwareandButton
        {
            get
            {
                if (null == fUptoHardwareandButton)
                {
                    fUptoHardwareandButton = new Button("UptoHardwareandButton", UpbandtoolbarToToolBar);
                    fUptoHardwareandButton.UIMap.Scope = UIASeachScope.Children;
                    fUptoHardwareandButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 256");
                    fUptoHardwareandButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Up to Hardware and Sound (Alt + Up Arrow)");
                }

                return fUptoHardwareandButton;
            }
        }

        /// <summary>
        /// Gets Reference to RebarBandI2XCustom
        /// </summary>
        public Custom RebarBandI2XCustom
        {
            get
            {
                if (null == fRebarBandI2XCustom)
                {
                    fRebarBandI2XCustom = new Custom("RebarBandI2XCustom", ReBarWindow3240Dup0Pane);
                    fRebarBandI2XCustom.UIMap.Scope = UIASeachScope.Children;
                    fRebarBandI2XCustom.UIMap.Index = 2;
                    fRebarBandI2XCustom.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Rebar Band");
                }

                return fRebarBandI2XCustom;
            }
        }

        /// <summary>
        /// Gets Reference to AddressBandRootPane
        /// </summary>
        public Pane AddressBandRootPane
        {
            get
            {
                if (null == fAddressBandRootPane)
                {
                    fAddressBandRootPane = new Pane("AddressBandRootPane", RebarBandI2XCustom);
                    fAddressBandRootPane.UIMap.Scope = UIASeachScope.Children;
                    fAddressBandRootPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Address Band Root");
                    fAddressBandRootPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"41477");
                }

                return fAddressBandRootPane;
            }
        }

        /// <summary>
        /// Gets Reference to msctlsprogressProgressBar
        /// </summary>
        public ProgressBar msctlsprogressProgressBar
        {
            get
            {
                if (null == fmsctlsprogressProgressBar)
                {
                    fmsctlsprogressProgressBar = new ProgressBar("msctlsprogressProgressBar", AddressBandRootPane);
                    fmsctlsprogressProgressBar.UIMap.Scope = UIASeachScope.Children;
                    fmsctlsprogressProgressBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"msctls_progress32");
                }

                return fmsctlsprogressProgressBar;
            }
        }

        /// <summary>
        /// Gets Reference to BreadcrumbParenPane
        /// </summary>
        public Pane BreadcrumbParenPane
        {
            get
            {
                if (null == fBreadcrumbParenPane)
                {
                    fBreadcrumbParenPane = new Pane("BreadcrumbParenPane", msctlsprogressProgressBar);
                    fBreadcrumbParenPane.UIMap.Scope = UIASeachScope.Children;
                    fBreadcrumbParenPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Breadcrumb Parent");
                }

                return fBreadcrumbParenPane;
            }
        }

        /// <summary>
        /// Gets Reference to AddressControlPToolBar
        /// </summary>
        public ToolBar AddressControlPToolBar
        {
            get
            {
                if (null == fAddressControlPToolBar)
                {
                    fAddressControlPToolBar = new ToolBar("AddressControlPToolBar", BreadcrumbParenPane);
                    fAddressControlPToolBar.UIMap.Scope = UIASeachScope.Children;
                    fAddressControlPToolBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ToolbarWindow32");
                    fAddressControlPToolBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1001");
                    fAddressControlPToolBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Address: Control Panel\Hardware and Sound\Devices and Printers");
                }

                return fAddressControlPToolBar;
            }
        }

        /// <summary>
        /// Gets Reference to AlllocationsIteSplitButton
        /// </summary>
        public SplitButton AlllocationsIteSplitButton
        {
            get
            {
                if (null == fAlllocationsIteSplitButton)
                {
                    fAlllocationsIteSplitButton = new SplitButton("AlllocationsIteSplitButton", AddressControlPToolBar);
                    fAlllocationsIteSplitButton.UIMap.Scope = UIASeachScope.Children;
                    fAlllocationsIteSplitButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1280");
                    fAlllocationsIteSplitButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"All locations");
                }

                return fAlllocationsIteSplitButton;
            }
        }

        /// <summary>
        /// Gets Reference to ControlPanelIteSplitButton
        /// </summary>
        public SplitButton ControlPanelIteSplitButton
        {
            get
            {
                if (null == fControlPanelIteSplitButton)
                {
                    fControlPanelIteSplitButton = new SplitButton("ControlPanelIteSplitButton", AddressControlPToolBar);
                    fControlPanelIteSplitButton.UIMap.Scope = UIASeachScope.Children;
                    fControlPanelIteSplitButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1281");
                    fControlPanelIteSplitButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Control Panel");
                }

                return fControlPanelIteSplitButton;
            }
        }

        /// <summary>
        /// Gets Reference to HardwareandSounSplitButton
        /// </summary>
        public SplitButton HardwareandSounSplitButton
        {
            get
            {
                if (null == fHardwareandSounSplitButton)
                {
                    fHardwareandSounSplitButton = new SplitButton("HardwareandSounSplitButton", AddressControlPToolBar);
                    fHardwareandSounSplitButton.UIMap.Scope = UIASeachScope.Children;
                    fHardwareandSounSplitButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1282");
                    fHardwareandSounSplitButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Hardware and Sound");
                }

                return fHardwareandSounSplitButton;
            }
        }

        /// <summary>
        /// Gets Reference to DevicesandPrintMenuItem
        /// </summary>
        public MenuItem DevicesandPrintMenuItem
        {
            get
            {
                if (null == fDevicesandPrintMenuItem)
                {
                    fDevicesandPrintMenuItem = new MenuItem("DevicesandPrintMenuItem", AddressControlPToolBar);
                    fDevicesandPrintMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fDevicesandPrintMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1283");
                    fDevicesandPrintMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Devices and Printers");
                }

                return fDevicesandPrintMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to AddressbandtoolToolBar
        /// </summary>
        public ToolBar AddressbandtoolToolBar
        {
            get
            {
                if (null == fAddressbandtoolToolBar)
                {
                    fAddressbandtoolToolBar = new ToolBar("AddressbandtoolToolBar", msctlsprogressProgressBar);
                    fAddressbandtoolToolBar.UIMap.Scope = UIASeachScope.Children;
                    fAddressbandtoolToolBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ToolbarWindow32");
                    fAddressbandtoolToolBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Address band toolbar");
                }

                return fAddressbandtoolToolBar;
            }
        }

        /// <summary>
        /// Gets Reference to PreviousLocatioButton
        /// </summary>
        public Button PreviousLocatioButton
        {
            get
            {
                if (null == fPreviousLocatioButton)
                {
                    fPreviousLocatioButton = new Button("PreviousLocatioButton", AddressbandtoolToolBar);
                    fPreviousLocatioButton.UIMap.Scope = UIASeachScope.Children;
                    fPreviousLocatioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 202");
                    fPreviousLocatioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Previous Locations");
                }

                return fPreviousLocatioButton;
            }
        }

        /// <summary>
        /// Gets Reference to RefreshDevicesaButton
        /// </summary>
        public Button RefreshDevicesaButton
        {
            get
            {
                if (null == fRefreshDevicesaButton)
                {
                    fRefreshDevicesaButton = new Button("RefreshDevicesaButton", AddressbandtoolToolBar);
                    fRefreshDevicesaButton.UIMap.Scope = UIASeachScope.Children;
                    fRefreshDevicesaButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 102");
                    fRefreshDevicesaButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Refresh Devices and Printers (F5)");
                }

                return fRefreshDevicesaButton;
            }
        }

        /// <summary>
        /// Gets Reference to RebarBandI3XCustom
        /// </summary>
        public Custom RebarBandI3XCustom
        {
            get
            {
                if (null == fRebarBandI3XCustom)
                {
                    fRebarBandI3XCustom = new Custom("RebarBandI3XCustom", ReBarWindow3240Dup0Pane);
                    fRebarBandI3XCustom.UIMap.Scope = UIASeachScope.Children;
                    fRebarBandI3XCustom.UIMap.Index = 3;
                    fRebarBandI3XCustom.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Rebar Band");
                }

                return fRebarBandI3XCustom;
            }
        }

        /// <summary>
        /// Gets Reference to SeparatorBandI0XPane
        /// </summary>
        public Pane SeparatorBandI0XPane
        {
            get
            {
                if (null == fSeparatorBandI0XPane)
                {
                    fSeparatorBandI0XPane = new Pane("SeparatorBandI0XPane", RebarBandI3XCustom);
                    fSeparatorBandI0XPane.UIMap.Scope = UIASeachScope.Children;
                    fSeparatorBandI0XPane.UIMap.Index = 0;
                    fSeparatorBandI0XPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"SeparatorBand");
                }

                return fSeparatorBandI0XPane;
            }
        }

        /// <summary>
        /// Gets Reference to RebarBandI4XCustom
        /// </summary>
        public Custom RebarBandI4XCustom
        {
            get
            {
                if (null == fRebarBandI4XCustom)
                {
                    fRebarBandI4XCustom = new Custom("RebarBandI4XCustom", ReBarWindow3240Dup0Pane);
                    fRebarBandI4XCustom.UIMap.Scope = UIASeachScope.Children;
                    fRebarBandI4XCustom.UIMap.Index = 4;
                    fRebarBandI4XCustom.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Rebar Band");
                }

                return fRebarBandI4XCustom;
            }
        }

        /// <summary>
        /// Gets Reference to UniversalSearchPane
        /// </summary>
        public Pane UniversalSearchPane
        {
            get
            {
                if (null == fUniversalSearchPane)
                {
                    fUniversalSearchPane = new Pane("UniversalSearchPane", RebarBandI4XCustom);
                    fUniversalSearchPane.UIMap.Scope = UIASeachScope.Children;
                    fUniversalSearchPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UniversalSearchBand");
                }

                return fUniversalSearchPane;
            }
        }

        /// <summary>
        /// Gets Reference to SearchBoxPane
        /// </summary>
        public Pane SearchBoxPane
        {
            get
            {
                if (null == fSearchBoxPane)
                {
                    fSearchBoxPane = new Pane("SearchBoxPane", UniversalSearchPane);
                    fSearchBoxPane.UIMap.Scope = UIASeachScope.Children;
                    fSearchBoxPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Search Box");
                }

                return fSearchBoxPane;
            }
        }

        /// <summary>
        /// Gets Reference to SearchEditBoxWrPane
        /// </summary>
        public Pane SearchEditBoxWrPane
        {
            get
            {
                if (null == fSearchEditBoxWrPane)
                {
                    fSearchEditBoxWrPane = new Pane("SearchEditBoxWrPane", SearchBoxPane);
                    fSearchEditBoxWrPane.UIMap.Scope = UIASeachScope.Children;
                    fSearchEditBoxWrPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"SearchEditBoxWrapperClass");
                }

                return fSearchEditBoxWrPane;
            }
        }

        /// <summary>
        /// Gets Reference to SearchDevicesanPane
        /// </summary>
        public Pane SearchDevicesanPane
        {
            get
            {
                if (null == fSearchDevicesanPane)
                {
                    fSearchDevicesanPane = new Pane("SearchDevicesanPane", SearchEditBoxWrPane);
                    fSearchDevicesanPane.UIMap.Scope = UIASeachScope.Children;
                    fSearchDevicesanPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"SearchBox");
                    fSearchDevicesanPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @" Search Devices and Printers");
                }

                return fSearchDevicesanPane;
            }
        }

        /// <summary>
        /// Gets Reference to SearchBoxSearchEdit
        /// </summary>
        public Edit SearchBoxSearchEdit
        {
            get
            {
                if (null == fSearchBoxSearchEdit)
                {
                    fSearchBoxSearchEdit = new Edit("SearchBoxSearchEdit", SearchDevicesanPane);
                    fSearchBoxSearchEdit.UIMap.Scope = UIASeachScope.Children;
                    fSearchBoxSearchEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"SearchEditBox");
                    fSearchBoxSearchEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SearchEditBox");
                    fSearchBoxSearchEdit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Search Box");
                }

                return fSearchBoxSearchEdit;
            }
        }

        /// <summary>
        /// Gets Reference to SearchButtonSeaButton
        /// </summary>
        public Button SearchButtonSeaButton
        {
            get
            {
                if (null == fSearchButtonSeaButton)
                {
                    fSearchButtonSeaButton = new Button("SearchButtonSeaButton", SearchDevicesanPane);
                    fSearchButtonSeaButton.UIMap.Scope = UIASeachScope.Children;
                    fSearchButtonSeaButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fSearchButtonSeaButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SearchBoxSearchButton");
                    fSearchButtonSeaButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Search");
                }

                return fSearchButtonSeaButton;
            }
        }

        /// <summary>
        /// Gets Reference to RebarBandI5XCustom
        /// </summary>
        public Custom RebarBandI5XCustom
        {
            get
            {
                if (null == fRebarBandI5XCustom)
                {
                    fRebarBandI5XCustom = new Custom("RebarBandI5XCustom", ReBarWindow3240Dup0Pane);
                    fRebarBandI5XCustom.UIMap.Scope = UIASeachScope.Children;
                    fRebarBandI5XCustom.UIMap.Index = 5;
                    fRebarBandI5XCustom.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Rebar Band");
                }

                return fRebarBandI5XCustom;
            }
        }

        /// <summary>
        /// Gets Reference to SeparatorBandI1XPane
        /// </summary>
        public Pane SeparatorBandI1XPane
        {
            get
            {
                if (null == fSeparatorBandI1XPane)
                {
                    fSeparatorBandI1XPane = new Pane("SeparatorBandI1XPane", RebarBandI5XCustom);
                    fSeparatorBandI1XPane.UIMap.Scope = UIASeachScope.Children;
                    fSeparatorBandI1XPane.UIMap.Index = 1;
                    fSeparatorBandI1XPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"SeparatorBand");
                }

                return fSeparatorBandI1XPane;
            }
        }

        /// <summary>
        /// Gets Reference to DevicesandPrintPane
        /// </summary>
        public Pane DevicesandPrintPane
        {
            get
            {
                if (null == fDevicesandPrintPane)
                {
                    fDevicesandPrintPane = new Pane("DevicesandPrintPane", DevicesandPrintWindow);
                    fDevicesandPrintPane.UIMap.Scope = UIASeachScope.Children;
                    fDevicesandPrintPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ShellTabWindowClass");
                    fDevicesandPrintPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Devices and Printers");
                }

                return fDevicesandPrintPane;
            }
        }

        /// <summary>
        /// Gets Reference to DUIViewWndClassPane
        /// </summary>
        public Pane DUIViewWndClassPane
        {
            get
            {
                if (null == fDUIViewWndClassPane)
                {
                    fDUIViewWndClassPane = new Pane("DUIViewWndClassPane", DevicesandPrintPane);
                    fDUIViewWndClassPane.UIMap.Scope = UIASeachScope.Children;
                    fDUIViewWndClassPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"DUIViewWndClassName");
                }

                return fDUIViewWndClassPane;
            }
        }

        /// <summary>
        /// Gets Reference to ExplorerPaneHWNPane
        /// </summary>
        public Pane ExplorerPaneHWNPane
        {
            get
            {
                if (null == fExplorerPaneHWNPane)
                {
                    fExplorerPaneHWNPane = new Pane("ExplorerPaneHWNPane", DUIViewWndClassPane);
                    fExplorerPaneHWNPane.UIMap.Scope = UIASeachScope.Children;
                    fExplorerPaneHWNPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"HWNDView");
                    fExplorerPaneHWNPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"main");
                    fExplorerPaneHWNPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Explorer Pane");
                }

                return fExplorerPaneHWNPane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkPane
        /// </summary>
        public Pane CtrlNotifySinkPane
        {
            get
            {
                if (null == fCtrlNotifySinkPane)
                {
                    fCtrlNotifySinkPane = new Pane("CtrlNotifySinkPane", ExplorerPaneHWNPane);
                    fCtrlNotifySinkPane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkPane;
            }
        }

        /// <summary>
        /// Gets Reference to FolderLayoutPanPane
        /// </summary>
        public Pane FolderLayoutPanPane
        {
            get
            {
                if (null == fFolderLayoutPanPane)
                {
                    fFolderLayoutPanPane = new Pane("FolderLayoutPanPane", ExplorerPaneHWNPane);
                    fFolderLayoutPanPane.UIMap.Scope = UIASeachScope.Children;
                    fFolderLayoutPanPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fFolderLayoutPanPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"FolderLayoutContainer");
                    fFolderLayoutPanPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Folder Layout Pane");
                }

                return fFolderLayoutPanPane;
            }
        }

        /// <summary>
        /// Gets Reference to DetailsPanePrevPane
        /// </summary>
        public Pane DetailsPanePrevPane
        {
            get
            {
                if (null == fDetailsPanePrevPane)
                {
                    fDetailsPanePrevPane = new Pane("DetailsPanePrevPane", FolderLayoutPanPane);
                    fDetailsPanePrevPane.UIMap.Scope = UIASeachScope.Children;
                    fDetailsPanePrevPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"PreviewBackground");
                    fDetailsPanePrevPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"BackgroundClear");
                    fDetailsPanePrevPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Details Pane");
                }

                return fDetailsPanePrevPane;
            }
        }

        /// <summary>
        /// Gets Reference to ThumbnailModuleImage
        /// </summary>
        public Image ThumbnailModuleImage
        {
            get
            {
                if (null == fThumbnailModuleImage)
                {
                    fThumbnailModuleImage = new Image("ThumbnailModuleImage", DetailsPanePrevPane);
                    fThumbnailModuleImage.UIMap.Scope = UIASeachScope.Children;
                    fThumbnailModuleImage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"PreviewThumbnailInner");
                    fThumbnailModuleImage.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PreviewThumbnailInner");
                    fThumbnailModuleImage.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Thumbnail Module");
                }

                return fThumbnailModuleImage;
            }
        }

        /// <summary>
        /// Gets Reference to MetadataModulePTree
        /// </summary>
        public Tree MetadataModulePTree
        {
            get
            {
                if (null == fMetadataModulePTree)
                {
                    fMetadataModulePTree = new Tree("MetadataModulePTree", DetailsPanePrevPane);
                    fMetadataModulePTree.UIMap.Scope = UIASeachScope.Children;
                    fMetadataModulePTree.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"PreviewMetadataInner");
                    fMetadataModulePTree.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PreviewMetadataInner");
                    fMetadataModulePTree.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Metadata Module");
                }

                return fMetadataModulePTree;
            }
        }

        /// <summary>
        /// Gets Reference to NumberofitemsMeEdit
        /// </summary>
        public Edit NumberofitemsMeEdit
        {
            get
            {
                if (null == fNumberofitemsMeEdit)
                {
                    fNumberofitemsMeEdit = new Edit("NumberofitemsMeEdit", MetadataModulePTree);
                    fNumberofitemsMeEdit.UIMap.Scope = UIASeachScope.Children;
                    fNumberofitemsMeEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"MetadataLabel");
                    fNumberofitemsMeEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ItemCountLabel");
                    fNumberofitemsMeEdit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Number of items");
                }

                return fNumberofitemsMeEdit;
            }
        }

        /// <summary>
        /// Gets Reference to CommandModuleFoToolBar
        /// </summary>
        public ToolBar CommandModuleFoToolBar
        {
            get
            {
                if (null == fCommandModuleFoToolBar)
                {
                    fCommandModuleFoToolBar = new ToolBar("CommandModuleFoToolBar", FolderLayoutPanPane);
                    fCommandModuleFoToolBar.UIMap.Scope = UIASeachScope.Children;
                    fCommandModuleFoToolBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"FolderBandModuleInner");
                    fCommandModuleFoToolBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"FolderBandModuleInner");
                    fCommandModuleFoToolBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Command Module");
                }

                return fCommandModuleFoToolBar;
            }
        }

        /// <summary>
        /// Gets Reference to HelpButton3dHelButton
        /// </summary>
        public Button HelpButton3dHelButton
        {
            get
            {
                if (null == fHelpButton3dHelButton)
                {
                    fHelpButton3dHelButton = new Button("HelpButton3dHelButton", CommandModuleFoToolBar);
                    fHelpButton3dHelButton.UIMap.Scope = UIASeachScope.Children;
                    fHelpButton3dHelButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button3d");
                    fHelpButton3dHelButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HelpButton");
                    fHelpButton3dHelButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"&Help");
                }

                return fHelpButton3dHelButton;
            }
        }

        /// <summary>
        /// Gets Reference to ViewsViewControSplitButton
        /// </summary>
        public SplitButton ViewsViewControSplitButton
        {
            get
            {
                if (null == fViewsViewControSplitButton)
                {
                    fViewsViewControSplitButton = new SplitButton("ViewsViewControSplitButton", CommandModuleFoToolBar);
                    fViewsViewControSplitButton.UIMap.Scope = UIASeachScope.Children;
                    fViewsViewControSplitButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ViewControl");
                    fViewsViewControSplitButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ViewControl");
                    fViewsViewControSplitButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Views");
                }

                return fViewsViewControSplitButton;
            }
        }

        /// <summary>
        /// Gets Reference to ViewSliderButtoButton
        /// </summary>
        public Button ViewSliderButtoButton
        {
            get
            {
                if (null == fViewSliderButtoButton)
                {
                    fViewSliderButtoButton = new Button("ViewSliderButtoButton", ViewsViewControSplitButton);
                    fViewSliderButtoButton.UIMap.Scope = UIASeachScope.Children;
                    fViewSliderButtoButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button3d");
                    fViewSliderButtoButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SplitMenuButton");
                    fViewSliderButtoButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"View Slider");
                }

                return fViewSliderButtoButton;
            }
        }

        /// <summary>
        /// Gets Reference to AddadeviceAJOSpButton
        /// </summary>
        public Button AddadeviceAJOSpButton
        {
            get
            {
                if (null == fAddadeviceAJOSpButton)
                {
                    fAddadeviceAJOSpButton = new Button("AddadeviceAJOSpButton", CommandModuleFoToolBar);
                    fAddadeviceAJOSpButton.UIMap.Scope = UIASeachScope.Children;
                    fAddadeviceAJOSpButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"AJOSplitButton");
                    fAddadeviceAJOSpButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"{D63699A2-2221-4856-BBB6-379A1D245576}");
                    fAddadeviceAJOSpButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a device");
                }

                return fAddadeviceAJOSpButton;
            }
        }

        /// <summary>
        /// Gets Reference to AddaprinterAJOSButton
        /// </summary>
        public Button AddaprinterAJOSButton
        {
            get
            {
                if (null == fAddaprinterAJOSButton)
                {
                    fAddaprinterAJOSButton = new Button("AddaprinterAJOSButton", CommandModuleFoToolBar);
                    fAddaprinterAJOSButton.UIMap.Scope = UIASeachScope.Children;
                    fAddaprinterAJOSButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"AJOSplitButton");
                    fAddaprinterAJOSButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"{0BEA70B6-CD46-4C65-9E73-4438FF68485B}");
                    fAddaprinterAJOSButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a printer");
                }

                return fAddaprinterAJOSButton;
            }
        }

        /// <summary>
        /// Gets Reference to ShellFolderViewPane
        /// </summary>
        public Pane ShellFolderViewPane
        {
            get
            {
                if (null == fShellFolderViewPane)
                {
                    fShellFolderViewPane = new Pane("ShellFolderViewPane", FolderLayoutPanPane);
                    fShellFolderViewPane.UIMap.Scope = UIASeachScope.Children;
                    fShellFolderViewPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"DUIListView");
                    fShellFolderViewPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"listview");
                    fShellFolderViewPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Shell Folder View");
                }

                return fShellFolderViewPane;
            }
        }

        /// <summary>
        /// Gets Reference to ItemsViewUIItemList
        /// </summary>
        public List ItemsViewUIItemList
        {
            get
            {
                if (null == fItemsViewUIItemList)
                {
                    fItemsViewUIItemList = new List("ItemsViewUIItemList", ShellFolderViewPane);
                    fItemsViewUIItemList.UIMap.Scope = UIASeachScope.Children;
                    fItemsViewUIItemList.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIItemsView");
                    fItemsViewUIItemList.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Items View");
                }

                return fItemsViewUIItemList;
            }
        }

        /// <summary>
        /// Gets Reference to DevicesUIGroupIGroup
        /// </summary>
        public Group DevicesUIGroupIGroup
        {
            get
            {
                if (null == fDevicesUIGroupIGroup)
                {
                    fDevicesUIGroupIGroup = new Group("DevicesUIGroupIGroup", ItemsViewUIItemList);
                    fDevicesUIGroupIGroup.UIMap.Scope = UIASeachScope.Children;
                    fDevicesUIGroupIGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIGroupItem");
                    fDevicesUIGroupIGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"0");
                    fDevicesUIGroupIGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Devices");
                }

                return fDevicesUIGroupIGroup;
            }
        }

        /// <summary>
        /// Gets Reference to Devices2UIGroupCustom
        /// </summary>
        public Custom Devices2UIGroupCustom
        {
            get
            {
                if (null == fDevices2UIGroupCustom)
                {
                    fDevices2UIGroupCustom = new Custom("Devices2UIGroupCustom", DevicesUIGroupIGroup);
                    fDevices2UIGroupCustom.UIMap.Scope = UIASeachScope.Children;
                    fDevices2UIGroupCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIGroupHeader");
                    fDevices2UIGroupCustom.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"UIGroupHeader");
                    fDevices2UIGroupCustom.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Devices (2)");
                }

                return fDevices2UIGroupCustom;
            }
        }

        /// <summary>
        /// Gets Reference to CollapseGroupUIDup0Button
        /// </summary>
        public Button CollapseGroupUIDup0Button
        {
            get
            {
                if (null == fCollapseGroupUIDup0Button)
                {
                    fCollapseGroupUIDup0Button = new Button("CollapseGroupUIDup0Button", Devices2UIGroupCustom);
                    fCollapseGroupUIDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fCollapseGroupUIDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIExpandoButton");
                    fCollapseGroupUIDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"UIGroupButton");
                    fCollapseGroupUIDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Collapse Group");
                }

                return fCollapseGroupUIDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to NameUIPropertySDup0Edit
        /// </summary>
        public Edit NameUIPropertySDup0Edit
        {
            get
            {
                if (null == fNameUIPropertySDup0Edit)
                {
                    fNameUIPropertySDup0Edit = new Edit("NameUIPropertySDup0Edit", Devices2UIGroupCustom);
                    fNameUIPropertySDup0Edit.UIMap.Scope = UIASeachScope.Children;
                    fNameUIPropertySDup0Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIProperty");
                    fNameUIPropertySDup0Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"System.ItemNameDisplay");
                    fNameUIPropertySDup0Edit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Name");
                }

                return fNameUIPropertySDup0Edit;
            }
        }

        /// <summary>
        /// Gets Reference to CountUICountDup0Edit
        /// </summary>
        public Edit CountUICountDup0Edit
        {
            get
            {
                if (null == fCountUICountDup0Edit)
                {
                    fCountUICountDup0Edit = new Edit("CountUICountDup0Edit", Devices2UIGroupCustom);
                    fCountUICountDup0Edit.UIMap.Scope = UIASeachScope.Children;
                    fCountUICountDup0Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UICount");
                    fCountUICountDup0Edit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Count");
                }

                return fCountUICountDup0Edit;
            }
        }

        /// <summary>
        /// Gets Reference to DEVEGOWD13UIIteListItem
        /// </summary>
        public ListItem DEVEGOWD13UIIteListItem
        {
            get
            {
                if (null == fDEVEGOWD13UIIteListItem)
                {
                    fDEVEGOWD13UIIteListItem = new ListItem("DEVEGOWD13UIIteListItem", DevicesUIGroupIGroup);
                    fDEVEGOWD13UIIteListItem.UIMap.Scope = UIASeachScope.Children;
                    fDEVEGOWD13UIIteListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIItem");
                    fDEVEGOWD13UIIteListItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"0");
                    fDEVEGOWD13UIIteListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DEVEGOWD13");
                }

                return fDEVEGOWD13UIIteListItem;
            }
        }

        /// <summary>
        /// Gets Reference to UIImageBaselineDup0Image
        /// </summary>
        public Image UIImageBaselineDup0Image
        {
            get
            {
                if (null == fUIImageBaselineDup0Image)
                {
                    fUIImageBaselineDup0Image = new Image("UIImageBaselineDup0Image", DEVEGOWD13UIIteListItem);
                    fUIImageBaselineDup0Image.UIMap.Scope = UIASeachScope.Children;
                    fUIImageBaselineDup0Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIImage");
                    fUIImageBaselineDup0Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"BaselineImage");
                }

                return fUIImageBaselineDup0Image;
            }
        }

        /// <summary>
        /// Gets Reference to NameUIPropertySDup1Edit
        /// </summary>
        public Edit NameUIPropertySDup1Edit
        {
            get
            {
                if (null == fNameUIPropertySDup1Edit)
                {
                    fNameUIPropertySDup1Edit = new Edit("NameUIPropertySDup1Edit", DEVEGOWD13UIIteListItem);
                    fNameUIPropertySDup1Edit.UIMap.Scope = UIASeachScope.Children;
                    fNameUIPropertySDup1Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIProperty");
                    fNameUIPropertySDup1Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"System.ItemNameDisplay");
                    fNameUIPropertySDup1Edit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Name");
                }

                return fNameUIPropertySDup1Edit;
            }
        }

        /// <summary>
        /// Gets Reference to LogitechUnifyinListItem
        /// </summary>
        public ListItem LogitechUnifyinListItem
        {
            get
            {
                if (null == fLogitechUnifyinListItem)
                {
                    fLogitechUnifyinListItem = new ListItem("LogitechUnifyinListItem", DevicesUIGroupIGroup);
                    fLogitechUnifyinListItem.UIMap.Scope = UIASeachScope.Children;
                    fLogitechUnifyinListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIItem");
                    fLogitechUnifyinListItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1");
                    fLogitechUnifyinListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Logitech® Unifying Receiver");
                }

                return fLogitechUnifyinListItem;
            }
        }

        /// <summary>
        /// Gets Reference to UIImageBaselineDup1Image
        /// </summary>
        public Image UIImageBaselineDup1Image
        {
            get
            {
                if (null == fUIImageBaselineDup1Image)
                {
                    fUIImageBaselineDup1Image = new Image("UIImageBaselineDup1Image", LogitechUnifyinListItem);
                    fUIImageBaselineDup1Image.UIMap.Scope = UIASeachScope.Children;
                    fUIImageBaselineDup1Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIImage");
                    fUIImageBaselineDup1Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"BaselineImage");
                }

                return fUIImageBaselineDup1Image;
            }
        }

        /// <summary>
        /// Gets Reference to NameUIPropertySDup2Edit
        /// </summary>
        public Edit NameUIPropertySDup2Edit
        {
            get
            {
                if (null == fNameUIPropertySDup2Edit)
                {
                    fNameUIPropertySDup2Edit = new Edit("NameUIPropertySDup2Edit", LogitechUnifyinListItem);
                    fNameUIPropertySDup2Edit.UIMap.Scope = UIASeachScope.Children;
                    fNameUIPropertySDup2Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIProperty");
                    fNameUIPropertySDup2Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"System.ItemNameDisplay");
                    fNameUIPropertySDup2Edit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Name");
                }

                return fNameUIPropertySDup2Edit;
            }
        }

        /// <summary>
        /// Gets Reference to PrintersUIGroupGroup
        /// </summary>
        public Group PrintersUIGroupGroup
        {
            get
            {
                if (null == fPrintersUIGroupGroup)
                {
                    fPrintersUIGroupGroup = new Group("PrintersUIGroupGroup", ItemsViewUIItemList);
                    fPrintersUIGroupGroup.UIMap.Scope = UIASeachScope.Children;
                    fPrintersUIGroupGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIGroupItem");
                    fPrintersUIGroupGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1");
                    fPrintersUIGroupGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printers");
                }

                return fPrintersUIGroupGroup;
            }
        }

        /// <summary>
        /// Gets Reference to Printers6UIGrouCustom
        /// </summary>
        public Custom Printers6UIGrouCustom
        {
            get
            {
                if (null == fPrinters6UIGrouCustom)
                {
                    fPrinters6UIGrouCustom = new Custom("Printers6UIGrouCustom", PrintersUIGroupGroup);
                    fPrinters6UIGrouCustom.UIMap.Scope = UIASeachScope.Children;
                    fPrinters6UIGrouCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIGroupHeader");
                    fPrinters6UIGrouCustom.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"UIGroupHeader");
                    fPrinters6UIGrouCustom.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printers (6)");
                }

                return fPrinters6UIGrouCustom;
            }
        }

        /// <summary>
        /// Gets Reference to CollapseGroupUIDup1Button
        /// </summary>
        public Button CollapseGroupUIDup1Button
        {
            get
            {
                if (null == fCollapseGroupUIDup1Button)
                {
                    fCollapseGroupUIDup1Button = new Button("CollapseGroupUIDup1Button", Printers6UIGrouCustom);
                    fCollapseGroupUIDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fCollapseGroupUIDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIExpandoButton");
                    fCollapseGroupUIDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"UIGroupButton");
                    fCollapseGroupUIDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Collapse Group");
                }

                return fCollapseGroupUIDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to NameUIPropertySDup3Edit
        /// </summary>
        public Edit NameUIPropertySDup3Edit
        {
            get
            {
                if (null == fNameUIPropertySDup3Edit)
                {
                    fNameUIPropertySDup3Edit = new Edit("NameUIPropertySDup3Edit", Printers6UIGrouCustom);
                    fNameUIPropertySDup3Edit.UIMap.Scope = UIASeachScope.Children;
                    fNameUIPropertySDup3Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIProperty");
                    fNameUIPropertySDup3Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"System.ItemNameDisplay");
                    fNameUIPropertySDup3Edit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Name");
                }

                return fNameUIPropertySDup3Edit;
            }
        }

        /// <summary>
        /// Gets Reference to CountUICountDup1Edit
        /// </summary>
        public Edit CountUICountDup1Edit
        {
            get
            {
                if (null == fCountUICountDup1Edit)
                {
                    fCountUICountDup1Edit = new Edit("CountUICountDup1Edit", Printers6UIGrouCustom);
                    fCountUICountDup1Edit.UIMap.Scope = UIASeachScope.Children;
                    fCountUICountDup1Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UICount");
                    fCountUICountDup1Edit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Count");
                }

                return fCountUICountDup1Edit;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT5CHPWiFiDListItem
        /// </summary>
        public ListItem DIRECT5CHPWiFiDListItem
        {
            get
            {
                if (null == fDIRECT5CHPWiFiDListItem)
                {
                    fDIRECT5CHPWiFiDListItem = new ListItem("DIRECT5CHPWiFiDListItem", PrintersUIGroupGroup);
                    fDIRECT5CHPWiFiDListItem.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT5CHPWiFiDListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIItem");
                    fDIRECT5CHPWiFiDListItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"0");
                    fDIRECT5CHPWiFiDListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-5C-HP WiFiDirect123P57750");
                }

                return fDIRECT5CHPWiFiDListItem;
            }
        }

        /// <summary>
        /// Gets Reference to UIImageBaselineDup2Image
        /// </summary>
        public Image UIImageBaselineDup2Image
        {
            get
            {
                if (null == fUIImageBaselineDup2Image)
                {
                    fUIImageBaselineDup2Image = new Image("UIImageBaselineDup2Image", DIRECT5CHPWiFiDListItem);
                    fUIImageBaselineDup2Image.UIMap.Scope = UIASeachScope.Children;
                    fUIImageBaselineDup2Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIImage");
                    fUIImageBaselineDup2Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"BaselineImage");
                }

                return fUIImageBaselineDup2Image;
            }
        }

        /// <summary>
        /// Gets Reference to NameUIPropertySDup4Edit
        /// </summary>
        public Edit NameUIPropertySDup4Edit
        {
            get
            {
                if (null == fNameUIPropertySDup4Edit)
                {
                    fNameUIPropertySDup4Edit = new Edit("NameUIPropertySDup4Edit", DIRECT5CHPWiFiDListItem);
                    fNameUIPropertySDup4Edit.UIMap.Scope = UIASeachScope.Children;
                    fNameUIPropertySDup4Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIProperty");
                    fNameUIPropertySDup4Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"System.ItemNameDisplay");
                    fNameUIPropertySDup4Edit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Name");
                }

                return fNameUIPropertySDup4Edit;
            }
        }

        /// <summary>
        /// Gets Reference to FaxUIItem1ListItem
        /// </summary>
        public ListItem FaxUIItem1ListItem
        {
            get
            {
                if (null == fFaxUIItem1ListItem)
                {
                    fFaxUIItem1ListItem = new ListItem("FaxUIItem1ListItem", PrintersUIGroupGroup);
                    fFaxUIItem1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fFaxUIItem1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIItem");
                    fFaxUIItem1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1");
                    fFaxUIItem1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax");
                }

                return fFaxUIItem1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to UIImageBaselineDup3Image
        /// </summary>
        public Image UIImageBaselineDup3Image
        {
            get
            {
                if (null == fUIImageBaselineDup3Image)
                {
                    fUIImageBaselineDup3Image = new Image("UIImageBaselineDup3Image", FaxUIItem1ListItem);
                    fUIImageBaselineDup3Image.UIMap.Scope = UIASeachScope.Children;
                    fUIImageBaselineDup3Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIImage");
                    fUIImageBaselineDup3Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"BaselineImage");
                }

                return fUIImageBaselineDup3Image;
            }
        }

        /// <summary>
        /// Gets Reference to NameUIPropertySDup5Edit
        /// </summary>
        public Edit NameUIPropertySDup5Edit
        {
            get
            {
                if (null == fNameUIPropertySDup5Edit)
                {
                    fNameUIPropertySDup5Edit = new Edit("NameUIPropertySDup5Edit", FaxUIItem1ListItem);
                    fNameUIPropertySDup5Edit.UIMap.Scope = UIASeachScope.Children;
                    fNameUIPropertySDup5Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIProperty");
                    fNameUIPropertySDup5Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"System.ItemNameDisplay");
                    fNameUIPropertySDup5Edit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Name");
                }

                return fNameUIPropertySDup5Edit;
            }
        }

        /// <summary>
        /// Gets Reference to HPOfficeJetPro8ListItem
        /// </summary>
        public ListItem HPOfficeJetPro8ListItem
        {
            get
            {
                if (null == fHPOfficeJetPro8ListItem)
                {
                    fHPOfficeJetPro8ListItem = new ListItem("HPOfficeJetPro8ListItem", PrintersUIGroupGroup);
                    fHPOfficeJetPro8ListItem.UIMap.Scope = UIASeachScope.Children;
                    fHPOfficeJetPro8ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIItem");
                    fHPOfficeJetPro8ListItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2");
                    fHPOfficeJetPro8ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP OfficeJet Pro 8730 PCL 6");
                }

                return fHPOfficeJetPro8ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to UIImageBaselineDup4Image
        /// </summary>
        public Image UIImageBaselineDup4Image
        {
            get
            {
                if (null == fUIImageBaselineDup4Image)
                {
                    fUIImageBaselineDup4Image = new Image("UIImageBaselineDup4Image", HPOfficeJetPro8ListItem);
                    fUIImageBaselineDup4Image.UIMap.Scope = UIASeachScope.Children;
                    fUIImageBaselineDup4Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIImage");
                    fUIImageBaselineDup4Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"BaselineImage");
                }

                return fUIImageBaselineDup4Image;
            }
        }

        /// <summary>
        /// Gets Reference to NameUIPropertySDup6Edit
        /// </summary>
        public Edit NameUIPropertySDup6Edit
        {
            get
            {
                if (null == fNameUIPropertySDup6Edit)
                {
                    fNameUIPropertySDup6Edit = new Edit("NameUIPropertySDup6Edit", HPOfficeJetPro8ListItem);
                    fNameUIPropertySDup6Edit.UIMap.Scope = UIASeachScope.Children;
                    fNameUIPropertySDup6Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIProperty");
                    fNameUIPropertySDup6Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"System.ItemNameDisplay");
                    fNameUIPropertySDup6Edit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Name");
                }

                return fNameUIPropertySDup6Edit;
            }
        }

        /// <summary>
        /// Gets Reference to MicrosoftPrinttListItem
        /// </summary>
        public ListItem MicrosoftPrinttListItem
        {
            get
            {
                if (null == fMicrosoftPrinttListItem)
                {
                    fMicrosoftPrinttListItem = new ListItem("MicrosoftPrinttListItem", PrintersUIGroupGroup);
                    fMicrosoftPrinttListItem.UIMap.Scope = UIASeachScope.Children;
                    fMicrosoftPrinttListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIItem");
                    fMicrosoftPrinttListItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3");
                    fMicrosoftPrinttListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Microsoft Print to PDF");
                }

                return fMicrosoftPrinttListItem;
            }
        }

        /// <summary>
        /// Gets Reference to UIImageBaselineDup5Image
        /// </summary>
        public Image UIImageBaselineDup5Image
        {
            get
            {
                if (null == fUIImageBaselineDup5Image)
                {
                    fUIImageBaselineDup5Image = new Image("UIImageBaselineDup5Image", MicrosoftPrinttListItem);
                    fUIImageBaselineDup5Image.UIMap.Scope = UIASeachScope.Children;
                    fUIImageBaselineDup5Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIImage");
                    fUIImageBaselineDup5Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"BaselineImage");
                }

                return fUIImageBaselineDup5Image;
            }
        }

        /// <summary>
        /// Gets Reference to NameUIPropertySDup7Edit
        /// </summary>
        public Edit NameUIPropertySDup7Edit
        {
            get
            {
                if (null == fNameUIPropertySDup7Edit)
                {
                    fNameUIPropertySDup7Edit = new Edit("NameUIPropertySDup7Edit", MicrosoftPrinttListItem);
                    fNameUIPropertySDup7Edit.UIMap.Scope = UIASeachScope.Children;
                    fNameUIPropertySDup7Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIProperty");
                    fNameUIPropertySDup7Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"System.ItemNameDisplay");
                    fNameUIPropertySDup7Edit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Name");
                }

                return fNameUIPropertySDup7Edit;
            }
        }

        /// <summary>
        /// Gets Reference to MicrosoftXPSDocListItem
        /// </summary>
        public ListItem MicrosoftXPSDocListItem
        {
            get
            {
                if (null == fMicrosoftXPSDocListItem)
                {
                    fMicrosoftXPSDocListItem = new ListItem("MicrosoftXPSDocListItem", PrintersUIGroupGroup);
                    fMicrosoftXPSDocListItem.UIMap.Scope = UIASeachScope.Children;
                    fMicrosoftXPSDocListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIItem");
                    fMicrosoftXPSDocListItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4");
                    fMicrosoftXPSDocListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Microsoft XPS Document Writer");
                }

                return fMicrosoftXPSDocListItem;
            }
        }

        /// <summary>
        /// Gets Reference to UIImageBaselineDup6Image
        /// </summary>
        public Image UIImageBaselineDup6Image
        {
            get
            {
                if (null == fUIImageBaselineDup6Image)
                {
                    fUIImageBaselineDup6Image = new Image("UIImageBaselineDup6Image", MicrosoftXPSDocListItem);
                    fUIImageBaselineDup6Image.UIMap.Scope = UIASeachScope.Children;
                    fUIImageBaselineDup6Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIImage");
                    fUIImageBaselineDup6Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"BaselineImage");
                }

                return fUIImageBaselineDup6Image;
            }
        }

        /// <summary>
        /// Gets Reference to NameUIPropertySDup8Edit
        /// </summary>
        public Edit NameUIPropertySDup8Edit
        {
            get
            {
                if (null == fNameUIPropertySDup8Edit)
                {
                    fNameUIPropertySDup8Edit = new Edit("NameUIPropertySDup8Edit", MicrosoftXPSDocListItem);
                    fNameUIPropertySDup8Edit.UIMap.Scope = UIASeachScope.Children;
                    fNameUIPropertySDup8Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIProperty");
                    fNameUIPropertySDup8Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"System.ItemNameDisplay");
                    fNameUIPropertySDup8Edit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Name");
                }

                return fNameUIPropertySDup8Edit;
            }
        }

        /// <summary>
        /// Gets Reference to SendToOneNote20ListItem
        /// </summary>
        public ListItem SendToOneNote20ListItem
        {
            get
            {
                if (null == fSendToOneNote20ListItem)
                {
                    fSendToOneNote20ListItem = new ListItem("SendToOneNote20ListItem", PrintersUIGroupGroup);
                    fSendToOneNote20ListItem.UIMap.Scope = UIASeachScope.Children;
                    fSendToOneNote20ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIItem");
                    fSendToOneNote20ListItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5");
                    fSendToOneNote20ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send To OneNote 2013");
                }

                return fSendToOneNote20ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to UIImageBaselineDup7Image
        /// </summary>
        public Image UIImageBaselineDup7Image
        {
            get
            {
                if (null == fUIImageBaselineDup7Image)
                {
                    fUIImageBaselineDup7Image = new Image("UIImageBaselineDup7Image", SendToOneNote20ListItem);
                    fUIImageBaselineDup7Image.UIMap.Scope = UIASeachScope.Children;
                    fUIImageBaselineDup7Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIImage");
                    fUIImageBaselineDup7Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"BaselineImage");
                }

                return fUIImageBaselineDup7Image;
            }
        }

        /// <summary>
        /// Gets Reference to NameUIPropertySDup9Edit
        /// </summary>
        public Edit NameUIPropertySDup9Edit
        {
            get
            {
                if (null == fNameUIPropertySDup9Edit)
                {
                    fNameUIPropertySDup9Edit = new Edit("NameUIPropertySDup9Edit", SendToOneNote20ListItem);
                    fNameUIPropertySDup9Edit.UIMap.Scope = UIASeachScope.Children;
                    fNameUIPropertySDup9Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UIProperty");
                    fNameUIPropertySDup9Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"System.ItemNameDisplay");
                    fNameUIPropertySDup9Edit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Name");
                }

                return fNameUIPropertySDup9Edit;
            }
        }

        /// <summary>
        /// Gets Reference to WorkerW40965Pane
        /// </summary>
        public Pane WorkerW40965Pane
        {
            get
            {
                if (null == fWorkerW40965Pane)
                {
                    fWorkerW40965Pane = new Pane("WorkerW40965Pane", DevicesandPrintPane);
                    fWorkerW40965Pane.UIMap.Scope = UIASeachScope.Children;
                    fWorkerW40965Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"WorkerW");
                    fWorkerW40965Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"40965");
                }

                return fWorkerW40965Pane;
            }
        }

        /// <summary>
        /// Gets Reference to ReBarWindow3240Dup1Pane
        /// </summary>
        public Pane ReBarWindow3240Dup1Pane
        {
            get
            {
                if (null == fReBarWindow3240Dup1Pane)
                {
                    fReBarWindow3240Dup1Pane = new Pane("ReBarWindow3240Dup1Pane", WorkerW40965Pane);
                    fReBarWindow3240Dup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fReBarWindow3240Dup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ReBarWindow32");
                    fReBarWindow3240Dup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"40965");
                }

                return fReBarWindow3240Dup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to RebarBandI6XCustom
        /// </summary>
        public Custom RebarBandI6XCustom
        {
            get
            {
                if (null == fRebarBandI6XCustom)
                {
                    fRebarBandI6XCustom = new Custom("RebarBandI6XCustom", ReBarWindow3240Dup1Pane);
                    fRebarBandI6XCustom.UIMap.Scope = UIASeachScope.Children;
                    fRebarBandI6XCustom.UIMap.Index = 6;
                    fRebarBandI6XCustom.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Rebar Band");
                }

                return fRebarBandI6XCustom;
            }
        }

        /// <summary>
        /// Gets Reference to ApplicationToolMenuBar
        /// </summary>
        public MenuBar ApplicationToolMenuBar
        {
            get
            {
                if (null == fApplicationToolMenuBar)
                {
                    fApplicationToolMenuBar = new MenuBar("ApplicationToolMenuBar", RebarBandI6XCustom);
                    fApplicationToolMenuBar.UIMap.Scope = UIASeachScope.Children;
                    fApplicationToolMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ToolbarWindow32");
                    fApplicationToolMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"MenuBar");
                    fApplicationToolMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Application");
                }

                return fApplicationToolMenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to FileItem32768MenuItem
        /// </summary>
        public MenuItem FileItem32768MenuItem
        {
            get
            {
                if (null == fFileItem32768MenuItem)
                {
                    fFileItem32768MenuItem = new MenuItem("FileItem32768MenuItem", ApplicationToolMenuBar);
                    fFileItem32768MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fFileItem32768MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 32768");
                    fFileItem32768MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"File");
                }

                return fFileItem32768MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to EditItem32832MenuItem
        /// </summary>
        public MenuItem EditItem32832MenuItem
        {
            get
            {
                if (null == fEditItem32832MenuItem)
                {
                    fEditItem32832MenuItem = new MenuItem("EditItem32832MenuItem", ApplicationToolMenuBar);
                    fEditItem32832MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fEditItem32832MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 32832");
                    fEditItem32832MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Edit");
                }

                return fEditItem32832MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to ViewItem32896MenuItem
        /// </summary>
        public MenuItem ViewItem32896MenuItem
        {
            get
            {
                if (null == fViewItem32896MenuItem)
                {
                    fViewItem32896MenuItem = new MenuItem("ViewItem32896MenuItem", ApplicationToolMenuBar);
                    fViewItem32896MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fViewItem32896MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 32896");
                    fViewItem32896MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"View");
                }

                return fViewItem32896MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to ToolsItem32960MenuItem
        /// </summary>
        public MenuItem ToolsItem32960MenuItem
        {
            get
            {
                if (null == fToolsItem32960MenuItem)
                {
                    fToolsItem32960MenuItem = new MenuItem("ToolsItem32960MenuItem", ApplicationToolMenuBar);
                    fToolsItem32960MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fToolsItem32960MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 32960");
                    fToolsItem32960MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Tools");
                }

                return fToolsItem32960MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to HelpItem33024MenuItem
        /// </summary>
        public MenuItem HelpItem33024MenuItem
        {
            get
            {
                if (null == fHelpItem33024MenuItem)
                {
                    fHelpItem33024MenuItem = new MenuItem("HelpItem33024MenuItem", ApplicationToolMenuBar);
                    fHelpItem33024MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fHelpItem33024MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 33024");
                    fHelpItem33024MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpItem33024MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to DevicesandPrintTitleBar
        /// </summary>
        public TitleBar DevicesandPrintTitleBar
        {
            get
            {
                if (null == fDevicesandPrintTitleBar)
                {
                    fDevicesandPrintTitleBar = new TitleBar("DevicesandPrintTitleBar", DevicesandPrintWindow);
                    fDevicesandPrintTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fDevicesandPrintTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fDevicesandPrintTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Devices and Printers");
                }

                return fDevicesandPrintTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemMenuBarSyMenuBar
        /// </summary>
        public MenuBar SystemMenuBarSyMenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyMenuBar)
                {
                    fSystemMenuBarSyMenuBar = new MenuBar("SystemMenuBarSyMenuBar", DevicesandPrintTitleBar);
                    fSystemMenuBarSyMenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyMenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemItem1MenuItem
        /// </summary>
        public MenuItem SystemItem1MenuItem
        {
            get
            {
                if (null == fSystemItem1MenuItem)
                {
                    fSystemItem1MenuItem = new MenuItem("SystemItem1MenuItem", SystemMenuBarSyMenuBar);
                    fSystemItem1MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to MinimizeMinimizButton
        /// </summary>
        public Button MinimizeMinimizButton
        {
            get
            {
                if (null == fMinimizeMinimizButton)
                {
                    fMinimizeMinimizButton = new Button("MinimizeMinimizButton", DevicesandPrintTitleBar);
                    fMinimizeMinimizButton.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                    fMinimizeMinimizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                }

                return fMinimizeMinimizButton;
            }
        }

        /// <summary>
        /// Gets Reference to RestoreRestoreButton
        /// </summary>
        public Button RestoreRestoreButton
        {
            get
            {
                if (null == fRestoreRestoreButton)
                {
                    fRestoreRestoreButton = new Button("RestoreRestoreButton", DevicesandPrintTitleBar);
                    fRestoreRestoreButton.UIMap.Scope = UIASeachScope.Children;
                    fRestoreRestoreButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Restore");
                    fRestoreRestoreButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Restore");
                }

                return fRestoreRestoreButton;
            }
        }

        /// <summary>
        /// Gets Reference to CloseCloseButton
        /// </summary>
        public Button CloseCloseButton
        {
            get
            {
                if (null == fCloseCloseButton)
                {
                    fCloseCloseButton = new Button("CloseCloseButton", DevicesandPrintTitleBar);
                    fCloseCloseButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseButton;
            }
        }
    }
}

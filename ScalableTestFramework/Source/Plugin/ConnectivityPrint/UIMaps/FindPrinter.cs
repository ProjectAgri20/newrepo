//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------

namespace HP.ScalableTest.Plugin.ConnectivityPrint.UIMaps
{
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class FindPrinter
    {
        /// <summary>
        /// Backing field for AddadeviceNativWindow property
        /// </summary>
        private Window fAddadeviceNativWindow;

        /// <summary>
        /// Backing field for AddPrinterNativWindow property
        /// </summary>
        private Window fAddPrinterNativWindow;

        /// <summary>
        /// Backing field for FindaprinterbyoPane property
        /// </summary>
        private Pane fFindaprinterbyoPane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI0XDup0Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI0XDup0Pane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI1XDup0Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI1XDup0Pane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI2XDup0Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI2XDup0Pane;

        /// <summary>
        /// Backing field for BackButtonbackbButton property
        /// </summary>
        private Button fBackButtonbackbButton;

        /// <summary>
        /// Backing field for ElementwizardicDup0Image property
        /// </summary>
        private Image fElementwizardicDup0Image;

        /// <summary>
        /// Backing field for AddPrinterElemeText property
        /// </summary>
        private Text fAddPrinterElemeText;

        /// <summary>
        /// Backing field for FindaprinterbyoText property
        /// </summary>
        private Text fFindaprinterbyoText;

        /// <summary>
        /// Backing field for NetworkprintertPane property
        /// </summary>
        private Pane fNetworkprintertPane;

        /// <summary>
        /// Backing field for MyprinterisalitRadioButton property
        /// </summary>
        private RadioButton fMyprinterisalitRadioButton;

        /// <summary>
        /// Backing field for FindaprinterintRadioButton property
        /// </summary>
        private RadioButton fFindaprinterintRadioButton;

        /// <summary>
        /// Backing field for SelectasharedprRadioButton property
        /// </summary>
        private RadioButton fSelectasharedprRadioButton;

        /// <summary>
        /// Backing field for AddaprinterusinRadioButton property
        /// </summary>
        private RadioButton fAddaprinterusinRadioButton;

        /// <summary>
        /// Backing field for AddaBluetoothwiRadioButton property
        /// </summary>
        private RadioButton fAddaBluetoothwiRadioButton;

        /// <summary>
        /// Backing field for AddalocalprinteRadioButton property
        /// </summary>
        private RadioButton fAddalocalprinteRadioButton;

        /// <summary>
        /// Backing field for aAddingprintersEdit property
        /// </summary>
        private Edit faAddingprintersEdit;

        /// <summary>
        /// Backing field for BrowseButton103Button property
        /// </summary>
        private Button fBrowseButton103Button;

        /// <summary>
        /// Backing field for ExamplecomputerText property
        /// </summary>
        private Text fExamplecomputerText;

        /// <summary>
        /// Backing field for NextCCPushButtoDup0Button property
        /// </summary>
        private Button fNextCCPushButtoDup0Button;

        /// <summary>
        /// Backing field for CancelCCPushButDup0Button property
        /// </summary>
        private Button fCancelCCPushButDup0Button;

        /// <summary>
        /// Backing field for AddPrinterTitleBar property
        /// </summary>
        private TitleBar fAddPrinterTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup0MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup0MenuBar;

        /// <summary>
        /// Backing field for SystemItem1I0XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I0XMenuItem;

        /// <summary>
        /// Backing field for CloseCloseDup0Button property
        /// </summary>
        private Button fCloseCloseDup0Button;

        /// <summary>
        /// Backing field for HWNDElementdialPane property
        /// </summary>
        private Pane fHWNDElementdialPane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI0XDup1Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI0XDup1Pane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI1XDup1Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI1XDup1Pane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI2XDup1Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI2XDup1Pane;

        /// <summary>
        /// Backing field for ElementwizardicDup1Image property
        /// </summary>
        private Image fElementwizardicDup1Image;

        /// <summary>
        /// Backing field for AddadeviceElemeText property
        /// </summary>
        private Text fAddadeviceElemeText;

        /// <summary>
        /// Backing field for ElementheadertiText property
        /// </summary>
        private Text fElementheadertiText;

        /// <summary>
        /// Backing field for XElementA6A0E2APane property
        /// </summary>
        private Pane fXElementA6A0E2APane;

        /// <summary>
        /// Backing field for XBabyPane property
        /// </summary>
        private Pane fXBabyPane;

        /// <summary>
        /// Backing field for CtrlNotifySinkPane property
        /// </summary>
        private Pane fCtrlNotifySinkPane;

        /// <summary>
        /// Backing field for ElementeClassicPane property
        /// </summary>
        private Pane fElementeClassicPane;

        /// <summary>
        /// Backing field for ChooseadeviceorText property
        /// </summary>
        private Text fChooseadeviceorText;

        /// <summary>
        /// Backing field for SelectadeviceElText property
        /// </summary>
        private Text fSelectadeviceElText;

        /// <summary>
        /// Backing field for VerticalCCVScroScrollBar property
        /// </summary>
        private ScrollBar fVerticalCCVScroScrollBar;

        /// <summary>
        /// Backing field for LineupButton property
        /// </summary>
        private Button fLineupButton;

        /// <summary>
        /// Backing field for PositionCustom property
        /// </summary>
        private Custom fPositionCustom;

        /// <summary>
        /// Backing field for PagedownButton property
        /// </summary>
        private Button fPagedownButton;

        /// <summary>
        /// Backing field for LinedownButton property
        /// </summary>
        private Button fLinedownButton;

        /// <summary>
        /// Backing field for DeviceListElemeList property
        /// </summary>
        private List fDeviceListElemeList;

        /// <summary>
        /// Backing field for NPI05F5E3HPColoButton property
        /// </summary>
        private Button fNPI05F5E3HPColoButton;

        /// <summary>
        /// Backing field for NPI05F5E3HPColoText property
        /// </summary>
        private Text fNPI05F5E3HPColoText;

        /// <summary>
        /// Backing field for PrinterRichTextDup0Text property
        /// </summary>
        private Text fPrinterRichTextDup0Text;

        /// <summary>
        /// Backing field for NPI204B88HPLaseButton property
        /// </summary>
        private Button fNPI204B88HPLaseButton;

        /// <summary>
        /// Backing field for NPI204B88HPLaseText property
        /// </summary>
        private Text fNPI204B88HPLaseText;

        /// <summary>
        /// Backing field for PrinterRichTextDup1Text property
        /// </summary>
        private Text fPrinterRichTextDup1Text;

        /// <summary>
        /// Backing field for NPI84D469HPDesiButton property
        /// </summary>
        private Button fNPI84D469HPDesiButton;

        /// <summary>
        /// Backing field for NPI84D469HPDesiText property
        /// </summary>
        private Text fNPI84D469HPDesiText;

        /// <summary>
        /// Backing field for PrinterRichTextDup2Text property
        /// </summary>
        private Text fPrinterRichTextDup2Text;

        /// <summary>
        /// Backing field for NPIA6532DHPColoButton property
        /// </summary>
        private Button fNPIA6532DHPColoButton;

        /// <summary>
        /// Backing field for NPIA6532DHPColoText property
        /// </summary>
        private Text fNPIA6532DHPColoText;

        /// <summary>
        /// Backing field for PrinterRichTextDup3Text property
        /// </summary>
        private Text fPrinterRichTextDup3Text;

        /// <summary>
        /// Backing field for NPIAA33FEHPColoButton property
        /// </summary>
        private Button fNPIAA33FEHPColoButton;

        /// <summary>
        /// Backing field for NPIAA33FEHPColoText property
        /// </summary>
        private Text fNPIAA33FEHPColoText;

        /// <summary>
        /// Backing field for PrinterRichTextDup4Text property
        /// </summary>
        private Text fPrinterRichTextDup4Text;

        /// <summary>
        /// Backing field for NPIBB41BCHPPageButton property
        /// </summary>
        private Button fNPIBB41BCHPPageButton;

        /// <summary>
        /// Backing field for NPIBB41BCHPPageText property
        /// </summary>
        private Text fNPIBB41BCHPPageText;

        /// <summary>
        /// Backing field for PrinterRichTextDup5Text property
        /// </summary>
        private Text fPrinterRichTextDup5Text;

        /// <summary>
        /// Backing field for NPIECF664HPPageButton property
        /// </summary>
        private Button fNPIECF664HPPageButton;

        /// <summary>
        /// Backing field for NPIECF664HPPageText property
        /// </summary>
        private Text fNPIECF664HPPageText;

        /// <summary>
        /// Backing field for PrinterRichTextDup6Text property
        /// </summary>
        private Text fPrinterRichTextDup6Text;

        /// <summary>
        /// Backing field for DIRECT1FHPPageWButton property
        /// </summary>
        private Button fDIRECT1FHPPageWButton;

        /// <summary>
        /// Backing field for DIRECT1FHPPageWText property
        /// </summary>
        private Text fDIRECT1FHPPageWText;

        /// <summary>
        /// Backing field for PrinterRichTextDup7Text property
        /// </summary>
        private Text fPrinterRichTextDup7Text;

        /// <summary>
        /// Backing field for DIRECT22HP586PaButton property
        /// </summary>
        private Button fDIRECT22HP586PaButton;

        /// <summary>
        /// Backing field for DIRECT22HP586PaText property
        /// </summary>
        private Text fDIRECT22HP586PaText;

        /// <summary>
        /// Backing field for PrinterRichTextDup8Text property
        /// </summary>
        private Text fPrinterRichTextDup8Text;

        /// <summary>
        /// Backing field for DIRECT35HPE7783Button property
        /// </summary>
        private Button fDIRECT35HPE7783Button;

        /// <summary>
        /// Backing field for DIRECT35HPE7783Text property
        /// </summary>
        private Text fDIRECT35HPE7783Text;

        /// <summary>
        /// Backing field for PrinterRichTextDup9Text property
        /// </summary>
        private Text fPrinterRichTextDup9Text;

        /// <summary>
        /// Backing field for DIRECT3EHPENVY7Button property
        /// </summary>
        private Button fDIRECT3EHPENVY7Button;

        /// <summary>
        /// Backing field for DIRECT3EHPENVY7Text property
        /// </summary>
        private Text fDIRECT3EHPENVY7Text;

        /// <summary>
        /// Backing field for PrinterRichTextDup10Text property
        /// </summary>
        private Text fPrinterRichTextDup10Text;

        /// <summary>
        /// Backing field for DIRECT49HPM577LButton property
        /// </summary>
        private Button fDIRECT49HPM577LButton;

        /// <summary>
        /// Backing field for DIRECT49HPM577LText property
        /// </summary>
        private Text fDIRECT49HPM577LText;

        /// <summary>
        /// Backing field for PrinterRichTextDup11Text property
        /// </summary>
        private Text fPrinterRichTextDup11Text;

        /// <summary>
        /// Backing field for DIRECT67HPPageWButton property
        /// </summary>
        private Button fDIRECT67HPPageWButton;

        /// <summary>
        /// Backing field for DIRECT67HPPageWText property
        /// </summary>
        private Text fDIRECT67HPPageWText;

        /// <summary>
        /// Backing field for PrinterRichTextDup12Text property
        /// </summary>
        private Text fPrinterRichTextDup12Text;

        /// <summary>
        /// Backing field for DIRECT81HPOfficButton property
        /// </summary>
        private Button fDIRECT81HPOfficButton;

        /// <summary>
        /// Backing field for DIRECT81HPOfficText property
        /// </summary>
        private Text fDIRECT81HPOfficText;

        /// <summary>
        /// Backing field for PrinterRichTextDup13Text property
        /// </summary>
        private Text fPrinterRichTextDup13Text;

        /// <summary>
        /// Backing field for DIRECTb7HPM426LButton property
        /// </summary>
        private Button fDIRECTb7HPM426LButton;

        /// <summary>
        /// Backing field for DIRECTb7HPM426LText property
        /// </summary>
        private Text fDIRECTb7HPM426LText;

        /// <summary>
        /// Backing field for PrinterRichTextDup14Text property
        /// </summary>
        private Text fPrinterRichTextDup14Text;

        /// <summary>
        /// Backing field for DIRECTc9HPM281LButton property
        /// </summary>
        private Button fDIRECTc9HPM281LButton;

        /// <summary>
        /// Backing field for DIRECTc9HPM281LText property
        /// </summary>
        private Text fDIRECTc9HPM281LText;

        /// <summary>
        /// Backing field for PrinterRichTextDup15Text property
        /// </summary>
        private Text fPrinterRichTextDup15Text;

        /// <summary>
        /// Backing field for DIRECTDBHPM527LButton property
        /// </summary>
        private Button fDIRECTDBHPM527LButton;

        /// <summary>
        /// Backing field for DIRECTDBHPM527LText property
        /// </summary>
        private Text fDIRECTDBHPM527LText;

        /// <summary>
        /// Backing field for PrinterRichTextDup16Text property
        /// </summary>
        private Text fPrinterRichTextDup16Text;

        /// <summary>
        /// Backing field for DIRECTE3HPPageWButton property
        /// </summary>
        private Button fDIRECTE3HPPageWButton;

        /// <summary>
        /// Backing field for DIRECTE3HPPageWText property
        /// </summary>
        private Text fDIRECTE3HPPageWText;

        /// <summary>
        /// Backing field for PrinterRichTextDup17Text property
        /// </summary>
        private Text fPrinterRichTextDup17Text;

        /// <summary>
        /// Backing field for DIRECTF4HPM606LButton property
        /// </summary>
        private Button fDIRECTF4HPM606LButton;

        /// <summary>
        /// Backing field for DIRECTF4HPM606LText property
        /// </summary>
        private Text fDIRECTF4HPM606LText;

        /// <summary>
        /// Backing field for PrinterRichTextDup18Text property
        /// </summary>
        private Text fPrinterRichTextDup18Text;

        /// <summary>
        /// Backing field for DIRECTF4HPOfficButton property
        /// </summary>
        private Button fDIRECTF4HPOfficButton;

        /// <summary>
        /// Backing field for DIRECTF4HPOfficText property
        /// </summary>
        private Text fDIRECTF4HPOfficText;

        /// <summary>
        /// Backing field for PrinterRichTextDup19Text property
        /// </summary>
        private Text fPrinterRichTextDup19Text;

        /// <summary>
        /// Backing field for DIRECTF7HPDeskJButton property
        /// </summary>
        private Button fDIRECTF7HPDeskJButton;

        /// <summary>
        /// Backing field for DIRECTF7HPDeskJText property
        /// </summary>
        private Text fDIRECTF7HPDeskJText;

        /// <summary>
        /// Backing field for PrinterRichTextDup20Text property
        /// </summary>
        private Text fPrinterRichTextDup20Text;

        /// <summary>
        /// Backing field for DIRECTFCHPOfficButton property
        /// </summary>
        private Button fDIRECTFCHPOfficButton;

        /// <summary>
        /// Backing field for DIRECTFCHPOfficText property
        /// </summary>
        private Text fDIRECTFCHPOfficText;

        /// <summary>
        /// Backing field for PrinterRichTextDup21Text property
        /// </summary>
        private Text fPrinterRichTextDup21Text;

        /// <summary>
        /// Backing field for DIRECTa8HPM181LButton property
        /// </summary>
        private Button fDIRECTa8HPM181LButton;

        /// <summary>
        /// Backing field for DIRECTa8HPM181LText property
        /// </summary>
        private Text fDIRECTa8HPM181LText;

        /// <summary>
        /// Backing field for PrinterRichTextDup22Text property
        /// </summary>
        private Text fPrinterRichTextDup22Text;

        /// <summary>
        /// Backing field for TheprinterthatIHyperlink property
        /// </summary>
        private Hyperlink fTheprinterthatIHyperlink;

        /// <summary>
        /// Backing field for NextCCPushButtoDup1Button property
        /// </summary>
        private Button fNextCCPushButtoDup1Button;

        /// <summary>
        /// Backing field for CancelCCPushButDup1Button property
        /// </summary>
        private Button fCancelCCPushButDup1Button;

        /// <summary>
        /// Backing field for AddadeviceTitleBar property
        /// </summary>
        private TitleBar fAddadeviceTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup1MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup1MenuBar;

        /// <summary>
        /// Backing field for SystemItem1I1XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I1XMenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizButton property
        /// </summary>
        private Button fMinimizeMinimizButton;

        /// <summary>
        /// Backing field for MaximizeMaximizButton property
        /// </summary>
        private Button fMaximizeMaximizButton;

        /// <summary>
        /// Backing field for CloseCloseDup1Button property
        /// </summary>
        private Button fCloseCloseDup1Button;

        /// <summary>
        /// Initializes a new instance of the <see cref="FindPrinter"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public FindPrinter(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FindPrinter"/> class using the default UIAFramework.
        /// </summary>
        public FindPrinter()
        {
            Desktop = new Desktop();
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to AddadeviceNativWindow
        /// </summary>
        public Window AddadeviceNativWindow
        {
            get
            {
                if (null == fAddadeviceNativWindow)
                {
                    fAddadeviceNativWindow = new Window("AddadeviceNativWindow", Desktop);
                    fAddadeviceNativWindow.UIMap.Scope = UIASeachScope.Children;
                    fAddadeviceNativWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NativeHWNDHost");
                    fAddadeviceNativWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a device");
                }

                return fAddadeviceNativWindow;
            }
        }

        /// <summary>
        /// Gets Reference to AddPrinterNativWindow
        /// </summary>
        public Window AddPrinterNativWindow
        {
            get
            {
                if (null == fAddPrinterNativWindow)
                {
                    fAddPrinterNativWindow = new Window("AddPrinterNativWindow", AddadeviceNativWindow);
                    fAddPrinterNativWindow.UIMap.Scope = UIASeachScope.Children;
                    fAddPrinterNativWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NativeHWNDHost");
                    fAddPrinterNativWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Printer");
                }

                return fAddPrinterNativWindow;
            }
        }

        /// <summary>
        /// Gets Reference to FindaprinterbyoPane
        /// </summary>
        public Pane FindaprinterbyoPane
        {
            get
            {
                if (null == fFindaprinterbyoPane)
                {
                    fFindaprinterbyoPane = new Pane("FindaprinterbyoPane", AddPrinterNativWindow);
                    fFindaprinterbyoPane.UIMap.Scope = UIASeachScope.Children;
                    fFindaprinterbyoPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"HWNDElement");
                    fFindaprinterbyoPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Find a printer by other options");
                    fFindaprinterbyoPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"dialogroot");
                }

                return fFindaprinterbyoPane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI0XDup0Pane
        /// </summary>
        public Pane CtrlNotifySinkI0XDup0Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI0XDup0Pane)
                {
                    fCtrlNotifySinkI0XDup0Pane = new Pane("CtrlNotifySinkI0XDup0Pane", FindaprinterbyoPane);
                    fCtrlNotifySinkI0XDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI0XDup0Pane.UIMap.Index = 0;
                    fCtrlNotifySinkI0XDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI0XDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI1XDup0Pane
        /// </summary>
        public Pane CtrlNotifySinkI1XDup0Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI1XDup0Pane)
                {
                    fCtrlNotifySinkI1XDup0Pane = new Pane("CtrlNotifySinkI1XDup0Pane", FindaprinterbyoPane);
                    fCtrlNotifySinkI1XDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI1XDup0Pane.UIMap.Index = 1;
                    fCtrlNotifySinkI1XDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI1XDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI2XDup0Pane
        /// </summary>
        public Pane CtrlNotifySinkI2XDup0Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI2XDup0Pane)
                {
                    fCtrlNotifySinkI2XDup0Pane = new Pane("CtrlNotifySinkI2XDup0Pane", FindaprinterbyoPane);
                    fCtrlNotifySinkI2XDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI2XDup0Pane.UIMap.Index = 2;
                    fCtrlNotifySinkI2XDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI2XDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to BackButtonbackbButton
        /// </summary>
        public Button BackButtonbackbButton
        {
            get
            {
                if (null == fBackButtonbackbButton)
                {
                    fBackButtonbackbButton = new Button("BackButtonbackbButton", FindaprinterbyoPane);
                    fBackButtonbackbButton.UIMap.Scope = UIASeachScope.Children;
                    fBackButtonbackbButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fBackButtonbackbButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Back");
                    fBackButtonbackbButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"backbutton");
                }

                return fBackButtonbackbButton;
            }
        }

        /// <summary>
        /// Gets Reference to ElementwizardicDup0Image
        /// </summary>
        public Image ElementwizardicDup0Image
        {
            get
            {
                if (null == fElementwizardicDup0Image)
                {
                    fElementwizardicDup0Image = new Image("ElementwizardicDup0Image", FindaprinterbyoPane);
                    fElementwizardicDup0Image.UIMap.Scope = UIASeachScope.Children;
                    fElementwizardicDup0Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fElementwizardicDup0Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"wizardicon");
                }

                return fElementwizardicDup0Image;
            }
        }

        /// <summary>
        /// Gets Reference to AddPrinterElemeText
        /// </summary>
        public Text AddPrinterElemeText
        {
            get
            {
                if (null == fAddPrinterElemeText)
                {
                    fAddPrinterElemeText = new Text("AddPrinterElemeText", FindaprinterbyoPane);
                    fAddPrinterElemeText.UIMap.Scope = UIASeachScope.Children;
                    fAddPrinterElemeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fAddPrinterElemeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Printer");
                    fAddPrinterElemeText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"wizardtitle");
                }

                return fAddPrinterElemeText;
            }
        }

        /// <summary>
        /// Gets Reference to FindaprinterbyoText
        /// </summary>
        public Text FindaprinterbyoText
        {
            get
            {
                if (null == fFindaprinterbyoText)
                {
                    fFindaprinterbyoText = new Text("FindaprinterbyoText", FindaprinterbyoPane);
                    fFindaprinterbyoText.UIMap.Scope = UIASeachScope.Children;
                    fFindaprinterbyoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fFindaprinterbyoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Find a printer by other options");
                    fFindaprinterbyoText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"headertitle");
                }

                return fFindaprinterbyoText;
            }
        }

        /// <summary>
        /// Gets Reference to NetworkprintertPane
        /// </summary>
        public Pane NetworkprintertPane
        {
            get
            {
                if (null == fNetworkprintertPane)
                {
                    fNetworkprintertPane = new Pane("NetworkprintertPane", FindaprinterbyoPane);
                    fNetworkprintertPane.UIMap.Scope = UIASeachScope.ChildrenByDescendants;
                    fNetworkprintertPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Win32PropSheetPageHost");
                   // fNetworkprintertPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Network printer type");
                    // fNetworkprintertPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"{0D152CC2-C756-4586-BEDF-21D596B1B50B}");                   
                }

                return fNetworkprintertPane;
            }
        }

        /// <summary>
        /// Gets Reference to MyprinterisalitRadioButton
        /// </summary>
        public RadioButton MyprinterisalitRadioButton
        {
            get
            {
                if (null == fMyprinterisalitRadioButton)
                {
                    fMyprinterisalitRadioButton = new RadioButton("MyprinterisalitRadioButton", NetworkprintertPane);
                    fMyprinterisalitRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fMyprinterisalitRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fMyprinterisalitRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"My printer is a little older. Help me find it.");
                    fMyprinterisalitRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1042");
                }

                return fMyprinterisalitRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to FindaprinterintRadioButton
        /// </summary>
        public RadioButton FindaprinterintRadioButton
        {
            get
            {
                if (null == fFindaprinterintRadioButton)
                {
                    fFindaprinterintRadioButton = new RadioButton("FindaprinterintRadioButton", NetworkprintertPane);
                    fFindaprinterintRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fFindaprinterintRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fFindaprinterintRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Find a printer in the directory, based on location or feature");
                    fFindaprinterintRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1033");
                }

                return fFindaprinterintRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to SelectasharedprRadioButton
        /// </summary>
        public RadioButton SelectasharedprRadioButton
        {
            get
            {
                if (null == fSelectasharedprRadioButton)
                {
                    fSelectasharedprRadioButton = new RadioButton("SelectasharedprRadioButton", NetworkprintertPane);
                    fSelectasharedprRadioButton.UIMap.Scope = UIASeachScope.ChildrenByDescendants;
                    fSelectasharedprRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fSelectasharedprRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Select a shared printer by name");
                    fSelectasharedprRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1034");
                }

                return fSelectasharedprRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to AddaprinterusinRadioButton
        /// </summary>
        public RadioButton AddaprinterusinRadioButton
        {
            get
            {
                if (null == fAddaprinterusinRadioButton)
                {
                    fAddaprinterusinRadioButton = new RadioButton("AddaprinterusinRadioButton", NetworkprintertPane);
                    fAddaprinterusinRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fAddaprinterusinRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fAddaprinterusinRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a printer using a TCP/IP address or hostname");
                    fAddaprinterusinRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1036");
                }

                return fAddaprinterusinRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to AddaBluetoothwiRadioButton
        /// </summary>
        public RadioButton AddaBluetoothwiRadioButton
        {
            get
            {
                if (null == fAddaBluetoothwiRadioButton)
                {
                    fAddaBluetoothwiRadioButton = new RadioButton("AddaBluetoothwiRadioButton", NetworkprintertPane);
                    fAddaBluetoothwiRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fAddaBluetoothwiRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fAddaBluetoothwiRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a Bluetooth, wireless or network discoverable printer");
                    fAddaBluetoothwiRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1041");
                }

                return fAddaBluetoothwiRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to AddalocalprinteRadioButton
        /// </summary>
        public RadioButton AddalocalprinteRadioButton
        {
            get
            {
                if (null == fAddalocalprinteRadioButton)
                {
                    fAddalocalprinteRadioButton = new RadioButton("AddalocalprinteRadioButton", NetworkprintertPane);
                    fAddalocalprinteRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fAddalocalprinteRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fAddalocalprinteRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a local printer or network printer with manual settings");
                    fAddalocalprinteRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1039");
                }

                return fAddalocalprinteRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to aAddingprintersEdit
        /// </summary>
        public Edit aAddingprintersEdit
        {
            get
            {
                if (null == faAddingprintersEdit)
                {
                    faAddingprintersEdit = new Edit("aAddingprintersEdit", NetworkprintertPane);
                    faAddingprintersEdit.UIMap.Scope = UIASeachScope.Children;
                    faAddingprintersEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Edit");
                    faAddingprintersEdit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"<a>Adding printers by TCP/IP address or hostname</a>");
                    faAddingprintersEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4655");
                }

                return faAddingprintersEdit;
            }
        }

        /// <summary>
        /// Gets Reference to BrowseButton103Button
        /// </summary>
        public Button BrowseButton103Button
        {
            get
            {
                if (null == fBrowseButton103Button)
                {
                    fBrowseButton103Button = new Button("BrowseButton103Button", NetworkprintertPane);
                    fBrowseButton103Button.UIMap.Scope = UIASeachScope.Children;
                    fBrowseButton103Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fBrowseButton103Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Browse...");
                    fBrowseButton103Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1038");
                }

                return fBrowseButton103Button;
            }
        }

        /// <summary>
        /// Gets Reference to ExamplecomputerText
        /// </summary>
        public Text ExamplecomputerText
        {
            get
            {
                if (null == fExamplecomputerText)
                {
                    fExamplecomputerText = new Text("ExamplecomputerText", NetworkprintertPane);
                    fExamplecomputerText.UIMap.Scope = UIASeachScope.Children;
                    fExamplecomputerText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fExamplecomputerText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Example: \\computername\printername or 
http://computername/printers/printername/.printer");
                    fExamplecomputerText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1037");
                }

                return fExamplecomputerText;
            }
        }

        /// <summary>
        /// Gets Reference to NextCCPushButtoDup0Button
        /// </summary>
        public Button NextCCPushButtoDup0Button
        {
            get
            {
                if (null == fNextCCPushButtoDup0Button)
                {
                    fNextCCPushButtoDup0Button = new Button("NextCCPushButtoDup0Button", FindaprinterbyoPane);
                    fNextCCPushButtoDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fNextCCPushButtoDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCPushButton");
                    fNextCCPushButtoDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Next");
                    fNextCCPushButtoDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"nextbutton");
                }

                return fNextCCPushButtoDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to CancelCCPushButDup0Button
        /// </summary>
        public Button CancelCCPushButDup0Button
        {
            get
            {
                if (null == fCancelCCPushButDup0Button)
                {
                    fCancelCCPushButDup0Button = new Button("CancelCCPushButDup0Button", FindaprinterbyoPane);
                    fCancelCCPushButDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelCCPushButDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCPushButton");
                    fCancelCCPushButDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                    fCancelCCPushButDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cancelbutton");
                }

                return fCancelCCPushButDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to AddPrinterTitleBar
        /// </summary>
        public TitleBar AddPrinterTitleBar
        {
            get
            {
                if (null == fAddPrinterTitleBar)
                {
                    fAddPrinterTitleBar = new TitleBar("AddPrinterTitleBar", AddPrinterNativWindow);
                    fAddPrinterTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fAddPrinterTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Printer");
                    fAddPrinterTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                }

                return fAddPrinterTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemMenuBarSyDup0MenuBar
        /// </summary>
        public MenuBar SystemMenuBarSyDup0MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup0MenuBar)
                {
                    fSystemMenuBarSyDup0MenuBar = new MenuBar("SystemMenuBarSyDup0MenuBar", AddPrinterTitleBar);
                    fSystemMenuBarSyDup0MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                }

                return fSystemMenuBarSyDup0MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemItem1I0XMenuItem
        /// </summary>
        public MenuItem SystemItem1I0XMenuItem
        {
            get
            {
                if (null == fSystemItem1I0XMenuItem)
                {
                    fSystemItem1I0XMenuItem = new MenuItem("SystemItem1I0XMenuItem", SystemMenuBarSyDup0MenuBar);
                    fSystemItem1I0XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I0XMenuItem.UIMap.Index = 0;
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                }

                return fSystemItem1I0XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to CloseCloseDup0Button
        /// </summary>
        public Button CloseCloseDup0Button
        {
            get
            {
                if (null == fCloseCloseDup0Button)
                {
                    fCloseCloseDup0Button = new Button("CloseCloseDup0Button", AddPrinterTitleBar);
                    fCloseCloseDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                }

                return fCloseCloseDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to HWNDElementdialPane
        /// </summary>
        public Pane HWNDElementdialPane
        {
            get
            {
                if (null == fHWNDElementdialPane)
                {
                    fHWNDElementdialPane = new Pane("HWNDElementdialPane", AddadeviceNativWindow);
                    fHWNDElementdialPane.UIMap.Scope = UIASeachScope.Children; ;
                    fHWNDElementdialPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"HWNDElement");
                    fHWNDElementdialPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"dialogroot");
                }

                return fHWNDElementdialPane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI0XDup1Pane
        /// </summary>
        public Pane CtrlNotifySinkI0XDup1Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI0XDup1Pane)
                {
                    fCtrlNotifySinkI0XDup1Pane = new Pane("CtrlNotifySinkI0XDup1Pane", HWNDElementdialPane);
                    fCtrlNotifySinkI0XDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI0XDup1Pane.UIMap.Index = 0;
                    fCtrlNotifySinkI0XDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI0XDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI1XDup1Pane
        /// </summary>
        public Pane CtrlNotifySinkI1XDup1Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI1XDup1Pane)
                {
                    fCtrlNotifySinkI1XDup1Pane = new Pane("CtrlNotifySinkI1XDup1Pane", HWNDElementdialPane);
                    fCtrlNotifySinkI1XDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI1XDup1Pane.UIMap.Index = 1;
                    fCtrlNotifySinkI1XDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI1XDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI2XDup1Pane
        /// </summary>
        public Pane CtrlNotifySinkI2XDup1Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI2XDup1Pane)
                {
                    fCtrlNotifySinkI2XDup1Pane = new Pane("CtrlNotifySinkI2XDup1Pane", HWNDElementdialPane);
                    fCtrlNotifySinkI2XDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI2XDup1Pane.UIMap.Index = 2;
                    fCtrlNotifySinkI2XDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI2XDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to ElementwizardicDup1Image
        /// </summary>
        public Image ElementwizardicDup1Image
        {
            get
            {
                if (null == fElementwizardicDup1Image)
                {
                    fElementwizardicDup1Image = new Image("ElementwizardicDup1Image", HWNDElementdialPane);
                    fElementwizardicDup1Image.UIMap.Scope = UIASeachScope.Children;
                    fElementwizardicDup1Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fElementwizardicDup1Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"wizardicon");
                }

                return fElementwizardicDup1Image;
            }
        }

        /// <summary>
        /// Gets Reference to AddadeviceElemeText
        /// </summary>
        public Text AddadeviceElemeText
        {
            get
            {
                if (null == fAddadeviceElemeText)
                {
                    fAddadeviceElemeText = new Text("AddadeviceElemeText", HWNDElementdialPane);
                    fAddadeviceElemeText.UIMap.Scope = UIASeachScope.Children;
                    fAddadeviceElemeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fAddadeviceElemeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a device");
                    fAddadeviceElemeText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"wizardtitle");
                }

                return fAddadeviceElemeText;
            }
        }

        /// <summary>
        /// Gets Reference to ElementheadertiText
        /// </summary>
        public Text ElementheadertiText
        {
            get
            {
                if (null == fElementheadertiText)
                {
                    fElementheadertiText = new Text("ElementheadertiText", HWNDElementdialPane);
                    fElementheadertiText.UIMap.Scope = UIASeachScope.Children;
                    fElementheadertiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fElementheadertiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"headertitle");
                }

                return fElementheadertiText;
            }
        }

        /// <summary>
        /// Gets Reference to XElementA6A0E2APane
        /// </summary>
        public Pane XElementA6A0E2APane
        {
            get
            {
                if (null == fXElementA6A0E2APane)
                {
                    fXElementA6A0E2APane = new Pane("XElementA6A0E2APane", HWNDElementdialPane);
                    fXElementA6A0E2APane.UIMap.Scope = UIASeachScope.Children;
                    fXElementA6A0E2APane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"XElement");
                    fXElementA6A0E2APane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"{A6A0E2AA-DA89-46EE-819A-0A9B2EA31856}");
                }

                return fXElementA6A0E2APane;
            }
        }

        /// <summary>
        /// Gets Reference to XBabyPane
        /// </summary>
        public Pane XBabyPane
        {
            get
            {
                if (null == fXBabyPane)
                {
                    fXBabyPane = new Pane("XBabyPane", XElementA6A0E2APane);
                    fXBabyPane.UIMap.Scope = UIASeachScope.Children;
                    fXBabyPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"XBaby");
                }

                return fXBabyPane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkPane
        /// </summary>
        public Pane CtrlNotifySinkPane
        {
            get
            {
                if (null == fCtrlNotifySinkPane)
                {
                    fCtrlNotifySinkPane = new Pane("CtrlNotifySinkPane", XBabyPane);
                    fCtrlNotifySinkPane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkPane;
            }
        }

        /// <summary>
        /// Gets Reference to ElementeClassicPane
        /// </summary>
        public Pane ElementeClassicPane
        {
            get
            {
                if (null == fElementeClassicPane)
                {
                    fElementeClassicPane = new Pane("ElementeClassicPane", XBabyPane);
                    fElementeClassicPane.UIMap.Scope = UIASeachScope.Children;
                    fElementeClassicPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fElementeClassicPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eClassicBody");
                }

                return fElementeClassicPane;
            }
        }

        /// <summary>
        /// Gets Reference to ChooseadeviceorText
        /// </summary>
        public Text ChooseadeviceorText
        {
            get
            {
                if (null == fChooseadeviceorText)
                {
                    fChooseadeviceorText = new Text("ChooseadeviceorText", ElementeClassicPane);
                    fChooseadeviceorText.UIMap.Scope = UIASeachScope.Children;
                    fChooseadeviceorText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fChooseadeviceorText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Choose a device or printer to add to this PC");
                    fChooseadeviceorText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eTitleText");
                }

                return fChooseadeviceorText;
            }
        }

        /// <summary>
        /// Gets Reference to SelectadeviceElText
        /// </summary>
        public Text SelectadeviceElText
        {
            get
            {
                if (null == fSelectadeviceElText)
                {
                    fSelectadeviceElText = new Text("SelectadeviceElText", ElementeClassicPane);
                    fSelectadeviceElText.UIMap.Scope = UIASeachScope.Children;
                    fSelectadeviceElText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fSelectadeviceElText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Select a device");
                    fSelectadeviceElText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eProgressText");
                }

                return fSelectadeviceElText;
            }
        }

        /// <summary>
        /// Gets Reference to VerticalCCVScroScrollBar
        /// </summary>
        public ScrollBar VerticalCCVScroScrollBar
        {
            get
            {
                if (null == fVerticalCCVScroScrollBar)
                {
                    fVerticalCCVScroScrollBar = new ScrollBar("VerticalCCVScroScrollBar", ElementeClassicPane);
                    fVerticalCCVScroScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fVerticalCCVScroScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCVScrollBar");
                    fVerticalCCVScroScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Vertical");
                    fVerticalCCVScroScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fVerticalCCVScroScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to LineupButton
        /// </summary>
        public Button LineupButton
        {
            get
            {
                if (null == fLineupButton)
                {
                    fLineupButton = new Button("LineupButton", VerticalCCVScroScrollBar);
                    fLineupButton.UIMap.Scope = UIASeachScope.Children;
                    fLineupButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Line up");
                }

                return fLineupButton;
            }
        }

        /// <summary>
        /// Gets Reference to PositionCustom
        /// </summary>
        public Custom PositionCustom
        {
            get
            {
                if (null == fPositionCustom)
                {
                    fPositionCustom = new Custom("PositionCustom", VerticalCCVScroScrollBar);
                    fPositionCustom.UIMap.Scope = UIASeachScope.Children;
                    fPositionCustom.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Position");
                }

                return fPositionCustom;
            }
        }

        /// <summary>
        /// Gets Reference to PagedownButton
        /// </summary>
        public Button PagedownButton
        {
            get
            {
                if (null == fPagedownButton)
                {
                    fPagedownButton = new Button("PagedownButton", VerticalCCVScroScrollBar);
                    fPagedownButton.UIMap.Scope = UIASeachScope.Children;
                    fPagedownButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Page down");
                }

                return fPagedownButton;
            }
        }

        /// <summary>
        /// Gets Reference to LinedownButton
        /// </summary>
        public Button LinedownButton
        {
            get
            {
                if (null == fLinedownButton)
                {
                    fLinedownButton = new Button("LinedownButton", VerticalCCVScroScrollBar);
                    fLinedownButton.UIMap.Scope = UIASeachScope.Children;
                    fLinedownButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Line down");
                }

                return fLinedownButton;
            }
        }

        /// <summary>
        /// Gets Reference to DeviceListElemeList
        /// </summary>
        public List DeviceListElemeList
        {
            get
            {
                if (null == fDeviceListElemeList)
                {
                    fDeviceListElemeList = new List("DeviceListElemeList", ElementeClassicPane);
                    fDeviceListElemeList.UIMap.Scope = UIASeachScope.Children;
                    fDeviceListElemeList.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fDeviceListElemeList.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device List");
                    fDeviceListElemeList.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eDeviceList");
                }

                return fDeviceListElemeList;
            }
        }

        /// <summary>
        /// Gets Reference to NPI05F5E3HPColoButton
        /// </summary>
        public Button NPI05F5E3HPColoButton
        {
            get
            {
                if (null == fNPI05F5E3HPColoButton)
                {
                    fNPI05F5E3HPColoButton = new Button("NPI05F5E3HPColoButton", DeviceListElemeList);
                    fNPI05F5E3HPColoButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI05F5E3HPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fNPI05F5E3HPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI05F5E3 (HP Color LaserJet CM3530 MFP)");
                    fNPI05F5E3HPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"55a716b8-ca78-a878-8efd-2c768a05f5e3");
                }

                return fNPI05F5E3HPColoButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI05F5E3HPColoText
        /// </summary>
        public Text NPI05F5E3HPColoText
        {
            get
            {
                if (null == fNPI05F5E3HPColoText)
                {
                    fNPI05F5E3HPColoText = new Text("NPI05F5E3HPColoText", NPI05F5E3HPColoButton);
                    fNPI05F5E3HPColoText.UIMap.Scope = UIASeachScope.Children;
                    fNPI05F5E3HPColoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fNPI05F5E3HPColoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI05F5E3 (HP Color LaserJet CM3530 MFP)");
                    fNPI05F5E3HPColoText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                }

                return fNPI05F5E3HPColoText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup0Text
        /// </summary>
        public Text PrinterRichTextDup0Text
        {
            get
            {
                if (null == fPrinterRichTextDup0Text)
                {
                    fPrinterRichTextDup0Text = new Text("PrinterRichTextDup0Text", NPI05F5E3HPColoButton);
                    fPrinterRichTextDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                }

                return fPrinterRichTextDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI204B88HPLaseButton
        /// </summary>
        public Button NPI204B88HPLaseButton
        {
            get
            {
                if (null == fNPI204B88HPLaseButton)
                {
                    fNPI204B88HPLaseButton = new Button("NPI204B88HPLaseButton", DeviceListElemeList);
                    fNPI204B88HPLaseButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI204B88HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fNPI204B88HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI204B88 (HP LaserJet P3010 Series)");
                    fNPI204B88HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5da61c20-cd65-5736-87ae-001f29204b88");
                }

                return fNPI204B88HPLaseButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI204B88HPLaseText
        /// </summary>
        public Text NPI204B88HPLaseText
        {
            get
            {
                if (null == fNPI204B88HPLaseText)
                {
                    fNPI204B88HPLaseText = new Text("NPI204B88HPLaseText", NPI204B88HPLaseButton);
                    fNPI204B88HPLaseText.UIMap.Scope = UIASeachScope.Children;
                    fNPI204B88HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fNPI204B88HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI204B88 (HP LaserJet P3010 Series)");
                    fNPI204B88HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                }

                return fNPI204B88HPLaseText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup1Text
        /// </summary>
        public Text PrinterRichTextDup1Text
        {
            get
            {
                if (null == fPrinterRichTextDup1Text)
                {
                    fPrinterRichTextDup1Text = new Text("PrinterRichTextDup1Text", NPI204B88HPLaseButton);
                    fPrinterRichTextDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                }

                return fPrinterRichTextDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI84D469HPDesiButton
        /// </summary>
        public Button NPI84D469HPDesiButton
        {
            get
            {
                if (null == fNPI84D469HPDesiButton)
                {
                    fNPI84D469HPDesiButton = new Button("NPI84D469HPDesiButton", DeviceListElemeList);
                    fNPI84D469HPDesiButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI84D469HPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fNPI84D469HPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI84D469 (HP Designjet T3500)");
                    fNPI84D469HPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4cb3f46f-b8d7-3ac4-b349-009c0284d469");
                }

                return fNPI84D469HPDesiButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI84D469HPDesiText
        /// </summary>
        public Text NPI84D469HPDesiText
        {
            get
            {
                if (null == fNPI84D469HPDesiText)
                {
                    fNPI84D469HPDesiText = new Text("NPI84D469HPDesiText", NPI84D469HPDesiButton);
                    fNPI84D469HPDesiText.UIMap.Scope = UIASeachScope.Children;
                    fNPI84D469HPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fNPI84D469HPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI84D469 (HP Designjet T3500)");
                    fNPI84D469HPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                }

                return fNPI84D469HPDesiText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup2Text
        /// </summary>
        public Text PrinterRichTextDup2Text
        {
            get
            {
                if (null == fPrinterRichTextDup2Text)
                {
                    fPrinterRichTextDup2Text = new Text("PrinterRichTextDup2Text", NPI84D469HPDesiButton);
                    fPrinterRichTextDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                }

                return fPrinterRichTextDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPIA6532DHPColoButton
        /// </summary>
        public Button NPIA6532DHPColoButton
        {
            get
            {
                if (null == fNPIA6532DHPColoButton)
                {
                    fNPIA6532DHPColoButton = new Button("NPIA6532DHPColoButton", DeviceListElemeList);
                    fNPIA6532DHPColoButton.UIMap.Scope = UIASeachScope.Children;
                    fNPIA6532DHPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fNPIA6532DHPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIA6532D (HP Color LaserJet Flow E87660)");
                    fNPIA6532DHPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"15b5ac58-ec9a-4009-800c-98e7f4a6532d");
                }

                return fNPIA6532DHPColoButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPIA6532DHPColoText
        /// </summary>
        public Text NPIA6532DHPColoText
        {
            get
            {
                if (null == fNPIA6532DHPColoText)
                {
                    fNPIA6532DHPColoText = new Text("NPIA6532DHPColoText", NPIA6532DHPColoButton);
                    fNPIA6532DHPColoText.UIMap.Scope = UIASeachScope.Children;
                    fNPIA6532DHPColoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fNPIA6532DHPColoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIA6532D (HP Color LaserJet Flow E87660)");
                    fNPIA6532DHPColoText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                }

                return fNPIA6532DHPColoText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup3Text
        /// </summary>
        public Text PrinterRichTextDup3Text
        {
            get
            {
                if (null == fPrinterRichTextDup3Text)
                {
                    fPrinterRichTextDup3Text = new Text("PrinterRichTextDup3Text", NPIA6532DHPColoButton);
                    fPrinterRichTextDup3Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                }

                return fPrinterRichTextDup3Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPIAA33FEHPColoButton
        /// </summary>
        public Button NPIAA33FEHPColoButton
        {
            get
            {
                if (null == fNPIAA33FEHPColoButton)
                {
                    fNPIAA33FEHPColoButton = new Button("NPIAA33FEHPColoButton", DeviceListElemeList);
                    fNPIAA33FEHPColoButton.UIMap.Scope = UIASeachScope.Children;
                    fNPIAA33FEHPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fNPIAA33FEHPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIAA33FE (HP Color LaserJet M553)");
                    fNPIAA33FEHPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c5b3df59-4ded-11e6-981c-705a0faa33fe");
                }

                return fNPIAA33FEHPColoButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPIAA33FEHPColoText
        /// </summary>
        public Text NPIAA33FEHPColoText
        {
            get
            {
                if (null == fNPIAA33FEHPColoText)
                {
                    fNPIAA33FEHPColoText = new Text("NPIAA33FEHPColoText", NPIAA33FEHPColoButton);
                    fNPIAA33FEHPColoText.UIMap.Scope = UIASeachScope.Children;
                    fNPIAA33FEHPColoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fNPIAA33FEHPColoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIAA33FE (HP Color LaserJet M553)");
                    fNPIAA33FEHPColoText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                }

                return fNPIAA33FEHPColoText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup4Text
        /// </summary>
        public Text PrinterRichTextDup4Text
        {
            get
            {
                if (null == fPrinterRichTextDup4Text)
                {
                    fPrinterRichTextDup4Text = new Text("PrinterRichTextDup4Text", NPIAA33FEHPColoButton);
                    fPrinterRichTextDup4Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                }

                return fPrinterRichTextDup4Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPIBB41BCHPPageButton
        /// </summary>
        public Button NPIBB41BCHPPageButton
        {
            get
            {
                if (null == fNPIBB41BCHPPageButton)
                {
                    fNPIBB41BCHPPageButton = new Button("NPIBB41BCHPPageButton", DeviceListElemeList);
                    fNPIBB41BCHPPageButton.UIMap.Scope = UIASeachScope.Children;
                    fNPIBB41BCHPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fNPIBB41BCHPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIBB41BC (HP PageWide Color 765)");
                    fNPIBB41BCHPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3882d4b5-b57c-4f47-a7a6-ec8eb5bb41bc");
                }

                return fNPIBB41BCHPPageButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPIBB41BCHPPageText
        /// </summary>
        public Text NPIBB41BCHPPageText
        {
            get
            {
                if (null == fNPIBB41BCHPPageText)
                {
                    fNPIBB41BCHPPageText = new Text("NPIBB41BCHPPageText", NPIBB41BCHPPageButton);
                    fNPIBB41BCHPPageText.UIMap.Scope = UIASeachScope.Children;
                    fNPIBB41BCHPPageText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fNPIBB41BCHPPageText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIBB41BC (HP PageWide Color 765)");
                    fNPIBB41BCHPPageText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                }

                return fNPIBB41BCHPPageText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup5Text
        /// </summary>
        public Text PrinterRichTextDup5Text
        {
            get
            {
                if (null == fPrinterRichTextDup5Text)
                {
                    fPrinterRichTextDup5Text = new Text("PrinterRichTextDup5Text", NPIBB41BCHPPageButton);
                    fPrinterRichTextDup5Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup5Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup5Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup5Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                }

                return fPrinterRichTextDup5Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPIECF664HPPageButton
        /// </summary>
        public Button NPIECF664HPPageButton
        {
            get
            {
                if (null == fNPIECF664HPPageButton)
                {
                    fNPIECF664HPPageButton = new Button("NPIECF664HPPageButton", DeviceListElemeList);
                    fNPIECF664HPPageButton.UIMap.Scope = UIASeachScope.Children;
                    fNPIECF664HPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fNPIECF664HPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIECF664 (HP PageWide Color Flow MFP 586)");
                    fNPIECF664HPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"471cf23a-1d0f-42e1-9e36-a0d3c1ecf664");
                }

                return fNPIECF664HPPageButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPIECF664HPPageText
        /// </summary>
        public Text NPIECF664HPPageText
        {
            get
            {
                if (null == fNPIECF664HPPageText)
                {
                    fNPIECF664HPPageText = new Text("NPIECF664HPPageText", NPIECF664HPPageButton);
                    fNPIECF664HPPageText.UIMap.Scope = UIASeachScope.Children;
                    fNPIECF664HPPageText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fNPIECF664HPPageText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIECF664 (HP PageWide Color Flow MFP 586)");
                    fNPIECF664HPPageText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                }

                return fNPIECF664HPPageText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup6Text
        /// </summary>
        public Text PrinterRichTextDup6Text
        {
            get
            {
                if (null == fPrinterRichTextDup6Text)
                {
                    fPrinterRichTextDup6Text = new Text("PrinterRichTextDup6Text", NPIECF664HPPageButton);
                    fPrinterRichTextDup6Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup6Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup6Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup6Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                }

                return fPrinterRichTextDup6Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT1FHPPageWButton
        /// </summary>
        public Button DIRECT1FHPPageWButton
        {
            get
            {
                if (null == fDIRECT1FHPPageWButton)
                {
                    fDIRECT1FHPPageWButton = new Button("DIRECT1FHPPageWButton", DeviceListElemeList);
                    fDIRECT1FHPPageWButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT1FHPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECT1FHPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-1F-HP PageWide Pro 477dw");
                    fDIRECT1FHPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"e636868f-dcd6-5202-fce4-f38c8abe52af");
                }

                return fDIRECT1FHPPageWButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT1FHPPageWText
        /// </summary>
        public Text DIRECT1FHPPageWText
        {
            get
            {
                if (null == fDIRECT1FHPPageWText)
                {
                    fDIRECT1FHPPageWText = new Text("DIRECT1FHPPageWText", DIRECT1FHPPageWButton);
                    fDIRECT1FHPPageWText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT1FHPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECT1FHPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-1F-HP PageWide Pro 477dw");
                    fDIRECT1FHPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                }

                return fDIRECT1FHPPageWText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup7Text
        /// </summary>
        public Text PrinterRichTextDup7Text
        {
            get
            {
                if (null == fPrinterRichTextDup7Text)
                {
                    fPrinterRichTextDup7Text = new Text("PrinterRichTextDup7Text", DIRECT1FHPPageWButton);
                    fPrinterRichTextDup7Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup7Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup7Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup7Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                }

                return fPrinterRichTextDup7Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT22HP586PaButton
        /// </summary>
        public Button DIRECT22HP586PaButton
        {
            get
            {
                if (null == fDIRECT22HP586PaButton)
                {
                    fDIRECT22HP586PaButton = new Button("DIRECT22HP586PaButton", DeviceListElemeList);
                    fDIRECT22HP586PaButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT22HP586PaButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECT22HP586PaButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-22-HP 586 PageWide");
                    fDIRECT22HP586PaButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eee86355-42a6-4ee8-85fb-d85de2616422");
                }

                return fDIRECT22HP586PaButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT22HP586PaText
        /// </summary>
        public Text DIRECT22HP586PaText
        {
            get
            {
                if (null == fDIRECT22HP586PaText)
                {
                    fDIRECT22HP586PaText = new Text("DIRECT22HP586PaText", DIRECT22HP586PaButton);
                    fDIRECT22HP586PaText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT22HP586PaText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECT22HP586PaText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-22-HP 586 PageWide");
                    fDIRECT22HP586PaText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                }

                return fDIRECT22HP586PaText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup8Text
        /// </summary>
        public Text PrinterRichTextDup8Text
        {
            get
            {
                if (null == fPrinterRichTextDup8Text)
                {
                    fPrinterRichTextDup8Text = new Text("PrinterRichTextDup8Text", DIRECT22HP586PaButton);
                    fPrinterRichTextDup8Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup8Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup8Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup8Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                }

                return fPrinterRichTextDup8Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT35HPE7783Button
        /// </summary>
        public Button DIRECT35HPE7783Button
        {
            get
            {
                if (null == fDIRECT35HPE7783Button)
                {
                    fDIRECT35HPE7783Button = new Button("DIRECT35HPE7783Button", DeviceListElemeList);
                    fDIRECT35HPE7783Button.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT35HPE7783Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECT35HPE7783Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-35-HP E77830 LaserJet");
                    fDIRECT35HPE7783Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d0df198f-b90f-4b5d-93bc-9cd21e990b35");
                }

                return fDIRECT35HPE7783Button;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT35HPE7783Text
        /// </summary>
        public Text DIRECT35HPE7783Text
        {
            get
            {
                if (null == fDIRECT35HPE7783Text)
                {
                    fDIRECT35HPE7783Text = new Text("DIRECT35HPE7783Text", DIRECT35HPE7783Button);
                    fDIRECT35HPE7783Text.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT35HPE7783Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECT35HPE7783Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-35-HP E77830 LaserJet");
                    fDIRECT35HPE7783Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                }

                return fDIRECT35HPE7783Text;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup9Text
        /// </summary>
        public Text PrinterRichTextDup9Text
        {
            get
            {
                if (null == fPrinterRichTextDup9Text)
                {
                    fPrinterRichTextDup9Text = new Text("PrinterRichTextDup9Text", DIRECT35HPE7783Button);
                    fPrinterRichTextDup9Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup9Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup9Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup9Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                }

                return fPrinterRichTextDup9Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT3EHPENVY7Button
        /// </summary>
        public Button DIRECT3EHPENVY7Button
        {
            get
            {
                if (null == fDIRECT3EHPENVY7Button)
                {
                    fDIRECT3EHPENVY7Button = new Button("DIRECT3EHPENVY7Button", DeviceListElemeList);
                    fDIRECT3EHPENVY7Button.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT3EHPENVY7Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECT3EHPENVY7Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-3E-HP ENVY 7800 series");
                    fDIRECT3EHPENVY7Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"75430951-0adb-5682-dfff-5a2a85687958");
                }

                return fDIRECT3EHPENVY7Button;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT3EHPENVY7Text
        /// </summary>
        public Text DIRECT3EHPENVY7Text
        {
            get
            {
                if (null == fDIRECT3EHPENVY7Text)
                {
                    fDIRECT3EHPENVY7Text = new Text("DIRECT3EHPENVY7Text", DIRECT3EHPENVY7Button);
                    fDIRECT3EHPENVY7Text.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT3EHPENVY7Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECT3EHPENVY7Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-3E-HP ENVY 7800 series");
                    fDIRECT3EHPENVY7Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                }

                return fDIRECT3EHPENVY7Text;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup10Text
        /// </summary>
        public Text PrinterRichTextDup10Text
        {
            get
            {
                if (null == fPrinterRichTextDup10Text)
                {
                    fPrinterRichTextDup10Text = new Text("PrinterRichTextDup10Text", DIRECT3EHPENVY7Button);
                    fPrinterRichTextDup10Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup10Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup10Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup10Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                }

                return fPrinterRichTextDup10Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT49HPM577LButton
        /// </summary>
        public Button DIRECT49HPM577LButton
        {
            get
            {
                if (null == fDIRECT49HPM577LButton)
                {
                    fDIRECT49HPM577LButton = new Button("DIRECT49HPM577LButton", DeviceListElemeList);
                    fDIRECT49HPM577LButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT49HPM577LButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECT49HPM577LButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-49-HP M577 LaserJet");
                    fDIRECT49HPM577LButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"91d0c78a-f6c0-4165-bc2f-d85de2617049");
                }

                return fDIRECT49HPM577LButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT49HPM577LText
        /// </summary>
        public Text DIRECT49HPM577LText
        {
            get
            {
                if (null == fDIRECT49HPM577LText)
                {
                    fDIRECT49HPM577LText = new Text("DIRECT49HPM577LText", DIRECT49HPM577LButton);
                    fDIRECT49HPM577LText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT49HPM577LText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECT49HPM577LText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-49-HP M577 LaserJet");
                    fDIRECT49HPM577LText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                }

                return fDIRECT49HPM577LText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup11Text
        /// </summary>
        public Text PrinterRichTextDup11Text
        {
            get
            {
                if (null == fPrinterRichTextDup11Text)
                {
                    fPrinterRichTextDup11Text = new Text("PrinterRichTextDup11Text", DIRECT49HPM577LButton);
                    fPrinterRichTextDup11Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup11Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup11Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup11Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                }

                return fPrinterRichTextDup11Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT67HPPageWButton
        /// </summary>
        public Button DIRECT67HPPageWButton
        {
            get
            {
                if (null == fDIRECT67HPPageWButton)
                {
                    fDIRECT67HPPageWButton = new Button("DIRECT67HPPageWButton", DeviceListElemeList);
                    fDIRECT67HPPageWButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT67HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECT67HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-67-HP PageWide Pro 750");
                    fDIRECT67HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"b4ed1a8e-9c8b-5158-74fe-f7141ce41282");
                }

                return fDIRECT67HPPageWButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT67HPPageWText
        /// </summary>
        public Text DIRECT67HPPageWText
        {
            get
            {
                if (null == fDIRECT67HPPageWText)
                {
                    fDIRECT67HPPageWText = new Text("DIRECT67HPPageWText", DIRECT67HPPageWButton);
                    fDIRECT67HPPageWText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT67HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECT67HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-67-HP PageWide Pro 750");
                    fDIRECT67HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                }

                return fDIRECT67HPPageWText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup12Text
        /// </summary>
        public Text PrinterRichTextDup12Text
        {
            get
            {
                if (null == fPrinterRichTextDup12Text)
                {
                    fPrinterRichTextDup12Text = new Text("PrinterRichTextDup12Text", DIRECT67HPPageWButton);
                    fPrinterRichTextDup12Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup12Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup12Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup12Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                }

                return fPrinterRichTextDup12Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT81HPOfficButton
        /// </summary>
        public Button DIRECT81HPOfficButton
        {
            get
            {
                if (null == fDIRECT81HPOfficButton)
                {
                    fDIRECT81HPOfficButton = new Button("DIRECT81HPOfficButton", DeviceListElemeList);
                    fDIRECT81HPOfficButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT81HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECT81HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-81-HP OfficeJet Pro 7730");
                    fDIRECT81HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"71529048-bd7f-54a2-dc72-20d18998c6dd");
                }

                return fDIRECT81HPOfficButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT81HPOfficText
        /// </summary>
        public Text DIRECT81HPOfficText
        {
            get
            {
                if (null == fDIRECT81HPOfficText)
                {
                    fDIRECT81HPOfficText = new Text("DIRECT81HPOfficText", DIRECT81HPOfficButton);
                    fDIRECT81HPOfficText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT81HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECT81HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-81-HP OfficeJet Pro 7730");
                    fDIRECT81HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                }

                return fDIRECT81HPOfficText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup13Text
        /// </summary>
        public Text PrinterRichTextDup13Text
        {
            get
            {
                if (null == fPrinterRichTextDup13Text)
                {
                    fPrinterRichTextDup13Text = new Text("PrinterRichTextDup13Text", DIRECT81HPOfficButton);
                    fPrinterRichTextDup13Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup13Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup13Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup13Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                }

                return fPrinterRichTextDup13Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTb7HPM426LButton
        /// </summary>
        public Button DIRECTb7HPM426LButton
        {
            get
            {
                if (null == fDIRECTb7HPM426LButton)
                {
                    fDIRECTb7HPM426LButton = new Button("DIRECTb7HPM426LButton", DeviceListElemeList);
                    fDIRECTb7HPM426LButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTb7HPM426LButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECTb7HPM426LButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-b7-HP M426 LaserJet");
                    fDIRECTb7HPM426LButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"50484635-5757-3130-3138-1458d03acf17");
                }

                return fDIRECTb7HPM426LButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTb7HPM426LText
        /// </summary>
        public Text DIRECTb7HPM426LText
        {
            get
            {
                if (null == fDIRECTb7HPM426LText)
                {
                    fDIRECTb7HPM426LText = new Text("DIRECTb7HPM426LText", DIRECTb7HPM426LButton);
                    fDIRECTb7HPM426LText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTb7HPM426LText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECTb7HPM426LText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-b7-HP M426 LaserJet");
                    fDIRECTb7HPM426LText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                }

                return fDIRECTb7HPM426LText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup14Text
        /// </summary>
        public Text PrinterRichTextDup14Text
        {
            get
            {
                if (null == fPrinterRichTextDup14Text)
                {
                    fPrinterRichTextDup14Text = new Text("PrinterRichTextDup14Text", DIRECTb7HPM426LButton);
                    fPrinterRichTextDup14Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup14Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup14Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup14Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                }

                return fPrinterRichTextDup14Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTc9HPM281LButton
        /// </summary>
        public Button DIRECTc9HPM281LButton
        {
            get
            {
                if (null == fDIRECTc9HPM281LButton)
                {
                    fDIRECTc9HPM281LButton = new Button("DIRECTc9HPM281LButton", DeviceListElemeList);
                    fDIRECTc9HPM281LButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTc9HPM281LButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECTc9HPM281LButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-c9-HP M281 LaserJet");
                    fDIRECTc9HPM281LButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"564e3136-4a43-5037-3947-98e7f4077cb2");
                }

                return fDIRECTc9HPM281LButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTc9HPM281LText
        /// </summary>
        public Text DIRECTc9HPM281LText
        {
            get
            {
                if (null == fDIRECTc9HPM281LText)
                {
                    fDIRECTc9HPM281LText = new Text("DIRECTc9HPM281LText", DIRECTc9HPM281LButton);
                    fDIRECTc9HPM281LText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTc9HPM281LText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECTc9HPM281LText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-c9-HP M281 LaserJet");
                    fDIRECTc9HPM281LText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                }

                return fDIRECTc9HPM281LText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup15Text
        /// </summary>
        public Text PrinterRichTextDup15Text
        {
            get
            {
                if (null == fPrinterRichTextDup15Text)
                {
                    fPrinterRichTextDup15Text = new Text("PrinterRichTextDup15Text", DIRECTc9HPM281LButton);
                    fPrinterRichTextDup15Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup15Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup15Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup15Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                }

                return fPrinterRichTextDup15Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTDBHPM527LButton
        /// </summary>
        public Button DIRECTDBHPM527LButton
        {
            get
            {
                if (null == fDIRECTDBHPM527LButton)
                {
                    fDIRECTDBHPM527LButton = new Button("DIRECTDBHPM527LButton", DeviceListElemeList);
                    fDIRECTDBHPM527LButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTDBHPM527LButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECTDBHPM527LButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-DB-HP M527 LaserJet Flow");
                    fDIRECTDBHPM527LButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"a803a21f-e69d-4360-a22c-d85de26171db");
                }

                return fDIRECTDBHPM527LButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTDBHPM527LText
        /// </summary>
        public Text DIRECTDBHPM527LText
        {
            get
            {
                if (null == fDIRECTDBHPM527LText)
                {
                    fDIRECTDBHPM527LText = new Text("DIRECTDBHPM527LText", DIRECTDBHPM527LButton);
                    fDIRECTDBHPM527LText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTDBHPM527LText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECTDBHPM527LText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-DB-HP M527 LaserJet Flow");
                    fDIRECTDBHPM527LText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                }

                return fDIRECTDBHPM527LText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup16Text
        /// </summary>
        public Text PrinterRichTextDup16Text
        {
            get
            {
                if (null == fPrinterRichTextDup16Text)
                {
                    fPrinterRichTextDup16Text = new Text("PrinterRichTextDup16Text", DIRECTDBHPM527LButton);
                    fPrinterRichTextDup16Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup16Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup16Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup16Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                }

                return fPrinterRichTextDup16Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTE3HPPageWButton
        /// </summary>
        public Button DIRECTE3HPPageWButton
        {
            get
            {
                if (null == fDIRECTE3HPPageWButton)
                {
                    fDIRECTE3HPPageWButton = new Button("DIRECTE3HPPageWButton", DeviceListElemeList);
                    fDIRECTE3HPPageWButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTE3HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECTE3HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-E3-HP PageWide Pro MFP");
                    fDIRECTE3HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"32b62d16-c61b-5145-7429-5c423f53c9bb");
                }

                return fDIRECTE3HPPageWButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTE3HPPageWText
        /// </summary>
        public Text DIRECTE3HPPageWText
        {
            get
            {
                if (null == fDIRECTE3HPPageWText)
                {
                    fDIRECTE3HPPageWText = new Text("DIRECTE3HPPageWText", DIRECTE3HPPageWButton);
                    fDIRECTE3HPPageWText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTE3HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECTE3HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-E3-HP PageWide Pro MFP");
                    fDIRECTE3HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                }

                return fDIRECTE3HPPageWText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup17Text
        /// </summary>
        public Text PrinterRichTextDup17Text
        {
            get
            {
                if (null == fPrinterRichTextDup17Text)
                {
                    fPrinterRichTextDup17Text = new Text("PrinterRichTextDup17Text", DIRECTE3HPPageWButton);
                    fPrinterRichTextDup17Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup17Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup17Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup17Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                }

                return fPrinterRichTextDup17Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTF4HPM606LButton
        /// </summary>
        public Button DIRECTF4HPM606LButton
        {
            get
            {
                if (null == fDIRECTF4HPM606LButton)
                {
                    fDIRECTF4HPM606LButton = new Button("DIRECTF4HPM606LButton", DeviceListElemeList);
                    fDIRECTF4HPM606LButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTF4HPM606LButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECTF4HPM606LButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-F4-HP M606 LaserJet");
                    fDIRECTF4HPM606LButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"10a974a9-404d-4dcb-a58d-9cd21e990af4");
                }

                return fDIRECTF4HPM606LButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTF4HPM606LText
        /// </summary>
        public Text DIRECTF4HPM606LText
        {
            get
            {
                if (null == fDIRECTF4HPM606LText)
                {
                    fDIRECTF4HPM606LText = new Text("DIRECTF4HPM606LText", DIRECTF4HPM606LButton);
                    fDIRECTF4HPM606LText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTF4HPM606LText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECTF4HPM606LText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-F4-HP M606 LaserJet");
                    fDIRECTF4HPM606LText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                }

                return fDIRECTF4HPM606LText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup18Text
        /// </summary>
        public Text PrinterRichTextDup18Text
        {
            get
            {
                if (null == fPrinterRichTextDup18Text)
                {
                    fPrinterRichTextDup18Text = new Text("PrinterRichTextDup18Text", DIRECTF4HPM606LButton);
                    fPrinterRichTextDup18Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup18Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup18Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup18Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                }

                return fPrinterRichTextDup18Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTF4HPOfficButton
        /// </summary>
        public Button DIRECTF4HPOfficButton
        {
            get
            {
                if (null == fDIRECTF4HPOfficButton)
                {
                    fDIRECTF4HPOfficButton = new Button("DIRECTF4HPOfficButton", DeviceListElemeList);
                    fDIRECTF4HPOfficButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTF4HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECTF4HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-F4-HP OfficeJet Pro 8740");
                    fDIRECTF4HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"40ddb0a9-36be-5fad-e655-f15a23750782");
                }

                return fDIRECTF4HPOfficButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTF4HPOfficText
        /// </summary>
        public Text DIRECTF4HPOfficText
        {
            get
            {
                if (null == fDIRECTF4HPOfficText)
                {
                    fDIRECTF4HPOfficText = new Text("DIRECTF4HPOfficText", DIRECTF4HPOfficButton);
                    fDIRECTF4HPOfficText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTF4HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECTF4HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-F4-HP OfficeJet Pro 8740");
                    fDIRECTF4HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                }

                return fDIRECTF4HPOfficText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup19Text
        /// </summary>
        public Text PrinterRichTextDup19Text
        {
            get
            {
                if (null == fPrinterRichTextDup19Text)
                {
                    fPrinterRichTextDup19Text = new Text("PrinterRichTextDup19Text", DIRECTF4HPOfficButton);
                    fPrinterRichTextDup19Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup19Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup19Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup19Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                }

                return fPrinterRichTextDup19Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTF7HPDeskJButton
        /// </summary>
        public Button DIRECTF7HPDeskJButton
        {
            get
            {
                if (null == fDIRECTF7HPDeskJButton)
                {
                    fDIRECTF7HPDeskJButton = new Button("DIRECTF7HPDeskJButton", DeviceListElemeList);
                    fDIRECTF7HPDeskJButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTF7HPDeskJButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECTF7HPDeskJButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-F7-HP DeskJet 3700 series");
                    fDIRECTF7HPDeskJButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"49cde15d-624e-596b-d489-9f6c2d8c6e58");
                }

                return fDIRECTF7HPDeskJButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTF7HPDeskJText
        /// </summary>
        public Text DIRECTF7HPDeskJText
        {
            get
            {
                if (null == fDIRECTF7HPDeskJText)
                {
                    fDIRECTF7HPDeskJText = new Text("DIRECTF7HPDeskJText", DIRECTF7HPDeskJButton);
                    fDIRECTF7HPDeskJText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTF7HPDeskJText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECTF7HPDeskJText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-F7-HP DeskJet 3700 series");
                    fDIRECTF7HPDeskJText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                }

                return fDIRECTF7HPDeskJText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup20Text
        /// </summary>
        public Text PrinterRichTextDup20Text
        {
            get
            {
                if (null == fPrinterRichTextDup20Text)
                {
                    fPrinterRichTextDup20Text = new Text("PrinterRichTextDup20Text", DIRECTF7HPDeskJButton);
                    fPrinterRichTextDup20Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup20Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup20Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup20Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                }

                return fPrinterRichTextDup20Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTFCHPOfficButton
        /// </summary>
        public Button DIRECTFCHPOfficButton
        {
            get
            {
                if (null == fDIRECTFCHPOfficButton)
                {
                    fDIRECTFCHPOfficButton = new Button("DIRECTFCHPOfficButton", DeviceListElemeList);
                    fDIRECTFCHPOfficButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTFCHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECTFCHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-FC-HP OfficeJet Pro 7720");
                    fDIRECTFCHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8f0ed32b-6b5c-55e0-e892-b1c6e834efe6");
                }

                return fDIRECTFCHPOfficButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTFCHPOfficText
        /// </summary>
        public Text DIRECTFCHPOfficText
        {
            get
            {
                if (null == fDIRECTFCHPOfficText)
                {
                    fDIRECTFCHPOfficText = new Text("DIRECTFCHPOfficText", DIRECTFCHPOfficButton);
                    fDIRECTFCHPOfficText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTFCHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECTFCHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-FC-HP OfficeJet Pro 7720");
                    fDIRECTFCHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                }

                return fDIRECTFCHPOfficText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup21Text
        /// </summary>
        public Text PrinterRichTextDup21Text
        {
            get
            {
                if (null == fPrinterRichTextDup21Text)
                {
                    fPrinterRichTextDup21Text = new Text("PrinterRichTextDup21Text", DIRECTFCHPOfficButton);
                    fPrinterRichTextDup21Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup21Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup21Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup21Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                }

                return fPrinterRichTextDup21Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTa8HPM181LButton
        /// </summary>
        public Button DIRECTa8HPM181LButton
        {
            get
            {
                if (null == fDIRECTa8HPM181LButton)
                {
                    fDIRECTa8HPM181LButton = new Button("DIRECTa8HPM181LButton", DeviceListElemeList);
                    fDIRECTa8HPM181LButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTa8HPM181LButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECTa8HPM181LButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-a8-HP M181 LaserJet");
                    fDIRECTa8HPM181LButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"564e4331-3353-5730-3534-ec8eb5be1ca5");
                }

                return fDIRECTa8HPM181LButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTa8HPM181LText
        /// </summary>
        public Text DIRECTa8HPM181LText
        {
            get
            {
                if (null == fDIRECTa8HPM181LText)
                {
                    fDIRECTa8HPM181LText = new Text("DIRECTa8HPM181LText", DIRECTa8HPM181LButton);
                    fDIRECTa8HPM181LText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTa8HPM181LText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECTa8HPM181LText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-a8-HP M181 LaserJet");
                    fDIRECTa8HPM181LText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                }

                return fDIRECTa8HPM181LText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup22Text
        /// </summary>
        public Text PrinterRichTextDup22Text
        {
            get
            {
                if (null == fPrinterRichTextDup22Text)
                {
                    fPrinterRichTextDup22Text = new Text("PrinterRichTextDup22Text", DIRECTa8HPM181LButton);
                    fPrinterRichTextDup22Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup22Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup22Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup22Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                }

                return fPrinterRichTextDup22Text;
            }
        }

        /// <summary>
        /// Gets Reference to TheprinterthatIHyperlink
        /// </summary>
        public Hyperlink TheprinterthatIHyperlink
        {
            get
            {
                if (null == fTheprinterthatIHyperlink)
                {
                    fTheprinterthatIHyperlink = new Hyperlink("TheprinterthatIHyperlink", ElementeClassicPane);
                    fTheprinterthatIHyperlink.UIMap.Scope = UIASeachScope.Children;
                    fTheprinterthatIHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fTheprinterthatIHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"The printer that I want isn't listed");
                    fTheprinterthatIHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eHelpLink");
                }

                return fTheprinterthatIHyperlink;
            }
        }

        /// <summary>
        /// Gets Reference to NextCCPushButtoDup1Button
        /// </summary>
        public Button NextCCPushButtoDup1Button
        {
            get
            {
                if (null == fNextCCPushButtoDup1Button)
                {
                    fNextCCPushButtoDup1Button = new Button("NextCCPushButtoDup1Button", HWNDElementdialPane);
                    fNextCCPushButtoDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fNextCCPushButtoDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCPushButton");
                    fNextCCPushButtoDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Next");
                    fNextCCPushButtoDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"nextbutton");
                }

                return fNextCCPushButtoDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to CancelCCPushButDup1Button
        /// </summary>
        public Button CancelCCPushButDup1Button
        {
            get
            {
                if (null == fCancelCCPushButDup1Button)
                {
                    fCancelCCPushButDup1Button = new Button("CancelCCPushButDup1Button", HWNDElementdialPane);
                    fCancelCCPushButDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelCCPushButDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCPushButton");
                    fCancelCCPushButDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                    fCancelCCPushButDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cancelbutton");
                }

                return fCancelCCPushButDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to AddadeviceTitleBar
        /// </summary>
        public TitleBar AddadeviceTitleBar
        {
            get
            {
                if (null == fAddadeviceTitleBar)
                {
                    fAddadeviceTitleBar = new TitleBar("AddadeviceTitleBar", AddadeviceNativWindow);
                    fAddadeviceTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fAddadeviceTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a device");
                    fAddadeviceTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                }

                return fAddadeviceTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemMenuBarSyDup1MenuBar
        /// </summary>
        public MenuBar SystemMenuBarSyDup1MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup1MenuBar)
                {
                    fSystemMenuBarSyDup1MenuBar = new MenuBar("SystemMenuBarSyDup1MenuBar", AddadeviceTitleBar);
                    fSystemMenuBarSyDup1MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup1MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                    fSystemMenuBarSyDup1MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                }

                return fSystemMenuBarSyDup1MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemItem1I1XMenuItem
        /// </summary>
        public MenuItem SystemItem1I1XMenuItem
        {
            get
            {
                if (null == fSystemItem1I1XMenuItem)
                {
                    fSystemItem1I1XMenuItem = new MenuItem("SystemItem1I1XMenuItem", SystemMenuBarSyDup1MenuBar);
                    fSystemItem1I1XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I1XMenuItem.UIMap.Index = 1;
                    fSystemItem1I1XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                    fSystemItem1I1XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                }

                return fSystemItem1I1XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to MinimizeMinimizButton
        /// </summary>
        public Button MinimizeMinimizButton
        {
            get
            {
                if (null == fMinimizeMinimizButton)
                {
                    fMinimizeMinimizButton = new Button("MinimizeMinimizButton", AddadeviceTitleBar);
                    fMinimizeMinimizButton.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                    fMinimizeMinimizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                }

                return fMinimizeMinimizButton;
            }
        }

        /// <summary>
        /// Gets Reference to MaximizeMaximizButton
        /// </summary>
        public Button MaximizeMaximizButton
        {
            get
            {
                if (null == fMaximizeMaximizButton)
                {
                    fMaximizeMaximizButton = new Button("MaximizeMaximizButton", AddadeviceTitleBar);
                    fMaximizeMaximizButton.UIMap.Scope = UIASeachScope.Children;
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximize");
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Maximize");
                }

                return fMaximizeMaximizButton;
            }
        }

        /// <summary>
        /// Gets Reference to CloseCloseDup1Button
        /// </summary>
        public Button CloseCloseDup1Button
        {
            get
            {
                if (null == fCloseCloseDup1Button)
                {
                    fCloseCloseDup1Button = new Button("CloseCloseDup1Button", AddadeviceTitleBar);
                    fCloseCloseDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                    fCloseCloseDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                }

                return fCloseCloseDup1Button;
            }
        }
    }
}

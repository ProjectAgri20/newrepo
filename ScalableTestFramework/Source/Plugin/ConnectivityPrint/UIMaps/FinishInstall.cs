//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------

namespace HP.ScalableTest.Plugin.ConnectivityPrint.UIMaps
{
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class FinishInstall
    {
        /// <summary>
        /// Backing field for AddadeviceNativWindow property
        /// </summary>
        private Window fAddadeviceNativWindow;

        /// <summary>
        /// Backing field for AddPrinterNativWindow property
        /// </summary>
        private Window fAddPrinterNativWindow;

        /// <summary>
        /// Backing field for YouvesuccessfulPane property
        /// </summary>
        private Pane fYouvesuccessfulPane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI0XDup0Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI0XDup0Pane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI1XDup0Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI1XDup0Pane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI2XDup0Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI2XDup0Pane;

        /// <summary>
        /// Backing field for BackButtonbackbButton property
        /// </summary>
        private Button fBackButtonbackbButton;

        /// <summary>
        /// Backing field for ElementwizardicDup0Image property
        /// </summary>
        private Image fElementwizardicDup0Image;

        /// <summary>
        /// Backing field for AddPrinterElemeText property
        /// </summary>
        private Text fAddPrinterElemeText;

        /// <summary>
        /// Backing field for YouvesuccessfulText property
        /// </summary>
        private Text fYouvesuccessfulText;

        /// <summary>
        /// Backing field for InstallationcomPane property
        /// </summary>
        private Pane fInstallationcomPane;

        /// <summary>
        /// Backing field for SetasthedefaultCheckBox property
        /// </summary>
        private CheckBox fSetasthedefaultCheckBox;

        /// <summary>
        /// Backing field for TocheckifyourprText property
        /// </summary>
        private Text fTocheckifyourprText;

        /// <summary>
        /// Backing field for PrintatestpageBButton property
        /// </summary>
        private Button fPrintatestpageBButton;

        /// <summary>
        /// Backing field for FinishCCPushButButton property
        /// </summary>
        private Button fFinishCCPushButButton;

        /// <summary>
        /// Backing field for CancelCCPushButDup0Button property
        /// </summary>
        private Button fCancelCCPushButDup0Button;

        /// <summary>
        /// Backing field for AddPrinterTitleBar property
        /// </summary>
        private TitleBar fAddPrinterTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup0MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup0MenuBar;

        /// <summary>
        /// Backing field for SystemItem1I0XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I0XMenuItem;

        /// <summary>
        /// Backing field for CloseCloseDup0Button property
        /// </summary>
        private Button fCloseCloseDup0Button;

        /// <summary>
        /// Backing field for HWNDElementdialPane property
        /// </summary>
        private Pane fHWNDElementdialPane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI0XDup1Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI0XDup1Pane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI1XDup1Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI1XDup1Pane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI2XDup1Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI2XDup1Pane;

        /// <summary>
        /// Backing field for ElementwizardicDup1Image property
        /// </summary>
        private Image fElementwizardicDup1Image;

        /// <summary>
        /// Backing field for AddadeviceElemeText property
        /// </summary>
        private Text fAddadeviceElemeText;

        /// <summary>
        /// Backing field for ElementheadertiText property
        /// </summary>
        private Text fElementheadertiText;

        /// <summary>
        /// Backing field for XElement7F85930Pane property
        /// </summary>
        private Pane fXElement7F85930Pane;

        /// <summary>
        /// Backing field for XBabyPane property
        /// </summary>
        private Pane fXBabyPane;

        /// <summary>
        /// Backing field for ElementeClassicPane property
        /// </summary>
        private Pane fElementeClassicPane;

        /// <summary>
        /// Backing field for ChooseadeviceorText property
        /// </summary>
        private Text fChooseadeviceorText;

        /// <summary>
        /// Backing field for SelectadeviceElText property
        /// </summary>
        private Text fSelectadeviceElText;

        /// <summary>
        /// Backing field for VerticalCCVScroScrollBar property
        /// </summary>
        private ScrollBar fVerticalCCVScroScrollBar;

        /// <summary>
        /// Backing field for LineupButton property
        /// </summary>
        private Button fLineupButton;

        /// <summary>
        /// Backing field for PositionCustom property
        /// </summary>
        private Custom fPositionCustom;

        /// <summary>
        /// Backing field for PagedownButton property
        /// </summary>
        private Button fPagedownButton;

        /// <summary>
        /// Backing field for LinedownButton property
        /// </summary>
        private Button fLinedownButton;

        /// <summary>
        /// Backing field for DeviceListElemeList property
        /// </summary>
        private List fDeviceListElemeList;

        /// <summary>
        /// Backing field for NPI84D469HPDesiButton property
        /// </summary>
        private Button fNPI84D469HPDesiButton;

        /// <summary>
        /// Backing field for NPI84D469HPDesiText property
        /// </summary>
        private Text fNPI84D469HPDesiText;

        /// <summary>
        /// Backing field for PrinterRichTextDup0Text property
        /// </summary>
        private Text fPrinterRichTextDup0Text;

        /// <summary>
        /// Backing field for NPIC5D52BHPDesiButton property
        /// </summary>
        private Button fNPIC5D52BHPDesiButton;

        /// <summary>
        /// Backing field for NPIC5D52BHPDesiText property
        /// </summary>
        private Text fNPIC5D52BHPDesiText;

        /// <summary>
        /// Backing field for PrinterRichTextDup1Text property
        /// </summary>
        private Text fPrinterRichTextDup1Text;

        /// <summary>
        /// Backing field for DIRECT00HPIPsecButton property
        /// </summary>
        private Button fDIRECT00HPIPsecButton;

        /// <summary>
        /// Backing field for DIRECT00HPIPsecText property
        /// </summary>
        private Text fDIRECT00HPIPsecText;

        /// <summary>
        /// Backing field for PrinterRichTextDup2Text property
        /// </summary>
        private Text fPrinterRichTextDup2Text;

        /// <summary>
        /// Backing field for DIRECT1FHPPageWButton property
        /// </summary>
        private Button fDIRECT1FHPPageWButton;

        /// <summary>
        /// Backing field for DIRECT1FHPPageWText property
        /// </summary>
        private Text fDIRECT1FHPPageWText;

        /// <summary>
        /// Backing field for PrinterRichTextDup3Text property
        /// </summary>
        private Text fPrinterRichTextDup3Text;

        /// <summary>
        /// Backing field for DIRECT43HPENVYPButton property
        /// </summary>
        private Button fDIRECT43HPENVYPButton;

        /// <summary>
        /// Backing field for DIRECT21HPENVYPText property
        /// </summary>
        private Text fDIRECT21HPENVYPText;

        /// <summary>
        /// Backing field for PrinterRichTextDup4Text property
        /// </summary>
        private Text fPrinterRichTextDup4Text;

        /// <summary>
        /// Backing field for DIRECT49HPM577LButton property
        /// </summary>
        private Button fDIRECT49HPM577LButton;

        /// <summary>
        /// Backing field for DIRECT49HPM577LText property
        /// </summary>
        private Text fDIRECT49HPM577LText;

        /// <summary>
        /// Backing field for PrinterRichTextDup5Text property
        /// </summary>
        private Text fPrinterRichTextDup5Text;

        /// <summary>
        /// Backing field for DIRECT5CHPWiFiDButton property
        /// </summary>
        private Button fDIRECT5CHPWiFiDButton;

        /// <summary>
        /// Backing field for DIRECT5CHPWiFiDText property
        /// </summary>
        private Text fDIRECT5CHPWiFiDText;

        /// <summary>
        /// Backing field for PrinterRichTextDup6Text property
        /// </summary>
        private Text fPrinterRichTextDup6Text;

        /// <summary>
        /// Backing field for DIRECT6CHPOfficButton property
        /// </summary>
        private Button fDIRECT6CHPOfficButton;

        /// <summary>
        /// Backing field for DIRECT6CHPOfficText property
        /// </summary>
        private Text fDIRECT6CHPOfficText;

        /// <summary>
        /// Backing field for PrinterRichTextDup7Text property
        /// </summary>
        private Text fPrinterRichTextDup7Text;

        /// <summary>
        /// Backing field for DIRECT7FHPaBlueButton property
        /// </summary>
        private Button fDIRECT7FHPaBlueButton;

        /// <summary>
        /// Backing field for DIRECT7FHPaRichText property
        /// </summary>
        private Text fDIRECT7FHPaRichText;

        /// <summary>
        /// Backing field for PrinterRichTextDup8Text property
        /// </summary>
        private Text fPrinterRichTextDup8Text;

        /// <summary>
        /// Backing field for DIRECTF4HPM606LButton property
        /// </summary>
        private Button fDIRECTF4HPM606LButton;

        /// <summary>
        /// Backing field for DIRECTF4HPM606LText property
        /// </summary>
        private Text fDIRECTF4HPM606LText;

        /// <summary>
        /// Backing field for PrinterRichTextDup9Text property
        /// </summary>
        private Text fPrinterRichTextDup9Text;

        /// <summary>
        /// Backing field for DIRECTF4HPOfficButton property
        /// </summary>
        private Button fDIRECTF4HPOfficButton;

        /// <summary>
        /// Backing field for DIRECTF4HPOfficText property
        /// </summary>
        private Text fDIRECTF4HPOfficText;

        /// <summary>
        /// Backing field for PrinterRichTextDup10Text property
        /// </summary>
        private Text fPrinterRichTextDup10Text;

        /// <summary>
        /// Backing field for DIRECTFAHPOfficButton property
        /// </summary>
        private Button fDIRECTFAHPOfficButton;

        /// <summary>
        /// Backing field for DIRECTFAHPOfficText property
        /// </summary>
        private Text fDIRECTFAHPOfficText;

        /// <summary>
        /// Backing field for PrinterRichTextDup11Text property
        /// </summary>
        private Text fPrinterRichTextDup11Text;

        /// <summary>
        /// Backing field for DIRECTc9HPM281LButton property
        /// </summary>
        private Button fDIRECTc9HPM281LButton;

        /// <summary>
        /// Backing field for DIRECTc9HPM281LText property
        /// </summary>
        private Text fDIRECTc9HPM281LText;

        /// <summary>
        /// Backing field for PrinterRichTextDup12Text property
        /// </summary>
        private Text fPrinterRichTextDup12Text;

        /// <summary>
        /// Backing field for DIRECTFCHPOfficButton property
        /// </summary>
        private Button fDIRECTFCHPOfficButton;

        /// <summary>
        /// Backing field for DIRECTFCHPOfficText property
        /// </summary>
        private Text fDIRECTFCHPOfficText;

        /// <summary>
        /// Backing field for PrinterRichTextDup13Text property
        /// </summary>
        private Text fPrinterRichTextDup13Text;

        /// <summary>
        /// Backing field for TheprinterthatIHyperlink property
        /// </summary>
        private Hyperlink fTheprinterthatIHyperlink;

        /// <summary>
        /// Backing field for NextCCPushButtoButton property
        /// </summary>
        private Button fNextCCPushButtoButton;

        /// <summary>
        /// Backing field for CancelCCPushButDup1Button property
        /// </summary>
        private Button fCancelCCPushButDup1Button;

        /// <summary>
        /// Backing field for AddadeviceTitleBar property
        /// </summary>
        private TitleBar fAddadeviceTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup1MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup1MenuBar;

        /// <summary>
        /// Backing field for SystemItem1I1XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I1XMenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizButton property
        /// </summary>
        private Button fMinimizeMinimizButton;

        /// <summary>
        /// Backing field for MaximizeMaximizButton property
        /// </summary>
        private Button fMaximizeMaximizButton;

        /// <summary>
        /// Backing field for CloseCloseDup1Button property
        /// </summary>
        private Button fCloseCloseDup1Button;

        /// <summary>
        /// Initializes a new instance of the <see cref="FinishInstall"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public FinishInstall(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FinishInstall"/> class using the default UIAFramework.
        /// </summary>
        public FinishInstall()
        {
            Desktop = new Desktop();
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to AddadeviceNativWindow
        /// </summary>
        public Window AddadeviceNativWindow
        {
            get
            {
                if (null == fAddadeviceNativWindow)
                {
                    fAddadeviceNativWindow = new Window("AddadeviceNativWindow", Desktop);
                    fAddadeviceNativWindow.UIMap.Scope = UIASeachScope.Children;
                    fAddadeviceNativWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NativeHWNDHost");
                    fAddadeviceNativWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a device");
                }

                return fAddadeviceNativWindow;
            }
        }

        /// <summary>
        /// Gets Reference to AddPrinterNativWindow
        /// </summary>
        public Window AddPrinterNativWindow
        {
            get
            {
                if (null == fAddPrinterNativWindow)
                {
                    fAddPrinterNativWindow = new Window("AddPrinterNativWindow", AddadeviceNativWindow);
                    fAddPrinterNativWindow.UIMap.Scope = UIASeachScope.Children;
                    fAddPrinterNativWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NativeHWNDHost");
                    fAddPrinterNativWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Printer");
                }

                return fAddPrinterNativWindow;
            }
        }

        /// <summary>
        /// Gets Reference to YouvesuccessfulPane
        /// </summary>
        public Pane YouvesuccessfulPane
        {
            get
            {
                if (null == fYouvesuccessfulPane)
                {
                    fYouvesuccessfulPane = new Pane("YouvesuccessfulPane", AddPrinterNativWindow);
                    fYouvesuccessfulPane.UIMap.Scope = UIASeachScope.Children;
                    fYouvesuccessfulPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"dialogroot");
                    fYouvesuccessfulPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"HWNDElement");
                    fYouvesuccessfulPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"You’ve successfully added NPI077CB2 on http://15.77.231.78:80");
                }

                return fYouvesuccessfulPane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI0XDup0Pane
        /// </summary>
        public Pane CtrlNotifySinkI0XDup0Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI0XDup0Pane)
                {
                    fCtrlNotifySinkI0XDup0Pane = new Pane("CtrlNotifySinkI0XDup0Pane", YouvesuccessfulPane);
                    fCtrlNotifySinkI0XDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI0XDup0Pane.UIMap.Index = 0;
                    fCtrlNotifySinkI0XDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI0XDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI1XDup0Pane
        /// </summary>
        public Pane CtrlNotifySinkI1XDup0Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI1XDup0Pane)
                {
                    fCtrlNotifySinkI1XDup0Pane = new Pane("CtrlNotifySinkI1XDup0Pane", YouvesuccessfulPane);
                    fCtrlNotifySinkI1XDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI1XDup0Pane.UIMap.Index = 1;
                    fCtrlNotifySinkI1XDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI1XDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI2XDup0Pane
        /// </summary>
        public Pane CtrlNotifySinkI2XDup0Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI2XDup0Pane)
                {
                    fCtrlNotifySinkI2XDup0Pane = new Pane("CtrlNotifySinkI2XDup0Pane", YouvesuccessfulPane);
                    fCtrlNotifySinkI2XDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI2XDup0Pane.UIMap.Index = 2;
                    fCtrlNotifySinkI2XDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI2XDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to BackButtonbackbButton
        /// </summary>
        public Button BackButtonbackbButton
        {
            get
            {
                if (null == fBackButtonbackbButton)
                {
                    fBackButtonbackbButton = new Button("BackButtonbackbButton", YouvesuccessfulPane);
                    fBackButtonbackbButton.UIMap.Scope = UIASeachScope.Children;
                    fBackButtonbackbButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"backbutton");
                    fBackButtonbackbButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fBackButtonbackbButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Back");
                }

                return fBackButtonbackbButton;
            }
        }

        /// <summary>
        /// Gets Reference to ElementwizardicDup0Image
        /// </summary>
        public Image ElementwizardicDup0Image
        {
            get
            {
                if (null == fElementwizardicDup0Image)
                {
                    fElementwizardicDup0Image = new Image("ElementwizardicDup0Image", YouvesuccessfulPane);
                    fElementwizardicDup0Image.UIMap.Scope = UIASeachScope.Children;
                    fElementwizardicDup0Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"wizardicon");
                    fElementwizardicDup0Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fElementwizardicDup0Image;
            }
        }

        /// <summary>
        /// Gets Reference to AddPrinterElemeText
        /// </summary>
        public Text AddPrinterElemeText
        {
            get
            {
                if (null == fAddPrinterElemeText)
                {
                    fAddPrinterElemeText = new Text("AddPrinterElemeText", YouvesuccessfulPane);
                    fAddPrinterElemeText.UIMap.Scope = UIASeachScope.Children;
                    fAddPrinterElemeText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"wizardtitle");
                    fAddPrinterElemeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fAddPrinterElemeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Printer");
                }

                return fAddPrinterElemeText;
            }
        }

        /// <summary>
        /// Gets Reference to YouvesuccessfulText
        /// </summary>
        public Text YouvesuccessfulText
        {
            get
            {
                if (null == fYouvesuccessfulText)
                {
                    fYouvesuccessfulText = new Text("YouvesuccessfulText", YouvesuccessfulPane);
                    fYouvesuccessfulText.UIMap.Scope = UIASeachScope.Children;
                    fYouvesuccessfulText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"headertitle");
                    fYouvesuccessfulText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fYouvesuccessfulText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"You’ve successfully added NPI077CB2 on http://15.77.231.78:80");
                }

                return fYouvesuccessfulText;
            }
        }

        /// <summary>
        /// Gets Reference to InstallationcomPane
        /// </summary>
        public Pane InstallationcomPane
        {
            get
            {
                if (null == fInstallationcomPane)
                {
                    fInstallationcomPane = new Pane("InstallationcomPane", YouvesuccessfulPane);
                    fInstallationcomPane.UIMap.Scope = UIASeachScope.Children;
                    fInstallationcomPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"{96E3C467-F0E8-445B-AC0F-BC54402A40F2}");
                    fInstallationcomPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Win32PropSheetPageHost");
                    fInstallationcomPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Installation complete");
                }

                return fInstallationcomPane;
            }
        }

        /// <summary>
        /// Gets Reference to SetasthedefaultCheckBox
        /// </summary>
        public CheckBox SetasthedefaultCheckBox
        {
            get
            {
                if (null == fSetasthedefaultCheckBox)
                {
                    fSetasthedefaultCheckBox = new CheckBox("SetasthedefaultCheckBox", InstallationcomPane);
                    fSetasthedefaultCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fSetasthedefaultCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9020");
                    fSetasthedefaultCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fSetasthedefaultCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Set as the default printer");
                }

                return fSetasthedefaultCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to TocheckifyourprText
        /// </summary>
        public Text TocheckifyourprText
        {
            get
            {
                if (null == fTocheckifyourprText)
                {
                    fTocheckifyourprText = new Text("TocheckifyourprText", InstallationcomPane);
                    fTocheckifyourprText.UIMap.Scope = UIASeachScope.Children;
                    fTocheckifyourprText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9025");
                    fTocheckifyourprText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fTocheckifyourprText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"To check if your printer is working properly, or to see troubleshooting information for the printer, print a test page.");
                }

                return fTocheckifyourprText;
            }
        }

        /// <summary>
        /// Gets Reference to PrintatestpageBButton
        /// </summary>
        public Button PrintatestpageBButton
        {
            get
            {
                if (null == fPrintatestpageBButton)
                {
                    fPrintatestpageBButton = new Button("PrintatestpageBButton", InstallationcomPane);
                    fPrintatestpageBButton.UIMap.Scope = UIASeachScope.Children;
                    fPrintatestpageBButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9019");
                    fPrintatestpageBButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fPrintatestpageBButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Print a test page");
                }

                return fPrintatestpageBButton;
            }
        }

        /// <summary>
        /// Gets Reference to FinishCCPushButButton
        /// </summary>
        public Button FinishCCPushButButton
        {
            get
            {
                if (null == fFinishCCPushButButton)
                {
                    fFinishCCPushButButton = new Button("FinishCCPushButButton", YouvesuccessfulPane);
                    fFinishCCPushButButton.UIMap.Scope = UIASeachScope.Children;
                    fFinishCCPushButButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"finishbutton");
                    fFinishCCPushButButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCPushButton");
                    fFinishCCPushButButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Finish");
                }

                return fFinishCCPushButButton;
            }
        }

        /// <summary>
        /// Gets Reference to CancelCCPushButDup0Button
        /// </summary>
        public Button CancelCCPushButDup0Button
        {
            get
            {
                if (null == fCancelCCPushButDup0Button)
                {
                    fCancelCCPushButDup0Button = new Button("CancelCCPushButDup0Button", YouvesuccessfulPane);
                    fCancelCCPushButDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelCCPushButDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cancelbutton");
                    fCancelCCPushButDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCPushButton");
                    fCancelCCPushButDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelCCPushButDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to AddPrinterTitleBar
        /// </summary>
        public TitleBar AddPrinterTitleBar
        {
            get
            {
                if (null == fAddPrinterTitleBar)
                {
                    fAddPrinterTitleBar = new TitleBar("AddPrinterTitleBar", AddPrinterNativWindow);
                    fAddPrinterTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fAddPrinterTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fAddPrinterTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Printer");
                }

                return fAddPrinterTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemMenuBarSyDup0MenuBar
        /// </summary>
        public MenuBar SystemMenuBarSyDup0MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup0MenuBar)
                {
                    fSystemMenuBarSyDup0MenuBar = new MenuBar("SystemMenuBarSyDup0MenuBar", AddPrinterTitleBar);
                    fSystemMenuBarSyDup0MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyDup0MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemItem1I0XMenuItem
        /// </summary>
        public MenuItem SystemItem1I0XMenuItem
        {
            get
            {
                if (null == fSystemItem1I0XMenuItem)
                {
                    fSystemItem1I0XMenuItem = new MenuItem("SystemItem1I0XMenuItem", SystemMenuBarSyDup0MenuBar);
                    fSystemItem1I0XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I0XMenuItem.UIMap.Index = 0;
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1I0XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to CloseCloseDup0Button
        /// </summary>
        public Button CloseCloseDup0Button
        {
            get
            {
                if (null == fCloseCloseDup0Button)
                {
                    fCloseCloseDup0Button = new Button("CloseCloseDup0Button", AddPrinterTitleBar);
                    fCloseCloseDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to HWNDElementdialPane
        /// </summary>
        public Pane HWNDElementdialPane
        {
            get
            {
                if (null == fHWNDElementdialPane)
                {
                    fHWNDElementdialPane = new Pane("HWNDElementdialPane", AddadeviceNativWindow);
                    fHWNDElementdialPane.UIMap.Scope = UIASeachScope.Children;
                    fHWNDElementdialPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"dialogroot");
                    fHWNDElementdialPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"HWNDElement");
                }

                return fHWNDElementdialPane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI0XDup1Pane
        /// </summary>
        public Pane CtrlNotifySinkI0XDup1Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI0XDup1Pane)
                {
                    fCtrlNotifySinkI0XDup1Pane = new Pane("CtrlNotifySinkI0XDup1Pane", HWNDElementdialPane);
                    fCtrlNotifySinkI0XDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI0XDup1Pane.UIMap.Index = 0;
                    fCtrlNotifySinkI0XDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI0XDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI1XDup1Pane
        /// </summary>
        public Pane CtrlNotifySinkI1XDup1Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI1XDup1Pane)
                {
                    fCtrlNotifySinkI1XDup1Pane = new Pane("CtrlNotifySinkI1XDup1Pane", HWNDElementdialPane);
                    fCtrlNotifySinkI1XDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI1XDup1Pane.UIMap.Index = 1;
                    fCtrlNotifySinkI1XDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI1XDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI2XDup1Pane
        /// </summary>
        public Pane CtrlNotifySinkI2XDup1Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI2XDup1Pane)
                {
                    fCtrlNotifySinkI2XDup1Pane = new Pane("CtrlNotifySinkI2XDup1Pane", HWNDElementdialPane);
                    fCtrlNotifySinkI2XDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI2XDup1Pane.UIMap.Index = 2;
                    fCtrlNotifySinkI2XDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI2XDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to ElementwizardicDup1Image
        /// </summary>
        public Image ElementwizardicDup1Image
        {
            get
            {
                if (null == fElementwizardicDup1Image)
                {
                    fElementwizardicDup1Image = new Image("ElementwizardicDup1Image", HWNDElementdialPane);
                    fElementwizardicDup1Image.UIMap.Scope = UIASeachScope.Children;
                    fElementwizardicDup1Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"wizardicon");
                    fElementwizardicDup1Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fElementwizardicDup1Image;
            }
        }

        /// <summary>
        /// Gets Reference to AddadeviceElemeText
        /// </summary>
        public Text AddadeviceElemeText
        {
            get
            {
                if (null == fAddadeviceElemeText)
                {
                    fAddadeviceElemeText = new Text("AddadeviceElemeText", HWNDElementdialPane);
                    fAddadeviceElemeText.UIMap.Scope = UIASeachScope.Children;
                    fAddadeviceElemeText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"wizardtitle");
                    fAddadeviceElemeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fAddadeviceElemeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a device");
                }

                return fAddadeviceElemeText;
            }
        }

        /// <summary>
        /// Gets Reference to ElementheadertiText
        /// </summary>
        public Text ElementheadertiText
        {
            get
            {
                if (null == fElementheadertiText)
                {
                    fElementheadertiText = new Text("ElementheadertiText", HWNDElementdialPane);
                    fElementheadertiText.UIMap.Scope = UIASeachScope.Children;
                    fElementheadertiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"headertitle");
                    fElementheadertiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fElementheadertiText;
            }
        }

        /// <summary>
        /// Gets Reference to XElement7F85930Pane
        /// </summary>
        public Pane XElement7F85930Pane
        {
            get
            {
                if (null == fXElement7F85930Pane)
                {
                    fXElement7F85930Pane = new Pane("XElement7F85930Pane", HWNDElementdialPane);
                    fXElement7F85930Pane.UIMap.Scope = UIASeachScope.Children;
                    fXElement7F85930Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"{7F859301-9F47-4ED2-A90E-13C403CB974B}");
                    fXElement7F85930Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"XElement");
                }

                return fXElement7F85930Pane;
            }
        }

        /// <summary>
        /// Gets Reference to XBabyPane
        /// </summary>
        public Pane XBabyPane
        {
            get
            {
                if (null == fXBabyPane)
                {
                    fXBabyPane = new Pane("XBabyPane", XElement7F85930Pane);
                    fXBabyPane.UIMap.Scope = UIASeachScope.Children;
                    fXBabyPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"XBaby");
                }

                return fXBabyPane;
            }
        }

        /// <summary>
        /// Gets Reference to ElementeClassicPane
        /// </summary>
        public Pane ElementeClassicPane
        {
            get
            {
                if (null == fElementeClassicPane)
                {
                    fElementeClassicPane = new Pane("ElementeClassicPane", XBabyPane);
                    fElementeClassicPane.UIMap.Scope = UIASeachScope.Children;
                    fElementeClassicPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eClassicBody");
                    fElementeClassicPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fElementeClassicPane;
            }
        }

        /// <summary>
        /// Gets Reference to ChooseadeviceorText
        /// </summary>
        public Text ChooseadeviceorText
        {
            get
            {
                if (null == fChooseadeviceorText)
                {
                    fChooseadeviceorText = new Text("ChooseadeviceorText", ElementeClassicPane);
                    fChooseadeviceorText.UIMap.Scope = UIASeachScope.Children;
                    fChooseadeviceorText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eTitleText");
                    fChooseadeviceorText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fChooseadeviceorText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Choose a device or printer to add to this PC");
                }

                return fChooseadeviceorText;
            }
        }

        /// <summary>
        /// Gets Reference to SelectadeviceElText
        /// </summary>
        public Text SelectadeviceElText
        {
            get
            {
                if (null == fSelectadeviceElText)
                {
                    fSelectadeviceElText = new Text("SelectadeviceElText", ElementeClassicPane);
                    fSelectadeviceElText.UIMap.Scope = UIASeachScope.Children;
                    fSelectadeviceElText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eProgressText");
                    fSelectadeviceElText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fSelectadeviceElText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Select a device");
                }

                return fSelectadeviceElText;
            }
        }

        /// <summary>
        /// Gets Reference to VerticalCCVScroScrollBar
        /// </summary>
        public ScrollBar VerticalCCVScroScrollBar
        {
            get
            {
                if (null == fVerticalCCVScroScrollBar)
                {
                    fVerticalCCVScroScrollBar = new ScrollBar("VerticalCCVScroScrollBar", ElementeClassicPane);
                    fVerticalCCVScroScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fVerticalCCVScroScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                    fVerticalCCVScroScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCVScrollBar");
                    fVerticalCCVScroScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Vertical");
                }

                return fVerticalCCVScroScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to LineupButton
        /// </summary>
        public Button LineupButton
        {
            get
            {
                if (null == fLineupButton)
                {
                    fLineupButton = new Button("LineupButton", VerticalCCVScroScrollBar);
                    fLineupButton.UIMap.Scope = UIASeachScope.Children;
                    fLineupButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Line up");
                }

                return fLineupButton;
            }
        }

        /// <summary>
        /// Gets Reference to PositionCustom
        /// </summary>
        public Custom PositionCustom
        {
            get
            {
                if (null == fPositionCustom)
                {
                    fPositionCustom = new Custom("PositionCustom", VerticalCCVScroScrollBar);
                    fPositionCustom.UIMap.Scope = UIASeachScope.Children;
                    fPositionCustom.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Position");
                }

                return fPositionCustom;
            }
        }

        /// <summary>
        /// Gets Reference to PagedownButton
        /// </summary>
        public Button PagedownButton
        {
            get
            {
                if (null == fPagedownButton)
                {
                    fPagedownButton = new Button("PagedownButton", VerticalCCVScroScrollBar);
                    fPagedownButton.UIMap.Scope = UIASeachScope.Children;
                    fPagedownButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Page down");
                }

                return fPagedownButton;
            }
        }

        /// <summary>
        /// Gets Reference to LinedownButton
        /// </summary>
        public Button LinedownButton
        {
            get
            {
                if (null == fLinedownButton)
                {
                    fLinedownButton = new Button("LinedownButton", VerticalCCVScroScrollBar);
                    fLinedownButton.UIMap.Scope = UIASeachScope.Children;
                    fLinedownButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Line down");
                }

                return fLinedownButton;
            }
        }

        /// <summary>
        /// Gets Reference to DeviceListElemeList
        /// </summary>
        public List DeviceListElemeList
        {
            get
            {
                if (null == fDeviceListElemeList)
                {
                    fDeviceListElemeList = new List("DeviceListElemeList", ElementeClassicPane);
                    fDeviceListElemeList.UIMap.Scope = UIASeachScope.Children;
                    fDeviceListElemeList.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eDeviceList");
                    fDeviceListElemeList.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fDeviceListElemeList.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device List");
                }

                return fDeviceListElemeList;
            }
        }

        /// <summary>
        /// Gets Reference to NPI84D469HPDesiButton
        /// </summary>
        public Button NPI84D469HPDesiButton
        {
            get
            {
                if (null == fNPI84D469HPDesiButton)
                {
                    fNPI84D469HPDesiButton = new Button("NPI84D469HPDesiButton", DeviceListElemeList);
                    fNPI84D469HPDesiButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI84D469HPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"14404449-1a1c-b635-bd3b-009c0284d469");
                    fNPI84D469HPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fNPI84D469HPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI84D469 (HP Designjet T3500ps)");
                }

                return fNPI84D469HPDesiButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI84D469HPDesiText
        /// </summary>
        public Text NPI84D469HPDesiText
        {
            get
            {
                if (null == fNPI84D469HPDesiText)
                {
                    fNPI84D469HPDesiText = new Text("NPI84D469HPDesiText", NPI84D469HPDesiButton);
                    fNPI84D469HPDesiText.UIMap.Scope = UIASeachScope.Children;
                    fNPI84D469HPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI84D469HPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fNPI84D469HPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI84D469 (HP Designjet T3500ps)");
                }

                return fNPI84D469HPDesiText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup0Text
        /// </summary>
        public Text PrinterRichTextDup0Text
        {
            get
            {
                if (null == fPrinterRichTextDup0Text)
                {
                    fPrinterRichTextDup0Text = new Text("PrinterRichTextDup0Text", NPI84D469HPDesiButton);
                    fPrinterRichTextDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPIC5D52BHPDesiButton
        /// </summary>
        public Button NPIC5D52BHPDesiButton
        {
            get
            {
                if (null == fNPIC5D52BHPDesiButton)
                {
                    fNPIC5D52BHPDesiButton = new Button("NPIC5D52BHPDesiButton", DeviceListElemeList);
                    fNPIC5D52BHPDesiButton.UIMap.Scope = UIASeachScope.Children;
                    fNPIC5D52BHPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"00000000-0000-0000-0000-a0d3c1c5d52b");
                    fNPIC5D52BHPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fNPIC5D52BHPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIC5D52B (HP DesignJet T1700 PostScript)");
                }

                return fNPIC5D52BHPDesiButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPIC5D52BHPDesiText
        /// </summary>
        public Text NPIC5D52BHPDesiText
        {
            get
            {
                if (null == fNPIC5D52BHPDesiText)
                {
                    fNPIC5D52BHPDesiText = new Text("NPIC5D52BHPDesiText", NPIC5D52BHPDesiButton);
                    fNPIC5D52BHPDesiText.UIMap.Scope = UIASeachScope.Children;
                    fNPIC5D52BHPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPIC5D52BHPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fNPIC5D52BHPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIC5D52B (HP DesignJet T1700 PostScript)");
                }

                return fNPIC5D52BHPDesiText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup1Text
        /// </summary>
        public Text PrinterRichTextDup1Text
        {
            get
            {
                if (null == fPrinterRichTextDup1Text)
                {
                    fPrinterRichTextDup1Text = new Text("PrinterRichTextDup1Text", NPIC5D52BHPDesiButton);
                    fPrinterRichTextDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT00HPIPsecButton
        /// </summary>
        public Button DIRECT00HPIPsecButton
        {
            get
            {
                if (null == fDIRECT00HPIPsecButton)
                {
                    fDIRECT00HPIPsecButton = new Button("DIRECT00HPIPsecButton", DeviceListElemeList);
                    fDIRECT00HPIPsecButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT00HPIPsecButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1f48a927-5b27-5e52-f8b0-d46f806e4143");
                    fDIRECT00HPIPsecButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECT00HPIPsecButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-00-HP IPsec");
                }

                return fDIRECT00HPIPsecButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT00HPIPsecText
        /// </summary>
        public Text DIRECT00HPIPsecText
        {
            get
            {
                if (null == fDIRECT00HPIPsecText)
                {
                    fDIRECT00HPIPsecText = new Text("DIRECT00HPIPsecText", DIRECT00HPIPsecButton);
                    fDIRECT00HPIPsecText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT00HPIPsecText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECT00HPIPsecText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECT00HPIPsecText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-00-HP IPsec");
                }

                return fDIRECT00HPIPsecText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup2Text
        /// </summary>
        public Text PrinterRichTextDup2Text
        {
            get
            {
                if (null == fPrinterRichTextDup2Text)
                {
                    fPrinterRichTextDup2Text = new Text("PrinterRichTextDup2Text", DIRECT00HPIPsecButton);
                    fPrinterRichTextDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT1FHPPageWButton
        /// </summary>
        public Button DIRECT1FHPPageWButton
        {
            get
            {
                if (null == fDIRECT1FHPPageWButton)
                {
                    fDIRECT1FHPPageWButton = new Button("DIRECT1FHPPageWButton", DeviceListElemeList);
                    fDIRECT1FHPPageWButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT1FHPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"e636868f-dcd6-5202-fce4-f38c8abe52af");
                    fDIRECT1FHPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECT1FHPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-1F-HP PageWide Pro 477dw");
                }

                return fDIRECT1FHPPageWButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT1FHPPageWText
        /// </summary>
        public Text DIRECT1FHPPageWText
        {
            get
            {
                if (null == fDIRECT1FHPPageWText)
                {
                    fDIRECT1FHPPageWText = new Text("DIRECT1FHPPageWText", DIRECT1FHPPageWButton);
                    fDIRECT1FHPPageWText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT1FHPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECT1FHPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECT1FHPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-1F-HP PageWide Pro 477dw");
                }

                return fDIRECT1FHPPageWText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup3Text
        /// </summary>
        public Text PrinterRichTextDup3Text
        {
            get
            {
                if (null == fPrinterRichTextDup3Text)
                {
                    fPrinterRichTextDup3Text = new Text("PrinterRichTextDup3Text", DIRECT1FHPPageWButton);
                    fPrinterRichTextDup3Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup3Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT43HPENVYPButton
        /// </summary>
        public Button DIRECT43HPENVYPButton
        {
            get
            {
                if (null == fDIRECT43HPENVYPButton)
                {
                    fDIRECT43HPENVYPButton = new Button("DIRECT43HPENVYPButton", DeviceListElemeList);
                    fDIRECT43HPENVYPButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT43HPENVYPButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"75430951-0adb-5682-dfff-5a2a85687958");
                    fDIRECT43HPENVYPButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECT43HPENVYPButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-43-HP ENVY Photo 7800");
                }

                return fDIRECT43HPENVYPButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT21HPENVYPText
        /// </summary>
        public Text DIRECT21HPENVYPText
        {
            get
            {
                if (null == fDIRECT21HPENVYPText)
                {
                    fDIRECT21HPENVYPText = new Text("DIRECT21HPENVYPText", DIRECT43HPENVYPButton);
                    fDIRECT21HPENVYPText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT21HPENVYPText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECT21HPENVYPText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECT21HPENVYPText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-21-HP ENVY Photo 7800");
                }

                return fDIRECT21HPENVYPText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup4Text
        /// </summary>
        public Text PrinterRichTextDup4Text
        {
            get
            {
                if (null == fPrinterRichTextDup4Text)
                {
                    fPrinterRichTextDup4Text = new Text("PrinterRichTextDup4Text", DIRECT43HPENVYPButton);
                    fPrinterRichTextDup4Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup4Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT49HPM577LButton
        /// </summary>
        public Button DIRECT49HPM577LButton
        {
            get
            {
                if (null == fDIRECT49HPM577LButton)
                {
                    fDIRECT49HPM577LButton = new Button("DIRECT49HPM577LButton", DeviceListElemeList);
                    fDIRECT49HPM577LButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT49HPM577LButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"91d0c78a-f6c0-4165-bc2f-d85de2617049");
                    fDIRECT49HPM577LButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECT49HPM577LButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-49-HP M577 LaserJet");
                }

                return fDIRECT49HPM577LButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT49HPM577LText
        /// </summary>
        public Text DIRECT49HPM577LText
        {
            get
            {
                if (null == fDIRECT49HPM577LText)
                {
                    fDIRECT49HPM577LText = new Text("DIRECT49HPM577LText", DIRECT49HPM577LButton);
                    fDIRECT49HPM577LText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT49HPM577LText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECT49HPM577LText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECT49HPM577LText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-49-HP M577 LaserJet");
                }

                return fDIRECT49HPM577LText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup5Text
        /// </summary>
        public Text PrinterRichTextDup5Text
        {
            get
            {
                if (null == fPrinterRichTextDup5Text)
                {
                    fPrinterRichTextDup5Text = new Text("PrinterRichTextDup5Text", DIRECT49HPM577LButton);
                    fPrinterRichTextDup5Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup5Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup5Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup5Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup5Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT5CHPWiFiDButton
        /// </summary>
        public Button DIRECT5CHPWiFiDButton
        {
            get
            {
                if (null == fDIRECT5CHPWiFiDButton)
                {
                    fDIRECT5CHPWiFiDButton = new Button("DIRECT5CHPWiFiDButton", DeviceListElemeList);
                    fDIRECT5CHPWiFiDButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT5CHPWiFiDButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"69a19142-9e1e-5413-b353-a51af58e0f9d");
                    fDIRECT5CHPWiFiDButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECT5CHPWiFiDButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-5C-HP WiFiDirect123P57750");
                }

                return fDIRECT5CHPWiFiDButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT5CHPWiFiDText
        /// </summary>
        public Text DIRECT5CHPWiFiDText
        {
            get
            {
                if (null == fDIRECT5CHPWiFiDText)
                {
                    fDIRECT5CHPWiFiDText = new Text("DIRECT5CHPWiFiDText", DIRECT5CHPWiFiDButton);
                    fDIRECT5CHPWiFiDText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT5CHPWiFiDText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECT5CHPWiFiDText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECT5CHPWiFiDText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-5C-HP WiFiDirect123P57750");
                }

                return fDIRECT5CHPWiFiDText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup6Text
        /// </summary>
        public Text PrinterRichTextDup6Text
        {
            get
            {
                if (null == fPrinterRichTextDup6Text)
                {
                    fPrinterRichTextDup6Text = new Text("PrinterRichTextDup6Text", DIRECT5CHPWiFiDButton);
                    fPrinterRichTextDup6Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup6Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup6Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup6Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup6Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT6CHPOfficButton
        /// </summary>
        public Button DIRECT6CHPOfficButton
        {
            get
            {
                if (null == fDIRECT6CHPOfficButton)
                {
                    fDIRECT6CHPOfficButton = new Button("DIRECT6CHPOfficButton", DeviceListElemeList);
                    fDIRECT6CHPOfficButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT6CHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6bd80320-9bff-78e0-9fe3-fe2ac8afc5d0");
                    fDIRECT6CHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECT6CHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-6C-HP OfficeJet Pro 8730");
                }

                return fDIRECT6CHPOfficButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT6CHPOfficText
        /// </summary>
        public Text DIRECT6CHPOfficText
        {
            get
            {
                if (null == fDIRECT6CHPOfficText)
                {
                    fDIRECT6CHPOfficText = new Text("DIRECT6CHPOfficText", DIRECT6CHPOfficButton);
                    fDIRECT6CHPOfficText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT6CHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECT6CHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECT6CHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-6C-HP OfficeJet Pro 8730");
                }

                return fDIRECT6CHPOfficText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup7Text
        /// </summary>
        public Text PrinterRichTextDup7Text
        {
            get
            {
                if (null == fPrinterRichTextDup7Text)
                {
                    fPrinterRichTextDup7Text = new Text("PrinterRichTextDup7Text", DIRECT6CHPOfficButton);
                    fPrinterRichTextDup7Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup7Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup7Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup7Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup7Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT7FHPaBlueButton
        /// </summary>
        public Button DIRECT7FHPaBlueButton
        {
            get
            {
                if (null == fDIRECT7FHPaBlueButton)
                {
                    fDIRECT7FHPaBlueButton = new Button("DIRECT7FHPaBlueButton", DeviceListElemeList);
                    fDIRECT7FHPaBlueButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT7FHPaBlueButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"e2e9ca4b-5126-46e4-99c9-441ca879e17f");
                    fDIRECT7FHPaBlueButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECT7FHPaBlueButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-7F-HP a");
                }

                return fDIRECT7FHPaBlueButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT7FHPaRichText
        /// </summary>
        public Text DIRECT7FHPaRichText
        {
            get
            {
                if (null == fDIRECT7FHPaRichText)
                {
                    fDIRECT7FHPaRichText = new Text("DIRECT7FHPaRichText", DIRECT7FHPaBlueButton);
                    fDIRECT7FHPaRichText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT7FHPaRichText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECT7FHPaRichText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECT7FHPaRichText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-7F-HP a");
                }

                return fDIRECT7FHPaRichText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup8Text
        /// </summary>
        public Text PrinterRichTextDup8Text
        {
            get
            {
                if (null == fPrinterRichTextDup8Text)
                {
                    fPrinterRichTextDup8Text = new Text("PrinterRichTextDup8Text", DIRECT7FHPaBlueButton);
                    fPrinterRichTextDup8Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup8Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup8Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup8Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup8Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTF4HPM606LButton
        /// </summary>
        public Button DIRECTF4HPM606LButton
        {
            get
            {
                if (null == fDIRECTF4HPM606LButton)
                {
                    fDIRECTF4HPM606LButton = new Button("DIRECTF4HPM606LButton", DeviceListElemeList);
                    fDIRECTF4HPM606LButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTF4HPM606LButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"10a974a9-404d-4dcb-a58d-9cd21e990af4");
                    fDIRECTF4HPM606LButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECTF4HPM606LButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-F4-HP M606 LaserJet");
                }

                return fDIRECTF4HPM606LButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTF4HPM606LText
        /// </summary>
        public Text DIRECTF4HPM606LText
        {
            get
            {
                if (null == fDIRECTF4HPM606LText)
                {
                    fDIRECTF4HPM606LText = new Text("DIRECTF4HPM606LText", DIRECTF4HPM606LButton);
                    fDIRECTF4HPM606LText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTF4HPM606LText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECTF4HPM606LText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECTF4HPM606LText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-F4-HP M606 LaserJet");
                }

                return fDIRECTF4HPM606LText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup9Text
        /// </summary>
        public Text PrinterRichTextDup9Text
        {
            get
            {
                if (null == fPrinterRichTextDup9Text)
                {
                    fPrinterRichTextDup9Text = new Text("PrinterRichTextDup9Text", DIRECTF4HPM606LButton);
                    fPrinterRichTextDup9Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup9Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup9Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup9Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup9Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTF4HPOfficButton
        /// </summary>
        public Button DIRECTF4HPOfficButton
        {
            get
            {
                if (null == fDIRECTF4HPOfficButton)
                {
                    fDIRECTF4HPOfficButton = new Button("DIRECTF4HPOfficButton", DeviceListElemeList);
                    fDIRECTF4HPOfficButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTF4HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"40ddb0a9-36be-5fad-e655-f15a23750782");
                    fDIRECTF4HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECTF4HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-F4-HP OfficeJet Pro 8740");
                }

                return fDIRECTF4HPOfficButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTF4HPOfficText
        /// </summary>
        public Text DIRECTF4HPOfficText
        {
            get
            {
                if (null == fDIRECTF4HPOfficText)
                {
                    fDIRECTF4HPOfficText = new Text("DIRECTF4HPOfficText", DIRECTF4HPOfficButton);
                    fDIRECTF4HPOfficText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTF4HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECTF4HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECTF4HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-F4-HP OfficeJet Pro 8740");
                }

                return fDIRECTF4HPOfficText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup10Text
        /// </summary>
        public Text PrinterRichTextDup10Text
        {
            get
            {
                if (null == fPrinterRichTextDup10Text)
                {
                    fPrinterRichTextDup10Text = new Text("PrinterRichTextDup10Text", DIRECTF4HPOfficButton);
                    fPrinterRichTextDup10Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup10Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup10Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup10Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup10Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTFAHPOfficButton
        /// </summary>
        public Button DIRECTFAHPOfficButton
        {
            get
            {
                if (null == fDIRECTFAHPOfficButton)
                {
                    fDIRECTFAHPOfficButton = new Button("DIRECTFAHPOfficButton", DeviceListElemeList);
                    fDIRECTFAHPOfficButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTFAHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d82727b9-5823-53ee-0706-97e793a2bfab");
                    fDIRECTFAHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECTFAHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-FA-HP OfficeJet Pro 7720");
                }

                return fDIRECTFAHPOfficButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTFAHPOfficText
        /// </summary>
        public Text DIRECTFAHPOfficText
        {
            get
            {
                if (null == fDIRECTFAHPOfficText)
                {
                    fDIRECTFAHPOfficText = new Text("DIRECTFAHPOfficText", DIRECTFAHPOfficButton);
                    fDIRECTFAHPOfficText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTFAHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECTFAHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECTFAHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-FA-HP OfficeJet Pro 7720");
                }

                return fDIRECTFAHPOfficText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup11Text
        /// </summary>
        public Text PrinterRichTextDup11Text
        {
            get
            {
                if (null == fPrinterRichTextDup11Text)
                {
                    fPrinterRichTextDup11Text = new Text("PrinterRichTextDup11Text", DIRECTFAHPOfficButton);
                    fPrinterRichTextDup11Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup11Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup11Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup11Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup11Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTc9HPM281LButton
        /// </summary>
        public Button DIRECTc9HPM281LButton
        {
            get
            {
                if (null == fDIRECTc9HPM281LButton)
                {
                    fDIRECTc9HPM281LButton = new Button("DIRECTc9HPM281LButton", DeviceListElemeList);
                    fDIRECTc9HPM281LButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTc9HPM281LButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"564e3136-4a43-5037-3947-98e7f4077cb2");
                    fDIRECTc9HPM281LButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECTc9HPM281LButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-c9-HP M281 LaserJet");
                }

                return fDIRECTc9HPM281LButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTc9HPM281LText
        /// </summary>
        public Text DIRECTc9HPM281LText
        {
            get
            {
                if (null == fDIRECTc9HPM281LText)
                {
                    fDIRECTc9HPM281LText = new Text("DIRECTc9HPM281LText", DIRECTc9HPM281LButton);
                    fDIRECTc9HPM281LText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTc9HPM281LText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECTc9HPM281LText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECTc9HPM281LText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-c9-HP M281 LaserJet");
                }

                return fDIRECTc9HPM281LText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup12Text
        /// </summary>
        public Text PrinterRichTextDup12Text
        {
            get
            {
                if (null == fPrinterRichTextDup12Text)
                {
                    fPrinterRichTextDup12Text = new Text("PrinterRichTextDup12Text", DIRECTc9HPM281LButton);
                    fPrinterRichTextDup12Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup12Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup12Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup12Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup12Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTFCHPOfficButton
        /// </summary>
        public Button DIRECTFCHPOfficButton
        {
            get
            {
                if (null == fDIRECTFCHPOfficButton)
                {
                    fDIRECTFCHPOfficButton = new Button("DIRECTFCHPOfficButton", DeviceListElemeList);
                    fDIRECTFCHPOfficButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTFCHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8f0ed32b-6b5c-55e0-e892-b1c6e834efe6");
                    fDIRECTFCHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECTFCHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-FC-HP OfficeJet Pro 7720");
                }

                return fDIRECTFCHPOfficButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTFCHPOfficText
        /// </summary>
        public Text DIRECTFCHPOfficText
        {
            get
            {
                if (null == fDIRECTFCHPOfficText)
                {
                    fDIRECTFCHPOfficText = new Text("DIRECTFCHPOfficText", DIRECTFCHPOfficButton);
                    fDIRECTFCHPOfficText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTFCHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECTFCHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECTFCHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-FC-HP OfficeJet Pro 7720");
                }

                return fDIRECTFCHPOfficText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup13Text
        /// </summary>
        public Text PrinterRichTextDup13Text
        {
            get
            {
                if (null == fPrinterRichTextDup13Text)
                {
                    fPrinterRichTextDup13Text = new Text("PrinterRichTextDup13Text", DIRECTFCHPOfficButton);
                    fPrinterRichTextDup13Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup13Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup13Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup13Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup13Text;
            }
        }

        /// <summary>
        /// Gets Reference to TheprinterthatIHyperlink
        /// </summary>
        public Hyperlink TheprinterthatIHyperlink
        {
            get
            {
                if (null == fTheprinterthatIHyperlink)
                {
                    fTheprinterthatIHyperlink = new Hyperlink("TheprinterthatIHyperlink", ElementeClassicPane);
                    fTheprinterthatIHyperlink.UIMap.Scope = UIASeachScope.Children;
                    fTheprinterthatIHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eHelpLink");
                    fTheprinterthatIHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fTheprinterthatIHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"The printer that I want isn't listed");
                }

                return fTheprinterthatIHyperlink;
            }
        }

        /// <summary>
        /// Gets Reference to NextCCPushButtoButton
        /// </summary>
        public Button NextCCPushButtoButton
        {
            get
            {
                if (null == fNextCCPushButtoButton)
                {
                    fNextCCPushButtoButton = new Button("NextCCPushButtoButton", HWNDElementdialPane);
                    fNextCCPushButtoButton.UIMap.Scope = UIASeachScope.Children;
                    fNextCCPushButtoButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"nextbutton");
                    fNextCCPushButtoButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCPushButton");
                    fNextCCPushButtoButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Next");
                }

                return fNextCCPushButtoButton;
            }
        }

        /// <summary>
        /// Gets Reference to CancelCCPushButDup1Button
        /// </summary>
        public Button CancelCCPushButDup1Button
        {
            get
            {
                if (null == fCancelCCPushButDup1Button)
                {
                    fCancelCCPushButDup1Button = new Button("CancelCCPushButDup1Button", HWNDElementdialPane);
                    fCancelCCPushButDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelCCPushButDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cancelbutton");
                    fCancelCCPushButDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCPushButton");
                    fCancelCCPushButDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelCCPushButDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to AddadeviceTitleBar
        /// </summary>
        public TitleBar AddadeviceTitleBar
        {
            get
            {
                if (null == fAddadeviceTitleBar)
                {
                    fAddadeviceTitleBar = new TitleBar("AddadeviceTitleBar", AddadeviceNativWindow);
                    fAddadeviceTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fAddadeviceTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fAddadeviceTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a device");
                }

                return fAddadeviceTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemMenuBarSyDup1MenuBar
        /// </summary>
        public MenuBar SystemMenuBarSyDup1MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup1MenuBar)
                {
                    fSystemMenuBarSyDup1MenuBar = new MenuBar("SystemMenuBarSyDup1MenuBar", AddadeviceTitleBar);
                    fSystemMenuBarSyDup1MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup1MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyDup1MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyDup1MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemItem1I1XMenuItem
        /// </summary>
        public MenuItem SystemItem1I1XMenuItem
        {
            get
            {
                if (null == fSystemItem1I1XMenuItem)
                {
                    fSystemItem1I1XMenuItem = new MenuItem("SystemItem1I1XMenuItem", SystemMenuBarSyDup1MenuBar);
                    fSystemItem1I1XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I1XMenuItem.UIMap.Index = 1;
                    fSystemItem1I1XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1I1XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1I1XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to MinimizeMinimizButton
        /// </summary>
        public Button MinimizeMinimizButton
        {
            get
            {
                if (null == fMinimizeMinimizButton)
                {
                    fMinimizeMinimizButton = new Button("MinimizeMinimizButton", AddadeviceTitleBar);
                    fMinimizeMinimizButton.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                    fMinimizeMinimizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                }

                return fMinimizeMinimizButton;
            }
        }

        /// <summary>
        /// Gets Reference to MaximizeMaximizButton
        /// </summary>
        public Button MaximizeMaximizButton
        {
            get
            {
                if (null == fMaximizeMaximizButton)
                {
                    fMaximizeMaximizButton = new Button("MaximizeMaximizButton", AddadeviceTitleBar);
                    fMaximizeMaximizButton.UIMap.Scope = UIASeachScope.Children;
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Maximize");
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximize");
                }

                return fMaximizeMaximizButton;
            }
        }

        /// <summary>
        /// Gets Reference to CloseCloseDup1Button
        /// </summary>
        public Button CloseCloseDup1Button
        {
            get
            {
                if (null == fCloseCloseDup1Button)
                {
                    fCloseCloseDup1Button = new Button("CloseCloseDup1Button", AddadeviceTitleBar);
                    fCloseCloseDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseDup1Button;
            }
        }
    }
}

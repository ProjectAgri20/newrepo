//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------

namespace HP.ScalableTest.Plugin.ConnectivityPrint.UIMaps
{
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class SelectModel
    {
        /// <summary>
        /// Backing field for AddadeviceNativWindow property
        /// </summary>
        private Window fAddadeviceNativWindow;

        /// <summary>
        /// Backing field for AddPrinterNativWindow property
        /// </summary>
        private Window fAddPrinterNativWindow;

        /// <summary>
        /// Backing field for WindowsPrinterIWindow property
        /// </summary>
        private Window fWindowsPrinterIWindow;

        /// <summary>
        /// Backing field for AddPrinterWizarDup0Window property
        /// </summary>
        private Window fAddPrinterWizarDup0Window;

        /// <summary>
        /// Backing field for AddPrinterWizarDup1Window property
        /// </summary>
        private Window fAddPrinterWizarDup1Window;

        /// <summary>
        /// Backing field for SysListView3218DataGrid property
        /// </summary>
        private DataGrid fSysListView3218DataGrid;

        /// <summary>
        /// Backing field for HeaderSysHeaderHeader property
        /// </summary>
        private Header fHeaderSysHeaderHeader;

        /// <summary>
        /// Backing field for PrintersHeaderII0XHeaderItem property
        /// </summary>
        private HeaderItem fPrintersHeaderII0XHeaderItem;

        /// <summary>
        /// Backing field for HPColorLaserJetDup0DataItem property
        /// </summary>
        private DataItem fHPColorLaserJetDup0DataItem;

        /// <summary>
        /// Backing field for HPColorLaserJetDup0Text property
        /// </summary>
        private Text fHPColorLaserJetDup0Text;

        /// <summary>
        /// Backing field for HPColorLaserJetDup1DataItem property
        /// </summary>
        private DataItem fHPColorLaserJetDup1DataItem;

        /// <summary>
        /// Backing field for HPColorLaserJetDup1Text property
        /// </summary>
        private Text fHPColorLaserJetDup1Text;

        /// <summary>
        /// Backing field for RetrievingalistI0XImage property
        /// </summary>
        private Image fRetrievingalistI0XImage;

        /// <summary>
        /// Backing field for WindowsUpdateBuI0XButton property
        /// </summary>
        private Button fWindowsUpdateBuI0XButton;

        /// <summary>
        /// Backing field for HaveDiskButton1I0XButton property
        /// </summary>
        private Button fHaveDiskButton1I0XButton;

        /// <summary>
        /// Backing field for OKButton1I0XButton property
        /// </summary>
        private Button fOKButton1I0XButton;

        /// <summary>
        /// Backing field for CancelButton2I0XButton property
        /// </summary>
        private Button fCancelButton2I0XButton;

        /// <summary>
        /// Backing field for SelectthemanufaI0XDup0Text property
        /// </summary>
        private Text fSelectthemanufaI0XDup0Text;

        /// <summary>
        /// Backing field for SelectthemanufaI0XDup1Text property
        /// </summary>
        private Text fSelectthemanufaI0XDup1Text;

        /// <summary>
        /// Backing field for Static1854I0XImage property
        /// </summary>
        private Image fStatic1854I0XImage;

        /// <summary>
        /// Backing field for ThisdriverisnotText property
        /// </summary>
        private Text fThisdriverisnotText;

        /// <summary>
        /// Backing field for TellmewhydriverI0XHyperlink property
        /// </summary>
        private Hyperlink fTellmewhydriverI0XHyperlink;

        /// <summary>
        /// Backing field for AI0XHyperlink property
        /// </summary>
        private Hyperlink fAI0XHyperlink;

        /// <summary>
        /// Backing field for AddPrinterWizarI0XTitleBar property
        /// </summary>
        private TitleBar fAddPrinterWizarI0XTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyI0XMenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyI0XMenuBar;

        /// <summary>
        /// Backing field for SystemItem1I0XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I0XMenuItem;

        /// <summary>
        /// Backing field for ContexthelpHelpI0XButton property
        /// </summary>
        private Button fContexthelpHelpI0XButton;

        /// <summary>
        /// Backing field for CloseCloseI0XButton property
        /// </summary>
        private Button fCloseCloseI0XButton;

        /// <summary>
        /// Backing field for SysListView3215Dup0DataGrid property
        /// </summary>
        private DataGrid fSysListView3215Dup0DataGrid;

        /// <summary>
        /// Backing field for HeaderSysHeaderI0XHeader property
        /// </summary>
        private Header fHeaderSysHeaderI0XHeader;

        /// <summary>
        /// Backing field for ManufacturerHeaHeaderItem property
        /// </summary>
        private HeaderItem fManufacturerHeaHeaderItem;

        /// <summary>
        /// Backing field for VerticalScrollBI0XScrollBar property
        /// </summary>
        private ScrollBar fVerticalScrollBI0XScrollBar;

        /// <summary>
        /// Backing field for BackbysmallamouI0XButton property
        /// </summary>
        private Button fBackbysmallamouI0XButton;

        /// <summary>
        /// Backing field for BackbylargeamouI0XButton property
        /// </summary>
        private Button fBackbylargeamouI0XButton;

        /// <summary>
        /// Backing field for ThumbI0XThumb property
        /// </summary>
        private Thumb fThumbI0XThumb;

        /// <summary>
        /// Backing field for ForwardbylargeaI0XButton property
        /// </summary>
        private Button fForwardbylargeaI0XButton;

        /// <summary>
        /// Backing field for ForwardbysmallaI0XButton property
        /// </summary>
        private Button fForwardbysmallaI0XButton;

        /// <summary>
        /// Backing field for BrotherDataItem property
        /// </summary>
        private DataItem fBrotherDataItem;

        /// <summary>
        /// Backing field for BrotherText property
        /// </summary>
        private Text fBrotherText;

        /// <summary>
        /// Backing field for CanonDataItem property
        /// </summary>
        private DataItem fCanonDataItem;

        /// <summary>
        /// Backing field for CanonText property
        /// </summary>
        private Text fCanonText;

        /// <summary>
        /// Backing field for DellDataItem property
        /// </summary>
        private DataItem fDellDataItem;

        /// <summary>
        /// Backing field for DellText property
        /// </summary>
        private Text fDellText;

        /// <summary>
        /// Backing field for EastmanKodakComDataItem property
        /// </summary>
        private DataItem fEastmanKodakComDataItem;

        /// <summary>
        /// Backing field for EastmanKodakComText property
        /// </summary>
        private Text fEastmanKodakComText;

        /// <summary>
        /// Backing field for EPSONDataItem property
        /// </summary>
        private DataItem fEPSONDataItem;

        /// <summary>
        /// Backing field for EPSONText property
        /// </summary>
        private Text fEPSONText;

        /// <summary>
        /// Backing field for FujiXeroxDataItem property
        /// </summary>
        private DataItem fFujiXeroxDataItem;

        /// <summary>
        /// Backing field for FujiXeroxText property
        /// </summary>
        private Text fFujiXeroxText;

        /// <summary>
        /// Backing field for GenericDataItem property
        /// </summary>
        private DataItem fGenericDataItem;

        /// <summary>
        /// Backing field for GenericText property
        /// </summary>
        private Text fGenericText;

        /// <summary>
        /// Backing field for GestetnerDataItem property
        /// </summary>
        private DataItem fGestetnerDataItem;

        /// <summary>
        /// Backing field for GestetnerText property
        /// </summary>
        private Text fGestetnerText;

        /// <summary>
        /// Backing field for HPDataItem property
        /// </summary>
        private DataItem fHPDataItem;

        /// <summary>
        /// Backing field for HPText property
        /// </summary>
        private Text fHPText;

        /// <summary>
        /// Backing field for InfoPrintDataItem property
        /// </summary>
        private DataItem fInfoPrintDataItem;

        /// <summary>
        /// Backing field for InfoPrintText property
        /// </summary>
        private Text fInfoPrintText;

        /// <summary>
        /// Backing field for infotecDataItem property
        /// </summary>
        private DataItem finfotecDataItem;

        /// <summary>
        /// Backing field for infotecText property
        /// </summary>
        private Text finfotecText;

        /// <summary>
        /// Backing field for KONICAMINOLTADataItem property
        /// </summary>
        private DataItem fKONICAMINOLTADataItem;

        /// <summary>
        /// Backing field for KONICAMINOLTAText property
        /// </summary>
        private Text fKONICAMINOLTAText;

        /// <summary>
        /// Backing field for KyoceraDataItem property
        /// </summary>
        private DataItem fKyoceraDataItem;

        /// <summary>
        /// Backing field for KyoceraText property
        /// </summary>
        private Text fKyoceraText;

        /// <summary>
        /// Backing field for LanierDataItem property
        /// </summary>
        private DataItem fLanierDataItem;

        /// <summary>
        /// Backing field for LanierText property
        /// </summary>
        private Text fLanierText;

        /// <summary>
        /// Backing field for LexmarkDataItem property
        /// </summary>
        private DataItem fLexmarkDataItem;

        /// <summary>
        /// Backing field for LexmarkText property
        /// </summary>
        private Text fLexmarkText;

        /// <summary>
        /// Backing field for MicrosoftDataItem property
        /// </summary>
        private DataItem fMicrosoftDataItem;

        /// <summary>
        /// Backing field for MicrosoftText property
        /// </summary>
        private Text fMicrosoftText;

        /// <summary>
        /// Backing field for NECDataItem property
        /// </summary>
        private DataItem fNECDataItem;

        /// <summary>
        /// Backing field for NECText property
        /// </summary>
        private Text fNECText;

        /// <summary>
        /// Backing field for NRGDataItem property
        /// </summary>
        private DataItem fNRGDataItem;

        /// <summary>
        /// Backing field for NRGText property
        /// </summary>
        private Text fNRGText;

        /// <summary>
        /// Backing field for OKIDataItem property
        /// </summary>
        private DataItem fOKIDataItem;

        /// <summary>
        /// Backing field for OKIText property
        /// </summary>
        private Text fOKIText;

        /// <summary>
        /// Backing field for RICOHDataItem property
        /// </summary>
        private DataItem fRICOHDataItem;

        /// <summary>
        /// Backing field for RICOHText property
        /// </summary>
        private Text fRICOHText;

        /// <summary>
        /// Backing field for SamsungDataItem property
        /// </summary>
        private DataItem fSamsungDataItem;

        /// <summary>
        /// Backing field for SamsungText property
        /// </summary>
        private Text fSamsungText;

        /// <summary>
        /// Backing field for SavinDataItem property
        /// </summary>
        private DataItem fSavinDataItem;

        /// <summary>
        /// Backing field for SavinText property
        /// </summary>
        private Text fSavinText;

        /// <summary>
        /// Backing field for TOSHIBADataItem property
        /// </summary>
        private DataItem fTOSHIBADataItem;

        /// <summary>
        /// Backing field for TOSHIBAText property
        /// </summary>
        private Text fTOSHIBAText;

        /// <summary>
        /// Backing field for UTAXDataItem property
        /// </summary>
        private DataItem fUTAXDataItem;

        /// <summary>
        /// Backing field for UTAXText property
        /// </summary>
        private Text fUTAXText;

        /// <summary>
        /// Backing field for XeroxDataItem property
        /// </summary>
        private DataItem fXeroxDataItem;

        /// <summary>
        /// Backing field for XeroxText property
        /// </summary>
        private Text fXeroxText;

        /// <summary>
        /// Backing field for SysListView3215Dup1DataGrid property
        /// </summary>
        private DataGrid fSysListView3215Dup1DataGrid;

        /// <summary>
        /// Backing field for HeaderSysHeaderI1XHeader property
        /// </summary>
        private Header fHeaderSysHeaderI1XHeader;

        /// <summary>
        /// Backing field for PrintersHeaderII1XHeaderItem property
        /// </summary>
        private HeaderItem fPrintersHeaderII1XHeaderItem;

        /// <summary>
        /// Backing field for VerticalScrollBI1XScrollBar property
        /// </summary>
        private ScrollBar fVerticalScrollBI1XScrollBar;

        /// <summary>
        /// Backing field for BackbysmallamouI1XButton property
        /// </summary>
        private Button fBackbysmallamouI1XButton;

        /// <summary>
        /// Backing field for BackbylargeamouI1XButton property
        /// </summary>
        private Button fBackbylargeamouI1XButton;

        /// <summary>
        /// Backing field for ThumbI1XThumb property
        /// </summary>
        private Thumb fThumbI1XThumb;

        /// <summary>
        /// Backing field for ForwardbylargeaI1XButton property
        /// </summary>
        private Button fForwardbylargeaI1XButton;

        /// <summary>
        /// Backing field for ForwardbysmallaI1XButton property
        /// </summary>
        private Button fForwardbysmallaI1XButton;

        /// <summary>
        /// Backing field for BrotherColorLegDataItem property
        /// </summary>
        private DataItem fBrotherColorLegDataItem;

        /// <summary>
        /// Backing field for BrotherColorLegText property
        /// </summary>
        private Text fBrotherColorLegText;

        /// <summary>
        /// Backing field for BrotherColorTypDup0DataItem property
        /// </summary>
        private DataItem fBrotherColorTypDup0DataItem;

        /// <summary>
        /// Backing field for BrotherColorTypDup0Text property
        /// </summary>
        private Text fBrotherColorTypDup0Text;

        /// <summary>
        /// Backing field for BrotherColorTypDup1DataItem property
        /// </summary>
        private DataItem fBrotherColorTypDup1DataItem;

        /// <summary>
        /// Backing field for BrotherColorTypDup1Text property
        /// </summary>
        private Text fBrotherColorTypDup1Text;

        /// <summary>
        /// Backing field for BrotherGenericJDup0DataItem property
        /// </summary>
        private DataItem fBrotherGenericJDup0DataItem;

        /// <summary>
        /// Backing field for BrotherGenericJDup0Text property
        /// </summary>
        private Text fBrotherGenericJDup0Text;

        /// <summary>
        /// Backing field for BrotherGenericJDup1DataItem property
        /// </summary>
        private DataItem fBrotherGenericJDup1DataItem;

        /// <summary>
        /// Backing field for BrotherGenericJDup1Text property
        /// </summary>
        private Text fBrotherGenericJDup1Text;

        /// <summary>
        /// Backing field for BrotherGenericXDataItem property
        /// </summary>
        private DataItem fBrotherGenericXDataItem;

        /// <summary>
        /// Backing field for BrotherGenericXText property
        /// </summary>
        private Text fBrotherGenericXText;

        /// <summary>
        /// Backing field for BrotherIJLegTypDup0DataItem property
        /// </summary>
        private DataItem fBrotherIJLegTypDup0DataItem;

        /// <summary>
        /// Backing field for BrotherIJLegTypDup0Text property
        /// </summary>
        private Text fBrotherIJLegTypDup0Text;

        /// <summary>
        /// Backing field for BrotherIJLegTypDup1DataItem property
        /// </summary>
        private DataItem fBrotherIJLegTypDup1DataItem;

        /// <summary>
        /// Backing field for BrotherIJLegTypDup1Text property
        /// </summary>
        private Text fBrotherIJLegTypDup1Text;

        /// <summary>
        /// Backing field for BrotherIJType1CDataItem property
        /// </summary>
        private DataItem fBrotherIJType1CDataItem;

        /// <summary>
        /// Backing field for BrotherIJType1CText property
        /// </summary>
        private Text fBrotherIJType1CText;

        /// <summary>
        /// Backing field for BrotherIJType2CDataItem property
        /// </summary>
        private DataItem fBrotherIJType2CDataItem;

        /// <summary>
        /// Backing field for BrotherIJType2CText property
        /// </summary>
        private Text fBrotherIJType2CText;

        /// <summary>
        /// Backing field for BrotherLaserLegDataItem property
        /// </summary>
        private DataItem fBrotherLaserLegDataItem;

        /// <summary>
        /// Backing field for BrotherLaserLegText property
        /// </summary>
        private Text fBrotherLaserLegText;

        /// <summary>
        /// Backing field for BrotherLaserTypDup0DataItem property
        /// </summary>
        private DataItem fBrotherLaserTypDup0DataItem;

        /// <summary>
        /// Backing field for BrotherLaserTypDup0Text property
        /// </summary>
        private Text fBrotherLaserTypDup0Text;

        /// <summary>
        /// Backing field for BrotherLaserTypDup1DataItem property
        /// </summary>
        private DataItem fBrotherLaserTypDup1DataItem;

        /// <summary>
        /// Backing field for BrotherLaserTypDup1Text property
        /// </summary>
        private Text fBrotherLaserTypDup1Text;

        /// <summary>
        /// Backing field for BrotherMobilePrDup0DataItem property
        /// </summary>
        private DataItem fBrotherMobilePrDup0DataItem;

        /// <summary>
        /// Backing field for BrotherMobilePrDup0Text property
        /// </summary>
        private Text fBrotherMobilePrDup0Text;

        /// <summary>
        /// Backing field for BrotherMobilePrDup1DataItem property
        /// </summary>
        private DataItem fBrotherMobilePrDup1DataItem;

        /// <summary>
        /// Backing field for BrotherMobilePrDup1Text property
        /// </summary>
        private Text fBrotherMobilePrDup1Text;

        /// <summary>
        /// Backing field for BrotherPCL6ClasDataItem property
        /// </summary>
        private DataItem fBrotherPCL6ClasDataItem;

        /// <summary>
        /// Backing field for BrotherPCL6ClasText property
        /// </summary>
        private Text fBrotherPCL6ClasText;

        /// <summary>
        /// Backing field for BrotherPSClassDDataItem property
        /// </summary>
        private DataItem fBrotherPSClassDDataItem;

        /// <summary>
        /// Backing field for BrotherPSClassDText property
        /// </summary>
        private Text fBrotherPSClassDText;

        /// <summary>
        /// Backing field for RetrievingalistI1XImage property
        /// </summary>
        private Image fRetrievingalistI1XImage;

        /// <summary>
        /// Backing field for WindowsUpdateBuI1XButton property
        /// </summary>
        private Button fWindowsUpdateBuI1XButton;

        /// <summary>
        /// Backing field for HaveDiskButton1I1XButton property
        /// </summary>
        private Button fHaveDiskButton1I1XButton;

        /// <summary>
        /// Backing field for OKButton1I1XButton property
        /// </summary>
        private Button fOKButton1I1XButton;

        /// <summary>
        /// Backing field for CancelButton2I1XButton property
        /// </summary>
        private Button fCancelButton2I1XButton;

        /// <summary>
        /// Backing field for SelectthemanufaI1XDup0Text property
        /// </summary>
        private Text fSelectthemanufaI1XDup0Text;

        /// <summary>
        /// Backing field for SelectthemanufaI1XDup1Text property
        /// </summary>
        private Text fSelectthemanufaI1XDup1Text;

        /// <summary>
        /// Backing field for Static1854I1XImage property
        /// </summary>
        private Image fStatic1854I1XImage;

        /// <summary>
        /// Backing field for ThisdriverisdigText property
        /// </summary>
        private Text fThisdriverisdigText;

        /// <summary>
        /// Backing field for TellmewhydriverI1XHyperlink property
        /// </summary>
        private Hyperlink fTellmewhydriverI1XHyperlink;

        /// <summary>
        /// Backing field for AI1XHyperlink property
        /// </summary>
        private Hyperlink fAI1XHyperlink;

        /// <summary>
        /// Backing field for AddPrinterWizarI1XTitleBar property
        /// </summary>
        private TitleBar fAddPrinterWizarI1XTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyI1XMenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyI1XMenuBar;

        /// <summary>
        /// Backing field for SystemItem1I1XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I1XMenuItem;

        /// <summary>
        /// Backing field for ContexthelpHelpI1XButton property
        /// </summary>
        private Button fContexthelpHelpI1XButton;

        /// <summary>
        /// Backing field for CloseCloseI1XButton property
        /// </summary>
        private Button fCloseCloseI1XButton;

        /// <summary>
        /// Backing field for WindowsPrinterIPane property
        /// </summary>
        private Pane fWindowsPrinterIPane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI0XDup0Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI0XDup0Pane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI1XDup0Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI1XDup0Pane;

        /// <summary>
        /// Backing field for ConnectingtohttText property
        /// </summary>
        private Text fConnectingtohttText;

        /// <summary>
        /// Backing field for ElementContentText property
        /// </summary>
        private Text fElementContentText;

        /// <summary>
        /// Backing field for CCProgressBarProgressBar property
        /// </summary>
        private ProgressBar fCCProgressBarProgressBar;

        /// <summary>
        /// Backing field for CancelCCPushButDup0Button property
        /// </summary>
        private Button fCancelCCPushButDup0Button;

        /// <summary>
        /// Backing field for WindowsPrinterITitleBar property
        /// </summary>
        private TitleBar fWindowsPrinterITitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup0MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup0MenuBar;

        /// <summary>
        /// Backing field for SystemItem1I2XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I2XMenuItem;

        /// <summary>
        /// Backing field for CloseCloseDup0Button property
        /// </summary>
        private Button fCloseCloseDup0Button;

        /// <summary>
        /// Backing field for FindaprinterbyoPane property
        /// </summary>
        private Pane fFindaprinterbyoPane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI0XDup1Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI0XDup1Pane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI1XDup1Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI1XDup1Pane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI2XDup0Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI2XDup0Pane;

        /// <summary>
        /// Backing field for BackButtonbackbButton property
        /// </summary>
        private Button fBackButtonbackbButton;

        /// <summary>
        /// Backing field for ElementwizardicDup0Image property
        /// </summary>
        private Image fElementwizardicDup0Image;

        /// <summary>
        /// Backing field for AddPrinterElemeText property
        /// </summary>
        private Text fAddPrinterElemeText;

        /// <summary>
        /// Backing field for FindaprinterbyoText property
        /// </summary>
        private Text fFindaprinterbyoText;

        /// <summary>
        /// Backing field for NetworkprintertPane property
        /// </summary>
        private Pane fNetworkprintertPane;

        /// <summary>
        /// Backing field for MyprinterisalitRadioButton property
        /// </summary>
        private RadioButton fMyprinterisalitRadioButton;

        /// <summary>
        /// Backing field for FindaprinterintRadioButton property
        /// </summary>
        private RadioButton fFindaprinterintRadioButton;

        /// <summary>
        /// Backing field for SelectasharedprRadioButton property
        /// </summary>
        private RadioButton fSelectasharedprRadioButton;

        /// <summary>
        /// Backing field for AddaprinterusinRadioButton property
        /// </summary>
        private RadioButton fAddaprinterusinRadioButton;

        /// <summary>
        /// Backing field for AddaBluetoothwiRadioButton property
        /// </summary>
        private RadioButton fAddaBluetoothwiRadioButton;

        /// <summary>
        /// Backing field for AddalocalprinteRadioButton property
        /// </summary>
        private RadioButton fAddalocalprinteRadioButton;

        /// <summary>
        /// Backing field for aAddingprintersEdit property
        /// </summary>
        private Edit faAddingprintersEdit;

        /// <summary>
        /// Backing field for BrowseButton103Button property
        /// </summary>
        private Button fBrowseButton103Button;

        /// <summary>
        /// Backing field for ExamplecomputerText property
        /// </summary>
        private Text fExamplecomputerText;

        /// <summary>
        /// Backing field for NextCCPushButtoDup0Button property
        /// </summary>
        private Button fNextCCPushButtoDup0Button;

        /// <summary>
        /// Backing field for CancelCCPushButDup1Button property
        /// </summary>
        private Button fCancelCCPushButDup1Button;

        /// <summary>
        /// Backing field for AddPrinterTitleBar property
        /// </summary>
        private TitleBar fAddPrinterTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup1MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup1MenuBar;

        /// <summary>
        /// Backing field for SystemItem1I3XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I3XMenuItem;

        /// <summary>
        /// Backing field for CloseCloseDup1Button property
        /// </summary>
        private Button fCloseCloseDup1Button;

        /// <summary>
        /// Backing field for HWNDElementdialPane property
        /// </summary>
        private Pane fHWNDElementdialPane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI0XDup2Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI0XDup2Pane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI1XDup2Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI1XDup2Pane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI2XDup1Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI2XDup1Pane;

        /// <summary>
        /// Backing field for ElementwizardicDup1Image property
        /// </summary>
        private Image fElementwizardicDup1Image;

        /// <summary>
        /// Backing field for AddadeviceElemeText property
        /// </summary>
        private Text fAddadeviceElemeText;

        /// <summary>
        /// Backing field for ElementheadertiText property
        /// </summary>
        private Text fElementheadertiText;

        /// <summary>
        /// Backing field for XElement46FB06FPane property
        /// </summary>
        private Pane fXElement46FB06FPane;

        /// <summary>
        /// Backing field for XBabyPane property
        /// </summary>
        private Pane fXBabyPane;

        /// <summary>
        /// Backing field for ElementeClassicPane property
        /// </summary>
        private Pane fElementeClassicPane;

        /// <summary>
        /// Backing field for ChooseadeviceorText property
        /// </summary>
        private Text fChooseadeviceorText;

        /// <summary>
        /// Backing field for SelectadeviceElText property
        /// </summary>
        private Text fSelectadeviceElText;

        /// <summary>
        /// Backing field for VerticalCCVScroScrollBar property
        /// </summary>
        private ScrollBar fVerticalCCVScroScrollBar;

        /// <summary>
        /// Backing field for LineupButton property
        /// </summary>
        private Button fLineupButton;

        /// <summary>
        /// Backing field for PositionCustom property
        /// </summary>
        private Custom fPositionCustom;

        /// <summary>
        /// Backing field for PagedownButton property
        /// </summary>
        private Button fPagedownButton;

        /// <summary>
        /// Backing field for LinedownButton property
        /// </summary>
        private Button fLinedownButton;

        /// <summary>
        /// Backing field for DeviceListElemeList property
        /// </summary>
        private List fDeviceListElemeList;

        /// <summary>
        /// Backing field for HostnameCanHaveButton property
        /// </summary>
        private Button fHostnameCanHaveButton;

        /// <summary>
        /// Backing field for HostnameCanHaveText property
        /// </summary>
        private Text fHostnameCanHaveText;

        /// <summary>
        /// Backing field for PrinterInkjetprDup0Text property
        /// </summary>
        private Text fPrinterInkjetprDup0Text;

        /// <summary>
        /// Backing field for HPB036AFHPOfficButton property
        /// </summary>
        private Button fHPB036AFHPOfficButton;

        /// <summary>
        /// Backing field for HPB036AFHPOfficText property
        /// </summary>
        private Text fHPB036AFHPOfficText;

        /// <summary>
        /// Backing field for PrinterInkjetprDup1Text property
        /// </summary>
        private Text fPrinterInkjetprDup1Text;

        /// <summary>
        /// Backing field for jaguar6HPDesignButton property
        /// </summary>
        private Button fjaguar6HPDesignButton;

        /// <summary>
        /// Backing field for jaguar6HPDesignText property
        /// </summary>
        private Text fjaguar6HPDesignText;

        /// <summary>
        /// Backing field for PrinterRichTextDup0Text property
        /// </summary>
        private Text fPrinterRichTextDup0Text;

        /// <summary>
        /// Backing field for DIRECTFCHPOfficButton property
        /// </summary>
        private Button fDIRECTFCHPOfficButton;

        /// <summary>
        /// Backing field for DIRECTFCHPOfficText property
        /// </summary>
        private Text fDIRECTFCHPOfficText;

        /// <summary>
        /// Backing field for PrinterInkjetprDup2Text property
        /// </summary>
        private Text fPrinterInkjetprDup2Text;

        /// <summary>
        /// Backing field for NPI06B4E6HPLaseButton property
        /// </summary>
        private Button fNPI06B4E6HPLaseButton;

        /// <summary>
        /// Backing field for NPI06B4E6HPLaseText property
        /// </summary>
        private Text fNPI06B4E6HPLaseText;

        /// <summary>
        /// Backing field for PrinterRichTextDup1Text property
        /// </summary>
        private Text fPrinterRichTextDup1Text;

        /// <summary>
        /// Backing field for NPI270DD5HPColoButton property
        /// </summary>
        private Button fNPI270DD5HPColoButton;

        /// <summary>
        /// Backing field for NPI270DD5HPColoText property
        /// </summary>
        private Text fNPI270DD5HPColoText;

        /// <summary>
        /// Backing field for PrinterRichTextDup2Text property
        /// </summary>
        private Text fPrinterRichTextDup2Text;

        /// <summary>
        /// Backing field for NPI3CB042HPDigiButton property
        /// </summary>
        private Button fNPI3CB042HPDigiButton;

        /// <summary>
        /// Backing field for NPI3CB042HPDigiText property
        /// </summary>
        private Text fNPI3CB042HPDigiText;

        /// <summary>
        /// Backing field for PrinterRichTextDup3Text property
        /// </summary>
        private Text fPrinterRichTextDup3Text;

        /// <summary>
        /// Backing field for NPI4EB4FBHPPageButton property
        /// </summary>
        private Button fNPI4EB4FBHPPageButton;

        /// <summary>
        /// Backing field for NPI4EB4FBHPPageText property
        /// </summary>
        private Text fNPI4EB4FBHPPageText;

        /// <summary>
        /// Backing field for PrinterRichTextDup4Text property
        /// </summary>
        private Text fPrinterRichTextDup4Text;

        /// <summary>
        /// Backing field for NPI84D469HPDesiButton property
        /// </summary>
        private Button fNPI84D469HPDesiButton;

        /// <summary>
        /// Backing field for NPI84D469HPDesiText property
        /// </summary>
        private Text fNPI84D469HPDesiText;

        /// <summary>
        /// Backing field for PrinterRichTextDup5Text property
        /// </summary>
        private Text fPrinterRichTextDup5Text;

        /// <summary>
        /// Backing field for NPIA6532DHPColoButton property
        /// </summary>
        private Button fNPIA6532DHPColoButton;

        /// <summary>
        /// Backing field for NPIA6532DHPColoText property
        /// </summary>
        private Text fNPIA6532DHPColoText;

        /// <summary>
        /// Backing field for PrinterRichTextDup6Text property
        /// </summary>
        private Text fPrinterRichTextDup6Text;

        /// <summary>
        /// Backing field for NPIAA33FEHPColoButton property
        /// </summary>
        private Button fNPIAA33FEHPColoButton;

        /// <summary>
        /// Backing field for NPIAA33FEHPColoText property
        /// </summary>
        private Text fNPIAA33FEHPColoText;

        /// <summary>
        /// Backing field for PrinterRichTextDup7Text property
        /// </summary>
        private Text fPrinterRichTextDup7Text;

        /// <summary>
        /// Backing field for NPIBB41BCHPPageButton property
        /// </summary>
        private Button fNPIBB41BCHPPageButton;

        /// <summary>
        /// Backing field for NPIBB41BCHPPageText property
        /// </summary>
        private Text fNPIBB41BCHPPageText;

        /// <summary>
        /// Backing field for PrinterRichTextDup8Text property
        /// </summary>
        private Text fPrinterRichTextDup8Text;

        /// <summary>
        /// Backing field for NPIC5D52BHPDesiButton property
        /// </summary>
        private Button fNPIC5D52BHPDesiButton;

        /// <summary>
        /// Backing field for NPIC5D52BHPDesiText property
        /// </summary>
        private Text fNPIC5D52BHPDesiText;

        /// <summary>
        /// Backing field for PrinterRichTextDup9Text property
        /// </summary>
        private Text fPrinterRichTextDup9Text;

        /// <summary>
        /// Backing field for NPIC5D52CHPDesiButton property
        /// </summary>
        private Button fNPIC5D52CHPDesiButton;

        /// <summary>
        /// Backing field for NPIC5D52CHPDesiText property
        /// </summary>
        private Text fNPIC5D52CHPDesiText;

        /// <summary>
        /// Backing field for PrinterRichTextDup10Text property
        /// </summary>
        private Text fPrinterRichTextDup10Text;

        /// <summary>
        /// Backing field for NPIECF664HPPageButton property
        /// </summary>
        private Button fNPIECF664HPPageButton;

        /// <summary>
        /// Backing field for NPIECF664HPPageText property
        /// </summary>
        private Text fNPIECF664HPPageText;

        /// <summary>
        /// Backing field for PrinterRichTextDup11Text property
        /// </summary>
        private Text fPrinterRichTextDup11Text;

        /// <summary>
        /// Backing field for DIRECT00HPIPsecButton property
        /// </summary>
        private Button fDIRECT00HPIPsecButton;

        /// <summary>
        /// Backing field for DIRECT00HPIPsecText property
        /// </summary>
        private Text fDIRECT00HPIPsecText;

        /// <summary>
        /// Backing field for PrinterRichTextDup12Text property
        /// </summary>
        private Text fPrinterRichTextDup12Text;

        /// <summary>
        /// Backing field for DIRECT1FHPPageWButton property
        /// </summary>
        private Button fDIRECT1FHPPageWButton;

        /// <summary>
        /// Backing field for DIRECT1FHPPageWText property
        /// </summary>
        private Text fDIRECT1FHPPageWText;

        /// <summary>
        /// Backing field for PrinterRichTextDup13Text property
        /// </summary>
        private Text fPrinterRichTextDup13Text;

        /// <summary>
        /// Backing field for DIRECT21HPENVYPButton property
        /// </summary>
        private Button fDIRECT21HPENVYPButton;

        /// <summary>
        /// Backing field for DIRECT21HPENVYPText property
        /// </summary>
        private Text fDIRECT21HPENVYPText;

        /// <summary>
        /// Backing field for PrinterRichTextDup14Text property
        /// </summary>
        private Text fPrinterRichTextDup14Text;

        /// <summary>
        /// Backing field for DIRECT43HPOfficButton property
        /// </summary>
        private Button fDIRECT43HPOfficButton;

        /// <summary>
        /// Backing field for DIRECT43HPOfficText property
        /// </summary>
        private Text fDIRECT43HPOfficText;

        /// <summary>
        /// Backing field for PrinterRichTextDup15Text property
        /// </summary>
        private Text fPrinterRichTextDup15Text;

        /// <summary>
        /// Backing field for DIRECT5CHPWiFiDButton property
        /// </summary>
        private Button fDIRECT5CHPWiFiDButton;

        /// <summary>
        /// Backing field for DIRECT5CHPWiFiDText property
        /// </summary>
        private Text fDIRECT5CHPWiFiDText;

        /// <summary>
        /// Backing field for PrinterRichTextDup16Text property
        /// </summary>
        private Text fPrinterRichTextDup16Text;

        /// <summary>
        /// Backing field for DIRECT6CHPOfficButton property
        /// </summary>
        private Button fDIRECT6CHPOfficButton;

        /// <summary>
        /// Backing field for DIRECT6CHPOfficText property
        /// </summary>
        private Text fDIRECT6CHPOfficText;

        /// <summary>
        /// Backing field for PrinterRichTextDup17Text property
        /// </summary>
        private Text fPrinterRichTextDup17Text;

        /// <summary>
        /// Backing field for DIRECT71HPENVY7Button property
        /// </summary>
        private Button fDIRECT71HPENVY7Button;

        /// <summary>
        /// Backing field for DIRECT71HPENVY7Text property
        /// </summary>
        private Text fDIRECT71HPENVY7Text;

        /// <summary>
        /// Backing field for PrinterRichTextDup18Text property
        /// </summary>
        private Text fPrinterRichTextDup18Text;

        /// <summary>
        /// Backing field for DIRECT85HPPageWButton property
        /// </summary>
        private Button fDIRECT85HPPageWButton;

        /// <summary>
        /// Backing field for DIRECT85HPPageWText property
        /// </summary>
        private Text fDIRECT85HPPageWText;

        /// <summary>
        /// Backing field for PrinterRichTextDup19Text property
        /// </summary>
        private Text fPrinterRichTextDup19Text;

        /// <summary>
        /// Backing field for DIRECTC7HPInkTaButton property
        /// </summary>
        private Button fDIRECTC7HPInkTaButton;

        /// <summary>
        /// Backing field for DIRECTC7HPInkTaText property
        /// </summary>
        private Text fDIRECTC7HPInkTaText;

        /// <summary>
        /// Backing field for PrinterRichTextDup20Text property
        /// </summary>
        private Text fPrinterRichTextDup20Text;

        /// <summary>
        /// Backing field for DIRECTc9HPM281LButton property
        /// </summary>
        private Button fDIRECTc9HPM281LButton;

        /// <summary>
        /// Backing field for DIRECTc9HPM281LText property
        /// </summary>
        private Text fDIRECTc9HPM281LText;

        /// <summary>
        /// Backing field for PrinterRichTextDup21Text property
        /// </summary>
        private Text fPrinterRichTextDup21Text;

        /// <summary>
        /// Backing field for DIRECTF4HPM606LButton property
        /// </summary>
        private Button fDIRECTF4HPM606LButton;

        /// <summary>
        /// Backing field for DIRECTF4HPM606LText property
        /// </summary>
        private Text fDIRECTF4HPM606LText;

        /// <summary>
        /// Backing field for PrinterRichTextDup22Text property
        /// </summary>
        private Text fPrinterRichTextDup22Text;

        /// <summary>
        /// Backing field for DIRECTF4HPOfficButton property
        /// </summary>
        private Button fDIRECTF4HPOfficButton;

        /// <summary>
        /// Backing field for DIRECTF4HPOfficText property
        /// </summary>
        private Text fDIRECTF4HPOfficText;

        /// <summary>
        /// Backing field for PrinterRichTextDup23Text property
        /// </summary>
        private Text fPrinterRichTextDup23Text;

        /// <summary>
        /// Backing field for TheprinterthatIHyperlink property
        /// </summary>
        private Hyperlink fTheprinterthatIHyperlink;

        /// <summary>
        /// Backing field for NextCCPushButtoDup1Button property
        /// </summary>
        private Button fNextCCPushButtoDup1Button;

        /// <summary>
        /// Backing field for CancelCCPushButDup2Button property
        /// </summary>
        private Button fCancelCCPushButDup2Button;

        /// <summary>
        /// Backing field for AddadeviceTitleBar property
        /// </summary>
        private TitleBar fAddadeviceTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup2MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup2MenuBar;

        /// <summary>
        /// Backing field for SystemItem1I4XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I4XMenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizButton property
        /// </summary>
        private Button fMinimizeMinimizButton;

        /// <summary>
        /// Backing field for MaximizeMaximizButton property
        /// </summary>
        private Button fMaximizeMaximizButton;

        /// <summary>
        /// Backing field for CloseCloseDup2Button property
        /// </summary>
        private Button fCloseCloseDup2Button;

        private DataItem fboundDeviceDataItem;
        private string _deviceModelName;

        /// <summary>
        /// Initializes a new instance of the <see cref="V"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public SelectModel(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V"/> class using the default UIAFramework.
        /// </summary>
        public SelectModel()
        {
            Desktop = new Desktop();
        }

        public void SetDeviceInfo(string deviceModelName)
        {            
            _deviceModelName = deviceModelName;
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to AddadeviceNativWindow
        /// </summary>
        public Window AddadeviceNativWindow
        {
            get
            {
                if (null == fAddadeviceNativWindow)
                {
                    fAddadeviceNativWindow = new Window("AddadeviceNativWindow", Desktop);
                    fAddadeviceNativWindow.UIMap.Scope = UIASeachScope.Children;
                    fAddadeviceNativWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NativeHWNDHost");
                    fAddadeviceNativWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a device");
                }

                return fAddadeviceNativWindow;
            }
        }

        /// <summary>
        /// Gets Reference to AddPrinterNativWindow
        /// </summary>
        public Window AddPrinterNativWindow
        {
            get
            {
                if (null == fAddPrinterNativWindow)
                {
                    fAddPrinterNativWindow = new Window("AddPrinterNativWindow", AddadeviceNativWindow);
                    fAddPrinterNativWindow.UIMap.Scope = UIASeachScope.Children;
                    fAddPrinterNativWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NativeHWNDHost");
                    fAddPrinterNativWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Printer");
                }

                return fAddPrinterNativWindow;
            }
        }

        /// <summary>
        /// Gets Reference to WindowsPrinterIWindow
        /// </summary>
        public Window WindowsPrinterIWindow
        {
            get
            {
                if (null == fWindowsPrinterIWindow)
                {
                    fWindowsPrinterIWindow = new Window("WindowsPrinterIWindow", AddPrinterNativWindow);
                    fWindowsPrinterIWindow.UIMap.Scope = UIASeachScope.Children;
                    fWindowsPrinterIWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"#32770");
                    fWindowsPrinterIWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Windows Printer Installation");
                }

                return fWindowsPrinterIWindow;
            }
        }

        /// <summary>
        /// Gets Reference to AddPrinterWizarDup0Window
        /// </summary>
        public Window AddPrinterWizarDup0Window
        {
            get
            {
                if (null == fAddPrinterWizarDup0Window)
                {
                    fAddPrinterWizarDup0Window = new Window("AddPrinterWizarDup0Window", WindowsPrinterIWindow);
                    fAddPrinterWizarDup0Window.UIMap.Scope = UIASeachScope.Children;
                    fAddPrinterWizarDup0Window.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"#32770");
                    fAddPrinterWizarDup0Window.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Printer Wizard");
                }

                return fAddPrinterWizarDup0Window;
            }
        }

        /// <summary>
        /// Gets Reference to AddPrinterWizarDup1Window
        /// </summary>
        public Window AddPrinterWizarDup1Window
        {
            get
            {
                if (null == fAddPrinterWizarDup1Window)
                {
                    fAddPrinterWizarDup1Window = new Window("AddPrinterWizarDup1Window", AddPrinterWizarDup0Window);
                    fAddPrinterWizarDup1Window.UIMap.Scope = UIASeachScope.Children;
                    fAddPrinterWizarDup1Window.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"#32770");
                    fAddPrinterWizarDup1Window.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Printer Wizard");
                }

                return fAddPrinterWizarDup1Window;
            }
        }

        /// <summary>
        /// Gets Reference to SysListView3218DataGrid
        /// </summary>
        public DataGrid SysListView3218DataGrid
        {
            get
            {
                if (null == fSysListView3218DataGrid)
                {
                    fSysListView3218DataGrid = new DataGrid("SysListView3218DataGrid", AddPrinterWizarDup1Window);
                    fSysListView3218DataGrid.UIMap.Scope = UIASeachScope.Children;
                    fSysListView3218DataGrid.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"SysListView32");
                    fSysListView3218DataGrid.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1852");
                }

                return fSysListView3218DataGrid;
            }
        }

        /// <summary>
        /// Gets Reference to HeaderSysHeaderHeader
        /// </summary>
        public Header HeaderSysHeaderHeader
        {
            get
            {
                if (null == fHeaderSysHeaderHeader)
                {
                    fHeaderSysHeaderHeader = new Header("HeaderSysHeaderHeader", SysListView3218DataGrid);
                    fHeaderSysHeaderHeader.UIMap.Scope = UIASeachScope.Children;
                    fHeaderSysHeaderHeader.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"SysHeader32");
                    fHeaderSysHeaderHeader.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Header");
                    fHeaderSysHeaderHeader.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Header");
                }

                return fHeaderSysHeaderHeader;
            }
        }

        /// <summary>
        /// Gets Reference to PrintersHeaderII0XHeaderItem
        /// </summary>
        public HeaderItem PrintersHeaderII0XHeaderItem
        {
            get
            {
                if (null == fPrintersHeaderII0XHeaderItem)
                {
                    fPrintersHeaderII0XHeaderItem = new HeaderItem("PrintersHeaderII0XHeaderItem", HeaderSysHeaderHeader);
                    fPrintersHeaderII0XHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fPrintersHeaderII0XHeaderItem.UIMap.Index = 0;
                    fPrintersHeaderII0XHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HeaderItem 0");
                    fPrintersHeaderII0XHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printers");
                }

                return fPrintersHeaderII0XHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to HPColorLaserJetDup0DataItem
        /// </summary>
        public DataItem HPColorLaserJetDup0DataItem
        {
            get
            {
                if (null == fHPColorLaserJetDup0DataItem)
                {
                    fHPColorLaserJetDup0DataItem = new DataItem("HPColorLaserJetDup0DataItem", SysListView3218DataGrid);
                    fHPColorLaserJetDup0DataItem.UIMap.Scope = UIASeachScope.Children;
                    fHPColorLaserJetDup0DataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Color LaserJet Pro MFP M278-M281 PCL 6");
                }

                return fHPColorLaserJetDup0DataItem;
            }
        }

        public DataItem SelectedDeviceDataItem
        {
            get
            {
                if (null == fboundDeviceDataItem)
                {
                    fboundDeviceDataItem = new DataItem("boundDeviceDataItem", SysListView3218DataGrid);
                    fboundDeviceDataItem.UIMap.Scope = UIASeachScope.Children;
                   // fboundDeviceDataItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListViewItem");
                    fboundDeviceDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, _deviceModelName);
                }

                //if (!fboundDeviceDataItem.IsVisible())
                //{
                //    fboundDeviceDataItem = null;
                //    var deviceElement = TopCatUiHelper.GetChildByName(SysListView3218DataGrid, "ListViewItem", _deviceAddress);
                //    if (deviceElement != null)
                //    {
                //        fboundDeviceDataItem = new DataItem("boundDeviceDataItem", SysListView3218DataGrid);
                //        fboundDeviceDataItem.UIMap.Scope = UIASeachScope.Children;
                //        fboundDeviceDataItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListViewItem");
                //        fboundDeviceDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name,
                //            deviceElement.Current.Name);
                //    }
                //}
                return fboundDeviceDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to HPColorLaserJetDup0Text
        /// </summary>
        public Text HPColorLaserJetDup0Text
        {
            get
            {
                if (null == fHPColorLaserJetDup0Text)
                {
                    fHPColorLaserJetDup0Text = new Text("HPColorLaserJetDup0Text", HPColorLaserJetDup0DataItem);
                    fHPColorLaserJetDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fHPColorLaserJetDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Color LaserJet Pro MFP M278-M281 PCL 6");
                }

                return fHPColorLaserJetDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to HPColorLaserJetDup1DataItem
        /// </summary>
        public DataItem HPColorLaserJetDup1DataItem
        {
            get
            {
                if (null == fHPColorLaserJetDup1DataItem)
                {
                    fHPColorLaserJetDup1DataItem = new DataItem("HPColorLaserJetDup1DataItem", SysListView3218DataGrid);
                    fHPColorLaserJetDup1DataItem.UIMap.Scope = UIASeachScope.Children;
                    fHPColorLaserJetDup1DataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Color LaserJet Pro MFP M278-M281 PCL-6");
                }

                return fHPColorLaserJetDup1DataItem;
            }
        }

        /// <summary>
        /// Gets Reference to HPColorLaserJetDup1Text
        /// </summary>
        public Text HPColorLaserJetDup1Text
        {
            get
            {
                if (null == fHPColorLaserJetDup1Text)
                {
                    fHPColorLaserJetDup1Text = new Text("HPColorLaserJetDup1Text", HPColorLaserJetDup1DataItem);
                    fHPColorLaserJetDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fHPColorLaserJetDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Color LaserJet Pro MFP M278-M281 PCL-6");
                }

                return fHPColorLaserJetDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to RetrievingalistI0XImage
        /// </summary>
        public Image RetrievingalistI0XImage
        {
            get
            {
                if (null == fRetrievingalistI0XImage)
                {
                    fRetrievingalistI0XImage = new Image("RetrievingalistI0XImage", AddPrinterWizarDup1Window);
                    fRetrievingalistI0XImage.UIMap.Scope = UIASeachScope.Children;
                    fRetrievingalistI0XImage.UIMap.Index = 0;
                    fRetrievingalistI0XImage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fRetrievingalistI0XImage.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1003");
                    fRetrievingalistI0XImage.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"(Retrieving a list of all devices)");
                }

                return fRetrievingalistI0XImage;
            }
        }

        /// <summary>
        /// Gets Reference to WindowsUpdateBuI0XButton
        /// </summary>
        public Button WindowsUpdateBuI0XButton
        {
            get
            {
                if (null == fWindowsUpdateBuI0XButton)
                {
                    fWindowsUpdateBuI0XButton = new Button("WindowsUpdateBuI0XButton", AddPrinterWizarDup1Window);
                    fWindowsUpdateBuI0XButton.UIMap.Scope = UIASeachScope.Children;
                    fWindowsUpdateBuI0XButton.UIMap.Index = 0;
                    fWindowsUpdateBuI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fWindowsUpdateBuI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1566");
                    fWindowsUpdateBuI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Windows Update");
                }

                return fWindowsUpdateBuI0XButton;
            }
        }

        /// <summary>
        /// Gets Reference to HaveDiskButton1I0XButton
        /// </summary>
        public Button HaveDiskButton1I0XButton
        {
            get
            {
                if (null == fHaveDiskButton1I0XButton)
                {
                    fHaveDiskButton1I0XButton = new Button("HaveDiskButton1I0XButton", AddPrinterWizarDup1Window);
                    fHaveDiskButton1I0XButton.UIMap.Scope = UIASeachScope.Children;
                    fHaveDiskButton1I0XButton.UIMap.Index = 0;
                    fHaveDiskButton1I0XButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fHaveDiskButton1I0XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1567");
                    fHaveDiskButton1I0XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Have Disk...");
                }

                return fHaveDiskButton1I0XButton;
            }
        }

        /// <summary>
        /// Gets Reference to OKButton1I0XButton
        /// </summary>
        public Button OKButton1I0XButton
        {
            get
            {
                if (null == fOKButton1I0XButton)
                {
                    fOKButton1I0XButton = new Button("OKButton1I0XButton", AddPrinterWizarDup1Window);
                    fOKButton1I0XButton.UIMap.Scope = UIASeachScope.Children;
                    fOKButton1I0XButton.UIMap.Index = 0;
                    fOKButton1I0XButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButton1I0XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1");
                    fOKButton1I0XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButton1I0XButton;
            }
        }

        /// <summary>
        /// Gets Reference to CancelButton2I0XButton
        /// </summary>
        public Button CancelButton2I0XButton
        {
            get
            {
                if (null == fCancelButton2I0XButton)
                {
                    fCancelButton2I0XButton = new Button("CancelButton2I0XButton", AddPrinterWizarDup1Window);
                    fCancelButton2I0XButton.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton2I0XButton.UIMap.Index = 0;
                    fCancelButton2I0XButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButton2I0XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2");
                    fCancelButton2I0XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButton2I0XButton;
            }
        }

        /// <summary>
        /// Gets Reference to SelectthemanufaI0XDup0Text
        /// </summary>
        public Text SelectthemanufaI0XDup0Text
        {
            get
            {
                if (null == fSelectthemanufaI0XDup0Text)
                {
                    fSelectthemanufaI0XDup0Text = new Text("SelectthemanufaI0XDup0Text", AddPrinterWizarDup1Window);
                    fSelectthemanufaI0XDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fSelectthemanufaI0XDup0Text.UIMap.Index = 0;
                    fSelectthemanufaI0XDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fSelectthemanufaI0XDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1570");
                    fSelectthemanufaI0XDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Select the manufacturer and model of your printer. If your printer came with an installation disk, click Have Disk. If your printer is not listed, consult your printer documentation for a compatible printer.");
                }

                return fSelectthemanufaI0XDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to SelectthemanufaI0XDup1Text
        /// </summary>
        public Text SelectthemanufaI0XDup1Text
        {
            get
            {
                if (null == fSelectthemanufaI0XDup1Text)
                {
                    fSelectthemanufaI0XDup1Text = new Text("SelectthemanufaI0XDup1Text", AddPrinterWizarDup1Window);
                    fSelectthemanufaI0XDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fSelectthemanufaI0XDup1Text.UIMap.Index = 0;
                    fSelectthemanufaI0XDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fSelectthemanufaI0XDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"111");
                    fSelectthemanufaI0XDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Select the manufacturer and model of your printer. If your printer came with an installation disk, click Have Disk. If your printer is not listed, consult your printer documentation for a compatible printer.");
                }

                return fSelectthemanufaI0XDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to Static1854I0XImage
        /// </summary>
        public Image Static1854I0XImage
        {
            get
            {
                if (null == fStatic1854I0XImage)
                {
                    fStatic1854I0XImage = new Image("Static1854I0XImage", AddPrinterWizarDup1Window);
                    fStatic1854I0XImage.UIMap.Scope = UIASeachScope.Children;
                    fStatic1854I0XImage.UIMap.Index = 0;
                    fStatic1854I0XImage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fStatic1854I0XImage.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1854");
                }

                return fStatic1854I0XImage;
            }
        }

        /// <summary>
        /// Gets Reference to ThisdriverisnotText
        /// </summary>
        public Text ThisdriverisnotText
        {
            get
            {
                if (null == fThisdriverisnotText)
                {
                    fThisdriverisnotText = new Text("ThisdriverisnotText", AddPrinterWizarDup1Window);
                    fThisdriverisnotText.UIMap.Scope = UIASeachScope.Children;
                    fThisdriverisnotText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fThisdriverisnotText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1855");
                    fThisdriverisnotText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"This driver is not digitally signed!");
                }

                return fThisdriverisnotText;
            }
        }

        /// <summary>
        /// Gets Reference to TellmewhydriverI0XHyperlink
        /// </summary>
        public Hyperlink TellmewhydriverI0XHyperlink
        {
            get
            {
                if (null == fTellmewhydriverI0XHyperlink)
                {
                    fTellmewhydriverI0XHyperlink = new Hyperlink("TellmewhydriverI0XHyperlink", AddPrinterWizarDup1Window);
                    fTellmewhydriverI0XHyperlink.UIMap.Scope = UIASeachScope.Children;
                    fTellmewhydriverI0XHyperlink.UIMap.Index = 0;
                    fTellmewhydriverI0XHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"SysLink");
                    fTellmewhydriverI0XHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1856");
                    fTellmewhydriverI0XHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Tell me why driver signing is important");
                }

                return fTellmewhydriverI0XHyperlink;
            }
        }

        /// <summary>
        /// Gets Reference to AI0XHyperlink
        /// </summary>
        public Hyperlink AI0XHyperlink
        {
            get
            {
                if (null == fAI0XHyperlink)
                {
                    fAI0XHyperlink = new Hyperlink("AI0XHyperlink", TellmewhydriverI0XHyperlink);
                    fAI0XHyperlink.UIMap.Scope = UIASeachScope.Children;
                    fAI0XHyperlink.UIMap.Index = 0;
                }

                return fAI0XHyperlink;
            }
        }

        /// <summary>
        /// Gets Reference to AddPrinterWizarI0XTitleBar
        /// </summary>
        public TitleBar AddPrinterWizarI0XTitleBar
        {
            get
            {
                if (null == fAddPrinterWizarI0XTitleBar)
                {
                    fAddPrinterWizarI0XTitleBar = new TitleBar("AddPrinterWizarI0XTitleBar", AddPrinterWizarDup1Window);
                    fAddPrinterWizarI0XTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fAddPrinterWizarI0XTitleBar.UIMap.Index = 0;
                    fAddPrinterWizarI0XTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fAddPrinterWizarI0XTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Printer Wizard");
                }

                return fAddPrinterWizarI0XTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemMenuBarSyI0XMenuBar
        /// </summary>
        public MenuBar SystemMenuBarSyI0XMenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyI0XMenuBar)
                {
                    fSystemMenuBarSyI0XMenuBar = new MenuBar("SystemMenuBarSyI0XMenuBar", AddPrinterWizarI0XTitleBar);
                    fSystemMenuBarSyI0XMenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyI0XMenuBar.UIMap.Index = 0;
                    fSystemMenuBarSyI0XMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyI0XMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyI0XMenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemItem1I0XMenuItem
        /// </summary>
        public MenuItem SystemItem1I0XMenuItem
        {
            get
            {
                if (null == fSystemItem1I0XMenuItem)
                {
                    fSystemItem1I0XMenuItem = new MenuItem("SystemItem1I0XMenuItem", SystemMenuBarSyI0XMenuBar);
                    fSystemItem1I0XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I0XMenuItem.UIMap.Index = 0;
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1I0XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to ContexthelpHelpI0XButton
        /// </summary>
        public Button ContexthelpHelpI0XButton
        {
            get
            {
                if (null == fContexthelpHelpI0XButton)
                {
                    fContexthelpHelpI0XButton = new Button("ContexthelpHelpI0XButton", AddPrinterWizarI0XTitleBar);
                    fContexthelpHelpI0XButton.UIMap.Scope = UIASeachScope.Children;
                    fContexthelpHelpI0XButton.UIMap.Index = 0;
                    fContexthelpHelpI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Help");
                    fContexthelpHelpI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Context help");
                }

                return fContexthelpHelpI0XButton;
            }
        }

        /// <summary>
        /// Gets Reference to CloseCloseI0XButton
        /// </summary>
        public Button CloseCloseI0XButton
        {
            get
            {
                if (null == fCloseCloseI0XButton)
                {
                    fCloseCloseI0XButton = new Button("CloseCloseI0XButton", AddPrinterWizarI0XTitleBar);
                    fCloseCloseI0XButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseI0XButton.UIMap.Index = 0;
                    fCloseCloseI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseI0XButton;
            }
        }

        /// <summary>
        /// Gets Reference to SysListView3215Dup0DataGrid
        /// </summary>
        public DataGrid SysListView3215Dup0DataGrid
        {
            get
            {
                if (null == fSysListView3215Dup0DataGrid)
                {
                    fSysListView3215Dup0DataGrid = new DataGrid("SysListView3215Dup0DataGrid", AddPrinterWizarDup0Window);
                    fSysListView3215Dup0DataGrid.UIMap.Scope = UIASeachScope.Children;
                    fSysListView3215Dup0DataGrid.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"SysListView32");
                    fSysListView3215Dup0DataGrid.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1580");
                }

                return fSysListView3215Dup0DataGrid;
            }
        }

        /// <summary>
        /// Gets Reference to HeaderSysHeaderI0XHeader
        /// </summary>
        public Header HeaderSysHeaderI0XHeader
        {
            get
            {
                if (null == fHeaderSysHeaderI0XHeader)
                {
                    fHeaderSysHeaderI0XHeader = new Header("HeaderSysHeaderI0XHeader", SysListView3215Dup0DataGrid);
                    fHeaderSysHeaderI0XHeader.UIMap.Scope = UIASeachScope.Children;
                    fHeaderSysHeaderI0XHeader.UIMap.Index = 0;
                    fHeaderSysHeaderI0XHeader.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"SysHeader32");
                    fHeaderSysHeaderI0XHeader.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Header");
                    fHeaderSysHeaderI0XHeader.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Header");
                }

                return fHeaderSysHeaderI0XHeader;
            }
        }

        /// <summary>
        /// Gets Reference to ManufacturerHeaHeaderItem
        /// </summary>
        public HeaderItem ManufacturerHeaHeaderItem
        {
            get
            {
                if (null == fManufacturerHeaHeaderItem)
                {
                    fManufacturerHeaHeaderItem = new HeaderItem("ManufacturerHeaHeaderItem", HeaderSysHeaderI0XHeader);
                    fManufacturerHeaHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fManufacturerHeaHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HeaderItem 0");
                    fManufacturerHeaHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Manufacturer");
                }

                return fManufacturerHeaHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to VerticalScrollBI0XScrollBar
        /// </summary>
        public ScrollBar VerticalScrollBI0XScrollBar
        {
            get
            {
                if (null == fVerticalScrollBI0XScrollBar)
                {
                    fVerticalScrollBI0XScrollBar = new ScrollBar("VerticalScrollBI0XScrollBar", SysListView3215Dup0DataGrid);
                    fVerticalScrollBI0XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fVerticalScrollBI0XScrollBar.UIMap.Index = 0;
                    fVerticalScrollBI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Vertical ScrollBar");
                    fVerticalScrollBI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Vertical Scroll Bar");
                }

                return fVerticalScrollBI0XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to BackbysmallamouI0XButton
        /// </summary>
        public Button BackbysmallamouI0XButton
        {
            get
            {
                if (null == fBackbysmallamouI0XButton)
                {
                    fBackbysmallamouI0XButton = new Button("BackbysmallamouI0XButton", VerticalScrollBI0XScrollBar);
                    fBackbysmallamouI0XButton.UIMap.Scope = UIASeachScope.Children;
                    fBackbysmallamouI0XButton.UIMap.Index = 0;
                    fBackbysmallamouI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SmallDecrement");
                    fBackbysmallamouI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Back by small amount");
                }

                return fBackbysmallamouI0XButton;
            }
        }

        /// <summary>
        /// Gets Reference to BackbylargeamouI0XButton
        /// </summary>
        public Button BackbylargeamouI0XButton
        {
            get
            {
                if (null == fBackbylargeamouI0XButton)
                {
                    fBackbylargeamouI0XButton = new Button("BackbylargeamouI0XButton", VerticalScrollBI0XScrollBar);
                    fBackbylargeamouI0XButton.UIMap.Scope = UIASeachScope.Children;
                    fBackbylargeamouI0XButton.UIMap.Index = 0;
                    fBackbylargeamouI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"LargeDecrement");
                    fBackbylargeamouI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Back by large amount");
                }

                return fBackbylargeamouI0XButton;
            }
        }

        /// <summary>
        /// Gets Reference to ThumbI0XThumb
        /// </summary>
        public Thumb ThumbI0XThumb
        {
            get
            {
                if (null == fThumbI0XThumb)
                {
                    fThumbI0XThumb = new Thumb("ThumbI0XThumb", VerticalScrollBI0XScrollBar);
                    fThumbI0XThumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbI0XThumb.UIMap.Index = 0;
                    fThumbI0XThumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Thumb");
                    fThumbI0XThumb.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Thumb");
                }

                return fThumbI0XThumb;
            }
        }

        /// <summary>
        /// Gets Reference to ForwardbylargeaI0XButton
        /// </summary>
        public Button ForwardbylargeaI0XButton
        {
            get
            {
                if (null == fForwardbylargeaI0XButton)
                {
                    fForwardbylargeaI0XButton = new Button("ForwardbylargeaI0XButton", VerticalScrollBI0XScrollBar);
                    fForwardbylargeaI0XButton.UIMap.Scope = UIASeachScope.Children;
                    fForwardbylargeaI0XButton.UIMap.Index = 0;
                    fForwardbylargeaI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"LargeIncrement");
                    fForwardbylargeaI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Forward by large amount");
                }

                return fForwardbylargeaI0XButton;
            }
        }

        /// <summary>
        /// Gets Reference to ForwardbysmallaI0XButton
        /// </summary>
        public Button ForwardbysmallaI0XButton
        {
            get
            {
                if (null == fForwardbysmallaI0XButton)
                {
                    fForwardbysmallaI0XButton = new Button("ForwardbysmallaI0XButton", VerticalScrollBI0XScrollBar);
                    fForwardbysmallaI0XButton.UIMap.Scope = UIASeachScope.Children;
                    fForwardbysmallaI0XButton.UIMap.Index = 0;
                    fForwardbysmallaI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SmallIncrement");
                    fForwardbysmallaI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Forward by small amount");
                }

                return fForwardbysmallaI0XButton;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherDataItem
        /// </summary>
        public DataItem BrotherDataItem
        {
            get
            {
                if (null == fBrotherDataItem)
                {
                    fBrotherDataItem = new DataItem("BrotherDataItem", SysListView3215Dup0DataGrid);
                    fBrotherDataItem.UIMap.Scope = UIASeachScope.Children;
                    fBrotherDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother");
                }

                return fBrotherDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherText
        /// </summary>
        public Text BrotherText
        {
            get
            {
                if (null == fBrotherText)
                {
                    fBrotherText = new Text("BrotherText", BrotherDataItem);
                    fBrotherText.UIMap.Scope = UIASeachScope.Children;
                    fBrotherText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother");
                }

                return fBrotherText;
            }
        }

        /// <summary>
        /// Gets Reference to CanonDataItem
        /// </summary>
        public DataItem CanonDataItem
        {
            get
            {
                if (null == fCanonDataItem)
                {
                    fCanonDataItem = new DataItem("CanonDataItem", SysListView3215Dup0DataGrid);
                    fCanonDataItem.UIMap.Scope = UIASeachScope.Children;
                    fCanonDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Canon");
                }

                return fCanonDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to CanonText
        /// </summary>
        public Text CanonText
        {
            get
            {
                if (null == fCanonText)
                {
                    fCanonText = new Text("CanonText", CanonDataItem);
                    fCanonText.UIMap.Scope = UIASeachScope.Children;
                    fCanonText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Canon");
                }

                return fCanonText;
            }
        }

        /// <summary>
        /// Gets Reference to DellDataItem
        /// </summary>
        public DataItem DellDataItem
        {
            get
            {
                if (null == fDellDataItem)
                {
                    fDellDataItem = new DataItem("DellDataItem", SysListView3215Dup0DataGrid);
                    fDellDataItem.UIMap.Scope = UIASeachScope.Children;
                    fDellDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Dell");
                }

                return fDellDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to DellText
        /// </summary>
        public Text DellText
        {
            get
            {
                if (null == fDellText)
                {
                    fDellText = new Text("DellText", DellDataItem);
                    fDellText.UIMap.Scope = UIASeachScope.Children;
                    fDellText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Dell");
                }

                return fDellText;
            }
        }

        /// <summary>
        /// Gets Reference to EastmanKodakComDataItem
        /// </summary>
        public DataItem EastmanKodakComDataItem
        {
            get
            {
                if (null == fEastmanKodakComDataItem)
                {
                    fEastmanKodakComDataItem = new DataItem("EastmanKodakComDataItem", SysListView3215Dup0DataGrid);
                    fEastmanKodakComDataItem.UIMap.Scope = UIASeachScope.Children;
                    fEastmanKodakComDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Eastman Kodak Company");
                }

                return fEastmanKodakComDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to EastmanKodakComText
        /// </summary>
        public Text EastmanKodakComText
        {
            get
            {
                if (null == fEastmanKodakComText)
                {
                    fEastmanKodakComText = new Text("EastmanKodakComText", EastmanKodakComDataItem);
                    fEastmanKodakComText.UIMap.Scope = UIASeachScope.Children;
                    fEastmanKodakComText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Eastman Kodak Company");
                }

                return fEastmanKodakComText;
            }
        }

        /// <summary>
        /// Gets Reference to EPSONDataItem
        /// </summary>
        public DataItem EPSONDataItem
        {
            get
            {
                if (null == fEPSONDataItem)
                {
                    fEPSONDataItem = new DataItem("EPSONDataItem", SysListView3215Dup0DataGrid);
                    fEPSONDataItem.UIMap.Scope = UIASeachScope.Children;
                    fEPSONDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"EPSON");
                }

                return fEPSONDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to EPSONText
        /// </summary>
        public Text EPSONText
        {
            get
            {
                if (null == fEPSONText)
                {
                    fEPSONText = new Text("EPSONText", EPSONDataItem);
                    fEPSONText.UIMap.Scope = UIASeachScope.Children;
                    fEPSONText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"EPSON");
                }

                return fEPSONText;
            }
        }

        /// <summary>
        /// Gets Reference to FujiXeroxDataItem
        /// </summary>
        public DataItem FujiXeroxDataItem
        {
            get
            {
                if (null == fFujiXeroxDataItem)
                {
                    fFujiXeroxDataItem = new DataItem("FujiXeroxDataItem", SysListView3215Dup0DataGrid);
                    fFujiXeroxDataItem.UIMap.Scope = UIASeachScope.Children;
                    fFujiXeroxDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fuji Xerox");
                }

                return fFujiXeroxDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to FujiXeroxText
        /// </summary>
        public Text FujiXeroxText
        {
            get
            {
                if (null == fFujiXeroxText)
                {
                    fFujiXeroxText = new Text("FujiXeroxText", FujiXeroxDataItem);
                    fFujiXeroxText.UIMap.Scope = UIASeachScope.Children;
                    fFujiXeroxText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fuji Xerox");
                }

                return fFujiXeroxText;
            }
        }

        /// <summary>
        /// Gets Reference to GenericDataItem
        /// </summary>
        public DataItem GenericDataItem
        {
            get
            {
                if (null == fGenericDataItem)
                {
                    fGenericDataItem = new DataItem("GenericDataItem", SysListView3215Dup0DataGrid);
                    fGenericDataItem.UIMap.Scope = UIASeachScope.Children;
                    fGenericDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Generic");
                }

                return fGenericDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to GenericText
        /// </summary>
        public Text GenericText
        {
            get
            {
                if (null == fGenericText)
                {
                    fGenericText = new Text("GenericText", GenericDataItem);
                    fGenericText.UIMap.Scope = UIASeachScope.Children;
                    fGenericText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Generic");
                }

                return fGenericText;
            }
        }

        /// <summary>
        /// Gets Reference to GestetnerDataItem
        /// </summary>
        public DataItem GestetnerDataItem
        {
            get
            {
                if (null == fGestetnerDataItem)
                {
                    fGestetnerDataItem = new DataItem("GestetnerDataItem", SysListView3215Dup0DataGrid);
                    fGestetnerDataItem.UIMap.Scope = UIASeachScope.Children;
                    fGestetnerDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Gestetner");
                }

                return fGestetnerDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to GestetnerText
        /// </summary>
        public Text GestetnerText
        {
            get
            {
                if (null == fGestetnerText)
                {
                    fGestetnerText = new Text("GestetnerText", GestetnerDataItem);
                    fGestetnerText.UIMap.Scope = UIASeachScope.Children;
                    fGestetnerText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Gestetner");
                }

                return fGestetnerText;
            }
        }

        /// <summary>
        /// Gets Reference to HPDataItem
        /// </summary>
        public DataItem HPDataItem
        {
            get
            {
                if (null == fHPDataItem)
                {
                    fHPDataItem = new DataItem("HPDataItem", SysListView3215Dup0DataGrid);
                    fHPDataItem.UIMap.Scope = UIASeachScope.Children;
                    fHPDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP");
                }

                return fHPDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to HPText
        /// </summary>
        public Text HPText
        {
            get
            {
                if (null == fHPText)
                {
                    fHPText = new Text("HPText", HPDataItem);
                    fHPText.UIMap.Scope = UIASeachScope.Children;
                    fHPText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP");
                }

                return fHPText;
            }
        }

        /// <summary>
        /// Gets Reference to InfoPrintDataItem
        /// </summary>
        public DataItem InfoPrintDataItem
        {
            get
            {
                if (null == fInfoPrintDataItem)
                {
                    fInfoPrintDataItem = new DataItem("InfoPrintDataItem", SysListView3215Dup0DataGrid);
                    fInfoPrintDataItem.UIMap.Scope = UIASeachScope.Children;
                    fInfoPrintDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"InfoPrint");
                }

                return fInfoPrintDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to InfoPrintText
        /// </summary>
        public Text InfoPrintText
        {
            get
            {
                if (null == fInfoPrintText)
                {
                    fInfoPrintText = new Text("InfoPrintText", InfoPrintDataItem);
                    fInfoPrintText.UIMap.Scope = UIASeachScope.Children;
                    fInfoPrintText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"InfoPrint");
                }

                return fInfoPrintText;
            }
        }

        /// <summary>
        /// Gets Reference to infotecDataItem
        /// </summary>
        public DataItem infotecDataItem
        {
            get
            {
                if (null == finfotecDataItem)
                {
                    finfotecDataItem = new DataItem("infotecDataItem", SysListView3215Dup0DataGrid);
                    finfotecDataItem.UIMap.Scope = UIASeachScope.Children;
                    finfotecDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"infotec");
                }

                return finfotecDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to infotecText
        /// </summary>
        public Text infotecText
        {
            get
            {
                if (null == finfotecText)
                {
                    finfotecText = new Text("infotecText", infotecDataItem);
                    finfotecText.UIMap.Scope = UIASeachScope.Children;
                    finfotecText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"infotec");
                }

                return finfotecText;
            }
        }

        /// <summary>
        /// Gets Reference to KONICAMINOLTADataItem
        /// </summary>
        public DataItem KONICAMINOLTADataItem
        {
            get
            {
                if (null == fKONICAMINOLTADataItem)
                {
                    fKONICAMINOLTADataItem = new DataItem("KONICAMINOLTADataItem", SysListView3215Dup0DataGrid);
                    fKONICAMINOLTADataItem.UIMap.Scope = UIASeachScope.Children;
                    fKONICAMINOLTADataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"KONICA MINOLTA");
                }

                return fKONICAMINOLTADataItem;
            }
        }

        /// <summary>
        /// Gets Reference to KONICAMINOLTAText
        /// </summary>
        public Text KONICAMINOLTAText
        {
            get
            {
                if (null == fKONICAMINOLTAText)
                {
                    fKONICAMINOLTAText = new Text("KONICAMINOLTAText", KONICAMINOLTADataItem);
                    fKONICAMINOLTAText.UIMap.Scope = UIASeachScope.Children;
                    fKONICAMINOLTAText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"KONICA MINOLTA");
                }

                return fKONICAMINOLTAText;
            }
        }

        /// <summary>
        /// Gets Reference to KyoceraDataItem
        /// </summary>
        public DataItem KyoceraDataItem
        {
            get
            {
                if (null == fKyoceraDataItem)
                {
                    fKyoceraDataItem = new DataItem("KyoceraDataItem", SysListView3215Dup0DataGrid);
                    fKyoceraDataItem.UIMap.Scope = UIASeachScope.Children;
                    fKyoceraDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Kyocera");
                }

                return fKyoceraDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to KyoceraText
        /// </summary>
        public Text KyoceraText
        {
            get
            {
                if (null == fKyoceraText)
                {
                    fKyoceraText = new Text("KyoceraText", KyoceraDataItem);
                    fKyoceraText.UIMap.Scope = UIASeachScope.Children;
                    fKyoceraText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Kyocera");
                }

                return fKyoceraText;
            }
        }

        /// <summary>
        /// Gets Reference to LanierDataItem
        /// </summary>
        public DataItem LanierDataItem
        {
            get
            {
                if (null == fLanierDataItem)
                {
                    fLanierDataItem = new DataItem("LanierDataItem", SysListView3215Dup0DataGrid);
                    fLanierDataItem.UIMap.Scope = UIASeachScope.Children;
                    fLanierDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Lanier");
                }

                return fLanierDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to LanierText
        /// </summary>
        public Text LanierText
        {
            get
            {
                if (null == fLanierText)
                {
                    fLanierText = new Text("LanierText", LanierDataItem);
                    fLanierText.UIMap.Scope = UIASeachScope.Children;
                    fLanierText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Lanier");
                }

                return fLanierText;
            }
        }

        /// <summary>
        /// Gets Reference to LexmarkDataItem
        /// </summary>
        public DataItem LexmarkDataItem
        {
            get
            {
                if (null == fLexmarkDataItem)
                {
                    fLexmarkDataItem = new DataItem("LexmarkDataItem", SysListView3215Dup0DataGrid);
                    fLexmarkDataItem.UIMap.Scope = UIASeachScope.Children;
                    fLexmarkDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Lexmark");
                }

                return fLexmarkDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to LexmarkText
        /// </summary>
        public Text LexmarkText
        {
            get
            {
                if (null == fLexmarkText)
                {
                    fLexmarkText = new Text("LexmarkText", LexmarkDataItem);
                    fLexmarkText.UIMap.Scope = UIASeachScope.Children;
                    fLexmarkText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Lexmark");
                }

                return fLexmarkText;
            }
        }

        /// <summary>
        /// Gets Reference to MicrosoftDataItem
        /// </summary>
        public DataItem MicrosoftDataItem
        {
            get
            {
                if (null == fMicrosoftDataItem)
                {
                    fMicrosoftDataItem = new DataItem("MicrosoftDataItem", SysListView3215Dup0DataGrid);
                    fMicrosoftDataItem.UIMap.Scope = UIASeachScope.Children;
                    fMicrosoftDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Microsoft");
                }

                return fMicrosoftDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to MicrosoftText
        /// </summary>
        public Text MicrosoftText
        {
            get
            {
                if (null == fMicrosoftText)
                {
                    fMicrosoftText = new Text("MicrosoftText", MicrosoftDataItem);
                    fMicrosoftText.UIMap.Scope = UIASeachScope.Children;
                    fMicrosoftText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Microsoft");
                }

                return fMicrosoftText;
            }
        }

        /// <summary>
        /// Gets Reference to NECDataItem
        /// </summary>
        public DataItem NECDataItem
        {
            get
            {
                if (null == fNECDataItem)
                {
                    fNECDataItem = new DataItem("NECDataItem", SysListView3215Dup0DataGrid);
                    fNECDataItem.UIMap.Scope = UIASeachScope.Children;
                    fNECDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NEC");
                }

                return fNECDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to NECText
        /// </summary>
        public Text NECText
        {
            get
            {
                if (null == fNECText)
                {
                    fNECText = new Text("NECText", NECDataItem);
                    fNECText.UIMap.Scope = UIASeachScope.Children;
                    fNECText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NEC");
                }

                return fNECText;
            }
        }

        /// <summary>
        /// Gets Reference to NRGDataItem
        /// </summary>
        public DataItem NRGDataItem
        {
            get
            {
                if (null == fNRGDataItem)
                {
                    fNRGDataItem = new DataItem("NRGDataItem", SysListView3215Dup0DataGrid);
                    fNRGDataItem.UIMap.Scope = UIASeachScope.Children;
                    fNRGDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NRG");
                }

                return fNRGDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to NRGText
        /// </summary>
        public Text NRGText
        {
            get
            {
                if (null == fNRGText)
                {
                    fNRGText = new Text("NRGText", NRGDataItem);
                    fNRGText.UIMap.Scope = UIASeachScope.Children;
                    fNRGText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NRG");
                }

                return fNRGText;
            }
        }

        /// <summary>
        /// Gets Reference to OKIDataItem
        /// </summary>
        public DataItem OKIDataItem
        {
            get
            {
                if (null == fOKIDataItem)
                {
                    fOKIDataItem = new DataItem("OKIDataItem", SysListView3215Dup0DataGrid);
                    fOKIDataItem.UIMap.Scope = UIASeachScope.Children;
                    fOKIDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OKI");
                }

                return fOKIDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to OKIText
        /// </summary>
        public Text OKIText
        {
            get
            {
                if (null == fOKIText)
                {
                    fOKIText = new Text("OKIText", OKIDataItem);
                    fOKIText.UIMap.Scope = UIASeachScope.Children;
                    fOKIText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OKI");
                }

                return fOKIText;
            }
        }

        /// <summary>
        /// Gets Reference to RICOHDataItem
        /// </summary>
        public DataItem RICOHDataItem
        {
            get
            {
                if (null == fRICOHDataItem)
                {
                    fRICOHDataItem = new DataItem("RICOHDataItem", SysListView3215Dup0DataGrid);
                    fRICOHDataItem.UIMap.Scope = UIASeachScope.Children;
                    fRICOHDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"RICOH");
                }

                return fRICOHDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to RICOHText
        /// </summary>
        public Text RICOHText
        {
            get
            {
                if (null == fRICOHText)
                {
                    fRICOHText = new Text("RICOHText", RICOHDataItem);
                    fRICOHText.UIMap.Scope = UIASeachScope.Children;
                    fRICOHText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"RICOH");
                }

                return fRICOHText;
            }
        }

        /// <summary>
        /// Gets Reference to SamsungDataItem
        /// </summary>
        public DataItem SamsungDataItem
        {
            get
            {
                if (null == fSamsungDataItem)
                {
                    fSamsungDataItem = new DataItem("SamsungDataItem", SysListView3215Dup0DataGrid);
                    fSamsungDataItem.UIMap.Scope = UIASeachScope.Children;
                    fSamsungDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Samsung");
                }

                return fSamsungDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to SamsungText
        /// </summary>
        public Text SamsungText
        {
            get
            {
                if (null == fSamsungText)
                {
                    fSamsungText = new Text("SamsungText", SamsungDataItem);
                    fSamsungText.UIMap.Scope = UIASeachScope.Children;
                    fSamsungText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Samsung");
                }

                return fSamsungText;
            }
        }

        /// <summary>
        /// Gets Reference to SavinDataItem
        /// </summary>
        public DataItem SavinDataItem
        {
            get
            {
                if (null == fSavinDataItem)
                {
                    fSavinDataItem = new DataItem("SavinDataItem", SysListView3215Dup0DataGrid);
                    fSavinDataItem.UIMap.Scope = UIASeachScope.Children;
                    fSavinDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Savin");
                }

                return fSavinDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to SavinText
        /// </summary>
        public Text SavinText
        {
            get
            {
                if (null == fSavinText)
                {
                    fSavinText = new Text("SavinText", SavinDataItem);
                    fSavinText.UIMap.Scope = UIASeachScope.Children;
                    fSavinText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Savin");
                }

                return fSavinText;
            }
        }

        /// <summary>
        /// Gets Reference to TOSHIBADataItem
        /// </summary>
        public DataItem TOSHIBADataItem
        {
            get
            {
                if (null == fTOSHIBADataItem)
                {
                    fTOSHIBADataItem = new DataItem("TOSHIBADataItem", SysListView3215Dup0DataGrid);
                    fTOSHIBADataItem.UIMap.Scope = UIASeachScope.Children;
                    fTOSHIBADataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"TOSHIBA");
                }

                return fTOSHIBADataItem;
            }
        }

        /// <summary>
        /// Gets Reference to TOSHIBAText
        /// </summary>
        public Text TOSHIBAText
        {
            get
            {
                if (null == fTOSHIBAText)
                {
                    fTOSHIBAText = new Text("TOSHIBAText", TOSHIBADataItem);
                    fTOSHIBAText.UIMap.Scope = UIASeachScope.Children;
                    fTOSHIBAText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"TOSHIBA");
                }

                return fTOSHIBAText;
            }
        }

        /// <summary>
        /// Gets Reference to UTAXDataItem
        /// </summary>
        public DataItem UTAXDataItem
        {
            get
            {
                if (null == fUTAXDataItem)
                {
                    fUTAXDataItem = new DataItem("UTAXDataItem", SysListView3215Dup0DataGrid);
                    fUTAXDataItem.UIMap.Scope = UIASeachScope.Children;
                    fUTAXDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"UTAX");
                }

                return fUTAXDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to UTAXText
        /// </summary>
        public Text UTAXText
        {
            get
            {
                if (null == fUTAXText)
                {
                    fUTAXText = new Text("UTAXText", UTAXDataItem);
                    fUTAXText.UIMap.Scope = UIASeachScope.Children;
                    fUTAXText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"UTAX");
                }

                return fUTAXText;
            }
        }

        /// <summary>
        /// Gets Reference to XeroxDataItem
        /// </summary>
        public DataItem XeroxDataItem
        {
            get
            {
                if (null == fXeroxDataItem)
                {
                    fXeroxDataItem = new DataItem("XeroxDataItem", SysListView3215Dup0DataGrid);
                    fXeroxDataItem.UIMap.Scope = UIASeachScope.Children;
                    fXeroxDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Xerox");
                }

                return fXeroxDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to XeroxText
        /// </summary>
        public Text XeroxText
        {
            get
            {
                if (null == fXeroxText)
                {
                    fXeroxText = new Text("XeroxText", XeroxDataItem);
                    fXeroxText.UIMap.Scope = UIASeachScope.Children;
                    fXeroxText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Xerox");
                }

                return fXeroxText;
            }
        }

        /// <summary>
        /// Gets Reference to SysListView3215Dup1DataGrid
        /// </summary>
        public DataGrid SysListView3215Dup1DataGrid
        {
            get
            {
                if (null == fSysListView3215Dup1DataGrid)
                {
                    fSysListView3215Dup1DataGrid = new DataGrid("SysListView3215Dup1DataGrid", AddPrinterWizarDup0Window);
                    fSysListView3215Dup1DataGrid.UIMap.Scope = UIASeachScope.Children;
                    fSysListView3215Dup1DataGrid.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"SysListView32");
                    fSysListView3215Dup1DataGrid.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1581");
                }

                return fSysListView3215Dup1DataGrid;
            }
        }

        /// <summary>
        /// Gets Reference to HeaderSysHeaderI1XHeader
        /// </summary>
        public Header HeaderSysHeaderI1XHeader
        {
            get
            {
                if (null == fHeaderSysHeaderI1XHeader)
                {
                    fHeaderSysHeaderI1XHeader = new Header("HeaderSysHeaderI1XHeader", SysListView3215Dup1DataGrid);
                    fHeaderSysHeaderI1XHeader.UIMap.Scope = UIASeachScope.Children;
                    fHeaderSysHeaderI1XHeader.UIMap.Index = 1;
                    fHeaderSysHeaderI1XHeader.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"SysHeader32");
                    fHeaderSysHeaderI1XHeader.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Header");
                    fHeaderSysHeaderI1XHeader.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Header");
                }

                return fHeaderSysHeaderI1XHeader;
            }
        }

        /// <summary>
        /// Gets Reference to PrintersHeaderII1XHeaderItem
        /// </summary>
        public HeaderItem PrintersHeaderII1XHeaderItem
        {
            get
            {
                if (null == fPrintersHeaderII1XHeaderItem)
                {
                    fPrintersHeaderII1XHeaderItem = new HeaderItem("PrintersHeaderII1XHeaderItem", HeaderSysHeaderI1XHeader);
                    fPrintersHeaderII1XHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fPrintersHeaderII1XHeaderItem.UIMap.Index = 1;
                    fPrintersHeaderII1XHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HeaderItem 0");
                    fPrintersHeaderII1XHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printers");
                }

                return fPrintersHeaderII1XHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to VerticalScrollBI1XScrollBar
        /// </summary>
        public ScrollBar VerticalScrollBI1XScrollBar
        {
            get
            {
                if (null == fVerticalScrollBI1XScrollBar)
                {
                    fVerticalScrollBI1XScrollBar = new ScrollBar("VerticalScrollBI1XScrollBar", SysListView3215Dup1DataGrid);
                    fVerticalScrollBI1XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fVerticalScrollBI1XScrollBar.UIMap.Index = 1;
                    fVerticalScrollBI1XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Vertical ScrollBar");
                    fVerticalScrollBI1XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Vertical Scroll Bar");
                }

                return fVerticalScrollBI1XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to BackbysmallamouI1XButton
        /// </summary>
        public Button BackbysmallamouI1XButton
        {
            get
            {
                if (null == fBackbysmallamouI1XButton)
                {
                    fBackbysmallamouI1XButton = new Button("BackbysmallamouI1XButton", VerticalScrollBI1XScrollBar);
                    fBackbysmallamouI1XButton.UIMap.Scope = UIASeachScope.Children;
                    fBackbysmallamouI1XButton.UIMap.Index = 1;
                    fBackbysmallamouI1XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SmallDecrement");
                    fBackbysmallamouI1XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Back by small amount");
                }

                return fBackbysmallamouI1XButton;
            }
        }

        /// <summary>
        /// Gets Reference to BackbylargeamouI1XButton
        /// </summary>
        public Button BackbylargeamouI1XButton
        {
            get
            {
                if (null == fBackbylargeamouI1XButton)
                {
                    fBackbylargeamouI1XButton = new Button("BackbylargeamouI1XButton", VerticalScrollBI1XScrollBar);
                    fBackbylargeamouI1XButton.UIMap.Scope = UIASeachScope.Children;
                    fBackbylargeamouI1XButton.UIMap.Index = 1;
                    fBackbylargeamouI1XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"LargeDecrement");
                    fBackbylargeamouI1XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Back by large amount");
                }

                return fBackbylargeamouI1XButton;
            }
        }

        /// <summary>
        /// Gets Reference to ThumbI1XThumb
        /// </summary>
        public Thumb ThumbI1XThumb
        {
            get
            {
                if (null == fThumbI1XThumb)
                {
                    fThumbI1XThumb = new Thumb("ThumbI1XThumb", VerticalScrollBI1XScrollBar);
                    fThumbI1XThumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbI1XThumb.UIMap.Index = 1;
                    fThumbI1XThumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Thumb");
                    fThumbI1XThumb.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Thumb");
                }

                return fThumbI1XThumb;
            }
        }

        /// <summary>
        /// Gets Reference to ForwardbylargeaI1XButton
        /// </summary>
        public Button ForwardbylargeaI1XButton
        {
            get
            {
                if (null == fForwardbylargeaI1XButton)
                {
                    fForwardbylargeaI1XButton = new Button("ForwardbylargeaI1XButton", VerticalScrollBI1XScrollBar);
                    fForwardbylargeaI1XButton.UIMap.Scope = UIASeachScope.Children;
                    fForwardbylargeaI1XButton.UIMap.Index = 1;
                    fForwardbylargeaI1XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"LargeIncrement");
                    fForwardbylargeaI1XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Forward by large amount");
                }

                return fForwardbylargeaI1XButton;
            }
        }

        /// <summary>
        /// Gets Reference to ForwardbysmallaI1XButton
        /// </summary>
        public Button ForwardbysmallaI1XButton
        {
            get
            {
                if (null == fForwardbysmallaI1XButton)
                {
                    fForwardbysmallaI1XButton = new Button("ForwardbysmallaI1XButton", VerticalScrollBI1XScrollBar);
                    fForwardbysmallaI1XButton.UIMap.Scope = UIASeachScope.Children;
                    fForwardbysmallaI1XButton.UIMap.Index = 1;
                    fForwardbysmallaI1XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SmallIncrement");
                    fForwardbysmallaI1XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Forward by small amount");
                }

                return fForwardbysmallaI1XButton;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherColorLegDataItem
        /// </summary>
        public DataItem BrotherColorLegDataItem
        {
            get
            {
                if (null == fBrotherColorLegDataItem)
                {
                    fBrotherColorLegDataItem = new DataItem("BrotherColorLegDataItem", SysListView3215Dup1DataGrid);
                    fBrotherColorLegDataItem.UIMap.Scope = UIASeachScope.Children;
                    fBrotherColorLegDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother Color Leg Type1 Class Driver");
                }

                return fBrotherColorLegDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherColorLegText
        /// </summary>
        public Text BrotherColorLegText
        {
            get
            {
                if (null == fBrotherColorLegText)
                {
                    fBrotherColorLegText = new Text("BrotherColorLegText", BrotherColorLegDataItem);
                    fBrotherColorLegText.UIMap.Scope = UIASeachScope.Children;
                    fBrotherColorLegText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother Color Leg Type1 Class Driver");
                }

                return fBrotherColorLegText;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherColorTypDup0DataItem
        /// </summary>
        public DataItem BrotherColorTypDup0DataItem
        {
            get
            {
                if (null == fBrotherColorTypDup0DataItem)
                {
                    fBrotherColorTypDup0DataItem = new DataItem("BrotherColorTypDup0DataItem", SysListView3215Dup1DataGrid);
                    fBrotherColorTypDup0DataItem.UIMap.Scope = UIASeachScope.Children;
                    fBrotherColorTypDup0DataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother Color Type3 Class Driver");
                }

                return fBrotherColorTypDup0DataItem;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherColorTypDup0Text
        /// </summary>
        public Text BrotherColorTypDup0Text
        {
            get
            {
                if (null == fBrotherColorTypDup0Text)
                {
                    fBrotherColorTypDup0Text = new Text("BrotherColorTypDup0Text", BrotherColorTypDup0DataItem);
                    fBrotherColorTypDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fBrotherColorTypDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother Color Type3 Class Driver");
                }

                return fBrotherColorTypDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherColorTypDup1DataItem
        /// </summary>
        public DataItem BrotherColorTypDup1DataItem
        {
            get
            {
                if (null == fBrotherColorTypDup1DataItem)
                {
                    fBrotherColorTypDup1DataItem = new DataItem("BrotherColorTypDup1DataItem", SysListView3215Dup1DataGrid);
                    fBrotherColorTypDup1DataItem.UIMap.Scope = UIASeachScope.Children;
                    fBrotherColorTypDup1DataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother Color Type4 Class Driver");
                }

                return fBrotherColorTypDup1DataItem;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherColorTypDup1Text
        /// </summary>
        public Text BrotherColorTypDup1Text
        {
            get
            {
                if (null == fBrotherColorTypDup1Text)
                {
                    fBrotherColorTypDup1Text = new Text("BrotherColorTypDup1Text", BrotherColorTypDup1DataItem);
                    fBrotherColorTypDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fBrotherColorTypDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother Color Type4 Class Driver");
                }

                return fBrotherColorTypDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherGenericJDup0DataItem
        /// </summary>
        public DataItem BrotherGenericJDup0DataItem
        {
            get
            {
                if (null == fBrotherGenericJDup0DataItem)
                {
                    fBrotherGenericJDup0DataItem = new DataItem("BrotherGenericJDup0DataItem", SysListView3215Dup1DataGrid);
                    fBrotherGenericJDup0DataItem.UIMap.Scope = UIASeachScope.Children;
                    fBrotherGenericJDup0DataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother Generic Jpeg Type1 Class Driver");
                }

                return fBrotherGenericJDup0DataItem;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherGenericJDup0Text
        /// </summary>
        public Text BrotherGenericJDup0Text
        {
            get
            {
                if (null == fBrotherGenericJDup0Text)
                {
                    fBrotherGenericJDup0Text = new Text("BrotherGenericJDup0Text", BrotherGenericJDup0DataItem);
                    fBrotherGenericJDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fBrotherGenericJDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother Generic Jpeg Type1 Class Driver");
                }

                return fBrotherGenericJDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherGenericJDup1DataItem
        /// </summary>
        public DataItem BrotherGenericJDup1DataItem
        {
            get
            {
                if (null == fBrotherGenericJDup1DataItem)
                {
                    fBrotherGenericJDup1DataItem = new DataItem("BrotherGenericJDup1DataItem", SysListView3215Dup1DataGrid);
                    fBrotherGenericJDup1DataItem.UIMap.Scope = UIASeachScope.Children;
                    fBrotherGenericJDup1DataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother Generic Jpeg Type2 Class Driver");
                }

                return fBrotherGenericJDup1DataItem;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherGenericJDup1Text
        /// </summary>
        public Text BrotherGenericJDup1Text
        {
            get
            {
                if (null == fBrotherGenericJDup1Text)
                {
                    fBrotherGenericJDup1Text = new Text("BrotherGenericJDup1Text", BrotherGenericJDup1DataItem);
                    fBrotherGenericJDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fBrotherGenericJDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother Generic Jpeg Type2 Class Driver");
                }

                return fBrotherGenericJDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherGenericXDataItem
        /// </summary>
        public DataItem BrotherGenericXDataItem
        {
            get
            {
                if (null == fBrotherGenericXDataItem)
                {
                    fBrotherGenericXDataItem = new DataItem("BrotherGenericXDataItem", SysListView3215Dup1DataGrid);
                    fBrotherGenericXDataItem.UIMap.Scope = UIASeachScope.Children;
                    fBrotherGenericXDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother Generic XPS Type1 Class Driver");
                }

                return fBrotherGenericXDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherGenericXText
        /// </summary>
        public Text BrotherGenericXText
        {
            get
            {
                if (null == fBrotherGenericXText)
                {
                    fBrotherGenericXText = new Text("BrotherGenericXText", BrotherGenericXDataItem);
                    fBrotherGenericXText.UIMap.Scope = UIASeachScope.Children;
                    fBrotherGenericXText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother Generic XPS Type1 Class Driver");
                }

                return fBrotherGenericXText;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherIJLegTypDup0DataItem
        /// </summary>
        public DataItem BrotherIJLegTypDup0DataItem
        {
            get
            {
                if (null == fBrotherIJLegTypDup0DataItem)
                {
                    fBrotherIJLegTypDup0DataItem = new DataItem("BrotherIJLegTypDup0DataItem", SysListView3215Dup1DataGrid);
                    fBrotherIJLegTypDup0DataItem.UIMap.Scope = UIASeachScope.Children;
                    fBrotherIJLegTypDup0DataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother IJ Leg Type1 Class Driver");
                }

                return fBrotherIJLegTypDup0DataItem;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherIJLegTypDup0Text
        /// </summary>
        public Text BrotherIJLegTypDup0Text
        {
            get
            {
                if (null == fBrotherIJLegTypDup0Text)
                {
                    fBrotherIJLegTypDup0Text = new Text("BrotherIJLegTypDup0Text", BrotherIJLegTypDup0DataItem);
                    fBrotherIJLegTypDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fBrotherIJLegTypDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother IJ Leg Type1 Class Driver");
                }

                return fBrotherIJLegTypDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherIJLegTypDup1DataItem
        /// </summary>
        public DataItem BrotherIJLegTypDup1DataItem
        {
            get
            {
                if (null == fBrotherIJLegTypDup1DataItem)
                {
                    fBrotherIJLegTypDup1DataItem = new DataItem("BrotherIJLegTypDup1DataItem", SysListView3215Dup1DataGrid);
                    fBrotherIJLegTypDup1DataItem.UIMap.Scope = UIASeachScope.Children;
                    fBrotherIJLegTypDup1DataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother IJ Leg Type2 Class Driver");
                }

                return fBrotherIJLegTypDup1DataItem;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherIJLegTypDup1Text
        /// </summary>
        public Text BrotherIJLegTypDup1Text
        {
            get
            {
                if (null == fBrotherIJLegTypDup1Text)
                {
                    fBrotherIJLegTypDup1Text = new Text("BrotherIJLegTypDup1Text", BrotherIJLegTypDup1DataItem);
                    fBrotherIJLegTypDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fBrotherIJLegTypDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother IJ Leg Type2 Class Driver");
                }

                return fBrotherIJLegTypDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherIJType1CDataItem
        /// </summary>
        public DataItem BrotherIJType1CDataItem
        {
            get
            {
                if (null == fBrotherIJType1CDataItem)
                {
                    fBrotherIJType1CDataItem = new DataItem("BrotherIJType1CDataItem", SysListView3215Dup1DataGrid);
                    fBrotherIJType1CDataItem.UIMap.Scope = UIASeachScope.Children;
                    fBrotherIJType1CDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother IJ Type1 Class Driver");
                }

                return fBrotherIJType1CDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherIJType1CText
        /// </summary>
        public Text BrotherIJType1CText
        {
            get
            {
                if (null == fBrotherIJType1CText)
                {
                    fBrotherIJType1CText = new Text("BrotherIJType1CText", BrotherIJType1CDataItem);
                    fBrotherIJType1CText.UIMap.Scope = UIASeachScope.Children;
                    fBrotherIJType1CText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother IJ Type1 Class Driver");
                }

                return fBrotherIJType1CText;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherIJType2CDataItem
        /// </summary>
        public DataItem BrotherIJType2CDataItem
        {
            get
            {
                if (null == fBrotherIJType2CDataItem)
                {
                    fBrotherIJType2CDataItem = new DataItem("BrotherIJType2CDataItem", SysListView3215Dup1DataGrid);
                    fBrotherIJType2CDataItem.UIMap.Scope = UIASeachScope.Children;
                    fBrotherIJType2CDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother IJ Type2 Class Driver");
                }

                return fBrotherIJType2CDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherIJType2CText
        /// </summary>
        public Text BrotherIJType2CText
        {
            get
            {
                if (null == fBrotherIJType2CText)
                {
                    fBrotherIJType2CText = new Text("BrotherIJType2CText", BrotherIJType2CDataItem);
                    fBrotherIJType2CText.UIMap.Scope = UIASeachScope.Children;
                    fBrotherIJType2CText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother IJ Type2 Class Driver");
                }

                return fBrotherIJType2CText;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherLaserLegDataItem
        /// </summary>
        public DataItem BrotherLaserLegDataItem
        {
            get
            {
                if (null == fBrotherLaserLegDataItem)
                {
                    fBrotherLaserLegDataItem = new DataItem("BrotherLaserLegDataItem", SysListView3215Dup1DataGrid);
                    fBrotherLaserLegDataItem.UIMap.Scope = UIASeachScope.Children;
                    fBrotherLaserLegDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother Laser Leg Type1 Class Driver");
                }

                return fBrotherLaserLegDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherLaserLegText
        /// </summary>
        public Text BrotherLaserLegText
        {
            get
            {
                if (null == fBrotherLaserLegText)
                {
                    fBrotherLaserLegText = new Text("BrotherLaserLegText", BrotherLaserLegDataItem);
                    fBrotherLaserLegText.UIMap.Scope = UIASeachScope.Children;
                    fBrotherLaserLegText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother Laser Leg Type1 Class Driver");
                }

                return fBrotherLaserLegText;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherLaserTypDup0DataItem
        /// </summary>
        public DataItem BrotherLaserTypDup0DataItem
        {
            get
            {
                if (null == fBrotherLaserTypDup0DataItem)
                {
                    fBrotherLaserTypDup0DataItem = new DataItem("BrotherLaserTypDup0DataItem", SysListView3215Dup1DataGrid);
                    fBrotherLaserTypDup0DataItem.UIMap.Scope = UIASeachScope.Children;
                    fBrotherLaserTypDup0DataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother Laser Type1 Class Driver");
                }

                return fBrotherLaserTypDup0DataItem;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherLaserTypDup0Text
        /// </summary>
        public Text BrotherLaserTypDup0Text
        {
            get
            {
                if (null == fBrotherLaserTypDup0Text)
                {
                    fBrotherLaserTypDup0Text = new Text("BrotherLaserTypDup0Text", BrotherLaserTypDup0DataItem);
                    fBrotherLaserTypDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fBrotherLaserTypDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother Laser Type1 Class Driver");
                }

                return fBrotherLaserTypDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherLaserTypDup1DataItem
        /// </summary>
        public DataItem BrotherLaserTypDup1DataItem
        {
            get
            {
                if (null == fBrotherLaserTypDup1DataItem)
                {
                    fBrotherLaserTypDup1DataItem = new DataItem("BrotherLaserTypDup1DataItem", SysListView3215Dup1DataGrid);
                    fBrotherLaserTypDup1DataItem.UIMap.Scope = UIASeachScope.Children;
                    fBrotherLaserTypDup1DataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother Laser Type2 Class Driver");
                }

                return fBrotherLaserTypDup1DataItem;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherLaserTypDup1Text
        /// </summary>
        public Text BrotherLaserTypDup1Text
        {
            get
            {
                if (null == fBrotherLaserTypDup1Text)
                {
                    fBrotherLaserTypDup1Text = new Text("BrotherLaserTypDup1Text", BrotherLaserTypDup1DataItem);
                    fBrotherLaserTypDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fBrotherLaserTypDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother Laser Type2 Class Driver");
                }

                return fBrotherLaserTypDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherMobilePrDup0DataItem
        /// </summary>
        public DataItem BrotherMobilePrDup0DataItem
        {
            get
            {
                if (null == fBrotherMobilePrDup0DataItem)
                {
                    fBrotherMobilePrDup0DataItem = new DataItem("BrotherMobilePrDup0DataItem", SysListView3215Dup1DataGrid);
                    fBrotherMobilePrDup0DataItem.UIMap.Scope = UIASeachScope.Children;
                    fBrotherMobilePrDup0DataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother MobilePrinter TypeA1 Class Driver");
                }

                return fBrotherMobilePrDup0DataItem;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherMobilePrDup0Text
        /// </summary>
        public Text BrotherMobilePrDup0Text
        {
            get
            {
                if (null == fBrotherMobilePrDup0Text)
                {
                    fBrotherMobilePrDup0Text = new Text("BrotherMobilePrDup0Text", BrotherMobilePrDup0DataItem);
                    fBrotherMobilePrDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fBrotherMobilePrDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother MobilePrinter TypeA1 Class Driver");
                }

                return fBrotherMobilePrDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherMobilePrDup1DataItem
        /// </summary>
        public DataItem BrotherMobilePrDup1DataItem
        {
            get
            {
                if (null == fBrotherMobilePrDup1DataItem)
                {
                    fBrotherMobilePrDup1DataItem = new DataItem("BrotherMobilePrDup1DataItem", SysListView3215Dup1DataGrid);
                    fBrotherMobilePrDup1DataItem.UIMap.Scope = UIASeachScope.Children;
                    fBrotherMobilePrDup1DataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother MobilePrinter TypeA2 Class Driver");
                }

                return fBrotherMobilePrDup1DataItem;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherMobilePrDup1Text
        /// </summary>
        public Text BrotherMobilePrDup1Text
        {
            get
            {
                if (null == fBrotherMobilePrDup1Text)
                {
                    fBrotherMobilePrDup1Text = new Text("BrotherMobilePrDup1Text", BrotherMobilePrDup1DataItem);
                    fBrotherMobilePrDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fBrotherMobilePrDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother MobilePrinter TypeA2 Class Driver");
                }

                return fBrotherMobilePrDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherPCL6ClasDataItem
        /// </summary>
        public DataItem BrotherPCL6ClasDataItem
        {
            get
            {
                if (null == fBrotherPCL6ClasDataItem)
                {
                    fBrotherPCL6ClasDataItem = new DataItem("BrotherPCL6ClasDataItem", SysListView3215Dup1DataGrid);
                    fBrotherPCL6ClasDataItem.UIMap.Scope = UIASeachScope.Children;
                    fBrotherPCL6ClasDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother PCL6 Class Driver");
                }

                return fBrotherPCL6ClasDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherPCL6ClasText
        /// </summary>
        public Text BrotherPCL6ClasText
        {
            get
            {
                if (null == fBrotherPCL6ClasText)
                {
                    fBrotherPCL6ClasText = new Text("BrotherPCL6ClasText", BrotherPCL6ClasDataItem);
                    fBrotherPCL6ClasText.UIMap.Scope = UIASeachScope.Children;
                    fBrotherPCL6ClasText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother PCL6 Class Driver");
                }

                return fBrotherPCL6ClasText;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherPSClassDDataItem
        /// </summary>
        public DataItem BrotherPSClassDDataItem
        {
            get
            {
                if (null == fBrotherPSClassDDataItem)
                {
                    fBrotherPSClassDDataItem = new DataItem("BrotherPSClassDDataItem", SysListView3215Dup1DataGrid);
                    fBrotherPSClassDDataItem.UIMap.Scope = UIASeachScope.Children;
                    fBrotherPSClassDDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother PS Class Driver");
                }

                return fBrotherPSClassDDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to BrotherPSClassDText
        /// </summary>
        public Text BrotherPSClassDText
        {
            get
            {
                if (null == fBrotherPSClassDText)
                {
                    fBrotherPSClassDText = new Text("BrotherPSClassDText", BrotherPSClassDDataItem);
                    fBrotherPSClassDText.UIMap.Scope = UIASeachScope.Children;
                    fBrotherPSClassDText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brother PS Class Driver");
                }

                return fBrotherPSClassDText;
            }
        }

        /// <summary>
        /// Gets Reference to RetrievingalistI1XImage
        /// </summary>
        public Image RetrievingalistI1XImage
        {
            get
            {
                if (null == fRetrievingalistI1XImage)
                {
                    fRetrievingalistI1XImage = new Image("RetrievingalistI1XImage", AddPrinterWizarDup0Window);
                    fRetrievingalistI1XImage.UIMap.Scope = UIASeachScope.Children;
                    fRetrievingalistI1XImage.UIMap.Index = 1;
                    fRetrievingalistI1XImage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fRetrievingalistI1XImage.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1003");
                    fRetrievingalistI1XImage.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"(Retrieving a list of all devices)");
                }

                return fRetrievingalistI1XImage;
            }
        }

        /// <summary>
        /// Gets Reference to WindowsUpdateBuI1XButton
        /// </summary>
        public Button WindowsUpdateBuI1XButton
        {
            get
            {
                if (null == fWindowsUpdateBuI1XButton)
                {
                    fWindowsUpdateBuI1XButton = new Button("WindowsUpdateBuI1XButton", AddPrinterWizarDup0Window);
                    fWindowsUpdateBuI1XButton.UIMap.Scope = UIASeachScope.Children;
                    fWindowsUpdateBuI1XButton.UIMap.Index = 1;
                    fWindowsUpdateBuI1XButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fWindowsUpdateBuI1XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1566");
                    fWindowsUpdateBuI1XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Windows Update");
                }

                return fWindowsUpdateBuI1XButton;
            }
        }

        /// <summary>
        /// Gets Reference to HaveDiskButton1I1XButton
        /// </summary>
        public Button HaveDiskButton1I1XButton
        {
            get
            {
                if (null == fHaveDiskButton1I1XButton)
                {
                    fHaveDiskButton1I1XButton = new Button("HaveDiskButton1I1XButton", AddPrinterWizarDup0Window);
                    fHaveDiskButton1I1XButton.UIMap.Scope = UIASeachScope.Children;
                    fHaveDiskButton1I1XButton.UIMap.Index = 1;
                    fHaveDiskButton1I1XButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fHaveDiskButton1I1XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1567");
                    fHaveDiskButton1I1XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Have Disk...");
                }

                return fHaveDiskButton1I1XButton;
            }
        }

        /// <summary>
        /// Gets Reference to OKButton1I1XButton
        /// </summary>
        public Button OKButton1I1XButton
        {
            get
            {
                if (null == fOKButton1I1XButton)
                {
                    fOKButton1I1XButton = new Button("OKButton1I1XButton", AddPrinterWizarDup0Window);
                    fOKButton1I1XButton.UIMap.Scope = UIASeachScope.Children;
                    fOKButton1I1XButton.UIMap.Index = 1;
                    fOKButton1I1XButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButton1I1XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1");
                    fOKButton1I1XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButton1I1XButton;
            }
        }

        /// <summary>
        /// Gets Reference to CancelButton2I1XButton
        /// </summary>
        public Button CancelButton2I1XButton
        {
            get
            {
                if (null == fCancelButton2I1XButton)
                {
                    fCancelButton2I1XButton = new Button("CancelButton2I1XButton", AddPrinterWizarDup0Window);
                    fCancelButton2I1XButton.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton2I1XButton.UIMap.Index = 1;
                    fCancelButton2I1XButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButton2I1XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2");
                    fCancelButton2I1XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButton2I1XButton;
            }
        }

        /// <summary>
        /// Gets Reference to SelectthemanufaI1XDup0Text
        /// </summary>
        public Text SelectthemanufaI1XDup0Text
        {
            get
            {
                if (null == fSelectthemanufaI1XDup0Text)
                {
                    fSelectthemanufaI1XDup0Text = new Text("SelectthemanufaI1XDup0Text", AddPrinterWizarDup0Window);
                    fSelectthemanufaI1XDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fSelectthemanufaI1XDup0Text.UIMap.Index = 1;
                    fSelectthemanufaI1XDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fSelectthemanufaI1XDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1570");
                    fSelectthemanufaI1XDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Select the manufacturer and model of your printer. If your printer came with an installation disk, click Have Disk. If your printer is not listed, consult your printer documentation for a compatible printer.");
                }

                return fSelectthemanufaI1XDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to SelectthemanufaI1XDup1Text
        /// </summary>
        public Text SelectthemanufaI1XDup1Text
        {
            get
            {
                if (null == fSelectthemanufaI1XDup1Text)
                {
                    fSelectthemanufaI1XDup1Text = new Text("SelectthemanufaI1XDup1Text", AddPrinterWizarDup0Window);
                    fSelectthemanufaI1XDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fSelectthemanufaI1XDup1Text.UIMap.Index = 1;
                    fSelectthemanufaI1XDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fSelectthemanufaI1XDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"111");
                    fSelectthemanufaI1XDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Select the manufacturer and model of your printer. If your printer came with an installation disk, click Have Disk. If your printer is not listed, consult your printer documentation for a compatible printer.");
                }

                return fSelectthemanufaI1XDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to Static1854I1XImage
        /// </summary>
        public Image Static1854I1XImage
        {
            get
            {
                if (null == fStatic1854I1XImage)
                {
                    fStatic1854I1XImage = new Image("Static1854I1XImage", AddPrinterWizarDup0Window);
                    fStatic1854I1XImage.UIMap.Scope = UIASeachScope.Children;
                    fStatic1854I1XImage.UIMap.Index = 1;
                    fStatic1854I1XImage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fStatic1854I1XImage.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1854");
                }

                return fStatic1854I1XImage;
            }
        }

        /// <summary>
        /// Gets Reference to ThisdriverisdigText
        /// </summary>
        public Text ThisdriverisdigText
        {
            get
            {
                if (null == fThisdriverisdigText)
                {
                    fThisdriverisdigText = new Text("ThisdriverisdigText", AddPrinterWizarDup0Window);
                    fThisdriverisdigText.UIMap.Scope = UIASeachScope.Children;
                    fThisdriverisdigText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fThisdriverisdigText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1855");
                    fThisdriverisdigText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"This driver is digitally signed.");
                }

                return fThisdriverisdigText;
            }
        }

        /// <summary>
        /// Gets Reference to TellmewhydriverI1XHyperlink
        /// </summary>
        public Hyperlink TellmewhydriverI1XHyperlink
        {
            get
            {
                if (null == fTellmewhydriverI1XHyperlink)
                {
                    fTellmewhydriverI1XHyperlink = new Hyperlink("TellmewhydriverI1XHyperlink", AddPrinterWizarDup0Window);
                    fTellmewhydriverI1XHyperlink.UIMap.Scope = UIASeachScope.Children;
                    fTellmewhydriverI1XHyperlink.UIMap.Index = 1;
                    fTellmewhydriverI1XHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"SysLink");
                    fTellmewhydriverI1XHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1856");
                    fTellmewhydriverI1XHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Tell me why driver signing is important");
                }

                return fTellmewhydriverI1XHyperlink;
            }
        }

        /// <summary>
        /// Gets Reference to AI1XHyperlink
        /// </summary>
        public Hyperlink AI1XHyperlink
        {
            get
            {
                if (null == fAI1XHyperlink)
                {
                    fAI1XHyperlink = new Hyperlink("AI1XHyperlink", TellmewhydriverI1XHyperlink);
                    fAI1XHyperlink.UIMap.Scope = UIASeachScope.Children;
                    fAI1XHyperlink.UIMap.Index = 1;
                }

                return fAI1XHyperlink;
            }
        }

        /// <summary>
        /// Gets Reference to AddPrinterWizarI1XTitleBar
        /// </summary>
        public TitleBar AddPrinterWizarI1XTitleBar
        {
            get
            {
                if (null == fAddPrinterWizarI1XTitleBar)
                {
                    fAddPrinterWizarI1XTitleBar = new TitleBar("AddPrinterWizarI1XTitleBar", AddPrinterWizarDup0Window);
                    fAddPrinterWizarI1XTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fAddPrinterWizarI1XTitleBar.UIMap.Index = 1;
                    fAddPrinterWizarI1XTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fAddPrinterWizarI1XTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Printer Wizard");
                }

                return fAddPrinterWizarI1XTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemMenuBarSyI1XMenuBar
        /// </summary>
        public MenuBar SystemMenuBarSyI1XMenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyI1XMenuBar)
                {
                    fSystemMenuBarSyI1XMenuBar = new MenuBar("SystemMenuBarSyI1XMenuBar", AddPrinterWizarI1XTitleBar);
                    fSystemMenuBarSyI1XMenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyI1XMenuBar.UIMap.Index = 1;
                    fSystemMenuBarSyI1XMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyI1XMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyI1XMenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemItem1I1XMenuItem
        /// </summary>
        public MenuItem SystemItem1I1XMenuItem
        {
            get
            {
                if (null == fSystemItem1I1XMenuItem)
                {
                    fSystemItem1I1XMenuItem = new MenuItem("SystemItem1I1XMenuItem", SystemMenuBarSyI1XMenuBar);
                    fSystemItem1I1XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I1XMenuItem.UIMap.Index = 1;
                    fSystemItem1I1XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1I1XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1I1XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to ContexthelpHelpI1XButton
        /// </summary>
        public Button ContexthelpHelpI1XButton
        {
            get
            {
                if (null == fContexthelpHelpI1XButton)
                {
                    fContexthelpHelpI1XButton = new Button("ContexthelpHelpI1XButton", AddPrinterWizarI1XTitleBar);
                    fContexthelpHelpI1XButton.UIMap.Scope = UIASeachScope.Children;
                    fContexthelpHelpI1XButton.UIMap.Index = 1;
                    fContexthelpHelpI1XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Help");
                    fContexthelpHelpI1XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Context help");
                }

                return fContexthelpHelpI1XButton;
            }
        }

        /// <summary>
        /// Gets Reference to CloseCloseI1XButton
        /// </summary>
        public Button CloseCloseI1XButton
        {
            get
            {
                if (null == fCloseCloseI1XButton)
                {
                    fCloseCloseI1XButton = new Button("CloseCloseI1XButton", AddPrinterWizarI1XTitleBar);
                    fCloseCloseI1XButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseI1XButton.UIMap.Index = 1;
                    fCloseCloseI1XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseI1XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseI1XButton;
            }
        }

        /// <summary>
        /// Gets Reference to WindowsPrinterIPane
        /// </summary>
        public Pane WindowsPrinterIPane
        {
            get
            {
                if (null == fWindowsPrinterIPane)
                {
                    fWindowsPrinterIPane = new Pane("WindowsPrinterIPane", WindowsPrinterIWindow);
                    fWindowsPrinterIPane.UIMap.Scope = UIASeachScope.Children;
                    fWindowsPrinterIPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TaskDialog");
                    fWindowsPrinterIPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Window");
                    fWindowsPrinterIPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Windows Printer Installation");
                }

                return fWindowsPrinterIPane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI0XDup0Pane
        /// </summary>
        public Pane CtrlNotifySinkI0XDup0Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI0XDup0Pane)
                {
                    fCtrlNotifySinkI0XDup0Pane = new Pane("CtrlNotifySinkI0XDup0Pane", WindowsPrinterIPane);
                    fCtrlNotifySinkI0XDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI0XDup0Pane.UIMap.Index = 0;
                    fCtrlNotifySinkI0XDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI0XDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI1XDup0Pane
        /// </summary>
        public Pane CtrlNotifySinkI1XDup0Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI1XDup0Pane)
                {
                    fCtrlNotifySinkI1XDup0Pane = new Pane("CtrlNotifySinkI1XDup0Pane", WindowsPrinterIPane);
                    fCtrlNotifySinkI1XDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI1XDup0Pane.UIMap.Index = 1;
                    fCtrlNotifySinkI1XDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI1XDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to ConnectingtohttText
        /// </summary>
        public Text ConnectingtohttText
        {
            get
            {
                if (null == fConnectingtohttText)
                {
                    fConnectingtohttText = new Text("ConnectingtohttText", WindowsPrinterIPane);
                    fConnectingtohttText.UIMap.Scope = UIASeachScope.Children;
                    fConnectingtohttText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fConnectingtohttText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"MainInstruction");
                    fConnectingtohttText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Connecting to http://15.77.231.78:80");
                }

                return fConnectingtohttText;
            }
        }

        /// <summary>
        /// Gets Reference to ElementContentText
        /// </summary>
        public Text ElementContentText
        {
            get
            {
                if (null == fElementContentText)
                {
                    fElementContentText = new Text("ElementContentText", WindowsPrinterIPane);
                    fElementContentText.UIMap.Scope = UIASeachScope.Children;
                    fElementContentText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fElementContentText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ContentText");
                }

                return fElementContentText;
            }
        }

        /// <summary>
        /// Gets Reference to CCProgressBarProgressBar
        /// </summary>
        public ProgressBar CCProgressBarProgressBar
        {
            get
            {
                if (null == fCCProgressBarProgressBar)
                {
                    fCCProgressBarProgressBar = new ProgressBar("CCProgressBarProgressBar", WindowsPrinterIPane);
                    fCCProgressBarProgressBar.UIMap.Scope = UIASeachScope.Children;
                    fCCProgressBarProgressBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCProgressBar");
                    fCCProgressBarProgressBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ProgressBar");
                }

                return fCCProgressBarProgressBar;
            }
        }

        /// <summary>
        /// Gets Reference to CancelCCPushButDup0Button
        /// </summary>
        public Button CancelCCPushButDup0Button
        {
            get
            {
                if (null == fCancelCCPushButDup0Button)
                {
                    fCancelCCPushButDup0Button = new Button("CancelCCPushButDup0Button", WindowsPrinterIPane);
                    fCancelCCPushButDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelCCPushButDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCPushButton");
                    fCancelCCPushButDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"CommandButton_2");
                    fCancelCCPushButDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelCCPushButDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to WindowsPrinterITitleBar
        /// </summary>
        public TitleBar WindowsPrinterITitleBar
        {
            get
            {
                if (null == fWindowsPrinterITitleBar)
                {
                    fWindowsPrinterITitleBar = new TitleBar("WindowsPrinterITitleBar", WindowsPrinterIWindow);
                    fWindowsPrinterITitleBar.UIMap.Scope = UIASeachScope.Children;
                    fWindowsPrinterITitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fWindowsPrinterITitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Windows Printer Installation");
                }

                return fWindowsPrinterITitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemMenuBarSyDup0MenuBar
        /// </summary>
        public MenuBar SystemMenuBarSyDup0MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup0MenuBar)
                {
                    fSystemMenuBarSyDup0MenuBar = new MenuBar("SystemMenuBarSyDup0MenuBar", WindowsPrinterITitleBar);
                    fSystemMenuBarSyDup0MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyDup0MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemItem1I2XMenuItem
        /// </summary>
        public MenuItem SystemItem1I2XMenuItem
        {
            get
            {
                if (null == fSystemItem1I2XMenuItem)
                {
                    fSystemItem1I2XMenuItem = new MenuItem("SystemItem1I2XMenuItem", SystemMenuBarSyDup0MenuBar);
                    fSystemItem1I2XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I2XMenuItem.UIMap.Index = 2;
                    fSystemItem1I2XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1I2XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1I2XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to CloseCloseDup0Button
        /// </summary>
        public Button CloseCloseDup0Button
        {
            get
            {
                if (null == fCloseCloseDup0Button)
                {
                    fCloseCloseDup0Button = new Button("CloseCloseDup0Button", WindowsPrinterITitleBar);
                    fCloseCloseDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to FindaprinterbyoPane
        /// </summary>
        public Pane FindaprinterbyoPane
        {
            get
            {
                if (null == fFindaprinterbyoPane)
                {
                    fFindaprinterbyoPane = new Pane("FindaprinterbyoPane", AddPrinterNativWindow);
                    fFindaprinterbyoPane.UIMap.Scope = UIASeachScope.Children;
                    fFindaprinterbyoPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"HWNDElement");
                    fFindaprinterbyoPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"dialogroot");
                    fFindaprinterbyoPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Find a printer by other options");
                }

                return fFindaprinterbyoPane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI0XDup1Pane
        /// </summary>
        public Pane CtrlNotifySinkI0XDup1Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI0XDup1Pane)
                {
                    fCtrlNotifySinkI0XDup1Pane = new Pane("CtrlNotifySinkI0XDup1Pane", FindaprinterbyoPane);
                    fCtrlNotifySinkI0XDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI0XDup1Pane.UIMap.Index = 0;
                    fCtrlNotifySinkI0XDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI0XDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI1XDup1Pane
        /// </summary>
        public Pane CtrlNotifySinkI1XDup1Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI1XDup1Pane)
                {
                    fCtrlNotifySinkI1XDup1Pane = new Pane("CtrlNotifySinkI1XDup1Pane", FindaprinterbyoPane);
                    fCtrlNotifySinkI1XDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI1XDup1Pane.UIMap.Index = 1;
                    fCtrlNotifySinkI1XDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI1XDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI2XDup0Pane
        /// </summary>
        public Pane CtrlNotifySinkI2XDup0Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI2XDup0Pane)
                {
                    fCtrlNotifySinkI2XDup0Pane = new Pane("CtrlNotifySinkI2XDup0Pane", FindaprinterbyoPane);
                    fCtrlNotifySinkI2XDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI2XDup0Pane.UIMap.Index = 2;
                    fCtrlNotifySinkI2XDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI2XDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to BackButtonbackbButton
        /// </summary>
        public Button BackButtonbackbButton
        {
            get
            {
                if (null == fBackButtonbackbButton)
                {
                    fBackButtonbackbButton = new Button("BackButtonbackbButton", FindaprinterbyoPane);
                    fBackButtonbackbButton.UIMap.Scope = UIASeachScope.Children;
                    fBackButtonbackbButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fBackButtonbackbButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"backbutton");
                    fBackButtonbackbButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Back");
                }

                return fBackButtonbackbButton;
            }
        }

        /// <summary>
        /// Gets Reference to ElementwizardicDup0Image
        /// </summary>
        public Image ElementwizardicDup0Image
        {
            get
            {
                if (null == fElementwizardicDup0Image)
                {
                    fElementwizardicDup0Image = new Image("ElementwizardicDup0Image", FindaprinterbyoPane);
                    fElementwizardicDup0Image.UIMap.Scope = UIASeachScope.Children;
                    fElementwizardicDup0Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fElementwizardicDup0Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"wizardicon");
                }

                return fElementwizardicDup0Image;
            }
        }

        /// <summary>
        /// Gets Reference to AddPrinterElemeText
        /// </summary>
        public Text AddPrinterElemeText
        {
            get
            {
                if (null == fAddPrinterElemeText)
                {
                    fAddPrinterElemeText = new Text("AddPrinterElemeText", FindaprinterbyoPane);
                    fAddPrinterElemeText.UIMap.Scope = UIASeachScope.Children;
                    fAddPrinterElemeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fAddPrinterElemeText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"wizardtitle");
                    fAddPrinterElemeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Printer");
                }

                return fAddPrinterElemeText;
            }
        }

        /// <summary>
        /// Gets Reference to FindaprinterbyoText
        /// </summary>
        public Text FindaprinterbyoText
        {
            get
            {
                if (null == fFindaprinterbyoText)
                {
                    fFindaprinterbyoText = new Text("FindaprinterbyoText", FindaprinterbyoPane);
                    fFindaprinterbyoText.UIMap.Scope = UIASeachScope.Children;
                    fFindaprinterbyoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fFindaprinterbyoText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"headertitle");
                    fFindaprinterbyoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Find a printer by other options");
                }

                return fFindaprinterbyoText;
            }
        }

        /// <summary>
        /// Gets Reference to NetworkprintertPane
        /// </summary>
        public Pane NetworkprintertPane
        {
            get
            {
                if (null == fNetworkprintertPane)
                {
                    fNetworkprintertPane = new Pane("NetworkprintertPane", FindaprinterbyoPane);
                    fNetworkprintertPane.UIMap.Scope = UIASeachScope.Children;
                    fNetworkprintertPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Win32PropSheetPageHost");
                    fNetworkprintertPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"{D6971210-2692-4D1D-957C-C5351D4FB5DF}");
                    fNetworkprintertPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Network printer type");
                }

                return fNetworkprintertPane;
            }
        }

        /// <summary>
        /// Gets Reference to MyprinterisalitRadioButton
        /// </summary>
        public RadioButton MyprinterisalitRadioButton
        {
            get
            {
                if (null == fMyprinterisalitRadioButton)
                {
                    fMyprinterisalitRadioButton = new RadioButton("MyprinterisalitRadioButton", NetworkprintertPane);
                    fMyprinterisalitRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fMyprinterisalitRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fMyprinterisalitRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1042");
                    fMyprinterisalitRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"My printer is a little older. Help me find it.");
                }

                return fMyprinterisalitRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to FindaprinterintRadioButton
        /// </summary>
        public RadioButton FindaprinterintRadioButton
        {
            get
            {
                if (null == fFindaprinterintRadioButton)
                {
                    fFindaprinterintRadioButton = new RadioButton("FindaprinterintRadioButton", NetworkprintertPane);
                    fFindaprinterintRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fFindaprinterintRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fFindaprinterintRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1033");
                    fFindaprinterintRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Find a printer in the directory, based on location or feature");
                }

                return fFindaprinterintRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to SelectasharedprRadioButton
        /// </summary>
        public RadioButton SelectasharedprRadioButton
        {
            get
            {
                if (null == fSelectasharedprRadioButton)
                {
                    fSelectasharedprRadioButton = new RadioButton("SelectasharedprRadioButton", NetworkprintertPane);
                    fSelectasharedprRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fSelectasharedprRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fSelectasharedprRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1034");
                    fSelectasharedprRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Select a shared printer by name");
                }

                return fSelectasharedprRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to AddaprinterusinRadioButton
        /// </summary>
        public RadioButton AddaprinterusinRadioButton
        {
            get
            {
                if (null == fAddaprinterusinRadioButton)
                {
                    fAddaprinterusinRadioButton = new RadioButton("AddaprinterusinRadioButton", NetworkprintertPane);
                    fAddaprinterusinRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fAddaprinterusinRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fAddaprinterusinRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1036");
                    fAddaprinterusinRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a printer using a TCP/IP address or hostname");
                }

                return fAddaprinterusinRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to AddaBluetoothwiRadioButton
        /// </summary>
        public RadioButton AddaBluetoothwiRadioButton
        {
            get
            {
                if (null == fAddaBluetoothwiRadioButton)
                {
                    fAddaBluetoothwiRadioButton = new RadioButton("AddaBluetoothwiRadioButton", NetworkprintertPane);
                    fAddaBluetoothwiRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fAddaBluetoothwiRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fAddaBluetoothwiRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1041");
                    fAddaBluetoothwiRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a Bluetooth, wireless or network discoverable printer");
                }

                return fAddaBluetoothwiRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to AddalocalprinteRadioButton
        /// </summary>
        public RadioButton AddalocalprinteRadioButton
        {
            get
            {
                if (null == fAddalocalprinteRadioButton)
                {
                    fAddalocalprinteRadioButton = new RadioButton("AddalocalprinteRadioButton", NetworkprintertPane);
                    fAddalocalprinteRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fAddalocalprinteRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fAddalocalprinteRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1039");
                    fAddalocalprinteRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a local printer or network printer with manual settings");
                }

                return fAddalocalprinteRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to aAddingprintersEdit
        /// </summary>
        public Edit aAddingprintersEdit
        {
            get
            {
                if (null == faAddingprintersEdit)
                {
                    faAddingprintersEdit = new Edit("aAddingprintersEdit", NetworkprintertPane);
                    faAddingprintersEdit.UIMap.Scope = UIASeachScope.Children;
                    faAddingprintersEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Edit");
                    faAddingprintersEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4655");
                    faAddingprintersEdit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"<a>Adding printers by TCP/IP address or hostname</a>");
                }

                return faAddingprintersEdit;
            }
        }

        /// <summary>
        /// Gets Reference to BrowseButton103Button
        /// </summary>
        public Button BrowseButton103Button
        {
            get
            {
                if (null == fBrowseButton103Button)
                {
                    fBrowseButton103Button = new Button("BrowseButton103Button", NetworkprintertPane);
                    fBrowseButton103Button.UIMap.Scope = UIASeachScope.Children;
                    fBrowseButton103Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fBrowseButton103Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1038");
                    fBrowseButton103Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Browse...");
                }

                return fBrowseButton103Button;
            }
        }

        /// <summary>
        /// Gets Reference to ExamplecomputerText
        /// </summary>
        public Text ExamplecomputerText
        {
            get
            {
                if (null == fExamplecomputerText)
                {
                    fExamplecomputerText = new Text("ExamplecomputerText", NetworkprintertPane);
                    fExamplecomputerText.UIMap.Scope = UIASeachScope.Children;
                    fExamplecomputerText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fExamplecomputerText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1037");
                    fExamplecomputerText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Example: \\computername\printername or 
http://computername/printers/printername/.printer");
                }

                return fExamplecomputerText;
            }
        }

        /// <summary>
        /// Gets Reference to NextCCPushButtoDup0Button
        /// </summary>
        public Button NextCCPushButtoDup0Button
        {
            get
            {
                if (null == fNextCCPushButtoDup0Button)
                {
                    fNextCCPushButtoDup0Button = new Button("NextCCPushButtoDup0Button", FindaprinterbyoPane);
                    fNextCCPushButtoDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fNextCCPushButtoDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCPushButton");
                    fNextCCPushButtoDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"nextbutton");
                    fNextCCPushButtoDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Next");
                }

                return fNextCCPushButtoDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to CancelCCPushButDup1Button
        /// </summary>
        public Button CancelCCPushButDup1Button
        {
            get
            {
                if (null == fCancelCCPushButDup1Button)
                {
                    fCancelCCPushButDup1Button = new Button("CancelCCPushButDup1Button", FindaprinterbyoPane);
                    fCancelCCPushButDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelCCPushButDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCPushButton");
                    fCancelCCPushButDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cancelbutton");
                    fCancelCCPushButDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelCCPushButDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to AddPrinterTitleBar
        /// </summary>
        public TitleBar AddPrinterTitleBar
        {
            get
            {
                if (null == fAddPrinterTitleBar)
                {
                    fAddPrinterTitleBar = new TitleBar("AddPrinterTitleBar", AddPrinterNativWindow);
                    fAddPrinterTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fAddPrinterTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fAddPrinterTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Printer");
                }

                return fAddPrinterTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemMenuBarSyDup1MenuBar
        /// </summary>
        public MenuBar SystemMenuBarSyDup1MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup1MenuBar)
                {
                    fSystemMenuBarSyDup1MenuBar = new MenuBar("SystemMenuBarSyDup1MenuBar", AddPrinterTitleBar);
                    fSystemMenuBarSyDup1MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup1MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyDup1MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyDup1MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemItem1I3XMenuItem
        /// </summary>
        public MenuItem SystemItem1I3XMenuItem
        {
            get
            {
                if (null == fSystemItem1I3XMenuItem)
                {
                    fSystemItem1I3XMenuItem = new MenuItem("SystemItem1I3XMenuItem", SystemMenuBarSyDup1MenuBar);
                    fSystemItem1I3XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I3XMenuItem.UIMap.Index = 3;
                    fSystemItem1I3XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1I3XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1I3XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to CloseCloseDup1Button
        /// </summary>
        public Button CloseCloseDup1Button
        {
            get
            {
                if (null == fCloseCloseDup1Button)
                {
                    fCloseCloseDup1Button = new Button("CloseCloseDup1Button", AddPrinterTitleBar);
                    fCloseCloseDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to HWNDElementdialPane
        /// </summary>
        public Pane HWNDElementdialPane
        {
            get
            {
                if (null == fHWNDElementdialPane)
                {
                    fHWNDElementdialPane = new Pane("HWNDElementdialPane", AddadeviceNativWindow);
                    fHWNDElementdialPane.UIMap.Scope = UIASeachScope.Children;
                    fHWNDElementdialPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"HWNDElement");
                    fHWNDElementdialPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"dialogroot");
                }

                return fHWNDElementdialPane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI0XDup2Pane
        /// </summary>
        public Pane CtrlNotifySinkI0XDup2Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI0XDup2Pane)
                {
                    fCtrlNotifySinkI0XDup2Pane = new Pane("CtrlNotifySinkI0XDup2Pane", HWNDElementdialPane);
                    fCtrlNotifySinkI0XDup2Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI0XDup2Pane.UIMap.Index = 0;
                    fCtrlNotifySinkI0XDup2Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI0XDup2Pane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI1XDup2Pane
        /// </summary>
        public Pane CtrlNotifySinkI1XDup2Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI1XDup2Pane)
                {
                    fCtrlNotifySinkI1XDup2Pane = new Pane("CtrlNotifySinkI1XDup2Pane", HWNDElementdialPane);
                    fCtrlNotifySinkI1XDup2Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI1XDup2Pane.UIMap.Index = 1;
                    fCtrlNotifySinkI1XDup2Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI1XDup2Pane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI2XDup1Pane
        /// </summary>
        public Pane CtrlNotifySinkI2XDup1Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI2XDup1Pane)
                {
                    fCtrlNotifySinkI2XDup1Pane = new Pane("CtrlNotifySinkI2XDup1Pane", HWNDElementdialPane);
                    fCtrlNotifySinkI2XDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI2XDup1Pane.UIMap.Index = 2;
                    fCtrlNotifySinkI2XDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI2XDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to ElementwizardicDup1Image
        /// </summary>
        public Image ElementwizardicDup1Image
        {
            get
            {
                if (null == fElementwizardicDup1Image)
                {
                    fElementwizardicDup1Image = new Image("ElementwizardicDup1Image", HWNDElementdialPane);
                    fElementwizardicDup1Image.UIMap.Scope = UIASeachScope.Children;
                    fElementwizardicDup1Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fElementwizardicDup1Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"wizardicon");
                }

                return fElementwizardicDup1Image;
            }
        }

        /// <summary>
        /// Gets Reference to AddadeviceElemeText
        /// </summary>
        public Text AddadeviceElemeText
        {
            get
            {
                if (null == fAddadeviceElemeText)
                {
                    fAddadeviceElemeText = new Text("AddadeviceElemeText", HWNDElementdialPane);
                    fAddadeviceElemeText.UIMap.Scope = UIASeachScope.Children;
                    fAddadeviceElemeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fAddadeviceElemeText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"wizardtitle");
                    fAddadeviceElemeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a device");
                }

                return fAddadeviceElemeText;
            }
        }

        /// <summary>
        /// Gets Reference to ElementheadertiText
        /// </summary>
        public Text ElementheadertiText
        {
            get
            {
                if (null == fElementheadertiText)
                {
                    fElementheadertiText = new Text("ElementheadertiText", HWNDElementdialPane);
                    fElementheadertiText.UIMap.Scope = UIASeachScope.Children;
                    fElementheadertiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fElementheadertiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"headertitle");
                }

                return fElementheadertiText;
            }
        }

        /// <summary>
        /// Gets Reference to XElement46FB06FPane
        /// </summary>
        public Pane XElement46FB06FPane
        {
            get
            {
                if (null == fXElement46FB06FPane)
                {
                    fXElement46FB06FPane = new Pane("XElement46FB06FPane", HWNDElementdialPane);
                    fXElement46FB06FPane.UIMap.Scope = UIASeachScope.Children;
                    fXElement46FB06FPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"XElement");
                    fXElement46FB06FPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"{46FB06F8-AAEC-4696-843E-32B4D9341017}");
                }

                return fXElement46FB06FPane;
            }
        }

        /// <summary>
        /// Gets Reference to XBabyPane
        /// </summary>
        public Pane XBabyPane
        {
            get
            {
                if (null == fXBabyPane)
                {
                    fXBabyPane = new Pane("XBabyPane", XElement46FB06FPane);
                    fXBabyPane.UIMap.Scope = UIASeachScope.Children;
                    fXBabyPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"XBaby");
                }

                return fXBabyPane;
            }
        }

        /// <summary>
        /// Gets Reference to ElementeClassicPane
        /// </summary>
        public Pane ElementeClassicPane
        {
            get
            {
                if (null == fElementeClassicPane)
                {
                    fElementeClassicPane = new Pane("ElementeClassicPane", XBabyPane);
                    fElementeClassicPane.UIMap.Scope = UIASeachScope.Children;
                    fElementeClassicPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fElementeClassicPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eClassicBody");
                }

                return fElementeClassicPane;
            }
        }

        /// <summary>
        /// Gets Reference to ChooseadeviceorText
        /// </summary>
        public Text ChooseadeviceorText
        {
            get
            {
                if (null == fChooseadeviceorText)
                {
                    fChooseadeviceorText = new Text("ChooseadeviceorText", ElementeClassicPane);
                    fChooseadeviceorText.UIMap.Scope = UIASeachScope.Children;
                    fChooseadeviceorText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fChooseadeviceorText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eTitleText");
                    fChooseadeviceorText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Choose a device or printer to add to this PC");
                }

                return fChooseadeviceorText;
            }
        }

        /// <summary>
        /// Gets Reference to SelectadeviceElText
        /// </summary>
        public Text SelectadeviceElText
        {
            get
            {
                if (null == fSelectadeviceElText)
                {
                    fSelectadeviceElText = new Text("SelectadeviceElText", ElementeClassicPane);
                    fSelectadeviceElText.UIMap.Scope = UIASeachScope.Children;
                    fSelectadeviceElText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fSelectadeviceElText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eProgressText");
                    fSelectadeviceElText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Select a device");
                }

                return fSelectadeviceElText;
            }
        }

        /// <summary>
        /// Gets Reference to VerticalCCVScroScrollBar
        /// </summary>
        public ScrollBar VerticalCCVScroScrollBar
        {
            get
            {
                if (null == fVerticalCCVScroScrollBar)
                {
                    fVerticalCCVScroScrollBar = new ScrollBar("VerticalCCVScroScrollBar", ElementeClassicPane);
                    fVerticalCCVScroScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fVerticalCCVScroScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCVScrollBar");
                    fVerticalCCVScroScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                    fVerticalCCVScroScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Vertical");
                }

                return fVerticalCCVScroScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to LineupButton
        /// </summary>
        public Button LineupButton
        {
            get
            {
                if (null == fLineupButton)
                {
                    fLineupButton = new Button("LineupButton", VerticalCCVScroScrollBar);
                    fLineupButton.UIMap.Scope = UIASeachScope.Children;
                    fLineupButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Line up");
                }

                return fLineupButton;
            }
        }

        /// <summary>
        /// Gets Reference to PositionCustom
        /// </summary>
        public Custom PositionCustom
        {
            get
            {
                if (null == fPositionCustom)
                {
                    fPositionCustom = new Custom("PositionCustom", VerticalCCVScroScrollBar);
                    fPositionCustom.UIMap.Scope = UIASeachScope.Children;
                    fPositionCustom.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Position");
                }

                return fPositionCustom;
            }
        }

        /// <summary>
        /// Gets Reference to PagedownButton
        /// </summary>
        public Button PagedownButton
        {
            get
            {
                if (null == fPagedownButton)
                {
                    fPagedownButton = new Button("PagedownButton", VerticalCCVScroScrollBar);
                    fPagedownButton.UIMap.Scope = UIASeachScope.Children;
                    fPagedownButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Page down");
                }

                return fPagedownButton;
            }
        }

        /// <summary>
        /// Gets Reference to LinedownButton
        /// </summary>
        public Button LinedownButton
        {
            get
            {
                if (null == fLinedownButton)
                {
                    fLinedownButton = new Button("LinedownButton", VerticalCCVScroScrollBar);
                    fLinedownButton.UIMap.Scope = UIASeachScope.Children;
                    fLinedownButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Line down");
                }

                return fLinedownButton;
            }
        }

        /// <summary>
        /// Gets Reference to DeviceListElemeList
        /// </summary>
        public List DeviceListElemeList
        {
            get
            {
                if (null == fDeviceListElemeList)
                {
                    fDeviceListElemeList = new List("DeviceListElemeList", ElementeClassicPane);
                    fDeviceListElemeList.UIMap.Scope = UIASeachScope.Children;
                    fDeviceListElemeList.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fDeviceListElemeList.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eDeviceList");
                    fDeviceListElemeList.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device List");
                }

                return fDeviceListElemeList;
            }
        }

        /// <summary>
        /// Gets Reference to HostnameCanHaveButton
        /// </summary>
        public Button HostnameCanHaveButton
        {
            get
            {
                if (null == fHostnameCanHaveButton)
                {
                    fHostnameCanHaveButton = new Button("HostnameCanHaveButton", DeviceListElemeList);
                    fHostnameCanHaveButton.UIMap.Scope = UIASeachScope.Children;
                    fHostnameCanHaveButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fHostnameCanHaveButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"32b62d16-c61b-5145-7429-5c423f53c9bb");
                    fHostnameCanHaveButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HostnameCanHaveAMaximumBoundaryValueOfSixty-ThreeCharactersOnly (HP PageWide Pro MFP 772-777)");
                }

                return fHostnameCanHaveButton;
            }
        }

        /// <summary>
        /// Gets Reference to HostnameCanHaveText
        /// </summary>
        public Text HostnameCanHaveText
        {
            get
            {
                if (null == fHostnameCanHaveText)
                {
                    fHostnameCanHaveText = new Text("HostnameCanHaveText", HostnameCanHaveButton);
                    fHostnameCanHaveText.UIMap.Scope = UIASeachScope.Children;
                    fHostnameCanHaveText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fHostnameCanHaveText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fHostnameCanHaveText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HostnameCanHaveAMaximumBoundaryValueOfSixty-ThreeCharactersOnly (HP PageWide Pro MFP 772-777)");
                }

                return fHostnameCanHaveText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterInkjetprDup0Text
        /// </summary>
        public Text PrinterInkjetprDup0Text
        {
            get
            {
                if (null == fPrinterInkjetprDup0Text)
                {
                    fPrinterInkjetprDup0Text = new Text("PrinterInkjetprDup0Text", HostnameCanHaveButton);
                    fPrinterInkjetprDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterInkjetprDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterInkjetprDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterInkjetprDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer, Ink-jet printer, Scanner");
                }

                return fPrinterInkjetprDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to HPB036AFHPOfficButton
        /// </summary>
        public Button HPB036AFHPOfficButton
        {
            get
            {
                if (null == fHPB036AFHPOfficButton)
                {
                    fHPB036AFHPOfficButton = new Button("HPB036AFHPOfficButton", DeviceListElemeList);
                    fHPB036AFHPOfficButton.UIMap.Scope = UIASeachScope.Children;
                    fHPB036AFHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fHPB036AFHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d82727b9-5823-53ee-0706-97e793a2bfab");
                    fHPB036AFHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HPB036AF (HP OfficeJet Pro 7720 series)");
                }

                return fHPB036AFHPOfficButton;
            }
        }

        /// <summary>
        /// Gets Reference to HPB036AFHPOfficText
        /// </summary>
        public Text HPB036AFHPOfficText
        {
            get
            {
                if (null == fHPB036AFHPOfficText)
                {
                    fHPB036AFHPOfficText = new Text("HPB036AFHPOfficText", HPB036AFHPOfficButton);
                    fHPB036AFHPOfficText.UIMap.Scope = UIASeachScope.Children;
                    fHPB036AFHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fHPB036AFHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fHPB036AFHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HPB036AF (HP OfficeJet Pro 7720 series)");
                }

                return fHPB036AFHPOfficText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterInkjetprDup1Text
        /// </summary>
        public Text PrinterInkjetprDup1Text
        {
            get
            {
                if (null == fPrinterInkjetprDup1Text)
                {
                    fPrinterInkjetprDup1Text = new Text("PrinterInkjetprDup1Text", HPB036AFHPOfficButton);
                    fPrinterInkjetprDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterInkjetprDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterInkjetprDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterInkjetprDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer, Ink-jet printer, Scanner");
                }

                return fPrinterInkjetprDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to jaguar6HPDesignButton
        /// </summary>
        public Button jaguar6HPDesignButton
        {
            get
            {
                if (null == fjaguar6HPDesignButton)
                {
                    fjaguar6HPDesignButton = new Button("jaguar6HPDesignButton", DeviceListElemeList);
                    fjaguar6HPDesignButton.UIMap.Scope = UIASeachScope.Children;
                    fjaguar6HPDesignButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fjaguar6HPDesignButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"00000000-0000-0000-0000-a0d3c1c5b56b");
                    fjaguar6HPDesignButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"jaguar6 (HP DesignJet T1700 PostScript)");
                }

                return fjaguar6HPDesignButton;
            }
        }

        /// <summary>
        /// Gets Reference to jaguar6HPDesignText
        /// </summary>
        public Text jaguar6HPDesignText
        {
            get
            {
                if (null == fjaguar6HPDesignText)
                {
                    fjaguar6HPDesignText = new Text("jaguar6HPDesignText", jaguar6HPDesignButton);
                    fjaguar6HPDesignText.UIMap.Scope = UIASeachScope.Children;
                    fjaguar6HPDesignText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fjaguar6HPDesignText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fjaguar6HPDesignText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"jaguar6 (HP DesignJet T1700 PostScript)");
                }

                return fjaguar6HPDesignText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup0Text
        /// </summary>
        public Text PrinterRichTextDup0Text
        {
            get
            {
                if (null == fPrinterRichTextDup0Text)
                {
                    fPrinterRichTextDup0Text = new Text("PrinterRichTextDup0Text", jaguar6HPDesignButton);
                    fPrinterRichTextDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTFCHPOfficButton
        /// </summary>
        public Button DIRECTFCHPOfficButton
        {
            get
            {
                if (null == fDIRECTFCHPOfficButton)
                {
                    fDIRECTFCHPOfficButton = new Button("DIRECTFCHPOfficButton", DeviceListElemeList);
                    fDIRECTFCHPOfficButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTFCHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECTFCHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8f0ed32b-6b5c-55e0-e892-b1c6e834efe6");
                    fDIRECTFCHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-FC-HP OfficeJet Pro 7720");
                }

                return fDIRECTFCHPOfficButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTFCHPOfficText
        /// </summary>
        public Text DIRECTFCHPOfficText
        {
            get
            {
                if (null == fDIRECTFCHPOfficText)
                {
                    fDIRECTFCHPOfficText = new Text("DIRECTFCHPOfficText", DIRECTFCHPOfficButton);
                    fDIRECTFCHPOfficText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTFCHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECTFCHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECTFCHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-FC-HP OfficeJet Pro 7720");
                }

                return fDIRECTFCHPOfficText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterInkjetprDup2Text
        /// </summary>
        public Text PrinterInkjetprDup2Text
        {
            get
            {
                if (null == fPrinterInkjetprDup2Text)
                {
                    fPrinterInkjetprDup2Text = new Text("PrinterInkjetprDup2Text", DIRECTFCHPOfficButton);
                    fPrinterInkjetprDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterInkjetprDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterInkjetprDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterInkjetprDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer, Ink-jet printer, Scanner");
                }

                return fPrinterInkjetprDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI06B4E6HPLaseButton
        /// </summary>
        public Button NPI06B4E6HPLaseButton
        {
            get
            {
                if (null == fNPI06B4E6HPLaseButton)
                {
                    fNPI06B4E6HPLaseButton = new Button("NPI06B4E6HPLaseButton", DeviceListElemeList);
                    fNPI06B4E6HPLaseButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI06B4E6HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fNPI06B4E6HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9866510e-470f-4631-b20d-3ca82a06b4e6");
                    fNPI06B4E6HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI06B4E6 (HP LaserJet M506)");
                }

                return fNPI06B4E6HPLaseButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI06B4E6HPLaseText
        /// </summary>
        public Text NPI06B4E6HPLaseText
        {
            get
            {
                if (null == fNPI06B4E6HPLaseText)
                {
                    fNPI06B4E6HPLaseText = new Text("NPI06B4E6HPLaseText", NPI06B4E6HPLaseButton);
                    fNPI06B4E6HPLaseText.UIMap.Scope = UIASeachScope.Children;
                    fNPI06B4E6HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fNPI06B4E6HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI06B4E6HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI06B4E6 (HP LaserJet M506)");
                }

                return fNPI06B4E6HPLaseText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup1Text
        /// </summary>
        public Text PrinterRichTextDup1Text
        {
            get
            {
                if (null == fPrinterRichTextDup1Text)
                {
                    fPrinterRichTextDup1Text = new Text("PrinterRichTextDup1Text", NPI06B4E6HPLaseButton);
                    fPrinterRichTextDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI270DD5HPColoButton
        /// </summary>
        public Button NPI270DD5HPColoButton
        {
            get
            {
                if (null == fNPI270DD5HPColoButton)
                {
                    fNPI270DD5HPColoButton = new Button("NPI270DD5HPColoButton", DeviceListElemeList);
                    fNPI270DD5HPColoButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI270DD5HPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fNPI270DD5HPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9a399391-4f07-11e6-aea9-ec8eb5270dd5");
                    fNPI270DD5HPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI270DD5 (HP Color LaserJet FlowMFP M577)");
                }

                return fNPI270DD5HPColoButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI270DD5HPColoText
        /// </summary>
        public Text NPI270DD5HPColoText
        {
            get
            {
                if (null == fNPI270DD5HPColoText)
                {
                    fNPI270DD5HPColoText = new Text("NPI270DD5HPColoText", NPI270DD5HPColoButton);
                    fNPI270DD5HPColoText.UIMap.Scope = UIASeachScope.Children;
                    fNPI270DD5HPColoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fNPI270DD5HPColoText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI270DD5HPColoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI270DD5 (HP Color LaserJet FlowMFP M577)");
                }

                return fNPI270DD5HPColoText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup2Text
        /// </summary>
        public Text PrinterRichTextDup2Text
        {
            get
            {
                if (null == fPrinterRichTextDup2Text)
                {
                    fPrinterRichTextDup2Text = new Text("PrinterRichTextDup2Text", NPI270DD5HPColoButton);
                    fPrinterRichTextDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI3CB042HPDigiButton
        /// </summary>
        public Button NPI3CB042HPDigiButton
        {
            get
            {
                if (null == fNPI3CB042HPDigiButton)
                {
                    fNPI3CB042HPDigiButton = new Button("NPI3CB042HPDigiButton", DeviceListElemeList);
                    fNPI3CB042HPDigiButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI3CB042HPDigiButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fNPI3CB042HPDigiButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"0ee8d8af-443e-4e9f-873b-30e1713cb042");
                    fNPI3CB042HPDigiButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI3CB042 (HP Digital Sender Flow 8500fn2)");
                }

                return fNPI3CB042HPDigiButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI3CB042HPDigiText
        /// </summary>
        public Text NPI3CB042HPDigiText
        {
            get
            {
                if (null == fNPI3CB042HPDigiText)
                {
                    fNPI3CB042HPDigiText = new Text("NPI3CB042HPDigiText", NPI3CB042HPDigiButton);
                    fNPI3CB042HPDigiText.UIMap.Scope = UIASeachScope.Children;
                    fNPI3CB042HPDigiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fNPI3CB042HPDigiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI3CB042HPDigiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI3CB042 (HP Digital Sender Flow 8500fn2)");
                }

                return fNPI3CB042HPDigiText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup3Text
        /// </summary>
        public Text PrinterRichTextDup3Text
        {
            get
            {
                if (null == fPrinterRichTextDup3Text)
                {
                    fPrinterRichTextDup3Text = new Text("PrinterRichTextDup3Text", NPI3CB042HPDigiButton);
                    fPrinterRichTextDup3Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup3Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI4EB4FBHPPageButton
        /// </summary>
        public Button NPI4EB4FBHPPageButton
        {
            get
            {
                if (null == fNPI4EB4FBHPPageButton)
                {
                    fNPI4EB4FBHPPageButton = new Button("NPI4EB4FBHPPageButton", DeviceListElemeList);
                    fNPI4EB4FBHPPageButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI4EB4FBHPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fNPI4EB4FBHPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d3da3a1e-b8cb-11e5-9ec1-fc3fdb4eb4fb");
                    fNPI4EB4FBHPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI4EB4FB (HP PageWide Color Flow MFP 586)");
                }

                return fNPI4EB4FBHPPageButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI4EB4FBHPPageText
        /// </summary>
        public Text NPI4EB4FBHPPageText
        {
            get
            {
                if (null == fNPI4EB4FBHPPageText)
                {
                    fNPI4EB4FBHPPageText = new Text("NPI4EB4FBHPPageText", NPI4EB4FBHPPageButton);
                    fNPI4EB4FBHPPageText.UIMap.Scope = UIASeachScope.Children;
                    fNPI4EB4FBHPPageText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fNPI4EB4FBHPPageText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI4EB4FBHPPageText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI4EB4FB (HP PageWide Color Flow MFP 586)");
                }

                return fNPI4EB4FBHPPageText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup4Text
        /// </summary>
        public Text PrinterRichTextDup4Text
        {
            get
            {
                if (null == fPrinterRichTextDup4Text)
                {
                    fPrinterRichTextDup4Text = new Text("PrinterRichTextDup4Text", NPI4EB4FBHPPageButton);
                    fPrinterRichTextDup4Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup4Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI84D469HPDesiButton
        /// </summary>
        public Button NPI84D469HPDesiButton
        {
            get
            {
                if (null == fNPI84D469HPDesiButton)
                {
                    fNPI84D469HPDesiButton = new Button("NPI84D469HPDesiButton", DeviceListElemeList);
                    fNPI84D469HPDesiButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI84D469HPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fNPI84D469HPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"14404449-1a1c-b635-bd3b-009c0284d469");
                    fNPI84D469HPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI84D469 (HP Designjet T3500ps)");
                }

                return fNPI84D469HPDesiButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI84D469HPDesiText
        /// </summary>
        public Text NPI84D469HPDesiText
        {
            get
            {
                if (null == fNPI84D469HPDesiText)
                {
                    fNPI84D469HPDesiText = new Text("NPI84D469HPDesiText", NPI84D469HPDesiButton);
                    fNPI84D469HPDesiText.UIMap.Scope = UIASeachScope.Children;
                    fNPI84D469HPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fNPI84D469HPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI84D469HPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI84D469 (HP Designjet T3500ps)");
                }

                return fNPI84D469HPDesiText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup5Text
        /// </summary>
        public Text PrinterRichTextDup5Text
        {
            get
            {
                if (null == fPrinterRichTextDup5Text)
                {
                    fPrinterRichTextDup5Text = new Text("PrinterRichTextDup5Text", NPI84D469HPDesiButton);
                    fPrinterRichTextDup5Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup5Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup5Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup5Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup5Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPIA6532DHPColoButton
        /// </summary>
        public Button NPIA6532DHPColoButton
        {
            get
            {
                if (null == fNPIA6532DHPColoButton)
                {
                    fNPIA6532DHPColoButton = new Button("NPIA6532DHPColoButton", DeviceListElemeList);
                    fNPIA6532DHPColoButton.UIMap.Scope = UIASeachScope.Children;
                    fNPIA6532DHPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fNPIA6532DHPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"15b5ac58-ec9a-4009-800c-98e7f4a6532d");
                    fNPIA6532DHPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIA6532D (HP Color LaserJet Flow E87660)");
                }

                return fNPIA6532DHPColoButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPIA6532DHPColoText
        /// </summary>
        public Text NPIA6532DHPColoText
        {
            get
            {
                if (null == fNPIA6532DHPColoText)
                {
                    fNPIA6532DHPColoText = new Text("NPIA6532DHPColoText", NPIA6532DHPColoButton);
                    fNPIA6532DHPColoText.UIMap.Scope = UIASeachScope.Children;
                    fNPIA6532DHPColoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fNPIA6532DHPColoText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPIA6532DHPColoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIA6532D (HP Color LaserJet Flow E87660)");
                }

                return fNPIA6532DHPColoText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup6Text
        /// </summary>
        public Text PrinterRichTextDup6Text
        {
            get
            {
                if (null == fPrinterRichTextDup6Text)
                {
                    fPrinterRichTextDup6Text = new Text("PrinterRichTextDup6Text", NPIA6532DHPColoButton);
                    fPrinterRichTextDup6Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup6Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup6Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup6Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup6Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPIAA33FEHPColoButton
        /// </summary>
        public Button NPIAA33FEHPColoButton
        {
            get
            {
                if (null == fNPIAA33FEHPColoButton)
                {
                    fNPIAA33FEHPColoButton = new Button("NPIAA33FEHPColoButton", DeviceListElemeList);
                    fNPIAA33FEHPColoButton.UIMap.Scope = UIASeachScope.Children;
                    fNPIAA33FEHPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fNPIAA33FEHPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c5b3df59-4ded-11e6-981c-705a0faa33fe");
                    fNPIAA33FEHPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIAA33FE (HP Color LaserJet M553)");
                }

                return fNPIAA33FEHPColoButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPIAA33FEHPColoText
        /// </summary>
        public Text NPIAA33FEHPColoText
        {
            get
            {
                if (null == fNPIAA33FEHPColoText)
                {
                    fNPIAA33FEHPColoText = new Text("NPIAA33FEHPColoText", NPIAA33FEHPColoButton);
                    fNPIAA33FEHPColoText.UIMap.Scope = UIASeachScope.Children;
                    fNPIAA33FEHPColoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fNPIAA33FEHPColoText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPIAA33FEHPColoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIAA33FE (HP Color LaserJet M553)");
                }

                return fNPIAA33FEHPColoText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup7Text
        /// </summary>
        public Text PrinterRichTextDup7Text
        {
            get
            {
                if (null == fPrinterRichTextDup7Text)
                {
                    fPrinterRichTextDup7Text = new Text("PrinterRichTextDup7Text", NPIAA33FEHPColoButton);
                    fPrinterRichTextDup7Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup7Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup7Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup7Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup7Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPIBB41BCHPPageButton
        /// </summary>
        public Button NPIBB41BCHPPageButton
        {
            get
            {
                if (null == fNPIBB41BCHPPageButton)
                {
                    fNPIBB41BCHPPageButton = new Button("NPIBB41BCHPPageButton", DeviceListElemeList);
                    fNPIBB41BCHPPageButton.UIMap.Scope = UIASeachScope.Children;
                    fNPIBB41BCHPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fNPIBB41BCHPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3882d4b5-b57c-4f47-a7a6-ec8eb5bb41bc");
                    fNPIBB41BCHPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIBB41BC (HP PageWide Color 765)");
                }

                return fNPIBB41BCHPPageButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPIBB41BCHPPageText
        /// </summary>
        public Text NPIBB41BCHPPageText
        {
            get
            {
                if (null == fNPIBB41BCHPPageText)
                {
                    fNPIBB41BCHPPageText = new Text("NPIBB41BCHPPageText", NPIBB41BCHPPageButton);
                    fNPIBB41BCHPPageText.UIMap.Scope = UIASeachScope.Children;
                    fNPIBB41BCHPPageText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fNPIBB41BCHPPageText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPIBB41BCHPPageText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIBB41BC (HP PageWide Color 765)");
                }

                return fNPIBB41BCHPPageText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup8Text
        /// </summary>
        public Text PrinterRichTextDup8Text
        {
            get
            {
                if (null == fPrinterRichTextDup8Text)
                {
                    fPrinterRichTextDup8Text = new Text("PrinterRichTextDup8Text", NPIBB41BCHPPageButton);
                    fPrinterRichTextDup8Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup8Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup8Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup8Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup8Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPIC5D52BHPDesiButton
        /// </summary>
        public Button NPIC5D52BHPDesiButton
        {
            get
            {
                if (null == fNPIC5D52BHPDesiButton)
                {
                    fNPIC5D52BHPDesiButton = new Button("NPIC5D52BHPDesiButton", DeviceListElemeList);
                    fNPIC5D52BHPDesiButton.UIMap.Scope = UIASeachScope.Children;
                    fNPIC5D52BHPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fNPIC5D52BHPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"00000000-0000-0000-0000-a0d3c1c5d52b");
                    fNPIC5D52BHPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIC5D52B (HP DesignJet T1700dr)");
                }

                return fNPIC5D52BHPDesiButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPIC5D52BHPDesiText
        /// </summary>
        public Text NPIC5D52BHPDesiText
        {
            get
            {
                if (null == fNPIC5D52BHPDesiText)
                {
                    fNPIC5D52BHPDesiText = new Text("NPIC5D52BHPDesiText", NPIC5D52BHPDesiButton);
                    fNPIC5D52BHPDesiText.UIMap.Scope = UIASeachScope.Children;
                    fNPIC5D52BHPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fNPIC5D52BHPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPIC5D52BHPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIC5D52B (HP DesignJet T1700dr)");
                }

                return fNPIC5D52BHPDesiText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup9Text
        /// </summary>
        public Text PrinterRichTextDup9Text
        {
            get
            {
                if (null == fPrinterRichTextDup9Text)
                {
                    fPrinterRichTextDup9Text = new Text("PrinterRichTextDup9Text", NPIC5D52BHPDesiButton);
                    fPrinterRichTextDup9Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup9Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup9Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup9Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup9Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPIC5D52CHPDesiButton
        /// </summary>
        public Button NPIC5D52CHPDesiButton
        {
            get
            {
                if (null == fNPIC5D52CHPDesiButton)
                {
                    fNPIC5D52CHPDesiButton = new Button("NPIC5D52CHPDesiButton", DeviceListElemeList);
                    fNPIC5D52CHPDesiButton.UIMap.Scope = UIASeachScope.Children;
                    fNPIC5D52CHPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fNPIC5D52CHPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"00000000-0000-0000-0000-a0d3c1c5d52c");
                    fNPIC5D52CHPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIC5D52C (HP DesignJet T1700dr)");
                }

                return fNPIC5D52CHPDesiButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPIC5D52CHPDesiText
        /// </summary>
        public Text NPIC5D52CHPDesiText
        {
            get
            {
                if (null == fNPIC5D52CHPDesiText)
                {
                    fNPIC5D52CHPDesiText = new Text("NPIC5D52CHPDesiText", NPIC5D52CHPDesiButton);
                    fNPIC5D52CHPDesiText.UIMap.Scope = UIASeachScope.Children;
                    fNPIC5D52CHPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fNPIC5D52CHPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPIC5D52CHPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIC5D52C (HP DesignJet T1700dr)");
                }

                return fNPIC5D52CHPDesiText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup10Text
        /// </summary>
        public Text PrinterRichTextDup10Text
        {
            get
            {
                if (null == fPrinterRichTextDup10Text)
                {
                    fPrinterRichTextDup10Text = new Text("PrinterRichTextDup10Text", NPIC5D52CHPDesiButton);
                    fPrinterRichTextDup10Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup10Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup10Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup10Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup10Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPIECF664HPPageButton
        /// </summary>
        public Button NPIECF664HPPageButton
        {
            get
            {
                if (null == fNPIECF664HPPageButton)
                {
                    fNPIECF664HPPageButton = new Button("NPIECF664HPPageButton", DeviceListElemeList);
                    fNPIECF664HPPageButton.UIMap.Scope = UIASeachScope.Children;
                    fNPIECF664HPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fNPIECF664HPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"471cf23a-1d0f-42e1-9e36-a0d3c1ecf664");
                    fNPIECF664HPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIECF664 (HP PageWide Color MFP 586)");
                }

                return fNPIECF664HPPageButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPIECF664HPPageText
        /// </summary>
        public Text NPIECF664HPPageText
        {
            get
            {
                if (null == fNPIECF664HPPageText)
                {
                    fNPIECF664HPPageText = new Text("NPIECF664HPPageText", NPIECF664HPPageButton);
                    fNPIECF664HPPageText.UIMap.Scope = UIASeachScope.Children;
                    fNPIECF664HPPageText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fNPIECF664HPPageText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPIECF664HPPageText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIECF664 (HP PageWide Color MFP 586)");
                }

                return fNPIECF664HPPageText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup11Text
        /// </summary>
        public Text PrinterRichTextDup11Text
        {
            get
            {
                if (null == fPrinterRichTextDup11Text)
                {
                    fPrinterRichTextDup11Text = new Text("PrinterRichTextDup11Text", NPIECF664HPPageButton);
                    fPrinterRichTextDup11Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup11Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup11Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup11Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup11Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT00HPIPsecButton
        /// </summary>
        public Button DIRECT00HPIPsecButton
        {
            get
            {
                if (null == fDIRECT00HPIPsecButton)
                {
                    fDIRECT00HPIPsecButton = new Button("DIRECT00HPIPsecButton", DeviceListElemeList);
                    fDIRECT00HPIPsecButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT00HPIPsecButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECT00HPIPsecButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1f48a927-5b27-5e52-f8b0-d46f806e4143");
                    fDIRECT00HPIPsecButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-00-HP IPsec");
                }

                return fDIRECT00HPIPsecButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT00HPIPsecText
        /// </summary>
        public Text DIRECT00HPIPsecText
        {
            get
            {
                if (null == fDIRECT00HPIPsecText)
                {
                    fDIRECT00HPIPsecText = new Text("DIRECT00HPIPsecText", DIRECT00HPIPsecButton);
                    fDIRECT00HPIPsecText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT00HPIPsecText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECT00HPIPsecText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECT00HPIPsecText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-00-HP IPsec");
                }

                return fDIRECT00HPIPsecText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup12Text
        /// </summary>
        public Text PrinterRichTextDup12Text
        {
            get
            {
                if (null == fPrinterRichTextDup12Text)
                {
                    fPrinterRichTextDup12Text = new Text("PrinterRichTextDup12Text", DIRECT00HPIPsecButton);
                    fPrinterRichTextDup12Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup12Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup12Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup12Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup12Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT1FHPPageWButton
        /// </summary>
        public Button DIRECT1FHPPageWButton
        {
            get
            {
                if (null == fDIRECT1FHPPageWButton)
                {
                    fDIRECT1FHPPageWButton = new Button("DIRECT1FHPPageWButton", DeviceListElemeList);
                    fDIRECT1FHPPageWButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT1FHPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECT1FHPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"e636868f-dcd6-5202-fce4-f38c8abe52af");
                    fDIRECT1FHPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-1F-HP PageWide Pro 477dw");
                }

                return fDIRECT1FHPPageWButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT1FHPPageWText
        /// </summary>
        public Text DIRECT1FHPPageWText
        {
            get
            {
                if (null == fDIRECT1FHPPageWText)
                {
                    fDIRECT1FHPPageWText = new Text("DIRECT1FHPPageWText", DIRECT1FHPPageWButton);
                    fDIRECT1FHPPageWText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT1FHPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECT1FHPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECT1FHPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-1F-HP PageWide Pro 477dw");
                }

                return fDIRECT1FHPPageWText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup13Text
        /// </summary>
        public Text PrinterRichTextDup13Text
        {
            get
            {
                if (null == fPrinterRichTextDup13Text)
                {
                    fPrinterRichTextDup13Text = new Text("PrinterRichTextDup13Text", DIRECT1FHPPageWButton);
                    fPrinterRichTextDup13Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup13Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup13Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup13Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup13Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT21HPENVYPButton
        /// </summary>
        public Button DIRECT21HPENVYPButton
        {
            get
            {
                if (null == fDIRECT21HPENVYPButton)
                {
                    fDIRECT21HPENVYPButton = new Button("DIRECT21HPENVYPButton", DeviceListElemeList);
                    fDIRECT21HPENVYPButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT21HPENVYPButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECT21HPENVYPButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"75430951-0adb-5682-dfff-5a2a85687958");
                    fDIRECT21HPENVYPButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-21-HP ENVY Photo 7800");
                }

                return fDIRECT21HPENVYPButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT21HPENVYPText
        /// </summary>
        public Text DIRECT21HPENVYPText
        {
            get
            {
                if (null == fDIRECT21HPENVYPText)
                {
                    fDIRECT21HPENVYPText = new Text("DIRECT21HPENVYPText", DIRECT21HPENVYPButton);
                    fDIRECT21HPENVYPText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT21HPENVYPText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECT21HPENVYPText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECT21HPENVYPText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-21-HP ENVY Photo 7800");
                }

                return fDIRECT21HPENVYPText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup14Text
        /// </summary>
        public Text PrinterRichTextDup14Text
        {
            get
            {
                if (null == fPrinterRichTextDup14Text)
                {
                    fPrinterRichTextDup14Text = new Text("PrinterRichTextDup14Text", DIRECT21HPENVYPButton);
                    fPrinterRichTextDup14Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup14Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup14Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup14Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup14Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT43HPOfficButton
        /// </summary>
        public Button DIRECT43HPOfficButton
        {
            get
            {
                if (null == fDIRECT43HPOfficButton)
                {
                    fDIRECT43HPOfficButton = new Button("DIRECT43HPOfficButton", DeviceListElemeList);
                    fDIRECT43HPOfficButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT43HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECT43HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4d1f7dfa-c236-59c3-b8a4-8a05a8f9f969");
                    fDIRECT43HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-43-HP OfficeJet Pro 7740");
                }

                return fDIRECT43HPOfficButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT43HPOfficText
        /// </summary>
        public Text DIRECT43HPOfficText
        {
            get
            {
                if (null == fDIRECT43HPOfficText)
                {
                    fDIRECT43HPOfficText = new Text("DIRECT43HPOfficText", DIRECT43HPOfficButton);
                    fDIRECT43HPOfficText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT43HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECT43HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECT43HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-43-HP OfficeJet Pro 7740");
                }

                return fDIRECT43HPOfficText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup15Text
        /// </summary>
        public Text PrinterRichTextDup15Text
        {
            get
            {
                if (null == fPrinterRichTextDup15Text)
                {
                    fPrinterRichTextDup15Text = new Text("PrinterRichTextDup15Text", DIRECT43HPOfficButton);
                    fPrinterRichTextDup15Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup15Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup15Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup15Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup15Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT5CHPWiFiDButton
        /// </summary>
        public Button DIRECT5CHPWiFiDButton
        {
            get
            {
                if (null == fDIRECT5CHPWiFiDButton)
                {
                    fDIRECT5CHPWiFiDButton = new Button("DIRECT5CHPWiFiDButton", DeviceListElemeList);
                    fDIRECT5CHPWiFiDButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT5CHPWiFiDButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECT5CHPWiFiDButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"69a19142-9e1e-5413-b353-a51af58e0f9d");
                    fDIRECT5CHPWiFiDButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-5C-HP WiFiDirect123P57750");
                }

                return fDIRECT5CHPWiFiDButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT5CHPWiFiDText
        /// </summary>
        public Text DIRECT5CHPWiFiDText
        {
            get
            {
                if (null == fDIRECT5CHPWiFiDText)
                {
                    fDIRECT5CHPWiFiDText = new Text("DIRECT5CHPWiFiDText", DIRECT5CHPWiFiDButton);
                    fDIRECT5CHPWiFiDText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT5CHPWiFiDText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECT5CHPWiFiDText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECT5CHPWiFiDText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-5C-HP WiFiDirect123P57750");
                }

                return fDIRECT5CHPWiFiDText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup16Text
        /// </summary>
        public Text PrinterRichTextDup16Text
        {
            get
            {
                if (null == fPrinterRichTextDup16Text)
                {
                    fPrinterRichTextDup16Text = new Text("PrinterRichTextDup16Text", DIRECT5CHPWiFiDButton);
                    fPrinterRichTextDup16Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup16Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup16Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup16Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup16Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT6CHPOfficButton
        /// </summary>
        public Button DIRECT6CHPOfficButton
        {
            get
            {
                if (null == fDIRECT6CHPOfficButton)
                {
                    fDIRECT6CHPOfficButton = new Button("DIRECT6CHPOfficButton", DeviceListElemeList);
                    fDIRECT6CHPOfficButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT6CHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECT6CHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6bd80320-9bff-78e0-9fe3-fe2ac8afc5d0");
                    fDIRECT6CHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-6C-HP OfficeJet Pro 8730");
                }

                return fDIRECT6CHPOfficButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT6CHPOfficText
        /// </summary>
        public Text DIRECT6CHPOfficText
        {
            get
            {
                if (null == fDIRECT6CHPOfficText)
                {
                    fDIRECT6CHPOfficText = new Text("DIRECT6CHPOfficText", DIRECT6CHPOfficButton);
                    fDIRECT6CHPOfficText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT6CHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECT6CHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECT6CHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-6C-HP OfficeJet Pro 8730");
                }

                return fDIRECT6CHPOfficText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup17Text
        /// </summary>
        public Text PrinterRichTextDup17Text
        {
            get
            {
                if (null == fPrinterRichTextDup17Text)
                {
                    fPrinterRichTextDup17Text = new Text("PrinterRichTextDup17Text", DIRECT6CHPOfficButton);
                    fPrinterRichTextDup17Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup17Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup17Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup17Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup17Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT71HPENVY7Button
        /// </summary>
        public Button DIRECT71HPENVY7Button
        {
            get
            {
                if (null == fDIRECT71HPENVY7Button)
                {
                    fDIRECT71HPENVY7Button = new Button("DIRECT71HPENVY7Button", DeviceListElemeList);
                    fDIRECT71HPENVY7Button.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT71HPENVY7Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECT71HPENVY7Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3e446ca3-8393-5d0d-61c8-985105b98e20");
                    fDIRECT71HPENVY7Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-71-HP ENVY 7100 series");
                }

                return fDIRECT71HPENVY7Button;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT71HPENVY7Text
        /// </summary>
        public Text DIRECT71HPENVY7Text
        {
            get
            {
                if (null == fDIRECT71HPENVY7Text)
                {
                    fDIRECT71HPENVY7Text = new Text("DIRECT71HPENVY7Text", DIRECT71HPENVY7Button);
                    fDIRECT71HPENVY7Text.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT71HPENVY7Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECT71HPENVY7Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECT71HPENVY7Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-71-HP ENVY 7100 series");
                }

                return fDIRECT71HPENVY7Text;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup18Text
        /// </summary>
        public Text PrinterRichTextDup18Text
        {
            get
            {
                if (null == fPrinterRichTextDup18Text)
                {
                    fPrinterRichTextDup18Text = new Text("PrinterRichTextDup18Text", DIRECT71HPENVY7Button);
                    fPrinterRichTextDup18Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup18Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup18Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup18Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup18Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT85HPPageWButton
        /// </summary>
        public Button DIRECT85HPPageWButton
        {
            get
            {
                if (null == fDIRECT85HPPageWButton)
                {
                    fDIRECT85HPPageWButton = new Button("DIRECT85HPPageWButton", DeviceListElemeList);
                    fDIRECT85HPPageWButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT85HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECT85HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"fb46f9b1-ab0d-55c3-d8c8-c8e72f822271");
                    fDIRECT85HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-85-HP PageWide Pro 452dw");
                }

                return fDIRECT85HPPageWButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT85HPPageWText
        /// </summary>
        public Text DIRECT85HPPageWText
        {
            get
            {
                if (null == fDIRECT85HPPageWText)
                {
                    fDIRECT85HPPageWText = new Text("DIRECT85HPPageWText", DIRECT85HPPageWButton);
                    fDIRECT85HPPageWText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT85HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECT85HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECT85HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-85-HP PageWide Pro 452dw");
                }

                return fDIRECT85HPPageWText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup19Text
        /// </summary>
        public Text PrinterRichTextDup19Text
        {
            get
            {
                if (null == fPrinterRichTextDup19Text)
                {
                    fPrinterRichTextDup19Text = new Text("PrinterRichTextDup19Text", DIRECT85HPPageWButton);
                    fPrinterRichTextDup19Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup19Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup19Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup19Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup19Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTC7HPInkTaButton
        /// </summary>
        public Button DIRECTC7HPInkTaButton
        {
            get
            {
                if (null == fDIRECTC7HPInkTaButton)
                {
                    fDIRECTC7HPInkTaButton = new Button("DIRECTC7HPInkTaButton", DeviceListElemeList);
                    fDIRECTC7HPInkTaButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTC7HPInkTaButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECTC7HPInkTaButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1c852a4d-b800-1f08-abcd-30e1710777c7");
                    fDIRECTC7HPInkTaButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-C7-HP Ink Tank Wireless");
                }

                return fDIRECTC7HPInkTaButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTC7HPInkTaText
        /// </summary>
        public Text DIRECTC7HPInkTaText
        {
            get
            {
                if (null == fDIRECTC7HPInkTaText)
                {
                    fDIRECTC7HPInkTaText = new Text("DIRECTC7HPInkTaText", DIRECTC7HPInkTaButton);
                    fDIRECTC7HPInkTaText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTC7HPInkTaText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECTC7HPInkTaText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECTC7HPInkTaText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-C7-HP Ink Tank Wireless");
                }

                return fDIRECTC7HPInkTaText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup20Text
        /// </summary>
        public Text PrinterRichTextDup20Text
        {
            get
            {
                if (null == fPrinterRichTextDup20Text)
                {
                    fPrinterRichTextDup20Text = new Text("PrinterRichTextDup20Text", DIRECTC7HPInkTaButton);
                    fPrinterRichTextDup20Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup20Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup20Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup20Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup20Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTc9HPM281LButton
        /// </summary>
        public Button DIRECTc9HPM281LButton
        {
            get
            {
                if (null == fDIRECTc9HPM281LButton)
                {
                    fDIRECTc9HPM281LButton = new Button("DIRECTc9HPM281LButton", DeviceListElemeList);
                    fDIRECTc9HPM281LButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTc9HPM281LButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECTc9HPM281LButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"564e3136-4a43-5037-3947-98e7f4077cb2");
                    fDIRECTc9HPM281LButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-c9-HP M281 LaserJet");
                }

                return fDIRECTc9HPM281LButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTc9HPM281LText
        /// </summary>
        public Text DIRECTc9HPM281LText
        {
            get
            {
                if (null == fDIRECTc9HPM281LText)
                {
                    fDIRECTc9HPM281LText = new Text("DIRECTc9HPM281LText", DIRECTc9HPM281LButton);
                    fDIRECTc9HPM281LText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTc9HPM281LText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECTc9HPM281LText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECTc9HPM281LText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-c9-HP M281 LaserJet");
                }

                return fDIRECTc9HPM281LText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup21Text
        /// </summary>
        public Text PrinterRichTextDup21Text
        {
            get
            {
                if (null == fPrinterRichTextDup21Text)
                {
                    fPrinterRichTextDup21Text = new Text("PrinterRichTextDup21Text", DIRECTc9HPM281LButton);
                    fPrinterRichTextDup21Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup21Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup21Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup21Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup21Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTF4HPM606LButton
        /// </summary>
        public Button DIRECTF4HPM606LButton
        {
            get
            {
                if (null == fDIRECTF4HPM606LButton)
                {
                    fDIRECTF4HPM606LButton = new Button("DIRECTF4HPM606LButton", DeviceListElemeList);
                    fDIRECTF4HPM606LButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTF4HPM606LButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECTF4HPM606LButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"10a974a9-404d-4dcb-a58d-9cd21e990af4");
                    fDIRECTF4HPM606LButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-F4-HP M606 LaserJet");
                }

                return fDIRECTF4HPM606LButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTF4HPM606LText
        /// </summary>
        public Text DIRECTF4HPM606LText
        {
            get
            {
                if (null == fDIRECTF4HPM606LText)
                {
                    fDIRECTF4HPM606LText = new Text("DIRECTF4HPM606LText", DIRECTF4HPM606LButton);
                    fDIRECTF4HPM606LText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTF4HPM606LText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECTF4HPM606LText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECTF4HPM606LText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-F4-HP M606 LaserJet");
                }

                return fDIRECTF4HPM606LText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup22Text
        /// </summary>
        public Text PrinterRichTextDup22Text
        {
            get
            {
                if (null == fPrinterRichTextDup22Text)
                {
                    fPrinterRichTextDup22Text = new Text("PrinterRichTextDup22Text", DIRECTF4HPM606LButton);
                    fPrinterRichTextDup22Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup22Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup22Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup22Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup22Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTF4HPOfficButton
        /// </summary>
        public Button DIRECTF4HPOfficButton
        {
            get
            {
                if (null == fDIRECTF4HPOfficButton)
                {
                    fDIRECTF4HPOfficButton = new Button("DIRECTF4HPOfficButton", DeviceListElemeList);
                    fDIRECTF4HPOfficButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTF4HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                    fDIRECTF4HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"40ddb0a9-36be-5fad-e655-f15a23750782");
                    fDIRECTF4HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-F4-HP OfficeJet Pro 8740");
                }

                return fDIRECTF4HPOfficButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTF4HPOfficText
        /// </summary>
        public Text DIRECTF4HPOfficText
        {
            get
            {
                if (null == fDIRECTF4HPOfficText)
                {
                    fDIRECTF4HPOfficText = new Text("DIRECTF4HPOfficText", DIRECTF4HPOfficButton);
                    fDIRECTF4HPOfficText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTF4HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fDIRECTF4HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECTF4HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-F4-HP OfficeJet Pro 8740");
                }

                return fDIRECTF4HPOfficText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup23Text
        /// </summary>
        public Text PrinterRichTextDup23Text
        {
            get
            {
                if (null == fPrinterRichTextDup23Text)
                {
                    fPrinterRichTextDup23Text = new Text("PrinterRichTextDup23Text", DIRECTF4HPOfficButton);
                    fPrinterRichTextDup23Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup23Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                    fPrinterRichTextDup23Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup23Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                }

                return fPrinterRichTextDup23Text;
            }
        }

        /// <summary>
        /// Gets Reference to TheprinterthatIHyperlink
        /// </summary>
        public Hyperlink TheprinterthatIHyperlink
        {
            get
            {
                if (null == fTheprinterthatIHyperlink)
                {
                    fTheprinterthatIHyperlink = new Hyperlink("TheprinterthatIHyperlink", ElementeClassicPane);
                    fTheprinterthatIHyperlink.UIMap.Scope = UIASeachScope.Children;
                    fTheprinterthatIHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fTheprinterthatIHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eHelpLink");
                    fTheprinterthatIHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"The printer that I want isn't listed");
                }

                return fTheprinterthatIHyperlink;
            }
        }

        /// <summary>
        /// Gets Reference to NextCCPushButtoDup1Button
        /// </summary>
        public Button NextCCPushButtoDup1Button
        {
            get
            {
                if (null == fNextCCPushButtoDup1Button)
                {
                    fNextCCPushButtoDup1Button = new Button("NextCCPushButtoDup1Button", HWNDElementdialPane);
                    fNextCCPushButtoDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fNextCCPushButtoDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCPushButton");
                    fNextCCPushButtoDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"nextbutton");
                    fNextCCPushButtoDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Next");
                }

                return fNextCCPushButtoDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to CancelCCPushButDup2Button
        /// </summary>
        public Button CancelCCPushButDup2Button
        {
            get
            {
                if (null == fCancelCCPushButDup2Button)
                {
                    fCancelCCPushButDup2Button = new Button("CancelCCPushButDup2Button", HWNDElementdialPane);
                    fCancelCCPushButDup2Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelCCPushButDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCPushButton");
                    fCancelCCPushButDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cancelbutton");
                    fCancelCCPushButDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelCCPushButDup2Button;
            }
        }

        /// <summary>
        /// Gets Reference to AddadeviceTitleBar
        /// </summary>
        public TitleBar AddadeviceTitleBar
        {
            get
            {
                if (null == fAddadeviceTitleBar)
                {
                    fAddadeviceTitleBar = new TitleBar("AddadeviceTitleBar", AddadeviceNativWindow);
                    fAddadeviceTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fAddadeviceTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fAddadeviceTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a device");
                }

                return fAddadeviceTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemMenuBarSyDup2MenuBar
        /// </summary>
        public MenuBar SystemMenuBarSyDup2MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup2MenuBar)
                {
                    fSystemMenuBarSyDup2MenuBar = new MenuBar("SystemMenuBarSyDup2MenuBar", AddadeviceTitleBar);
                    fSystemMenuBarSyDup2MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup2MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyDup2MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyDup2MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemItem1I4XMenuItem
        /// </summary>
        public MenuItem SystemItem1I4XMenuItem
        {
            get
            {
                if (null == fSystemItem1I4XMenuItem)
                {
                    fSystemItem1I4XMenuItem = new MenuItem("SystemItem1I4XMenuItem", SystemMenuBarSyDup2MenuBar);
                    fSystemItem1I4XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I4XMenuItem.UIMap.Index = 4;
                    fSystemItem1I4XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1I4XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1I4XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to MinimizeMinimizButton
        /// </summary>
        public Button MinimizeMinimizButton
        {
            get
            {
                if (null == fMinimizeMinimizButton)
                {
                    fMinimizeMinimizButton = new Button("MinimizeMinimizButton", AddadeviceTitleBar);
                    fMinimizeMinimizButton.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                    fMinimizeMinimizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                }

                return fMinimizeMinimizButton;
            }
        }

        /// <summary>
        /// Gets Reference to MaximizeMaximizButton
        /// </summary>
        public Button MaximizeMaximizButton
        {
            get
            {
                if (null == fMaximizeMaximizButton)
                {
                    fMaximizeMaximizButton = new Button("MaximizeMaximizButton", AddadeviceTitleBar);
                    fMaximizeMaximizButton.UIMap.Scope = UIASeachScope.Children;
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Maximize");
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximize");
                }

                return fMaximizeMaximizButton;
            }
        }

        /// <summary>
        /// Gets Reference to CloseCloseDup2Button
        /// </summary>
        public Button CloseCloseDup2Button
        {
            get
            {
                if (null == fCloseCloseDup2Button)
                {
                    fCloseCloseDup2Button = new Button("CloseCloseDup2Button", AddadeviceTitleBar);
                    fCloseCloseDup2Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseDup2Button;
            }
        }
    }
}

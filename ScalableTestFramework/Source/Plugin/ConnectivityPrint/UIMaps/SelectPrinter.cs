//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------

namespace HP.ScalableTest.Plugin.ConnectivityPrint.UIMaps
{
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class SelectPrinter
    {
        /// <summary>
        /// Backing field for AddadeviceNativWindow property
        /// </summary>
        private Window fAddadeviceNativWindow;

        /// <summary>
        /// Backing field for AddPrinterNativWindow property
        /// </summary>
        private Window fAddPrinterNativWindow;

        /// <summary>
        /// Backing field for FindaprinterbyoPane property
        /// </summary>
        private Pane fFindaprinterbyoPane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI0XDup0Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI0XDup0Pane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI1XDup0Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI1XDup0Pane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI2XDup0Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI2XDup0Pane;

        /// <summary>
        /// Backing field for BackButtonbackbButton property
        /// </summary>
        private Button fBackButtonbackbButton;

        /// <summary>
        /// Backing field for ElementwizardicDup0Image property
        /// </summary>
        private Image fElementwizardicDup0Image;

        /// <summary>
        /// Backing field for AddPrinterElemeText property
        /// </summary>
        private Text fAddPrinterElemeText;

        /// <summary>
        /// Backing field for FindaprinterbyoText property
        /// </summary>
        private Text fFindaprinterbyoText;

        /// <summary>
        /// Backing field for NetworkprintertPane property
        /// </summary>
        private Pane fNetworkprintertPane;

        /// <summary>
        /// Backing field for MyprinterisalitRadioButton property
        /// </summary>
        private RadioButton fMyprinterisalitRadioButton;

        /// <summary>
        /// Backing field for FindaprinterintRadioButton property
        /// </summary>
        private RadioButton fFindaprinterintRadioButton;

        /// <summary>
        /// Backing field for SelectasharedprRadioButton property
        /// </summary>
        private RadioButton fSelectasharedprRadioButton;

        /// <summary>
        /// Backing field for AddaprinterusinRadioButton property
        /// </summary>
        private RadioButton fAddaprinterusinRadioButton;

        /// <summary>
        /// Backing field for AddaBluetoothwiRadioButton property
        /// </summary>
        private RadioButton fAddaBluetoothwiRadioButton;

        /// <summary>
        /// Backing field for AddalocalprinteRadioButton property
        /// </summary>
        private RadioButton fAddalocalprinteRadioButton;

        /// <summary>
        /// Backing field for aAddingprintersEdit property
        /// </summary>
        private Edit faAddingprintersEdit;

        /// <summary>
        /// Backing field for BrowseButton103Button property
        /// </summary>
        private Button fBrowseButton103Button;

        /// <summary>
        /// Backing field for ExamplecomputerText property
        /// </summary>
        private Text fExamplecomputerText;

        /// <summary>
        /// Backing field for NextCCPushButtoDup0Button property
        /// </summary>
        private Button fNextCCPushButtoDup0Button;

        /// <summary>
        /// Backing field for CancelCCPushButDup0Button property
        /// </summary>
        private Button fCancelCCPushButDup0Button;

        /// <summary>
        /// Backing field for AddPrinterTitleBar property
        /// </summary>
        private TitleBar fAddPrinterTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup0MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup0MenuBar;

        /// <summary>
        /// Backing field for SystemItem1I0XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I0XMenuItem;

        /// <summary>
        /// Backing field for CloseCloseDup0Button property
        /// </summary>
        private Button fCloseCloseDup0Button;

        /// <summary>
        /// Backing field for HWNDElementdialPane property
        /// </summary>
        private Pane fHWNDElementdialPane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI0XDup1Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI0XDup1Pane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI1XDup1Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI1XDup1Pane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI2XDup1Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI2XDup1Pane;

        /// <summary>
        /// Backing field for ElementwizardicDup1Image property
        /// </summary>
        private Image fElementwizardicDup1Image;

        /// <summary>
        /// Backing field for AddadeviceElemeText property
        /// </summary>
        private Text fAddadeviceElemeText;

        /// <summary>
        /// Backing field for ElementheadertiText property
        /// </summary>
        private Text fElementheadertiText;

        /// <summary>
        /// Backing field for XElement48CB98DPane property
        /// </summary>
        private Pane fXElement48CB98DPane;

        /// <summary>
        /// Backing field for XBabyPane property
        /// </summary>
        private Pane fXBabyPane;

        /// <summary>
        /// Backing field for ElementeClassicPane property
        /// </summary>
        private Pane fElementeClassicPane;

        /// <summary>
        /// Backing field for ChooseadeviceorText property
        /// </summary>
        private Text fChooseadeviceorText;

        /// <summary>
        /// Backing field for SelectadeviceElText property
        /// </summary>
        private Text fSelectadeviceElText;

        /// <summary>
        /// Backing field for VerticalCCVScroScrollBar property
        /// </summary>
        private ScrollBar fVerticalCCVScroScrollBar;

        /// <summary>
        /// Backing field for LineupButton property
        /// </summary>
        private Button fLineupButton;

        /// <summary>
        /// Backing field for PositionCustom property
        /// </summary>
        private Custom fPositionCustom;

        /// <summary>
        /// Backing field for PagedownButton property
        /// </summary>
        private Button fPagedownButton;

        /// <summary>
        /// Backing field for LinedownButton property
        /// </summary>
        private Button fLinedownButton;

        /// <summary>
        /// Backing field for DeviceListElemeList property
        /// </summary>
        private List fDeviceListElemeList;

        /// <summary>
        /// Backing field for HPAConOXPDQAHPAButton property
        /// </summary>
        private Button fHPAConOXPDQAHPAButton;

        /// <summary>
        /// Backing field for HPAConOXPDQAHPAText property
        /// </summary>
        private Text fHPAConOXPDQAHPAText;

        /// <summary>
        /// Backing field for PrinterRichTextDup0Text property
        /// </summary>
        private Text fPrinterRichTextDup0Text;

        /// <summary>
        /// Backing field for HP14C003HPOfficButton property
        /// </summary>
        private Button fHP14C003HPOfficButton;

        /// <summary>
        /// Backing field for HP14C003HPOfficText property
        /// </summary>
        private Text fHP14C003HPOfficText;

        /// <summary>
        /// Backing field for InkjetprinterRiDup0Text property
        /// </summary>
        private Text fInkjetprinterRiDup0Text;

        /// <summary>
        /// Backing field for HP8848D8v6domaiButton property
        /// </summary>
        private Button fHP8848D8v6domaiButton;

        /// <summary>
        /// Backing field for HP8848D8v6domaiText property
        /// </summary>
        private Text fHP8848D8v6domaiText;

        /// <summary>
        /// Backing field for PrinterInkjetprDup0Text property
        /// </summary>
        private Text fPrinterInkjetprDup0Text;

        /// <summary>
        /// Backing field for HP8899BEv6domaiButton property
        /// </summary>
        private Button fHP8899BEv6domaiButton;

        /// <summary>
        /// Backing field for HP8899BEv6domaiText property
        /// </summary>
        private Text fHP8899BEv6domaiText;

        /// <summary>
        /// Backing field for PrinterInkjetprDup1Text property
        /// </summary>
        private Text fPrinterInkjetprDup1Text;

        /// <summary>
        /// Backing field for HP9800D1HPPageWButton property
        /// </summary>
        private Button fHP9800D1HPPageWButton;

        /// <summary>
        /// Backing field for HP9800D1HPPageWText property
        /// </summary>
        private Text fHP9800D1HPPageWText;

        /// <summary>
        /// Backing field for PrinterInkjetprDup2Text property
        /// </summary>
        private Text fPrinterInkjetprDup2Text;

        /// <summary>
        /// Backing field for HP981000HPPageWButton property
        /// </summary>
        private Button fHP981000HPPageWButton;

        /// <summary>
        /// Backing field for HP981000HPPageWText property
        /// </summary>
        private Text fHP981000HPPageWText;

        /// <summary>
        /// Backing field for PrinterInkjetprDup3Text property
        /// </summary>
        private Text fPrinterInkjetprDup3Text;

        /// <summary>
        /// Backing field for HP981038HPPageWButton property
        /// </summary>
        private Button fHP981038HPPageWButton;

        /// <summary>
        /// Backing field for HP981038HPPageWText property
        /// </summary>
        private Text fHP981038HPPageWText;

        /// <summary>
        /// Backing field for PrinterInkjetprDup4Text property
        /// </summary>
        private Text fPrinterInkjetprDup4Text;

        /// <summary>
        /// Backing field for HP981065HPPageWButton property
        /// </summary>
        private Button fHP981065HPPageWButton;

        /// <summary>
        /// Backing field for HP981065HPPageWText property
        /// </summary>
        private Text fHP981065HPPageWText;

        /// <summary>
        /// Backing field for InkjetprinterRiDup1Text property
        /// </summary>
        private Text fInkjetprinterRiDup1Text;

        /// <summary>
        /// Backing field for HP982075HPPageWButton property
        /// </summary>
        private Button fHP982075HPPageWButton;

        /// <summary>
        /// Backing field for HP982075HPPageWText property
        /// </summary>
        private Text fHP982075HPPageWText;

        /// <summary>
        /// Backing field for PrinterInkjetprDup5Text property
        /// </summary>
        private Text fPrinterInkjetprDup5Text;

        /// <summary>
        /// Backing field for HPDE010EHPPageWButton property
        /// </summary>
        private Button fHPDE010EHPPageWButton;

        /// <summary>
        /// Backing field for HPDE010EHPPageWText property
        /// </summary>
        private Text fHPDE010EHPPageWText;

        /// <summary>
        /// Backing field for PrinterInkjetprDup6Text property
        /// </summary>
        private Text fPrinterInkjetprDup6Text;

        /// <summary>
        /// Backing field for HPDF005BHPPageWButton property
        /// </summary>
        private Button fHPDF005BHPPageWButton;

        /// <summary>
        /// Backing field for HPDF005BHPPageWText property
        /// </summary>
        private Text fHPDF005BHPPageWText;

        /// <summary>
        /// Backing field for PrinterInkjetprDup7Text property
        /// </summary>
        private Text fPrinterInkjetprDup7Text;

        /// <summary>
        /// Backing field for HPF774B6HPOfficButton property
        /// </summary>
        private Button fHPF774B6HPOfficButton;

        /// <summary>
        /// Backing field for HPF774B6HPOfficText property
        /// </summary>
        private Text fHPF774B6HPOfficText;

        /// <summary>
        /// Backing field for PrinterInkjetprDup8Text property
        /// </summary>
        private Text fPrinterInkjetprDup8Text;

        /// <summary>
        /// Backing field for NPI00265516B3E6Button property
        /// </summary>
        private Button fNPI00265516B3E6Button;

        /// <summary>
        /// Backing field for NPI00265516B3E6Text property
        /// </summary>
        private Text fNPI00265516B3E6Text;

        /// <summary>
        /// Backing field for PrinterRichTextDup1Text property
        /// </summary>
        private Text fPrinterRichTextDup1Text;

        /// <summary>
        /// Backing field for NPI0207F5HPLaseButton property
        /// </summary>
        private Button fNPI0207F5HPLaseButton;

        /// <summary>
        /// Backing field for NPI0207F5HPLaseText property
        /// </summary>
        private Text fNPI0207F5HPLaseText;

        /// <summary>
        /// Backing field for PrinterRichTextDup2Text property
        /// </summary>
        private Text fPrinterRichTextDup2Text;

        /// <summary>
        /// Backing field for NPI10D047HPColoButton property
        /// </summary>
        private Button fNPI10D047HPColoButton;

        /// <summary>
        /// Backing field for NPI10D047HPColoText property
        /// </summary>
        private Text fNPI10D047HPColoText;

        /// <summary>
        /// Backing field for PrinterRichTextDup3Text property
        /// </summary>
        private Text fPrinterRichTextDup3Text;

        /// <summary>
        /// Backing field for NPI126AE2HPPageButton property
        /// </summary>
        private Button fNPI126AE2HPPageButton;

        /// <summary>
        /// Backing field for NPI126AE2HPPageText property
        /// </summary>
        private Text fNPI126AE2HPPageText;

        /// <summary>
        /// Backing field for PrinterRichTextDup4Text property
        /// </summary>
        private Text fPrinterRichTextDup4Text;

        /// <summary>
        /// Backing field for NPI25145EHPPageButton property
        /// </summary>
        private Button fNPI25145EHPPageButton;

        /// <summary>
        /// Backing field for NPI25145EHPPageText property
        /// </summary>
        private Text fNPI25145EHPPageText;

        /// <summary>
        /// Backing field for PrinterRichTextDup5Text property
        /// </summary>
        private Text fPrinterRichTextDup5Text;

        /// <summary>
        /// Backing field for NPI2514B2HPPageButton property
        /// </summary>
        private Button fNPI2514B2HPPageButton;

        /// <summary>
        /// Backing field for NPI2514B2HPPageText property
        /// </summary>
        private Text fNPI2514B2HPPageText;

        /// <summary>
        /// Backing field for PrinterRichTextDup6Text property
        /// </summary>
        private Text fPrinterRichTextDup6Text;

        /// <summary>
        /// Backing field for NPI2514BEHPPageButton property
        /// </summary>
        private Button fNPI2514BEHPPageButton;

        /// <summary>
        /// Backing field for NPI2514BEHPPageText property
        /// </summary>
        private Text fNPI2514BEHPPageText;

        /// <summary>
        /// Backing field for PrinterRichTextDup7Text property
        /// </summary>
        private Text fPrinterRichTextDup7Text;

        /// <summary>
        /// Backing field for NPI3FBD17HPLaseButton property
        /// </summary>
        private Button fNPI3FBD17HPLaseButton;

        /// <summary>
        /// Backing field for NPI3FBD17HPLaseText property
        /// </summary>
        private Text fNPI3FBD17HPLaseText;

        /// <summary>
        /// Backing field for PrinterRichTextDup8Text property
        /// </summary>
        private Text fPrinterRichTextDup8Text;

        /// <summary>
        /// Backing field for NPI4EF5DFHPPageButton property
        /// </summary>
        private Button fNPI4EF5DFHPPageButton;

        /// <summary>
        /// Backing field for NPI4EF5DFHPPageText property
        /// </summary>
        private Text fNPI4EF5DFHPPageText;

        /// <summary>
        /// Backing field for PrinterRichTextDup9Text property
        /// </summary>
        private Text fPrinterRichTextDup9Text;

        /// <summary>
        /// Backing field for NPI5DC559HPColoButton property
        /// </summary>
        private Button fNPI5DC559HPColoButton;

        /// <summary>
        /// Backing field for NPI5DC559HPColoText property
        /// </summary>
        private Text fNPI5DC559HPColoText;

        /// <summary>
        /// Backing field for PrinterRichTextDup10Text property
        /// </summary>
        private Text fPrinterRichTextDup10Text;

        /// <summary>
        /// Backing field for NPI66C32CHPOffiButton property
        /// </summary>
        private Button fNPI66C32CHPOffiButton;

        /// <summary>
        /// Backing field for NPI66C32CHPOffiText property
        /// </summary>
        private Text fNPI66C32CHPOffiText;

        /// <summary>
        /// Backing field for PrinterRichTextDup11Text property
        /// </summary>
        private Text fPrinterRichTextDup11Text;

        /// <summary>
        /// Backing field for NPI754093HPLaseButton property
        /// </summary>
        private Button fNPI754093HPLaseButton;

        /// <summary>
        /// Backing field for NPI754093HPLaseText property
        /// </summary>
        private Text fNPI754093HPLaseText;

        /// <summary>
        /// Backing field for PrinterRichTextDup12Text property
        /// </summary>
        private Text fPrinterRichTextDup12Text;

        /// <summary>
        /// Backing field for NPI78CDE2HPLaseButton property
        /// </summary>
        private Button fNPI78CDE2HPLaseButton;

        /// <summary>
        /// Backing field for NPI78CDE2HPLaseText property
        /// </summary>
        private Text fNPI78CDE2HPLaseText;

        /// <summary>
        /// Backing field for PrinterRichTextDup13Text property
        /// </summary>
        private Text fPrinterRichTextDup13Text;

        /// <summary>
        /// Backing field for NPI88843FHPDesiButton property
        /// </summary>
        private Button fNPI88843FHPDesiButton;

        /// <summary>
        /// Backing field for NPI88843FHPDesiText property
        /// </summary>
        private Text fNPI88843FHPDesiText;

        /// <summary>
        /// Backing field for PrinterRichTextDup14Text property
        /// </summary>
        private Text fPrinterRichTextDup14Text;

        /// <summary>
        /// Backing field for NPIA5755BHPColoButton property
        /// </summary>
        private Button fNPIA5755BHPColoButton;

        /// <summary>
        /// Backing field for NPIA5755BHPColoText property
        /// </summary>
        private Text fNPIA5755BHPColoText;

        /// <summary>
        /// Backing field for PrinterRichTextDup15Text property
        /// </summary>
        private Text fPrinterRichTextDup15Text;

        /// <summary>
        /// Backing field for NPIBB41A8HPPageButton property
        /// </summary>
        private Button fNPIBB41A8HPPageButton;

        /// <summary>
        /// Backing field for NPIBB41A8HPPageText property
        /// </summary>
        private Text fNPIBB41A8HPPageText;

        /// <summary>
        /// Backing field for PrinterRichTextDup16Text property
        /// </summary>
        private Text fPrinterRichTextDup16Text;

        /// <summary>
        /// Backing field for NPIBCD39BHPLaseButton property
        /// </summary>
        private Button fNPIBCD39BHPLaseButton;

        /// <summary>
        /// Backing field for NPIBCD39BHPLaseText property
        /// </summary>
        private Text fNPIBCD39BHPLaseText;

        /// <summary>
        /// Backing field for PrinterRichTextDup17Text property
        /// </summary>
        private Text fPrinterRichTextDup17Text;

        /// <summary>
        /// Backing field for NPIC1D91DHPColoButton property
        /// </summary>
        private Button fNPIC1D91DHPColoButton;

        /// <summary>
        /// Backing field for NPIC1D91DHPColoText property
        /// </summary>
        private Text fNPIC1D91DHPColoText;

        /// <summary>
        /// Backing field for MultiFunctionPrText property
        /// </summary>
        private Text fMultiFunctionPrText;

        /// <summary>
        /// Backing field for NPIEC9A7464FC50Button property
        /// </summary>
        private Button fNPIEC9A7464FC50Button;

        /// <summary>
        /// Backing field for NPIEC9A7464FC50Text property
        /// </summary>
        private Text fNPIEC9A7464FC50Text;

        /// <summary>
        /// Backing field for PrinterRichTextDup18Text property
        /// </summary>
        private Text fPrinterRichTextDup18Text;

        /// <summary>
        /// Backing field for NPIECECA6HPLaseButton property
        /// </summary>
        private Button fNPIECECA6HPLaseButton;

        /// <summary>
        /// Backing field for NPIECECA6HPLaseText property
        /// </summary>
        private Text fNPIECECA6HPLaseText;

        /// <summary>
        /// Backing field for PrinterRichTextDup19Text property
        /// </summary>
        private Text fPrinterRichTextDup19Text;

        /// <summary>
        /// Backing field for TheprinterthatIHyperlink property
        /// </summary>
        private Hyperlink fTheprinterthatIHyperlink;

        /// <summary>
        /// Backing field for NextCCPushButtoDup1Button property
        /// </summary>
        private Button fNextCCPushButtoDup1Button;

        /// <summary>
        /// Backing field for CancelCCPushButDup1Button property
        /// </summary>
        private Button fCancelCCPushButDup1Button;

        /// <summary>
        /// Backing field for AddadeviceTitleBar property
        /// </summary>
        private TitleBar fAddadeviceTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup1MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup1MenuBar;

        /// <summary>
        /// Backing field for SystemItem1I1XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I1XMenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizButton property
        /// </summary>
        private Button fMinimizeMinimizButton;

        /// <summary>
        /// Backing field for MaximizeMaximizButton property
        /// </summary>
        private Button fMaximizeMaximizButton;

        /// <summary>
        /// Backing field for CloseCloseDup1Button property
        /// </summary>
        private Button fCloseCloseDup1Button;

        /// <summary>
        /// Initializes a new instance of the <see cref="SelectPrinter"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public SelectPrinter(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SelectPrinter"/> class using the default UIAFramework.
        /// </summary>
        public SelectPrinter()
        {
            Desktop = new Desktop();
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to AddadeviceNativWindow
        /// </summary>
        public Window AddadeviceNativWindow
        {
            get
            {
                if (null == fAddadeviceNativWindow)
                {
                    fAddadeviceNativWindow = new Window("AddadeviceNativWindow", Desktop);
                    fAddadeviceNativWindow.UIMap.Scope = UIASeachScope.Children;
                    fAddadeviceNativWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a device");
                    fAddadeviceNativWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NativeHWNDHost");
                }

                return fAddadeviceNativWindow;
            }
        }

        /// <summary>
        /// Gets Reference to AddPrinterNativWindow
        /// </summary>
        public Window AddPrinterNativWindow
        {
            get
            {
                if (null == fAddPrinterNativWindow)
                {
                    fAddPrinterNativWindow = new Window("AddPrinterNativWindow", AddadeviceNativWindow);
                    fAddPrinterNativWindow.UIMap.Scope = UIASeachScope.Children;
                    fAddPrinterNativWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Printer");
                    fAddPrinterNativWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NativeHWNDHost");
                }

                return fAddPrinterNativWindow;
            }
        }

        /// <summary>
        /// Gets Reference to FindaprinterbyoPane
        /// </summary>
        public Pane FindaprinterbyoPane
        {
            get
            {
                if (null == fFindaprinterbyoPane)
                {
                    fFindaprinterbyoPane = new Pane("FindaprinterbyoPane", AddPrinterNativWindow);
                    fFindaprinterbyoPane.UIMap.Scope = UIASeachScope.Children;
                    fFindaprinterbyoPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"dialogroot");
                    fFindaprinterbyoPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Find a printer by other options");
                    fFindaprinterbyoPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"HWNDElement");
                }

                return fFindaprinterbyoPane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI0XDup0Pane
        /// </summary>
        public Pane CtrlNotifySinkI0XDup0Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI0XDup0Pane)
                {
                    fCtrlNotifySinkI0XDup0Pane = new Pane("CtrlNotifySinkI0XDup0Pane", FindaprinterbyoPane);
                    fCtrlNotifySinkI0XDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI0XDup0Pane.UIMap.Index = 0;
                    fCtrlNotifySinkI0XDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI0XDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI1XDup0Pane
        /// </summary>
        public Pane CtrlNotifySinkI1XDup0Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI1XDup0Pane)
                {
                    fCtrlNotifySinkI1XDup0Pane = new Pane("CtrlNotifySinkI1XDup0Pane", FindaprinterbyoPane);
                    fCtrlNotifySinkI1XDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI1XDup0Pane.UIMap.Index = 1;
                    fCtrlNotifySinkI1XDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI1XDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI2XDup0Pane
        /// </summary>
        public Pane CtrlNotifySinkI2XDup0Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI2XDup0Pane)
                {
                    fCtrlNotifySinkI2XDup0Pane = new Pane("CtrlNotifySinkI2XDup0Pane", FindaprinterbyoPane);
                    fCtrlNotifySinkI2XDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI2XDup0Pane.UIMap.Index = 2;
                    fCtrlNotifySinkI2XDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI2XDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to BackButtonbackbButton
        /// </summary>
        public Button BackButtonbackbButton
        {
            get
            {
                if (null == fBackButtonbackbButton)
                {
                    fBackButtonbackbButton = new Button("BackButtonbackbButton", FindaprinterbyoPane);
                    fBackButtonbackbButton.UIMap.Scope = UIASeachScope.Children;
                    fBackButtonbackbButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"backbutton");
                    fBackButtonbackbButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Back");
                    fBackButtonbackbButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fBackButtonbackbButton;
            }
        }

        /// <summary>
        /// Gets Reference to ElementwizardicDup0Image
        /// </summary>
        public Image ElementwizardicDup0Image
        {
            get
            {
                if (null == fElementwizardicDup0Image)
                {
                    fElementwizardicDup0Image = new Image("ElementwizardicDup0Image", FindaprinterbyoPane);
                    fElementwizardicDup0Image.UIMap.Scope = UIASeachScope.Children;
                    fElementwizardicDup0Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"wizardicon");
                    fElementwizardicDup0Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fElementwizardicDup0Image;
            }
        }

        /// <summary>
        /// Gets Reference to AddPrinterElemeText
        /// </summary>
        public Text AddPrinterElemeText
        {
            get
            {
                if (null == fAddPrinterElemeText)
                {
                    fAddPrinterElemeText = new Text("AddPrinterElemeText", FindaprinterbyoPane);
                    fAddPrinterElemeText.UIMap.Scope = UIASeachScope.Children;
                    fAddPrinterElemeText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"wizardtitle");
                    fAddPrinterElemeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Printer");
                    fAddPrinterElemeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fAddPrinterElemeText;
            }
        }

        /// <summary>
        /// Gets Reference to FindaprinterbyoText
        /// </summary>
        public Text FindaprinterbyoText
        {
            get
            {
                if (null == fFindaprinterbyoText)
                {
                    fFindaprinterbyoText = new Text("FindaprinterbyoText", FindaprinterbyoPane);
                    fFindaprinterbyoText.UIMap.Scope = UIASeachScope.Children;
                    fFindaprinterbyoText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"headertitle");
                    fFindaprinterbyoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Find a printer by other options");
                    fFindaprinterbyoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fFindaprinterbyoText;
            }
        }

        /// <summary>
        /// Gets Reference to NetworkprintertPane
        /// </summary>
        public Pane NetworkprintertPane
        {
            get
            {
                if (null == fNetworkprintertPane)
                {
                    fNetworkprintertPane = new Pane("NetworkprintertPane", FindaprinterbyoPane);
                    fNetworkprintertPane.UIMap.Scope = UIASeachScope.ChildrenByDescendants;
                   // fNetworkprintertPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"{5F149DD5-61A1-4746-9DF4-9BB58D4078EF}");
                    fNetworkprintertPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Network printer type");
                    fNetworkprintertPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Win32PropSheetPageHost");
                }

                return fNetworkprintertPane;
            }
        }

        /// <summary>
        /// Gets Reference to MyprinterisalitRadioButton
        /// </summary>
        public RadioButton MyprinterisalitRadioButton
        {
            get
            {
                if (null == fMyprinterisalitRadioButton)
                {
                    fMyprinterisalitRadioButton = new RadioButton("MyprinterisalitRadioButton", NetworkprintertPane);
                    fMyprinterisalitRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fMyprinterisalitRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1042");
                    fMyprinterisalitRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"My printer is a little older. Help me find it.");
                    fMyprinterisalitRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fMyprinterisalitRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to FindaprinterintRadioButton
        /// </summary>
        public RadioButton FindaprinterintRadioButton
        {
            get
            {
                if (null == fFindaprinterintRadioButton)
                {
                    fFindaprinterintRadioButton = new RadioButton("FindaprinterintRadioButton", NetworkprintertPane);
                    fFindaprinterintRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fFindaprinterintRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1033");
                    fFindaprinterintRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Find a printer in the directory, based on location or feature");
                    fFindaprinterintRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fFindaprinterintRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to SelectasharedprRadioButton
        /// </summary>
        public RadioButton SelectasharedprRadioButton
        {
            get
            {
                if (null == fSelectasharedprRadioButton)
                {
                    fSelectasharedprRadioButton = new RadioButton("SelectasharedprRadioButton", NetworkprintertPane);
                    fSelectasharedprRadioButton.UIMap.Scope = UIASeachScope.ChildrenByDescendants;
                    fSelectasharedprRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1034");
                    fSelectasharedprRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Select a shared printer by name");
                    fSelectasharedprRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fSelectasharedprRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to AddaprinterusinRadioButton
        /// </summary>
        public RadioButton AddaprinterusinRadioButton
        {
            get
            {
                if (null == fAddaprinterusinRadioButton)
                {
                    fAddaprinterusinRadioButton = new RadioButton("AddaprinterusinRadioButton", NetworkprintertPane);
                    fAddaprinterusinRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fAddaprinterusinRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1036");
                    fAddaprinterusinRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a printer using a TCP/IP address or hostname");
                    fAddaprinterusinRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fAddaprinterusinRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to AddaBluetoothwiRadioButton
        /// </summary>
        public RadioButton AddaBluetoothwiRadioButton
        {
            get
            {
                if (null == fAddaBluetoothwiRadioButton)
                {
                    fAddaBluetoothwiRadioButton = new RadioButton("AddaBluetoothwiRadioButton", NetworkprintertPane);
                    fAddaBluetoothwiRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fAddaBluetoothwiRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1041");
                    fAddaBluetoothwiRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a Bluetooth, wireless or network discoverable printer");
                    fAddaBluetoothwiRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fAddaBluetoothwiRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to AddalocalprinteRadioButton
        /// </summary>
        public RadioButton AddalocalprinteRadioButton
        {
            get
            {
                if (null == fAddalocalprinteRadioButton)
                {
                    fAddalocalprinteRadioButton = new RadioButton("AddalocalprinteRadioButton", NetworkprintertPane);
                    fAddalocalprinteRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fAddalocalprinteRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1039");
                    fAddalocalprinteRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a local printer or network printer with manual settings");
                    fAddalocalprinteRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fAddalocalprinteRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to aAddingprintersEdit
        /// </summary>
        public Edit aAddingprintersEdit
        {
            get
            {
                if (null == faAddingprintersEdit)
                {
                    faAddingprintersEdit = new Edit("aAddingprintersEdit", NetworkprintertPane);
                    faAddingprintersEdit.UIMap.Scope = UIASeachScope.ChildrenByDescendants;
                    faAddingprintersEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4655");
                    faAddingprintersEdit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"<a>Adding printers by TCP/IP address or hostname</a>");
                    faAddingprintersEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Edit");
                }

                return faAddingprintersEdit;
            }
        }

        /// <summary>
        /// Gets Reference to BrowseButton103Button
        /// </summary>
        public Button BrowseButton103Button
        {
            get
            {
                if (null == fBrowseButton103Button)
                {
                    fBrowseButton103Button = new Button("BrowseButton103Button", NetworkprintertPane);
                    fBrowseButton103Button.UIMap.Scope = UIASeachScope.Children;
                    fBrowseButton103Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1038");
                    fBrowseButton103Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Browse...");
                    fBrowseButton103Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fBrowseButton103Button;
            }
        }

        /// <summary>
        /// Gets Reference to ExamplecomputerText
        /// </summary>
        public Text ExamplecomputerText
        {
            get
            {
                if (null == fExamplecomputerText)
                {
                    fExamplecomputerText = new Text("ExamplecomputerText", NetworkprintertPane);
                    fExamplecomputerText.UIMap.Scope = UIASeachScope.Children;
                    fExamplecomputerText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1037");
                    fExamplecomputerText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Example: \\computername\printername or 
http://computername/printers/printername/.printer");
                    fExamplecomputerText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                }

                return fExamplecomputerText;
            }
        }

        /// <summary>
        /// Gets Reference to NextCCPushButtoDup0Button
        /// </summary>
        public Button NextCCPushButtoDup0Button
        {
            get
            {
                if (null == fNextCCPushButtoDup0Button)
                {
                    fNextCCPushButtoDup0Button = new Button("NextCCPushButtoDup0Button", FindaprinterbyoPane);
                    fNextCCPushButtoDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fNextCCPushButtoDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"nextbutton");
                    fNextCCPushButtoDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Next");
                    fNextCCPushButtoDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCPushButton");
                }

                return fNextCCPushButtoDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to CancelCCPushButDup0Button
        /// </summary>
        public Button CancelCCPushButDup0Button
        {
            get
            {
                if (null == fCancelCCPushButDup0Button)
                {
                    fCancelCCPushButDup0Button = new Button("CancelCCPushButDup0Button", FindaprinterbyoPane);
                    fCancelCCPushButDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelCCPushButDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cancelbutton");
                    fCancelCCPushButDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                    fCancelCCPushButDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCPushButton");
                }

                return fCancelCCPushButDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to AddPrinterTitleBar
        /// </summary>
        public TitleBar AddPrinterTitleBar
        {
            get
            {
                if (null == fAddPrinterTitleBar)
                {
                    fAddPrinterTitleBar = new TitleBar("AddPrinterTitleBar", AddPrinterNativWindow);
                    fAddPrinterTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fAddPrinterTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Printer");
                    fAddPrinterTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                }

                return fAddPrinterTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemMenuBarSyDup0MenuBar
        /// </summary>
        public MenuBar SystemMenuBarSyDup0MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup0MenuBar)
                {
                    fSystemMenuBarSyDup0MenuBar = new MenuBar("SystemMenuBarSyDup0MenuBar", AddPrinterTitleBar);
                    fSystemMenuBarSyDup0MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                }

                return fSystemMenuBarSyDup0MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemItem1I0XMenuItem
        /// </summary>
        public MenuItem SystemItem1I0XMenuItem
        {
            get
            {
                if (null == fSystemItem1I0XMenuItem)
                {
                    fSystemItem1I0XMenuItem = new MenuItem("SystemItem1I0XMenuItem", SystemMenuBarSyDup0MenuBar);
                    fSystemItem1I0XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I0XMenuItem.UIMap.Index = 0;
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                }

                return fSystemItem1I0XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to CloseCloseDup0Button
        /// </summary>
        public Button CloseCloseDup0Button
        {
            get
            {
                if (null == fCloseCloseDup0Button)
                {
                    fCloseCloseDup0Button = new Button("CloseCloseDup0Button", AddPrinterTitleBar);
                    fCloseCloseDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                }

                return fCloseCloseDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to HWNDElementdialPane
        /// </summary>
        public Pane HWNDElementdialPane
        {
            get
            {
                if (null == fHWNDElementdialPane)
                {
                    fHWNDElementdialPane = new Pane("HWNDElementdialPane", AddadeviceNativWindow);
                    fHWNDElementdialPane.UIMap.Scope = UIASeachScope.Children;
                    fHWNDElementdialPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"dialogroot");
                    fHWNDElementdialPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"HWNDElement");
                }

                return fHWNDElementdialPane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI0XDup1Pane
        /// </summary>
        public Pane CtrlNotifySinkI0XDup1Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI0XDup1Pane)
                {
                    fCtrlNotifySinkI0XDup1Pane = new Pane("CtrlNotifySinkI0XDup1Pane", HWNDElementdialPane);
                    fCtrlNotifySinkI0XDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI0XDup1Pane.UIMap.Index = 0;
                    fCtrlNotifySinkI0XDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI0XDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI1XDup1Pane
        /// </summary>
        public Pane CtrlNotifySinkI1XDup1Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI1XDup1Pane)
                {
                    fCtrlNotifySinkI1XDup1Pane = new Pane("CtrlNotifySinkI1XDup1Pane", HWNDElementdialPane);
                    fCtrlNotifySinkI1XDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI1XDup1Pane.UIMap.Index = 1;
                    fCtrlNotifySinkI1XDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI1XDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI2XDup1Pane
        /// </summary>
        public Pane CtrlNotifySinkI2XDup1Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI2XDup1Pane)
                {
                    fCtrlNotifySinkI2XDup1Pane = new Pane("CtrlNotifySinkI2XDup1Pane", HWNDElementdialPane);
                    fCtrlNotifySinkI2XDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI2XDup1Pane.UIMap.Index = 2;
                    fCtrlNotifySinkI2XDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI2XDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to ElementwizardicDup1Image
        /// </summary>
        public Image ElementwizardicDup1Image
        {
            get
            {
                if (null == fElementwizardicDup1Image)
                {
                    fElementwizardicDup1Image = new Image("ElementwizardicDup1Image", HWNDElementdialPane);
                    fElementwizardicDup1Image.UIMap.Scope = UIASeachScope.Children;
                    fElementwizardicDup1Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"wizardicon");
                    fElementwizardicDup1Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fElementwizardicDup1Image;
            }
        }

        /// <summary>
        /// Gets Reference to AddadeviceElemeText
        /// </summary>
        public Text AddadeviceElemeText
        {
            get
            {
                if (null == fAddadeviceElemeText)
                {
                    fAddadeviceElemeText = new Text("AddadeviceElemeText", HWNDElementdialPane);
                    fAddadeviceElemeText.UIMap.Scope = UIASeachScope.Children;
                    fAddadeviceElemeText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"wizardtitle");
                    fAddadeviceElemeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a device");
                    fAddadeviceElemeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fAddadeviceElemeText;
            }
        }

        /// <summary>
        /// Gets Reference to ElementheadertiText
        /// </summary>
        public Text ElementheadertiText
        {
            get
            {
                if (null == fElementheadertiText)
                {
                    fElementheadertiText = new Text("ElementheadertiText", HWNDElementdialPane);
                    fElementheadertiText.UIMap.Scope = UIASeachScope.Children;
                    fElementheadertiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"headertitle");
                    fElementheadertiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fElementheadertiText;
            }
        }

        /// <summary>
        /// Gets Reference to XElement48CB98DPane
        /// </summary>
        public Pane XElement48CB98DPane
        {
            get
            {
                if (null == fXElement48CB98DPane)
                {
                    fXElement48CB98DPane = new Pane("XElement48CB98DPane", HWNDElementdialPane);
                    fXElement48CB98DPane.UIMap.Scope = UIASeachScope.Children;
                    fXElement48CB98DPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"{48CB98DC-BA8A-4E91-B23D-835BC2D8CD2C}");
                    fXElement48CB98DPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"XElement");
                }

                return fXElement48CB98DPane;
            }
        }

        /// <summary>
        /// Gets Reference to XBabyPane
        /// </summary>
        public Pane XBabyPane
        {
            get
            {
                if (null == fXBabyPane)
                {
                    fXBabyPane = new Pane("XBabyPane", XElement48CB98DPane);
                    fXBabyPane.UIMap.Scope = UIASeachScope.Children;
                    fXBabyPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"XBaby");
                }

                return fXBabyPane;
            }
        }

        /// <summary>
        /// Gets Reference to ElementeClassicPane
        /// </summary>
        public Pane ElementeClassicPane
        {
            get
            {
                if (null == fElementeClassicPane)
                {
                    fElementeClassicPane = new Pane("ElementeClassicPane", XBabyPane);
                    fElementeClassicPane.UIMap.Scope = UIASeachScope.Children;
                    fElementeClassicPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eClassicBody");
                    fElementeClassicPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fElementeClassicPane;
            }
        }

        /// <summary>
        /// Gets Reference to ChooseadeviceorText
        /// </summary>
        public Text ChooseadeviceorText
        {
            get
            {
                if (null == fChooseadeviceorText)
                {
                    fChooseadeviceorText = new Text("ChooseadeviceorText", ElementeClassicPane);
                    fChooseadeviceorText.UIMap.Scope = UIASeachScope.Children;
                    fChooseadeviceorText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eTitleText");
                    fChooseadeviceorText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Choose a device or printer to add to this PC");
                    fChooseadeviceorText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fChooseadeviceorText;
            }
        }

        /// <summary>
        /// Gets Reference to SelectadeviceElText
        /// </summary>
        public Text SelectadeviceElText
        {
            get
            {
                if (null == fSelectadeviceElText)
                {
                    fSelectadeviceElText = new Text("SelectadeviceElText", ElementeClassicPane);
                    fSelectadeviceElText.UIMap.Scope = UIASeachScope.Children;
                    fSelectadeviceElText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eProgressText");
                    fSelectadeviceElText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Select a device");
                    fSelectadeviceElText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fSelectadeviceElText;
            }
        }

        /// <summary>
        /// Gets Reference to VerticalCCVScroScrollBar
        /// </summary>
        public ScrollBar VerticalCCVScroScrollBar
        {
            get
            {
                if (null == fVerticalCCVScroScrollBar)
                {
                    fVerticalCCVScroScrollBar = new ScrollBar("VerticalCCVScroScrollBar", ElementeClassicPane);
                    fVerticalCCVScroScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fVerticalCCVScroScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                    fVerticalCCVScroScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Vertical");
                    fVerticalCCVScroScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCVScrollBar");
                }

                return fVerticalCCVScroScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to LineupButton
        /// </summary>
        public Button LineupButton
        {
            get
            {
                if (null == fLineupButton)
                {
                    fLineupButton = new Button("LineupButton", VerticalCCVScroScrollBar);
                    fLineupButton.UIMap.Scope = UIASeachScope.Children;
                    fLineupButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Line up");
                }

                return fLineupButton;
            }
        }

        /// <summary>
        /// Gets Reference to PositionCustom
        /// </summary>
        public Custom PositionCustom
        {
            get
            {
                if (null == fPositionCustom)
                {
                    fPositionCustom = new Custom("PositionCustom", VerticalCCVScroScrollBar);
                    fPositionCustom.UIMap.Scope = UIASeachScope.Children;
                    fPositionCustom.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Position");
                }

                return fPositionCustom;
            }
        }

        /// <summary>
        /// Gets Reference to PagedownButton
        /// </summary>
        public Button PagedownButton
        {
            get
            {
                if (null == fPagedownButton)
                {
                    fPagedownButton = new Button("PagedownButton", VerticalCCVScroScrollBar);
                    fPagedownButton.UIMap.Scope = UIASeachScope.Children;
                    fPagedownButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Page down");
                }

                return fPagedownButton;
            }
        }

        /// <summary>
        /// Gets Reference to LinedownButton
        /// </summary>
        public Button LinedownButton
        {
            get
            {
                if (null == fLinedownButton)
                {
                    fLinedownButton = new Button("LinedownButton", VerticalCCVScroScrollBar);
                    fLinedownButton.UIMap.Scope = UIASeachScope.Children;
                    fLinedownButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Line down");
                }

                return fLinedownButton;
            }
        }

        /// <summary>
        /// Gets Reference to DeviceListElemeList
        /// </summary>
        public List DeviceListElemeList
        {
            get
            {
                if (null == fDeviceListElemeList)
                {
                    fDeviceListElemeList = new List("DeviceListElemeList", ElementeClassicPane);
                    fDeviceListElemeList.UIMap.Scope = UIASeachScope.Children;
                    fDeviceListElemeList.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eDeviceList");
                    fDeviceListElemeList.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device List");
                    fDeviceListElemeList.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fDeviceListElemeList;
            }
        }

        /// <summary>
        /// Gets Reference to HPAConOXPDQAHPAButton
        /// </summary>
        public Button HPAConOXPDQAHPAButton
        {
            get
            {
                if (null == fHPAConOXPDQAHPAButton)
                {
                    fHPAConOXPDQAHPAButton = new Button("HPAConOXPDQAHPAButton", DeviceListElemeList);
                    fHPAConOXPDQAHPAButton.UIMap.Scope = UIASeachScope.Children;
                    fHPAConOXPDQAHPAButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2d396a9b-16e4-5056-a8e8-7195531835d1");
                    fHPAConOXPDQAHPAButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HPAC on OXPDQAHPAC2");
                    fHPAConOXPDQAHPAButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fHPAConOXPDQAHPAButton;
            }
        }

        /// <summary>
        /// Gets Reference to HPAConOXPDQAHPAText
        /// </summary>
        public Text HPAConOXPDQAHPAText
        {
            get
            {
                if (null == fHPAConOXPDQAHPAText)
                {
                    fHPAConOXPDQAHPAText = new Text("HPAConOXPDQAHPAText", HPAConOXPDQAHPAButton);
                    fHPAConOXPDQAHPAText.UIMap.Scope = UIASeachScope.Children;
                    fHPAConOXPDQAHPAText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fHPAConOXPDQAHPAText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HPAC on OXPDQAHPAC2");
                    fHPAConOXPDQAHPAText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fHPAConOXPDQAHPAText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup0Text
        /// </summary>
        public Text PrinterRichTextDup0Text
        {
            get
            {
                if (null == fPrinterRichTextDup0Text)
                {
                    fPrinterRichTextDup0Text = new Text("PrinterRichTextDup0Text", HPAConOXPDQAHPAButton);
                    fPrinterRichTextDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to HP14C003HPOfficButton
        /// </summary>
        public Button HP14C003HPOfficButton
        {
            get
            {
                if (null == fHP14C003HPOfficButton)
                {
                    fHP14C003HPOfficButton = new Button("HP14C003HPOfficButton", DeviceListElemeList);
                    fHP14C003HPOfficButton.UIMap.Scope = UIASeachScope.Children;
                    fHP14C003HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1c852a4d-b800-1f08-abcd-009c0214c003");
                    fHP14C003HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP14C003 (HP Officejet Pro X551dw Printer)");
                    fHP14C003HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fHP14C003HPOfficButton;
            }
        }

        /// <summary>
        /// Gets Reference to HP14C003HPOfficText
        /// </summary>
        public Text HP14C003HPOfficText
        {
            get
            {
                if (null == fHP14C003HPOfficText)
                {
                    fHP14C003HPOfficText = new Text("HP14C003HPOfficText", HP14C003HPOfficButton);
                    fHP14C003HPOfficText.UIMap.Scope = UIASeachScope.Children;
                    fHP14C003HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fHP14C003HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP14C003 (HP Officejet Pro X551dw Printer)");
                    fHP14C003HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fHP14C003HPOfficText;
            }
        }

        /// <summary>
        /// Gets Reference to InkjetprinterRiDup0Text
        /// </summary>
        public Text InkjetprinterRiDup0Text
        {
            get
            {
                if (null == fInkjetprinterRiDup0Text)
                {
                    fInkjetprinterRiDup0Text = new Text("InkjetprinterRiDup0Text", HP14C003HPOfficButton);
                    fInkjetprinterRiDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fInkjetprinterRiDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fInkjetprinterRiDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Inkjet printer");
                    fInkjetprinterRiDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fInkjetprinterRiDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to HP8848D8v6domaiButton
        /// </summary>
        public Button HP8848D8v6domaiButton
        {
            get
            {
                if (null == fHP8848D8v6domaiButton)
                {
                    fHP8848D8v6domaiButton = new Button("HP8848D8v6domaiButton", DeviceListElemeList);
                    fHP8848D8v6domaiButton.UIMap.Scope = UIASeachScope.Children;
                    fHP8848D8v6domaiButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8bb6a58f-f05e-7d3d-b1f0-1b8bdb1bf1e2");
                    fHP8848D8v6domaiButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP8848D8.v6domainSearchLos (HP DesignJet T830 MFP)");
                    fHP8848D8v6domaiButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fHP8848D8v6domaiButton;
            }
        }

        /// <summary>
        /// Gets Reference to HP8848D8v6domaiText
        /// </summary>
        public Text HP8848D8v6domaiText
        {
            get
            {
                if (null == fHP8848D8v6domaiText)
                {
                    fHP8848D8v6domaiText = new Text("HP8848D8v6domaiText", HP8848D8v6domaiButton);
                    fHP8848D8v6domaiText.UIMap.Scope = UIASeachScope.Children;
                    fHP8848D8v6domaiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fHP8848D8v6domaiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP8848D8.v6domainSearchLos (HP DesignJet T830 MFP)");
                    fHP8848D8v6domaiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fHP8848D8v6domaiText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterInkjetprDup0Text
        /// </summary>
        public Text PrinterInkjetprDup0Text
        {
            get
            {
                if (null == fPrinterInkjetprDup0Text)
                {
                    fPrinterInkjetprDup0Text = new Text("PrinterInkjetprDup0Text", HP8848D8v6domaiButton);
                    fPrinterInkjetprDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterInkjetprDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterInkjetprDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer, Inkjet printer, Scanner");
                    fPrinterInkjetprDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterInkjetprDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to HP8899BEv6domaiButton
        /// </summary>
        public Button HP8899BEv6domaiButton
        {
            get
            {
                if (null == fHP8899BEv6domaiButton)
                {
                    fHP8899BEv6domaiButton = new Button("HP8899BEv6domaiButton", DeviceListElemeList);
                    fHP8899BEv6domaiButton.UIMap.Scope = UIASeachScope.Children;
                    fHP8899BEv6domaiButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"44bc9a0f-8139-5936-e89d-3f6e711ba238");
                    fHP8899BEv6domaiButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP8899BE.v6domainSearchLos (HP DesignJet T830 24-in MFP)");
                    fHP8899BEv6domaiButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fHP8899BEv6domaiButton;
            }
        }

        /// <summary>
        /// Gets Reference to HP8899BEv6domaiText
        /// </summary>
        public Text HP8899BEv6domaiText
        {
            get
            {
                if (null == fHP8899BEv6domaiText)
                {
                    fHP8899BEv6domaiText = new Text("HP8899BEv6domaiText", HP8899BEv6domaiButton);
                    fHP8899BEv6domaiText.UIMap.Scope = UIASeachScope.Children;
                    fHP8899BEv6domaiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fHP8899BEv6domaiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP8899BE.v6domainSearchLos (HP DesignJet T830 24-in MFP)");
                    fHP8899BEv6domaiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fHP8899BEv6domaiText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterInkjetprDup1Text
        /// </summary>
        public Text PrinterInkjetprDup1Text
        {
            get
            {
                if (null == fPrinterInkjetprDup1Text)
                {
                    fPrinterInkjetprDup1Text = new Text("PrinterInkjetprDup1Text", HP8899BEv6domaiButton);
                    fPrinterInkjetprDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterInkjetprDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterInkjetprDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer, Inkjet printer, Scanner");
                    fPrinterInkjetprDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterInkjetprDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to HP9800D1HPPageWButton
        /// </summary>
        public Button HP9800D1HPPageWButton
        {
            get
            {
                if (null == fHP9800D1HPPageWButton)
                {
                    fHP9800D1HPPageWButton = new Button("HP9800D1HPPageWButton", DeviceListElemeList);
                    fHP9800D1HPPageWButton.UIMap.Scope = UIASeachScope.Children;
                    fHP9800D1HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"fa00d4e1-f8c9-544a-8961-d3277311f5e9");
                    fHP9800D1HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP9800D1 (HP PageWide Pro MFP 772-777)");
                    fHP9800D1HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fHP9800D1HPPageWButton;
            }
        }

        /// <summary>
        /// Gets Reference to HP9800D1HPPageWText
        /// </summary>
        public Text HP9800D1HPPageWText
        {
            get
            {
                if (null == fHP9800D1HPPageWText)
                {
                    fHP9800D1HPPageWText = new Text("HP9800D1HPPageWText", HP9800D1HPPageWButton);
                    fHP9800D1HPPageWText.UIMap.Scope = UIASeachScope.Children;
                    fHP9800D1HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fHP9800D1HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP9800D1 (HP PageWide Pro MFP 772-777)");
                    fHP9800D1HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fHP9800D1HPPageWText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterInkjetprDup2Text
        /// </summary>
        public Text PrinterInkjetprDup2Text
        {
            get
            {
                if (null == fPrinterInkjetprDup2Text)
                {
                    fPrinterInkjetprDup2Text = new Text("PrinterInkjetprDup2Text", HP9800D1HPPageWButton);
                    fPrinterInkjetprDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterInkjetprDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterInkjetprDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer, Inkjet printer, Scanner");
                    fPrinterInkjetprDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterInkjetprDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to HP981000HPPageWButton
        /// </summary>
        public Button HP981000HPPageWButton
        {
            get
            {
                if (null == fHP981000HPPageWButton)
                {
                    fHP981000HPPageWButton = new Button("HP981000HPPageWButton", DeviceListElemeList);
                    fHP981000HPPageWButton.UIMap.Scope = UIASeachScope.Children;
                    fHP981000HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"60fdf822-c353-5656-23b6-1b5a1acdf478");
                    fHP981000HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP981000 (HP PageWide Pro MFP 772-777)");
                    fHP981000HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fHP981000HPPageWButton;
            }
        }

        /// <summary>
        /// Gets Reference to HP981000HPPageWText
        /// </summary>
        public Text HP981000HPPageWText
        {
            get
            {
                if (null == fHP981000HPPageWText)
                {
                    fHP981000HPPageWText = new Text("HP981000HPPageWText", HP981000HPPageWButton);
                    fHP981000HPPageWText.UIMap.Scope = UIASeachScope.Children;
                    fHP981000HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fHP981000HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP981000 (HP PageWide Pro MFP 772-777)");
                    fHP981000HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fHP981000HPPageWText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterInkjetprDup3Text
        /// </summary>
        public Text PrinterInkjetprDup3Text
        {
            get
            {
                if (null == fPrinterInkjetprDup3Text)
                {
                    fPrinterInkjetprDup3Text = new Text("PrinterInkjetprDup3Text", HP981000HPPageWButton);
                    fPrinterInkjetprDup3Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterInkjetprDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterInkjetprDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer, Inkjet printer, Scanner");
                    fPrinterInkjetprDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterInkjetprDup3Text;
            }
        }

        /// <summary>
        /// Gets Reference to HP981038HPPageWButton
        /// </summary>
        public Button HP981038HPPageWButton
        {
            get
            {
                if (null == fHP981038HPPageWButton)
                {
                    fHP981038HPPageWButton = new Button("HP981038HPPageWButton", DeviceListElemeList);
                    fHP981038HPPageWButton.UIMap.Scope = UIASeachScope.Children;
                    fHP981038HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1efad6cb-2ceb-527a-cdfe-faacb26ac57f");
                    fHP981038HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP981038 (HP PageWide Pro MFP 772-777)");
                    fHP981038HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fHP981038HPPageWButton;
            }
        }

        /// <summary>
        /// Gets Reference to HP981038HPPageWText
        /// </summary>
        public Text HP981038HPPageWText
        {
            get
            {
                if (null == fHP981038HPPageWText)
                {
                    fHP981038HPPageWText = new Text("HP981038HPPageWText", HP981038HPPageWButton);
                    fHP981038HPPageWText.UIMap.Scope = UIASeachScope.Children;
                    fHP981038HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fHP981038HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP981038 (HP PageWide Pro MFP 772-777)");
                    fHP981038HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fHP981038HPPageWText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterInkjetprDup4Text
        /// </summary>
        public Text PrinterInkjetprDup4Text
        {
            get
            {
                if (null == fPrinterInkjetprDup4Text)
                {
                    fPrinterInkjetprDup4Text = new Text("PrinterInkjetprDup4Text", HP981038HPPageWButton);
                    fPrinterInkjetprDup4Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterInkjetprDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterInkjetprDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer, Inkjet printer, Scanner");
                    fPrinterInkjetprDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterInkjetprDup4Text;
            }
        }

        /// <summary>
        /// Gets Reference to HP981065HPPageWButton
        /// </summary>
        public Button HP981065HPPageWButton
        {
            get
            {
                if (null == fHP981065HPPageWButton)
                {
                    fHP981065HPPageWButton = new Button("HP981065HPPageWButton", DeviceListElemeList);
                    fHP981065HPPageWButton.UIMap.Scope = UIASeachScope.Children;
                    fHP981065HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"aead071e-62bd-5c42-7e52-815bd5dacdec");
                    fHP981065HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP981065 (HP PageWide Pro 750)");
                    fHP981065HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fHP981065HPPageWButton;
            }
        }

        /// <summary>
        /// Gets Reference to HP981065HPPageWText
        /// </summary>
        public Text HP981065HPPageWText
        {
            get
            {
                if (null == fHP981065HPPageWText)
                {
                    fHP981065HPPageWText = new Text("HP981065HPPageWText", HP981065HPPageWButton);
                    fHP981065HPPageWText.UIMap.Scope = UIASeachScope.Children;
                    fHP981065HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fHP981065HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP981065 (HP PageWide Pro 750)");
                    fHP981065HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fHP981065HPPageWText;
            }
        }

        /// <summary>
        /// Gets Reference to InkjetprinterRiDup1Text
        /// </summary>
        public Text InkjetprinterRiDup1Text
        {
            get
            {
                if (null == fInkjetprinterRiDup1Text)
                {
                    fInkjetprinterRiDup1Text = new Text("InkjetprinterRiDup1Text", HP981065HPPageWButton);
                    fInkjetprinterRiDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fInkjetprinterRiDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fInkjetprinterRiDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Inkjet printer");
                    fInkjetprinterRiDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fInkjetprinterRiDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to HP982075HPPageWButton
        /// </summary>
        public Button HP982075HPPageWButton
        {
            get
            {
                if (null == fHP982075HPPageWButton)
                {
                    fHP982075HPPageWButton = new Button("HP982075HPPageWButton", DeviceListElemeList);
                    fHP982075HPPageWButton.UIMap.Scope = UIASeachScope.Children;
                    fHP982075HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"f4ac140f-60a6-5427-81e3-94494467106a");
                    fHP982075HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP982075 (HP PageWide MFP P77740-60z)");
                    fHP982075HPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fHP982075HPPageWButton;
            }
        }

        /// <summary>
        /// Gets Reference to HP982075HPPageWText
        /// </summary>
        public Text HP982075HPPageWText
        {
            get
            {
                if (null == fHP982075HPPageWText)
                {
                    fHP982075HPPageWText = new Text("HP982075HPPageWText", HP982075HPPageWButton);
                    fHP982075HPPageWText.UIMap.Scope = UIASeachScope.Children;
                    fHP982075HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fHP982075HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP982075 (HP PageWide MFP P77740-60z)");
                    fHP982075HPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fHP982075HPPageWText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterInkjetprDup5Text
        /// </summary>
        public Text PrinterInkjetprDup5Text
        {
            get
            {
                if (null == fPrinterInkjetprDup5Text)
                {
                    fPrinterInkjetprDup5Text = new Text("PrinterInkjetprDup5Text", HP982075HPPageWButton);
                    fPrinterInkjetprDup5Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterInkjetprDup5Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterInkjetprDup5Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer, Inkjet printer, Scanner");
                    fPrinterInkjetprDup5Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterInkjetprDup5Text;
            }
        }

        /// <summary>
        /// Gets Reference to HPDE010EHPPageWButton
        /// </summary>
        public Button HPDE010EHPPageWButton
        {
            get
            {
                if (null == fHPDE010EHPPageWButton)
                {
                    fHPDE010EHPPageWButton = new Button("HPDE010EHPPageWButton", DeviceListElemeList);
                    fHPDE010EHPPageWButton.UIMap.Scope = UIASeachScope.Children;
                    fHPDE010EHPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"bb69fae9-b802-db2e-9fc7-33c13ec1ee7c");
                    fHPDE010EHPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HPDE010E (HP PageWide Pro 477dn MFP)");
                    fHPDE010EHPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fHPDE010EHPPageWButton;
            }
        }

        /// <summary>
        /// Gets Reference to HPDE010EHPPageWText
        /// </summary>
        public Text HPDE010EHPPageWText
        {
            get
            {
                if (null == fHPDE010EHPPageWText)
                {
                    fHPDE010EHPPageWText = new Text("HPDE010EHPPageWText", HPDE010EHPPageWButton);
                    fHPDE010EHPPageWText.UIMap.Scope = UIASeachScope.Children;
                    fHPDE010EHPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fHPDE010EHPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HPDE010E (HP PageWide Pro 477dn MFP)");
                    fHPDE010EHPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fHPDE010EHPPageWText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterInkjetprDup6Text
        /// </summary>
        public Text PrinterInkjetprDup6Text
        {
            get
            {
                if (null == fPrinterInkjetprDup6Text)
                {
                    fPrinterInkjetprDup6Text = new Text("PrinterInkjetprDup6Text", HPDE010EHPPageWButton);
                    fPrinterInkjetprDup6Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterInkjetprDup6Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterInkjetprDup6Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer, Inkjet printer, Scanner, Fax");
                    fPrinterInkjetprDup6Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterInkjetprDup6Text;
            }
        }

        /// <summary>
        /// Gets Reference to HPDF005BHPPageWButton
        /// </summary>
        public Button HPDF005BHPPageWButton
        {
            get
            {
                if (null == fHPDF005BHPPageWButton)
                {
                    fHPDF005BHPPageWButton = new Button("HPDF005BHPPageWButton", DeviceListElemeList);
                    fHPDF005BHPPageWButton.UIMap.Scope = UIASeachScope.Children;
                    fHPDF005BHPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"69a19142-9e1e-5413-b353-a51af58e0f9d");
                    fHPDF005BHPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HPDF005B (HP PageWide MFP P57750)");
                    fHPDF005BHPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fHPDF005BHPPageWButton;
            }
        }

        /// <summary>
        /// Gets Reference to HPDF005BHPPageWText
        /// </summary>
        public Text HPDF005BHPPageWText
        {
            get
            {
                if (null == fHPDF005BHPPageWText)
                {
                    fHPDF005BHPPageWText = new Text("HPDF005BHPPageWText", HPDF005BHPPageWButton);
                    fHPDF005BHPPageWText.UIMap.Scope = UIASeachScope.Children;
                    fHPDF005BHPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fHPDF005BHPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HPDF005B (HP PageWide MFP P57750)");
                    fHPDF005BHPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fHPDF005BHPPageWText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterInkjetprDup7Text
        /// </summary>
        public Text PrinterInkjetprDup7Text
        {
            get
            {
                if (null == fPrinterInkjetprDup7Text)
                {
                    fPrinterInkjetprDup7Text = new Text("PrinterInkjetprDup7Text", HPDF005BHPPageWButton);
                    fPrinterInkjetprDup7Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterInkjetprDup7Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterInkjetprDup7Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer, Inkjet printer, Scanner, Fax");
                    fPrinterInkjetprDup7Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterInkjetprDup7Text;
            }
        }

        /// <summary>
        /// Gets Reference to HPF774B6HPOfficButton
        /// </summary>
        public Button HPF774B6HPOfficButton
        {
            get
            {
                if (null == fHPF774B6HPOfficButton)
                {
                    fHPF774B6HPOfficButton = new Button("HPF774B6HPOfficButton", DeviceListElemeList);
                    fHPF774B6HPOfficButton.UIMap.Scope = UIASeachScope.Children;
                    fHPF774B6HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1c852a4d-b800-1f08-abcd-843497f774b6");
                    fHPF774B6HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HPF774B6 (HP Officejet Pro X576dw MFP)");
                    fHPF774B6HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fHPF774B6HPOfficButton;
            }
        }

        /// <summary>
        /// Gets Reference to HPF774B6HPOfficText
        /// </summary>
        public Text HPF774B6HPOfficText
        {
            get
            {
                if (null == fHPF774B6HPOfficText)
                {
                    fHPF774B6HPOfficText = new Text("HPF774B6HPOfficText", HPF774B6HPOfficButton);
                    fHPF774B6HPOfficText.UIMap.Scope = UIASeachScope.Children;
                    fHPF774B6HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fHPF774B6HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HPF774B6 (HP Officejet Pro X576dw MFP)");
                    fHPF774B6HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fHPF774B6HPOfficText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterInkjetprDup8Text
        /// </summary>
        public Text PrinterInkjetprDup8Text
        {
            get
            {
                if (null == fPrinterInkjetprDup8Text)
                {
                    fPrinterInkjetprDup8Text = new Text("PrinterInkjetprDup8Text", HPF774B6HPOfficButton);
                    fPrinterInkjetprDup8Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterInkjetprDup8Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterInkjetprDup8Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer, Inkjet printer, Scanner, Fax");
                    fPrinterInkjetprDup8Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterInkjetprDup8Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI00265516B3E6Button
        /// </summary>
        public Button NPI00265516B3E6Button
        {
            get
            {
                if (null == fNPI00265516B3E6Button)
                {
                    fNPI00265516B3E6Button = new Button("NPI00265516B3E6Button", DeviceListElemeList);
                    fNPI00265516B3E6Button.UIMap.Scope = UIASeachScope.Children;
                    fNPI00265516B3E6Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"fb609cce-316d-f3f7-54f4-00265516b3e6");
                    fNPI00265516B3E6Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI00265516B3E6 (HP Designjet D5800ps)");
                    fNPI00265516B3E6Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPI00265516B3E6Button;
            }
        }

        /// <summary>
        /// Gets Reference to NPI00265516B3E6Text
        /// </summary>
        public Text NPI00265516B3E6Text
        {
            get
            {
                if (null == fNPI00265516B3E6Text)
                {
                    fNPI00265516B3E6Text = new Text("NPI00265516B3E6Text", NPI00265516B3E6Button);
                    fNPI00265516B3E6Text.UIMap.Scope = UIASeachScope.Children;
                    fNPI00265516B3E6Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI00265516B3E6Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI00265516B3E6 (HP Designjet D5800ps)");
                    fNPI00265516B3E6Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPI00265516B3E6Text;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup1Text
        /// </summary>
        public Text PrinterRichTextDup1Text
        {
            get
            {
                if (null == fPrinterRichTextDup1Text)
                {
                    fPrinterRichTextDup1Text = new Text("PrinterRichTextDup1Text", NPI00265516B3E6Button);
                    fPrinterRichTextDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI0207F5HPLaseButton
        /// </summary>
        public Button NPI0207F5HPLaseButton
        {
            get
            {
                if (null == fNPI0207F5HPLaseButton)
                {
                    fNPI0207F5HPLaseButton = new Button("NPI0207F5HPLaseButton", DeviceListElemeList);
                    fNPI0207F5HPLaseButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI0207F5HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d2f5df0d-520c-b7e4-7141-6c3be50207f5");
                    fNPI0207F5HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI0207F5 (HP LaserJet MFP M725)");
                    fNPI0207F5HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPI0207F5HPLaseButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI0207F5HPLaseText
        /// </summary>
        public Text NPI0207F5HPLaseText
        {
            get
            {
                if (null == fNPI0207F5HPLaseText)
                {
                    fNPI0207F5HPLaseText = new Text("NPI0207F5HPLaseText", NPI0207F5HPLaseButton);
                    fNPI0207F5HPLaseText.UIMap.Scope = UIASeachScope.Children;
                    fNPI0207F5HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI0207F5HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI0207F5 (HP LaserJet MFP M725)");
                    fNPI0207F5HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPI0207F5HPLaseText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup2Text
        /// </summary>
        public Text PrinterRichTextDup2Text
        {
            get
            {
                if (null == fPrinterRichTextDup2Text)
                {
                    fPrinterRichTextDup2Text = new Text("PrinterRichTextDup2Text", NPI0207F5HPLaseButton);
                    fPrinterRichTextDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI10D047HPColoButton
        /// </summary>
        public Button NPI10D047HPColoButton
        {
            get
            {
                if (null == fNPI10D047HPColoButton)
                {
                    fNPI10D047HPColoButton = new Button("NPI10D047HPColoButton", DeviceListElemeList);
                    fNPI10D047HPColoButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI10D047HPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4095cf21-8cc5-4097-8b0b-705a0f10d047");
                    fNPI10D047HPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI10D047 (HP Color LaserJet MFP M577)");
                    fNPI10D047HPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPI10D047HPColoButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI10D047HPColoText
        /// </summary>
        public Text NPI10D047HPColoText
        {
            get
            {
                if (null == fNPI10D047HPColoText)
                {
                    fNPI10D047HPColoText = new Text("NPI10D047HPColoText", NPI10D047HPColoButton);
                    fNPI10D047HPColoText.UIMap.Scope = UIASeachScope.Children;
                    fNPI10D047HPColoText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI10D047HPColoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI10D047 (HP Color LaserJet MFP M577)");
                    fNPI10D047HPColoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPI10D047HPColoText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup3Text
        /// </summary>
        public Text PrinterRichTextDup3Text
        {
            get
            {
                if (null == fPrinterRichTextDup3Text)
                {
                    fPrinterRichTextDup3Text = new Text("PrinterRichTextDup3Text", NPI10D047HPColoButton);
                    fPrinterRichTextDup3Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup3Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI126AE2HPPageButton
        /// </summary>
        public Button NPI126AE2HPPageButton
        {
            get
            {
                if (null == fNPI126AE2HPPageButton)
                {
                    fNPI126AE2HPPageButton = new Button("NPI126AE2HPPageButton", DeviceListElemeList);
                    fNPI126AE2HPPageButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI126AE2HPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"02fa92f0-abc2-11e6-9805-c8d3ff126ae2");
                    fNPI126AE2HPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI126AE2 (HP PageWide Color MFP 780)");
                    fNPI126AE2HPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPI126AE2HPPageButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI126AE2HPPageText
        /// </summary>
        public Text NPI126AE2HPPageText
        {
            get
            {
                if (null == fNPI126AE2HPPageText)
                {
                    fNPI126AE2HPPageText = new Text("NPI126AE2HPPageText", NPI126AE2HPPageButton);
                    fNPI126AE2HPPageText.UIMap.Scope = UIASeachScope.Children;
                    fNPI126AE2HPPageText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI126AE2HPPageText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI126AE2 (HP PageWide Color MFP 780)");
                    fNPI126AE2HPPageText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPI126AE2HPPageText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup4Text
        /// </summary>
        public Text PrinterRichTextDup4Text
        {
            get
            {
                if (null == fPrinterRichTextDup4Text)
                {
                    fPrinterRichTextDup4Text = new Text("PrinterRichTextDup4Text", NPI126AE2HPPageButton);
                    fPrinterRichTextDup4Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup4Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI25145EHPPageButton
        /// </summary>
        public Button NPI25145EHPPageButton
        {
            get
            {
                if (null == fNPI25145EHPPageButton)
                {
                    fNPI25145EHPPageButton = new Button("NPI25145EHPPageButton", DeviceListElemeList);
                    fNPI25145EHPPageButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI25145EHPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1612a85c-07cc-11e7-8989-40b03425145e");
                    fNPI25145EHPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI25145E (HP PageWide Color Flow MFP 785)");
                    fNPI25145EHPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPI25145EHPPageButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI25145EHPPageText
        /// </summary>
        public Text NPI25145EHPPageText
        {
            get
            {
                if (null == fNPI25145EHPPageText)
                {
                    fNPI25145EHPPageText = new Text("NPI25145EHPPageText", NPI25145EHPPageButton);
                    fNPI25145EHPPageText.UIMap.Scope = UIASeachScope.Children;
                    fNPI25145EHPPageText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI25145EHPPageText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI25145E (HP PageWide Color Flow MFP 785)");
                    fNPI25145EHPPageText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPI25145EHPPageText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup5Text
        /// </summary>
        public Text PrinterRichTextDup5Text
        {
            get
            {
                if (null == fPrinterRichTextDup5Text)
                {
                    fPrinterRichTextDup5Text = new Text("PrinterRichTextDup5Text", NPI25145EHPPageButton);
                    fPrinterRichTextDup5Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup5Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup5Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup5Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup5Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI2514B2HPPageButton
        /// </summary>
        public Button NPI2514B2HPPageButton
        {
            get
            {
                if (null == fNPI2514B2HPPageButton)
                {
                    fNPI2514B2HPPageButton = new Button("NPI2514B2HPPageButton", DeviceListElemeList);
                    fNPI2514B2HPPageButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI2514B2HPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8112a259-412d-4685-a982-40b0342514b2");
                    fNPI2514B2HPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI2514B2 (HP PageWide Color 765)");
                    fNPI2514B2HPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPI2514B2HPPageButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI2514B2HPPageText
        /// </summary>
        public Text NPI2514B2HPPageText
        {
            get
            {
                if (null == fNPI2514B2HPPageText)
                {
                    fNPI2514B2HPPageText = new Text("NPI2514B2HPPageText", NPI2514B2HPPageButton);
                    fNPI2514B2HPPageText.UIMap.Scope = UIASeachScope.Children;
                    fNPI2514B2HPPageText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI2514B2HPPageText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI2514B2 (HP PageWide Color 765)");
                    fNPI2514B2HPPageText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPI2514B2HPPageText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup6Text
        /// </summary>
        public Text PrinterRichTextDup6Text
        {
            get
            {
                if (null == fPrinterRichTextDup6Text)
                {
                    fPrinterRichTextDup6Text = new Text("PrinterRichTextDup6Text", NPI2514B2HPPageButton);
                    fPrinterRichTextDup6Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup6Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup6Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup6Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup6Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI2514BEHPPageButton
        /// </summary>
        public Button NPI2514BEHPPageButton
        {
            get
            {
                if (null == fNPI2514BEHPPageButton)
                {
                    fNPI2514BEHPPageButton = new Button("NPI2514BEHPPageButton", DeviceListElemeList);
                    fNPI2514BEHPPageButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI2514BEHPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9a70e9b2-725a-4718-9364-40b0342514be");
                    fNPI2514BEHPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI2514BE (HP PageWide Color 765)");
                    fNPI2514BEHPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPI2514BEHPPageButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI2514BEHPPageText
        /// </summary>
        public Text NPI2514BEHPPageText
        {
            get
            {
                if (null == fNPI2514BEHPPageText)
                {
                    fNPI2514BEHPPageText = new Text("NPI2514BEHPPageText", NPI2514BEHPPageButton);
                    fNPI2514BEHPPageText.UIMap.Scope = UIASeachScope.Children;
                    fNPI2514BEHPPageText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI2514BEHPPageText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI2514BE (HP PageWide Color 765)");
                    fNPI2514BEHPPageText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPI2514BEHPPageText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup7Text
        /// </summary>
        public Text PrinterRichTextDup7Text
        {
            get
            {
                if (null == fPrinterRichTextDup7Text)
                {
                    fPrinterRichTextDup7Text = new Text("PrinterRichTextDup7Text", NPI2514BEHPPageButton);
                    fPrinterRichTextDup7Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup7Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup7Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup7Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup7Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI3FBD17HPLaseButton
        /// </summary>
        public Button NPI3FBD17HPLaseButton
        {
            get
            {
                if (null == fNPI3FBD17HPLaseButton)
                {
                    fNPI3FBD17HPLaseButton = new Button("NPI3FBD17HPLaseButton", DeviceListElemeList);
                    fNPI3FBD17HPLaseButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI3FBD17HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"262c4871-dd9a-489f-81d9-30e1713fbd17");
                    fNPI3FBD17HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI3FBD17 (HP LaserJet Flow MFP E82560)");
                    fNPI3FBD17HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPI3FBD17HPLaseButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI3FBD17HPLaseText
        /// </summary>
        public Text NPI3FBD17HPLaseText
        {
            get
            {
                if (null == fNPI3FBD17HPLaseText)
                {
                    fNPI3FBD17HPLaseText = new Text("NPI3FBD17HPLaseText", NPI3FBD17HPLaseButton);
                    fNPI3FBD17HPLaseText.UIMap.Scope = UIASeachScope.Children;
                    fNPI3FBD17HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI3FBD17HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI3FBD17 (HP LaserJet Flow MFP E82560)");
                    fNPI3FBD17HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPI3FBD17HPLaseText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup8Text
        /// </summary>
        public Text PrinterRichTextDup8Text
        {
            get
            {
                if (null == fPrinterRichTextDup8Text)
                {
                    fPrinterRichTextDup8Text = new Text("PrinterRichTextDup8Text", NPI3FBD17HPLaseButton);
                    fPrinterRichTextDup8Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup8Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup8Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup8Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup8Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI4EF5DFHPPageButton
        /// </summary>
        public Button NPI4EF5DFHPPageButton
        {
            get
            {
                if (null == fNPI4EF5DFHPPageButton)
                {
                    fNPI4EF5DFHPPageButton = new Button("NPI4EF5DFHPPageButton", DeviceListElemeList);
                    fNPI4EF5DFHPPageButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI4EF5DFHPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9a70e9b2-725a-4718-9364-5820b14ef5df");
                    fNPI4EF5DFHPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI4EF5DF (HP PageWide Color 765)");
                    fNPI4EF5DFHPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPI4EF5DFHPPageButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI4EF5DFHPPageText
        /// </summary>
        public Text NPI4EF5DFHPPageText
        {
            get
            {
                if (null == fNPI4EF5DFHPPageText)
                {
                    fNPI4EF5DFHPPageText = new Text("NPI4EF5DFHPPageText", NPI4EF5DFHPPageButton);
                    fNPI4EF5DFHPPageText.UIMap.Scope = UIASeachScope.Children;
                    fNPI4EF5DFHPPageText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI4EF5DFHPPageText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI4EF5DF (HP PageWide Color 765)");
                    fNPI4EF5DFHPPageText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPI4EF5DFHPPageText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup9Text
        /// </summary>
        public Text PrinterRichTextDup9Text
        {
            get
            {
                if (null == fPrinterRichTextDup9Text)
                {
                    fPrinterRichTextDup9Text = new Text("PrinterRichTextDup9Text", NPI4EF5DFHPPageButton);
                    fPrinterRichTextDup9Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup9Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup9Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup9Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup9Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI5DC559HPColoButton
        /// </summary>
        public Button NPI5DC559HPColoButton
        {
            get
            {
                if (null == fNPI5DC559HPColoButton)
                {
                    fNPI5DC559HPColoButton = new Button("NPI5DC559HPColoButton", DeviceListElemeList);
                    fNPI5DC559HPColoButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI5DC559HPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"74ece100-bf72-a61d-e255-a45d365dc559");
                    fNPI5DC559HPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI5DC559 (HP Color LaserJet flow MFP M880)");
                    fNPI5DC559HPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPI5DC559HPColoButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI5DC559HPColoText
        /// </summary>
        public Text NPI5DC559HPColoText
        {
            get
            {
                if (null == fNPI5DC559HPColoText)
                {
                    fNPI5DC559HPColoText = new Text("NPI5DC559HPColoText", NPI5DC559HPColoButton);
                    fNPI5DC559HPColoText.UIMap.Scope = UIASeachScope.Children;
                    fNPI5DC559HPColoText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI5DC559HPColoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI5DC559 (HP Color LaserJet flow MFP M880)");
                    fNPI5DC559HPColoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPI5DC559HPColoText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup10Text
        /// </summary>
        public Text PrinterRichTextDup10Text
        {
            get
            {
                if (null == fPrinterRichTextDup10Text)
                {
                    fPrinterRichTextDup10Text = new Text("PrinterRichTextDup10Text", NPI5DC559HPColoButton);
                    fPrinterRichTextDup10Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup10Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup10Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup10Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup10Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI66C32CHPOffiButton
        /// </summary>
        public Button NPI66C32CHPOffiButton
        {
            get
            {
                if (null == fNPI66C32CHPOffiButton)
                {
                    fNPI66C32CHPOffiButton = new Button("NPI66C32CHPOffiButton", DeviceListElemeList);
                    fNPI66C32CHPOffiButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI66C32CHPOffiButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c193943a-b30a-7d26-7c8a-f0921c66c32c");
                    fNPI66C32CHPOffiButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI66C32C (HP Officejet Color X555)");
                    fNPI66C32CHPOffiButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPI66C32CHPOffiButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI66C32CHPOffiText
        /// </summary>
        public Text NPI66C32CHPOffiText
        {
            get
            {
                if (null == fNPI66C32CHPOffiText)
                {
                    fNPI66C32CHPOffiText = new Text("NPI66C32CHPOffiText", NPI66C32CHPOffiButton);
                    fNPI66C32CHPOffiText.UIMap.Scope = UIASeachScope.Children;
                    fNPI66C32CHPOffiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI66C32CHPOffiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI66C32C (HP Officejet Color X555)");
                    fNPI66C32CHPOffiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPI66C32CHPOffiText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup11Text
        /// </summary>
        public Text PrinterRichTextDup11Text
        {
            get
            {
                if (null == fPrinterRichTextDup11Text)
                {
                    fPrinterRichTextDup11Text = new Text("PrinterRichTextDup11Text", NPI66C32CHPOffiButton);
                    fPrinterRichTextDup11Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup11Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup11Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup11Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup11Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI754093HPLaseButton
        /// </summary>
        public Button NPI754093HPLaseButton
        {
            get
            {
                if (null == fNPI754093HPLaseButton)
                {
                    fNPI754093HPLaseButton = new Button("NPI754093HPLaseButton", DeviceListElemeList);
                    fNPI754093HPLaseButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI754093HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"555a4448-1402-d556-4dab-000e7f754093");
                    fNPI754093HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI754093 (HP LaserJet 700 color MFP M775)");
                    fNPI754093HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPI754093HPLaseButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI754093HPLaseText
        /// </summary>
        public Text NPI754093HPLaseText
        {
            get
            {
                if (null == fNPI754093HPLaseText)
                {
                    fNPI754093HPLaseText = new Text("NPI754093HPLaseText", NPI754093HPLaseButton);
                    fNPI754093HPLaseText.UIMap.Scope = UIASeachScope.Children;
                    fNPI754093HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI754093HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI754093 (HP LaserJet 700 color MFP M775)");
                    fNPI754093HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPI754093HPLaseText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup12Text
        /// </summary>
        public Text PrinterRichTextDup12Text
        {
            get
            {
                if (null == fPrinterRichTextDup12Text)
                {
                    fPrinterRichTextDup12Text = new Text("PrinterRichTextDup12Text", NPI754093HPLaseButton);
                    fPrinterRichTextDup12Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup12Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup12Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup12Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup12Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI78CDE2HPLaseButton
        /// </summary>
        public Button NPI78CDE2HPLaseButton
        {
            get
            {
                if (null == fNPI78CDE2HPLaseButton)
                {
                    fNPI78CDE2HPLaseButton = new Button("NPI78CDE2HPLaseButton", DeviceListElemeList);
                    fNPI78CDE2HPLaseButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI78CDE2HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"947718ce-c28c-f2fb-a63c-fc15b478cde2");
                    fNPI78CDE2HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI78CDE2 (HP LaserJet MFP M630)");
                    fNPI78CDE2HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPI78CDE2HPLaseButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI78CDE2HPLaseText
        /// </summary>
        public Text NPI78CDE2HPLaseText
        {
            get
            {
                if (null == fNPI78CDE2HPLaseText)
                {
                    fNPI78CDE2HPLaseText = new Text("NPI78CDE2HPLaseText", NPI78CDE2HPLaseButton);
                    fNPI78CDE2HPLaseText.UIMap.Scope = UIASeachScope.Children;
                    fNPI78CDE2HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI78CDE2HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI78CDE2 (HP LaserJet MFP M630)");
                    fNPI78CDE2HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPI78CDE2HPLaseText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup13Text
        /// </summary>
        public Text PrinterRichTextDup13Text
        {
            get
            {
                if (null == fPrinterRichTextDup13Text)
                {
                    fPrinterRichTextDup13Text = new Text("PrinterRichTextDup13Text", NPI78CDE2HPLaseButton);
                    fPrinterRichTextDup13Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup13Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup13Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup13Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup13Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI88843FHPDesiButton
        /// </summary>
        public Button NPI88843FHPDesiButton
        {
            get
            {
                if (null == fNPI88843FHPDesiButton)
                {
                    fNPI88843FHPDesiButton = new Button("NPI88843FHPDesiButton", DeviceListElemeList);
                    fNPI88843FHPDesiButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI88843FHPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"295c92b0-57e1-8e95-12e7-00265588843f");
                    fNPI88843FHPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI88843F (HP Designjet T2300 PostScript)");
                    fNPI88843FHPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPI88843FHPDesiButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI88843FHPDesiText
        /// </summary>
        public Text NPI88843FHPDesiText
        {
            get
            {
                if (null == fNPI88843FHPDesiText)
                {
                    fNPI88843FHPDesiText = new Text("NPI88843FHPDesiText", NPI88843FHPDesiButton);
                    fNPI88843FHPDesiText.UIMap.Scope = UIASeachScope.Children;
                    fNPI88843FHPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI88843FHPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI88843F (HP Designjet T2300 PostScript)");
                    fNPI88843FHPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPI88843FHPDesiText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup14Text
        /// </summary>
        public Text PrinterRichTextDup14Text
        {
            get
            {
                if (null == fPrinterRichTextDup14Text)
                {
                    fPrinterRichTextDup14Text = new Text("PrinterRichTextDup14Text", NPI88843FHPDesiButton);
                    fPrinterRichTextDup14Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup14Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup14Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup14Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup14Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPIA5755BHPColoButton
        /// </summary>
        public Button NPIA5755BHPColoButton
        {
            get
            {
                if (null == fNPIA5755BHPColoButton)
                {
                    fNPIA5755BHPColoButton = new Button("NPIA5755BHPColoButton", DeviceListElemeList);
                    fNPIA5755BHPColoButton.UIMap.Scope = UIASeachScope.Children;
                    fNPIA5755BHPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"10ed6523-c855-4657-94eb-705a0fa5755b");
                    fNPIA5755BHPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIA5755B (HP Color LaserJet M652)");
                    fNPIA5755BHPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPIA5755BHPColoButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPIA5755BHPColoText
        /// </summary>
        public Text NPIA5755BHPColoText
        {
            get
            {
                if (null == fNPIA5755BHPColoText)
                {
                    fNPIA5755BHPColoText = new Text("NPIA5755BHPColoText", NPIA5755BHPColoButton);
                    fNPIA5755BHPColoText.UIMap.Scope = UIASeachScope.Children;
                    fNPIA5755BHPColoText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPIA5755BHPColoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIA5755B (HP Color LaserJet M652)");
                    fNPIA5755BHPColoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPIA5755BHPColoText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup15Text
        /// </summary>
        public Text PrinterRichTextDup15Text
        {
            get
            {
                if (null == fPrinterRichTextDup15Text)
                {
                    fPrinterRichTextDup15Text = new Text("PrinterRichTextDup15Text", NPIA5755BHPColoButton);
                    fPrinterRichTextDup15Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup15Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup15Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup15Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup15Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPIBB41A8HPPageButton
        /// </summary>
        public Button NPIBB41A8HPPageButton
        {
            get
            {
                if (null == fNPIBB41A8HPPageButton)
                {
                    fNPIBB41A8HPPageButton = new Button("NPIBB41A8HPPageButton", DeviceListElemeList);
                    fNPIBB41A8HPPageButton.UIMap.Scope = UIASeachScope.Children;
                    fNPIBB41A8HPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"98527d25-54cd-44d0-9e5e-ec8eb5bb41a8");
                    fNPIBB41A8HPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIBB41A8 (HP PageWide Color E75160)");
                    fNPIBB41A8HPPageButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPIBB41A8HPPageButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPIBB41A8HPPageText
        /// </summary>
        public Text NPIBB41A8HPPageText
        {
            get
            {
                if (null == fNPIBB41A8HPPageText)
                {
                    fNPIBB41A8HPPageText = new Text("NPIBB41A8HPPageText", NPIBB41A8HPPageButton);
                    fNPIBB41A8HPPageText.UIMap.Scope = UIASeachScope.Children;
                    fNPIBB41A8HPPageText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPIBB41A8HPPageText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIBB41A8 (HP PageWide Color E75160)");
                    fNPIBB41A8HPPageText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPIBB41A8HPPageText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup16Text
        /// </summary>
        public Text PrinterRichTextDup16Text
        {
            get
            {
                if (null == fPrinterRichTextDup16Text)
                {
                    fPrinterRichTextDup16Text = new Text("PrinterRichTextDup16Text", NPIBB41A8HPPageButton);
                    fPrinterRichTextDup16Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup16Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup16Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup16Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup16Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPIBCD39BHPLaseButton
        /// </summary>
        public Button NPIBCD39BHPLaseButton
        {
            get
            {
                if (null == fNPIBCD39BHPLaseButton)
                {
                    fNPIBCD39BHPLaseButton = new Button("NPIBCD39BHPLaseButton", DeviceListElemeList);
                    fNPIBCD39BHPLaseButton.UIMap.Scope = UIASeachScope.Children;
                    fNPIBCD39BHPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"219ea2b9-d377-464d-97af-30e171bcd39b");
                    fNPIBCD39BHPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIBCD39B (HP LaserJet M609)");
                    fNPIBCD39BHPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPIBCD39BHPLaseButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPIBCD39BHPLaseText
        /// </summary>
        public Text NPIBCD39BHPLaseText
        {
            get
            {
                if (null == fNPIBCD39BHPLaseText)
                {
                    fNPIBCD39BHPLaseText = new Text("NPIBCD39BHPLaseText", NPIBCD39BHPLaseButton);
                    fNPIBCD39BHPLaseText.UIMap.Scope = UIASeachScope.Children;
                    fNPIBCD39BHPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPIBCD39BHPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIBCD39B (HP LaserJet M609)");
                    fNPIBCD39BHPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPIBCD39BHPLaseText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup17Text
        /// </summary>
        public Text PrinterRichTextDup17Text
        {
            get
            {
                if (null == fPrinterRichTextDup17Text)
                {
                    fPrinterRichTextDup17Text = new Text("PrinterRichTextDup17Text", NPIBCD39BHPLaseButton);
                    fPrinterRichTextDup17Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup17Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup17Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup17Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup17Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPIC1D91DHPColoButton
        /// </summary>
        public Button NPIC1D91DHPColoButton
        {
            get
            {
                if (null == fNPIC1D91DHPColoButton)
                {
                    fNPIC1D91DHPColoButton = new Button("NPIC1D91DHPColoButton", DeviceListElemeList);
                    fNPIC1D91DHPColoButton.UIMap.Scope = UIASeachScope.Children;
                    fNPIC1D91DHPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"564e3136-4a43-5038-3742-ec8eb5c1d91d");
                    fNPIC1D91DHPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIC1D91D (HP Color LaserJet MFP M281fdw)");
                    fNPIC1D91DHPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPIC1D91DHPColoButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPIC1D91DHPColoText
        /// </summary>
        public Text NPIC1D91DHPColoText
        {
            get
            {
                if (null == fNPIC1D91DHPColoText)
                {
                    fNPIC1D91DHPColoText = new Text("NPIC1D91DHPColoText", NPIC1D91DHPColoButton);
                    fNPIC1D91DHPColoText.UIMap.Scope = UIASeachScope.Children;
                    fNPIC1D91DHPColoText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPIC1D91DHPColoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIC1D91D (HP Color LaserJet MFP M281fdw)");
                    fNPIC1D91DHPColoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPIC1D91DHPColoText;
            }
        }

        /// <summary>
        /// Gets Reference to MultiFunctionPrText
        /// </summary>
        public Text MultiFunctionPrText
        {
            get
            {
                if (null == fMultiFunctionPrText)
                {
                    fMultiFunctionPrText = new Text("MultiFunctionPrText", NPIC1D91DHPColoButton);
                    fMultiFunctionPrText.UIMap.Scope = UIASeachScope.Children;
                    fMultiFunctionPrText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fMultiFunctionPrText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Multi-Function Printer, Printer, Scanner");
                    fMultiFunctionPrText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fMultiFunctionPrText;
            }
        }

        /// <summary>
        /// Gets Reference to NPIEC9A7464FC50Button
        /// </summary>
        public Button NPIEC9A7464FC50Button
        {
            get
            {
                if (null == fNPIEC9A7464FC50Button)
                {
                    fNPIEC9A7464FC50Button = new Button("NPIEC9A7464FC50Button", DeviceListElemeList);
                    fNPIEC9A7464FC50Button.UIMap.Scope = UIASeachScope.Children;
                    fNPIEC9A7464FC50Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"61235ebf-620c-41f7-4881-ec9a7464fc50");
                    fNPIEC9A7464FC50Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIEC9A7464FC50 (HP Designjet T790ps 24in)");
                    fNPIEC9A7464FC50Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPIEC9A7464FC50Button;
            }
        }

        /// <summary>
        /// Gets Reference to NPIEC9A7464FC50Text
        /// </summary>
        public Text NPIEC9A7464FC50Text
        {
            get
            {
                if (null == fNPIEC9A7464FC50Text)
                {
                    fNPIEC9A7464FC50Text = new Text("NPIEC9A7464FC50Text", NPIEC9A7464FC50Button);
                    fNPIEC9A7464FC50Text.UIMap.Scope = UIASeachScope.Children;
                    fNPIEC9A7464FC50Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPIEC9A7464FC50Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIEC9A7464FC50 (HP Designjet T790ps 24in)");
                    fNPIEC9A7464FC50Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPIEC9A7464FC50Text;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup18Text
        /// </summary>
        public Text PrinterRichTextDup18Text
        {
            get
            {
                if (null == fPrinterRichTextDup18Text)
                {
                    fPrinterRichTextDup18Text = new Text("PrinterRichTextDup18Text", NPIEC9A7464FC50Button);
                    fPrinterRichTextDup18Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup18Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup18Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup18Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup18Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPIECECA6HPLaseButton
        /// </summary>
        public Button NPIECECA6HPLaseButton
        {
            get
            {
                if (null == fNPIECECA6HPLaseButton)
                {
                    fNPIECECA6HPLaseButton = new Button("NPIECECA6HPLaseButton", DeviceListElemeList);
                    fNPIECECA6HPLaseButton.UIMap.Scope = UIASeachScope.Children;
                    fNPIECECA6HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d2457085-e609-b537-497a-8851fbececa6");
                    fNPIECECA6HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIECECA6 (HP LaserJet 500 MFP M525)");
                    fNPIECECA6HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPIECECA6HPLaseButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPIECECA6HPLaseText
        /// </summary>
        public Text NPIECECA6HPLaseText
        {
            get
            {
                if (null == fNPIECECA6HPLaseText)
                {
                    fNPIECECA6HPLaseText = new Text("NPIECECA6HPLaseText", NPIECECA6HPLaseButton);
                    fNPIECECA6HPLaseText.UIMap.Scope = UIASeachScope.Children;
                    fNPIECECA6HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPIECECA6HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIECECA6 (HP LaserJet 500 MFP M525)");
                    fNPIECECA6HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPIECECA6HPLaseText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup19Text
        /// </summary>
        public Text PrinterRichTextDup19Text
        {
            get
            {
                if (null == fPrinterRichTextDup19Text)
                {
                    fPrinterRichTextDup19Text = new Text("PrinterRichTextDup19Text", NPIECECA6HPLaseButton);
                    fPrinterRichTextDup19Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup19Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup19Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup19Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup19Text;
            }
        }

        /// <summary>
        /// Gets Reference to TheprinterthatIHyperlink
        /// </summary>
        public Hyperlink TheprinterthatIHyperlink
        {
            get
            {
                if (null == fTheprinterthatIHyperlink)
                {
                    fTheprinterthatIHyperlink = new Hyperlink("TheprinterthatIHyperlink", ElementeClassicPane);
                    fTheprinterthatIHyperlink.UIMap.Scope = UIASeachScope.Children;
                    fTheprinterthatIHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eHelpLink");
                    fTheprinterthatIHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"The printer that I want isn’t listed");
                    fTheprinterthatIHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fTheprinterthatIHyperlink;
            }
        }

        /// <summary>
        /// Gets Reference to NextCCPushButtoDup1Button
        /// </summary>
        public Button NextCCPushButtoDup1Button
        {
            get
            {
                if (null == fNextCCPushButtoDup1Button)
                {
                    fNextCCPushButtoDup1Button = new Button("NextCCPushButtoDup1Button", HWNDElementdialPane);
                    fNextCCPushButtoDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fNextCCPushButtoDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"nextbutton");
                    fNextCCPushButtoDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Next");
                    fNextCCPushButtoDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCPushButton");
                }

                return fNextCCPushButtoDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to CancelCCPushButDup1Button
        /// </summary>
        public Button CancelCCPushButDup1Button
        {
            get
            {
                if (null == fCancelCCPushButDup1Button)
                {
                    fCancelCCPushButDup1Button = new Button("CancelCCPushButDup1Button", HWNDElementdialPane);
                    fCancelCCPushButDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelCCPushButDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cancelbutton");
                    fCancelCCPushButDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                    fCancelCCPushButDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCPushButton");
                }

                return fCancelCCPushButDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to AddadeviceTitleBar
        /// </summary>
        public TitleBar AddadeviceTitleBar
        {
            get
            {
                if (null == fAddadeviceTitleBar)
                {
                    fAddadeviceTitleBar = new TitleBar("AddadeviceTitleBar", AddadeviceNativWindow);
                    fAddadeviceTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fAddadeviceTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a device");
                    fAddadeviceTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                }

                return fAddadeviceTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemMenuBarSyDup1MenuBar
        /// </summary>
        public MenuBar SystemMenuBarSyDup1MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup1MenuBar)
                {
                    fSystemMenuBarSyDup1MenuBar = new MenuBar("SystemMenuBarSyDup1MenuBar", AddadeviceTitleBar);
                    fSystemMenuBarSyDup1MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup1MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                    fSystemMenuBarSyDup1MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                }

                return fSystemMenuBarSyDup1MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemItem1I1XMenuItem
        /// </summary>
        public MenuItem SystemItem1I1XMenuItem
        {
            get
            {
                if (null == fSystemItem1I1XMenuItem)
                {
                    fSystemItem1I1XMenuItem = new MenuItem("SystemItem1I1XMenuItem", SystemMenuBarSyDup1MenuBar);
                    fSystemItem1I1XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I1XMenuItem.UIMap.Index = 1;
                    fSystemItem1I1XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                    fSystemItem1I1XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                }

                return fSystemItem1I1XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to MinimizeMinimizButton
        /// </summary>
        public Button MinimizeMinimizButton
        {
            get
            {
                if (null == fMinimizeMinimizButton)
                {
                    fMinimizeMinimizButton = new Button("MinimizeMinimizButton", AddadeviceTitleBar);
                    fMinimizeMinimizButton.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                    fMinimizeMinimizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                }

                return fMinimizeMinimizButton;
            }
        }

        /// <summary>
        /// Gets Reference to MaximizeMaximizButton
        /// </summary>
        public Button MaximizeMaximizButton
        {
            get
            {
                if (null == fMaximizeMaximizButton)
                {
                    fMaximizeMaximizButton = new Button("MaximizeMaximizButton", AddadeviceTitleBar);
                    fMaximizeMaximizButton.UIMap.Scope = UIASeachScope.Children;
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximize");
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Maximize");
                }

                return fMaximizeMaximizButton;
            }
        }

        /// <summary>
        /// Gets Reference to CloseCloseDup1Button
        /// </summary>
        public Button CloseCloseDup1Button
        {
            get
            {
                if (null == fCloseCloseDup1Button)
                {
                    fCloseCloseDup1Button = new Button("CloseCloseDup1Button", AddadeviceTitleBar);
                    fCloseCloseDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                    fCloseCloseDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                }

                return fCloseCloseDup1Button;
            }
        }
    }
}

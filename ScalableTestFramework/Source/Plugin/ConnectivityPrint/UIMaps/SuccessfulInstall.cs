//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------

namespace HP.ScalableTest.Plugin.ConnectivityPrint.UIMaps
{
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class SuccessfulInstall
    {
        /// <summary>
        /// Backing field for AddadeviceNativWindow property
        /// </summary>
        private Window fAddadeviceNativWindow;

        /// <summary>
        /// Backing field for AddPrinterNativWindow property
        /// </summary>
        private Window fAddPrinterNativWindow;

        /// <summary>
        /// Backing field for YouvesuccessfulPane property
        /// </summary>
        private Pane fYouvesuccessfulPane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI0XDup0Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI0XDup0Pane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI1XDup0Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI1XDup0Pane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI2XDup0Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI2XDup0Pane;

        /// <summary>
        /// Backing field for BackButtonbackbButton property
        /// </summary>
        private Button fBackButtonbackbButton;

        /// <summary>
        /// Backing field for ElementwizardicDup0Image property
        /// </summary>
        private Image fElementwizardicDup0Image;

        /// <summary>
        /// Backing field for AddPrinterElemeText property
        /// </summary>
        private Text fAddPrinterElemeText;

        /// <summary>
        /// Backing field for YouvesuccessfulText property
        /// </summary>
        private Text fYouvesuccessfulText;

        /// <summary>
        /// Backing field for PrinternameWin3Pane property
        /// </summary>
        private Pane fPrinternameWin3Pane;

        /// <summary>
        /// Backing field for PrinternameStatText property
        /// </summary>
        private Text fPrinternameStatText;

        /// <summary>
        /// Backing field for PrinternameEditEdit property
        /// </summary>
        private Edit fPrinternameEditEdit;

        /// <summary>
        /// Backing field for ThisprinterhasbText property
        /// </summary>
        private Text fThisprinterhasbText;

        /// <summary>
        /// Backing field for NextCCPushButtoDup0Button property
        /// </summary>
        private Button fNextCCPushButtoDup0Button;

        /// <summary>
        /// Backing field for CancelCCPushButDup0Button property
        /// </summary>
        private Button fCancelCCPushButDup0Button;

        /// <summary>
        /// Backing field for AddPrinterTitleBar property
        /// </summary>
        private TitleBar fAddPrinterTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup0MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup0MenuBar;

        /// <summary>
        /// Backing field for SystemItem1I0XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I0XMenuItem;

        /// <summary>
        /// Backing field for CloseCloseDup0Button property
        /// </summary>
        private Button fCloseCloseDup0Button;

        /// <summary>
        /// Backing field for HWNDElementdialPane property
        /// </summary>
        private Pane fHWNDElementdialPane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI0XDup1Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI0XDup1Pane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI1XDup1Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI1XDup1Pane;

        /// <summary>
        /// Backing field for CtrlNotifySinkI2XDup1Pane property
        /// </summary>
        private Pane fCtrlNotifySinkI2XDup1Pane;

        /// <summary>
        /// Backing field for ElementwizardicDup1Image property
        /// </summary>
        private Image fElementwizardicDup1Image;

        /// <summary>
        /// Backing field for AddadeviceElemeText property
        /// </summary>
        private Text fAddadeviceElemeText;

        /// <summary>
        /// Backing field for ElementheadertiText property
        /// </summary>
        private Text fElementheadertiText;

        /// <summary>
        /// Backing field for XElementE11130FPane property
        /// </summary>
        private Pane fXElementE11130FPane;

        /// <summary>
        /// Backing field for XBabyPane property
        /// </summary>
        private Pane fXBabyPane;

        /// <summary>
        /// Backing field for ElementeClassicPane property
        /// </summary>
        private Pane fElementeClassicPane;

        /// <summary>
        /// Backing field for ChooseadeviceorText property
        /// </summary>
        private Text fChooseadeviceorText;

        /// <summary>
        /// Backing field for SelectadeviceElText property
        /// </summary>
        private Text fSelectadeviceElText;

        /// <summary>
        /// Backing field for VerticalCCVScroScrollBar property
        /// </summary>
        private ScrollBar fVerticalCCVScroScrollBar;

        /// <summary>
        /// Backing field for LineupButton property
        /// </summary>
        private Button fLineupButton;

        /// <summary>
        /// Backing field for PositionCustom property
        /// </summary>
        private Custom fPositionCustom;

        /// <summary>
        /// Backing field for PagedownButton property
        /// </summary>
        private Button fPagedownButton;

        /// <summary>
        /// Backing field for LinedownButton property
        /// </summary>
        private Button fLinedownButton;

        /// <summary>
        /// Backing field for DeviceListElemeList property
        /// </summary>
        private List fDeviceListElemeList;

        /// <summary>
        /// Backing field for NPI204B88HPLaseButton property
        /// </summary>
        private Button fNPI204B88HPLaseButton;

        /// <summary>
        /// Backing field for NPI204B88HPLaseText property
        /// </summary>
        private Text fNPI204B88HPLaseText;

        /// <summary>
        /// Backing field for PrinterRichTextDup0Text property
        /// </summary>
        private Text fPrinterRichTextDup0Text;

        /// <summary>
        /// Backing field for NPI3CB042HPDigiButton property
        /// </summary>
        private Button fNPI3CB042HPDigiButton;

        /// <summary>
        /// Backing field for NPI3CB042HPDigiText property
        /// </summary>
        private Text fNPI3CB042HPDigiText;

        /// <summary>
        /// Backing field for PrinterRichTextDup1Text property
        /// </summary>
        private Text fPrinterRichTextDup1Text;

        /// <summary>
        /// Backing field for NPI5CF913HPColoButton property
        /// </summary>
        private Button fNPI5CF913HPColoButton;

        /// <summary>
        /// Backing field for NPI5CF913HPColoText property
        /// </summary>
        private Text fNPI5CF913HPColoText;

        /// <summary>
        /// Backing field for PrinterRichTextDup2Text property
        /// </summary>
        private Text fPrinterRichTextDup2Text;

        /// <summary>
        /// Backing field for NPI84D469HPDesiButton property
        /// </summary>
        private Button fNPI84D469HPDesiButton;

        /// <summary>
        /// Backing field for NPI84D469HPDesiText property
        /// </summary>
        private Text fNPI84D469HPDesiText;

        /// <summary>
        /// Backing field for PrinterRichTextDup3Text property
        /// </summary>
        private Text fPrinterRichTextDup3Text;

        /// <summary>
        /// Backing field for NPIAA33FEHPColoButton property
        /// </summary>
        private Button fNPIAA33FEHPColoButton;

        /// <summary>
        /// Backing field for NPIAA33FEHPColoText property
        /// </summary>
        private Text fNPIAA33FEHPColoText;

        /// <summary>
        /// Backing field for PrinterRichTextDup4Text property
        /// </summary>
        private Text fPrinterRichTextDup4Text;

        /// <summary>
        /// Backing field for NPICF7479HPOffiButton property
        /// </summary>
        private Button fNPICF7479HPOffiButton;

        /// <summary>
        /// Backing field for NPICF7479HPOffiText property
        /// </summary>
        private Text fNPICF7479HPOffiText;

        /// <summary>
        /// Backing field for PrinterRichTextDup5Text property
        /// </summary>
        private Text fPrinterRichTextDup5Text;

        /// <summary>
        /// Backing field for DIRECT00HPIPsecButton property
        /// </summary>
        private Button fDIRECT00HPIPsecButton;

        /// <summary>
        /// Backing field for DIRECT00HPIPsecText property
        /// </summary>
        private Text fDIRECT00HPIPsecText;

        /// <summary>
        /// Backing field for PrinterRichTextDup6Text property
        /// </summary>
        private Text fPrinterRichTextDup6Text;

        /// <summary>
        /// Backing field for DIRECT09HPOfficButton property
        /// </summary>
        private Button fDIRECT09HPOfficButton;

        /// <summary>
        /// Backing field for DIRECT09HPOfficText property
        /// </summary>
        private Text fDIRECT09HPOfficText;

        /// <summary>
        /// Backing field for PrinterRichTextDup7Text property
        /// </summary>
        private Text fPrinterRichTextDup7Text;

        /// <summary>
        /// Backing field for DIRECT1FHPPageWButton property
        /// </summary>
        private Button fDIRECT1FHPPageWButton;

        /// <summary>
        /// Backing field for DIRECT1FHPPageWText property
        /// </summary>
        private Text fDIRECT1FHPPageWText;

        /// <summary>
        /// Backing field for PrinterRichTextDup8Text property
        /// </summary>
        private Text fPrinterRichTextDup8Text;

        /// <summary>
        /// Backing field for DIRECT21HPENVYPButton property
        /// </summary>
        private Button fDIRECT21HPENVYPButton;

        /// <summary>
        /// Backing field for DIRECT21HPENVYPText property
        /// </summary>
        private Text fDIRECT21HPENVYPText;

        /// <summary>
        /// Backing field for PrinterRichTextDup9Text property
        /// </summary>
        private Text fPrinterRichTextDup9Text;

        /// <summary>
        /// Backing field for DIRECT49HPM577LButton property
        /// </summary>
        private Button fDIRECT49HPM577LButton;

        /// <summary>
        /// Backing field for DIRECT49HPM577LText property
        /// </summary>
        private Text fDIRECT49HPM577LText;

        /// <summary>
        /// Backing field for PrinterRichTextDup10Text property
        /// </summary>
        private Text fPrinterRichTextDup10Text;

        /// <summary>
        /// Backing field for DIRECT5CHPWiFiDButton property
        /// </summary>
        private Button fDIRECT5CHPWiFiDButton;

        /// <summary>
        /// Backing field for DIRECT5CHPWiFiDText property
        /// </summary>
        private Text fDIRECT5CHPWiFiDText;

        /// <summary>
        /// Backing field for PrinterRichTextDup11Text property
        /// </summary>
        private Text fPrinterRichTextDup11Text;

        /// <summary>
        /// Backing field for DIRECT61HPsharaButton property
        /// </summary>
        private Button fDIRECT61HPsharaButton;

        /// <summary>
        /// Backing field for DIRECT61HPsharaText property
        /// </summary>
        private Text fDIRECT61HPsharaText;

        /// <summary>
        /// Backing field for PrinterRichTextDup12Text property
        /// </summary>
        private Text fPrinterRichTextDup12Text;

        /// <summary>
        /// Backing field for DIRECTADHPDesigButton property
        /// </summary>
        private Button fDIRECTADHPDesigButton;

        /// <summary>
        /// Backing field for DIRECTADHPDesigText property
        /// </summary>
        private Text fDIRECTADHPDesigText;

        /// <summary>
        /// Backing field for PrinterRichTextDup13Text property
        /// </summary>
        private Text fPrinterRichTextDup13Text;

        /// <summary>
        /// Backing field for DIRECTBAHPENVYPButton property
        /// </summary>
        private Button fDIRECTBAHPENVYPButton;

        /// <summary>
        /// Backing field for DIRECTBAHPENVYPText property
        /// </summary>
        private Text fDIRECTBAHPENVYPText;

        /// <summary>
        /// Backing field for PrinterRichTextDup14Text property
        /// </summary>
        private Text fPrinterRichTextDup14Text;

        /// <summary>
        /// Backing field for DIRECTc9HPM281LButton property
        /// </summary>
        private Button fDIRECTc9HPM281LButton;

        /// <summary>
        /// Backing field for DIRECTc9HPM281LText property
        /// </summary>
        private Text fDIRECTc9HPM281LText;

        /// <summary>
        /// Backing field for PrinterRichTextDup15Text property
        /// </summary>
        private Text fPrinterRichTextDup15Text;

        /// <summary>
        /// Backing field for DIRECTCCHPOfficButton property
        /// </summary>
        private Button fDIRECTCCHPOfficButton;

        /// <summary>
        /// Backing field for DIRECTCCHPOfficText property
        /// </summary>
        private Text fDIRECTCCHPOfficText;

        /// <summary>
        /// Backing field for PrinterRichTextDup16Text property
        /// </summary>
        private Text fPrinterRichTextDup16Text;

        /// <summary>
        /// Backing field for DIRECTF4HPAMPBlButton property
        /// </summary>
        private Button fDIRECTF4HPAMPBlButton;

        /// <summary>
        /// Backing field for DIRECTF4HPAMPRiText property
        /// </summary>
        private Text fDIRECTF4HPAMPRiText;

        /// <summary>
        /// Backing field for PrinterRichTextDup17Text property
        /// </summary>
        private Text fPrinterRichTextDup17Text;

        /// <summary>
        /// Backing field for DIRECTF4HPM606LButton property
        /// </summary>
        private Button fDIRECTF4HPM606LButton;

        /// <summary>
        /// Backing field for DIRECTF4HPM606LText property
        /// </summary>
        private Text fDIRECTF4HPM606LText;

        /// <summary>
        /// Backing field for PrinterRichTextDup18Text property
        /// </summary>
        private Text fPrinterRichTextDup18Text;

        /// <summary>
        /// Backing field for DIRECTFAHPOfficButton property
        /// </summary>
        private Button fDIRECTFAHPOfficButton;

        /// <summary>
        /// Backing field for DIRECTFAHPOfficText property
        /// </summary>
        private Text fDIRECTFAHPOfficText;

        /// <summary>
        /// Backing field for PrinterRichTextDup19Text property
        /// </summary>
        private Text fPrinterRichTextDup19Text;

        /// <summary>
        /// Backing field for DIRECTFCHPOfficButton property
        /// </summary>
        private Button fDIRECTFCHPOfficButton;

        /// <summary>
        /// Backing field for DIRECTFCHPOfficText property
        /// </summary>
        private Text fDIRECTFCHPOfficText;

        /// <summary>
        /// Backing field for PrinterRichTextDup20Text property
        /// </summary>
        private Text fPrinterRichTextDup20Text;

        /// <summary>
        /// Backing field for TheprinterthatIHyperlink property
        /// </summary>
        private Hyperlink fTheprinterthatIHyperlink;

        /// <summary>
        /// Backing field for NextCCPushButtoDup1Button property
        /// </summary>
        private Button fNextCCPushButtoDup1Button;

        /// <summary>
        /// Backing field for CancelCCPushButDup1Button property
        /// </summary>
        private Button fCancelCCPushButDup1Button;

        /// <summary>
        /// Backing field for AddadeviceTitleBar property
        /// </summary>
        private TitleBar fAddadeviceTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup1MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup1MenuBar;

        /// <summary>
        /// Backing field for SystemItem1I1XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I1XMenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizButton property
        /// </summary>
        private Button fMinimizeMinimizButton;

        /// <summary>
        /// Backing field for MaximizeMaximizButton property
        /// </summary>
        private Button fMaximizeMaximizButton;

        /// <summary>
        /// Backing field for CloseCloseDup1Button property
        /// </summary>
        private Button fCloseCloseDup1Button;

        /// <summary>
        /// Initializes a new instance of the <see cref="Success"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public SuccessfulInstall(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Success"/> class using the default UIAFramework.
        /// </summary>
        public SuccessfulInstall()
        {
            Desktop = new Desktop();
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to AddadeviceNativWindow
        /// </summary>
        public Window AddadeviceNativWindow
        {
            get
            {
                if (null == fAddadeviceNativWindow)
                {
                    fAddadeviceNativWindow = new Window("AddadeviceNativWindow", Desktop);
                    fAddadeviceNativWindow.UIMap.Scope = UIASeachScope.Children;
                    fAddadeviceNativWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a device");
                    fAddadeviceNativWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NativeHWNDHost");
                }

                return fAddadeviceNativWindow;
            }
        }

        /// <summary>
        /// Gets Reference to AddPrinterNativWindow
        /// </summary>
        public Window AddPrinterNativWindow
        {
            get
            {
                if (null == fAddPrinterNativWindow)
                {
                    fAddPrinterNativWindow = new Window("AddPrinterNativWindow", AddadeviceNativWindow);
                    fAddPrinterNativWindow.UIMap.Scope = UIASeachScope.Children;
                    fAddPrinterNativWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Printer");
                    fAddPrinterNativWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NativeHWNDHost");
                }

                return fAddPrinterNativWindow;
            }
        }

        /// <summary>
        /// Gets Reference to YouvesuccessfulPane
        /// </summary>
        public Pane YouvesuccessfulPane
        {
            get
            {
                if (null == fYouvesuccessfulPane)
                {
                    fYouvesuccessfulPane = new Pane("YouvesuccessfulPane", AddPrinterNativWindow);
                    fYouvesuccessfulPane.UIMap.Scope = UIASeachScope.Children;
                   // fYouvesuccessfulPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"You've successfully added NPI077CB2 on http://15.77.231.78:80");
                    fYouvesuccessfulPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"dialogroot");
                    fYouvesuccessfulPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"HWNDElement");
                }

                return fYouvesuccessfulPane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI0XDup0Pane
        /// </summary>
        public Pane CtrlNotifySinkI0XDup0Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI0XDup0Pane)
                {
                    fCtrlNotifySinkI0XDup0Pane = new Pane("CtrlNotifySinkI0XDup0Pane", YouvesuccessfulPane);
                    fCtrlNotifySinkI0XDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI0XDup0Pane.UIMap.Index = 0;
                    fCtrlNotifySinkI0XDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI0XDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI1XDup0Pane
        /// </summary>
        public Pane CtrlNotifySinkI1XDup0Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI1XDup0Pane)
                {
                    fCtrlNotifySinkI1XDup0Pane = new Pane("CtrlNotifySinkI1XDup0Pane", YouvesuccessfulPane);
                    fCtrlNotifySinkI1XDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI1XDup0Pane.UIMap.Index = 1;
                    fCtrlNotifySinkI1XDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI1XDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI2XDup0Pane
        /// </summary>
        public Pane CtrlNotifySinkI2XDup0Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI2XDup0Pane)
                {
                    fCtrlNotifySinkI2XDup0Pane = new Pane("CtrlNotifySinkI2XDup0Pane", YouvesuccessfulPane);
                    fCtrlNotifySinkI2XDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI2XDup0Pane.UIMap.Index = 2;
                    fCtrlNotifySinkI2XDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI2XDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to BackButtonbackbButton
        /// </summary>
        public Button BackButtonbackbButton
        {
            get
            {
                if (null == fBackButtonbackbButton)
                {
                    fBackButtonbackbButton = new Button("BackButtonbackbButton", YouvesuccessfulPane);
                    fBackButtonbackbButton.UIMap.Scope = UIASeachScope.Children;
                    fBackButtonbackbButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Back");
                    fBackButtonbackbButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"backbutton");
                    fBackButtonbackbButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fBackButtonbackbButton;
            }
        }

        /// <summary>
        /// Gets Reference to ElementwizardicDup0Image
        /// </summary>
        public Image ElementwizardicDup0Image
        {
            get
            {
                if (null == fElementwizardicDup0Image)
                {
                    fElementwizardicDup0Image = new Image("ElementwizardicDup0Image", YouvesuccessfulPane);
                    fElementwizardicDup0Image.UIMap.Scope = UIASeachScope.Children;
                    fElementwizardicDup0Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"wizardicon");
                    fElementwizardicDup0Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fElementwizardicDup0Image;
            }
        }

        /// <summary>
        /// Gets Reference to AddPrinterElemeText
        /// </summary>
        public Text AddPrinterElemeText
        {
            get
            {
                if (null == fAddPrinterElemeText)
                {
                    fAddPrinterElemeText = new Text("AddPrinterElemeText", YouvesuccessfulPane);
                    fAddPrinterElemeText.UIMap.Scope = UIASeachScope.Children;
                    fAddPrinterElemeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Printer");
                    fAddPrinterElemeText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"wizardtitle");
                    fAddPrinterElemeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fAddPrinterElemeText;
            }
        }

        /// <summary>
        /// Gets Reference to YouvesuccessfulText
        /// </summary>
        public Text YouvesuccessfulText
        {
            get
            {
                if (null == fYouvesuccessfulText)
                {
                    fYouvesuccessfulText = new Text("YouvesuccessfulText", YouvesuccessfulPane);
                    fYouvesuccessfulText.UIMap.Scope = UIASeachScope.Children;
                    fYouvesuccessfulText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"You've successfully added NPI077CB2 on http://15.77.231.78:80");
                    fYouvesuccessfulText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"headertitle");
                    fYouvesuccessfulText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fYouvesuccessfulText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinternameWin3Pane
        /// </summary>
        public Pane PrinternameWin3Pane
        {
            get
            {
                if (null == fPrinternameWin3Pane)
                {
                    fPrinternameWin3Pane = new Pane("PrinternameWin3Pane", YouvesuccessfulPane);
                    fPrinternameWin3Pane.UIMap.Scope = UIASeachScope.Children;
                    fPrinternameWin3Pane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer name");
                    fPrinternameWin3Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"{E3F703F2-E305-4376-8438-FD58D0BE8445}");
                    fPrinternameWin3Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Win32PropSheetPageHost");
                }

                return fPrinternameWin3Pane;
            }
        }

        /// <summary>
        /// Gets Reference to PrinternameStatText
        /// </summary>
        public Text PrinternameStatText
        {
            get
            {
                if (null == fPrinternameStatText)
                {
                    fPrinternameStatText = new Text("PrinternameStatText", PrinternameWin3Pane);
                    fPrinternameStatText.UIMap.Scope = UIASeachScope.Children;
                    fPrinternameStatText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer name:");
                    fPrinternameStatText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3002");
                    fPrinternameStatText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                }

                return fPrinternameStatText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinternameEditEdit
        /// </summary>
        public Edit PrinternameEditEdit
        {
            get
            {
                if (null == fPrinternameEditEdit)
                {
                    fPrinternameEditEdit = new Edit("PrinternameEditEdit", PrinternameWin3Pane);
                    fPrinternameEditEdit.UIMap.Scope = UIASeachScope.Children;
                    fPrinternameEditEdit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer name:");
                    fPrinternameEditEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1046");
                    fPrinternameEditEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Edit");
                }

                return fPrinternameEditEdit;
            }
        }

        /// <summary>
        /// Gets Reference to ThisprinterhasbText
        /// </summary>
        public Text ThisprinterhasbText
        {
            get
            {
                if (null == fThisprinterhasbText)
                {
                    fThisprinterhasbText = new Text("ThisprinterhasbText", PrinternameWin3Pane);
                    fThisprinterhasbText.UIMap.Scope = UIASeachScope.Children;
                    fThisprinterhasbText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"This printer has been installed with the HP PageWide XL 4000PS HPGL2 driver.");
                    fThisprinterhasbText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9015");
                    fThisprinterhasbText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                }

                return fThisprinterhasbText;
            }
        }

        /// <summary>
        /// Gets Reference to NextCCPushButtoDup0Button
        /// </summary>
        public Button NextCCPushButtoDup0Button
        {
            get
            {
                if (null == fNextCCPushButtoDup0Button)
                {
                    fNextCCPushButtoDup0Button = new Button("NextCCPushButtoDup0Button", YouvesuccessfulPane);
                    fNextCCPushButtoDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fNextCCPushButtoDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Next");
                    fNextCCPushButtoDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"nextbutton");
                    fNextCCPushButtoDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCPushButton");
                }

                return fNextCCPushButtoDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to CancelCCPushButDup0Button
        /// </summary>
        public Button CancelCCPushButDup0Button
        {
            get
            {
                if (null == fCancelCCPushButDup0Button)
                {
                    fCancelCCPushButDup0Button = new Button("CancelCCPushButDup0Button", YouvesuccessfulPane);
                    fCancelCCPushButDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelCCPushButDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                    fCancelCCPushButDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cancelbutton");
                    fCancelCCPushButDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCPushButton");
                }

                return fCancelCCPushButDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to AddPrinterTitleBar
        /// </summary>
        public TitleBar AddPrinterTitleBar
        {
            get
            {
                if (null == fAddPrinterTitleBar)
                {
                    fAddPrinterTitleBar = new TitleBar("AddPrinterTitleBar", AddPrinterNativWindow);
                    fAddPrinterTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fAddPrinterTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Printer");
                    fAddPrinterTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                }

                return fAddPrinterTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemMenuBarSyDup0MenuBar
        /// </summary>
        public MenuBar SystemMenuBarSyDup0MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup0MenuBar)
                {
                    fSystemMenuBarSyDup0MenuBar = new MenuBar("SystemMenuBarSyDup0MenuBar", AddPrinterTitleBar);
                    fSystemMenuBarSyDup0MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                }

                return fSystemMenuBarSyDup0MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemItem1I0XMenuItem
        /// </summary>
        public MenuItem SystemItem1I0XMenuItem
        {
            get
            {
                if (null == fSystemItem1I0XMenuItem)
                {
                    fSystemItem1I0XMenuItem = new MenuItem("SystemItem1I0XMenuItem", SystemMenuBarSyDup0MenuBar);
                    fSystemItem1I0XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I0XMenuItem.UIMap.Index = 0;
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                }

                return fSystemItem1I0XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to CloseCloseDup0Button
        /// </summary>
        public Button CloseCloseDup0Button
        {
            get
            {
                if (null == fCloseCloseDup0Button)
                {
                    fCloseCloseDup0Button = new Button("CloseCloseDup0Button", AddPrinterTitleBar);
                    fCloseCloseDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                }

                return fCloseCloseDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to HWNDElementdialPane
        /// </summary>
        public Pane HWNDElementdialPane
        {
            get
            {
                if (null == fHWNDElementdialPane)
                {
                    fHWNDElementdialPane = new Pane("HWNDElementdialPane", AddadeviceNativWindow);
                    fHWNDElementdialPane.UIMap.Scope = UIASeachScope.Children;
                    fHWNDElementdialPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"dialogroot");
                    fHWNDElementdialPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"HWNDElement");
                }

                return fHWNDElementdialPane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI0XDup1Pane
        /// </summary>
        public Pane CtrlNotifySinkI0XDup1Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI0XDup1Pane)
                {
                    fCtrlNotifySinkI0XDup1Pane = new Pane("CtrlNotifySinkI0XDup1Pane", HWNDElementdialPane);
                    fCtrlNotifySinkI0XDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI0XDup1Pane.UIMap.Index = 0;
                    fCtrlNotifySinkI0XDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI0XDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI1XDup1Pane
        /// </summary>
        public Pane CtrlNotifySinkI1XDup1Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI1XDup1Pane)
                {
                    fCtrlNotifySinkI1XDup1Pane = new Pane("CtrlNotifySinkI1XDup1Pane", HWNDElementdialPane);
                    fCtrlNotifySinkI1XDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI1XDup1Pane.UIMap.Index = 1;
                    fCtrlNotifySinkI1XDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI1XDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to CtrlNotifySinkI2XDup1Pane
        /// </summary>
        public Pane CtrlNotifySinkI2XDup1Pane
        {
            get
            {
                if (null == fCtrlNotifySinkI2XDup1Pane)
                {
                    fCtrlNotifySinkI2XDup1Pane = new Pane("CtrlNotifySinkI2XDup1Pane", HWNDElementdialPane);
                    fCtrlNotifySinkI2XDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fCtrlNotifySinkI2XDup1Pane.UIMap.Index = 2;
                    fCtrlNotifySinkI2XDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CtrlNotifySink");
                }

                return fCtrlNotifySinkI2XDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to ElementwizardicDup1Image
        /// </summary>
        public Image ElementwizardicDup1Image
        {
            get
            {
                if (null == fElementwizardicDup1Image)
                {
                    fElementwizardicDup1Image = new Image("ElementwizardicDup1Image", HWNDElementdialPane);
                    fElementwizardicDup1Image.UIMap.Scope = UIASeachScope.Children;
                    fElementwizardicDup1Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"wizardicon");
                    fElementwizardicDup1Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fElementwizardicDup1Image;
            }
        }

        /// <summary>
        /// Gets Reference to AddadeviceElemeText
        /// </summary>
        public Text AddadeviceElemeText
        {
            get
            {
                if (null == fAddadeviceElemeText)
                {
                    fAddadeviceElemeText = new Text("AddadeviceElemeText", HWNDElementdialPane);
                    fAddadeviceElemeText.UIMap.Scope = UIASeachScope.Children;
                    fAddadeviceElemeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a device");
                    fAddadeviceElemeText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"wizardtitle");
                    fAddadeviceElemeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fAddadeviceElemeText;
            }
        }

        /// <summary>
        /// Gets Reference to ElementheadertiText
        /// </summary>
        public Text ElementheadertiText
        {
            get
            {
                if (null == fElementheadertiText)
                {
                    fElementheadertiText = new Text("ElementheadertiText", HWNDElementdialPane);
                    fElementheadertiText.UIMap.Scope = UIASeachScope.Children;
                    fElementheadertiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"headertitle");
                    fElementheadertiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fElementheadertiText;
            }
        }

        /// <summary>
        /// Gets Reference to XElementE11130FPane
        /// </summary>
        public Pane XElementE11130FPane
        {
            get
            {
                if (null == fXElementE11130FPane)
                {
                    fXElementE11130FPane = new Pane("XElementE11130FPane", HWNDElementdialPane);
                    fXElementE11130FPane.UIMap.Scope = UIASeachScope.Children;
                    fXElementE11130FPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"{E11130F0-1450-4EB0-9507-DFCD45B68883}");
                    fXElementE11130FPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"XElement");
                }

                return fXElementE11130FPane;
            }
        }

        /// <summary>
        /// Gets Reference to XBabyPane
        /// </summary>
        public Pane XBabyPane
        {
            get
            {
                if (null == fXBabyPane)
                {
                    fXBabyPane = new Pane("XBabyPane", XElementE11130FPane);
                    fXBabyPane.UIMap.Scope = UIASeachScope.Children;
                    fXBabyPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"XBaby");
                }

                return fXBabyPane;
            }
        }

        /// <summary>
        /// Gets Reference to ElementeClassicPane
        /// </summary>
        public Pane ElementeClassicPane
        {
            get
            {
                if (null == fElementeClassicPane)
                {
                    fElementeClassicPane = new Pane("ElementeClassicPane", XBabyPane);
                    fElementeClassicPane.UIMap.Scope = UIASeachScope.Children;
                    fElementeClassicPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eClassicBody");
                    fElementeClassicPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fElementeClassicPane;
            }
        }

        /// <summary>
        /// Gets Reference to ChooseadeviceorText
        /// </summary>
        public Text ChooseadeviceorText
        {
            get
            {
                if (null == fChooseadeviceorText)
                {
                    fChooseadeviceorText = new Text("ChooseadeviceorText", ElementeClassicPane);
                    fChooseadeviceorText.UIMap.Scope = UIASeachScope.Children;
                    fChooseadeviceorText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Choose a device or printer to add to this PC");
                    fChooseadeviceorText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eTitleText");
                    fChooseadeviceorText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fChooseadeviceorText;
            }
        }

        /// <summary>
        /// Gets Reference to SelectadeviceElText
        /// </summary>
        public Text SelectadeviceElText
        {
            get
            {
                if (null == fSelectadeviceElText)
                {
                    fSelectadeviceElText = new Text("SelectadeviceElText", ElementeClassicPane);
                    fSelectadeviceElText.UIMap.Scope = UIASeachScope.Children;
                    fSelectadeviceElText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Select a device");
                    fSelectadeviceElText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eProgressText");
                    fSelectadeviceElText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fSelectadeviceElText;
            }
        }

        /// <summary>
        /// Gets Reference to VerticalCCVScroScrollBar
        /// </summary>
        public ScrollBar VerticalCCVScroScrollBar
        {
            get
            {
                if (null == fVerticalCCVScroScrollBar)
                {
                    fVerticalCCVScroScrollBar = new ScrollBar("VerticalCCVScroScrollBar", ElementeClassicPane);
                    fVerticalCCVScroScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fVerticalCCVScroScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Vertical");
                    fVerticalCCVScroScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                    fVerticalCCVScroScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCVScrollBar");
                }

                return fVerticalCCVScroScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to LineupButton
        /// </summary>
        public Button LineupButton
        {
            get
            {
                if (null == fLineupButton)
                {
                    fLineupButton = new Button("LineupButton", VerticalCCVScroScrollBar);
                    fLineupButton.UIMap.Scope = UIASeachScope.Children;
                    fLineupButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Line up");
                }

                return fLineupButton;
            }
        }

        /// <summary>
        /// Gets Reference to PositionCustom
        /// </summary>
        public Custom PositionCustom
        {
            get
            {
                if (null == fPositionCustom)
                {
                    fPositionCustom = new Custom("PositionCustom", VerticalCCVScroScrollBar);
                    fPositionCustom.UIMap.Scope = UIASeachScope.Children;
                    fPositionCustom.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Position");
                }

                return fPositionCustom;
            }
        }

        /// <summary>
        /// Gets Reference to PagedownButton
        /// </summary>
        public Button PagedownButton
        {
            get
            {
                if (null == fPagedownButton)
                {
                    fPagedownButton = new Button("PagedownButton", VerticalCCVScroScrollBar);
                    fPagedownButton.UIMap.Scope = UIASeachScope.Children;
                    fPagedownButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Page down");
                }

                return fPagedownButton;
            }
        }

        /// <summary>
        /// Gets Reference to LinedownButton
        /// </summary>
        public Button LinedownButton
        {
            get
            {
                if (null == fLinedownButton)
                {
                    fLinedownButton = new Button("LinedownButton", VerticalCCVScroScrollBar);
                    fLinedownButton.UIMap.Scope = UIASeachScope.Children;
                    fLinedownButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Line down");
                }

                return fLinedownButton;
            }
        }

        /// <summary>
        /// Gets Reference to DeviceListElemeList
        /// </summary>
        public List DeviceListElemeList
        {
            get
            {
                if (null == fDeviceListElemeList)
                {
                    fDeviceListElemeList = new List("DeviceListElemeList", ElementeClassicPane);
                    fDeviceListElemeList.UIMap.Scope = UIASeachScope.Children;
                    fDeviceListElemeList.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device List");
                    fDeviceListElemeList.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eDeviceList");
                    fDeviceListElemeList.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                }

                return fDeviceListElemeList;
            }
        }

        /// <summary>
        /// Gets Reference to NPI204B88HPLaseButton
        /// </summary>
        public Button NPI204B88HPLaseButton
        {
            get
            {
                if (null == fNPI204B88HPLaseButton)
                {
                    fNPI204B88HPLaseButton = new Button("NPI204B88HPLaseButton", DeviceListElemeList);
                    fNPI204B88HPLaseButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI204B88HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI204B88 (HP LaserJet P3010 Series)");
                    fNPI204B88HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5da61c20-cd65-5736-87ae-001f29204b88");
                    fNPI204B88HPLaseButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPI204B88HPLaseButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI204B88HPLaseText
        /// </summary>
        public Text NPI204B88HPLaseText
        {
            get
            {
                if (null == fNPI204B88HPLaseText)
                {
                    fNPI204B88HPLaseText = new Text("NPI204B88HPLaseText", NPI204B88HPLaseButton);
                    fNPI204B88HPLaseText.UIMap.Scope = UIASeachScope.Children;
                    fNPI204B88HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI204B88 (HP LaserJet P3010 Series)");
                    fNPI204B88HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI204B88HPLaseText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPI204B88HPLaseText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup0Text
        /// </summary>
        public Text PrinterRichTextDup0Text
        {
            get
            {
                if (null == fPrinterRichTextDup0Text)
                {
                    fPrinterRichTextDup0Text = new Text("PrinterRichTextDup0Text", NPI204B88HPLaseButton);
                    fPrinterRichTextDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI3CB042HPDigiButton
        /// </summary>
        public Button NPI3CB042HPDigiButton
        {
            get
            {
                if (null == fNPI3CB042HPDigiButton)
                {
                    fNPI3CB042HPDigiButton = new Button("NPI3CB042HPDigiButton", DeviceListElemeList);
                    fNPI3CB042HPDigiButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI3CB042HPDigiButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI3CB042 (HP Digital Sender Flow 8500fn2)");
                    fNPI3CB042HPDigiButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"0ee8d8af-443e-4e9f-873b-30e1713cb042");
                    fNPI3CB042HPDigiButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPI3CB042HPDigiButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI3CB042HPDigiText
        /// </summary>
        public Text NPI3CB042HPDigiText
        {
            get
            {
                if (null == fNPI3CB042HPDigiText)
                {
                    fNPI3CB042HPDigiText = new Text("NPI3CB042HPDigiText", NPI3CB042HPDigiButton);
                    fNPI3CB042HPDigiText.UIMap.Scope = UIASeachScope.Children;
                    fNPI3CB042HPDigiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI3CB042 (HP Digital Sender Flow 8500fn2)");
                    fNPI3CB042HPDigiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI3CB042HPDigiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPI3CB042HPDigiText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup1Text
        /// </summary>
        public Text PrinterRichTextDup1Text
        {
            get
            {
                if (null == fPrinterRichTextDup1Text)
                {
                    fPrinterRichTextDup1Text = new Text("PrinterRichTextDup1Text", NPI3CB042HPDigiButton);
                    fPrinterRichTextDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI5CF913HPColoButton
        /// </summary>
        public Button NPI5CF913HPColoButton
        {
            get
            {
                if (null == fNPI5CF913HPColoButton)
                {
                    fNPI5CF913HPColoButton = new Button("NPI5CF913HPColoButton", DeviceListElemeList);
                    fNPI5CF913HPColoButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI5CF913HPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI5CF913 (HP Color LaserJet M652)");
                    fNPI5CF913HPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"e2e9ca4b-5126-46e4-99c9-5065f35cf913");
                    fNPI5CF913HPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPI5CF913HPColoButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI5CF913HPColoText
        /// </summary>
        public Text NPI5CF913HPColoText
        {
            get
            {
                if (null == fNPI5CF913HPColoText)
                {
                    fNPI5CF913HPColoText = new Text("NPI5CF913HPColoText", NPI5CF913HPColoButton);
                    fNPI5CF913HPColoText.UIMap.Scope = UIASeachScope.Children;
                    fNPI5CF913HPColoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI5CF913 (HP Color LaserJet M652)");
                    fNPI5CF913HPColoText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI5CF913HPColoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPI5CF913HPColoText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup2Text
        /// </summary>
        public Text PrinterRichTextDup2Text
        {
            get
            {
                if (null == fPrinterRichTextDup2Text)
                {
                    fPrinterRichTextDup2Text = new Text("PrinterRichTextDup2Text", NPI5CF913HPColoButton);
                    fPrinterRichTextDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPI84D469HPDesiButton
        /// </summary>
        public Button NPI84D469HPDesiButton
        {
            get
            {
                if (null == fNPI84D469HPDesiButton)
                {
                    fNPI84D469HPDesiButton = new Button("NPI84D469HPDesiButton", DeviceListElemeList);
                    fNPI84D469HPDesiButton.UIMap.Scope = UIASeachScope.Children;
                    fNPI84D469HPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI84D469 (HP Designjet T3500ps)");
                    fNPI84D469HPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"14404449-1a1c-b635-bd3b-009c0284d469");
                    fNPI84D469HPDesiButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPI84D469HPDesiButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPI84D469HPDesiText
        /// </summary>
        public Text NPI84D469HPDesiText
        {
            get
            {
                if (null == fNPI84D469HPDesiText)
                {
                    fNPI84D469HPDesiText = new Text("NPI84D469HPDesiText", NPI84D469HPDesiButton);
                    fNPI84D469HPDesiText.UIMap.Scope = UIASeachScope.Children;
                    fNPI84D469HPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPI84D469 (HP Designjet T3500ps)");
                    fNPI84D469HPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPI84D469HPDesiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPI84D469HPDesiText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup3Text
        /// </summary>
        public Text PrinterRichTextDup3Text
        {
            get
            {
                if (null == fPrinterRichTextDup3Text)
                {
                    fPrinterRichTextDup3Text = new Text("PrinterRichTextDup3Text", NPI84D469HPDesiButton);
                    fPrinterRichTextDup3Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup3Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPIAA33FEHPColoButton
        /// </summary>
        public Button NPIAA33FEHPColoButton
        {
            get
            {
                if (null == fNPIAA33FEHPColoButton)
                {
                    fNPIAA33FEHPColoButton = new Button("NPIAA33FEHPColoButton", DeviceListElemeList);
                    fNPIAA33FEHPColoButton.UIMap.Scope = UIASeachScope.Children;
                    fNPIAA33FEHPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIAA33FE (HP Color LaserJet M553)");
                    fNPIAA33FEHPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c5b3df59-4ded-11e6-981c-705a0faa33fe");
                    fNPIAA33FEHPColoButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPIAA33FEHPColoButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPIAA33FEHPColoText
        /// </summary>
        public Text NPIAA33FEHPColoText
        {
            get
            {
                if (null == fNPIAA33FEHPColoText)
                {
                    fNPIAA33FEHPColoText = new Text("NPIAA33FEHPColoText", NPIAA33FEHPColoButton);
                    fNPIAA33FEHPColoText.UIMap.Scope = UIASeachScope.Children;
                    fNPIAA33FEHPColoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPIAA33FE (HP Color LaserJet M553)");
                    fNPIAA33FEHPColoText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPIAA33FEHPColoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPIAA33FEHPColoText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup4Text
        /// </summary>
        public Text PrinterRichTextDup4Text
        {
            get
            {
                if (null == fPrinterRichTextDup4Text)
                {
                    fPrinterRichTextDup4Text = new Text("PrinterRichTextDup4Text", NPIAA33FEHPColoButton);
                    fPrinterRichTextDup4Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup4Text;
            }
        }

        /// <summary>
        /// Gets Reference to NPICF7479HPOffiButton
        /// </summary>
        public Button NPICF7479HPOffiButton
        {
            get
            {
                if (null == fNPICF7479HPOffiButton)
                {
                    fNPICF7479HPOffiButton = new Button("NPICF7479HPOffiButton", DeviceListElemeList);
                    fNPICF7479HPOffiButton.UIMap.Scope = UIASeachScope.Children;
                    fNPICF7479HPOffiButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPICF7479 (HP Officejet Color X555)");
                    fNPICF7479HPOffiButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"58610f86-4731-6a7a-82ea-9457a5cf7479");
                    fNPICF7479HPOffiButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fNPICF7479HPOffiButton;
            }
        }

        /// <summary>
        /// Gets Reference to NPICF7479HPOffiText
        /// </summary>
        public Text NPICF7479HPOffiText
        {
            get
            {
                if (null == fNPICF7479HPOffiText)
                {
                    fNPICF7479HPOffiText = new Text("NPICF7479HPOffiText", NPICF7479HPOffiButton);
                    fNPICF7479HPOffiText.UIMap.Scope = UIASeachScope.Children;
                    fNPICF7479HPOffiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NPICF7479 (HP Officejet Color X555)");
                    fNPICF7479HPOffiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fNPICF7479HPOffiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fNPICF7479HPOffiText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup5Text
        /// </summary>
        public Text PrinterRichTextDup5Text
        {
            get
            {
                if (null == fPrinterRichTextDup5Text)
                {
                    fPrinterRichTextDup5Text = new Text("PrinterRichTextDup5Text", NPICF7479HPOffiButton);
                    fPrinterRichTextDup5Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup5Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup5Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup5Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup5Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT00HPIPsecButton
        /// </summary>
        public Button DIRECT00HPIPsecButton
        {
            get
            {
                if (null == fDIRECT00HPIPsecButton)
                {
                    fDIRECT00HPIPsecButton = new Button("DIRECT00HPIPsecButton", DeviceListElemeList);
                    fDIRECT00HPIPsecButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT00HPIPsecButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-00-HP IPsec");
                    fDIRECT00HPIPsecButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1f48a927-5b27-5e52-f8b0-d46f806e4143");
                    fDIRECT00HPIPsecButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fDIRECT00HPIPsecButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT00HPIPsecText
        /// </summary>
        public Text DIRECT00HPIPsecText
        {
            get
            {
                if (null == fDIRECT00HPIPsecText)
                {
                    fDIRECT00HPIPsecText = new Text("DIRECT00HPIPsecText", DIRECT00HPIPsecButton);
                    fDIRECT00HPIPsecText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT00HPIPsecText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-00-HP IPsec");
                    fDIRECT00HPIPsecText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECT00HPIPsecText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fDIRECT00HPIPsecText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup6Text
        /// </summary>
        public Text PrinterRichTextDup6Text
        {
            get
            {
                if (null == fPrinterRichTextDup6Text)
                {
                    fPrinterRichTextDup6Text = new Text("PrinterRichTextDup6Text", DIRECT00HPIPsecButton);
                    fPrinterRichTextDup6Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup6Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup6Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup6Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup6Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT09HPOfficButton
        /// </summary>
        public Button DIRECT09HPOfficButton
        {
            get
            {
                if (null == fDIRECT09HPOfficButton)
                {
                    fDIRECT09HPOfficButton = new Button("DIRECT09HPOfficButton", DeviceListElemeList);
                    fDIRECT09HPOfficButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT09HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-09-HP OfficeJet Pro 8730");
                    fDIRECT09HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"16c5e730-dace-fb52-9c92-a6d33456555e");
                    fDIRECT09HPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fDIRECT09HPOfficButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT09HPOfficText
        /// </summary>
        public Text DIRECT09HPOfficText
        {
            get
            {
                if (null == fDIRECT09HPOfficText)
                {
                    fDIRECT09HPOfficText = new Text("DIRECT09HPOfficText", DIRECT09HPOfficButton);
                    fDIRECT09HPOfficText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT09HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-09-HP OfficeJet Pro 8730");
                    fDIRECT09HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECT09HPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fDIRECT09HPOfficText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup7Text
        /// </summary>
        public Text PrinterRichTextDup7Text
        {
            get
            {
                if (null == fPrinterRichTextDup7Text)
                {
                    fPrinterRichTextDup7Text = new Text("PrinterRichTextDup7Text", DIRECT09HPOfficButton);
                    fPrinterRichTextDup7Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup7Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup7Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup7Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup7Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT1FHPPageWButton
        /// </summary>
        public Button DIRECT1FHPPageWButton
        {
            get
            {
                if (null == fDIRECT1FHPPageWButton)
                {
                    fDIRECT1FHPPageWButton = new Button("DIRECT1FHPPageWButton", DeviceListElemeList);
                    fDIRECT1FHPPageWButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT1FHPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-1F-HP PageWide Pro 477dw");
                    fDIRECT1FHPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"e636868f-dcd6-5202-fce4-f38c8abe52af");
                    fDIRECT1FHPPageWButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fDIRECT1FHPPageWButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT1FHPPageWText
        /// </summary>
        public Text DIRECT1FHPPageWText
        {
            get
            {
                if (null == fDIRECT1FHPPageWText)
                {
                    fDIRECT1FHPPageWText = new Text("DIRECT1FHPPageWText", DIRECT1FHPPageWButton);
                    fDIRECT1FHPPageWText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT1FHPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-1F-HP PageWide Pro 477dw");
                    fDIRECT1FHPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECT1FHPPageWText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fDIRECT1FHPPageWText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup8Text
        /// </summary>
        public Text PrinterRichTextDup8Text
        {
            get
            {
                if (null == fPrinterRichTextDup8Text)
                {
                    fPrinterRichTextDup8Text = new Text("PrinterRichTextDup8Text", DIRECT1FHPPageWButton);
                    fPrinterRichTextDup8Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup8Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup8Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup8Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup8Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT21HPENVYPButton
        /// </summary>
        public Button DIRECT21HPENVYPButton
        {
            get
            {
                if (null == fDIRECT21HPENVYPButton)
                {
                    fDIRECT21HPENVYPButton = new Button("DIRECT21HPENVYPButton", DeviceListElemeList);
                    fDIRECT21HPENVYPButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT21HPENVYPButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-21-HP ENVY Photo 7800");
                    fDIRECT21HPENVYPButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"75430951-0adb-5682-dfff-5a2a85687958");
                    fDIRECT21HPENVYPButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fDIRECT21HPENVYPButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT21HPENVYPText
        /// </summary>
        public Text DIRECT21HPENVYPText
        {
            get
            {
                if (null == fDIRECT21HPENVYPText)
                {
                    fDIRECT21HPENVYPText = new Text("DIRECT21HPENVYPText", DIRECT21HPENVYPButton);
                    fDIRECT21HPENVYPText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT21HPENVYPText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-21-HP ENVY Photo 7800");
                    fDIRECT21HPENVYPText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECT21HPENVYPText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fDIRECT21HPENVYPText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup9Text
        /// </summary>
        public Text PrinterRichTextDup9Text
        {
            get
            {
                if (null == fPrinterRichTextDup9Text)
                {
                    fPrinterRichTextDup9Text = new Text("PrinterRichTextDup9Text", DIRECT21HPENVYPButton);
                    fPrinterRichTextDup9Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup9Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup9Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup9Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup9Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT49HPM577LButton
        /// </summary>
        public Button DIRECT49HPM577LButton
        {
            get
            {
                if (null == fDIRECT49HPM577LButton)
                {
                    fDIRECT49HPM577LButton = new Button("DIRECT49HPM577LButton", DeviceListElemeList);
                    fDIRECT49HPM577LButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT49HPM577LButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-49-HP M577 LaserJet");
                    fDIRECT49HPM577LButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"91d0c78a-f6c0-4165-bc2f-d85de2617049");
                    fDIRECT49HPM577LButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fDIRECT49HPM577LButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT49HPM577LText
        /// </summary>
        public Text DIRECT49HPM577LText
        {
            get
            {
                if (null == fDIRECT49HPM577LText)
                {
                    fDIRECT49HPM577LText = new Text("DIRECT49HPM577LText", DIRECT49HPM577LButton);
                    fDIRECT49HPM577LText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT49HPM577LText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-49-HP M577 LaserJet");
                    fDIRECT49HPM577LText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECT49HPM577LText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fDIRECT49HPM577LText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup10Text
        /// </summary>
        public Text PrinterRichTextDup10Text
        {
            get
            {
                if (null == fPrinterRichTextDup10Text)
                {
                    fPrinterRichTextDup10Text = new Text("PrinterRichTextDup10Text", DIRECT49HPM577LButton);
                    fPrinterRichTextDup10Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup10Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup10Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup10Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup10Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT5CHPWiFiDButton
        /// </summary>
        public Button DIRECT5CHPWiFiDButton
        {
            get
            {
                if (null == fDIRECT5CHPWiFiDButton)
                {
                    fDIRECT5CHPWiFiDButton = new Button("DIRECT5CHPWiFiDButton", DeviceListElemeList);
                    fDIRECT5CHPWiFiDButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT5CHPWiFiDButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-5C-HP WiFiDirect123P57750");
                    fDIRECT5CHPWiFiDButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"69a19142-9e1e-5413-b353-a51af58e0f9d");
                    fDIRECT5CHPWiFiDButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fDIRECT5CHPWiFiDButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT5CHPWiFiDText
        /// </summary>
        public Text DIRECT5CHPWiFiDText
        {
            get
            {
                if (null == fDIRECT5CHPWiFiDText)
                {
                    fDIRECT5CHPWiFiDText = new Text("DIRECT5CHPWiFiDText", DIRECT5CHPWiFiDButton);
                    fDIRECT5CHPWiFiDText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT5CHPWiFiDText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-5C-HP WiFiDirect123P57750");
                    fDIRECT5CHPWiFiDText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECT5CHPWiFiDText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fDIRECT5CHPWiFiDText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup11Text
        /// </summary>
        public Text PrinterRichTextDup11Text
        {
            get
            {
                if (null == fPrinterRichTextDup11Text)
                {
                    fPrinterRichTextDup11Text = new Text("PrinterRichTextDup11Text", DIRECT5CHPWiFiDButton);
                    fPrinterRichTextDup11Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup11Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup11Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup11Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup11Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT61HPsharaButton
        /// </summary>
        public Button DIRECT61HPsharaButton
        {
            get
            {
                if (null == fDIRECT61HPsharaButton)
                {
                    fDIRECT61HPsharaButton = new Button("DIRECT61HPsharaButton", DeviceListElemeList);
                    fDIRECT61HPsharaButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT61HPsharaButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-61-HP sharan");
                    fDIRECT61HPsharaButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"fa5192b2-39ec-40c5-a8e3-c48e8f701761");
                    fDIRECT61HPsharaButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fDIRECT61HPsharaButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECT61HPsharaText
        /// </summary>
        public Text DIRECT61HPsharaText
        {
            get
            {
                if (null == fDIRECT61HPsharaText)
                {
                    fDIRECT61HPsharaText = new Text("DIRECT61HPsharaText", DIRECT61HPsharaButton);
                    fDIRECT61HPsharaText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECT61HPsharaText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-61-HP sharan");
                    fDIRECT61HPsharaText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECT61HPsharaText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fDIRECT61HPsharaText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup12Text
        /// </summary>
        public Text PrinterRichTextDup12Text
        {
            get
            {
                if (null == fPrinterRichTextDup12Text)
                {
                    fPrinterRichTextDup12Text = new Text("PrinterRichTextDup12Text", DIRECT61HPsharaButton);
                    fPrinterRichTextDup12Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup12Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup12Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup12Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup12Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTADHPDesigButton
        /// </summary>
        public Button DIRECTADHPDesigButton
        {
            get
            {
                if (null == fDIRECTADHPDesigButton)
                {
                    fDIRECTADHPDesigButton = new Button("DIRECTADHPDesigButton", DeviceListElemeList);
                    fDIRECTADHPDesigButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTADHPDesigButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-AD-HP DesignJet T830");
                    fDIRECTADHPDesigButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"20078c38-0b7f-5e45-b128-ec19687cd98c");
                    fDIRECTADHPDesigButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fDIRECTADHPDesigButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTADHPDesigText
        /// </summary>
        public Text DIRECTADHPDesigText
        {
            get
            {
                if (null == fDIRECTADHPDesigText)
                {
                    fDIRECTADHPDesigText = new Text("DIRECTADHPDesigText", DIRECTADHPDesigButton);
                    fDIRECTADHPDesigText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTADHPDesigText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-AD-HP DesignJet T830");
                    fDIRECTADHPDesigText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECTADHPDesigText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fDIRECTADHPDesigText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup13Text
        /// </summary>
        public Text PrinterRichTextDup13Text
        {
            get
            {
                if (null == fPrinterRichTextDup13Text)
                {
                    fPrinterRichTextDup13Text = new Text("PrinterRichTextDup13Text", DIRECTADHPDesigButton);
                    fPrinterRichTextDup13Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup13Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup13Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup13Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup13Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTBAHPENVYPButton
        /// </summary>
        public Button DIRECTBAHPENVYPButton
        {
            get
            {
                if (null == fDIRECTBAHPENVYPButton)
                {
                    fDIRECTBAHPENVYPButton = new Button("DIRECTBAHPENVYPButton", DeviceListElemeList);
                    fDIRECTBAHPENVYPButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTBAHPENVYPButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-BA-HP ENVY Photo 7100");
                    fDIRECTBAHPENVYPButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3ac3e05c-0a07-5c97-f244-2058fb3a605e");
                    fDIRECTBAHPENVYPButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fDIRECTBAHPENVYPButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTBAHPENVYPText
        /// </summary>
        public Text DIRECTBAHPENVYPText
        {
            get
            {
                if (null == fDIRECTBAHPENVYPText)
                {
                    fDIRECTBAHPENVYPText = new Text("DIRECTBAHPENVYPText", DIRECTBAHPENVYPButton);
                    fDIRECTBAHPENVYPText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTBAHPENVYPText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-BA-HP ENVY Photo 7100");
                    fDIRECTBAHPENVYPText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECTBAHPENVYPText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fDIRECTBAHPENVYPText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup14Text
        /// </summary>
        public Text PrinterRichTextDup14Text
        {
            get
            {
                if (null == fPrinterRichTextDup14Text)
                {
                    fPrinterRichTextDup14Text = new Text("PrinterRichTextDup14Text", DIRECTBAHPENVYPButton);
                    fPrinterRichTextDup14Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup14Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup14Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup14Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup14Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTc9HPM281LButton
        /// </summary>
        public Button DIRECTc9HPM281LButton
        {
            get
            {
                if (null == fDIRECTc9HPM281LButton)
                {
                    fDIRECTc9HPM281LButton = new Button("DIRECTc9HPM281LButton", DeviceListElemeList);
                    fDIRECTc9HPM281LButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTc9HPM281LButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-c9-HP M281 LaserJet");
                    fDIRECTc9HPM281LButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"564e3136-4a43-5037-3947-98e7f4077cb2");
                    fDIRECTc9HPM281LButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fDIRECTc9HPM281LButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTc9HPM281LText
        /// </summary>
        public Text DIRECTc9HPM281LText
        {
            get
            {
                if (null == fDIRECTc9HPM281LText)
                {
                    fDIRECTc9HPM281LText = new Text("DIRECTc9HPM281LText", DIRECTc9HPM281LButton);
                    fDIRECTc9HPM281LText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTc9HPM281LText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-c9-HP M281 LaserJet");
                    fDIRECTc9HPM281LText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECTc9HPM281LText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fDIRECTc9HPM281LText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup15Text
        /// </summary>
        public Text PrinterRichTextDup15Text
        {
            get
            {
                if (null == fPrinterRichTextDup15Text)
                {
                    fPrinterRichTextDup15Text = new Text("PrinterRichTextDup15Text", DIRECTc9HPM281LButton);
                    fPrinterRichTextDup15Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup15Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup15Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup15Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup15Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTCCHPOfficButton
        /// </summary>
        public Button DIRECTCCHPOfficButton
        {
            get
            {
                if (null == fDIRECTCCHPOfficButton)
                {
                    fDIRECTCCHPOfficButton = new Button("DIRECTCCHPOfficButton", DeviceListElemeList);
                    fDIRECTCCHPOfficButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTCCHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-CC-HP OfficeJet Pro 8210");
                    fDIRECTCCHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8d124096-c093-72bb-b2c8-9646c5bb650d");
                    fDIRECTCCHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fDIRECTCCHPOfficButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTCCHPOfficText
        /// </summary>
        public Text DIRECTCCHPOfficText
        {
            get
            {
                if (null == fDIRECTCCHPOfficText)
                {
                    fDIRECTCCHPOfficText = new Text("DIRECTCCHPOfficText", DIRECTCCHPOfficButton);
                    fDIRECTCCHPOfficText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTCCHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-CC-HP OfficeJet Pro 8210");
                    fDIRECTCCHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECTCCHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fDIRECTCCHPOfficText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup16Text
        /// </summary>
        public Text PrinterRichTextDup16Text
        {
            get
            {
                if (null == fPrinterRichTextDup16Text)
                {
                    fPrinterRichTextDup16Text = new Text("PrinterRichTextDup16Text", DIRECTCCHPOfficButton);
                    fPrinterRichTextDup16Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup16Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup16Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup16Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup16Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTF4HPAMPBlButton
        /// </summary>
        public Button DIRECTF4HPAMPBlButton
        {
            get
            {
                if (null == fDIRECTF4HPAMPBlButton)
                {
                    fDIRECTF4HPAMPBlButton = new Button("DIRECTF4HPAMPBlButton", DeviceListElemeList);
                    fDIRECTF4HPAMPBlButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTF4HPAMPBlButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-F4-HP AMP");
                    fDIRECTF4HPAMPBlButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"12caaf61-6804-f774-8253-1b0928a2bed8");
                    fDIRECTF4HPAMPBlButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fDIRECTF4HPAMPBlButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTF4HPAMPRiText
        /// </summary>
        public Text DIRECTF4HPAMPRiText
        {
            get
            {
                if (null == fDIRECTF4HPAMPRiText)
                {
                    fDIRECTF4HPAMPRiText = new Text("DIRECTF4HPAMPRiText", DIRECTF4HPAMPBlButton);
                    fDIRECTF4HPAMPRiText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTF4HPAMPRiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-F4-HP AMP");
                    fDIRECTF4HPAMPRiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECTF4HPAMPRiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fDIRECTF4HPAMPRiText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup17Text
        /// </summary>
        public Text PrinterRichTextDup17Text
        {
            get
            {
                if (null == fPrinterRichTextDup17Text)
                {
                    fPrinterRichTextDup17Text = new Text("PrinterRichTextDup17Text", DIRECTF4HPAMPBlButton);
                    fPrinterRichTextDup17Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup17Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup17Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup17Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup17Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTF4HPM606LButton
        /// </summary>
        public Button DIRECTF4HPM606LButton
        {
            get
            {
                if (null == fDIRECTF4HPM606LButton)
                {
                    fDIRECTF4HPM606LButton = new Button("DIRECTF4HPM606LButton", DeviceListElemeList);
                    fDIRECTF4HPM606LButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTF4HPM606LButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-F4-HP M606 LaserJet");
                    fDIRECTF4HPM606LButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"10a974a9-404d-4dcb-a58d-9cd21e990af4");
                    fDIRECTF4HPM606LButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fDIRECTF4HPM606LButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTF4HPM606LText
        /// </summary>
        public Text DIRECTF4HPM606LText
        {
            get
            {
                if (null == fDIRECTF4HPM606LText)
                {
                    fDIRECTF4HPM606LText = new Text("DIRECTF4HPM606LText", DIRECTF4HPM606LButton);
                    fDIRECTF4HPM606LText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTF4HPM606LText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-F4-HP M606 LaserJet");
                    fDIRECTF4HPM606LText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECTF4HPM606LText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fDIRECTF4HPM606LText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup18Text
        /// </summary>
        public Text PrinterRichTextDup18Text
        {
            get
            {
                if (null == fPrinterRichTextDup18Text)
                {
                    fPrinterRichTextDup18Text = new Text("PrinterRichTextDup18Text", DIRECTF4HPM606LButton);
                    fPrinterRichTextDup18Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup18Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup18Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup18Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup18Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTFAHPOfficButton
        /// </summary>
        public Button DIRECTFAHPOfficButton
        {
            get
            {
                if (null == fDIRECTFAHPOfficButton)
                {
                    fDIRECTFAHPOfficButton = new Button("DIRECTFAHPOfficButton", DeviceListElemeList);
                    fDIRECTFAHPOfficButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTFAHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-FA-HP OfficeJet Pro 7720");
                    fDIRECTFAHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d82727b9-5823-53ee-0706-97e793a2bfab");
                    fDIRECTFAHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fDIRECTFAHPOfficButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTFAHPOfficText
        /// </summary>
        public Text DIRECTFAHPOfficText
        {
            get
            {
                if (null == fDIRECTFAHPOfficText)
                {
                    fDIRECTFAHPOfficText = new Text("DIRECTFAHPOfficText", DIRECTFAHPOfficButton);
                    fDIRECTFAHPOfficText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTFAHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-FA-HP OfficeJet Pro 7720");
                    fDIRECTFAHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECTFAHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fDIRECTFAHPOfficText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup19Text
        /// </summary>
        public Text PrinterRichTextDup19Text
        {
            get
            {
                if (null == fPrinterRichTextDup19Text)
                {
                    fPrinterRichTextDup19Text = new Text("PrinterRichTextDup19Text", DIRECTFAHPOfficButton);
                    fPrinterRichTextDup19Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup19Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup19Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup19Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup19Text;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTFCHPOfficButton
        /// </summary>
        public Button DIRECTFCHPOfficButton
        {
            get
            {
                if (null == fDIRECTFCHPOfficButton)
                {
                    fDIRECTFCHPOfficButton = new Button("DIRECTFCHPOfficButton", DeviceListElemeList);
                    fDIRECTFCHPOfficButton.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTFCHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-FC-HP OfficeJet Pro 7720");
                    fDIRECTFCHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8f0ed32b-6b5c-55e0-e892-b1c6e834efe6");
                    fDIRECTFCHPOfficButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"BluewireDeviceTile");
                }

                return fDIRECTFCHPOfficButton;
            }
        }

        /// <summary>
        /// Gets Reference to DIRECTFCHPOfficText
        /// </summary>
        public Text DIRECTFCHPOfficText
        {
            get
            {
                if (null == fDIRECTFCHPOfficText)
                {
                    fDIRECTFCHPOfficText = new Text("DIRECTFCHPOfficText", DIRECTFCHPOfficButton);
                    fDIRECTFCHPOfficText.UIMap.Scope = UIASeachScope.Children;
                    fDIRECTFCHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DIRECT-FC-HP OfficeJet Pro 7720");
                    fDIRECTFCHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eName");
                    fDIRECTFCHPOfficText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fDIRECTFCHPOfficText;
            }
        }

        /// <summary>
        /// Gets Reference to PrinterRichTextDup20Text
        /// </summary>
        public Text PrinterRichTextDup20Text
        {
            get
            {
                if (null == fPrinterRichTextDup20Text)
                {
                    fPrinterRichTextDup20Text = new Text("PrinterRichTextDup20Text", DIRECTFCHPOfficButton);
                    fPrinterRichTextDup20Text.UIMap.Scope = UIASeachScope.Children;
                    fPrinterRichTextDup20Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer");
                    fPrinterRichTextDup20Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eCategory");
                    fPrinterRichTextDup20Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichText");
                }

                return fPrinterRichTextDup20Text;
            }
        }

        /// <summary>
        /// Gets Reference to TheprinterthatIHyperlink
        /// </summary>
        public Hyperlink TheprinterthatIHyperlink
        {
            get
            {
                if (null == fTheprinterthatIHyperlink)
                {
                    fTheprinterthatIHyperlink = new Hyperlink("TheprinterthatIHyperlink", ElementeClassicPane);
                    fTheprinterthatIHyperlink.UIMap.Scope = UIASeachScope.Children;
                    fTheprinterthatIHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"The printer that I want isn't listed");
                    fTheprinterthatIHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eHelpLink");
                    fTheprinterthatIHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fTheprinterthatIHyperlink;
            }
        }

        /// <summary>
        /// Gets Reference to NextCCPushButtoDup1Button
        /// </summary>
        public Button NextCCPushButtoDup1Button
        {
            get
            {
                if (null == fNextCCPushButtoDup1Button)
                {
                    fNextCCPushButtoDup1Button = new Button("NextCCPushButtoDup1Button", HWNDElementdialPane);
                    fNextCCPushButtoDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fNextCCPushButtoDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Next");
                    fNextCCPushButtoDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"nextbutton");
                    fNextCCPushButtoDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCPushButton");
                }

                return fNextCCPushButtoDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to CancelCCPushButDup1Button
        /// </summary>
        public Button CancelCCPushButDup1Button
        {
            get
            {
                if (null == fCancelCCPushButDup1Button)
                {
                    fCancelCCPushButDup1Button = new Button("CancelCCPushButDup1Button", HWNDElementdialPane);
                    fCancelCCPushButDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelCCPushButDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                    fCancelCCPushButDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cancelbutton");
                    fCancelCCPushButDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CCPushButton");
                }

                return fCancelCCPushButDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to AddadeviceTitleBar
        /// </summary>
        public TitleBar AddadeviceTitleBar
        {
            get
            {
                if (null == fAddadeviceTitleBar)
                {
                    fAddadeviceTitleBar = new TitleBar("AddadeviceTitleBar", AddadeviceNativWindow);
                    fAddadeviceTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fAddadeviceTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add a device");
                    fAddadeviceTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                }

                return fAddadeviceTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemMenuBarSyDup1MenuBar
        /// </summary>
        public MenuBar SystemMenuBarSyDup1MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup1MenuBar)
                {
                    fSystemMenuBarSyDup1MenuBar = new MenuBar("SystemMenuBarSyDup1MenuBar", AddadeviceTitleBar);
                    fSystemMenuBarSyDup1MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup1MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                    fSystemMenuBarSyDup1MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                }

                return fSystemMenuBarSyDup1MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemItem1I1XMenuItem
        /// </summary>
        public MenuItem SystemItem1I1XMenuItem
        {
            get
            {
                if (null == fSystemItem1I1XMenuItem)
                {
                    fSystemItem1I1XMenuItem = new MenuItem("SystemItem1I1XMenuItem", SystemMenuBarSyDup1MenuBar);
                    fSystemItem1I1XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I1XMenuItem.UIMap.Index = 1;
                    fSystemItem1I1XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                    fSystemItem1I1XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                }

                return fSystemItem1I1XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to MinimizeMinimizButton
        /// </summary>
        public Button MinimizeMinimizButton
        {
            get
            {
                if (null == fMinimizeMinimizButton)
                {
                    fMinimizeMinimizButton = new Button("MinimizeMinimizButton", AddadeviceTitleBar);
                    fMinimizeMinimizButton.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                    fMinimizeMinimizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                }

                return fMinimizeMinimizButton;
            }
        }

        /// <summary>
        /// Gets Reference to MaximizeMaximizButton
        /// </summary>
        public Button MaximizeMaximizButton
        {
            get
            {
                if (null == fMaximizeMaximizButton)
                {
                    fMaximizeMaximizButton = new Button("MaximizeMaximizButton", AddadeviceTitleBar);
                    fMaximizeMaximizButton.UIMap.Scope = UIASeachScope.Children;
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximize");
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Maximize");
                }

                return fMaximizeMaximizButton;
            }
        }

        /// <summary>
        /// Gets Reference to CloseCloseDup1Button
        /// </summary>
        public Button CloseCloseDup1Button
        {
            get
            {
                if (null == fCloseCloseDup1Button)
                {
                    fCloseCloseDup1Button = new Button("CloseCloseDup1Button", AddadeviceTitleBar);
                    fCloseCloseDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                    fCloseCloseDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                }

                return fCloseCloseDup1Button;
            }
        }
    }
}

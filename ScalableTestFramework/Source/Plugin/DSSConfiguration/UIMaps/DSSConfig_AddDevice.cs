//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------


using TopCat.Core;
using TopCat.TestApi.Enums;

namespace HP.ScalableTest.Plugin.DSSConfiguration.UIMaps
{
    using System;
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class DSSConfig_AddDevice
    {
        /// <summary>
        /// Backing field for HPDigitalSendinWindow property
        /// </summary>
        private Window fHPDigitalSendinWindow;

        /// <summary>
        /// Backing field for AddDevicesWindow property
        /// </summary>
        private Window fAddDevicesWindoWindow;

        /// <summary>
        /// Backing field for AddDevicesTitleBar property
        /// </summary>
        private TitleBar fAddDevicesTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup0MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup0MenuBar;

        /// <summary>
        /// Backing field for SystemItem1Dup0MenuItem property
        /// </summary>
        private MenuItem fSystemItem1Dup0MenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizDup0Button property
        /// </summary>
        private Button fMinimizeMinimizDup0Button;

        /// <summary>
        /// Backing field for MaximizeMaximizButton property
        /// </summary>
        private Button fMaximizeMaximizButton;

        /// <summary>
        /// Backing field for CloseCloseDup0Button property
        /// </summary>
        private Button fCloseCloseDup0Button;

        /// <summary>
        /// Backing field for WhenaddingnewdeGroup property
        /// </summary>
        private Group fWhenaddingnewdeGroup;

        /// <summary>
        /// Backing field for ManuallyenteranGroup property
        /// </summary>
        private Group fManuallyenteranGroup;

        /// <summary>
        /// Backing field for ManuallyenteranText property
        /// </summary>
        private Text fManuallyenteranText;

        /// <summary>
        /// Backing field for HostnameorIPaddDup0Text property
        /// </summary>
        private Text fHostnameorIPaddDup0Text;

        /// <summary>
        /// Backing field for HostnameorIPaddDup1Text property
        /// </summary>
        private Text fHostnameorIPaddDup1Text;

        /// <summary>
        /// Backing field for ComboBox18EAD34ComboBox property
        /// </summary>
        private ComboBox fComboBox18EAD34ComboBox;

        /// <summary>
        /// Backing field for TextBoxPARTEdiEdit property
        /// </summary>
        private Edit fTextBoxPARTEdiEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup0Pane property
        /// </summary>
        private Pane fScrollViewerPARDup0Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup0ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup0ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup0ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup0ScrollBar;

        /// <summary>
        /// Backing field for A101112170ListBListItem property
        /// </summary>
        private ListItem fA101112170ListBListItem;

        /// <summary>
        /// Backing field for A101112170TextBText property
        /// </summary>
        private Text fA101112170TextBText;

        /// <summary>
        /// Backing field for DevicesonthenetGroup property
        /// </summary>
        private Group fDevicesonthenetGroup;

        /// <summary>
        /// Backing field for DevicesonthenetText property
        /// </summary>
        private Text fDevicesonthenetText;

        /// <summary>
        /// Backing field for ListView6b17f74DataGrid property
        /// </summary>
        private DataGrid fListView6b17f74DataGrid;

        /// <summary>
        /// Backing field for GridViewHeaderRDup0Header property
        /// </summary>
        private Header fGridViewHeaderRDup0Header;

        /// <summary>
        /// Backing field for ModelGridViewCoDup0HeaderItem property
        /// </summary>
        private HeaderItem fModelGridViewCoDup0HeaderItem;

        /// <summary>
        /// Backing field for ModelTextBlockDup0Text property
        /// </summary>
        private Text fModelTextBlockDup0Text;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup0Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup0Thumb;

        /// <summary>
        /// Backing field for NetworkIDGridViDup0HeaderItem property
        /// </summary>
        private HeaderItem fNetworkIDGridViDup0HeaderItem;

        /// <summary>
        /// Backing field for NetworkIDTextBlDup0Text property
        /// </summary>
        private Text fNetworkIDTextBlDup0Text;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup1Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup1Thumb;

        /// <summary>
        /// Backing field for DescriptionGridDup0HeaderItem property
        /// </summary>
        private HeaderItem fDescriptionGridDup0HeaderItem;

        /// <summary>
        /// Backing field for DescriptionTextDup0Text property
        /// </summary>
        private Text fDescriptionTextDup0Text;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup2Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup2Thumb;

        /// <summary>
        /// Backing field for FindDevicesButtButton property
        /// </summary>
        private Button fFindDevicesButtButton;

        /// <summary>
        /// Backing field for FindDevicesTextText property
        /// </summary>
        private Text fFindDevicesTextText;

        /// <summary>
        /// Backing field for TextBoxEdit property
        /// </summary>
        private Edit fTextBoxEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup1Pane property
        /// </summary>
        private Pane fScrollViewerPARDup1Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup1ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup1ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup1ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup1ScrollBar;

        /// <summary>
        /// Backing field for TextBoxd12567baEdit property
        /// </summary>
        private Edit fTextBoxd12567baEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup2Pane property
        /// </summary>
        private Pane fScrollViewerPARDup2Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup2ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup2ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup2ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup2ScrollBar;

        /// <summary>
        /// Backing field for SeatsAvailableGGroup property
        /// </summary>
        private Group fSeatsAvailableGGroup;

        /// <summary>
        /// Backing field for SeatsAvailableTText property
        /// </summary>
        private Text fSeatsAvailableTText;

        /// <summary>
        /// Backing field for TextBox74c2ecebEdit property
        /// </summary>
        private Edit fTextBox74c2ecebEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup3Pane property
        /// </summary>
        private Pane fScrollViewerPARDup3Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup3ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup3ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup3ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup3ScrollBar;

        /// <summary>
        /// Backing field for AddDevice1Button property
        /// </summary>
        private Button fButton56B48A214Button;

        /// <summary>
        /// Backing field for ImageDup0Image property
        /// </summary>
        private Image fImageDup0Image;

        /// <summary>
        /// Backing field for Button57fac0280Button property
        /// </summary>
        private Button fButton57fac0280Button;

        /// <summary>
        /// Backing field for ImageDup1Image property
        /// </summary>
        private Image fImageDup1Image;

        /// <summary>
        /// Backing field for Buttonf7932fd78Button property
        /// </summary>
        private Button fButtonf7932fd78Button;

        /// <summary>
        /// Backing field for ImageDup2Image property
        /// </summary>
        private Image fImageDup2Image;

        /// <summary>
        /// Backing field for DeviceListGroupGroup property
        /// </summary>
        private Group fDeviceListGroupGroup;

        /// <summary>
        /// Backing field for DeviceListTextBDup0Text property
        /// </summary>
        private Text fDeviceListTextBDup0Text;

        /// <summary>
        /// Backing field for ListViewEB70F00DataGrid property
        /// </summary>
        private DataGrid fListViewEB70F00DataGrid;

        /// <summary>
        /// Backing field for GridViewHeaderRDup1Header property
        /// </summary>
        private Header fGridViewHeaderRDup1Header;

        /// <summary>
        /// Backing field for ModelGridViewCoDup1HeaderItem property
        /// </summary>
        private HeaderItem fModelGridViewCoDup1HeaderItem;

        /// <summary>
        /// Backing field for ModelTextBlockDup1Text property
        /// </summary>
        private Text fModelTextBlockDup1Text;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup3Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup3Thumb;

        /// <summary>
        /// Backing field for NetworkIDGridViDup1HeaderItem property
        /// </summary>
        private HeaderItem fNetworkIDGridViDup1HeaderItem;

        /// <summary>
        /// Backing field for NetworkIDTextBlDup1Text property
        /// </summary>
        private Text fNetworkIDTextBlDup1Text;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup4Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup4Thumb;

        /// <summary>
        /// Backing field for DescriptionGridDup1HeaderItem property
        /// </summary>
        private HeaderItem fDescriptionGridDup1HeaderItem;

        /// <summary>
        /// Backing field for DescriptionTextDup1Text property
        /// </summary>
        private Text fDescriptionTextDup1Text;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup5Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup5Thumb;

        /// <summary>
        /// Backing field for OKButtonA1ABC07Button property
        /// </summary>
        private Button fOKButtonA1ABC07Button;

        /// <summary>
        /// Backing field for OKTextBlockDup0Text property
        /// </summary>
        private Text fOKTextBlockDup0Text;

        /// <summary>
        /// Backing field for CancelButton50BButton property
        /// </summary>
        private Button fCancelButton50BButton;

        /// <summary>
        /// Backing field for CancelTextBlockDup0Text property
        /// </summary>
        private Text fCancelTextBlockDup0Text;

        /// <summary>
        /// Backing field for HelpButton7af82Button property
        /// </summary>
        private Button fHelpButton7af82Button;

        /// <summary>
        /// Backing field for HelpTextBlockDup0Text property
        /// </summary>
        private Text fHelpTextBlockDup0Text;

        /// <summary>
        /// Backing field for HPDigitalSendinTitleBar property
        /// </summary>
        private TitleBar fHPDigitalSendinTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup1MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup1MenuBar;

        /// <summary>
        /// Backing field for SystemItem1Dup1MenuItem property
        /// </summary>
        private MenuItem fSystemItem1Dup1MenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizDup1Button property
        /// </summary>
        private Button fMinimizeMinimizDup1Button;

        /// <summary>
        /// Backing field for RestoreRestoreButton property
        /// </summary>
        private Button fRestoreRestoreButton;

        /// <summary>
        /// Backing field for CloseCloseDup1Button property
        /// </summary>
        private Button fCloseCloseDup1Button;

        /// <summary>
        /// Backing field for HelpButtonCB8CFButton property
        /// </summary>
        private Button fHelpButtonCB8CFButton;

        /// <summary>
        /// Backing field for HelpTextBlockDup1Text property
        /// </summary>
        private Text fHelpTextBlockDup1Text;

        /// <summary>
        /// Backing field for ApplyButton property
        /// </summary>
        private Button fApplyButton61E2Button;

        /// <summary>
        /// Backing field for ApplyTextBlockText property
        /// </summary>
        private Text fApplyTextBlockText;

        /// <summary>
        /// Backing field for CancelButton65CButton property
        /// </summary>
        private Button fCancelButton65CButton;

        /// <summary>
        /// Backing field for CancelTextBlockDup1Text property
        /// </summary>
        private Text fCancelTextBlockDup1Text;

        /// <summary>
        /// Backing field for OKButton property
        /// </summary>
        private Button fOKButtonCC2EF49Button;

        /// <summary>
        /// Backing field for OKTextBlockDup1Text property
        /// </summary>
        private Text fOKTextBlockDup1Text;

        /// <summary>
        /// Backing field for TabControlec0fdTab property
        /// </summary>
        private Tab fTabControlec0fdTab;

        /// <summary>
        /// Backing field for SystemWindowsCoDup0TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup0TabItem;

        /// <summary>
        /// Backing field for GeneralTextmGenText property
        /// </summary>
        private Text fGeneralTextmGenText;

        /// <summary>
        /// Backing field for GeneralTextBlocText property
        /// </summary>
        private Text fGeneralTextBlocText;

        /// <summary>
        /// Backing field for Text933345b04e3Text property
        /// </summary>
        private Text fText933345b04e3Text;

        /// <summary>
        /// Backing field for Text786caf67344Text property
        /// </summary>
        private Text fText786caf67344Text;

        /// <summary>
        /// Backing field for SystemWindowsCoDup1TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup1TabItem;

        /// <summary>
        /// Backing field for AuthenticationTDup0Text property
        /// </summary>
        private Text fAuthenticationTDup0Text;

        /// <summary>
        /// Backing field for AuthenticationTDup1Text property
        /// </summary>
        private Text fAuthenticationTDup1Text;

        /// <summary>
        /// Backing field for Text31EC91730B9Text property
        /// </summary>
        private Text fText31EC91730B9Text;

        /// <summary>
        /// Backing field for TextA479C271445Text property
        /// </summary>
        private Text fTextA479C271445Text;

        /// <summary>
        /// Backing field for EmailTabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup2TabItem;

        /// <summary>
        /// Backing field for EmailTextmEmailText property
        /// </summary>
        private Text fEmailTextmEmailText;

        /// <summary>
        /// Backing field for EmailTextBlockText property
        /// </summary>
        private Text fEmailTextBlockText;

        /// <summary>
        /// Backing field for Text32de714a8bdText property
        /// </summary>
        private Text fText32de714a8bdText;

        /// <summary>
        /// Backing field for Text3b2a8761f4fText property
        /// </summary>
        private Text fText3b2a8761f4fText;

        /// <summary>
        /// Backing field for TextBlockText property
        /// </summary>
        private Text fTextBlockText;

        /// <summary>
        /// Backing field for SystemWindowsCoDup3TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup3TabItem;

        /// <summary>
        /// Backing field for FaxTextmFaxTabLText property
        /// </summary>
        private Text fFaxTextmFaxTabLText;

        /// <summary>
        /// Backing field for FaxTextBlockText property
        /// </summary>
        private Text fFaxTextBlockText;

        /// <summary>
        /// Backing field for TextD1ED4F16F38Text property
        /// </summary>
        private Text fTextD1ED4F16F38Text;

        /// <summary>
        /// Backing field for Text7DDE04FD251Text property
        /// </summary>
        private Text fText7DDE04FD251Text;

        /// <summary>
        /// Backing field for SystemWindowsCoDup4TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup4TabItem;

        /// <summary>
        /// Backing field for SendtoFolderTexDup0Text property
        /// </summary>
        private Text fSendtoFolderTexDup0Text;

        /// <summary>
        /// Backing field for SendtoFolderTexDup1Text property
        /// </summary>
        private Text fSendtoFolderTexDup1Text;

        /// <summary>
        /// Backing field for Text7a57f43ecb1Text property
        /// </summary>
        private Text fText7a57f43ecb1Text;

        /// <summary>
        /// Backing field for Text654b650dd19Text property
        /// </summary>
        private Text fText654b650dd19Text;

        /// <summary>
        /// Backing field for WorkflowsTabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup5TabItem;

        /// <summary>
        /// Backing field for WorkflowsTextmWText property
        /// </summary>
        private Text fWorkflowsTextmWText;

        /// <summary>
        /// Backing field for WorkflowsTextBlText property
        /// </summary>
        private Text fWorkflowsTextBlText;

        /// <summary>
        /// Backing field for Text22D9C34E84CText property
        /// </summary>
        private Text fText22D9C34E84CText;

        /// <summary>
        /// Backing field for TextC8D15BD39C8Text property
        /// </summary>
        private Text fTextC8D15BD39C8Text;

        /// <summary>
        /// Backing field for SystemWindowsCoDup6TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup6TabItem;

        /// <summary>
        /// Backing field for AddressingTextmText property
        /// </summary>
        private Text fAddressingTextmText;

        /// <summary>
        /// Backing field for AddressingTextBText property
        /// </summary>
        private Text fAddressingTextBText;

        /// <summary>
        /// Backing field for Text47EB5CBA4D1Text property
        /// </summary>
        private Text fText47EB5CBA4D1Text;

        /// <summary>
        /// Backing field for Text0757E148179Text property
        /// </summary>
        private Text fText0757E148179Text;

        /// <summary>
        /// Backing field for DeviceConfiguraTabItem property
        /// </summary>
        private TabItem fDeviceConfiguraTabItem;

        /// <summary>
        /// Backing field for DeviceConfiguraText property
        /// </summary>
        private Text fDeviceConfiguraText;

        /// <summary>
        /// Backing field for ServiceConfigurCustom property
        /// </summary>
        private Custom fServiceConfigurCustom;

        /// <summary>
        /// Backing field for GroupListText property
        /// </summary>
        private Text fGroupListText;

        /// <summary>
        /// Backing field for GroupListTextBlText property
        /// </summary>
        private Text fGroupListTextBlText;

        /// <summary>
        /// Backing field for DeviceGroupsText property
        /// </summary>
        private Text fDeviceGroupsText;

        /// <summary>
        /// Backing field for DeviceGroupsTexText property
        /// </summary>
        private Text fDeviceGroupsTexText;

        /// <summary>
        /// Backing field for TreeView1416BDETree property
        /// </summary>
        private Tree fTreeView1416BDETree;

        /// <summary>
        /// Backing field for AllDevicesTreeVTreeItem property
        /// </summary>
        private TreeItem fAllDevicesTreeVTreeItem;

        /// <summary>
        /// Backing field for ButtonExpanderButton property
        /// </summary>
        private Button fButtonExpanderButton;

        /// <summary>
        /// Backing field for AllDevicesTextBText property
        /// </summary>
        private Text fAllDevicesTextBText;

        /// <summary>
        /// Backing field for AddGroupButtonFButton property
        /// </summary>
        private Button fAddGroupButtonFButton;

        /// <summary>
        /// Backing field for AddGroupTextBloText property
        /// </summary>
        private Text fAddGroupTextBloText;

        /// <summary>
        /// Backing field for RemoveGroupButtButton property
        /// </summary>
        private Button fRemoveGroupButtButton;

        /// <summary>
        /// Backing field for RemoveGroupTextText property
        /// </summary>
        private Text fRemoveGroupTextText;

        /// <summary>
        /// Backing field for RenameButton261Button property
        /// </summary>
        private Button fRenameButton261Button;

        /// <summary>
        /// Backing field for RenameTextBlockText property
        /// </summary>
        private Text fRenameTextBlockText;

        /// <summary>
        /// Backing field for GridSplitterThumb property
        /// </summary>
        private Thumb fGridSplitterThumb;

        /// <summary>
        /// Backing field for DeviceListText property
        /// </summary>
        private Text fDeviceListText;

        /// <summary>
        /// Backing field for DeviceListTextBDup1Text property
        /// </summary>
        private Text fDeviceListTextBDup1Text;

        /// <summary>
        /// Backing field for ListView141cb8bDataGrid property
        /// </summary>
        private DataGrid fListView141cb8bDataGrid;

        /// <summary>
        /// Backing field for GridViewHeaderRDup2Header property
        /// </summary>
        private Header fGridViewHeaderRDup2Header;

        /// <summary>
        /// Backing field for StatusGridViewCHeaderItem property
        /// </summary>
        private HeaderItem fStatusGridViewCHeaderItem;

        /// <summary>
        /// Backing field for StatusTextBlockText property
        /// </summary>
        private Text fStatusTextBlockText;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup6Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup6Thumb;

        /// <summary>
        /// Backing field for NameGridViewColHeaderItem property
        /// </summary>
        private HeaderItem fNameGridViewColHeaderItem;

        /// <summary>
        /// Backing field for NameTextBlockText property
        /// </summary>
        private Text fNameTextBlockText;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup7Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup7Thumb;

        /// <summary>
        /// Backing field for GridViewColumnHDup0HeaderItem property
        /// </summary>
        private HeaderItem fGridViewColumnHDup0HeaderItem;

        /// <summary>
        /// Backing field for ImageDup3Image property
        /// </summary>
        private Image fImageDup3Image;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup8Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup8Thumb;

        /// <summary>
        /// Backing field for GridViewColumnHDup1HeaderItem property
        /// </summary>
        private HeaderItem fGridViewColumnHDup1HeaderItem;

        /// <summary>
        /// Backing field for ImageDup4Image property
        /// </summary>
        private Image fImageDup4Image;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup9Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup9Thumb;

        /// <summary>
        /// Backing field for GridViewColumnHDup2HeaderItem property
        /// </summary>
        private HeaderItem fGridViewColumnHDup2HeaderItem;

        /// <summary>
        /// Backing field for ImageDup5Image property
        /// </summary>
        private Image fImageDup5Image;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup10Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup10Thumb;

        /// <summary>
        /// Backing field for GridViewColumnHDup3HeaderItem property
        /// </summary>
        private HeaderItem fGridViewColumnHDup3HeaderItem;

        /// <summary>
        /// Backing field for ImageDup6Image property
        /// </summary>
        private Image fImageDup6Image;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup11Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup11Thumb;

        /// <summary>
        /// Backing field for GridViewColumnHDup4HeaderItem property
        /// </summary>
        private HeaderItem fGridViewColumnHDup4HeaderItem;

        /// <summary>
        /// Backing field for ImageDup7Image property
        /// </summary>
        private Image fImageDup7Image;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup12Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup12Thumb;

        /// <summary>
        /// Backing field for GridViewColumnHDup5HeaderItem property
        /// </summary>
        private HeaderItem fGridViewColumnHDup5HeaderItem;

        /// <summary>
        /// Backing field for ImageDup8Image property
        /// </summary>
        private Image fImageDup8Image;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup13Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup13Thumb;

        /// <summary>
        /// Backing field for ModelGridViewCoDup2HeaderItem property
        /// </summary>
        private HeaderItem fModelGridViewCoDup2HeaderItem;

        /// <summary>
        /// Backing field for ModelTextBlockDup2Text property
        /// </summary>
        private Text fModelTextBlockDup2Text;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup14Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup14Thumb;

        /// <summary>
        /// Backing field for IPAddressGridViHeaderItem property
        /// </summary>
        private HeaderItem fIPAddressGridViHeaderItem;

        /// <summary>
        /// Backing field for IPAddressTextBlText property
        /// </summary>
        private Text fIPAddressTextBlText;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup15Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup15Thumb;

        /// <summary>
        /// Backing field for HostnameGridVieHeaderItem property
        /// </summary>
        private HeaderItem fHostnameGridVieHeaderItem;

        /// <summary>
        /// Backing field for HostnameTextBloText property
        /// </summary>
        private Text fHostnameTextBloText;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup16Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup16Thumb;

        /// <summary>
        /// Backing field for DescriptionGridDup2HeaderItem property
        /// </summary>
        private HeaderItem fDescriptionGridDup2HeaderItem;

        /// <summary>
        /// Backing field for DescriptionTextDup2Text property
        /// </summary>
        private Text fDescriptionTextDup2Text;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup17Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup17Thumb;

        /// <summary>
        /// Backing field for FirmwareGridVieHeaderItem property
        /// </summary>
        private HeaderItem fFirmwareGridVieHeaderItem;

        /// <summary>
        /// Backing field for FirmwareTextBloText property
        /// </summary>
        private Text fFirmwareTextBloText;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup18Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup18Thumb;

        /// <summary>
        /// Backing field for AddDeviceButtonButton property
        /// </summary>
        private Button fAddDeviceButtonButton;

        /// <summary>
        /// Backing field for AddDeviceTextBlText property
        /// </summary>
        private Text fAddDeviceTextBlText;

        /// <summary>
        /// Backing field for ExportButtonef5Button property
        /// </summary>
        private Button fExportButtonef5Button;

        /// <summary>
        /// Backing field for ExportTextBlockText property
        /// </summary>
        private Text fExportTextBlockText;

        /// <summary>
        /// Backing field for RemoveDeviceButButton property
        /// </summary>
        private Button fRemoveDeviceButButton;

        /// <summary>
        /// Backing field for RemoveDeviceTexText property
        /// </summary>
        private Text fRemoveDeviceTexText;

        /// <summary>
        /// Backing field for ImportButtona69Button property
        /// </summary>
        private Button fImportButtona69Button;

        /// <summary>
        /// Backing field for ImportTextBlockText property
        /// </summary>
        private Text fImportTextBlockText;

        /// <summary>
        /// Backing field for CreateTemplateBButton property
        /// </summary>
        private Button fCreateTemplateBButton;

        /// <summary>
        /// Backing field for CreateTemplateTText property
        /// </summary>
        private Text fCreateTemplateTText;

        /// <summary>
        /// Backing field for DeviceSignInButButton property
        /// </summary>
        private Button fDeviceSignInButButton;

        /// <summary>
        /// Backing field for DeviceSignInTexText property
        /// </summary>
        private Text fDeviceSignInTexText;

        /// <summary>
        /// Backing field for TotalDevicesText property
        /// </summary>
        private Text fTotalDevicesText;

        /// <summary>
        /// Backing field for TotalDevicesTexText property
        /// </summary>
        private Text fTotalDevicesTexText;

        /// <summary>
        /// Backing field for A0Text82f844376Text property
        /// </summary>
        private Text fA0Text82f844376Text;

        /// <summary>
        /// Backing field for A0TextBlockText property
        /// </summary>
        private Text fA0TextBlockText;

        /// <summary>
        /// Backing field for ConfigureDeviceButton property
        /// </summary>
        private Button fConfigureDeviceButton;

        /// <summary>
        /// Backing field for ConfigureDeviceText property
        /// </summary>
        private Text fConfigureDeviceText;

        /// <summary>
        /// Backing field for TemplateConfiguTabItem property
        /// </summary>
        private TabItem fTemplateConfiguTabItem;

        /// <summary>
        /// Backing field for TemplateConfiguText property
        /// </summary>
        private Text fTemplateConfiguText;

        /// <summary>
        /// Backing field for LogTabItem9b4f3TabItem property
        /// </summary>
        private TabItem fLogTabItem9b4f3TabItem;

        /// <summary>
        /// Backing field for LogTextBlockText property
        /// </summary>
        private Text fLogTextBlockText;

        /// <summary>
        /// Backing field for SystemWindowsCoDup7TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup7TabItem;

        /// <summary>
        /// Backing field for SecurityTextmSeText property
        /// </summary>
        private Text fSecurityTextmSeText;

        /// <summary>
        /// Backing field for SecurityTextBloText property
        /// </summary>
        private Text fSecurityTextBloText;

        /// <summary>
        /// Backing field for Text8A7A84DB894Text property
        /// </summary>
        private Text fText8A7A84DB894Text;

        /// <summary>
        /// Backing field for Text16F78FB18FFText property
        /// </summary>
        private Text fText16F78FB18FFText;

        /// <summary>
        /// Backing field for SystemWindowsCoDup8TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup8TabItem;

        /// <summary>
        /// Backing field for AnalyticsTextmAText property
        /// </summary>
        private Text fAnalyticsTextmAText;

        /// <summary>
        /// Backing field for AnalyticsTextBlText property
        /// </summary>
        private Text fAnalyticsTextBlText;

        /// <summary>
        /// Backing field for AboutTabItemf45TabItem property
        /// </summary>
        private TabItem fAboutTabItemf45TabItem;

        /// <summary>
        /// Backing field for AboutTextBlockText property
        /// </summary>
        private Text fAboutTextBlockText;

        /// <summary>
        /// Backing field for HPDigitalCustomMessageWindow property
        /// </summary>
        private Window fHPDigitalCustomMessageWindow;

        /// <summary>
        /// The Ip Address
        /// </summary>
        private string _ipAddress;

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_AddDevice"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public DSSConfig_AddDevice(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_AddDevice"/> class using the default UIAFramework.
        /// </summary>
        public DSSConfig_AddDevice()
        {
            Desktop = new Desktop();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_AddDevice"/> class using the default UIAFramework.
        /// </summary>
        /// <param name="address">
        /// The IP address.
        /// </param>
        public DSSConfig_AddDevice(string address)
        {
            Desktop = new Desktop();
            _ipAddress = address;
        }

        /// <summary>
        /// Checks for screen avalability
        /// </summary>
        /// <param name="timeout">
        /// The amount of time allowed for the screen avalability
        /// </param>
        public bool WaitForAvailable(int timeout)
        {
            if (HPDigitalSendinWindow.WaitForAvailable(timeout) == ResultCode.Passed)
            {
                if (AddDevicesWindow.WaitForAvailable(timeout) == ResultCode.Passed)
                {
                    return true;
                }
            }

            return false;
        }
        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinWindow
        {
            get
            {
                if (null == fHPDigitalSendinWindow)
                {
                    fHPDigitalSendinWindow = new Window("HPDigitalSendinWindow", Desktop);
                    fHPDigitalSendinWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AB81453F-68AD-4243-ACA8-B4D9362C4ED4");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software Configuration (Server IP Address: {_ipAddress})");
                }

                return fHPDigitalSendinWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window AddDevicesWindow
        {
            get
            {
                if (null == fAddDevicesWindoWindow)
                {
                    fAddDevicesWindoWindow = new Window("AddDevicesWindow", HPDigitalSendinWindow);
                    fAddDevicesWindoWindow.UIMap.Scope = UIASeachScope.Children;
                    fAddDevicesWindoWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fAddDevicesWindoWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2B58EBC8-8CF9-468e-A788-28E7C5BD22F6");
                    fAddDevicesWindoWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Devices");
                }

                return fAddDevicesWindoWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar AddDevicesTitleBar
        {
            get
            {
                if (null == fAddDevicesTitleBar)
                {
                    fAddDevicesTitleBar = new TitleBar("AddDevicesTitleBar", AddDevicesWindow);
                    fAddDevicesTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fAddDevicesTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fAddDevicesTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Devices");
                }

                return fAddDevicesTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyDup0MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup0MenuBar)
                {
                    fSystemMenuBarSyDup0MenuBar = new MenuBar("SystemMenuBarSyDup0MenuBar", AddDevicesTitleBar);
                    fSystemMenuBarSyDup0MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyDup0MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1Dup0MenuItem
        {
            get
            {
                if (null == fSystemItem1Dup0MenuItem)
                {
                    fSystemItem1Dup0MenuItem = new MenuItem("SystemItem1Dup0MenuItem", SystemMenuBarSyDup0MenuBar);
                    fSystemItem1Dup0MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1Dup0MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1Dup0MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1Dup0MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MinimizeMinimizDup0Button
        {
            get
            {
                if (null == fMinimizeMinimizDup0Button)
                {
                    fMinimizeMinimizDup0Button = new Button("MinimizeMinimizDup0Button", AddDevicesTitleBar);
                    fMinimizeMinimizDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                    fMinimizeMinimizDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                }

                return fMinimizeMinimizDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MaximizeMaximizButton
        {
            get
            {
                if (null == fMaximizeMaximizButton)
                {
                    fMaximizeMaximizButton = new Button("MaximizeMaximizButton", AddDevicesTitleBar);
                    fMaximizeMaximizButton.UIMap.Scope = UIASeachScope.Children;
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Maximize");
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximize");
                }

                return fMaximizeMaximizButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseDup0Button
        {
            get
            {
                if (null == fCloseCloseDup0Button)
                {
                    fCloseCloseDup0Button = new Button("CloseCloseDup0Button", AddDevicesTitleBar);
                    fCloseCloseDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group WhenaddingnewdeGroup
        {
            get
            {
                if (null == fWhenaddingnewdeGroup)
                {
                    fWhenaddingnewdeGroup = new Group("WhenaddingnewdeGroup", AddDevicesWindow);
                    fWhenaddingnewdeGroup.UIMap.Scope = UIASeachScope.Children;
                    fWhenaddingnewdeGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fWhenaddingnewdeGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"When adding new devices, apply this template");
                }

                return fWhenaddingnewdeGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group ManuallyenteranGroup
        {
            get
            {
                if (null == fManuallyenteranGroup)
                {
                    fManuallyenteranGroup = new Group("ManuallyenteranGroup", AddDevicesWindow);
                    fManuallyenteranGroup.UIMap.Scope = UIASeachScope.Children;
                    fManuallyenteranGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fManuallyenteranGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Manually enter a network name for the device.");
                }

                return fManuallyenteranGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ManuallyenteranText
        {
            get
            {
                if (null == fManuallyenteranText)
                {
                    fManuallyenteranText = new Text("ManuallyenteranText", ManuallyenteranGroup);
                    fManuallyenteranText.UIMap.Scope = UIASeachScope.Children;
                    fManuallyenteranText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fManuallyenteranText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Manually enter a network name for the device.");
                }

                return fManuallyenteranText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HostnameorIPaddDup0Text
        {
            get
            {
                if (null == fHostnameorIPaddDup0Text)
                {
                    fHostnameorIPaddDup0Text = new Text("HostnameorIPaddDup0Text", ManuallyenteranGroup);
                    fHostnameorIPaddDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fHostnameorIPaddDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fHostnameorIPaddDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Hostname or IP address");
                }

                return fHostnameorIPaddDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HostnameorIPaddDup1Text
        {
            get
            {
                if (null == fHostnameorIPaddDup1Text)
                {
                    fHostnameorIPaddDup1Text = new Text("HostnameorIPaddDup1Text", HostnameorIPaddDup0Text);
                    fHostnameorIPaddDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fHostnameorIPaddDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHostnameorIPaddDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Hostname or IP address");
                }

                return fHostnameorIPaddDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox HostNameComboBox
        {
            get
            {
                if (null == fComboBox18EAD34ComboBox)
                {
                    fComboBox18EAD34ComboBox = new ComboBox("ComboBox18EAD34ComboBox", ManuallyenteranGroup);
                    fComboBox18EAD34ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox18EAD34ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox18EAD34ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"18EAD344-2C1E-4e48-9A2E-7E1297E05197");
                }

                return fComboBox18EAD34ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxPARTEdiEdit
        {
            get
            {
                if (null == fTextBoxPARTEdiEdit)
                {
                    fTextBoxPARTEdiEdit = new Edit("TextBoxPARTEdiEdit", HostNameComboBox);
                    fTextBoxPARTEdiEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxPARTEdiEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxPARTEdiEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_EditableTextBox");
                }

                return fTextBoxPARTEdiEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup0Pane
        {
            get
            {
                if (null == fScrollViewerPARDup0Pane)
                {
                    fScrollViewerPARDup0Pane = new Pane("ScrollViewerPARDup0Pane", TextBoxPARTEdiEdit);
                    fScrollViewerPARDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup0ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup0ScrollBar)
                {
                    fScrollBarVerticDup0ScrollBar = new ScrollBar("ScrollBarVerticDup0ScrollBar", ScrollViewerPARDup0Pane);
                    fScrollBarVerticDup0ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup0ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup0ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup0ScrollBar)
                {
                    fScrollBarHorizoDup0ScrollBar = new ScrollBar("ScrollBarHorizoDup0ScrollBar", ScrollViewerPARDup0Pane);
                    fScrollBarHorizoDup0ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup0ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem A101112170ListBListItem
        {
            get
            {
                if (null == fA101112170ListBListItem)
                {
                    fA101112170ListBListItem = new ListItem("A101112170ListBListItem", HostNameComboBox);
                    fA101112170ListBListItem.UIMap.Scope = UIASeachScope.Children;
                    fA101112170ListBListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fA101112170ListBListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"10.11.12.170");
                }

                return fA101112170ListBListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text A101112170TextBText
        {
            get
            {
                if (null == fA101112170TextBText)
                {
                    fA101112170TextBText = new Text("A101112170TextBText", A101112170ListBListItem);
                    fA101112170TextBText.UIMap.Scope = UIASeachScope.Children;
                    fA101112170TextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fA101112170TextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"10.11.12.170");
                }

                return fA101112170TextBText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group DevicesonthenetGroup
        {
            get
            {
                if (null == fDevicesonthenetGroup)
                {
                    fDevicesonthenetGroup = new Group("DevicesonthenetGroup", AddDevicesWindow);
                    fDevicesonthenetGroup.UIMap.Scope = UIASeachScope.Children;
                    fDevicesonthenetGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fDevicesonthenetGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Devices on the network");
                }

                return fDevicesonthenetGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DevicesonthenetText
        {
            get
            {
                if (null == fDevicesonthenetText)
                {
                    fDevicesonthenetText = new Text("DevicesonthenetText", DevicesonthenetGroup);
                    fDevicesonthenetText.UIMap.Scope = UIASeachScope.Children;
                    fDevicesonthenetText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDevicesonthenetText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Devices on the network");
                }

                return fDevicesonthenetText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public DataGrid ListView6b17f74DataGrid
        {
            get
            {
                if (null == fListView6b17f74DataGrid)
                {
                    fListView6b17f74DataGrid = new DataGrid("ListView6b17f74DataGrid", DevicesonthenetGroup);
                    fListView6b17f74DataGrid.UIMap.Scope = UIASeachScope.Children;
                    fListView6b17f74DataGrid.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListView");
                    fListView6b17f74DataGrid.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6b17f74d-5198-42b6-8336-a6fa89c1797a");
                }

                return fListView6b17f74DataGrid;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Header GridViewHeaderRDup0Header
        {
            get
            {
                if (null == fGridViewHeaderRDup0Header)
                {
                    fGridViewHeaderRDup0Header = new Header("GridViewHeaderRDup0Header", ListView6b17f74DataGrid);
                    fGridViewHeaderRDup0Header.UIMap.Scope = UIASeachScope.Children;
                    fGridViewHeaderRDup0Header.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewHeaderRowPresenter");
                }

                return fGridViewHeaderRDup0Header;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem ModelGridViewCoDup0HeaderItem
        {
            get
            {
                if (null == fModelGridViewCoDup0HeaderItem)
                {
                    fModelGridViewCoDup0HeaderItem = new HeaderItem("ModelGridViewCoDup0HeaderItem", GridViewHeaderRDup0Header);
                    fModelGridViewCoDup0HeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fModelGridViewCoDup0HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fModelGridViewCoDup0HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Model");
                }

                return fModelGridViewCoDup0HeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ModelTextBlockDup0Text
        {
            get
            {
                if (null == fModelTextBlockDup0Text)
                {
                    fModelTextBlockDup0Text = new Text("ModelTextBlockDup0Text", ModelGridViewCoDup0HeaderItem);
                    fModelTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fModelTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fModelTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Model");
                }

                return fModelTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup0Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup0Thumb)
                {
                    fThumbPARTHeadeDup0Thumb = new Thumb("ThumbPARTHeadeDup0Thumb", ModelGridViewCoDup0HeaderItem);
                    fThumbPARTHeadeDup0Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup0Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup0Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup0Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem NetworkIDGridViDup0HeaderItem
        {
            get
            {
                if (null == fNetworkIDGridViDup0HeaderItem)
                {
                    fNetworkIDGridViDup0HeaderItem = new HeaderItem("NetworkIDGridViDup0HeaderItem", GridViewHeaderRDup0Header);
                    fNetworkIDGridViDup0HeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fNetworkIDGridViDup0HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fNetworkIDGridViDup0HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Network ID");
                }

                return fNetworkIDGridViDup0HeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NetworkIDTextBlDup0Text
        {
            get
            {
                if (null == fNetworkIDTextBlDup0Text)
                {
                    fNetworkIDTextBlDup0Text = new Text("NetworkIDTextBlDup0Text", NetworkIDGridViDup0HeaderItem);
                    fNetworkIDTextBlDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fNetworkIDTextBlDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fNetworkIDTextBlDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Network ID");
                }

                return fNetworkIDTextBlDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup1Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup1Thumb)
                {
                    fThumbPARTHeadeDup1Thumb = new Thumb("ThumbPARTHeadeDup1Thumb", NetworkIDGridViDup0HeaderItem);
                    fThumbPARTHeadeDup1Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup1Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup1Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup1Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem DescriptionGridDup0HeaderItem
        {
            get
            {
                if (null == fDescriptionGridDup0HeaderItem)
                {
                    fDescriptionGridDup0HeaderItem = new HeaderItem("DescriptionGridDup0HeaderItem", GridViewHeaderRDup0Header);
                    fDescriptionGridDup0HeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fDescriptionGridDup0HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fDescriptionGridDup0HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Description");
                }

                return fDescriptionGridDup0HeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DescriptionTextDup0Text
        {
            get
            {
                if (null == fDescriptionTextDup0Text)
                {
                    fDescriptionTextDup0Text = new Text("DescriptionTextDup0Text", DescriptionGridDup0HeaderItem);
                    fDescriptionTextDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fDescriptionTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDescriptionTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Description");
                }

                return fDescriptionTextDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup2Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup2Thumb)
                {
                    fThumbPARTHeadeDup2Thumb = new Thumb("ThumbPARTHeadeDup2Thumb", DescriptionGridDup0HeaderItem);
                    fThumbPARTHeadeDup2Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup2Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup2Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup2Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button FindDevicesButtButton
        {
            get
            {
                if (null == fFindDevicesButtButton)
                {
                    fFindDevicesButtButton = new Button("FindDevicesButtButton", DevicesonthenetGroup);
                    fFindDevicesButtButton.UIMap.Scope = UIASeachScope.Children;
                    fFindDevicesButtButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fFindDevicesButtButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d66b5613-aefb-4206-8a18-44bd35186207");
                    fFindDevicesButtButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Find Devices");
                }

                return fFindDevicesButtButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FindDevicesTextText
        {
            get
            {
                if (null == fFindDevicesTextText)
                {
                    fFindDevicesTextText = new Text("FindDevicesTextText", FindDevicesButtButton);
                    fFindDevicesTextText.UIMap.Scope = UIASeachScope.Children;
                    fFindDevicesTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFindDevicesTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Find Devices");
                }

                return fFindDevicesTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxEdit
        {
            get
            {
                if (null == fTextBoxEdit)
                {
                    fTextBoxEdit = new Edit("TextBoxEdit", DevicesonthenetGroup);
                    fTextBoxEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                }

                return fTextBoxEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup1Pane
        {
            get
            {
                if (null == fScrollViewerPARDup1Pane)
                {
                    fScrollViewerPARDup1Pane = new Pane("ScrollViewerPARDup1Pane", TextBoxEdit);
                    fScrollViewerPARDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup1ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup1ScrollBar)
                {
                    fScrollBarVerticDup1ScrollBar = new ScrollBar("ScrollBarVerticDup1ScrollBar", ScrollViewerPARDup1Pane);
                    fScrollBarVerticDup1ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup1ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup1ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup1ScrollBar)
                {
                    fScrollBarHorizoDup1ScrollBar = new ScrollBar("ScrollBarHorizoDup1ScrollBar", ScrollViewerPARDup1Pane);
                    fScrollBarHorizoDup1ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup1ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxd12567baEdit
        {
            get
            {
                if (null == fTextBoxd12567baEdit)
                {
                    fTextBoxd12567baEdit = new Edit("TextBoxd12567baEdit", DevicesonthenetGroup);
                    fTextBoxd12567baEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxd12567baEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxd12567baEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d12567ba-0a27-4b00-aa7a-89c727b99988");
                }

                return fTextBoxd12567baEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup2Pane
        {
            get
            {
                if (null == fScrollViewerPARDup2Pane)
                {
                    fScrollViewerPARDup2Pane = new Pane("ScrollViewerPARDup2Pane", TextBoxd12567baEdit);
                    fScrollViewerPARDup2Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup2Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup2Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup2Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup2ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup2ScrollBar)
                {
                    fScrollBarVerticDup2ScrollBar = new ScrollBar("ScrollBarVerticDup2ScrollBar", ScrollViewerPARDup2Pane);
                    fScrollBarVerticDup2ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup2ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup2ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup2ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup2ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup2ScrollBar)
                {
                    fScrollBarHorizoDup2ScrollBar = new ScrollBar("ScrollBarHorizoDup2ScrollBar", ScrollViewerPARDup2Pane);
                    fScrollBarHorizoDup2ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup2ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup2ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup2ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group SeatsAvailableGGroup
        {
            get
            {
                if (null == fSeatsAvailableGGroup)
                {
                    fSeatsAvailableGGroup = new Group("SeatsAvailableGGroup", AddDevicesWindow);
                    fSeatsAvailableGGroup.UIMap.Scope = UIASeachScope.Children;
                    fSeatsAvailableGGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fSeatsAvailableGGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Seats Available");
                }

                return fSeatsAvailableGGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SeatsAvailableTText
        {
            get
            {
                if (null == fSeatsAvailableTText)
                {
                    fSeatsAvailableTText = new Text("SeatsAvailableTText", SeatsAvailableGGroup);
                    fSeatsAvailableTText.UIMap.Scope = UIASeachScope.Children;
                    fSeatsAvailableTText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSeatsAvailableTText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Seats Available");
                }

                return fSeatsAvailableTText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBox74c2ecebEdit
        {
            get
            {
                if (null == fTextBox74c2ecebEdit)
                {
                    fTextBox74c2ecebEdit = new Edit("TextBox74c2ecebEdit", SeatsAvailableGGroup);
                    fTextBox74c2ecebEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox74c2ecebEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox74c2ecebEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"74c2eceb-4f6a-41a7-a3dc-4abb725f8a35");
                }

                return fTextBox74c2ecebEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup3Pane
        {
            get
            {
                if (null == fScrollViewerPARDup3Pane)
                {
                    fScrollViewerPARDup3Pane = new Pane("ScrollViewerPARDup3Pane", TextBox74c2ecebEdit);
                    fScrollViewerPARDup3Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup3Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup3Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup3Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup3ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup3ScrollBar)
                {
                    fScrollBarVerticDup3ScrollBar = new ScrollBar("ScrollBarVerticDup3ScrollBar", ScrollViewerPARDup3Pane);
                    fScrollBarVerticDup3ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup3ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup3ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup3ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup3ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup3ScrollBar)
                {
                    fScrollBarHorizoDup3ScrollBar = new ScrollBar("ScrollBarHorizoDup3ScrollBar", ScrollViewerPARDup3Pane);
                    fScrollBarHorizoDup3ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup3ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup3ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup3ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button AddDevice1Button
        {
            get
            {
                if (null == fButton56B48A214Button)
                {
                    fButton56B48A214Button = new Button("AddDevice1Button", AddDevicesWindow);
                    fButton56B48A214Button.UIMap.Scope = UIASeachScope.Children;
                    fButton56B48A214Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButton56B48A214Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"56B48A21-483B-4893-9ADC-2B446BC2D9CF");
                }

                return fButton56B48A214Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup0Image
        {
            get
            {
                if (null == fImageDup0Image)
                {
                    fImageDup0Image = new Image("ImageDup0Image", AddDevice1Button);
                    fImageDup0Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup0Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup0Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button Button57fac0280Button
        {
            get
            {
                if (null == fButton57fac0280Button)
                {
                    fButton57fac0280Button = new Button("Button57fac0280Button", AddDevicesWindow);
                    fButton57fac0280Button.UIMap.Scope = UIASeachScope.Children;
                    fButton57fac0280Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButton57fac0280Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"57fac028-0faa-403e-b6d1-410b7b939b68");
                }

                return fButton57fac0280Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup1Image
        {
            get
            {
                if (null == fImageDup1Image)
                {
                    fImageDup1Image = new Image("ImageDup1Image", Button57fac0280Button);
                    fImageDup1Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup1Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup1Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button Buttonf7932fd78Button
        {
            get
            {
                if (null == fButtonf7932fd78Button)
                {
                    fButtonf7932fd78Button = new Button("Buttonf7932fd78Button", AddDevicesWindow);
                    fButtonf7932fd78Button.UIMap.Scope = UIASeachScope.Children;
                    fButtonf7932fd78Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButtonf7932fd78Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"f7932fd7-86e1-4abf-af3a-90fae5e8211d");
                }

                return fButtonf7932fd78Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup2Image
        {
            get
            {
                if (null == fImageDup2Image)
                {
                    fImageDup2Image = new Image("ImageDup2Image", Buttonf7932fd78Button);
                    fImageDup2Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup2Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup2Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group DeviceListGroupGroup
        {
            get
            {
                if (null == fDeviceListGroupGroup)
                {
                    fDeviceListGroupGroup = new Group("DeviceListGroupGroup", AddDevicesWindow);
                    fDeviceListGroupGroup.UIMap.Scope = UIASeachScope.Children;
                    fDeviceListGroupGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fDeviceListGroupGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device List:");
                }

                return fDeviceListGroupGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DeviceListTextBDup0Text
        {
            get
            {
                if (null == fDeviceListTextBDup0Text)
                {
                    fDeviceListTextBDup0Text = new Text("DeviceListTextBDup0Text", DeviceListGroupGroup);
                    fDeviceListTextBDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fDeviceListTextBDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDeviceListTextBDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device List:");
                }

                return fDeviceListTextBDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public DataGrid ListViewEB70F00DataGrid
        {
            get
            {
                if (null == fListViewEB70F00DataGrid)
                {
                    fListViewEB70F00DataGrid = new DataGrid("ListViewEB70F00DataGrid", DeviceListGroupGroup);
                    fListViewEB70F00DataGrid.UIMap.Scope = UIASeachScope.Children;
                    fListViewEB70F00DataGrid.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListView");
                    fListViewEB70F00DataGrid.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"EB70F007-85D2-4c2f-94E1-FB99FE5005FE");
                }

                return fListViewEB70F00DataGrid;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Header GridViewHeaderRDup1Header
        {
            get
            {
                if (null == fGridViewHeaderRDup1Header)
                {
                    fGridViewHeaderRDup1Header = new Header("GridViewHeaderRDup1Header", ListViewEB70F00DataGrid);
                    fGridViewHeaderRDup1Header.UIMap.Scope = UIASeachScope.Children;
                    fGridViewHeaderRDup1Header.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewHeaderRowPresenter");
                }

                return fGridViewHeaderRDup1Header;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem ModelGridViewCoDup1HeaderItem
        {
            get
            {
                if (null == fModelGridViewCoDup1HeaderItem)
                {
                    fModelGridViewCoDup1HeaderItem = new HeaderItem("ModelGridViewCoDup1HeaderItem", GridViewHeaderRDup1Header);
                    fModelGridViewCoDup1HeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fModelGridViewCoDup1HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fModelGridViewCoDup1HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Model");
                }

                return fModelGridViewCoDup1HeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ModelTextBlockDup1Text
        {
            get
            {
                if (null == fModelTextBlockDup1Text)
                {
                    fModelTextBlockDup1Text = new Text("ModelTextBlockDup1Text", ModelGridViewCoDup1HeaderItem);
                    fModelTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fModelTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fModelTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Model");
                }

                return fModelTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup3Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup3Thumb)
                {
                    fThumbPARTHeadeDup3Thumb = new Thumb("ThumbPARTHeadeDup3Thumb", ModelGridViewCoDup1HeaderItem);
                    fThumbPARTHeadeDup3Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup3Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup3Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup3Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem NetworkIDGridViDup1HeaderItem
        {
            get
            {
                if (null == fNetworkIDGridViDup1HeaderItem)
                {
                    fNetworkIDGridViDup1HeaderItem = new HeaderItem("NetworkIDGridViDup1HeaderItem", GridViewHeaderRDup1Header);
                    fNetworkIDGridViDup1HeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fNetworkIDGridViDup1HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fNetworkIDGridViDup1HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Network ID");
                }

                return fNetworkIDGridViDup1HeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NetworkIDTextBlDup1Text
        {
            get
            {
                if (null == fNetworkIDTextBlDup1Text)
                {
                    fNetworkIDTextBlDup1Text = new Text("NetworkIDTextBlDup1Text", NetworkIDGridViDup1HeaderItem);
                    fNetworkIDTextBlDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fNetworkIDTextBlDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fNetworkIDTextBlDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Network ID");
                }

                return fNetworkIDTextBlDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup4Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup4Thumb)
                {
                    fThumbPARTHeadeDup4Thumb = new Thumb("ThumbPARTHeadeDup4Thumb", NetworkIDGridViDup1HeaderItem);
                    fThumbPARTHeadeDup4Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup4Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup4Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup4Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem DescriptionGridDup1HeaderItem
        {
            get
            {
                if (null == fDescriptionGridDup1HeaderItem)
                {
                    fDescriptionGridDup1HeaderItem = new HeaderItem("DescriptionGridDup1HeaderItem", GridViewHeaderRDup1Header);
                    fDescriptionGridDup1HeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fDescriptionGridDup1HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fDescriptionGridDup1HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Description");
                }

                return fDescriptionGridDup1HeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DescriptionTextDup1Text
        {
            get
            {
                if (null == fDescriptionTextDup1Text)
                {
                    fDescriptionTextDup1Text = new Text("DescriptionTextDup1Text", DescriptionGridDup1HeaderItem);
                    fDescriptionTextDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fDescriptionTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDescriptionTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Description");
                }

                return fDescriptionTextDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup5Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup5Thumb)
                {
                    fThumbPARTHeadeDup5Thumb = new Thumb("ThumbPARTHeadeDup5Thumb", DescriptionGridDup1HeaderItem);
                    fThumbPARTHeadeDup5Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup5Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup5Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup5Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button OKButtonA1ABC07Button
        {
            get
            {
                if (null == fOKButtonA1ABC07Button)
                {
                    fOKButtonA1ABC07Button = new Button("OKButtonA1ABC07Button", AddDevicesWindow);
                    fOKButtonA1ABC07Button.UIMap.Scope = UIASeachScope.Children;
                    fOKButtonA1ABC07Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButtonA1ABC07Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"A1ABC071-3E1A-4016-92EB-8728BD51E1A0");
                    fOKButtonA1ABC07Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButtonA1ABC07Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OKTextBlockDup0Text
        {
            get
            {
                if (null == fOKTextBlockDup0Text)
                {
                    fOKTextBlockDup0Text = new Text("OKTextBlockDup0Text", OKButtonA1ABC07Button);
                    fOKTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fOKTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOKTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButton50BButton
        {
            get
            {
                if (null == fCancelButton50BButton)
                {
                    fCancelButton50BButton = new Button("CancelButton50BButton", AddDevicesWindow);
                    fCancelButton50BButton.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton50BButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButton50BButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"50B1F1E8-CC17-4623-8A3C-62F954BA5BE6");
                    fCancelButton50BButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButton50BButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CancelTextBlockDup0Text
        {
            get
            {
                if (null == fCancelTextBlockDup0Text)
                {
                    fCancelTextBlockDup0Text = new Text("CancelTextBlockDup0Text", CancelButton50BButton);
                    fCancelTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fCancelTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCancelTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button HelpButton7af82Button
        {
            get
            {
                if (null == fHelpButton7af82Button)
                {
                    fHelpButton7af82Button = new Button("HelpButton7af82Button", AddDevicesWindow);
                    fHelpButton7af82Button.UIMap.Scope = UIASeachScope.Children;
                    fHelpButton7af82Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fHelpButton7af82Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7af82ce6-df59-4317-850b-26553dcb2895");
                    fHelpButton7af82Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpButton7af82Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HelpTextBlockDup0Text
        {
            get
            {
                if (null == fHelpTextBlockDup0Text)
                {
                    fHelpTextBlockDup0Text = new Text("HelpTextBlockDup0Text", HelpButton7af82Button);
                    fHelpTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fHelpTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHelpTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar HPDigitalSendinTitleBar
        {
            get
            {
                if (null == fHPDigitalSendinTitleBar)
                {
                    fHPDigitalSendinTitleBar = new TitleBar("HPDigitalSendinTitleBar", HPDigitalSendinWindow);
                    fHPDigitalSendinTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Digital Sending Software Configuration (Server IP Address: 15.75.36.149)");
                }

                return fHPDigitalSendinTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyDup1MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup1MenuBar)
                {
                    fSystemMenuBarSyDup1MenuBar = new MenuBar("SystemMenuBarSyDup1MenuBar", HPDigitalSendinTitleBar);
                    fSystemMenuBarSyDup1MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup1MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyDup1MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyDup1MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1Dup1MenuItem
        {
            get
            {
                if (null == fSystemItem1Dup1MenuItem)
                {
                    fSystemItem1Dup1MenuItem = new MenuItem("SystemItem1Dup1MenuItem", SystemMenuBarSyDup1MenuBar);
                    fSystemItem1Dup1MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1Dup1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1Dup1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1Dup1MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MinimizeMinimizDup1Button
        {
            get
            {
                if (null == fMinimizeMinimizDup1Button)
                {
                    fMinimizeMinimizDup1Button = new Button("MinimizeMinimizDup1Button", HPDigitalSendinTitleBar);
                    fMinimizeMinimizDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                    fMinimizeMinimizDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                }

                return fMinimizeMinimizDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RestoreRestoreButton
        {
            get
            {
                if (null == fRestoreRestoreButton)
                {
                    fRestoreRestoreButton = new Button("RestoreRestoreButton", HPDigitalSendinTitleBar);
                    fRestoreRestoreButton.UIMap.Scope = UIASeachScope.Children;
                    fRestoreRestoreButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Restore");
                    fRestoreRestoreButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Restore");
                }

                return fRestoreRestoreButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseDup1Button
        {
            get
            {
                if (null == fCloseCloseDup1Button)
                {
                    fCloseCloseDup1Button = new Button("CloseCloseDup1Button", HPDigitalSendinTitleBar);
                    fCloseCloseDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button HelpButtonCB8CFButton
        {
            get
            {
                if (null == fHelpButtonCB8CFButton)
                {
                    fHelpButtonCB8CFButton = new Button("HelpButtonCB8CFButton", HPDigitalSendinWindow);
                    fHelpButtonCB8CFButton.UIMap.Scope = UIASeachScope.Children;
                    fHelpButtonCB8CFButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fHelpButtonCB8CFButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"CB8CF0C3-DFBE-49b8-B09B-03A34F5D4186");
                    fHelpButtonCB8CFButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpButtonCB8CFButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HelpTextBlockDup1Text
        {
            get
            {
                if (null == fHelpTextBlockDup1Text)
                {
                    fHelpTextBlockDup1Text = new Text("HelpTextBlockDup1Text", HelpButtonCB8CFButton);
                    fHelpTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fHelpTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHelpTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ApplyButton61E2Button
        {
            get
            {
                if (null == fApplyButton61E2Button)
                {
                    fApplyButton61E2Button = new Button("ApplyButton", HPDigitalSendinWindow);
                    fApplyButton61E2Button.UIMap.Scope = UIASeachScope.Children;
                    fApplyButton61E2Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fApplyButton61E2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"61E2369B-F53B-4662-A361-B3034C4EFF67");
                    fApplyButton61E2Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Apply");
                }

                return fApplyButton61E2Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ApplyTextBlockText
        {
            get
            {
                if (null == fApplyTextBlockText)
                {
                    fApplyTextBlockText = new Text("ApplyTextBlockText", ApplyButton61E2Button);
                    fApplyTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fApplyTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fApplyTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Apply");
                }

                return fApplyTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButton65CButton
        {
            get
            {
                if (null == fCancelButton65CButton)
                {
                    fCancelButton65CButton = new Button("CancelButton65CButton", HPDigitalSendinWindow);
                    fCancelButton65CButton.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton65CButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButton65CButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"65C76204-7AB5-4681-B7FD-2D8F02DA6D4B");
                    fCancelButton65CButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButton65CButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CancelTextBlockDup1Text
        {
            get
            {
                if (null == fCancelTextBlockDup1Text)
                {
                    fCancelTextBlockDup1Text = new Text("CancelTextBlockDup1Text", CancelButton65CButton);
                    fCancelTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fCancelTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCancelTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button OKButtonCC2EF49Button
        {
            get
            {
                if (null == fOKButtonCC2EF49Button)
                {
                    fOKButtonCC2EF49Button = new Button("OKButton", HPDigitalSendinWindow);
                    fOKButtonCC2EF49Button.UIMap.Scope = UIASeachScope.Children;
                    fOKButtonCC2EF49Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButtonCC2EF49Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"CC2EF491-0BD1-4ac5-9D00-AA61A9D6BA0C");
                    fOKButtonCC2EF49Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButtonCC2EF49Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OKTextBlockDup1Text
        {
            get
            {
                if (null == fOKTextBlockDup1Text)
                {
                    fOKTextBlockDup1Text = new Text("OKTextBlockDup1Text", OKButtonCC2EF49Button);
                    fOKTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fOKTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOKTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Tab TabControlec0fdTab
        {
            get
            {
                if (null == fTabControlec0fdTab)
                {
                    fTabControlec0fdTab = new Tab("TabControlec0fdTab", HPDigitalSendinWindow);
                    fTabControlec0fdTab.UIMap.Scope = UIASeachScope.Children;
                    fTabControlec0fdTab.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabControl");
                    fTabControlec0fdTab.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ec0fd6cd-2ab8-482f-96a5-d1fa158f38d1");
                }

                return fTabControlec0fdTab;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup0TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup0TabItem)
                {
                    fSystemWindowsCoDup0TabItem = new TabItem("SystemWindowsCoDup0TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup0TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup0TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup0TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1e2be878-0c03-4404-988c-54d0df925f0f");
                    fSystemWindowsCoDup0TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup0TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GeneralTextmGenText
        {
            get
            {
                if (null == fGeneralTextmGenText)
                {
                    fGeneralTextmGenText = new Text("GeneralTextmGenText", SystemWindowsCoDup0TabItem);
                    fGeneralTextmGenText.UIMap.Scope = UIASeachScope.Children;
                    fGeneralTextmGenText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fGeneralTextmGenText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mGeneralTabLabel");
                    fGeneralTextmGenText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"General");
                }

                return fGeneralTextmGenText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GeneralTextBlocText
        {
            get
            {
                if (null == fGeneralTextBlocText)
                {
                    fGeneralTextBlocText = new Text("GeneralTextBlocText", GeneralTextmGenText);
                    fGeneralTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fGeneralTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fGeneralTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"General");
                }

                return fGeneralTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text933345b04e3Text
        {
            get
            {
                if (null == fText933345b04e3Text)
                {
                    fText933345b04e3Text = new Text("Text933345b04e3Text", SystemWindowsCoDup0TabItem);
                    fText933345b04e3Text.UIMap.Scope = UIASeachScope.Children;
                    fText933345b04e3Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText933345b04e3Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"933345b0-4e39-44d3-a511-0077f3176ca4");
                    fText933345b04e3Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText933345b04e3Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text786caf67344Text
        {
            get
            {
                if (null == fText786caf67344Text)
                {
                    fText786caf67344Text = new Text("Text786caf67344Text", SystemWindowsCoDup0TabItem);
                    fText786caf67344Text.UIMap.Scope = UIASeachScope.Children;
                    fText786caf67344Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText786caf67344Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"786caf67-344f-4ddc-83a5-b9431fb36731");
                    fText786caf67344Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText786caf67344Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup1TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup1TabItem)
                {
                    fSystemWindowsCoDup1TabItem = new TabItem("SystemWindowsCoDup1TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup1TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup1TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup1TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4e90d18a-f33c-43c0-8505-08f4a17169b5");
                    fSystemWindowsCoDup1TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup1TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AuthenticationTDup0Text
        {
            get
            {
                if (null == fAuthenticationTDup0Text)
                {
                    fAuthenticationTDup0Text = new Text("AuthenticationTDup0Text", SystemWindowsCoDup1TabItem);
                    fAuthenticationTDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fAuthenticationTDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fAuthenticationTDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mAuthTabLabel");
                    fAuthenticationTDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Authentication");
                }

                return fAuthenticationTDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AuthenticationTDup1Text
        {
            get
            {
                if (null == fAuthenticationTDup1Text)
                {
                    fAuthenticationTDup1Text = new Text("AuthenticationTDup1Text", AuthenticationTDup0Text);
                    fAuthenticationTDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fAuthenticationTDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAuthenticationTDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Authentication");
                }

                return fAuthenticationTDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text31EC91730B9Text
        {
            get
            {
                if (null == fText31EC91730B9Text)
                {
                    fText31EC91730B9Text = new Text("Text31EC91730B9Text", SystemWindowsCoDup1TabItem);
                    fText31EC91730B9Text.UIMap.Scope = UIASeachScope.Children;
                    fText31EC91730B9Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText31EC91730B9Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"31EC9173-0B98-4d46-BC99-7DF8EA2BE02F");
                    fText31EC91730B9Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText31EC91730B9Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextA479C271445Text
        {
            get
            {
                if (null == fTextA479C271445Text)
                {
                    fTextA479C271445Text = new Text("TextA479C271445Text", SystemWindowsCoDup1TabItem);
                    fTextA479C271445Text.UIMap.Scope = UIASeachScope.Children;
                    fTextA479C271445Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fTextA479C271445Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"A479C271-445D-43f1-864D-7503428703E4");
                    fTextA479C271445Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fTextA479C271445Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup2TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup2TabItem)
                {
                    fSystemWindowsCoDup2TabItem = new TabItem("EmailTabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup2TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup2TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup2TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"33A07ED3-E1EE-411e-B583-7D0A3374100F");
                    fSystemWindowsCoDup2TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup2TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EmailTextmEmailText
        {
            get
            {
                if (null == fEmailTextmEmailText)
                {
                    fEmailTextmEmailText = new Text("EmailTextmEmailText", SystemWindowsCoDup2TabItem);
                    fEmailTextmEmailText.UIMap.Scope = UIASeachScope.Children;
                    fEmailTextmEmailText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fEmailTextmEmailText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mEmailTabLabel");
                    fEmailTextmEmailText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"E-mail");
                }

                return fEmailTextmEmailText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EmailTextBlockText
        {
            get
            {
                if (null == fEmailTextBlockText)
                {
                    fEmailTextBlockText = new Text("EmailTextBlockText", EmailTextmEmailText);
                    fEmailTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fEmailTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEmailTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"E-mail");
                }

                return fEmailTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text32de714a8bdText
        {
            get
            {
                if (null == fText32de714a8bdText)
                {
                    fText32de714a8bdText = new Text("Text32de714a8bdText", SystemWindowsCoDup2TabItem);
                    fText32de714a8bdText.UIMap.Scope = UIASeachScope.Children;
                    fText32de714a8bdText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText32de714a8bdText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"32de714a-8bda-4f11-bf20-b9a56b5f18bc");
                    fText32de714a8bdText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText32de714a8bdText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text3b2a8761f4fText
        {
            get
            {
                if (null == fText3b2a8761f4fText)
                {
                    fText3b2a8761f4fText = new Text("Text3b2a8761f4fText", SystemWindowsCoDup2TabItem);
                    fText3b2a8761f4fText.UIMap.Scope = UIASeachScope.Children;
                    fText3b2a8761f4fText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText3b2a8761f4fText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3b2a8761-f4f6-41b1-b08c-9c33744bdc43");
                    fText3b2a8761f4fText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText3b2a8761f4fText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextBlockText
        {
            get
            {
                if (null == fTextBlockText)
                {
                    fTextBlockText = new Text("TextBlockText", Text3b2a8761f4fText);
                    fTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup3TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup3TabItem)
                {
                    fSystemWindowsCoDup3TabItem = new TabItem("SystemWindowsCoDup3TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup3TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup3TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup3TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4f116988-2b22-473f-bca3-094589a44954");
                    fSystemWindowsCoDup3TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup3TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxTextmFaxTabLText
        {
            get
            {
                if (null == fFaxTextmFaxTabLText)
                {
                    fFaxTextmFaxTabLText = new Text("FaxTextmFaxTabLText", SystemWindowsCoDup3TabItem);
                    fFaxTextmFaxTabLText.UIMap.Scope = UIASeachScope.Children;
                    fFaxTextmFaxTabLText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fFaxTextmFaxTabLText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mFaxTabLabel");
                    fFaxTextmFaxTabLText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax");
                }

                return fFaxTextmFaxTabLText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxTextBlockText
        {
            get
            {
                if (null == fFaxTextBlockText)
                {
                    fFaxTextBlockText = new Text("FaxTextBlockText", FaxTextmFaxTabLText);
                    fFaxTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fFaxTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax");
                }

                return fFaxTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextD1ED4F16F38Text
        {
            get
            {
                if (null == fTextD1ED4F16F38Text)
                {
                    fTextD1ED4F16F38Text = new Text("TextD1ED4F16F38Text", SystemWindowsCoDup3TabItem);
                    fTextD1ED4F16F38Text.UIMap.Scope = UIASeachScope.Children;
                    fTextD1ED4F16F38Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fTextD1ED4F16F38Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"D1ED4F16-F389-4dfd-A884-D258EDB48C11");
                    fTextD1ED4F16F38Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fTextD1ED4F16F38Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text7DDE04FD251Text
        {
            get
            {
                if (null == fText7DDE04FD251Text)
                {
                    fText7DDE04FD251Text = new Text("Text7DDE04FD251Text", SystemWindowsCoDup3TabItem);
                    fText7DDE04FD251Text.UIMap.Scope = UIASeachScope.Children;
                    fText7DDE04FD251Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText7DDE04FD251Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7DDE04FD-2519-44c2-A212-67B0838E1C91");
                    fText7DDE04FD251Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText7DDE04FD251Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup4TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup4TabItem)
                {
                    fSystemWindowsCoDup4TabItem = new TabItem("SystemWindowsCoDup4TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup4TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup4TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup4TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ff96a045-6e12-4ce3-ba85-b65d16c39ffb");
                    fSystemWindowsCoDup4TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup4TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SendtoFolderTexDup0Text
        {
            get
            {
                if (null == fSendtoFolderTexDup0Text)
                {
                    fSendtoFolderTexDup0Text = new Text("SendtoFolderTexDup0Text", SystemWindowsCoDup4TabItem);
                    fSendtoFolderTexDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fSendtoFolderTexDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fSendtoFolderTexDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mFolderTabLabel");
                    fSendtoFolderTexDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send to Folder");
                }

                return fSendtoFolderTexDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SendtoFolderTexDup1Text
        {
            get
            {
                if (null == fSendtoFolderTexDup1Text)
                {
                    fSendtoFolderTexDup1Text = new Text("SendtoFolderTexDup1Text", SendtoFolderTexDup0Text);
                    fSendtoFolderTexDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fSendtoFolderTexDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSendtoFolderTexDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send to Folder");
                }

                return fSendtoFolderTexDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text7a57f43ecb1Text
        {
            get
            {
                if (null == fText7a57f43ecb1Text)
                {
                    fText7a57f43ecb1Text = new Text("Text7a57f43ecb1Text", SystemWindowsCoDup4TabItem);
                    fText7a57f43ecb1Text.UIMap.Scope = UIASeachScope.Children;
                    fText7a57f43ecb1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText7a57f43ecb1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7a57f43e-cb18-48d3-ac92-9dad7b3dc47e");
                    fText7a57f43ecb1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText7a57f43ecb1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text654b650dd19Text
        {
            get
            {
                if (null == fText654b650dd19Text)
                {
                    fText654b650dd19Text = new Text("Text654b650dd19Text", SystemWindowsCoDup4TabItem);
                    fText654b650dd19Text.UIMap.Scope = UIASeachScope.Children;
                    fText654b650dd19Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText654b650dd19Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"654b650d-d19f-413b-aaea-ed4ce008fdd5");
                    fText654b650dd19Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText654b650dd19Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup5TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup5TabItem)
                {
                    fSystemWindowsCoDup5TabItem = new TabItem("WorkflowsTabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup5TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup5TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup5TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"38feb495-2893-4d8b-8961-31ebc2a3bd56");
                    fSystemWindowsCoDup5TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup5TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text WorkflowsTextmWText
        {
            get
            {
                if (null == fWorkflowsTextmWText)
                {
                    fWorkflowsTextmWText = new Text("WorkflowsTextmWText", SystemWindowsCoDup5TabItem);
                    fWorkflowsTextmWText.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowsTextmWText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fWorkflowsTextmWText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mWorkflowsTabLabel");
                    fWorkflowsTextmWText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflows");
                }

                return fWorkflowsTextmWText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text WorkflowsTextBlText
        {
            get
            {
                if (null == fWorkflowsTextBlText)
                {
                    fWorkflowsTextBlText = new Text("WorkflowsTextBlText", WorkflowsTextmWText);
                    fWorkflowsTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowsTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fWorkflowsTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflows");
                }

                return fWorkflowsTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text22D9C34E84CText
        {
            get
            {
                if (null == fText22D9C34E84CText)
                {
                    fText22D9C34E84CText = new Text("Text22D9C34E84CText", SystemWindowsCoDup5TabItem);
                    fText22D9C34E84CText.UIMap.Scope = UIASeachScope.Children;
                    fText22D9C34E84CText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText22D9C34E84CText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"22D9C34E-84C8-4995-AC9E-5B46F8284284");
                    fText22D9C34E84CText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText22D9C34E84CText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextC8D15BD39C8Text
        {
            get
            {
                if (null == fTextC8D15BD39C8Text)
                {
                    fTextC8D15BD39C8Text = new Text("TextC8D15BD39C8Text", SystemWindowsCoDup5TabItem);
                    fTextC8D15BD39C8Text.UIMap.Scope = UIASeachScope.Children;
                    fTextC8D15BD39C8Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fTextC8D15BD39C8Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"C8D15BD3-9C8D-484c-A5E2-309CA8AA6C56");
                    fTextC8D15BD39C8Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fTextC8D15BD39C8Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup6TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup6TabItem)
                {
                    fSystemWindowsCoDup6TabItem = new TabItem("SystemWindowsCoDup6TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup6TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup6TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup6TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"b8c06323-208e-4239-a523-a025661e0eab");
                    fSystemWindowsCoDup6TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup6TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddressingTextmText
        {
            get
            {
                if (null == fAddressingTextmText)
                {
                    fAddressingTextmText = new Text("AddressingTextmText", SystemWindowsCoDup6TabItem);
                    fAddressingTextmText.UIMap.Scope = UIASeachScope.Children;
                    fAddressingTextmText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fAddressingTextmText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mAddressingTabLabel");
                    fAddressingTextmText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Addressing");
                }

                return fAddressingTextmText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddressingTextBText
        {
            get
            {
                if (null == fAddressingTextBText)
                {
                    fAddressingTextBText = new Text("AddressingTextBText", AddressingTextmText);
                    fAddressingTextBText.UIMap.Scope = UIASeachScope.Children;
                    fAddressingTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddressingTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Addressing");
                }

                return fAddressingTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text47EB5CBA4D1Text
        {
            get
            {
                if (null == fText47EB5CBA4D1Text)
                {
                    fText47EB5CBA4D1Text = new Text("Text47EB5CBA4D1Text", SystemWindowsCoDup6TabItem);
                    fText47EB5CBA4D1Text.UIMap.Scope = UIASeachScope.Children;
                    fText47EB5CBA4D1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText47EB5CBA4D1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"47EB5CBA-4D1C-4eee-AD64-E26BDA31A3AC");
                    fText47EB5CBA4D1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText47EB5CBA4D1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text0757E148179Text
        {
            get
            {
                if (null == fText0757E148179Text)
                {
                    fText0757E148179Text = new Text("Text0757E148179Text", SystemWindowsCoDup6TabItem);
                    fText0757E148179Text.UIMap.Scope = UIASeachScope.Children;
                    fText0757E148179Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText0757E148179Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"0757E148-1794-4a5d-B378-6BE8049F65E1");
                    fText0757E148179Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText0757E148179Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem DeviceConfiguraTabItem
        {
            get
            {
                if (null == fDeviceConfiguraTabItem)
                {
                    fDeviceConfiguraTabItem = new TabItem("DeviceConfiguraTabItem", TabControlec0fdTab);
                    fDeviceConfiguraTabItem.UIMap.Scope = UIASeachScope.Children;
                    fDeviceConfiguraTabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fDeviceConfiguraTabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6DF1E016-517F-40e4-A63E-CD48D560192F");
                    fDeviceConfiguraTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device Configuration");
                }

                return fDeviceConfiguraTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DeviceConfiguraText
        {
            get
            {
                if (null == fDeviceConfiguraText)
                {
                    fDeviceConfiguraText = new Text("DeviceConfiguraText", DeviceConfiguraTabItem);
                    fDeviceConfiguraText.UIMap.Scope = UIASeachScope.Children;
                    fDeviceConfiguraText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDeviceConfiguraText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device Configuration");
                }

                return fDeviceConfiguraText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Custom ServiceConfigurCustom
        {
            get
            {
                if (null == fServiceConfigurCustom)
                {
                    fServiceConfigurCustom = new Custom("ServiceConfigurCustom", DeviceConfiguraTabItem);
                    fServiceConfigurCustom.UIMap.Scope = UIASeachScope.Children;
                    fServiceConfigurCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ServiceConfigurationDeviceConfigTab");
                    fServiceConfigurCustom.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mServiceDeviceTab");
                }

                return fServiceConfigurCustom;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GroupListText
        {
            get
            {
                if (null == fGroupListText)
                {
                    fGroupListText = new Text("GroupListText", ServiceConfigurCustom);
                    fGroupListText.UIMap.Scope = UIASeachScope.Children;
                    fGroupListText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fGroupListText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Group List");
                }

                return fGroupListText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GroupListTextBlText
        {
            get
            {
                if (null == fGroupListTextBlText)
                {
                    fGroupListTextBlText = new Text("GroupListTextBlText", GroupListText);
                    fGroupListTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fGroupListTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fGroupListTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Group List");
                }

                return fGroupListTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DeviceGroupsText
        {
            get
            {
                if (null == fDeviceGroupsText)
                {
                    fDeviceGroupsText = new Text("DeviceGroupsText", ServiceConfigurCustom);
                    fDeviceGroupsText.UIMap.Scope = UIASeachScope.Children;
                    fDeviceGroupsText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fDeviceGroupsText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device Groups");
                }

                return fDeviceGroupsText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DeviceGroupsTexText
        {
            get
            {
                if (null == fDeviceGroupsTexText)
                {
                    fDeviceGroupsTexText = new Text("DeviceGroupsTexText", DeviceGroupsText);
                    fDeviceGroupsTexText.UIMap.Scope = UIASeachScope.Children;
                    fDeviceGroupsTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDeviceGroupsTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device Groups");
                }

                return fDeviceGroupsTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Tree TreeView1416BDETree
        {
            get
            {
                if (null == fTreeView1416BDETree)
                {
                    fTreeView1416BDETree = new Tree("TreeView1416BDETree", ServiceConfigurCustom);
                    fTreeView1416BDETree.UIMap.Scope = UIASeachScope.Children;
                    fTreeView1416BDETree.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TreeView");
                    fTreeView1416BDETree.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1416BDED-715B-43e3-AAE3-D7E3FE37F0F0");
                }

                return fTreeView1416BDETree;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TreeItem AllDevicesTreeVTreeItem
        {
            get
            {
                if (null == fAllDevicesTreeVTreeItem)
                {
                    fAllDevicesTreeVTreeItem = new TreeItem("AllDevicesTreeVTreeItem", TreeView1416BDETree);
                    fAllDevicesTreeVTreeItem.UIMap.Scope = UIASeachScope.Children;
                    fAllDevicesTreeVTreeItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TreeViewItem");
                    fAllDevicesTreeVTreeItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"All Devices");
                }

                return fAllDevicesTreeVTreeItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ButtonExpanderButton
        {
            get
            {
                if (null == fButtonExpanderButton)
                {
                    fButtonExpanderButton = new Button("ButtonExpanderButton", AllDevicesTreeVTreeItem);
                    fButtonExpanderButton.UIMap.Scope = UIASeachScope.Children;
                    fButtonExpanderButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButtonExpanderButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Expander");
                }

                return fButtonExpanderButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AllDevicesTextBText
        {
            get
            {
                if (null == fAllDevicesTextBText)
                {
                    fAllDevicesTextBText = new Text("AllDevicesTextBText", AllDevicesTreeVTreeItem);
                    fAllDevicesTextBText.UIMap.Scope = UIASeachScope.Children;
                    fAllDevicesTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAllDevicesTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"All Devices");
                }

                return fAllDevicesTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button AddGroupButtonFButton
        {
            get
            {
                if (null == fAddGroupButtonFButton)
                {
                    fAddGroupButtonFButton = new Button("AddGroupButtonFButton", ServiceConfigurCustom);
                    fAddGroupButtonFButton.UIMap.Scope = UIASeachScope.Children;
                    fAddGroupButtonFButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fAddGroupButtonFButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"FF3CA114-616C-4372-9E90-DEBFDDC95553");
                    fAddGroupButtonFButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Group...");
                }

                return fAddGroupButtonFButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddGroupTextBloText
        {
            get
            {
                if (null == fAddGroupTextBloText)
                {
                    fAddGroupTextBloText = new Text("AddGroupTextBloText", AddGroupButtonFButton);
                    fAddGroupTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fAddGroupTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddGroupTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Group...");
                }

                return fAddGroupTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RemoveGroupButtButton
        {
            get
            {
                if (null == fRemoveGroupButtButton)
                {
                    fRemoveGroupButtButton = new Button("RemoveGroupButtButton", ServiceConfigurCustom);
                    fRemoveGroupButtButton.UIMap.Scope = UIASeachScope.Children;
                    fRemoveGroupButtButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fRemoveGroupButtButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"254907B3-979B-4706-8099-4EB37924DFB2");
                    fRemoveGroupButtButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Remove Group...");
                }

                return fRemoveGroupButtButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RemoveGroupTextText
        {
            get
            {
                if (null == fRemoveGroupTextText)
                {
                    fRemoveGroupTextText = new Text("RemoveGroupTextText", RemoveGroupButtButton);
                    fRemoveGroupTextText.UIMap.Scope = UIASeachScope.Children;
                    fRemoveGroupTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRemoveGroupTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Remove Group...");
                }

                return fRemoveGroupTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RenameButton261Button
        {
            get
            {
                if (null == fRenameButton261Button)
                {
                    fRenameButton261Button = new Button("RenameButton261Button", ServiceConfigurCustom);
                    fRenameButton261Button.UIMap.Scope = UIASeachScope.Children;
                    fRenameButton261Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fRenameButton261Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2619DFAD-0185-42fb-A689-994ED4ACC316");
                    fRenameButton261Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Rename");
                }

                return fRenameButton261Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RenameTextBlockText
        {
            get
            {
                if (null == fRenameTextBlockText)
                {
                    fRenameTextBlockText = new Text("RenameTextBlockText", RenameButton261Button);
                    fRenameTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fRenameTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRenameTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Rename");
                }

                return fRenameTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb GridSplitterThumb
        {
            get
            {
                if (null == fGridSplitterThumb)
                {
                    fGridSplitterThumb = new Thumb("GridSplitterThumb", ServiceConfigurCustom);
                    fGridSplitterThumb.UIMap.Scope = UIASeachScope.Children;
                    fGridSplitterThumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridSplitter");
                }

                return fGridSplitterThumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DeviceListText
        {
            get
            {
                if (null == fDeviceListText)
                {
                    fDeviceListText = new Text("DeviceListText", ServiceConfigurCustom);
                    fDeviceListText.UIMap.Scope = UIASeachScope.Children;
                    fDeviceListText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fDeviceListText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device List");
                }

                return fDeviceListText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DeviceListTextBDup1Text
        {
            get
            {
                if (null == fDeviceListTextBDup1Text)
                {
                    fDeviceListTextBDup1Text = new Text("DeviceListTextBDup1Text", DeviceListText);
                    fDeviceListTextBDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fDeviceListTextBDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDeviceListTextBDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device List");
                }

                return fDeviceListTextBDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public DataGrid ListView141cb8bDataGrid
        {
            get
            {
                if (null == fListView141cb8bDataGrid)
                {
                    fListView141cb8bDataGrid = new DataGrid("ListView141cb8bDataGrid", ServiceConfigurCustom);
                    fListView141cb8bDataGrid.UIMap.Scope = UIASeachScope.Children;
                    fListView141cb8bDataGrid.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListView");
                    fListView141cb8bDataGrid.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"141cb8be-89c3-4b41-80ca-be09bdf636f2");
                }

                return fListView141cb8bDataGrid;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Header GridViewHeaderRDup2Header
        {
            get
            {
                if (null == fGridViewHeaderRDup2Header)
                {
                    fGridViewHeaderRDup2Header = new Header("GridViewHeaderRDup2Header", ListView141cb8bDataGrid);
                    fGridViewHeaderRDup2Header.UIMap.Scope = UIASeachScope.Children;
                    fGridViewHeaderRDup2Header.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewHeaderRowPresenter");
                }

                return fGridViewHeaderRDup2Header;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem StatusGridViewCHeaderItem
        {
            get
            {
                if (null == fStatusGridViewCHeaderItem)
                {
                    fStatusGridViewCHeaderItem = new HeaderItem("StatusGridViewCHeaderItem", GridViewHeaderRDup2Header);
                    fStatusGridViewCHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fStatusGridViewCHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fStatusGridViewCHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"84BDE37C-126B-473a-923B-180DBBB478C6");
                    fStatusGridViewCHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Status");
                }

                return fStatusGridViewCHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text StatusTextBlockText
        {
            get
            {
                if (null == fStatusTextBlockText)
                {
                    fStatusTextBlockText = new Text("StatusTextBlockText", StatusGridViewCHeaderItem);
                    fStatusTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fStatusTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fStatusTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Status");
                }

                return fStatusTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup6Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup6Thumb)
                {
                    fThumbPARTHeadeDup6Thumb = new Thumb("ThumbPARTHeadeDup6Thumb", StatusGridViewCHeaderItem);
                    fThumbPARTHeadeDup6Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup6Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup6Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup6Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem NameGridViewColHeaderItem
        {
            get
            {
                if (null == fNameGridViewColHeaderItem)
                {
                    fNameGridViewColHeaderItem = new HeaderItem("NameGridViewColHeaderItem", GridViewHeaderRDup2Header);
                    fNameGridViewColHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fNameGridViewColHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fNameGridViewColHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"507D57C0-BC09-4a0a-8D17-F2A9117ADCE5");
                    fNameGridViewColHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Name");
                }

                return fNameGridViewColHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NameTextBlockText
        {
            get
            {
                if (null == fNameTextBlockText)
                {
                    fNameTextBlockText = new Text("NameTextBlockText", NameGridViewColHeaderItem);
                    fNameTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fNameTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fNameTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Name");
                }

                return fNameTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup7Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup7Thumb)
                {
                    fThumbPARTHeadeDup7Thumb = new Thumb("ThumbPARTHeadeDup7Thumb", NameGridViewColHeaderItem);
                    fThumbPARTHeadeDup7Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup7Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup7Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup7Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem GridViewColumnHDup0HeaderItem
        {
            get
            {
                if (null == fGridViewColumnHDup0HeaderItem)
                {
                    fGridViewColumnHDup0HeaderItem = new HeaderItem("GridViewColumnHDup0HeaderItem", GridViewHeaderRDup2Header);
                    fGridViewColumnHDup0HeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fGridViewColumnHDup0HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fGridViewColumnHDup0HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"458F7960-4394-4579-919F-D58D5043C703");
                }

                return fGridViewColumnHDup0HeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup3Image
        {
            get
            {
                if (null == fImageDup3Image)
                {
                    fImageDup3Image = new Image("ImageDup3Image", GridViewColumnHDup0HeaderItem);
                    fImageDup3Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup3Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup3Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup8Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup8Thumb)
                {
                    fThumbPARTHeadeDup8Thumb = new Thumb("ThumbPARTHeadeDup8Thumb", GridViewColumnHDup0HeaderItem);
                    fThumbPARTHeadeDup8Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup8Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup8Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup8Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem GridViewColumnHDup1HeaderItem
        {
            get
            {
                if (null == fGridViewColumnHDup1HeaderItem)
                {
                    fGridViewColumnHDup1HeaderItem = new HeaderItem("GridViewColumnHDup1HeaderItem", GridViewHeaderRDup2Header);
                    fGridViewColumnHDup1HeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fGridViewColumnHDup1HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fGridViewColumnHDup1HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"CD97A6CC-D4F4-4ddb-A3BB-7FF26B2222FF");
                }

                return fGridViewColumnHDup1HeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup4Image
        {
            get
            {
                if (null == fImageDup4Image)
                {
                    fImageDup4Image = new Image("ImageDup4Image", GridViewColumnHDup1HeaderItem);
                    fImageDup4Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup4Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup4Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup9Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup9Thumb)
                {
                    fThumbPARTHeadeDup9Thumb = new Thumb("ThumbPARTHeadeDup9Thumb", GridViewColumnHDup1HeaderItem);
                    fThumbPARTHeadeDup9Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup9Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup9Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup9Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem GridViewColumnHDup2HeaderItem
        {
            get
            {
                if (null == fGridViewColumnHDup2HeaderItem)
                {
                    fGridViewColumnHDup2HeaderItem = new HeaderItem("GridViewColumnHDup2HeaderItem", GridViewHeaderRDup2Header);
                    fGridViewColumnHDup2HeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fGridViewColumnHDup2HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fGridViewColumnHDup2HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"008BEEE0-3AE1-47be-BD91-66E124BE04A5");
                }

                return fGridViewColumnHDup2HeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup5Image
        {
            get
            {
                if (null == fImageDup5Image)
                {
                    fImageDup5Image = new Image("ImageDup5Image", GridViewColumnHDup2HeaderItem);
                    fImageDup5Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup5Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup5Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup10Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup10Thumb)
                {
                    fThumbPARTHeadeDup10Thumb = new Thumb("ThumbPARTHeadeDup10Thumb", GridViewColumnHDup2HeaderItem);
                    fThumbPARTHeadeDup10Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup10Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup10Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup10Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem GridViewColumnHDup3HeaderItem
        {
            get
            {
                if (null == fGridViewColumnHDup3HeaderItem)
                {
                    fGridViewColumnHDup3HeaderItem = new HeaderItem("GridViewColumnHDup3HeaderItem", GridViewHeaderRDup2Header);
                    fGridViewColumnHDup3HeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fGridViewColumnHDup3HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fGridViewColumnHDup3HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4DC0435C-FF08-4325-A9AC-115D1891ABA6");
                }

                return fGridViewColumnHDup3HeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup6Image
        {
            get
            {
                if (null == fImageDup6Image)
                {
                    fImageDup6Image = new Image("ImageDup6Image", GridViewColumnHDup3HeaderItem);
                    fImageDup6Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup6Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup6Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup11Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup11Thumb)
                {
                    fThumbPARTHeadeDup11Thumb = new Thumb("ThumbPARTHeadeDup11Thumb", GridViewColumnHDup3HeaderItem);
                    fThumbPARTHeadeDup11Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup11Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup11Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup11Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem GridViewColumnHDup4HeaderItem
        {
            get
            {
                if (null == fGridViewColumnHDup4HeaderItem)
                {
                    fGridViewColumnHDup4HeaderItem = new HeaderItem("GridViewColumnHDup4HeaderItem", GridViewHeaderRDup2Header);
                    fGridViewColumnHDup4HeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fGridViewColumnHDup4HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fGridViewColumnHDup4HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"BE6ECE9F-4708-4266-8106-AE6D598B0396");
                }

                return fGridViewColumnHDup4HeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup7Image
        {
            get
            {
                if (null == fImageDup7Image)
                {
                    fImageDup7Image = new Image("ImageDup7Image", GridViewColumnHDup4HeaderItem);
                    fImageDup7Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup7Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup7Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup12Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup12Thumb)
                {
                    fThumbPARTHeadeDup12Thumb = new Thumb("ThumbPARTHeadeDup12Thumb", GridViewColumnHDup4HeaderItem);
                    fThumbPARTHeadeDup12Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup12Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup12Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup12Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem GridViewColumnHDup5HeaderItem
        {
            get
            {
                if (null == fGridViewColumnHDup5HeaderItem)
                {
                    fGridViewColumnHDup5HeaderItem = new HeaderItem("GridViewColumnHDup5HeaderItem", GridViewHeaderRDup2Header);
                    fGridViewColumnHDup5HeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fGridViewColumnHDup5HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fGridViewColumnHDup5HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5C264E70-DAEF-44F3-9DE9-9824BC0B9ECF");
                }

                return fGridViewColumnHDup5HeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup8Image
        {
            get
            {
                if (null == fImageDup8Image)
                {
                    fImageDup8Image = new Image("ImageDup8Image", GridViewColumnHDup5HeaderItem);
                    fImageDup8Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup8Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup8Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup13Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup13Thumb)
                {
                    fThumbPARTHeadeDup13Thumb = new Thumb("ThumbPARTHeadeDup13Thumb", GridViewColumnHDup5HeaderItem);
                    fThumbPARTHeadeDup13Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup13Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup13Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup13Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem ModelGridViewCoDup2HeaderItem
        {
            get
            {
                if (null == fModelGridViewCoDup2HeaderItem)
                {
                    fModelGridViewCoDup2HeaderItem = new HeaderItem("ModelGridViewCoDup2HeaderItem", GridViewHeaderRDup2Header);
                    fModelGridViewCoDup2HeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fModelGridViewCoDup2HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fModelGridViewCoDup2HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"805FD78E-D6A4-4559-939B-ECDD285AE6D7");
                    fModelGridViewCoDup2HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Model");
                }

                return fModelGridViewCoDup2HeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ModelTextBlockDup2Text
        {
            get
            {
                if (null == fModelTextBlockDup2Text)
                {
                    fModelTextBlockDup2Text = new Text("ModelTextBlockDup2Text", ModelGridViewCoDup2HeaderItem);
                    fModelTextBlockDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fModelTextBlockDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fModelTextBlockDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Model");
                }

                return fModelTextBlockDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup14Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup14Thumb)
                {
                    fThumbPARTHeadeDup14Thumb = new Thumb("ThumbPARTHeadeDup14Thumb", ModelGridViewCoDup2HeaderItem);
                    fThumbPARTHeadeDup14Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup14Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup14Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup14Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem IPAddressGridViHeaderItem
        {
            get
            {
                if (null == fIPAddressGridViHeaderItem)
                {
                    fIPAddressGridViHeaderItem = new HeaderItem("IPAddressGridViHeaderItem", GridViewHeaderRDup2Header);
                    fIPAddressGridViHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fIPAddressGridViHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fIPAddressGridViHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"70E1D5F4-0DA5-4e87-A451-28399734B74C");
                    fIPAddressGridViHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"IP Address");
                }

                return fIPAddressGridViHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text IPAddressTextBlText
        {
            get
            {
                if (null == fIPAddressTextBlText)
                {
                    fIPAddressTextBlText = new Text("IPAddressTextBlText", IPAddressGridViHeaderItem);
                    fIPAddressTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fIPAddressTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fIPAddressTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"IP Address");
                }

                return fIPAddressTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup15Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup15Thumb)
                {
                    fThumbPARTHeadeDup15Thumb = new Thumb("ThumbPARTHeadeDup15Thumb", IPAddressGridViHeaderItem);
                    fThumbPARTHeadeDup15Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup15Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup15Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup15Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem HostnameGridVieHeaderItem
        {
            get
            {
                if (null == fHostnameGridVieHeaderItem)
                {
                    fHostnameGridVieHeaderItem = new HeaderItem("HostnameGridVieHeaderItem", GridViewHeaderRDup2Header);
                    fHostnameGridVieHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fHostnameGridVieHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fHostnameGridVieHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"82BE5D16-D370-4519-8FC4-0F517E12AFDF");
                    fHostnameGridVieHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Hostname");
                }

                return fHostnameGridVieHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HostnameTextBloText
        {
            get
            {
                if (null == fHostnameTextBloText)
                {
                    fHostnameTextBloText = new Text("HostnameTextBloText", HostnameGridVieHeaderItem);
                    fHostnameTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fHostnameTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHostnameTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Hostname");
                }

                return fHostnameTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup16Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup16Thumb)
                {
                    fThumbPARTHeadeDup16Thumb = new Thumb("ThumbPARTHeadeDup16Thumb", HostnameGridVieHeaderItem);
                    fThumbPARTHeadeDup16Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup16Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup16Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup16Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem DescriptionGridDup2HeaderItem
        {
            get
            {
                if (null == fDescriptionGridDup2HeaderItem)
                {
                    fDescriptionGridDup2HeaderItem = new HeaderItem("DescriptionGridDup2HeaderItem", GridViewHeaderRDup2Header);
                    fDescriptionGridDup2HeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fDescriptionGridDup2HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fDescriptionGridDup2HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"26A46CB8-53AC-446f-8012-A92323091104");
                    fDescriptionGridDup2HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Description");
                }

                return fDescriptionGridDup2HeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DescriptionTextDup2Text
        {
            get
            {
                if (null == fDescriptionTextDup2Text)
                {
                    fDescriptionTextDup2Text = new Text("DescriptionTextDup2Text", DescriptionGridDup2HeaderItem);
                    fDescriptionTextDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fDescriptionTextDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDescriptionTextDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Description");
                }

                return fDescriptionTextDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup17Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup17Thumb)
                {
                    fThumbPARTHeadeDup17Thumb = new Thumb("ThumbPARTHeadeDup17Thumb", DescriptionGridDup2HeaderItem);
                    fThumbPARTHeadeDup17Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup17Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup17Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup17Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem FirmwareGridVieHeaderItem
        {
            get
            {
                if (null == fFirmwareGridVieHeaderItem)
                {
                    fFirmwareGridVieHeaderItem = new HeaderItem("FirmwareGridVieHeaderItem", GridViewHeaderRDup2Header);
                    fFirmwareGridVieHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fFirmwareGridVieHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fFirmwareGridVieHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2A8C9E5A-0A8D-48DD-9D15-42B45EB4177B");
                    fFirmwareGridVieHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Firmware");
                }

                return fFirmwareGridVieHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FirmwareTextBloText
        {
            get
            {
                if (null == fFirmwareTextBloText)
                {
                    fFirmwareTextBloText = new Text("FirmwareTextBloText", FirmwareGridVieHeaderItem);
                    fFirmwareTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fFirmwareTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFirmwareTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Firmware");
                }

                return fFirmwareTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup18Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup18Thumb)
                {
                    fThumbPARTHeadeDup18Thumb = new Thumb("ThumbPARTHeadeDup18Thumb", FirmwareGridVieHeaderItem);
                    fThumbPARTHeadeDup18Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup18Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup18Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup18Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button AddDeviceButtonButton
        {
            get
            {
                if (null == fAddDeviceButtonButton)
                {
                    fAddDeviceButtonButton = new Button("AddDeviceButtonButton", ServiceConfigurCustom);
                    fAddDeviceButtonButton.UIMap.Scope = UIASeachScope.Children;
                    fAddDeviceButtonButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fAddDeviceButtonButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"F312568F-16E2-4717-876C-9A076CE2602B");
                    fAddDeviceButtonButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Device...");
                }

                return fAddDeviceButtonButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddDeviceTextBlText
        {
            get
            {
                if (null == fAddDeviceTextBlText)
                {
                    fAddDeviceTextBlText = new Text("AddDeviceTextBlText", AddDeviceButtonButton);
                    fAddDeviceTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fAddDeviceTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddDeviceTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Device...");
                }

                return fAddDeviceTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ExportButtonef5Button
        {
            get
            {
                if (null == fExportButtonef5Button)
                {
                    fExportButtonef5Button = new Button("ExportButtonef5Button", ServiceConfigurCustom);
                    fExportButtonef5Button.UIMap.Scope = UIASeachScope.Children;
                    fExportButtonef5Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fExportButtonef5Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ef506fe9-b864-4efe-a960-ad04e56aab91");
                    fExportButtonef5Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Export");
                }

                return fExportButtonef5Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ExportTextBlockText
        {
            get
            {
                if (null == fExportTextBlockText)
                {
                    fExportTextBlockText = new Text("ExportTextBlockText", ExportButtonef5Button);
                    fExportTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fExportTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fExportTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Export");
                }

                return fExportTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RemoveDeviceButButton
        {
            get
            {
                if (null == fRemoveDeviceButButton)
                {
                    fRemoveDeviceButButton = new Button("RemoveDeviceButButton", ServiceConfigurCustom);
                    fRemoveDeviceButButton.UIMap.Scope = UIASeachScope.Children;
                    fRemoveDeviceButButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fRemoveDeviceButButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6f0bbda8-ae72-4b07-bd10-508b3cd6df98");
                    fRemoveDeviceButButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Remove Device...");
                }

                return fRemoveDeviceButButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RemoveDeviceTexText
        {
            get
            {
                if (null == fRemoveDeviceTexText)
                {
                    fRemoveDeviceTexText = new Text("RemoveDeviceTexText", RemoveDeviceButButton);
                    fRemoveDeviceTexText.UIMap.Scope = UIASeachScope.Children;
                    fRemoveDeviceTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRemoveDeviceTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Remove Device...");
                }

                return fRemoveDeviceTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ImportButtona69Button
        {
            get
            {
                if (null == fImportButtona69Button)
                {
                    fImportButtona69Button = new Button("ImportButtona69Button", ServiceConfigurCustom);
                    fImportButtona69Button.UIMap.Scope = UIASeachScope.Children;
                    fImportButtona69Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fImportButtona69Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"a694c1f5-ca51-45dc-ae40-8decc9704ca5");
                    fImportButtona69Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Import");
                }

                return fImportButtona69Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ImportTextBlockText
        {
            get
            {
                if (null == fImportTextBlockText)
                {
                    fImportTextBlockText = new Text("ImportTextBlockText", ImportButtona69Button);
                    fImportTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fImportTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fImportTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Import");
                }

                return fImportTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CreateTemplateBButton
        {
            get
            {
                if (null == fCreateTemplateBButton)
                {
                    fCreateTemplateBButton = new Button("CreateTemplateBButton", ServiceConfigurCustom);
                    fCreateTemplateBButton.UIMap.Scope = UIASeachScope.Children;
                    fCreateTemplateBButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCreateTemplateBButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4C50BE02-6C60-4097-9595-ACF2CC3D5F50");
                    fCreateTemplateBButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Create Template");
                }

                return fCreateTemplateBButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CreateTemplateTText
        {
            get
            {
                if (null == fCreateTemplateTText)
                {
                    fCreateTemplateTText = new Text("CreateTemplateTText", CreateTemplateBButton);
                    fCreateTemplateTText.UIMap.Scope = UIASeachScope.Children;
                    fCreateTemplateTText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCreateTemplateTText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Create Template");
                }

                return fCreateTemplateTText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button DeviceSignInButButton
        {
            get
            {
                if (null == fDeviceSignInButButton)
                {
                    fDeviceSignInButButton = new Button("DeviceSignInButButton", ServiceConfigurCustom);
                    fDeviceSignInButButton.UIMap.Scope = UIASeachScope.Children;
                    fDeviceSignInButButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fDeviceSignInButButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mDeviceSignInButton");
                    fDeviceSignInButButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device Sign In...");
                }

                return fDeviceSignInButButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DeviceSignInTexText
        {
            get
            {
                if (null == fDeviceSignInTexText)
                {
                    fDeviceSignInTexText = new Text("DeviceSignInTexText", DeviceSignInButButton);
                    fDeviceSignInTexText.UIMap.Scope = UIASeachScope.Children;
                    fDeviceSignInTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDeviceSignInTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device Sign In...");
                }

                return fDeviceSignInTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TotalDevicesText
        {
            get
            {
                if (null == fTotalDevicesText)
                {
                    fTotalDevicesText = new Text("TotalDevicesText", ServiceConfigurCustom);
                    fTotalDevicesText.UIMap.Scope = UIASeachScope.Children;
                    fTotalDevicesText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fTotalDevicesText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Total Devices");
                }

                return fTotalDevicesText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TotalDevicesTexText
        {
            get
            {
                if (null == fTotalDevicesTexText)
                {
                    fTotalDevicesTexText = new Text("TotalDevicesTexText", TotalDevicesText);
                    fTotalDevicesTexText.UIMap.Scope = UIASeachScope.Children;
                    fTotalDevicesTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTotalDevicesTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Total Devices");
                }

                return fTotalDevicesTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text A0Text82f844376Text
        {
            get
            {
                if (null == fA0Text82f844376Text)
                {
                    fA0Text82f844376Text = new Text("A0Text82f844376Text", ServiceConfigurCustom);
                    fA0Text82f844376Text.UIMap.Scope = UIASeachScope.Children;
                    fA0Text82f844376Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fA0Text82f844376Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"82f84437-601e-4562-a536-33b7ebcbf6d7");
                    fA0Text82f844376Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"0");
                }

                return fA0Text82f844376Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text A0TextBlockText
        {
            get
            {
                if (null == fA0TextBlockText)
                {
                    fA0TextBlockText = new Text("A0TextBlockText", A0Text82f844376Text);
                    fA0TextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fA0TextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fA0TextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"0");
                }

                return fA0TextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ConfigureDeviceButton
        {
            get
            {
                if (null == fConfigureDeviceButton)
                {
                    fConfigureDeviceButton = new Button("ConfigureDeviceButton", ServiceConfigurCustom);
                    fConfigureDeviceButton.UIMap.Scope = UIASeachScope.Children;
                    fConfigureDeviceButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fConfigureDeviceButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cc06ce85-fb0a-4048-8b41-968e5c947ca3");
                    fConfigureDeviceButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Configure Device...");
                }

                return fConfigureDeviceButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ConfigureDeviceText
        {
            get
            {
                if (null == fConfigureDeviceText)
                {
                    fConfigureDeviceText = new Text("ConfigureDeviceText", ConfigureDeviceButton);
                    fConfigureDeviceText.UIMap.Scope = UIASeachScope.Children;
                    fConfigureDeviceText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fConfigureDeviceText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Configure Device...");
                }

                return fConfigureDeviceText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem TemplateConfiguTabItem
        {
            get
            {
                if (null == fTemplateConfiguTabItem)
                {
                    fTemplateConfiguTabItem = new TabItem("TemplateConfiguTabItem", TabControlec0fdTab);
                    fTemplateConfiguTabItem.UIMap.Scope = UIASeachScope.Children;
                    fTemplateConfiguTabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fTemplateConfiguTabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AC05F9B9-A7D8-4b34-80E7-910FB9870D47");
                    fTemplateConfiguTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Template Configuration");
                }

                return fTemplateConfiguTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TemplateConfiguText
        {
            get
            {
                if (null == fTemplateConfiguText)
                {
                    fTemplateConfiguText = new Text("TemplateConfiguText", TemplateConfiguTabItem);
                    fTemplateConfiguText.UIMap.Scope = UIASeachScope.Children;
                    fTemplateConfiguText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTemplateConfiguText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Template Configuration");
                }

                return fTemplateConfiguText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem LogTabItem9b4f3TabItem
        {
            get
            {
                if (null == fLogTabItem9b4f3TabItem)
                {
                    fLogTabItem9b4f3TabItem = new TabItem("LogTabItem9b4f3TabItem", TabControlec0fdTab);
                    fLogTabItem9b4f3TabItem.UIMap.Scope = UIASeachScope.Children;
                    fLogTabItem9b4f3TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fLogTabItem9b4f3TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9b4f34bb-d75a-4080-9be3-1c50ec31c5b6");
                    fLogTabItem9b4f3TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Log");
                }

                return fLogTabItem9b4f3TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text LogTextBlockText
        {
            get
            {
                if (null == fLogTextBlockText)
                {
                    fLogTextBlockText = new Text("LogTextBlockText", LogTabItem9b4f3TabItem);
                    fLogTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fLogTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fLogTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Log");
                }

                return fLogTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup7TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup7TabItem)
                {
                    fSystemWindowsCoDup7TabItem = new TabItem("SystemWindowsCoDup7TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup7TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup7TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup7TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3AC8D4A8-3B06-421A-911B-E8CA248A9ED4");
                    fSystemWindowsCoDup7TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup7TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SecurityTextmSeText
        {
            get
            {
                if (null == fSecurityTextmSeText)
                {
                    fSecurityTextmSeText = new Text("SecurityTextmSeText", SystemWindowsCoDup7TabItem);
                    fSecurityTextmSeText.UIMap.Scope = UIASeachScope.Children;
                    fSecurityTextmSeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fSecurityTextmSeText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mSecurityTabLabel");
                    fSecurityTextmSeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Security");
                }

                return fSecurityTextmSeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SecurityTextBloText
        {
            get
            {
                if (null == fSecurityTextBloText)
                {
                    fSecurityTextBloText = new Text("SecurityTextBloText", SecurityTextmSeText);
                    fSecurityTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fSecurityTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSecurityTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Security");
                }

                return fSecurityTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text8A7A84DB894Text
        {
            get
            {
                if (null == fText8A7A84DB894Text)
                {
                    fText8A7A84DB894Text = new Text("Text8A7A84DB894Text", SystemWindowsCoDup7TabItem);
                    fText8A7A84DB894Text.UIMap.Scope = UIASeachScope.Children;
                    fText8A7A84DB894Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText8A7A84DB894Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8A7A84DB-8945-40E1-A0F9-C40DDD129739");
                    fText8A7A84DB894Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText8A7A84DB894Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text16F78FB18FFText
        {
            get
            {
                if (null == fText16F78FB18FFText)
                {
                    fText16F78FB18FFText = new Text("Text16F78FB18FFText", SystemWindowsCoDup7TabItem);
                    fText16F78FB18FFText.UIMap.Scope = UIASeachScope.Children;
                    fText16F78FB18FFText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText16F78FB18FFText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"16F78FB1-8FF9-4B0D-8251-FB09F520EA73");
                    fText16F78FB18FFText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText16F78FB18FFText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup8TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup8TabItem)
                {
                    fSystemWindowsCoDup8TabItem = new TabItem("SystemWindowsCoDup8TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup8TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup8TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup8TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1678607C-20BF-4137-8238-C9D46EA8FF70");
                    fSystemWindowsCoDup8TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup8TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AnalyticsTextmAText
        {
            get
            {
                if (null == fAnalyticsTextmAText)
                {
                    fAnalyticsTextmAText = new Text("AnalyticsTextmAText", SystemWindowsCoDup8TabItem);
                    fAnalyticsTextmAText.UIMap.Scope = UIASeachScope.Children;
                    fAnalyticsTextmAText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fAnalyticsTextmAText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mAnalyticsTabLabel");
                    fAnalyticsTextmAText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Analytics");
                }

                return fAnalyticsTextmAText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AnalyticsTextBlText
        {
            get
            {
                if (null == fAnalyticsTextBlText)
                {
                    fAnalyticsTextBlText = new Text("AnalyticsTextBlText", AnalyticsTextmAText);
                    fAnalyticsTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fAnalyticsTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAnalyticsTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Analytics");
                }

                return fAnalyticsTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem AboutTabItemf45TabItem
        {
            get
            {
                if (null == fAboutTabItemf45TabItem)
                {
                    fAboutTabItemf45TabItem = new TabItem("AboutTabItemf45TabItem", TabControlec0fdTab);
                    fAboutTabItemf45TabItem.UIMap.Scope = UIASeachScope.Children;
                    fAboutTabItemf45TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fAboutTabItemf45TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"f45c22d9-f77a-481a-95bc-09cdff03e131");
                    fAboutTabItemf45TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"About");
                }

                return fAboutTabItemf45TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AboutTextBlockText
        {
            get
            {
                if (null == fAboutTextBlockText)
                {
                    fAboutTextBlockText = new Text("AboutTextBlockText", AboutTabItemf45TabItem);
                    fAboutTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fAboutTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAboutTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"About");
                }

                return fAboutTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalCustomMessageWindow
        {
            get
            {
                if (null == fHPDigitalCustomMessageWindow)
                {
                    fHPDigitalCustomMessageWindow = new Window("HPDigitalCustomMessageWindow", AddDevicesWindow);
                    fHPDigitalCustomMessageWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalCustomMessageWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalCustomMessageWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"336E3250-8749-475d-952F-E36223E36750");
                }

                return fHPDigitalCustomMessageWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button OKButtonAE4B0C6Button
        {
            get
            {
                if (null == fOKButtonAE4B0C6Button)
                {
                    fOKButtonAE4B0C6Button = new Button("OKButtonAE4B0C6Button", HPDigitalCustomMessageWindow);
                    fOKButtonAE4B0C6Button.UIMap.Scope = UIASeachScope.Children;
                    fOKButtonAE4B0C6Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButtonAE4B0C6Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AE4B0C61-2DEE-4974-B517-4A1388A3F4CC");
                    fOKButtonAE4B0C6Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButtonAE4B0C6Button;
            }
        }

        private Button fOKButtonAE4B0C6Button { get; set; }
    }

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class DSSConfig_AddDeviceAdminPrompt
    {
        /// <summary>
        /// Backing field for HPDigitalSendinDup0Window property
        /// </summary>
        private Window fHPDigitalSendinDup0Window;

        /// <summary>
        /// Backing field for AddDevicesWindow property
        /// </summary>
        private Window fAddDevicesWindoWindow;

        /// <summary>
        /// Backing field for AdministratorCredentialWindow property
        /// </summary>
        private Window fAdministratorcrWindow;

        /// <summary>
        /// Backing field for AdministratorcrTitleBar property
        /// </summary>
        private TitleBar fAdministratorcrTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup0MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup0MenuBar;

        /// <summary>
        /// Backing field for SystemItem1I0XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I0XMenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizDup0Button property
        /// </summary>
        private Button fMinimizeMinimizDup0Button;

        /// <summary>
        /// Backing field for MaximizeMaximizDup0Button property
        /// </summary>
        private Button fMaximizeMaximizDup0Button;

        /// <summary>
        /// Backing field for CloseCloseDup0Button property
        /// </summary>
        private Button fCloseCloseDup0Button;

        /// <summary>
        /// Backing field for WarningTextBlocText property
        /// </summary>
        private Text fWarningTextBlocText;

        /// <summary>
        /// Backing field for InvalidUserNameText property
        /// </summary>
        private Text fInvalidUserNameText;

        /// <summary>
        /// Backing field for ThefollowingdevText property
        /// </summary>
        private Text fThefollowingdevText;

        /// <summary>
        /// Backing field for UsernameTextmUsText property
        /// </summary>
        private Text fUsernameTextmUsText;

        /// <summary>
        /// Backing field for UsernameTextBloText property
        /// </summary>
        private Text fUsernameTextBloText;

        /// <summary>
        /// Backing field for TextBox67E46C7BEdit property
        /// </summary>
        private Edit fTextBox67E46C7BEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup0Pane property
        /// </summary>
        private Pane fScrollViewerPARDup0Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI0XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI0XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI0XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI0XScrollBar;

        /// <summary>
        /// Backing field for PasswordTextmPaText property
        /// </summary>
        private Text fPasswordTextmPaText;

        /// <summary>
        /// Backing field for PasswordTextBloText property
        /// </summary>
        private Text fPasswordTextBloText;

        /// <summary>
        /// Backing field for PasswordBox1355Edit property
        /// </summary>
        private Edit fPasswordBox1355Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup1Pane property
        /// </summary>
        private Pane fScrollViewerPARDup1Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI1XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI1XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI1XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI1XScrollBar;

        /// <summary>
        /// Backing field for VerifyPasswordTText property
        /// </summary>
        private Text fVerifyPasswordTText;

        /// <summary>
        /// Backing field for PasswordBoxmVerEdit property
        /// </summary>
        private Edit fPasswordBoxmVerEdit;

        /// <summary>
        /// Backing field for OKButton03CAA02Button property
        /// </summary>
        private Button fOKButton03CAA02Button;

        /// <summary>
        /// Backing field for OKTextBlockDup0Text property
        /// </summary>
        private Text fOKTextBlockDup0Text;

        /// <summary>
        /// Backing field for CancelButton585Button property
        /// </summary>
        private Button fCancelButton585Button;

        /// <summary>
        /// Backing field for CancelTextBlockDup0Text property
        /// </summary>
        private Text fCancelTextBlockDup0Text;

        /// <summary>
        /// The System Ip
        /// </summary>
        private string _ipAddress;
       

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_AddDeviceAdminPrompt"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public DSSConfig_AddDeviceAdminPrompt(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_AddDeviceAdminPrompt"/> class using the default UIAFramework.
        /// </summary>
        public DSSConfig_AddDeviceAdminPrompt()
        {
            Desktop = new Desktop();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_AddDeviceAdminPrompt"/> class using the default UIAFramework.
        /// </summary>
        /// <param name="address">
        /// The IP address.
        /// </param>
        public DSSConfig_AddDeviceAdminPrompt(string address)
        {
            Desktop = new Desktop(UIAFramework.ManagedUIA);
            _ipAddress = address;
        }

        /// <summary>
        /// Checks for screen avalability
        /// </summary>
        /// <param name="timeout">
        /// The amount of time allowed for the screen avalability
        /// </param>
        public bool WaitForAvailable(int timeout)
        {
            try
            {

                if (AddDevicesWindow.WaitForAvailable(timeout) == ResultCode.Passed)
                {
                    if (AdministratorCredentialWindow.WaitForAvailable(timeout) == ResultCode.Passed)
                    {
                        return true;
                    }
                }
            }
            catch(Exception)
            {
                return false;

            }
                return false;
           
        }
        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinDup0Window
        {
            get
            {
                if (null == fHPDigitalSendinDup0Window)
                {
                    fHPDigitalSendinDup0Window = new Window("HPDigitalSendinDup0Window", Desktop);
                    fHPDigitalSendinDup0Window.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinDup0Window.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalSendinDup0Window.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AB81453F-68AD-4243-ACA8-B4D9362C4ED4");
                    fHPDigitalSendinDup0Window.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software Configuration (Server IP Address: {_ipAddress})");
                }

                return fHPDigitalSendinDup0Window;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window AddDevicesWindow
        {
            get
            {
                if (null == fAddDevicesWindoWindow)
                {
                    fAddDevicesWindoWindow = new Window("AddDevicesWindow", HPDigitalSendinDup0Window);
                    fAddDevicesWindoWindow.UIMap.Scope = UIASeachScope.Children;
                    fAddDevicesWindoWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fAddDevicesWindoWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2B58EBC8-8CF9-468e-A788-28E7C5BD22F6");
                    fAddDevicesWindoWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Devices");
                }

                return fAddDevicesWindoWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window AdministratorCredentialWindow
        {
            get
            {
                if (null == fAdministratorcrWindow)
                {
                    fAdministratorcrWindow = new Window("AdministratorCredentialWindow", AddDevicesWindow);
                    fAdministratorcrWindow.UIMap.Scope = UIASeachScope.Children;
                    fAdministratorcrWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fAdministratorcrWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"C31797ED-E181-433e-B35F-0D965D75ACCF");
                    fAdministratorcrWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Administrator credentials are required.");
                }

                return fAdministratorcrWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar AdministratorcrTitleBar
        {
            get
            {
                if (null == fAdministratorcrTitleBar)
                {
                    fAdministratorcrTitleBar = new TitleBar("AdministratorcrTitleBar", AdministratorCredentialWindow);
                    fAdministratorcrTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fAdministratorcrTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fAdministratorcrTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Administrator credentials are required.");
                }

                return fAdministratorcrTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyDup0MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup0MenuBar)
                {
                    fSystemMenuBarSyDup0MenuBar = new MenuBar("SystemMenuBarSyDup0MenuBar", AdministratorcrTitleBar);
                    fSystemMenuBarSyDup0MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyDup0MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1I0XMenuItem
        {
            get
            {
                if (null == fSystemItem1I0XMenuItem)
                {
                    fSystemItem1I0XMenuItem = new MenuItem("SystemItem1I0XMenuItem", SystemMenuBarSyDup0MenuBar);
                    fSystemItem1I0XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I0XMenuItem.UIMap.Index = 0;
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1I0XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MinimizeMinimizDup0Button
        {
            get
            {
                if (null == fMinimizeMinimizDup0Button)
                {
                    fMinimizeMinimizDup0Button = new Button("MinimizeMinimizDup0Button", AdministratorcrTitleBar);
                    fMinimizeMinimizDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                    fMinimizeMinimizDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                }

                return fMinimizeMinimizDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MaximizeMaximizDup0Button
        {
            get
            {
                if (null == fMaximizeMaximizDup0Button)
                {
                    fMaximizeMaximizDup0Button = new Button("MaximizeMaximizDup0Button", AdministratorcrTitleBar);
                    fMaximizeMaximizDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fMaximizeMaximizDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Maximize");
                    fMaximizeMaximizDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximize");
                }

                return fMaximizeMaximizDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseDup0Button
        {
            get
            {
                if (null == fCloseCloseDup0Button)
                {
                    fCloseCloseDup0Button = new Button("CloseCloseDup0Button", AdministratorcrTitleBar);
                    fCloseCloseDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text WarningTextBlocText
        {
            get
            {
                if (null == fWarningTextBlocText)
                {
                    fWarningTextBlocText = new Text("WarningTextBlocText", AdministratorCredentialWindow);
                    fWarningTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fWarningTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fWarningTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"21A3AE42-69FF-4272-84B8-A610DC0B684B");
                    fWarningTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Warning");
                }

                return fWarningTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text InvalidUserNameText
        {
            get
            {
                if (null == fInvalidUserNameText)
                {
                    fInvalidUserNameText = new Text("InvalidUserNameText", AdministratorCredentialWindow);
                    fInvalidUserNameText.UIMap.Scope = UIASeachScope.Children;
                    fInvalidUserNameText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fInvalidUserNameText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"C02E55FD-D52A-43c3-A1AF-8DAA459B730F");
                    fInvalidUserNameText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Invalid User Name, Password, or Access Code. Verify your Sign In information and retry.");
                }

                return fInvalidUserNameText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ThefollowingdevText
        {
            get
            {
                if (null == fThefollowingdevText)
                {
                    fThefollowingdevText = new Text("ThefollowingdevText", AdministratorCredentialWindow);
                    fThefollowingdevText.UIMap.Scope = UIASeachScope.Children;
                    fThefollowingdevText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fThefollowingdevText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"69F3E35A-AFF8-47f2-BD4E-4D79A34C5F5E");
                }

                return fThefollowingdevText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text UsernameTextmUsText
        {
            get
            {
                if (null == fUsernameTextmUsText)
                {
                    fUsernameTextmUsText = new Text("UsernameTextmUsText", AdministratorCredentialWindow);
                    fUsernameTextmUsText.UIMap.Scope = UIASeachScope.Children;
                    fUsernameTextmUsText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fUsernameTextmUsText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mUsernameLabel");
                    fUsernameTextmUsText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Username");
                }

                return fUsernameTextmUsText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text UsernameTextBloText
        {
            get
            {
                if (null == fUsernameTextBloText)
                {
                    fUsernameTextBloText = new Text("UsernameTextBloText", UsernameTextmUsText);
                    fUsernameTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fUsernameTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fUsernameTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Username");
                }

                return fUsernameTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit DeviceUserNameTextBox
        {
            get
            {
                if (null == fTextBox67E46C7BEdit)
                {
                    fTextBox67E46C7BEdit = new Edit("TextBox67E46C7BEdit", AdministratorCredentialWindow);
                    fTextBox67E46C7BEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox67E46C7BEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox67E46C7BEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"67E46C7B-E31F-4878-BC8A-0AA162CE69DA");
                }

                return fTextBox67E46C7BEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup0Pane
        {
            get
            {
                if (null == fScrollViewerPARDup0Pane)
                {
                    fScrollViewerPARDup0Pane = new Pane("ScrollViewerPARDup0Pane", DeviceUserNameTextBox);
                    fScrollViewerPARDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI0XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI0XScrollBar)
                {
                    fScrollBarVerticI0XScrollBar = new ScrollBar("ScrollBarVerticI0XScrollBar", ScrollViewerPARDup0Pane);
                    fScrollBarVerticI0XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI0XScrollBar.UIMap.Index = 0;
                    fScrollBarVerticI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI0XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI0XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI0XScrollBar)
                {
                    fScrollBarHorizoI0XScrollBar = new ScrollBar("ScrollBarHorizoI0XScrollBar", ScrollViewerPARDup0Pane);
                    fScrollBarHorizoI0XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI0XScrollBar.UIMap.Index = 0;
                    fScrollBarHorizoI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI0XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PasswordTextmPaText
        {
            get
            {
                if (null == fPasswordTextmPaText)
                {
                    fPasswordTextmPaText = new Text("PasswordTextmPaText", AdministratorCredentialWindow);
                    fPasswordTextmPaText.UIMap.Scope = UIASeachScope.Children;
                    fPasswordTextmPaText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fPasswordTextmPaText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mPasswordLabel");
                    fPasswordTextmPaText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Password");
                }

                return fPasswordTextmPaText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PasswordTextBloText
        {
            get
            {
                if (null == fPasswordTextBloText)
                {
                    fPasswordTextBloText = new Text("PasswordTextBloText", PasswordTextmPaText);
                    fPasswordTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fPasswordTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPasswordTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Password");
                }

                return fPasswordTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit DevicePasswordBox
        {
            get
            {
                if (null == fPasswordBox1355Edit)
                {
                    fPasswordBox1355Edit = new Edit("PasswordBox1355Edit", AdministratorCredentialWindow);
                    fPasswordBox1355Edit.UIMap.Scope = UIASeachScope.Children;
                    fPasswordBox1355Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"PasswordBox");
                    fPasswordBox1355Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1355C219-281F-4c17-B98D-FDB0AFE1761A");
                }

                return fPasswordBox1355Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup1Pane
        {
            get
            {
                if (null == fScrollViewerPARDup1Pane)
                {
                    fScrollViewerPARDup1Pane = new Pane("ScrollViewerPARDup1Pane", DevicePasswordBox);
                    fScrollViewerPARDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI1XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI1XScrollBar)
                {
                    fScrollBarVerticI1XScrollBar = new ScrollBar("ScrollBarVerticI1XScrollBar", ScrollViewerPARDup1Pane);
                    fScrollBarVerticI1XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI1XScrollBar.UIMap.Index = 1;
                    fScrollBarVerticI1XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI1XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI1XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI1XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI1XScrollBar)
                {
                    fScrollBarHorizoI1XScrollBar = new ScrollBar("ScrollBarHorizoI1XScrollBar", ScrollViewerPARDup1Pane);
                    fScrollBarHorizoI1XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI1XScrollBar.UIMap.Index = 1;
                    fScrollBarHorizoI1XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI1XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI1XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text VerifyPasswordTText
        {
            get
            {
                if (null == fVerifyPasswordTText)
                {
                    fVerifyPasswordTText = new Text("VerifyPasswordTText", AdministratorCredentialWindow);
                    fVerifyPasswordTText.UIMap.Scope = UIASeachScope.Children;
                    fVerifyPasswordTText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fVerifyPasswordTText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mVerifyPasswordLabel");
                    fVerifyPasswordTText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Verify Password");
                }

                return fVerifyPasswordTText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit PasswordBoxmVerEdit
        {
            get
            {
                if (null == fPasswordBoxmVerEdit)
                {
                    fPasswordBoxmVerEdit = new Edit("PasswordBoxmVerEdit", AdministratorCredentialWindow);
                    fPasswordBoxmVerEdit.UIMap.Scope = UIASeachScope.Children;
                    fPasswordBoxmVerEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"PasswordBox");
                    fPasswordBoxmVerEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mVerifyPasswordBox");
                }

                return fPasswordBoxmVerEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button DeviceOKButton
        {
            get
            {
                if (null == fOKButton03CAA02Button)
                {
                    fOKButton03CAA02Button = new Button("OKButton03CAA02Button", AdministratorCredentialWindow);
                    fOKButton03CAA02Button.UIMap.Scope = UIASeachScope.Children;
                    fOKButton03CAA02Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButton03CAA02Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"03CAA02F-971C-4142-82F9-3BD1CA538770");
                    fOKButton03CAA02Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButton03CAA02Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OKTextBlockDup0Text
        {
            get
            {
                if (null == fOKTextBlockDup0Text)
                {
                    fOKTextBlockDup0Text = new Text("OKTextBlockDup0Text", DeviceOKButton);
                    fOKTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fOKTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOKTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButton585Button
        {
            get
            {
                if (null == fCancelButton585Button)
                {
                    fCancelButton585Button = new Button("CancelButton585Button", AdministratorCredentialWindow);
                    fCancelButton585Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton585Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButton585Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5850F585-2011-4de6-BAFF-4E61EC48BD7B");
                    fCancelButton585Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButton585Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CancelTextBlockDup0Text
        {
            get
            {
                if (null == fCancelTextBlockDup0Text)
                {
                    fCancelTextBlockDup0Text = new Text("CancelTextBlockDup0Text", CancelButton585Button);
                    fCancelTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fCancelTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCancelTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelTextBlockDup0Text;
            }
        }

        
    }

    public class DSSConfig_AddDevice_Reclaim
    {
        /// <summary>
        /// Backing field for HPDigitalSendinDup0Window property
        /// </summary>
        private Window fHPDigitalSendinDup0Window;

        /// <summary>
        /// Backing field for AddDevicesWindoWindow property
        /// </summary>
        private Window fAddDevicesWindoWindow;

        /// <summary>
        /// Backing field for HPDigitalSendinDup1Window property
        /// </summary>
        private Window fHPDigitalSendinDup1Window;

        /// <summary>
        /// Backing field for HPDigitalSendinI0XTitleBar property
        /// </summary>
        private TitleBar fHPDigitalSendinI0XTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyI0XMenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyI0XMenuBar;

        /// <summary>
        /// Backing field for SystemItem1I0XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I0XMenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizI0XButton property
        /// </summary>
        private Button fMinimizeMinimizI0XButton;

        /// <summary>
        /// Backing field for MaximizeMaximizI0XButton property
        /// </summary>
        private Button fMaximizeMaximizI0XButton;

        /// <summary>
        /// Backing field for CloseCloseI0XButton property
        /// </summary>
        private Button fCloseCloseI0XButton;

        /// <summary>
        /// Backing field for YestoAllButtonBButton property
        /// </summary>
        private Button fYestoAllButtonBButton;

        /// <summary>
        /// Backing field for YesButton96E847Button property
        /// </summary>
        private Button fYesButton96E847Button;

        /// <summary>
        /// Backing field for YesTextBlockText property
        /// </summary>
        private Text fYesTextBlockText;

        /// <summary>
        /// Backing field for NoButton938CF5BButton property
        /// </summary>
        private Button fNoButton938CF5BButton;

        /// <summary>
        /// Backing field for NoTextBlockText property
        /// </summary>
        private Text fNoTextBlockText;

        /// <summary>
        /// Backing field for NotoAllButton45Button property
        /// </summary>
        private Button fNotoAllButton45Button;

        /// <summary>
        /// Backing field for ImageI0XDup0Image property
        /// </summary>
        private Image fImageI0XDup0Image;

        /// <summary>
        /// Backing field for Thedevice157720Text property
        /// </summary>
        private Text fThedevice157720Text;

        /// <summary>
        /// Backing field for ServerText property
        /// </summary>
        private Text fServerText;

        /// <summary>
        /// Backing field for ServerTextBlockText property
        /// </summary>
        private Text fServerTextBlockText;

        /// <summary>
        /// Backing field for A157723170TextEText property
        /// </summary>
        private Text fA157723170TextEText;

        /// <summary>
        /// Backing field for A157723170TextBText property
        /// </summary>
        private Text fA157723170TextBText;

        /// <summary>
        /// Backing field for AdministratorText property
        /// </summary>
        private Text fAdministratorText;

        /// <summary>
        /// Backing field for AdministratorTeText property
        /// </summary>
        private Text fAdministratorTeText;

        /// <summary>
        /// Backing field for MithunText88024Text property
        /// </summary>
        private Text fMithunText88024Text;

        /// <summary>
        /// Backing field for MithunTextBlockText property
        /// </summary>
        private Text fMithunTextBlockText;

        /// <summary>
        /// Backing field for EmailAddressText property
        /// </summary>
        private Text fEmailAddressText;

        /// <summary>
        /// Backing field for EmailAddressTexText property
        /// </summary>
        private Text fEmailAddressTexText;

        /// <summary>
        /// Backing field for mithunsahahpcomDup0Text property
        /// </summary>
        private Text fmithunsahahpcomDup0Text;

        /// <summary>
        /// Backing field for mithunsahahpcomDup1Text property
        /// </summary>
        private Text fmithunsahahpcomDup1Text;

        /// <summary>
        /// Backing field for PhoneNumberText property
        /// </summary>
        private Text fPhoneNumberText;

        /// <summary>
        /// Backing field for PhoneNumberTextText property
        /// </summary>
        private Text fPhoneNumberTextText;

        /// <summary>
        /// Backing field for A1234567891TextDup0Text property
        /// </summary>
        private Text fA1234567891TextDup0Text;

        /// <summary>
        /// Backing field for A1234567891TextDup1Text property
        /// </summary>
        private Text fA1234567891TextDup1Text;

        /// <summary>
        /// Backing field for LocationText property
        /// </summary>
        private Text fLocationText;

        /// <summary>
        /// Backing field for LocationTextBloText property
        /// </summary>
        private Text fLocationTextBloText;

        /// <summary>
        /// Backing field for HYBText7855C102Text property
        /// </summary>
        private Text fHYBText7855C102Text;

        /// <summary>
        /// Backing field for HYBTextBlockText property
        /// </summary>
        private Text fHYBTextBlockText;

        /// <summary>
        /// Backing field for AddingthedeviceText property
        /// </summary>
        private Text fAddingthedeviceText;

        /// <summary>
        /// The Address
        /// </summary>
        private string _address;

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_AddDevice_Reclaim"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public DSSConfig_AddDevice_Reclaim(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_AddDevice_Reclaim"/> class using the default UIAFramework.
        /// </summary>
        /// <summary>
        /// The address
        /// </summary>
        public DSSConfig_AddDevice_Reclaim(string address)
        {
            Desktop = new Desktop(UIAFramework.ManagedUIA);
            _address = address;
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinDup0Window
        {
            get
            {
                if (null == fHPDigitalSendinDup0Window)
                {
                    fHPDigitalSendinDup0Window = new Window("HPDigitalSendinDup0Window", Desktop);
                    fHPDigitalSendinDup0Window.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinDup0Window.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalSendinDup0Window.UIMap.SearchProperties.Add(UIASearchProperty.Name, $"HP Digital Sending Software Configuration (Server IP Address: {_address})");
                    fHPDigitalSendinDup0Window.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AB81453F-68AD-4243-ACA8-B4D9362C4ED4");
                }

                return fHPDigitalSendinDup0Window;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window AddDevicesWindoWindow
        {
            get
            {
                if (null == fAddDevicesWindoWindow)
                {
                    fAddDevicesWindoWindow = new Window("AddDevicesWindoWindow", HPDigitalSendinDup0Window);
                    fAddDevicesWindoWindow.UIMap.Scope = UIASeachScope.Children;
                    fAddDevicesWindoWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fAddDevicesWindoWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Devices");
                    fAddDevicesWindoWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2B58EBC8-8CF9-468e-A788-28E7C5BD22F6");
                }

                return fAddDevicesWindoWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinDup1Window
        {
            get
            {
                if (null == fHPDigitalSendinDup1Window)
                {
                    fHPDigitalSendinDup1Window = new Window("HPDigitalSendinDup1Window", AddDevicesWindoWindow);
                    fHPDigitalSendinDup1Window.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinDup1Window.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalSendinDup1Window.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Digital Sending Software");
                    fHPDigitalSendinDup1Window.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"792108E4-580C-4129-BCBB-204FC51FEAEF");
                }

                return fHPDigitalSendinDup1Window;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar HPDigitalSendinI0XTitleBar
        {
            get
            {
                if (null == fHPDigitalSendinI0XTitleBar)
                {
                    fHPDigitalSendinI0XTitleBar = new TitleBar("HPDigitalSendinI0XTitleBar", HPDigitalSendinDup1Window);
                    fHPDigitalSendinI0XTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinI0XTitleBar.UIMap.Index = 0;
                    fHPDigitalSendinI0XTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Digital Sending Software");
                    fHPDigitalSendinI0XTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                }

                return fHPDigitalSendinI0XTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyI0XMenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyI0XMenuBar)
                {
                    fSystemMenuBarSyI0XMenuBar = new MenuBar("SystemMenuBarSyI0XMenuBar", HPDigitalSendinI0XTitleBar);
                    fSystemMenuBarSyI0XMenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyI0XMenuBar.UIMap.Index = 0;
                    fSystemMenuBarSyI0XMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                    fSystemMenuBarSyI0XMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                }

                return fSystemMenuBarSyI0XMenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1I0XMenuItem
        {
            get
            {
                if (null == fSystemItem1I0XMenuItem)
                {
                    fSystemItem1I0XMenuItem = new MenuItem("SystemItem1I0XMenuItem", SystemMenuBarSyI0XMenuBar);
                    fSystemItem1I0XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I0XMenuItem.UIMap.Index = 0;
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                }

                return fSystemItem1I0XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MinimizeMinimizI0XButton
        {
            get
            {
                if (null == fMinimizeMinimizI0XButton)
                {
                    fMinimizeMinimizI0XButton = new Button("MinimizeMinimizI0XButton", HPDigitalSendinI0XTitleBar);
                    fMinimizeMinimizI0XButton.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizI0XButton.UIMap.Index = 0;
                    fMinimizeMinimizI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                    fMinimizeMinimizI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                }

                return fMinimizeMinimizI0XButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MaximizeMaximizI0XButton
        {
            get
            {
                if (null == fMaximizeMaximizI0XButton)
                {
                    fMaximizeMaximizI0XButton = new Button("MaximizeMaximizI0XButton", HPDigitalSendinI0XTitleBar);
                    fMaximizeMaximizI0XButton.UIMap.Scope = UIASeachScope.Children;
                    fMaximizeMaximizI0XButton.UIMap.Index = 0;
                    fMaximizeMaximizI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximize");
                    fMaximizeMaximizI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Maximize");
                }

                return fMaximizeMaximizI0XButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseI0XButton
        {
            get
            {
                if (null == fCloseCloseI0XButton)
                {
                    fCloseCloseI0XButton = new Button("CloseCloseI0XButton", HPDigitalSendinI0XTitleBar);
                    fCloseCloseI0XButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseI0XButton.UIMap.Index = 0;
                    fCloseCloseI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                    fCloseCloseI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                }

                return fCloseCloseI0XButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button YestoAllButtonBButton
        {
            get
            {
                if (null == fYestoAllButtonBButton)
                {
                    fYestoAllButtonBButton = new Button("YestoAllButtonBButton", HPDigitalSendinDup1Window);
                    fYestoAllButtonBButton.UIMap.Scope = UIASeachScope.Children;
                    fYestoAllButtonBButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fYestoAllButtonBButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Yes to All");
                    fYestoAllButtonBButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"BACA5D55-8D0B-4644-A671-4D4D3E5F22B4");
                }

                return fYestoAllButtonBButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button YesButton96E847Button
        {
            get
            {
                if (null == fYesButton96E847Button)
                {
                    fYesButton96E847Button = new Button("YesButton96E847Button", HPDigitalSendinDup1Window);
                    fYesButton96E847Button.UIMap.Scope = UIASeachScope.Children;
                    fYesButton96E847Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fYesButton96E847Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Yes");
                    fYesButton96E847Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"96E84777-7E58-44f9-A83C-99F5B0596909");
                }

                return fYesButton96E847Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text YesTextBlockText
        {
            get
            {
                if (null == fYesTextBlockText)
                {
                    fYesTextBlockText = new Text("YesTextBlockText", YesButton96E847Button);
                    fYesTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fYesTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fYesTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Yes");
                }

                return fYesTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button NoButton938CF5BButton
        {
            get
            {
                if (null == fNoButton938CF5BButton)
                {
                    fNoButton938CF5BButton = new Button("NoButton938CF5BButton", HPDigitalSendinDup1Window);
                    fNoButton938CF5BButton.UIMap.Scope = UIASeachScope.Children;
                    fNoButton938CF5BButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fNoButton938CF5BButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"No");
                    fNoButton938CF5BButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"938CF5B9-0B57-460a-8BDC-6AAFD872972F");
                }

                return fNoButton938CF5BButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NoTextBlockText
        {
            get
            {
                if (null == fNoTextBlockText)
                {
                    fNoTextBlockText = new Text("NoTextBlockText", NoButton938CF5BButton);
                    fNoTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fNoTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fNoTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"No");
                }

                return fNoTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button NotoAllButton45Button
        {
            get
            {
                if (null == fNotoAllButton45Button)
                {
                    fNotoAllButton45Button = new Button("NotoAllButton45Button", HPDigitalSendinDup1Window);
                    fNotoAllButton45Button.UIMap.Scope = UIASeachScope.Children;
                    fNotoAllButton45Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fNotoAllButton45Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"No to All");
                    fNotoAllButton45Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"45A0E323-EF8C-4576-BCCB-50E32F9450A4");
                }

                return fNotoAllButton45Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageI0XDup0Image
        {
            get
            {
                if (null == fImageI0XDup0Image)
                {
                    fImageI0XDup0Image = new Image("ImageI0XDup0Image", HPDigitalSendinDup1Window);
                    fImageI0XDup0Image.UIMap.Scope = UIASeachScope.Children;
                    fImageI0XDup0Image.UIMap.Index = 0;
                    fImageI0XDup0Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageI0XDup0Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Thedevice157720Text
        {
            get
            {
                if (null == fThedevice157720Text)
                {
                    fThedevice157720Text = new Text("Thedevice157720Text", HPDigitalSendinDup1Window);
                    fThedevice157720Text.UIMap.Scope = UIASeachScope.Children;
                    fThedevice157720Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fThedevice157720Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"54DA6188-72B9-45d1-ADEC-8496ED671631");
                }

                return fThedevice157720Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ServerText
        {
            get
            {
                if (null == fServerText)
                {
                    fServerText = new Text("ServerText", HPDigitalSendinDup1Window);
                    fServerText.UIMap.Scope = UIASeachScope.Children;
                    fServerText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fServerText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Server:");
                }

                return fServerText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ServerTextBlockText
        {
            get
            {
                if (null == fServerTextBlockText)
                {
                    fServerTextBlockText = new Text("ServerTextBlockText", ServerText);
                    fServerTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fServerTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fServerTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Server:");
                }

                return fServerTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text A157723170TextEText
        {
            get
            {
                if (null == fA157723170TextEText)
                {
                    fA157723170TextEText = new Text("A157723170TextEText", HPDigitalSendinDup1Window);
                    fA157723170TextEText.UIMap.Scope = UIASeachScope.Children;
                    fA157723170TextEText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fA157723170TextEText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"EA1403D4-4ED0-4ba8-AF90-8AFBBA965EEA");
                }

                return fA157723170TextEText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text A157723170TextBText
        {
            get
            {
                if (null == fA157723170TextBText)
                {
                    fA157723170TextBText = new Text("A157723170TextBText", A157723170TextEText);
                    fA157723170TextBText.UIMap.Scope = UIASeachScope.Children;
                    fA157723170TextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fA157723170TextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"15.77.231.70");
                }

                return fA157723170TextBText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AdministratorText
        {
            get
            {
                if (null == fAdministratorText)
                {
                    fAdministratorText = new Text("AdministratorText", HPDigitalSendinDup1Window);
                    fAdministratorText.UIMap.Scope = UIASeachScope.Children;
                    fAdministratorText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fAdministratorText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Administrator:");
                }

                return fAdministratorText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AdministratorTeText
        {
            get
            {
                if (null == fAdministratorTeText)
                {
                    fAdministratorTeText = new Text("AdministratorTeText", AdministratorText);
                    fAdministratorTeText.UIMap.Scope = UIASeachScope.Children;
                    fAdministratorTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAdministratorTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Administrator:");
                }

                return fAdministratorTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MithunText88024Text
        {
            get
            {
                if (null == fMithunText88024Text)
                {
                    fMithunText88024Text = new Text("MithunText88024Text", HPDigitalSendinDup1Window);
                    fMithunText88024Text.UIMap.Scope = UIASeachScope.Children;
                    fMithunText88024Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fMithunText88024Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Mithun");
                    fMithunText88024Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"880247E0-626A-44b3-8586-53AC8D1C87CA");
                }

                return fMithunText88024Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MithunTextBlockText
        {
            get
            {
                if (null == fMithunTextBlockText)
                {
                    fMithunTextBlockText = new Text("MithunTextBlockText", MithunText88024Text);
                    fMithunTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fMithunTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fMithunTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Mithun");
                }

                return fMithunTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EmailAddressText
        {
            get
            {
                if (null == fEmailAddressText)
                {
                    fEmailAddressText = new Text("EmailAddressText", HPDigitalSendinDup1Window);
                    fEmailAddressText.UIMap.Scope = UIASeachScope.Children;
                    fEmailAddressText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fEmailAddressText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"E-mail Address:");
                }

                return fEmailAddressText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EmailAddressTexText
        {
            get
            {
                if (null == fEmailAddressTexText)
                {
                    fEmailAddressTexText = new Text("EmailAddressTexText", EmailAddressText);
                    fEmailAddressTexText.UIMap.Scope = UIASeachScope.Children;
                    fEmailAddressTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEmailAddressTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"E-mail Address:");
                }

                return fEmailAddressTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text mithunsahahpcomDup0Text
        {
            get
            {
                if (null == fmithunsahahpcomDup0Text)
                {
                    fmithunsahahpcomDup0Text = new Text("mithunsahahpcomDup0Text", HPDigitalSendinDup1Window);
                    fmithunsahahpcomDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fmithunsahahpcomDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fmithunsahahpcomDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"mithun.saha@hp.com");
                    fmithunsahahpcomDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"31108411-39DE-4326-9B88-7C184B7CE7DE");
                }

                return fmithunsahahpcomDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text mithunsahahpcomDup1Text
        {
            get
            {
                if (null == fmithunsahahpcomDup1Text)
                {
                    fmithunsahahpcomDup1Text = new Text("mithunsahahpcomDup1Text", mithunsahahpcomDup0Text);
                    fmithunsahahpcomDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fmithunsahahpcomDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fmithunsahahpcomDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"mithun.saha@hp.com");
                }

                return fmithunsahahpcomDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PhoneNumberText
        {
            get
            {
                if (null == fPhoneNumberText)
                {
                    fPhoneNumberText = new Text("PhoneNumberText", HPDigitalSendinDup1Window);
                    fPhoneNumberText.UIMap.Scope = UIASeachScope.Children;
                    fPhoneNumberText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fPhoneNumberText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Phone Number:");
                }

                return fPhoneNumberText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PhoneNumberTextText
        {
            get
            {
                if (null == fPhoneNumberTextText)
                {
                    fPhoneNumberTextText = new Text("PhoneNumberTextText", PhoneNumberText);
                    fPhoneNumberTextText.UIMap.Scope = UIASeachScope.Children;
                    fPhoneNumberTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPhoneNumberTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Phone Number:");
                }

                return fPhoneNumberTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text A1234567891TextDup0Text
        {
            get
            {
                if (null == fA1234567891TextDup0Text)
                {
                    fA1234567891TextDup0Text = new Text("A1234567891TextDup0Text", HPDigitalSendinDup1Window);
                    fA1234567891TextDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fA1234567891TextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fA1234567891TextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"1234567891");
                    fA1234567891TextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"E7B6D2A9-F948-418b-81C1-0A73F97E6B27");
                }

                return fA1234567891TextDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text A1234567891TextDup1Text
        {
            get
            {
                if (null == fA1234567891TextDup1Text)
                {
                    fA1234567891TextDup1Text = new Text("A1234567891TextDup1Text", A1234567891TextDup0Text);
                    fA1234567891TextDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fA1234567891TextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fA1234567891TextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"1234567891");
                }

                return fA1234567891TextDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text LocationText
        {
            get
            {
                if (null == fLocationText)
                {
                    fLocationText = new Text("LocationText", HPDigitalSendinDup1Window);
                    fLocationText.UIMap.Scope = UIASeachScope.Children;
                    fLocationText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fLocationText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Location:");
                }

                return fLocationText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text LocationTextBloText
        {
            get
            {
                if (null == fLocationTextBloText)
                {
                    fLocationTextBloText = new Text("LocationTextBloText", LocationText);
                    fLocationTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fLocationTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fLocationTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Location:");
                }

                return fLocationTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HYBText7855C102Text
        {
            get
            {
                if (null == fHYBText7855C102Text)
                {
                    fHYBText7855C102Text = new Text("HYBText7855C102Text", HPDigitalSendinDup1Window);
                    fHYBText7855C102Text.UIMap.Scope = UIASeachScope.Children;
                    fHYBText7855C102Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fHYBText7855C102Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HYB");
                    fHYBText7855C102Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7855C102-73B3-4f66-A58E-E9B24E98C7B4");
                }

                return fHYBText7855C102Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HYBTextBlockText
        {
            get
            {
                if (null == fHYBTextBlockText)
                {
                    fHYBTextBlockText = new Text("HYBTextBlockText", HYBText7855C102Text);
                    fHYBTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fHYBTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHYBTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HYB");
                }

                return fHYBTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddingthedeviceText
        {
            get
            {
                if (null == fAddingthedeviceText)
                {
                    fAddingthedeviceText = new Text("AddingthedeviceText", HPDigitalSendinDup1Window);
                    fAddingthedeviceText.UIMap.Scope = UIASeachScope.Children;
                    fAddingthedeviceText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddingthedeviceText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Adding the device to the Device List will transfer the ownership of this device to this server.  Should this device be added to this server?");
                }

                return fAddingthedeviceText;
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------

namespace HP.ScalableTest.Plugin.DSSConfiguration.UIMaps
{
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class DSSConfig_AddMenuPrompt
    {
        /// <summary>
        /// Backing field for HPDigitalSendinWindow property
        /// </summary>
        private Window fHPDigitalSendinWindow;

        /// <summary>
        /// Backing field for WorkflowMenuWinWindow property
        /// </summary>
        private Window fWorkflowMenuWinWindow;

        /// <summary>
        /// Backing field for WorkflowMenuTitleBar property
        /// </summary>
        private TitleBar fWorkflowMenuTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup0MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup0MenuBar;

        /// <summary>
        /// Backing field for SystemItem1I0XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I0XMenuItem;

        /// <summary>
        /// Backing field for CloseCloseDup0Button property
        /// </summary>
        private Button fCloseCloseDup0Button;

        /// <summary>
        /// Backing field for MenuNameText property
        /// </summary>
        private Text fMenuNameText;

        /// <summary>
        /// Backing field for MenuNameTextBloText property
        /// </summary>
        private Text fMenuNameTextBloText;

        /// <summary>
        /// Backing field for MenuNameEdit property
        /// </summary>
        private Edit fTextBoxa69127a9Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARPane property
        /// </summary>
        private Pane fScrollViewerPARPane;

        /// <summary>
        /// Backing field for ScrollBarVerticScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoScrollBar;

        /// <summary>
        /// Backing field for MenuNameOKButton property
        /// </summary>
        private Button fOKButton8227078Button;

        /// <summary>
        /// Backing field for OKTextBlockDup0Text property
        /// </summary>
        private Text fOKTextBlockDup0Text;

        /// <summary>
        /// Backing field for CancelButtoncd4Button property
        /// </summary>
        private Button fCancelButtoncd4Button;

        /// <summary>
        /// Backing field for CancelTextBlockDup0Text property
        /// </summary>
        private Text fCancelTextBlockDup0Text;

        /// <summary>
        /// Backing field for HelpButtonc8aaeButton property
        /// </summary>
        private Button fHelpButtonc8aaeButton;

        /// <summary>
        /// Backing field for HelpTextBlockDup0Text property
        /// </summary>
        private Text fHelpTextBlockDup0Text;

        /// <summary>
        /// The Ip Address
        /// </summary>
        private string _ipAddress;

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_AddMenuPrompt"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public DSSConfig_AddMenuPrompt(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_AddMenuPrompt"/> class using the default UIAFramework.
        /// </summary>
        public DSSConfig_AddMenuPrompt()
        {
            Desktop = new Desktop();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_AddMenuPrompt"/> class using the default UIAFramework.
        /// </summary>
        /// <param name="address">
        /// The IP address.
        /// </param>
        public DSSConfig_AddMenuPrompt(string address)
        {
            _ipAddress = address;
            Desktop = new Desktop(UIAFramework.ManagedUIA);
        }
        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinWindow
        {
            get
            {
                if (null == fHPDigitalSendinWindow)
                {
                    fHPDigitalSendinWindow = new Window("HPDigitalSendinWindow", Desktop);
                    fHPDigitalSendinWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AB81453F-68AD-4243-ACA8-B4D9362C4ED4");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software Configuration (Server IP Address: {_ipAddress})");
                }

                return fHPDigitalSendinWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window WorkflowMenuWinWindow
        {
            get
            {
                if (null == fWorkflowMenuWinWindow)
                {
                    fWorkflowMenuWinWindow = new Window("WorkflowMenuWinWindow", HPDigitalSendinWindow);
                    fWorkflowMenuWinWindow.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowMenuWinWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fWorkflowMenuWinWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3DB66A34-3266-4b6f-B897-4B426BE14749");
                    fWorkflowMenuWinWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflow Menu");
                }

                return fWorkflowMenuWinWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar WorkflowMenuTitleBar
        {
            get
            {
                if (null == fWorkflowMenuTitleBar)
                {
                    fWorkflowMenuTitleBar = new TitleBar("WorkflowMenuTitleBar", WorkflowMenuWinWindow);
                    fWorkflowMenuTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowMenuTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fWorkflowMenuTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflow Menu");
                }

                return fWorkflowMenuTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyDup0MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup0MenuBar)
                {
                    fSystemMenuBarSyDup0MenuBar = new MenuBar("SystemMenuBarSyDup0MenuBar", WorkflowMenuTitleBar);
                    fSystemMenuBarSyDup0MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyDup0MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1I0XMenuItem
        {
            get
            {
                if (null == fSystemItem1I0XMenuItem)
                {
                    fSystemItem1I0XMenuItem = new MenuItem("SystemItem1I0XMenuItem", SystemMenuBarSyDup0MenuBar);
                    fSystemItem1I0XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I0XMenuItem.UIMap.Index = 0;
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1I0XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseDup0Button
        {
            get
            {
                if (null == fCloseCloseDup0Button)
                {
                    fCloseCloseDup0Button = new Button("CloseCloseDup0Button", WorkflowMenuTitleBar);
                    fCloseCloseDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MenuNameText
        {
            get
            {
                if (null == fMenuNameText)
                {
                    fMenuNameText = new Text("MenuNameText", WorkflowMenuWinWindow);
                    fMenuNameText.UIMap.Scope = UIASeachScope.Children;
                    fMenuNameText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fMenuNameText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Menu Name");
                }

                return fMenuNameText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MenuNameTextBloText
        {
            get
            {
                if (null == fMenuNameTextBloText)
                {
                    fMenuNameTextBloText = new Text("MenuNameTextBloText", MenuNameText);
                    fMenuNameTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fMenuNameTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fMenuNameTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Menu Name");
                }

                return fMenuNameTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit MenuNameEditTextBox
        {
            get
            {
                if (null == fTextBoxa69127a9Edit)
                {
                    fTextBoxa69127a9Edit = new Edit("MenuNameEdit", WorkflowMenuWinWindow);
                    fTextBoxa69127a9Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxa69127a9Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxa69127a9Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"a69127a9-dd59-49f5-a0ac-54fc315ab41a");
                }

                return fTextBoxa69127a9Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARPane
        {
            get
            {
                if (null == fScrollViewerPARPane)
                {
                    fScrollViewerPARPane = new Pane("ScrollViewerPARPane", MenuNameEditTextBox);
                    fScrollViewerPARPane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARPane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticScrollBar
        {
            get
            {
                if (null == fScrollBarVerticScrollBar)
                {
                    fScrollBarVerticScrollBar = new ScrollBar("ScrollBarVerticScrollBar", ScrollViewerPARPane);
                    fScrollBarVerticScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoScrollBar)
                {
                    fScrollBarHorizoScrollBar = new ScrollBar("ScrollBarHorizoScrollBar", ScrollViewerPARPane);
                    fScrollBarHorizoScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MenuNameOKButton
        {
            get
            {
                if (null == fOKButton8227078Button)
                {
                    fOKButton8227078Button = new Button("MenuNameOKButton", WorkflowMenuWinWindow);
                    fOKButton8227078Button.UIMap.Scope = UIASeachScope.Children;
                    fOKButton8227078Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButton8227078Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8227078c-3aac-4655-9b24-08630c95d96d");
                    fOKButton8227078Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButton8227078Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OKTextBlockDup0Text
        {
            get
            {
                if (null == fOKTextBlockDup0Text)
                {
                    fOKTextBlockDup0Text = new Text("OKTextBlockDup0Text", MenuNameOKButton);
                    fOKTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fOKTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOKTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButtoncd4Button
        {
            get
            {
                if (null == fCancelButtoncd4Button)
                {
                    fCancelButtoncd4Button = new Button("CancelButtoncd4Button", WorkflowMenuWinWindow);
                    fCancelButtoncd4Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButtoncd4Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButtoncd4Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cd49fd31-9545-489f-86d3-3e2115434151");
                    fCancelButtoncd4Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButtoncd4Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CancelTextBlockDup0Text
        {
            get
            {
                if (null == fCancelTextBlockDup0Text)
                {
                    fCancelTextBlockDup0Text = new Text("CancelTextBlockDup0Text", CancelButtoncd4Button);
                    fCancelTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fCancelTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCancelTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button HelpButtonc8aaeButton
        {
            get
            {
                if (null == fHelpButtonc8aaeButton)
                {
                    fHelpButtonc8aaeButton = new Button("HelpButtonc8aaeButton", WorkflowMenuWinWindow);
                    fHelpButtonc8aaeButton.UIMap.Scope = UIASeachScope.Children;
                    fHelpButtonc8aaeButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fHelpButtonc8aaeButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c8aae5f5-da35-431d-95e8-f53c2772503d");
                    fHelpButtonc8aaeButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpButtonc8aaeButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HelpTextBlockDup0Text
        {
            get
            {
                if (null == fHelpTextBlockDup0Text)
                {
                    fHelpTextBlockDup0Text = new Text("HelpTextBlockDup0Text", HelpButtonc8aaeButton);
                    fHelpTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fHelpTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHelpTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpTextBlockDup0Text;
            }
        }
    }

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class DSSConfig_AddGroupPrompt
    {
        /// <summary>
        /// Backing field for HPDigitalSendinWindow property
        /// </summary>
        private Window fHPDigitalSendinWindow;

        /// <summary>
        /// Backing field for WorkflowGroupWiWindow property
        /// </summary>
        private Window fWorkflowGroupWiWindow;

        /// <summary>
        /// Backing field for WorkflowGroupTitleBar property
        /// </summary>
        private TitleBar fWorkflowGroupTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup0MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup0MenuBar;

        /// <summary>
        /// Backing field for SystemItem1I0XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I0XMenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizDup0Button property
        /// </summary>
        private Button fMinimizeMinimizDup0Button;

        /// <summary>
        /// Backing field for MaximizeMaximizDup0Button property
        /// </summary>
        private Button fMaximizeMaximizDup0Button;

        /// <summary>
        /// Backing field for CloseCloseDup0Button property
        /// </summary>
        private Button fCloseCloseDup0Button;

        /// <summary>
        /// Backing field for ScrollViewerC9FPane property
        /// </summary>
        private Pane fScrollViewerC9FPane;

        /// <summary>
        /// Backing field for ErrorConflictUsCustom property
        /// </summary>
        private Custom fErrorConflictUsCustom;

        /// <summary>
        /// Backing field for ImageDup0Image property
        /// </summary>
        private Image fImageDup0Image;

        /// <summary>
        /// Backing field for A1GroupNameisinText property
        /// </summary>
        private Text fA1GroupNameisinText;

        /// <summary>
        /// Backing field for GroupNameText property
        /// </summary>
        private Text fGroupNameText;

        /// <summary>
        /// Backing field for GroupNameTextBlText property
        /// </summary>
        private Text fGroupNameTextBlText;

        /// <summary>
        /// Backing field for GroupNameEdit property
        /// </summary>
        private Edit fTextBox60d4f9e0Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARPane property
        /// </summary>
        private Pane fScrollViewerPARPane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup0ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup0ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup0ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup0ScrollBar;

        /// <summary>
        /// Backing field for GroupNameOKButton property
        /// </summary>
        private Button fOKButton317456eButton;

        /// <summary>
        /// Backing field for OKTextBlockDup0Text property
        /// </summary>
        private Text fOKTextBlockDup0Text;

        /// <summary>
        /// Backing field for CancelButtonb80Button property
        /// </summary>
        private Button fCancelButtonb80Button;

        /// <summary>
        /// Backing field for CancelTextBlockDup0Text property
        /// </summary>
        private Text fCancelTextBlockDup0Text;

        /// <summary>
        /// Backing field for HelpButtonbf551Button property
        /// </summary>
        private Button fHelpButtonbf551Button;

        /// <summary>
        /// Backing field for HelpTextBlockDup0Text property
        /// </summary>
        private Text fHelpTextBlockDup0Text;

        /// <summary>
        /// Backing field for ScrollBarVerticDup1ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup1ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup1ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup1ScrollBar;

        private string _ipAddress;

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_AddGroupPrompt"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public DSSConfig_AddGroupPrompt(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_AddGroupPrompt"/> class using the default UIAFramework.
        /// </summary>
        public DSSConfig_AddGroupPrompt()
        {
            Desktop = new Desktop();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_AddGroupPrompt"/> class using the default UIAFramework.
        /// </summary>
        /// <param name="address">
        /// The IP address.
        /// </param>
        public DSSConfig_AddGroupPrompt(string address)
        {
            _ipAddress = address;
            Desktop = new Desktop(UIAFramework.ManagedUIA);
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinWindow
        {
            get
            {
                if (null == fHPDigitalSendinWindow)
                {
                    fHPDigitalSendinWindow = new Window("HPDigitalSendinWindow", Desktop);
                    fHPDigitalSendinWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AB81453F-68AD-4243-ACA8-B4D9362C4ED4");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software Configuration (Server IP Address: {_ipAddress})");
                }

                return fHPDigitalSendinWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window WorkflowGroupWiWindow
        {
            get
            {
                if (null == fWorkflowGroupWiWindow)
                {
                    fWorkflowGroupWiWindow = new Window("WorkflowGroupWiWindow", HPDigitalSendinWindow);
                    fWorkflowGroupWiWindow.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowGroupWiWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fWorkflowGroupWiWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"078B51A0-EBA3-4f7b-BA8A-95F5C9EDE8D6");
                    fWorkflowGroupWiWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflow Group");
                }

                return fWorkflowGroupWiWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar WorkflowGroupTitleBar
        {
            get
            {
                if (null == fWorkflowGroupTitleBar)
                {
                    fWorkflowGroupTitleBar = new TitleBar("WorkflowGroupTitleBar", WorkflowGroupWiWindow);
                    fWorkflowGroupTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowGroupTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fWorkflowGroupTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflow Group");
                }

                return fWorkflowGroupTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyDup0MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup0MenuBar)
                {
                    fSystemMenuBarSyDup0MenuBar = new MenuBar("SystemMenuBarSyDup0MenuBar", WorkflowGroupTitleBar);
                    fSystemMenuBarSyDup0MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyDup0MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1I0XMenuItem
        {
            get
            {
                if (null == fSystemItem1I0XMenuItem)
                {
                    fSystemItem1I0XMenuItem = new MenuItem("SystemItem1I0XMenuItem", SystemMenuBarSyDup0MenuBar);
                    fSystemItem1I0XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I0XMenuItem.UIMap.Index = 0;
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1I0XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MinimizeMinimizDup0Button
        {
            get
            {
                if (null == fMinimizeMinimizDup0Button)
                {
                    fMinimizeMinimizDup0Button = new Button("MinimizeMinimizDup0Button", WorkflowGroupTitleBar);
                    fMinimizeMinimizDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                    fMinimizeMinimizDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                }

                return fMinimizeMinimizDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MaximizeMaximizDup0Button
        {
            get
            {
                if (null == fMaximizeMaximizDup0Button)
                {
                    fMaximizeMaximizDup0Button = new Button("MaximizeMaximizDup0Button", WorkflowGroupTitleBar);
                    fMaximizeMaximizDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fMaximizeMaximizDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Maximize");
                    fMaximizeMaximizDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximize");
                }

                return fMaximizeMaximizDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseDup0Button
        {
            get
            {
                if (null == fCloseCloseDup0Button)
                {
                    fCloseCloseDup0Button = new Button("CloseCloseDup0Button", WorkflowGroupTitleBar);
                    fCloseCloseDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerC9FPane
        {
            get
            {
                if (null == fScrollViewerC9FPane)
                {
                    fScrollViewerC9FPane = new Pane("ScrollViewerC9FPane", WorkflowGroupWiWindow);
                    fScrollViewerC9FPane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerC9FPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerC9FPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"C9FAFB3D-E9DF-4DFB-8332-53CD6BD265F1");
                }

                return fScrollViewerC9FPane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Custom ErrorConflictUsCustom
        {
            get
            {
                if (null == fErrorConflictUsCustom)
                {
                    fErrorConflictUsCustom = new Custom("ErrorConflictUsCustom", ScrollViewerC9FPane);
                    fErrorConflictUsCustom.UIMap.Scope = UIASeachScope.Children;
                    fErrorConflictUsCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ErrorConflictUserControl");
                    fErrorConflictUsCustom.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mErrorConflictUserControl");
                }

                return fErrorConflictUsCustom;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup0Image
        {
            get
            {
                if (null == fImageDup0Image)
                {
                    fImageDup0Image = new Image("ImageDup0Image", ErrorConflictUsCustom);
                    fImageDup0Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup0Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup0Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text A1GroupNameisinText
        {
            get
            {
                if (null == fA1GroupNameisinText)
                {
                    fA1GroupNameisinText = new Text("A1GroupNameisinText", ErrorConflictUsCustom);
                    fA1GroupNameisinText.UIMap.Scope = UIASeachScope.Children;
                    fA1GroupNameisinText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fA1GroupNameisinText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"33CC58FF-B4EB-41e5-B4AC-3A926D5E70A7");
                    fA1GroupNameisinText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"1.  Group Name:  is invalid.");
                }

                return fA1GroupNameisinText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GroupNameText
        {
            get
            {
                if (null == fGroupNameText)
                {
                    fGroupNameText = new Text("GroupNameText", ScrollViewerC9FPane);
                    fGroupNameText.UIMap.Scope = UIASeachScope.Children;
                    fGroupNameText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fGroupNameText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Group Name");
                }

                return fGroupNameText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GroupNameTextBlText
        {
            get
            {
                if (null == fGroupNameTextBlText)
                {
                    fGroupNameTextBlText = new Text("GroupNameTextBlText", GroupNameText);
                    fGroupNameTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fGroupNameTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fGroupNameTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Group Name");
                }

                return fGroupNameTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit GroupNameEditTextBox
        {
            get
            {
                if (null == fTextBox60d4f9e0Edit)
                {
                    fTextBox60d4f9e0Edit = new Edit("GroupNameEdit", ScrollViewerC9FPane);
                    fTextBox60d4f9e0Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox60d4f9e0Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox60d4f9e0Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"60d4f9e0-b5e1-4854-a77e-ae9541d20635");
                }

                return fTextBox60d4f9e0Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARPane
        {
            get
            {
                if (null == fScrollViewerPARPane)
                {
                    fScrollViewerPARPane = new Pane("ScrollViewerPARPane", GroupNameEditTextBox);
                    fScrollViewerPARPane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARPane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup0ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup0ScrollBar)
                {
                    fScrollBarVerticDup0ScrollBar = new ScrollBar("ScrollBarVerticDup0ScrollBar", ScrollViewerPARPane);
                    fScrollBarVerticDup0ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup0ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup0ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup0ScrollBar)
                {
                    fScrollBarHorizoDup0ScrollBar = new ScrollBar("ScrollBarHorizoDup0ScrollBar", ScrollViewerPARPane);
                    fScrollBarHorizoDup0ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup0ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button GroupNameOKButton
        {
            get
            {
                if (null == fOKButton317456eButton)
                {
                    fOKButton317456eButton = new Button("GroupNameOKButton", ScrollViewerC9FPane);
                    fOKButton317456eButton.UIMap.Scope = UIASeachScope.Children;
                    fOKButton317456eButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButton317456eButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"317456e8-66a2-4eb3-a54c-314fd7dbbbbc");
                    fOKButton317456eButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButton317456eButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OKTextBlockDup0Text
        {
            get
            {
                if (null == fOKTextBlockDup0Text)
                {
                    fOKTextBlockDup0Text = new Text("OKTextBlockDup0Text", GroupNameOKButton);
                    fOKTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fOKTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOKTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButtonb80Button
        {
            get
            {
                if (null == fCancelButtonb80Button)
                {
                    fCancelButtonb80Button = new Button("CancelButtonb80Button", ScrollViewerC9FPane);
                    fCancelButtonb80Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButtonb80Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButtonb80Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"b80de880-a8f8-4d03-8c8d-93a40b085232");
                    fCancelButtonb80Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButtonb80Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CancelTextBlockDup0Text
        {
            get
            {
                if (null == fCancelTextBlockDup0Text)
                {
                    fCancelTextBlockDup0Text = new Text("CancelTextBlockDup0Text", CancelButtonb80Button);
                    fCancelTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fCancelTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCancelTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button HelpButtonbf551Button
        {
            get
            {
                if (null == fHelpButtonbf551Button)
                {
                    fHelpButtonbf551Button = new Button("HelpButtonbf551Button", ScrollViewerC9FPane);
                    fHelpButtonbf551Button.UIMap.Scope = UIASeachScope.Children;
                    fHelpButtonbf551Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fHelpButtonbf551Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"bf5511f2-6be4-4e27-b8c8-25d88eb11aba");
                    fHelpButtonbf551Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpButtonbf551Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HelpTextBlockDup0Text
        {
            get
            {
                if (null == fHelpTextBlockDup0Text)
                {
                    fHelpTextBlockDup0Text = new Text("HelpTextBlockDup0Text", HelpButtonbf551Button);
                    fHelpTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fHelpTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHelpTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup1ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup1ScrollBar)
                {
                    fScrollBarVerticDup1ScrollBar = new ScrollBar("ScrollBarVerticDup1ScrollBar", ScrollViewerC9FPane);
                    fScrollBarVerticDup1ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup1ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup1ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup1ScrollBar)
                {
                    fScrollBarHorizoDup1ScrollBar = new ScrollBar("ScrollBarHorizoDup1ScrollBar", ScrollViewerC9FPane);
                    fScrollBarHorizoDup1ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup1ScrollBar;
            }
        }
    }

}

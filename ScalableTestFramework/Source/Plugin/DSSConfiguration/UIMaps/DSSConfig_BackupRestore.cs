//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using TopCat.Core;
using TopCat.TestApi.Enums;

namespace HP.ScalableTest.Plugin.DSSConfiguration.UIMaps
{
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class DSSConfig_PleaseWait
    {
        /// <summary>
        /// Backing field for HPDigitalSendinWindow property
        /// </summary>
        private Window fHPDigitalSendinWindow;

        /// <summary>
        /// Backing field for HPDigitalPleaseWaitWindow property
        /// </summary>
        private Window fHPDigitalPleaseWaitWindow;

        /// <summary>
        /// Backing field for HPDigitalCancelButton property
        /// </summary>
        private Button fHPDigitalCancelButton;

        /// <summary>
        /// The Ip address
        /// </summary>
        private string _ipAddress;

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_PleaseWait"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public DSSConfig_PleaseWait(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_PleaseWait"/> class using the default UIAFramework.
        /// </summary>
        public DSSConfig_PleaseWait()
        {
            Desktop = new Desktop();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_PleaseWait"/> class using the default UIAFramework.
        /// </summary>
        /// <param name="address">
        /// The IP address.
        /// </param>
        public DSSConfig_PleaseWait(string address)
        {
            Desktop = new Desktop(UIAFramework.ManagedUIA);
            _ipAddress = address;
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinWindow
        {
            get
            {
                if (null == fHPDigitalSendinWindow)
                {
                    fHPDigitalSendinWindow = new Window("HPDigitalSendinWindow", Desktop);
                    fHPDigitalSendinWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AB81453F-68AD-4243-ACA8-B4D9362C4ED4");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software Configuration (Server IP Address: {_ipAddress})");
                }

                return fHPDigitalSendinWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalPleaseWaitWindow
        {
            get
            {
                if (null == fHPDigitalPleaseWaitWindow)
                {
                    fHPDigitalPleaseWaitWindow = new Window("HPDigitalPleaseWaitWindow", HPDigitalSendinWindow);
                    fHPDigitalPleaseWaitWindow.UIMap.Scope = UIASeachScope.ChildrenByDescendants;
                    fHPDigitalPleaseWaitWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalPleaseWaitWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"043abccc-e832-45f8-b737-7205a64f2b06");
                }

                return fHPDigitalPleaseWaitWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button HPDigitalCancelButton
        {
            get
            {
                if (null == fHPDigitalCancelButton)
                {
                    fHPDigitalCancelButton = new Button("HPDigitalCancelButton", HPDigitalPleaseWaitWindow);
                    fHPDigitalCancelButton.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalCancelButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"92eaf3bf-0393-4d5d-b088-7a7f379defc6");
                    fHPDigitalCancelButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fHPDigitalCancelButton;
            }
        }


    }

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class DSSConfig_CustomMessageBox
    {
        /// <summary>
        /// Backing field for HPDigitalSendinWindow property
        /// </summary>
        private Window fHPDigitalSendinWindow;

        /// <summary>
        /// Backing field for HPDigitalCustomMessageWindow property
        /// </summary>
        private Window fHPDigitalCustomMessageWindow;

        /// <summary>
        /// Backing field for HPDigitalNoButton property
        /// </summary>
        private Button fHPDigitalNoButton;

        /// <summary>
        /// Backing field for HPDigitalYesButton property
        /// </summary>
        private Button fHPDigitalYesButton;

        /// <summary>
        /// The Ip Address
        /// </summary>
        private string _ipAddress;

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_CustomMessageBox"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public DSSConfig_CustomMessageBox(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_CustomMessageBox"/> class using the default UIAFramework.
        /// </summary>
        public DSSConfig_CustomMessageBox()
        {
            Desktop = new Desktop();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_CustomMessageBox"/> class using the default UIAFramework.
        /// </summary>
        /// <param name="address">
        /// The IP address.
        /// </param>
        public DSSConfig_CustomMessageBox(string address)
        {
            Desktop = new Desktop(UIAFramework.ManagedUIA);
            _ipAddress = address;
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinWindow
        {
            get
            {
                if (null == fHPDigitalSendinWindow)
                {
                    fHPDigitalSendinWindow = new Window("HPDigitalSendinWindow", Desktop);
                    fHPDigitalSendinWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AB81453F-68AD-4243-ACA8-B4D9362C4ED4");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software Configuration (Server IP Address: {_ipAddress})");
                }

                return fHPDigitalSendinWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalCustomMessageWindow
        {
            get
            {
                if (null == fHPDigitalCustomMessageWindow)
                {
                    fHPDigitalCustomMessageWindow = new Window("HPDigitalCustomMessageWindow", HPDigitalSendinWindow);
                    fHPDigitalCustomMessageWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalCustomMessageWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalCustomMessageWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"336E3250-8749-475d-952F-E36223E36750");
                }

                return fHPDigitalCustomMessageWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button HPDigitalNoButton
        {
            get
            {
                if (null == fHPDigitalNoButton)
                {
                    fHPDigitalNoButton = new Button("HPDigitalNoButton", fHPDigitalCustomMessageWindow);
                    fHPDigitalNoButton.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalNoButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"F5DCA28C-C6CD-4bdd-B906-8ED94DC15765");
                    fHPDigitalNoButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"No");
                }

                return fHPDigitalNoButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button HPDigitalYesButton
        {
            get
            {
                if (null == fHPDigitalYesButton)
                {
                    fHPDigitalYesButton = new Button("HPDigitalYesButton", fHPDigitalCustomMessageWindow);
                    fHPDigitalYesButton.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalYesButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AE4B0C61-2DEE-4974-B517-4A1388A3F4CC");
                    fHPDigitalYesButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Yes");
                }

                return fHPDigitalYesButton;
            }
        }


    }
    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class DSSConfig_Backup
    {
        /// <summary>
        /// Backing field for HPDigitalSendinWindow property
        /// </summary>
        private Window fHPDigitalSendinWindow;

        /// <summary>
        /// Backing field for DSSBackupWindowWindow property
        /// </summary>
        private Window fDSSBackupWindowWindow;

        /// <summary>
        /// Backing field for DSSBackup32770Window property
        /// </summary>
        private Window fDSSBackup32770Window;

        /// <summary>
        /// Backing field for DUIViewWndClassPane property
        /// </summary>
        private Pane fDUIViewWndClassPane;

        /// <summary>
        /// Backing field for ExplorerPaneHWNPane property
        /// </summary>
        private Pane fExplorerPaneHWNPane;

        /// <summary>
        /// Backing field for FolderLayoutPanPane property
        /// </summary>
        private Pane fFolderLayoutPanPane;

        /// <summary>
        /// Backing field for DetailsPanePrevPane property
        /// </summary>
        private Pane fDetailsPanePrevPane;

        /// <summary>
        /// Backing field for FilenameCIDLabeText property
        /// </summary>
        private Text fFilenameCIDLabeText;

        /// <summary>
        /// Backing field for FilenameAppContComboBox property
        /// </summary>
        private ComboBox fFilenameAppContComboBox;

        /// <summary>
        /// Backing field for FilenameEdit100Edit property
        /// </summary>
        private Edit fFilenameEdit100Edit;

        /// <summary>
        /// Backing field for FilenameComboLBList property
        /// </summary>
        private List fFilenameComboLBList;

        /// <summary>
        /// Backing field for DropDownButtonDDup0Button property
        /// </summary>
        private Button fDropDownButtonDDup0Button;

        /// <summary>
        /// Backing field for SaveastypeCIDLaText property
        /// </summary>
        private Text fSaveastypeCIDLaText;

        /// <summary>
        /// Backing field for SaveastypeAppCoComboBox property
        /// </summary>
        private ComboBox fSaveastypeAppCoComboBox;

        /// <summary>
        /// Backing field for SaveFieldsSaveDTree property
        /// </summary>
        private Tree fSaveFieldsSaveDTree;

        /// <summary>
        /// Backing field for SaveButton1Button property
        /// </summary>
        private Button fSaveButton1Button;

        /// <summary>
        /// Backing field for CancelButton2Button property
        /// </summary>
        private Button fCancelButton2Button;

        /// <summary>
        /// Backing field for DSSBackupDup0TitleBar property
        /// </summary>
        private TitleBar fDSSBackupDup0TitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyI0XMenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyI0XMenuBar;

        /// <summary>
        /// Backing field for SystemItem1I0XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I0XMenuItem;

        /// <summary>
        /// Backing field for CloseCloseI0XButton property
        /// </summary>
        private Button fCloseCloseI0XButton;

        /// <summary>
        /// Backing field for FileNameText property
        /// </summary>
        private Text fFileNameText;

        /// <summary>
        /// Backing field for FileNameTextBloText property
        /// </summary>
        private Text fFileNameTextBloText;

        /// <summary>
        /// Backing field for TextBox5cc31a33Edit property
        /// </summary>
        private Edit fTextBox5cc31a33Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup0Pane property
        /// </summary>
        private Pane fScrollViewerPARDup0Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI0XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI0XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI0XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI0XScrollBar;

        /// <summary>
        /// Backing field for BrowseButton property
        /// </summary>
        private Button fBrowseButtonADEButton;

        /// <summary>
        /// Backing field for BrowseTextBlockText property
        /// </summary>
        private Text fBrowseTextBlockText;

        /// <summary>
        /// Backing field for EncryptBackupCheckBox property
        /// </summary>
        private CheckBox fEncryptbackupfiCheckBox;

        /// <summary>
        /// Backing field for EncryptbackupfiText property
        /// </summary>
        private Text fEncryptbackupfiText;

        /// <summary>
        /// Backing field for EncryptionKeyText property
        /// </summary>
        private Text fEncryptionKeyText;

        /// <summary>
        /// Backing field for EncryptionKeyTeText property
        /// </summary>
        private Text fEncryptionKeyTeText;

        /// <summary>
        /// Backing field for EncryptionKeyTextBoxEdit property
        /// </summary>
        private Edit fPasswordBox96C9Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup1Pane property
        /// </summary>
        private Pane fScrollViewerPARDup1Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI1XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI1XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI1XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI1XScrollBar;

        /// <summary>
        /// Backing field for BackupOKButton property
        /// </summary>
        private Button fOKButton6EC025BButton;

        /// <summary>
        /// Backing field for OKTextBlockDup0Text property
        /// </summary>
        private Text fOKTextBlockDup0Text;

        /// <summary>
        /// Backing field for CancelButtonE82Button property
        /// </summary>
        private Button fCancelButtonE82Button;

        /// <summary>
        /// Backing field for CancelTextBlockDup0Text property
        /// </summary>
        private Text fCancelTextBlockDup0Text;

        private string _ipAddress;

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_Backup"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public DSSConfig_Backup(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_Backup"/> class using the default UIAFramework.
        /// </summary>
        public DSSConfig_Backup()
        {
            Desktop = new Desktop();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_Backup"/> class using the default UIAFramework.
        /// </summary>
        /// <param name="address">
        /// The IP address.
        /// </param>
        public DSSConfig_Backup(string address)
        {
            Desktop = new Desktop(UIAFramework.ManagedUIA);
            _ipAddress = address;
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Checks for screen avalability
        /// </summary>
        /// <param name="timeout">
        /// The amount of time allowed for the screen avalability
        /// </param>     
        public bool WaitForAvailable(int timeout)
        {
            if (HPDigitalSendinWindow.WaitForAvailable(timeout) == ResultCode.Passed)
            {
                if (DSSBackupWindowWindow.WaitForAvailable(timeout) == ResultCode.Passed)
                {
                    return true;
                }
            }
            return false;
        }
        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinWindow
        {
            get
            {
                if (null == fHPDigitalSendinWindow)
                {
                    fHPDigitalSendinWindow = new Window("HPDigitalSendinWindow", Desktop);
                    fHPDigitalSendinWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AB81453F-68AD-4243-ACA8-B4D9362C4ED4");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software Configuration (Server IP Address: {_ipAddress})");
                }

                return fHPDigitalSendinWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window DSSBackupWindowWindow
        {
            get
            {
                if (null == fDSSBackupWindowWindow)
                {
                    fDSSBackupWindowWindow = new Window("DSSBackupWindowWindow", HPDigitalSendinWindow);
                    fDSSBackupWindowWindow.UIMap.Scope = UIASeachScope.Children;
                    fDSSBackupWindowWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fDSSBackupWindowWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"CCAD1E3A-5EC3-494f-9497-943D65A52F7D");
                    fDSSBackupWindowWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DSS Backup");
                }

                return fDSSBackupWindowWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window DSSBackup32770Window
        {
            get
            {
                if (null == fDSSBackup32770Window)
                {
                    fDSSBackup32770Window = new Window("DSSBackup32770Window", DSSBackupWindowWindow);
                    fDSSBackup32770Window.UIMap.Scope = UIASeachScope.Children;
                    fDSSBackup32770Window.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"#32770");
                    fDSSBackup32770Window.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DSS Backup");
                }

                return fDSSBackup32770Window;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane DUIViewWndClassPane
        {
            get
            {
                if (null == fDUIViewWndClassPane)
                {
                    fDUIViewWndClassPane = new Pane("DUIViewWndClassPane", DSSBackup32770Window);
                    fDUIViewWndClassPane.UIMap.Scope = UIASeachScope.Children;
                    fDUIViewWndClassPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"DUIViewWndClassName");
                }

                return fDUIViewWndClassPane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ExplorerPaneHWNPane
        {
            get
            {
                if (null == fExplorerPaneHWNPane)
                {
                    fExplorerPaneHWNPane = new Pane("ExplorerPaneHWNPane", DUIViewWndClassPane);
                    fExplorerPaneHWNPane.UIMap.Scope = UIASeachScope.Children;
                    fExplorerPaneHWNPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"HWNDView");
                    fExplorerPaneHWNPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"main");
                    fExplorerPaneHWNPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Explorer Pane");
                }

                return fExplorerPaneHWNPane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane FolderLayoutPanPane
        {
            get
            {
                if (null == fFolderLayoutPanPane)
                {
                    fFolderLayoutPanPane = new Pane("FolderLayoutPanPane", ExplorerPaneHWNPane);
                    fFolderLayoutPanPane.UIMap.Scope = UIASeachScope.Children;
                    fFolderLayoutPanPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Element");
                    fFolderLayoutPanPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"FolderLayoutContainer");
                    fFolderLayoutPanPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Folder Layout Pane");
                }

                return fFolderLayoutPanPane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane DetailsPanePrevPane
        {
            get
            {
                if (null == fDetailsPanePrevPane)
                {
                    fDetailsPanePrevPane = new Pane("DetailsPanePrevPane", FolderLayoutPanPane);
                    fDetailsPanePrevPane.UIMap.Scope = UIASeachScope.Children;
                    fDetailsPanePrevPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"PreviewBackground");
                    fDetailsPanePrevPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"BackgroundClear");
                    fDetailsPanePrevPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Details Pane");
                }

                return fDetailsPanePrevPane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FilenameCIDLabeText
        {
            get
            {
                if (null == fFilenameCIDLabeText)
                {
                    fFilenameCIDLabeText = new Text("FilenameCIDLabeText", DetailsPanePrevPane);
                    fFilenameCIDLabeText.UIMap.Scope = UIASeachScope.Children;
                    fFilenameCIDLabeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CIDLabel");
                    fFilenameCIDLabeText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SaveDialogLabel");
                    fFilenameCIDLabeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"File name:");
                }

                return fFilenameCIDLabeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox FilenameAppContComboBox
        {
            get
            {
                if (null == fFilenameAppContComboBox)
                {
                    fFilenameAppContComboBox = new ComboBox("FilenameAppContComboBox", DetailsPanePrevPane);
                    fFilenameAppContComboBox.UIMap.Scope = UIASeachScope.Children;
                    fFilenameAppContComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"AppControlHost");
                    fFilenameAppContComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"FileNameControlHost");
                    fFilenameAppContComboBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"File name:");
                }

                return fFilenameAppContComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit FilenameEdit100Edit
        {
            get
            {
                if (null == fFilenameEdit100Edit)
                {
                    fFilenameEdit100Edit = new Edit("FilenameEdit100Edit", FilenameAppContComboBox);
                    fFilenameEdit100Edit.UIMap.Scope = UIASeachScope.Children;
                    fFilenameEdit100Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Edit");
                    fFilenameEdit100Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1001");
                    fFilenameEdit100Edit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"File name:");
                }

                return fFilenameEdit100Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public List FilenameComboLBList
        {
            get
            {
                if (null == fFilenameComboLBList)
                {
                    fFilenameComboLBList = new List("FilenameComboLBList", FilenameAppContComboBox);
                    fFilenameComboLBList.UIMap.Scope = UIASeachScope.Children;
                    fFilenameComboLBList.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboLBox");
                    fFilenameComboLBList.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ListBox");
                    fFilenameComboLBList.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"File name:");
                }

                return fFilenameComboLBList;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button DropDownButtonDDup0Button
        {
            get
            {
                if (null == fDropDownButtonDDup0Button)
                {
                    fDropDownButtonDDup0Button = new Button("DropDownButtonDDup0Button", FilenameAppContComboBox);
                    fDropDownButtonDDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fDropDownButtonDDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"DropDown");
                    fDropDownButtonDDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Drop Down Button");
                }

                return fDropDownButtonDDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SaveastypeCIDLaText
        {
            get
            {
                if (null == fSaveastypeCIDLaText)
                {
                    fSaveastypeCIDLaText = new Text("SaveastypeCIDLaText", DetailsPanePrevPane);
                    fSaveastypeCIDLaText.UIMap.Scope = UIASeachScope.Children;
                    fSaveastypeCIDLaText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CIDLabel");
                    fSaveastypeCIDLaText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SaveDialogLabel");
                    fSaveastypeCIDLaText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Save as type:");
                }

                return fSaveastypeCIDLaText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox SaveastypeAppCoComboBox
        {
            get
            {
                if (null == fSaveastypeAppCoComboBox)
                {
                    fSaveastypeAppCoComboBox = new ComboBox("SaveastypeAppCoComboBox", DetailsPanePrevPane);
                    fSaveastypeAppCoComboBox.UIMap.Scope = UIASeachScope.Children;
                    fSaveastypeAppCoComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"AppControlHost");
                    fSaveastypeAppCoComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"FileTypeControlHost");
                    fSaveastypeAppCoComboBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Save as type:");
                }

                return fSaveastypeAppCoComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Tree SaveFieldsSaveDTree
        {
            get
            {
                if (null == fSaveFieldsSaveDTree)
                {
                    fSaveFieldsSaveDTree = new Tree("SaveFieldsSaveDTree", DetailsPanePrevPane);
                    fSaveFieldsSaveDTree.UIMap.Scope = UIASeachScope.Children;
                    fSaveFieldsSaveDTree.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"SaveDialogPreviewMetadataInner");
                    fSaveFieldsSaveDTree.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SaveDialogPreviewMetadataInner");
                    fSaveFieldsSaveDTree.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Save Fields");
                }

                return fSaveFieldsSaveDTree;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button SaveButton1Button
        {
            get
            {
                if (null == fSaveButton1Button)
                {
                    fSaveButton1Button = new Button("SaveButton1Button", DSSBackup32770Window);
                    fSaveButton1Button.UIMap.Scope = UIASeachScope.Children;
                    fSaveButton1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fSaveButton1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1");
                    fSaveButton1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Save");
                }

                return fSaveButton1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButton2Button
        {
            get
            {
                if (null == fCancelButton2Button)
                {
                    fCancelButton2Button = new Button("CancelButton2Button", DSSBackup32770Window);
                    fCancelButton2Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton2Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButton2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2");
                    fCancelButton2Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButton2Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar DSSBackupDup0TitleBar
        {
            get
            {
                if (null == fDSSBackupDup0TitleBar)
                {
                    fDSSBackupDup0TitleBar = new TitleBar("DSSBackupDup0TitleBar", DSSBackup32770Window);
                    fDSSBackupDup0TitleBar.UIMap.Scope = UIASeachScope.Children;
                    fDSSBackupDup0TitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fDSSBackupDup0TitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DSS Backup");
                }

                return fDSSBackupDup0TitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyI0XMenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyI0XMenuBar)
                {
                    fSystemMenuBarSyI0XMenuBar = new MenuBar("SystemMenuBarSyI0XMenuBar", DSSBackupDup0TitleBar);
                    fSystemMenuBarSyI0XMenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyI0XMenuBar.UIMap.Index = 0;
                    fSystemMenuBarSyI0XMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyI0XMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyI0XMenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1I0XMenuItem
        {
            get
            {
                if (null == fSystemItem1I0XMenuItem)
                {
                    fSystemItem1I0XMenuItem = new MenuItem("SystemItem1I0XMenuItem", SystemMenuBarSyI0XMenuBar);
                    fSystemItem1I0XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I0XMenuItem.UIMap.Index = 0;
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1I0XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseI0XButton
        {
            get
            {
                if (null == fCloseCloseI0XButton)
                {
                    fCloseCloseI0XButton = new Button("CloseCloseI0XButton", DSSBackupDup0TitleBar);
                    fCloseCloseI0XButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseI0XButton.UIMap.Index = 0;
                    fCloseCloseI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseI0XButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FileNameText
        {
            get
            {
                if (null == fFileNameText)
                {
                    fFileNameText = new Text("FileNameText", DSSBackupWindowWindow);
                    fFileNameText.UIMap.Scope = UIASeachScope.Children;
                    fFileNameText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fFileNameText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"File Name");
                }

                return fFileNameText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FileNameTextBloText
        {
            get
            {
                if (null == fFileNameTextBloText)
                {
                    fFileNameTextBloText = new Text("FileNameTextBloText", FileNameText);
                    fFileNameTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fFileNameTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFileNameTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"File Name");
                }

                return fFileNameTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBox5cc31a33Edit
        {
            get
            {
                if (null == fTextBox5cc31a33Edit)
                {
                    fTextBox5cc31a33Edit = new Edit("TextBox5cc31a33Edit", DSSBackupWindowWindow);
                    fTextBox5cc31a33Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox5cc31a33Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox5cc31a33Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5cc31a33-5031-4a59-9ba9-3ce58e2f7859");
                }

                return fTextBox5cc31a33Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup0Pane
        {
            get
            {
                if (null == fScrollViewerPARDup0Pane)
                {
                    fScrollViewerPARDup0Pane = new Pane("ScrollViewerPARDup0Pane", TextBox5cc31a33Edit);
                    fScrollViewerPARDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI0XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI0XScrollBar)
                {
                    fScrollBarVerticI0XScrollBar = new ScrollBar("ScrollBarVerticI0XScrollBar", ScrollViewerPARDup0Pane);
                    fScrollBarVerticI0XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI0XScrollBar.UIMap.Index = 0;
                    fScrollBarVerticI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI0XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI0XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI0XScrollBar)
                {
                    fScrollBarHorizoI0XScrollBar = new ScrollBar("ScrollBarHorizoI0XScrollBar", ScrollViewerPARDup0Pane);
                    fScrollBarHorizoI0XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI0XScrollBar.UIMap.Index = 0;
                    fScrollBarHorizoI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI0XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button BrowseButton
        {
            get
            {
                if (null == fBrowseButtonADEButton)
                {
                    fBrowseButtonADEButton = new Button("BrowseButton", DSSBackupWindowWindow);
                    fBrowseButtonADEButton.UIMap.Scope = UIASeachScope.Children;
                    fBrowseButtonADEButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fBrowseButtonADEButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ADEC7572-9B8E-4eac-A9D1-9D8437794357");
                    fBrowseButtonADEButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Browse");
                }

                return fBrowseButtonADEButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text BrowseTextBlockText
        {
            get
            {
                if (null == fBrowseTextBlockText)
                {
                    fBrowseTextBlockText = new Text("BrowseTextBlockText", BrowseButton);
                    fBrowseTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fBrowseTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fBrowseTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Browse");
                }

                return fBrowseTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox EncryptBackupCheckBox
        {
            get
            {
                if (null == fEncryptbackupfiCheckBox)
                {
                    fEncryptbackupfiCheckBox = new CheckBox("EncryptBackupCheckBox", DSSBackupWindowWindow);
                    fEncryptbackupfiCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fEncryptbackupfiCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fEncryptbackupfiCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"31D24F6F-C9A7-4327-9F6F-F56A4CA02AD4");
                }

                return fEncryptbackupfiCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EncryptbackupfiText
        {
            get
            {
                if (null == fEncryptbackupfiText)
                {
                    fEncryptbackupfiText = new Text("EncryptbackupfiText", EncryptBackupCheckBox);
                    fEncryptbackupfiText.UIMap.Scope = UIASeachScope.Children;
                    fEncryptbackupfiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEncryptbackupfiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Encrypt backup file (if not encrypted, passwords will not be saved)");
                }

                return fEncryptbackupfiText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EncryptionKeyText
        {
            get
            {
                if (null == fEncryptionKeyText)
                {
                    fEncryptionKeyText = new Text("EncryptionKeyText", DSSBackupWindowWindow);
                    fEncryptionKeyText.UIMap.Scope = UIASeachScope.Children;
                    fEncryptionKeyText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fEncryptionKeyText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Encryption Key");
                }

                return fEncryptionKeyText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EncryptionKeyTeText
        {
            get
            {
                if (null == fEncryptionKeyTeText)
                {
                    fEncryptionKeyTeText = new Text("EncryptionKeyTeText", EncryptionKeyText);
                    fEncryptionKeyTeText.UIMap.Scope = UIASeachScope.Children;
                    fEncryptionKeyTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEncryptionKeyTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Encryption Key");
                }

                return fEncryptionKeyTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit EncryptionKeyTextBoxEdit
        {
            get
            {
                if (null == fPasswordBox96C9Edit)
                {
                    fPasswordBox96C9Edit = new Edit("EncryptionKeyTextBoxEdit", DSSBackupWindowWindow);
                    fPasswordBox96C9Edit.UIMap.Scope = UIASeachScope.Children;
                    fPasswordBox96C9Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"PasswordBox");
                    fPasswordBox96C9Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"96C9E6EA-4A6D-4FC9-9378-D543DDAF3CFD");
                }

                return fPasswordBox96C9Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup1Pane
        {
            get
            {
                if (null == fScrollViewerPARDup1Pane)
                {
                    fScrollViewerPARDup1Pane = new Pane("ScrollViewerPARDup1Pane", EncryptionKeyTextBoxEdit);
                    fScrollViewerPARDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI1XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI1XScrollBar)
                {
                    fScrollBarVerticI1XScrollBar = new ScrollBar("ScrollBarVerticI1XScrollBar", ScrollViewerPARDup1Pane);
                    fScrollBarVerticI1XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI1XScrollBar.UIMap.Index = 1;
                    fScrollBarVerticI1XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI1XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI1XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI1XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI1XScrollBar)
                {
                    fScrollBarHorizoI1XScrollBar = new ScrollBar("ScrollBarHorizoI1XScrollBar", ScrollViewerPARDup1Pane);
                    fScrollBarHorizoI1XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI1XScrollBar.UIMap.Index = 1;
                    fScrollBarHorizoI1XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI1XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI1XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button BackupOKButton
        {
            get
            {
                if (null == fOKButton6EC025BButton)
                {
                    fOKButton6EC025BButton = new Button("BackupOKButton", DSSBackupWindowWindow);
                    fOKButton6EC025BButton.UIMap.Scope = UIASeachScope.Children;
                    fOKButton6EC025BButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButton6EC025BButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6EC025B5-5E02-42B2-A703-D83683A37886");
                    fOKButton6EC025BButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButton6EC025BButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OKTextBlockDup0Text
        {
            get
            {
                if (null == fOKTextBlockDup0Text)
                {
                    fOKTextBlockDup0Text = new Text("OKTextBlockDup0Text", BackupOKButton);
                    fOKTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fOKTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOKTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButtonE82Button
        {
            get
            {
                if (null == fCancelButtonE82Button)
                {
                    fCancelButtonE82Button = new Button("CancelButtonE82Button", DSSBackupWindowWindow);
                    fCancelButtonE82Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButtonE82Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButtonE82Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"E82887DC-1388-4033-A714-1CD001885C16");
                    fCancelButtonE82Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButtonE82Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CancelTextBlockDup0Text
        {
            get
            {
                if (null == fCancelTextBlockDup0Text)
                {
                    fCancelTextBlockDup0Text = new Text("CancelTextBlockDup0Text", CancelButtonE82Button);
                    fCancelTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fCancelTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCancelTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelTextBlockDup0Text;
            }
        }
    }

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class DSSConfig_Restore
    {
        /// <summary>
        /// Backing field for HPDigitalSendinWindow property
        /// </summary>
        private Window fHPDigitalSendinWindow;

        /// <summary>
        /// Backing field for DSSRestoreWindoWindow property
        /// </summary>
        private Window fDSSRestoreWindoWindow;

        /// <summary>
        /// Backing field for DSSRestore32770Window property
        /// </summary>
        private Window fDSSRestore32770Window;

        /// <summary>
        /// Backing field for DSSRestoreTitleBar property
        /// </summary>
        private TitleBar fDSSRestoreTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup0MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup0MenuBar;

        /// <summary>
        /// Backing field for SystemItem1I0XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I0XMenuItem;

        /// <summary>
        /// Backing field for CloseCloseDup0Button property
        /// </summary>
        private Button fCloseCloseDup0Button;

        /// <summary>
        /// Backing field for EnterthepassworDup0Text property
        /// </summary>
        private Text fEnterthepassworDup0Text;

        /// <summary>
        /// Backing field for EnterthepassworDup1Text property
        /// </summary>
        private Text fEnterthepassworDup1Text;

        /// <summary>
        /// Backing field for EncryptionKeyTextBoxEdit property
        /// </summary>
        private Edit fPasswordBox1D80Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup0Pane property
        /// </summary>
        private Pane fScrollViewerPARDup0Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI0XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI0XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI0XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI0XScrollBar;

        /// <summary>
        /// Backing field for ImageImage property
        /// </summary>
        private Image fImageImage;

        /// <summary>
        /// Backing field for ThisbackupfiledText property
        /// </summary>
        private Text fThisbackupfiledText;

        /// <summary>
        /// Backing field for PasswordswillhaText property
        /// </summary>
        private Text fPasswordswillhaText;

        /// <summary>
        /// Backing field for DssSettingsGrouGroup property
        /// </summary>
        private Group fDssSettingsGrouGroup;

        /// <summary>
        /// Backing field for DssSettingsTextText property
        /// </summary>
        private Text fDssSettingsTextText;

        /// <summary>
        /// Backing field for FullRestoreRadioButton property
        /// </summary>
        private RadioButton fRestoreallSettiRadioButton;

        /// <summary>
        /// Backing field for RestoreallSettiText property
        /// </summary>
        private Text fRestoreallSettiText;

        /// <summary>
        /// Backing field for AlldeviceslisteDup0Text property
        /// </summary>
        private Text fAlldeviceslisteDup0Text;

        /// <summary>
        /// Backing field for AlldeviceslisteDup1Text property
        /// </summary>
        private Text fAlldeviceslisteDup1Text;

        /// <summary>
        /// Backing field for SelectiveRestoreRadioButton property
        /// </summary>
        private RadioButton fSelectiveRestorRadioButton;

        /// <summary>
        /// Backing field for SelectiveRestorText property
        /// </summary>
        private Text fSelectiveRestorText;

        /// <summary>
        /// Backing field for GeneralSettingsCheckbox property
        /// </summary>
        private CheckBox fGeneralCheckBoxCheckBox;

        /// <summary>
        /// Backing field for GeneralTextBlocDup0Text property
        /// </summary>
        private Text fGeneralTextBlocDup0Text;

        /// <summary>
        /// Backing field for AuthenticationCheckbox property
        /// </summary>
        private CheckBox fAuthenticationCCheckBox;

        /// <summary>
        /// Backing field for AuthenticationTDup0Text property
        /// </summary>
        private Text fAuthenticationTDup0Text;

        /// <summary>
        /// Backing field for EmailCheckbox property
        /// </summary>
        private CheckBox fEmailCheckBox04CheckBox;

        /// <summary>
        /// Backing field for EmailTextBlockDup0Text property
        /// </summary>
        private Text fEmailTextBlockDup0Text;

        /// <summary>
        /// Backing field for FaxCheckbox property
        /// </summary>
        private CheckBox fFaxCheckBox1817CheckBox;

        /// <summary>
        /// Backing field for FaxTextBlockDup0Text property
        /// </summary>
        private Text fFaxTextBlockDup0Text;

        /// <summary>
        /// Backing field for SendFolderCheckbox property
        /// </summary>
        private CheckBox fSendtoFolderCheDup0CheckBox;

        /// <summary>
        /// Backing field for SendtoFolderTexI0XText property
        /// </summary>
        private Text fSendtoFolderTexI0XText;

        /// <summary>
        /// Backing field for WorkflowCheckbox property
        /// </summary>
        private CheckBox fWorkflowsCheckBDup0CheckBox;

        /// <summary>
        /// Backing field for WorkflowsTextBlI0XText property
        /// </summary>
        private Text fWorkflowsTextBlI0XText;

        /// <summary>
        /// Backing field for AddressingCheckbox property
        /// </summary>
        private CheckBox fAddressingCheckCheckBox;

        /// <summary>
        /// Backing field for AddressingTextBDup0Text property
        /// </summary>
        private Text fAddressingTextBDup0Text;

        /// <summary>
        /// Backing field for AddressbookCheckbox property
        /// </summary>
        private CheckBox fAddressBooksCheDup0CheckBox;

        /// <summary>
        /// Backing field for AddressBooksTexI0XText property
        /// </summary>
        private Text fAddressBooksTexI0XText;

        /// <summary>
        /// Backing field for DeviceCheckbox property
        /// </summary>
        private CheckBox fDevicesCheckBoxCheckBox;

        /// <summary>
        /// Backing field for DevicesTextBlocText property
        /// </summary>
        private Text fDevicesTextBlocText;

        /// <summary>
        /// Backing field for DeviceGroupsCheckbox property
        /// </summary>
        private CheckBox fGroupsCheckBox3CheckBox;

        /// <summary>
        /// Backing field for GroupsTextBlockDup0Text property
        /// </summary>
        private Text fGroupsTextBlockDup0Text;

        /// <summary>
        /// Backing field for TemplateCheckbox property
        /// </summary>
        private CheckBox fTemplatesCheckBDup0CheckBox;

        /// <summary>
        /// Backing field for TemplatesTextBlI0XText property
        /// </summary>
        private Text fTemplatesTextBlI0XText;

        /// <summary>
        /// Backing field for TemplateGroupsCheckbox property
        /// </summary>
        private CheckBox fGroupsCheckBox7CheckBox;

        /// <summary>
        /// Backing field for GroupsTextBlockDup1Text property
        /// </summary>
        private Text fGroupsTextBlockDup1Text;

        /// <summary>
        /// Backing field for MergeSettingsGrGroup property
        /// </summary>
        private Group fMergeSettingsGrGroup;

        /// <summary>
        /// Backing field for MergeSettingsTeText property
        /// </summary>
        private Text fMergeSettingsTeText;

        /// <summary>
        /// Backing field for MergeSendToFoldercheckBox property
        /// </summary>
        private CheckBox fSendtoFolderCheDup1CheckBox;

        /// <summary>
        /// Backing field for SendtoFolderTexI1XText property
        /// </summary>
        private Text fSendtoFolderTexI1XText;

        /// <summary>
        /// Backing field for MergeWorkflowcheckBox property
        /// </summary>
        private CheckBox fWorkflowsCheckBDup1CheckBox;

        /// <summary>
        /// Backing field for WorkflowsTextBlI1XText property
        /// </summary>
        private Text fWorkflowsTextBlI1XText;

        /// <summary>
        /// Backing field for MergeTemplatecheckBox property
        /// </summary>
        private CheckBox fTemplatesCheckBDup1CheckBox;

        /// <summary>
        /// Backing field for TemplatesTextBlI1XText property
        /// </summary>
        private Text fTemplatesTextBlI1XText;

        /// <summary>
        /// Backing field for MergeEmailcheckBox property
        /// </summary>
        private CheckBox fEmailCheckBox08CheckBox;

        /// <summary>
        /// Backing field for EmailTextBlockDup1Text property
        /// </summary>
        private Text fEmailTextBlockDup1Text;

        /// <summary>
        /// Backing field for MergeAddressbookcheckBox property
        /// </summary>
        private CheckBox fAddressBooksCheDup1CheckBox;

        /// <summary>
        /// Backing field for AddressBooksTexI1XText property
        /// </summary>
        private Text fAddressBooksTexI1XText;

        /// <summary>
        /// Backing field for RestoreOKButton property
        /// </summary>
        private Button fOKButton3b5feb6Button;

        /// <summary>
        /// Backing field for OKTextBlockDup0Text property
        /// </summary>
        private Text fOKTextBlockDup0Text;

        /// <summary>
        /// Backing field for CancelButtonE82Button property
        /// </summary>
        private Button fCancelButtonE82Button;

        /// <summary>
        /// Backing field for CancelTextBlockDup0Text property
        /// </summary>
        private Text fCancelTextBlockDup0Text;

        /// <summary>
        /// Backing field for OKButtonAE4B0C6Button property
        /// </summary>
        private Button fOKButtonAE4B0C6Button;

        /// <summary>
        /// Backing field for FilenameComboBoPane property
        /// </summary>
        private Pane fFilenameComboBoPane;

        /// <summary>
        /// Backing field for FilenameComboBoComboBox property
        /// </summary>
        private ComboBox fFilenameComboBoComboBox;

        /// <summary>
        /// Backing field for FilenameEdit114Edit property
        /// </summary>
        private Edit fFilenameEdit114Edit;

        /// <summary>
        /// Backing field for OpenButton1Button property
        /// </summary>
        private Button fOpenButton1Button;

        /// <summary>
        /// Backing field for CancelButton2Button property
        /// </summary>
        private Button fCancelButton2Button;

        /// <summary>
        /// Backing field for DSSConfiguratioPane property
        /// </summary>
        private Pane fDSSConfiguratioPane;

        /// <summary>
        /// The Ip Address
        /// </summary>
        private string _ipAddress;

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_Restore"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public DSSConfig_Restore(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_Restore"/> class using the default UIAFramework.
        /// </summary>
        public DSSConfig_Restore()
        {
            Desktop = new Desktop();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_Restore"/> class using the default UIAFramework.
        /// </summary>
        /// <param name="address">
        /// The IP address.
        /// </param>
        public DSSConfig_Restore(string address)
        {
            Desktop = new Desktop();
            _ipAddress = address;
        }

        /// <summary>
        /// Checks for screen avalability
        /// </summary>
        /// <param name="timeout">
        /// The amount of time allowed for the screen avalability
        /// </param>
        public bool WaitForAvailable(int timeout)
        {
            try
            {

                if (HPDigitalSendinWindow.WaitForAvailable(timeout) == ResultCode.Passed)
                {
                    if (DSSRestore32770Window.WaitForAvailable(timeout) == ResultCode.Passed)
                    {
                        return true;
                    }
                }
            }
            catch (Exception)
            {

                return false;
            }


            return false;
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinWindow
        {
            get
            {
                if (null == fHPDigitalSendinWindow)
                {
                    fHPDigitalSendinWindow = new Window("HPDigitalSendinWindow", Desktop);
                    fHPDigitalSendinWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AB81453F-68AD-4243-ACA8-B4D9362C4ED4");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software Configuration (Server IP Address: {_ipAddress})");
                }

                return fHPDigitalSendinWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window DSSRestoreWindoWindow
        {
            get
            {
                if (null == fDSSRestoreWindoWindow)
                {
                    fDSSRestoreWindoWindow = new Window("DSSRestoreWindoWindow", HPDigitalSendinWindow);
                    fDSSRestoreWindoWindow.UIMap.Scope = UIASeachScope.Children;
                    fDSSRestoreWindoWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fDSSRestoreWindoWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DSS Restore");
                }

                return fDSSRestoreWindoWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window DSSRestore32770Window
        {
            get
            {
                if (null == fDSSRestore32770Window)
                {
                    fDSSRestore32770Window = new Window("DSSRestore32770Window", HPDigitalSendinWindow);
                    fDSSRestore32770Window.UIMap.Scope = UIASeachScope.Children;
                    fDSSRestore32770Window.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"#32770");
                    fDSSRestore32770Window.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DSS Restore");
                }

                return fDSSRestore32770Window;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane FilenameComboBoPane
        {
            get
            {
                if (null == fFilenameComboBoPane)
                {
                    fFilenameComboBoPane = new Pane("FilenameComboBoPane", DSSRestore32770Window);
                    fFilenameComboBoPane.UIMap.Scope = UIASeachScope.Children;
                    fFilenameComboBoPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBoxEx32");
                    fFilenameComboBoPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1148");
                }

                return fFilenameComboBoPane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox FilenameComboBoComboBox
        {
            get
            {
                if (null == fFilenameComboBoComboBox)
                {
                    fFilenameComboBoComboBox = new ComboBox("FilenameComboBoComboBox", FilenameComboBoPane);
                    fFilenameComboBoComboBox.UIMap.Scope = UIASeachScope.Children;
                    fFilenameComboBoComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fFilenameComboBoComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1148");
                    fFilenameComboBoComboBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"File name:");
                }

                return fFilenameComboBoComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit FilenameEdit114Edit
        {
            get
            {
                if (null == fFilenameEdit114Edit)
                {
                    fFilenameEdit114Edit = new Edit("FilenameEdit114Edit", FilenameComboBoComboBox);
                    fFilenameEdit114Edit.UIMap.Scope = UIASeachScope.Children;
                    fFilenameEdit114Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Edit");
                    fFilenameEdit114Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1148");
                    fFilenameEdit114Edit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"File name:");
                }

                return fFilenameEdit114Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button OpenButton1Button
        {
            get
            {
                if (null == fOpenButton1Button)
                {
                    fOpenButton1Button = new Button("OpenButton1Button", DSSRestore32770Window);
                    fOpenButton1Button.UIMap.Scope = UIASeachScope.Children;
                    fOpenButton1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOpenButton1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1");
                    fOpenButton1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Open");
                }

                return fOpenButton1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButton2Button
        {
            get
            {
                if (null == fCancelButton2Button)
                {
                    fCancelButton2Button = new Button("CancelButton2Button", DSSRestore32770Window);
                    fCancelButton2Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton2Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButton2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2");
                    fCancelButton2Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButton2Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar DSSRestoreTitleBar
        {
            get
            {
                if (null == fDSSRestoreTitleBar)
                {
                    fDSSRestoreTitleBar = new TitleBar("DSSRestoreTitleBar", DSSRestoreWindoWindow);
                    fDSSRestoreTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fDSSRestoreTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fDSSRestoreTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DSS Restore");
                }

                return fDSSRestoreTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyDup0MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup0MenuBar)
                {
                    fSystemMenuBarSyDup0MenuBar = new MenuBar("SystemMenuBarSyDup0MenuBar", DSSRestoreTitleBar);
                    fSystemMenuBarSyDup0MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyDup0MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1I0XMenuItem
        {
            get
            {
                if (null == fSystemItem1I0XMenuItem)
                {
                    fSystemItem1I0XMenuItem = new MenuItem("SystemItem1I0XMenuItem", SystemMenuBarSyDup0MenuBar);
                    fSystemItem1I0XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I0XMenuItem.UIMap.Index = 0;
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1I0XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseDup0Button
        {
            get
            {
                if (null == fCloseCloseDup0Button)
                {
                    fCloseCloseDup0Button = new Button("CloseCloseDup0Button", DSSRestoreTitleBar);
                    fCloseCloseDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EnterthepassworDup0Text
        {
            get
            {
                if (null == fEnterthepassworDup0Text)
                {
                    fEnterthepassworDup0Text = new Text("EnterthepassworDup0Text", DSSRestoreWindoWindow);
                    fEnterthepassworDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fEnterthepassworDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fEnterthepassworDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1C3110BE-B506-4763-A4B9-F890972BAC9F");
                    fEnterthepassworDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enter the password that was used to encrypt the file.");
                }

                return fEnterthepassworDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EnterthepassworDup1Text
        {
            get
            {
                if (null == fEnterthepassworDup1Text)
                {
                    fEnterthepassworDup1Text = new Text("EnterthepassworDup1Text", EnterthepassworDup0Text);
                    fEnterthepassworDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fEnterthepassworDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEnterthepassworDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enter the password that was used to encrypt the file.");
                }

                return fEnterthepassworDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit EncryptionKeyTextBoxEdit
        {
            get
            {
                if (null == fPasswordBox1D80Edit)
                {
                    fPasswordBox1D80Edit = new Edit("EncryptionKeyTextBoxEdit", DSSRestoreWindoWindow);
                    fPasswordBox1D80Edit.UIMap.Scope = UIASeachScope.Children;
                    fPasswordBox1D80Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"PasswordBox");
                    fPasswordBox1D80Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1D806B46-DB34-401a-84D6-BEF5297C01B9");
                }

                return fPasswordBox1D80Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup0Pane
        {
            get
            {
                if (null == fScrollViewerPARDup0Pane)
                {
                    fScrollViewerPARDup0Pane = new Pane("ScrollViewerPARDup0Pane", EncryptionKeyTextBoxEdit);
                    fScrollViewerPARDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI0XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI0XScrollBar)
                {
                    fScrollBarVerticI0XScrollBar = new ScrollBar("ScrollBarVerticI0XScrollBar", ScrollViewerPARDup0Pane);
                    fScrollBarVerticI0XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI0XScrollBar.UIMap.Index = 0;
                    fScrollBarVerticI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI0XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI0XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI0XScrollBar)
                {
                    fScrollBarHorizoI0XScrollBar = new ScrollBar("ScrollBarHorizoI0XScrollBar", ScrollViewerPARDup0Pane);
                    fScrollBarHorizoI0XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI0XScrollBar.UIMap.Index = 0;
                    fScrollBarHorizoI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI0XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageImage
        {
            get
            {
                if (null == fImageImage)
                {
                    fImageImage = new Image("ImageImage", DSSRestoreWindoWindow);
                    fImageImage.UIMap.Scope = UIASeachScope.Children;
                    fImageImage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageImage;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ThisbackupfiledText
        {
            get
            {
                if (null == fThisbackupfiledText)
                {
                    fThisbackupfiledText = new Text("ThisbackupfiledText", DSSRestoreWindoWindow);
                    fThisbackupfiledText.UIMap.Scope = UIASeachScope.Children;
                    fThisbackupfiledText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fThisbackupfiledText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"E3526EE2-8905-470A-BEAD-58D52C4F2166");
                    fThisbackupfiledText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"This backup file does not contain passwords.");
                }

                return fThisbackupfiledText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PasswordswillhaText
        {
            get
            {
                if (null == fPasswordswillhaText)
                {
                    fPasswordswillhaText = new Text("PasswordswillhaText", DSSRestoreWindoWindow);
                    fPasswordswillhaText.UIMap.Scope = UIASeachScope.Children;
                    fPasswordswillhaText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fPasswordswillhaText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AA8748CA-6FEE-4974-8C44-BD79EA432111");
                    fPasswordswillhaText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Passwords will have to be re-entered by the admin after restoring from this file.");
                }

                return fPasswordswillhaText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group DssSettingsGrouGroup
        {
            get
            {
                if (null == fDssSettingsGrouGroup)
                {
                    fDssSettingsGrouGroup = new Group("DssSettingsGrouGroup", DSSRestoreWindoWindow);
                    fDssSettingsGrouGroup.UIMap.Scope = UIASeachScope.Children;
                    fDssSettingsGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fDssSettingsGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"groupBox1");
                    fDssSettingsGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Dss Settings");
                }

                return fDssSettingsGrouGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DssSettingsTextText
        {
            get
            {
                if (null == fDssSettingsTextText)
                {
                    fDssSettingsTextText = new Text("DssSettingsTextText", DssSettingsGrouGroup);
                    fDssSettingsTextText.UIMap.Scope = UIASeachScope.Children;
                    fDssSettingsTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDssSettingsTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Dss Settings");
                }

                return fDssSettingsTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public RadioButton FullRestoreRadioButton
        {
            get
            {
                if (null == fRestoreallSettiRadioButton)
                {
                    fRestoreallSettiRadioButton = new RadioButton("FullRestoreRadioButton", DssSettingsGrouGroup);
                    fRestoreallSettiRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fRestoreallSettiRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RadioButton");
                    fRestoreallSettiRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8AD3031F-8586-4643-A056-3679D2104D27");
                    fRestoreallSettiRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Restore all Settings and Devices");
                }

                return fRestoreallSettiRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RestoreallSettiText
        {
            get
            {
                if (null == fRestoreallSettiText)
                {
                    fRestoreallSettiText = new Text("RestoreallSettiText", FullRestoreRadioButton);
                    fRestoreallSettiText.UIMap.Scope = UIASeachScope.Children;
                    fRestoreallSettiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRestoreallSettiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Restore all Settings and Devices");
                }

                return fRestoreallSettiText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AlldeviceslisteDup0Text
        {
            get
            {
                if (null == fAlldeviceslisteDup0Text)
                {
                    fAlldeviceslisteDup0Text = new Text("AlldeviceslisteDup0Text", DssSettingsGrouGroup);
                    fAlldeviceslisteDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fAlldeviceslisteDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fAlldeviceslisteDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4DB7A9E3-7CF9-4B8A-934E-73519DB2BD74");
                    fAlldeviceslisteDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"(All devices listed in the backup file will be bound to this instance of DSS)");
                }

                return fAlldeviceslisteDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AlldeviceslisteDup1Text
        {
            get
            {
                if (null == fAlldeviceslisteDup1Text)
                {
                    fAlldeviceslisteDup1Text = new Text("AlldeviceslisteDup1Text", AlldeviceslisteDup0Text);
                    fAlldeviceslisteDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fAlldeviceslisteDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAlldeviceslisteDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"(All devices listed in the backup file will be bound to this instance of DSS)");
                }

                return fAlldeviceslisteDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public RadioButton SelectiveRestoreRadioButton
        {
            get
            {
                if (null == fSelectiveRestorRadioButton)
                {
                    fSelectiveRestorRadioButton = new RadioButton("SelectiveRestoreRadioButton", DssSettingsGrouGroup);
                    fSelectiveRestorRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fSelectiveRestorRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RadioButton");
                    fSelectiveRestorRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1F94AF0E-D4A4-4A50-9B1F-1697482325F7");
                    fSelectiveRestorRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Selective Restore");
                }

                return fSelectiveRestorRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SelectiveRestorText
        {
            get
            {
                if (null == fSelectiveRestorText)
                {
                    fSelectiveRestorText = new Text("SelectiveRestorText", SelectiveRestoreRadioButton);
                    fSelectiveRestorText.UIMap.Scope = UIASeachScope.Children;
                    fSelectiveRestorText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSelectiveRestorText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Selective Restore");
                }

                return fSelectiveRestorText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox GeneralSettingsCheckbox
        {
            get
            {
                if (null == fGeneralCheckBoxCheckBox)
                {
                    fGeneralCheckBoxCheckBox = new CheckBox("GeneralSettingsCheckbox", DssSettingsGrouGroup);
                    fGeneralCheckBoxCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fGeneralCheckBoxCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fGeneralCheckBoxCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"DA4C9C9E-A10E-41D2-91AC-CC06ECEE6CA8");
                    fGeneralCheckBoxCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"General");
                }

                return fGeneralCheckBoxCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GeneralTextBlocDup0Text
        {
            get
            {
                if (null == fGeneralTextBlocDup0Text)
                {
                    fGeneralTextBlocDup0Text = new Text("GeneralTextBlocDup0Text", GeneralSettingsCheckbox);
                    fGeneralTextBlocDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fGeneralTextBlocDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fGeneralTextBlocDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"General");
                }

                return fGeneralTextBlocDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox AuthenticationCheckbox
        {
            get
            {
                if (null == fAuthenticationCCheckBox)
                {
                    fAuthenticationCCheckBox = new CheckBox("AuthenticationCheckbox", DssSettingsGrouGroup);
                    fAuthenticationCCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fAuthenticationCCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fAuthenticationCCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"C25464A8-427B-4E07-B95E-18071E4A7B71");
                    fAuthenticationCCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Authentication");
                }

                return fAuthenticationCCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AuthenticationTDup0Text
        {
            get
            {
                if (null == fAuthenticationTDup0Text)
                {
                    fAuthenticationTDup0Text = new Text("AuthenticationTDup0Text", AuthenticationCheckbox);
                    fAuthenticationTDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fAuthenticationTDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAuthenticationTDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Authentication");
                }

                return fAuthenticationTDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox EmailCheckbox
        {
            get
            {
                if (null == fEmailCheckBox04CheckBox)
                {
                    fEmailCheckBox04CheckBox = new CheckBox("EmailCheckbox", DssSettingsGrouGroup);
                    fEmailCheckBox04CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fEmailCheckBox04CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fEmailCheckBox04CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"049CEF25-61FB-4B38-8D06-41BE7154EA77");
                    fEmailCheckBox04CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"E-mail");
                }

                return fEmailCheckBox04CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EmailTextBlockDup0Text
        {
            get
            {
                if (null == fEmailTextBlockDup0Text)
                {
                    fEmailTextBlockDup0Text = new Text("EmailTextBlockDup0Text", EmailCheckbox);
                    fEmailTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fEmailTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEmailTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"E-mail");
                }

                return fEmailTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox FaxCheckbox
        {
            get
            {
                if (null == fFaxCheckBox1817CheckBox)
                {
                    fFaxCheckBox1817CheckBox = new CheckBox("FaxCheckbox", DssSettingsGrouGroup);
                    fFaxCheckBox1817CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fFaxCheckBox1817CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fFaxCheckBox1817CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"18176B92-B360-4FD5-8CEF-13FE7260B90D");
                    fFaxCheckBox1817CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax");
                }

                return fFaxCheckBox1817CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxTextBlockDup0Text
        {
            get
            {
                if (null == fFaxTextBlockDup0Text)
                {
                    fFaxTextBlockDup0Text = new Text("FaxTextBlockDup0Text", FaxCheckbox);
                    fFaxTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fFaxTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax");
                }

                return fFaxTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox SendFolderCheckbox
        {
            get
            {
                if (null == fSendtoFolderCheDup0CheckBox)
                {
                    fSendtoFolderCheDup0CheckBox = new CheckBox("SendFolderCheckbox", DssSettingsGrouGroup);
                    fSendtoFolderCheDup0CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fSendtoFolderCheDup0CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fSendtoFolderCheDup0CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"D4FF5F06-3D18-4139-A62A-8CBA2E912C08");
                    fSendtoFolderCheDup0CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send to Folder");
                }

                return fSendtoFolderCheDup0CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SendtoFolderTexI0XText
        {
            get
            {
                if (null == fSendtoFolderTexI0XText)
                {
                    fSendtoFolderTexI0XText = new Text("SendtoFolderTexI0XText", SendFolderCheckbox);
                    fSendtoFolderTexI0XText.UIMap.Scope = UIASeachScope.Children;
                    fSendtoFolderTexI0XText.UIMap.Index = 0;
                    fSendtoFolderTexI0XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSendtoFolderTexI0XText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send to Folder");
                }

                return fSendtoFolderTexI0XText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox WorkflowCheckbox
        {
            get
            {
                if (null == fWorkflowsCheckBDup0CheckBox)
                {
                    fWorkflowsCheckBDup0CheckBox = new CheckBox("WorkflowCheckbox", DssSettingsGrouGroup);
                    fWorkflowsCheckBDup0CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowsCheckBDup0CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fWorkflowsCheckBDup0CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"99886E14-F12A-474D-9D8F-903FD9D55C73");
                    fWorkflowsCheckBDup0CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflows");
                }

                return fWorkflowsCheckBDup0CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text WorkflowsTextBlI0XText
        {
            get
            {
                if (null == fWorkflowsTextBlI0XText)
                {
                    fWorkflowsTextBlI0XText = new Text("WorkflowsTextBlI0XText", WorkflowCheckbox);
                    fWorkflowsTextBlI0XText.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowsTextBlI0XText.UIMap.Index = 0;
                    fWorkflowsTextBlI0XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fWorkflowsTextBlI0XText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflows");
                }

                return fWorkflowsTextBlI0XText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox AddressingCheckbox
        {
            get
            {
                if (null == fAddressingCheckCheckBox)
                {
                    fAddressingCheckCheckBox = new CheckBox("AddressingCheckbox", DssSettingsGrouGroup);
                    fAddressingCheckCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fAddressingCheckCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fAddressingCheckCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"EEBE7FB5-88A4-48A6-AEDE-5ACEE7ACB46D");
                    fAddressingCheckCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Addressing");
                }

                return fAddressingCheckCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddressingTextBDup0Text
        {
            get
            {
                if (null == fAddressingTextBDup0Text)
                {
                    fAddressingTextBDup0Text = new Text("AddressingTextBDup0Text", AddressingCheckbox);
                    fAddressingTextBDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fAddressingTextBDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddressingTextBDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Addressing");
                }

                return fAddressingTextBDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox AddressbookCheckbox
        {
            get
            {
                if (null == fAddressBooksCheDup0CheckBox)
                {
                    fAddressBooksCheDup0CheckBox = new CheckBox("AddressbookCheckbox", DssSettingsGrouGroup);
                    fAddressBooksCheDup0CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fAddressBooksCheDup0CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fAddressBooksCheDup0CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"C16A2E87-8ED9-4571-997B-5A18C22F2F74");
                    fAddressBooksCheDup0CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Address Books");
                }

                return fAddressBooksCheDup0CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddressBooksTexI0XText
        {
            get
            {
                if (null == fAddressBooksTexI0XText)
                {
                    fAddressBooksTexI0XText = new Text("AddressBooksTexI0XText", AddressbookCheckbox);
                    fAddressBooksTexI0XText.UIMap.Scope = UIASeachScope.Children;
                    fAddressBooksTexI0XText.UIMap.Index = 0;
                    fAddressBooksTexI0XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddressBooksTexI0XText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Address Books");
                }

                return fAddressBooksTexI0XText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox DeviceCheckbox
        {
            get
            {
                if (null == fDevicesCheckBoxCheckBox)
                {
                    fDevicesCheckBoxCheckBox = new CheckBox("DeviceCheckbox", DssSettingsGrouGroup);
                    fDevicesCheckBoxCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fDevicesCheckBoxCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fDevicesCheckBoxCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"830D2B72-5858-49ED-A4D8-1F6CC4CF6B18");
                    fDevicesCheckBoxCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Devices");
                }

                return fDevicesCheckBoxCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DevicesTextBlocText
        {
            get
            {
                if (null == fDevicesTextBlocText)
                {
                    fDevicesTextBlocText = new Text("DevicesTextBlocText", DeviceCheckbox);
                    fDevicesTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fDevicesTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDevicesTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Devices");
                }

                return fDevicesTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox DeviceGroupsCheckbox
        {
            get
            {
                if (null == fGroupsCheckBox3CheckBox)
                {
                    fGroupsCheckBox3CheckBox = new CheckBox("DeviceGroupsCheckbox", DssSettingsGrouGroup);
                    fGroupsCheckBox3CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fGroupsCheckBox3CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fGroupsCheckBox3CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3ED3EEE9-D03E-4AED-B225-704C578E3ECC");
                    fGroupsCheckBox3CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Groups");
                }

                return fGroupsCheckBox3CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GroupsTextBlockDup0Text
        {
            get
            {
                if (null == fGroupsTextBlockDup0Text)
                {
                    fGroupsTextBlockDup0Text = new Text("GroupsTextBlockDup0Text", DeviceGroupsCheckbox);
                    fGroupsTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fGroupsTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fGroupsTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Groups");
                }

                return fGroupsTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox TemplateCheckbox
        {
            get
            {
                if (null == fTemplatesCheckBDup0CheckBox)
                {
                    fTemplatesCheckBDup0CheckBox = new CheckBox("TemplateCheckbox", DssSettingsGrouGroup);
                    fTemplatesCheckBDup0CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fTemplatesCheckBDup0CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fTemplatesCheckBDup0CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"65B61429-C915-4007-BA92-001D3881EAFE");
                    fTemplatesCheckBDup0CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Templates");
                }

                return fTemplatesCheckBDup0CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TemplatesTextBlI0XText
        {
            get
            {
                if (null == fTemplatesTextBlI0XText)
                {
                    fTemplatesTextBlI0XText = new Text("TemplatesTextBlI0XText", TemplateCheckbox);
                    fTemplatesTextBlI0XText.UIMap.Scope = UIASeachScope.Children;
                    fTemplatesTextBlI0XText.UIMap.Index = 0;
                    fTemplatesTextBlI0XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTemplatesTextBlI0XText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Templates");
                }

                return fTemplatesTextBlI0XText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox TemplateGroupsCheckbox
        {
            get
            {
                if (null == fGroupsCheckBox7CheckBox)
                {
                    fGroupsCheckBox7CheckBox = new CheckBox("TemplateGroupsCheckbox", DssSettingsGrouGroup);
                    fGroupsCheckBox7CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fGroupsCheckBox7CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fGroupsCheckBox7CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"71D078D6-9B7E-43AD-A0F8-61909608D0A4");
                    fGroupsCheckBox7CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Groups");
                }

                return fGroupsCheckBox7CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GroupsTextBlockDup1Text
        {
            get
            {
                if (null == fGroupsTextBlockDup1Text)
                {
                    fGroupsTextBlockDup1Text = new Text("GroupsTextBlockDup1Text", TemplateGroupsCheckbox);
                    fGroupsTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fGroupsTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fGroupsTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Groups");
                }

                return fGroupsTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group MergeSettingsGrGroup
        {
            get
            {
                if (null == fMergeSettingsGrGroup)
                {
                    fMergeSettingsGrGroup = new Group("MergeSettingsGrGroup", DSSRestoreWindoWindow);
                    fMergeSettingsGrGroup.UIMap.Scope = UIASeachScope.Children;
                    fMergeSettingsGrGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fMergeSettingsGrGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mMergeGroup");
                    fMergeSettingsGrGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Merge Settings");
                }

                return fMergeSettingsGrGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MergeSettingsTeText
        {
            get
            {
                if (null == fMergeSettingsTeText)
                {
                    fMergeSettingsTeText = new Text("MergeSettingsTeText", MergeSettingsGrGroup);
                    fMergeSettingsTeText.UIMap.Scope = UIASeachScope.Children;
                    fMergeSettingsTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fMergeSettingsTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Merge Settings");
                }

                return fMergeSettingsTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox MergeSendToFoldercheckBox
        {
            get
            {
                if (null == fSendtoFolderCheDup1CheckBox)
                {
                    fSendtoFolderCheDup1CheckBox = new CheckBox("MergeSendToFoldercheckBox", MergeSettingsGrGroup);
                    fSendtoFolderCheDup1CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fSendtoFolderCheDup1CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fSendtoFolderCheDup1CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7EB53DE2-6C8F-43DA-8CF7-C980BBB983A1");
                    fSendtoFolderCheDup1CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send to Folder");
                }

                return fSendtoFolderCheDup1CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SendtoFolderTexI1XText
        {
            get
            {
                if (null == fSendtoFolderTexI1XText)
                {
                    fSendtoFolderTexI1XText = new Text("SendtoFolderTexI1XText", MergeSendToFoldercheckBox);
                    fSendtoFolderTexI1XText.UIMap.Scope = UIASeachScope.Children;
                    fSendtoFolderTexI1XText.UIMap.Index = 1;
                    fSendtoFolderTexI1XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSendtoFolderTexI1XText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send to Folder");
                }

                return fSendtoFolderTexI1XText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox MergeWorkflowcheckBox
        {
            get
            {
                if (null == fWorkflowsCheckBDup1CheckBox)
                {
                    fWorkflowsCheckBDup1CheckBox = new CheckBox("MergeWorkflowcheckBox", MergeSettingsGrGroup);
                    fWorkflowsCheckBDup1CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowsCheckBDup1CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fWorkflowsCheckBDup1CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8BFD7F2E-473B-4A16-BDCE-D30CE2061473");
                    fWorkflowsCheckBDup1CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflows");
                }

                return fWorkflowsCheckBDup1CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text WorkflowsTextBlI1XText
        {
            get
            {
                if (null == fWorkflowsTextBlI1XText)
                {
                    fWorkflowsTextBlI1XText = new Text("WorkflowsTextBlI1XText", MergeWorkflowcheckBox);
                    fWorkflowsTextBlI1XText.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowsTextBlI1XText.UIMap.Index = 1;
                    fWorkflowsTextBlI1XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fWorkflowsTextBlI1XText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflows");
                }

                return fWorkflowsTextBlI1XText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox MergeTemplatecheckBox
        {
            get
            {
                if (null == fTemplatesCheckBDup1CheckBox)
                {
                    fTemplatesCheckBDup1CheckBox = new CheckBox("MergeTemplatecheckBox", MergeSettingsGrGroup);
                    fTemplatesCheckBDup1CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fTemplatesCheckBDup1CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fTemplatesCheckBDup1CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"200D0D78-0AD1-4B9F-A404-30B78BF4904B");
                    fTemplatesCheckBDup1CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Templates");
                }

                return fTemplatesCheckBDup1CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TemplatesTextBlI1XText
        {
            get
            {
                if (null == fTemplatesTextBlI1XText)
                {
                    fTemplatesTextBlI1XText = new Text("TemplatesTextBlI1XText", MergeTemplatecheckBox);
                    fTemplatesTextBlI1XText.UIMap.Scope = UIASeachScope.Children;
                    fTemplatesTextBlI1XText.UIMap.Index = 1;
                    fTemplatesTextBlI1XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTemplatesTextBlI1XText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Templates");
                }

                return fTemplatesTextBlI1XText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox MergeEmailcheckBox
        {
            get
            {
                if (null == fEmailCheckBox08CheckBox)
                {
                    fEmailCheckBox08CheckBox = new CheckBox("MergeEmailcheckBox", MergeSettingsGrGroup);
                    fEmailCheckBox08CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fEmailCheckBox08CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fEmailCheckBox08CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"08D13E12-7FE8-46F2-8DDD-DB966E9797CC");
                    fEmailCheckBox08CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"E-mail");
                }

                return fEmailCheckBox08CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EmailTextBlockDup1Text
        {
            get
            {
                if (null == fEmailTextBlockDup1Text)
                {
                    fEmailTextBlockDup1Text = new Text("EmailTextBlockDup1Text", MergeEmailcheckBox);
                    fEmailTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fEmailTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEmailTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"E-mail");
                }

                return fEmailTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox MergeAddressbookcheckBox
        {
            get
            {
                if (null == fAddressBooksCheDup1CheckBox)
                {
                    fAddressBooksCheDup1CheckBox = new CheckBox("MergeAddressbookcheckBox", MergeSettingsGrGroup);
                    fAddressBooksCheDup1CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fAddressBooksCheDup1CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fAddressBooksCheDup1CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"C38A5FFE-C4D4-4F57-8460-7E52888B2E66");
                    fAddressBooksCheDup1CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Address Books");
                }

                return fAddressBooksCheDup1CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddressBooksTexI1XText
        {
            get
            {
                if (null == fAddressBooksTexI1XText)
                {
                    fAddressBooksTexI1XText = new Text("AddressBooksTexI1XText", MergeAddressbookcheckBox);
                    fAddressBooksTexI1XText.UIMap.Scope = UIASeachScope.Children;
                    fAddressBooksTexI1XText.UIMap.Index = 1;
                    fAddressBooksTexI1XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddressBooksTexI1XText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Address Books");
                }

                return fAddressBooksTexI1XText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RestoreOKButton
        {
            get
            {
                if (null == fOKButton3b5feb6Button)
                {
                    fOKButton3b5feb6Button = new Button("RestoreOKButton", DSSRestoreWindoWindow);
                    fOKButton3b5feb6Button.UIMap.Scope = UIASeachScope.Children;
                    fOKButton3b5feb6Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButton3b5feb6Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3b5feb64-81bb-43c3-98b6-42dda4822ae8");
                    fOKButton3b5feb6Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButton3b5feb6Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OKTextBlockDup0Text
        {
            get
            {
                if (null == fOKTextBlockDup0Text)
                {
                    fOKTextBlockDup0Text = new Text("OKTextBlockDup0Text", RestoreOKButton);
                    fOKTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fOKTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOKTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButtonE82Button
        {
            get
            {
                if (null == fCancelButtonE82Button)
                {
                    fCancelButtonE82Button = new Button("CancelButtonE82Button", DSSRestoreWindoWindow);
                    fCancelButtonE82Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButtonE82Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButtonE82Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"E82887DC-1388-4033-A714-1CD001885C16");
                    fCancelButtonE82Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButtonE82Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CancelTextBlockDup0Text
        {
            get
            {
                if (null == fCancelTextBlockDup0Text)
                {
                    fCancelTextBlockDup0Text = new Text("CancelTextBlockDup0Text", CancelButtonE82Button);
                    fCancelTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fCancelTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCancelTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane DSSConfiguratioPane
        {
            get
            {
                if (null == fDSSConfiguratioPane)
                {
                    fDSSConfiguratioPane = new Pane("DSSConfiguratioPane", DSSRestoreWindoWindow);
                    fDSSConfiguratioPane.UIMap.Scope = UIASeachScope.Children;
                    fDSSConfiguratioPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fDSSConfiguratioPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mMessageScrollViewer");
                    fDSSConfiguratioPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DSS Configuration Utility will restart in order to complete the restore process.");
                }

                return fDSSConfiguratioPane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button OKButtonAE4B0C6Button
        {
            get
            {
                if (null == fOKButtonAE4B0C6Button)
                {
                    fOKButtonAE4B0C6Button = new Button("OKButtonAE4B0C6Button", DSSRestoreWindoWindow);
                    fOKButtonAE4B0C6Button.UIMap.Scope = UIASeachScope.Children;
                    fOKButtonAE4B0C6Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButtonAE4B0C6Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AE4B0C61-2DEE-4974-B517-4A1388A3F4CC");
                    fOKButtonAE4B0C6Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButtonAE4B0C6Button;
            }
        }


    }


}

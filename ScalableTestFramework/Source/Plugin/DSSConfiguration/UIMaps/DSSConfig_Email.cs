//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------

using TopCat.Core;
using TopCat.TestApi.Enums;

namespace HP.ScalableTest.Plugin.DSSConfiguration.UIMaps
{
    using System;
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class DSSConfig_Email
    {
        /// <summary>
        /// Backing field for HPDigitalSendinWindow property
        /// </summary>
        private Window fHPDigitalSendinWindow;


        /// <summary>
        /// Backing field for HPDigitalSendinDup1Window property
        /// </summary>
        private Window fHPDigitalSendinDup1Window;

        /// <summary>
        /// Backing field for AddSMTPGatewayWindow property
        /// </summary>
        private Window fAddSMTPGatewayWWindow;

        /// <summary>
        /// Backing field for AddSMTPGatewayTitleBar property
        /// </summary>
        private TitleBar fAddSMTPGatewayTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup0MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup0MenuBar;

        /// <summary>
        /// Backing field for SystemItem1I0XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I0XMenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizDup0Button property
        /// </summary>
        private Button fMinimizeMinimizDup0Button;

        /// <summary>
        /// Backing field for MaximizeMaximizDup0Button property
        /// </summary>
        private Button fMaximizeMaximizDup0Button;

        /// <summary>
        /// Backing field for OKButtonAE4B0C6Button property
        /// </summary>
        private Button fOKButtonAE4B0C6Button;

        /// <summary>
        /// Backing field for CloseCloseDup0Button property
        /// </summary>
        private Button fCloseCloseDup0Button;

        /// <summary>
        /// Backing field for SmtpOKButton property
        /// </summary>
        private Button fOKButton4D1AF73Button;

        /// <summary>
        /// Backing field for OKTextBlockDup0Text property
        /// </summary>
        private Text fOKTextBlockDup0Text;

        /// <summary>
        /// Backing field for CancelButton132Button property
        /// </summary>
        private Button fCancelButton132Button;

        /// <summary>
        /// Backing field for CancelTextBlockDup0Text property
        /// </summary>
        private Text fCancelTextBlockDup0Text;

        /// <summary>
        /// Backing field for HelpButtonaaafdButton property
        /// </summary>
        private Button fHelpButtonaaafdButton;

        /// <summary>
        /// Backing field for HelpTextBlockDup0Text property
        /// </summary>
        private Text fHelpTextBlockDup0Text;

        /// <summary>
        /// Backing field for OutgoingEmailSeDup0Group property
        /// </summary>
        private Group fOutgoingEmailSeDup0Group;

        /// <summary>
        /// Backing field for OutgoingEmailSeDup0Text property
        /// </summary>
        private Text fOutgoingEmailSeDup0Text;

        /// <summary>
        /// Backing field for ScrollViewerPane property
        /// </summary>
        private Pane fScrollViewerPane;

        /// <summary>
        /// Backing field for ServerNameorAddDup0Text property
        /// </summary>
        private Text fServerNameorAddDup0Text;

        /// <summary>
        /// Backing field for ServerNameorAddDup1Text property
        /// </summary>
        private Text fServerNameorAddDup1Text;

        /// <summary>
        /// Backing field for PortText2b91632Text property
        /// </summary>
        private Text fPortText2b91632Text;

        /// <summary>
        /// Backing field for PortTextBlockText property
        /// </summary>
        private Text fPortTextBlockText;

        /// <summary>
        /// Backing field for SmtpServerTextBoxEdit property
        /// </summary>
        private Edit fTextBox59D047B3Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup0Pane property
        /// </summary>
        private Pane fScrollViewerPARDup0Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI0XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI0XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI0XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI0XScrollBar;

        /// <summary>
        /// Backing field for SmtpPortTextBox property
        /// </summary>
        private Edit fTextBox2a0b0b2fEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup1Pane property
        /// </summary>
        private Pane fScrollViewerPARDup1Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI1XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI1XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI1XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI1XScrollBar;

        /// <summary>
        /// Backing field for AutoFindButton3Button property
        /// </summary>
        private Button fAutoFindButton3Button;

        /// <summary>
        /// Backing field for AutoFindTextBloText property
        /// </summary>
        private Text fAutoFindTextBloText;

        /// <summary>
        /// Backing field for SmtpEnableSSLCheckBox property
        /// </summary>
        private CheckBox fEnableSMTPSSLPrCheckBox;

        /// <summary>
        /// Backing field for EnableSMTPSSLPrText property
        /// </summary>
        private Text fEnableSMTPSSLPrText;

        /// <summary>
        /// Backing field for SmtpRequiresAuthCheckBox property
        /// </summary>
        private CheckBox fServerRequiresACheckBox;

        /// <summary>
        /// Backing field for ServerRequiresAText property
        /// </summary>
        private Text fServerRequiresAText;

        /// <summary>
        /// Backing field for SmtpUseWhichCredentialsComboBox property
        /// </summary>
        private ComboBox fComboBox9084316ComboBox;

        /// <summary>
        /// Backing field for SMTPcredentialsText property
        /// </summary>
        private Text fSMTPcredentialsText;

        /// <summary>
        /// Backing field for UsernameTexted5Text property
        /// </summary>
        private Text fUsernameTexted5Text;

        /// <summary>
        /// Backing field for UsernameTextBloText property
        /// </summary>
        private Text fUsernameTextBloText;

        /// <summary>
        /// Backing field for SmtpUsernameTextBox property
        /// </summary>
        private Edit fTextBoxc267ec0dEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup2Pane property
        /// </summary>
        private Pane fScrollViewerPARDup2Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI2XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI2XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI2XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI2XScrollBar;

        /// <summary>
        /// Backing field for PasswordTextbc5Text property
        /// </summary>
        private Text fPasswordTextbc5Text;

        /// <summary>
        /// Backing field for PasswordTextBloText property
        /// </summary>
        private Text fPasswordTextBloText;

        /// <summary>
        /// Backing field for SmtpPasswordBox property
        /// </summary>
        private Edit fPasswordBox1c44Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup3Pane property
        /// </summary>
        private Pane fScrollViewerPARDup3Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI3XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI3XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI3XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI3XScrollBar;

        /// <summary>
        /// Backing field for ServerUsageGrouGroup property
        /// </summary>
        private Group fServerUsageGrouGroup;

        /// <summary>
        /// Backing field for ServerUsageTextDup0Text property
        /// </summary>
        private Text fServerUsageTextDup0Text;

        /// <summary>
        /// Backing field for EmailSendscanneCheckBox property
        /// </summary>
        private CheckBox fEmailSendscanneCheckBox;

        /// <summary>
        /// Backing field for EmailSendscanneText property
        /// </summary>
        private Text fEmailSendscanneText;

        /// <summary>
        /// Backing field for AutomatedEmailsCheckBox property
        /// </summary>
        private CheckBox fAutomatedEmailsCheckBox;

        /// <summary>
        /// Backing field for AutomatedEmailsText property
        /// </summary>
        private Text fAutomatedEmailsText;

        /// <summary>
        /// Backing field for FaxsendfaxeswheCheckBox property
        /// </summary>
        private CheckBox fFaxsendfaxeswheCheckBox;

        /// <summary>
        /// Backing field for FaxsendfaxeswheText property
        /// </summary>
        private Text fFaxsendfaxeswheText;

        /// <summary>
        /// Backing field for SplitemailsiflaDup0Text property
        /// </summary>
        private Text fSplitemailsiflaDup0Text;

        /// <summary>
        /// Backing field for SplitemailsiflaDup1Text property
        /// </summary>
        private Text fSplitemailsiflaDup1Text;

        /// <summary>
        /// Backing field for A010000TextDFBFText property
        /// </summary>
        private Text fA010000TextDFBFText;

        /// <summary>
        /// Backing field for A010000TextBlocText property
        /// </summary>
        private Text fA010000TextBlocText;

        /// <summary>
        /// Backing field for SmtpFileSizeTextBox property
        /// </summary>
        private Edit fTextBoxDDE87868Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup4Pane property
        /// </summary>
        private Pane fScrollViewerPARDup4Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI4XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI4XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI4XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI4XScrollBar;

        /// <summary>
        /// Backing field for TheemailwillbesText property
        /// </summary>
        private Text fTheemailwillbesText;

        /// <summary>
        /// Backing field for SendatestemailtDup0Text property
        /// </summary>
        private Text fSendatestemailtDup0Text;

        /// <summary>
        /// Backing field for SendatestemailtDup1Text property
        /// </summary>
        private Text fSendatestemailtDup1Text;

        /// <summary>
        /// Backing field for ComboBox5d53755ComboBox property
        /// </summary>
        private ComboBox fComboBox5d53755ComboBox;

        /// <summary>
        /// Backing field for TextBoxPARTEdiEdit property
        /// </summary>
        private Edit fTextBoxPARTEdiEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup5Pane property
        /// </summary>
        private Pane fScrollViewerPARDup5Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI5XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI5XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI5XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI5XScrollBar;

        /// <summary>
        /// Backing field for SendButton9c885Button property
        /// </summary>
        private Button fSendButton9c885Button;

        /// <summary>
        /// Backing field for SendTextBlockText property
        /// </summary>
        private Text fSendTextBlockText;

        /// <summary>
        /// Backing field for ScrollBarVerticScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoScrollBar;

        /// <summary>
        /// Backing field for HPDigitalSendinTitleBar property
        /// </summary>
        private TitleBar fHPDigitalSendinTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup1MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup1MenuBar;

        /// <summary>
        /// Backing field for SystemItem1I1XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I1XMenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizDup1Button property
        /// </summary>
        private Button fMinimizeMinimizDup1Button;

        /// <summary>
        /// Backing field for MaximizeMaximizDup1Button property
        /// </summary>
        private Button fMaximizeMaximizDup1Button;

        /// <summary>
        /// Backing field for CloseCloseDup1Button property
        /// </summary>
        private Button fCloseCloseDup1Button;

        /// <summary>
        /// Backing field for HelpButtonCB8CFButton property
        /// </summary>
        private Button fHelpButtonCB8CFButton;

        /// <summary>
        /// Backing field for HelpTextBlockDup1Text property
        /// </summary>
        private Text fHelpTextBlockDup1Text;

        /// <summary>
        /// Backing field for ApplyButton property
        /// </summary>
        private Button fApplyButton61E2Button;

        /// <summary>
        /// Backing field for ApplyTextBlockText property
        /// </summary>
        private Text fApplyTextBlockText;

        /// <summary>
        /// Backing field for CancelButton65CButton property
        /// </summary>
        private Button fCancelButton65CButton;

        /// <summary>
        /// Backing field for CancelTextBlockDup1Text property
        /// </summary>
        private Text fCancelTextBlockDup1Text;

        /// <summary>
        /// Backing field for OKButton property
        /// </summary>
        private Button fOKButtonCC2EF49Button;

        /// <summary>
        /// Backing field for OKTextBlockDup1Text property
        /// </summary>
        private Text fOKTextBlockDup1Text;

        /// <summary>
        /// Backing field for TabControlec0fdTab property
        /// </summary>
        private Tab fTabControlec0fdTab;

        /// <summary>
        /// Backing field for EmailTab property
        /// </summary>
        private TabItem fSystemWindowsCoDup2TabItem;

        /// <summary>
        /// Backing field for EmailTextmEmailText property
        /// </summary>
        private Text fEmailTextmEmailText;

        /// <summary>
        /// Backing field for EmailTextBlockText property
        /// </summary>
        private Text fEmailTextBlockText;

        /// <summary>
        /// Backing field for Text32de714a8bdText property
        /// </summary>
        private Text fText32de714a8bdText;

        /// <summary>
        /// Backing field for Text3b2a8761f4fText property
        /// </summary>
        private Text fText3b2a8761f4fText;

        /// <summary>
        /// Backing field for TextBlockText property
        /// </summary>
        private Text fTextBlockText;

        /// <summary>
        /// Backing field for ServiceConfigurCustom property
        /// </summary>
        private Custom fServiceConfigurCustom;

        /// <summary>
        /// Backing field for ErrorConflictUsCustom property
        /// </summary>
        private Custom fErrorConflictUsCustom;

        /// <summary>
        /// Backing field for ImageDup0Image property
        /// </summary>
        private Image fImageDup0Image;

        /// <summary>
        /// Backing field for A1AnOutgoingEmaText property
        /// </summary>
        private Text fA1AnOutgoingEmaText;

        /// <summary>
        /// Backing field for OutgoingEmailSeDup1Group property
        /// </summary>
        private Group fOutgoingEmailSeDup1Group;

        /// <summary>
        /// Backing field for OutgoingEmailSeDup1Text property
        /// </summary>
        private Text fOutgoingEmailSeDup1Text;

        /// <summary>
        /// Backing field for ListView3AC5B63DataGrid property
        /// </summary>
        private DataGrid fListView3AC5B63DataGrid;

        /// <summary>
        /// Backing field for GridViewHeaderRHeader property
        /// </summary>
        private Header fGridViewHeaderRHeader;

        /// <summary>
        /// Backing field for PriorityOrderGrHeaderItem property
        /// </summary>
        private HeaderItem fPriorityOrderGrHeaderItem;

        /// <summary>
        /// Backing field for PriorityOrderTeText property
        /// </summary>
        private Text fPriorityOrderTeText;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup0Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup0Thumb;

        /// <summary>
        /// Backing field for SMTPGatewayGridHeaderItem property
        /// </summary>
        private HeaderItem fSMTPGatewayGridHeaderItem;

        /// <summary>
        /// Backing field for SMTPGatewayTextText property
        /// </summary>
        private Text fSMTPGatewayTextText;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup1Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup1Thumb;

        /// <summary>
        /// Backing field for ServerUsageGridHeaderItem property
        /// </summary>
        private HeaderItem fServerUsageGridHeaderItem;

        /// <summary>
        /// Backing field for ServerUsageTextDup1Text property
        /// </summary>
        private Text fServerUsageTextDup1Text;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup2Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup2Thumb;

        /// <summary>
        /// Backing field for Button500BD6574Button property
        /// </summary>
        private Button fButton500BD6574Button;

        /// <summary>
        /// Backing field for ImageDup1Image property
        /// </summary>
        private Image fImageDup1Image;

        /// <summary>
        /// Backing field for MoveText property
        /// </summary>
        private Text fMoveText;

        /// <summary>
        /// Backing field for MoveTextBlockText property
        /// </summary>
        private Text fMoveTextBlockText;

        /// <summary>
        /// Backing field for Button6006B949EButton property
        /// </summary>
        private Button fButton6006B949EButton;

        /// <summary>
        /// Backing field for ImageDup2Image property
        /// </summary>
        private Image fImageDup2Image;

        /// <summary>
        /// Backing field for AddSmtpGatewayButton property
        /// </summary>
        private Button fAddButtonED911FButton;

        /// <summary>
        /// Backing field for AddTextBlockText property
        /// </summary>
        private Text fAddTextBlockText;

        /// <summary>
        /// Backing field for EditButtonFF8CEButton property
        /// </summary>
        private Button fEditButtonFF8CEButton;

        /// <summary>
        /// Backing field for EditTextBlockText property
        /// </summary>
        private Text fEditTextBlockText;

        /// <summary>
        /// Backing field for RemoveButtonF9DButton property
        /// </summary>
        private Button fRemoveButtonF9DButton;

        /// <summary>
        /// Backing field for RemoveTextBlockText property
        /// </summary>
        private Text fRemoveTextBlockText;

        /// <summary>
        /// Backing field for TestButton31203Button property
        /// </summary>
        private Button fTestButton31203Button;

        /// <summary>
        /// Backing field for TestTextBlockText property
        /// </summary>
        private Text fTestTextBlockText;

        /// <summary>
        /// The Ip address
        /// </summary>
        private string _ipAddress;

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_Email"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public DSSConfig_Email(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_Email"/> class using the default UIAFramework.
        /// </summary>
        public DSSConfig_Email()
        {
            Desktop = new Desktop();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_Email"/> class using the default UIAFramework.
        /// </summary>
        /// <param name="address">
        /// The IP address.
        /// </param>
        public DSSConfig_Email(string address)
        {
            _ipAddress = address;
            Desktop = new Desktop(UIAFramework.ManagedUIA);
        }

        /// <summary>
        /// Checks for screen avalability
        /// </summary>
        /// <param name="timeout">
        /// The amount of time allowed for the screen avalability
        /// </param>
        public bool WaitForAvailable(int timeout)
        {
            try
            {
                if (HPDigitalSendinWindow.WaitForAvailable(timeout) == ResultCode.Passed)
                {
                    if (EmailTabItem.WaitForAvailable(timeout) == ResultCode.Passed)
                    {
                        return true;
                    }
                }
            }
            catch(Exception)
            {
                return false;
            }

            return false;
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinWindow
        {
            get
            {
                if (null == fHPDigitalSendinWindow)
                {
                    fHPDigitalSendinWindow = new Window("HPDigitalSendinWindow", Desktop);
                    fHPDigitalSendinWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AB81453F-68AD-4243-ACA8-B4D9362C4ED4");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software Configuration (Server IP Address: {_ipAddress})");
                }

                return fHPDigitalSendinWindow;
            }
        }


        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinDup1Window
        {
            get
            {
                if (null == fHPDigitalSendinDup1Window)
                {
                    fHPDigitalSendinDup1Window = new Window("HPDigitalSendinDup1Window", AddSMTPGatewayWindow);
                    fHPDigitalSendinDup1Window.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinDup1Window.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalSendinDup1Window.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"336E3250-8749-475d-952F-E36223E36750");
                    fHPDigitalSendinDup1Window.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Digital Sending Software");
                }

                return fHPDigitalSendinDup1Window;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window AddSMTPGatewayWindow
        {
            get
            {
                if (null == fAddSMTPGatewayWWindow)
                {
                    fAddSMTPGatewayWWindow = new Window("AddSMTPGatewayWindow", HPDigitalSendinWindow);
                    fAddSMTPGatewayWWindow.UIMap.Scope = UIASeachScope.Children;
                    fAddSMTPGatewayWWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fAddSMTPGatewayWWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"840DA3C5-5E6C-4629-AB1A-22BEE08AFD2E");
                    fAddSMTPGatewayWWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add SMTP Gateway");
                }

                return fAddSMTPGatewayWWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar AddSMTPGatewayTitleBar
        {
            get
            {
                if (null == fAddSMTPGatewayTitleBar)
                {
                    fAddSMTPGatewayTitleBar = new TitleBar("AddSMTPGatewayTitleBar", AddSMTPGatewayWindow);
                    fAddSMTPGatewayTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fAddSMTPGatewayTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fAddSMTPGatewayTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add SMTP Gateway");
                }

                return fAddSMTPGatewayTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyDup0MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup0MenuBar)
                {
                    fSystemMenuBarSyDup0MenuBar = new MenuBar("SystemMenuBarSyDup0MenuBar", AddSMTPGatewayTitleBar);
                    fSystemMenuBarSyDup0MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyDup0MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1I0XMenuItem
        {
            get
            {
                if (null == fSystemItem1I0XMenuItem)
                {
                    fSystemItem1I0XMenuItem = new MenuItem("SystemItem1I0XMenuItem", SystemMenuBarSyDup0MenuBar);
                    fSystemItem1I0XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I0XMenuItem.UIMap.Index = 0;
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1I0XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MinimizeMinimizDup0Button
        {
            get
            {
                if (null == fMinimizeMinimizDup0Button)
                {
                    fMinimizeMinimizDup0Button = new Button("MinimizeMinimizDup0Button", AddSMTPGatewayTitleBar);
                    fMinimizeMinimizDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                    fMinimizeMinimizDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                }

                return fMinimizeMinimizDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MaximizeMaximizDup0Button
        {
            get
            {
                if (null == fMaximizeMaximizDup0Button)
                {
                    fMaximizeMaximizDup0Button = new Button("MaximizeMaximizDup0Button", AddSMTPGatewayTitleBar);
                    fMaximizeMaximizDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fMaximizeMaximizDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Maximize");
                    fMaximizeMaximizDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximize");
                }

                return fMaximizeMaximizDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseDup0Button
        {
            get
            {
                if (null == fCloseCloseDup0Button)
                {
                    fCloseCloseDup0Button = new Button("CloseCloseDup0Button", AddSMTPGatewayTitleBar);
                    fCloseCloseDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseDup0Button;
            }
        }


        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button DSSPromptOKButton
        {
            get
            {
                if (null == fOKButtonAE4B0C6Button)
                {
                    fOKButtonAE4B0C6Button = new Button("OKButtonAE4B0C6Button", HPDigitalSendinDup1Window);
                    fOKButtonAE4B0C6Button.UIMap.Scope = UIASeachScope.Children;
                    fOKButtonAE4B0C6Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButtonAE4B0C6Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AE4B0C61-2DEE-4974-B517-4A1388A3F4CC");
                    fOKButtonAE4B0C6Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButtonAE4B0C6Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button SmtpOKButton
        {
            get
            {
                if (null == fOKButton4D1AF73Button)
                {
                    fOKButton4D1AF73Button = new Button("SmtpOKButton", AddSMTPGatewayWindow);
                    fOKButton4D1AF73Button.UIMap.Scope = UIASeachScope.Children;
                    fOKButton4D1AF73Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButton4D1AF73Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4D1AF739-ECAD-44e8-B66C-FEEC4133B6E5");
                    fOKButton4D1AF73Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButton4D1AF73Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OKTextBlockDup0Text
        {
            get
            {
                if (null == fOKTextBlockDup0Text)
                {
                    fOKTextBlockDup0Text = new Text("OKTextBlockDup0Text", SmtpOKButton);
                    fOKTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fOKTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOKTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButton132Button
        {
            get
            {
                if (null == fCancelButton132Button)
                {
                    fCancelButton132Button = new Button("CancelButton132Button", AddSMTPGatewayWindow);
                    fCancelButton132Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton132Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButton132Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"13254308-da5f-4048-ac9d-c6c591c58d28");
                    fCancelButton132Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButton132Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CancelTextBlockDup0Text
        {
            get
            {
                if (null == fCancelTextBlockDup0Text)
                {
                    fCancelTextBlockDup0Text = new Text("CancelTextBlockDup0Text", CancelButton132Button);
                    fCancelTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fCancelTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCancelTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button HelpButtonaaafdButton
        {
            get
            {
                if (null == fHelpButtonaaafdButton)
                {
                    fHelpButtonaaafdButton = new Button("HelpButtonaaafdButton", AddSMTPGatewayWindow);
                    fHelpButtonaaafdButton.UIMap.Scope = UIASeachScope.Children;
                    fHelpButtonaaafdButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fHelpButtonaaafdButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"aaafdab3-ca58-4c44-b86c-124bd7c48d75");
                    fHelpButtonaaafdButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpButtonaaafdButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HelpTextBlockDup0Text
        {
            get
            {
                if (null == fHelpTextBlockDup0Text)
                {
                    fHelpTextBlockDup0Text = new Text("HelpTextBlockDup0Text", HelpButtonaaafdButton);
                    fHelpTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fHelpTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHelpTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group OutgoingEmailSeDup0Group
        {
            get
            {
                if (null == fOutgoingEmailSeDup0Group)
                {
                    fOutgoingEmailSeDup0Group = new Group("OutgoingEmailSeDup0Group", AddSMTPGatewayWindow);
                    fOutgoingEmailSeDup0Group.UIMap.Scope = UIASeachScope.Children;
                    fOutgoingEmailSeDup0Group.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fOutgoingEmailSeDup0Group.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"326ac2c5-60cf-4403-99e0-f881bec7f17c");
                    fOutgoingEmailSeDup0Group.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Outgoing E-mail Server");
                }

                return fOutgoingEmailSeDup0Group;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OutgoingEmailSeDup0Text
        {
            get
            {
                if (null == fOutgoingEmailSeDup0Text)
                {
                    fOutgoingEmailSeDup0Text = new Text("OutgoingEmailSeDup0Text", OutgoingEmailSeDup0Group);
                    fOutgoingEmailSeDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fOutgoingEmailSeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOutgoingEmailSeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Outgoing E-mail Server");
                }

                return fOutgoingEmailSeDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPane
        {
            get
            {
                if (null == fScrollViewerPane)
                {
                    fScrollViewerPane = new Pane("ScrollViewerPane", OutgoingEmailSeDup0Group);
                    fScrollViewerPane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                }

                return fScrollViewerPane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ServerNameorAddDup0Text
        {
            get
            {
                if (null == fServerNameorAddDup0Text)
                {
                    fServerNameorAddDup0Text = new Text("ServerNameorAddDup0Text", ScrollViewerPane);
                    fServerNameorAddDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fServerNameorAddDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fServerNameorAddDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ae397b9e-4e7c-4430-a234-2a778bdc954a");
                    fServerNameorAddDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Server Name or Address");
                }

                return fServerNameorAddDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ServerNameorAddDup1Text
        {
            get
            {
                if (null == fServerNameorAddDup1Text)
                {
                    fServerNameorAddDup1Text = new Text("ServerNameorAddDup1Text", ServerNameorAddDup0Text);
                    fServerNameorAddDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fServerNameorAddDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fServerNameorAddDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Server Name or Address");
                }

                return fServerNameorAddDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PortText2b91632Text
        {
            get
            {
                if (null == fPortText2b91632Text)
                {
                    fPortText2b91632Text = new Text("PortText2b91632Text", ScrollViewerPane);
                    fPortText2b91632Text.UIMap.Scope = UIASeachScope.Children;
                    fPortText2b91632Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fPortText2b91632Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2b916328-44e0-4bf1-aae1-a738afcd1fff");
                    fPortText2b91632Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Port");
                }

                return fPortText2b91632Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PortTextBlockText
        {
            get
            {
                if (null == fPortTextBlockText)
                {
                    fPortTextBlockText = new Text("PortTextBlockText", PortText2b91632Text);
                    fPortTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fPortTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPortTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Port");
                }

                return fPortTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit SmtpServerTextBoxEdit
        {
            get
            {
                if (null == fTextBox59D047B3Edit)
                {
                    fTextBox59D047B3Edit = new Edit("SmtpServerTextBoxEdit", ScrollViewerPane);
                    fTextBox59D047B3Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox59D047B3Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox59D047B3Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"59D047B3-17E9-4904-8B4B-F9EAD3B5102C");
                }

                return fTextBox59D047B3Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup0Pane
        {
            get
            {
                if (null == fScrollViewerPARDup0Pane)
                {
                    fScrollViewerPARDup0Pane = new Pane("ScrollViewerPARDup0Pane", SmtpServerTextBoxEdit);
                    fScrollViewerPARDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI0XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI0XScrollBar)
                {
                    fScrollBarVerticI0XScrollBar = new ScrollBar("ScrollBarVerticI0XScrollBar", ScrollViewerPARDup0Pane);
                    fScrollBarVerticI0XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI0XScrollBar.UIMap.Index = 0;
                    fScrollBarVerticI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI0XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI0XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI0XScrollBar)
                {
                    fScrollBarHorizoI0XScrollBar = new ScrollBar("ScrollBarHorizoI0XScrollBar", ScrollViewerPARDup0Pane);
                    fScrollBarHorizoI0XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI0XScrollBar.UIMap.Index = 0;
                    fScrollBarHorizoI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI0XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit SmtpPortTextBox
        {
            get
            {
                if (null == fTextBox2a0b0b2fEdit)
                {
                    fTextBox2a0b0b2fEdit = new Edit("SmtpPortTextBox", ScrollViewerPane);
                    fTextBox2a0b0b2fEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox2a0b0b2fEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox2a0b0b2fEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2a0b0b2f-095d-4f1f-81bb-5be81b8cb06f");
                }

                return fTextBox2a0b0b2fEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup1Pane
        {
            get
            {
                if (null == fScrollViewerPARDup1Pane)
                {
                    fScrollViewerPARDup1Pane = new Pane("ScrollViewerPARDup1Pane", SmtpPortTextBox);
                    fScrollViewerPARDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI1XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI1XScrollBar)
                {
                    fScrollBarVerticI1XScrollBar = new ScrollBar("ScrollBarVerticI1XScrollBar", ScrollViewerPARDup1Pane);
                    fScrollBarVerticI1XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI1XScrollBar.UIMap.Index = 1;
                    fScrollBarVerticI1XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI1XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI1XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI1XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI1XScrollBar)
                {
                    fScrollBarHorizoI1XScrollBar = new ScrollBar("ScrollBarHorizoI1XScrollBar", ScrollViewerPARDup1Pane);
                    fScrollBarHorizoI1XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI1XScrollBar.UIMap.Index = 1;
                    fScrollBarHorizoI1XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI1XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI1XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button AutoFindButton3Button
        {
            get
            {
                if (null == fAutoFindButton3Button)
                {
                    fAutoFindButton3Button = new Button("AutoFindButton3Button", ScrollViewerPane);
                    fAutoFindButton3Button.UIMap.Scope = UIASeachScope.Children;
                    fAutoFindButton3Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fAutoFindButton3Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3882885e-72dd-430d-9da3-acbaadb6b0ae");
                    fAutoFindButton3Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Auto Find...");
                }

                return fAutoFindButton3Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AutoFindTextBloText
        {
            get
            {
                if (null == fAutoFindTextBloText)
                {
                    fAutoFindTextBloText = new Text("AutoFindTextBloText", AutoFindButton3Button);
                    fAutoFindTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fAutoFindTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAutoFindTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Auto Find...");
                }

                return fAutoFindTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox SmtpEnableSSLCheckBox
        {
            get
            {
                if (null == fEnableSMTPSSLPrCheckBox)
                {
                    fEnableSMTPSSLPrCheckBox = new CheckBox("SmtpEnableSSLCheckBox", ScrollViewerPane);
                    fEnableSMTPSSLPrCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fEnableSMTPSSLPrCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fEnableSMTPSSLPrCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c1e3fb74-e5a8-4546-bd7b-027161f2e44e");
                    fEnableSMTPSSLPrCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enable SMTP SSL Protocol");
                }

                return fEnableSMTPSSLPrCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EnableSMTPSSLPrText
        {
            get
            {
                if (null == fEnableSMTPSSLPrText)
                {
                    fEnableSMTPSSLPrText = new Text("EnableSMTPSSLPrText", SmtpEnableSSLCheckBox);
                    fEnableSMTPSSLPrText.UIMap.Scope = UIASeachScope.Children;
                    fEnableSMTPSSLPrText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEnableSMTPSSLPrText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enable SMTP SSL Protocol");
                }

                return fEnableSMTPSSLPrText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox SmtpRequiresAuthCheckBox
        {
            get
            {
                if (null == fServerRequiresACheckBox)
                {
                    fServerRequiresACheckBox = new CheckBox("SmtpRequiresAuthCheckBox", ScrollViewerPane);
                    fServerRequiresACheckBox.UIMap.Scope = UIASeachScope.Children;
                    fServerRequiresACheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fServerRequiresACheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"79c00105-f651-44fd-974b-f86a292a0ace");
                    fServerRequiresACheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Server Requires Authentication");
                }

                return fServerRequiresACheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ServerRequiresAText
        {
            get
            {
                if (null == fServerRequiresAText)
                {
                    fServerRequiresAText = new Text("ServerRequiresAText", SmtpRequiresAuthCheckBox);
                    fServerRequiresAText.UIMap.Scope = UIASeachScope.Children;
                    fServerRequiresAText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fServerRequiresAText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Server Requires Authentication");
                }

                return fServerRequiresAText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox SmtpUseWhichCredentialsComboBox
        {
            get
            {
                if (null == fComboBox9084316ComboBox)
                {
                    fComboBox9084316ComboBox = new ComboBox("SmtpUseWhichCredentialsComboBox", ScrollViewerPane);
                    fComboBox9084316ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox9084316ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox9084316ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9084316f-31bb-4c78-811d-f3093a832b2d");
                }

                return fComboBox9084316ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SMTPcredentialsText
        {
            get
            {
                if (null == fSMTPcredentialsText)
                {
                    fSMTPcredentialsText = new Text("SMTPcredentialsText", ScrollViewerPane);
                    fSMTPcredentialsText.UIMap.Scope = UIASeachScope.Children;
                    fSMTPcredentialsText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSMTPcredentialsText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4853565D-16F4-499b-83B7-356EA4BA6263");
                    fSMTPcredentialsText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"SMTP credentials are required by DSS in order to notify administrators of critical errors by email.");
                }

                return fSMTPcredentialsText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text UsernameTexted5Text
        {
            get
            {
                if (null == fUsernameTexted5Text)
                {
                    fUsernameTexted5Text = new Text("UsernameTexted5Text", ScrollViewerPane);
                    fUsernameTexted5Text.UIMap.Scope = UIASeachScope.Children;
                    fUsernameTexted5Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fUsernameTexted5Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ed54b921-5379-4cb1-8b00-523e82ff1387");
                    fUsernameTexted5Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Username");
                }

                return fUsernameTexted5Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text UsernameTextBloText
        {
            get
            {
                if (null == fUsernameTextBloText)
                {
                    fUsernameTextBloText = new Text("UsernameTextBloText", UsernameTexted5Text);
                    fUsernameTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fUsernameTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fUsernameTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Username");
                }

                return fUsernameTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit SmtpUsernameTextBox
        {
            get
            {
                if (null == fTextBoxc267ec0dEdit)
                {
                    fTextBoxc267ec0dEdit = new Edit("SmtpUsernameTextBox", ScrollViewerPane);
                    fTextBoxc267ec0dEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxc267ec0dEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxc267ec0dEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c267ec0d-ad84-4ba9-901f-ce874b6265de");
                }

                return fTextBoxc267ec0dEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup2Pane
        {
            get
            {
                if (null == fScrollViewerPARDup2Pane)
                {
                    fScrollViewerPARDup2Pane = new Pane("ScrollViewerPARDup2Pane", SmtpUsernameTextBox);
                    fScrollViewerPARDup2Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup2Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup2Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup2Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI2XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI2XScrollBar)
                {
                    fScrollBarVerticI2XScrollBar = new ScrollBar("ScrollBarVerticI2XScrollBar", ScrollViewerPARDup2Pane);
                    fScrollBarVerticI2XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI2XScrollBar.UIMap.Index = 2;
                    fScrollBarVerticI2XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI2XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI2XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI2XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI2XScrollBar)
                {
                    fScrollBarHorizoI2XScrollBar = new ScrollBar("ScrollBarHorizoI2XScrollBar", ScrollViewerPARDup2Pane);
                    fScrollBarHorizoI2XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI2XScrollBar.UIMap.Index = 2;
                    fScrollBarHorizoI2XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI2XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI2XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PasswordTextbc5Text
        {
            get
            {
                if (null == fPasswordTextbc5Text)
                {
                    fPasswordTextbc5Text = new Text("PasswordTextbc5Text", ScrollViewerPane);
                    fPasswordTextbc5Text.UIMap.Scope = UIASeachScope.Children;
                    fPasswordTextbc5Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fPasswordTextbc5Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"bc5c15ce-065b-4656-999c-42cd98015678");
                    fPasswordTextbc5Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Password");
                }

                return fPasswordTextbc5Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PasswordTextBloText
        {
            get
            {
                if (null == fPasswordTextBloText)
                {
                    fPasswordTextBloText = new Text("PasswordTextBloText", PasswordTextbc5Text);
                    fPasswordTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fPasswordTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPasswordTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Password");
                }

                return fPasswordTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit SmtpPasswordBox
        {
            get
            {
                if (null == fPasswordBox1c44Edit)
                {
                    fPasswordBox1c44Edit = new Edit("SmtpPasswordBox", ScrollViewerPane);
                    fPasswordBox1c44Edit.UIMap.Scope = UIASeachScope.Children;
                    fPasswordBox1c44Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"PasswordBox");
                    fPasswordBox1c44Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1c4442f4-a2e8-4f6c-b04c-53bc8858401e");
                }

                return fPasswordBox1c44Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup3Pane
        {
            get
            {
                if (null == fScrollViewerPARDup3Pane)
                {
                    fScrollViewerPARDup3Pane = new Pane("ScrollViewerPARDup3Pane", SmtpPasswordBox);
                    fScrollViewerPARDup3Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup3Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup3Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup3Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI3XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI3XScrollBar)
                {
                    fScrollBarVerticI3XScrollBar = new ScrollBar("ScrollBarVerticI3XScrollBar", ScrollViewerPARDup3Pane);
                    fScrollBarVerticI3XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI3XScrollBar.UIMap.Index = 3;
                    fScrollBarVerticI3XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI3XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI3XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI3XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI3XScrollBar)
                {
                    fScrollBarHorizoI3XScrollBar = new ScrollBar("ScrollBarHorizoI3XScrollBar", ScrollViewerPARDup3Pane);
                    fScrollBarHorizoI3XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI3XScrollBar.UIMap.Index = 3;
                    fScrollBarHorizoI3XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI3XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI3XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group ServerUsageGrouGroup
        {
            get
            {
                if (null == fServerUsageGrouGroup)
                {
                    fServerUsageGrouGroup = new Group("ServerUsageGrouGroup", ScrollViewerPane);
                    fServerUsageGrouGroup.UIMap.Scope = UIASeachScope.Children;
                    fServerUsageGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fServerUsageGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"FD0F7D22-15E5-44DC-B9FC-77D76136119A");
                    fServerUsageGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Server Usage");
                }

                return fServerUsageGrouGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ServerUsageTextDup0Text
        {
            get
            {
                if (null == fServerUsageTextDup0Text)
                {
                    fServerUsageTextDup0Text = new Text("ServerUsageTextDup0Text", ServerUsageGrouGroup);
                    fServerUsageTextDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fServerUsageTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fServerUsageTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Server Usage");
                }

                return fServerUsageTextDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox EmailSendscanneCheckBox
        {
            get
            {
                if (null == fEmailSendscanneCheckBox)
                {
                    fEmailSendscanneCheckBox = new CheckBox("EmailSendscanneCheckBox", ServerUsageGrouGroup);
                    fEmailSendscanneCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fEmailSendscanneCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fEmailSendscanneCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"0C1C0038-08CA-4E40-ACB4-3B2614A195BB");
                    fEmailSendscanneCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"E-mail:  Send scanned documents and job status notifications.");
                }

                return fEmailSendscanneCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EmailSendscanneText
        {
            get
            {
                if (null == fEmailSendscanneText)
                {
                    fEmailSendscanneText = new Text("EmailSendscanneText", EmailSendscanneCheckBox);
                    fEmailSendscanneText.UIMap.Scope = UIASeachScope.Children;
                    fEmailSendscanneText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEmailSendscanneText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"E-mail:  Send scanned documents and job status notifications.");
                }

                return fEmailSendscanneText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox AutomatedEmailsCheckBox
        {
            get
            {
                if (null == fAutomatedEmailsCheckBox)
                {
                    fAutomatedEmailsCheckBox = new CheckBox("AutomatedEmailsCheckBox", ServerUsageGrouGroup);
                    fAutomatedEmailsCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fAutomatedEmailsCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fAutomatedEmailsCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AA73624C-09F6-4418-BEF4-ACBA6F08BAD8");
                    fAutomatedEmailsCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Automated E-mails: device alerts sent to an administrator or archived faxes are examples of automated e-mails sent by this device.");
                }

                return fAutomatedEmailsCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AutomatedEmailsText
        {
            get
            {
                if (null == fAutomatedEmailsText)
                {
                    fAutomatedEmailsText = new Text("AutomatedEmailsText", AutomatedEmailsCheckBox);
                    fAutomatedEmailsText.UIMap.Scope = UIASeachScope.Children;
                    fAutomatedEmailsText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAutomatedEmailsText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Automated E-mails: device alerts sent to an administrator or archived faxes are examples of automated e-mails sent by this device.");
                }

                return fAutomatedEmailsText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox FaxsendfaxeswheCheckBox
        {
            get
            {
                if (null == fFaxsendfaxeswheCheckBox)
                {
                    fFaxsendfaxeswheCheckBox = new CheckBox("FaxsendfaxeswheCheckBox", ServerUsageGrouGroup);
                    fFaxsendfaxeswheCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fFaxsendfaxeswheCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fFaxsendfaxeswheCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"D1781AEB-F16A-423F-B812-E2DFBBA9EBF4");
                    fFaxsendfaxeswheCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax: send faxes when the fax send method is set to Internet Fax");
                }

                return fFaxsendfaxeswheCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxsendfaxeswheText
        {
            get
            {
                if (null == fFaxsendfaxeswheText)
                {
                    fFaxsendfaxeswheText = new Text("FaxsendfaxeswheText", FaxsendfaxeswheCheckBox);
                    fFaxsendfaxeswheText.UIMap.Scope = UIASeachScope.Children;
                    fFaxsendfaxeswheText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxsendfaxeswheText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax: send faxes when the fax send method is set to Internet Fax");
                }

                return fFaxsendfaxeswheText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SplitemailsiflaDup0Text
        {
            get
            {
                if (null == fSplitemailsiflaDup0Text)
                {
                    fSplitemailsiflaDup0Text = new Text("SplitemailsiflaDup0Text", ScrollViewerPane);
                    fSplitemailsiflaDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fSplitemailsiflaDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fSplitemailsiflaDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"a326a626-3d32-4137-9589-403d8da4608e");
                    fSplitemailsiflaDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Split e-mails if larger than (MB)");
                }

                return fSplitemailsiflaDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SplitemailsiflaDup1Text
        {
            get
            {
                if (null == fSplitemailsiflaDup1Text)
                {
                    fSplitemailsiflaDup1Text = new Text("SplitemailsiflaDup1Text", SplitemailsiflaDup0Text);
                    fSplitemailsiflaDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fSplitemailsiflaDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSplitemailsiflaDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Split e-mails if larger than (MB)");
                }

                return fSplitemailsiflaDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text A010000TextDFBFText
        {
            get
            {
                if (null == fA010000TextDFBFText)
                {
                    fA010000TextDFBFText = new Text("A010000TextDFBFText", ScrollViewerPane);
                    fA010000TextDFBFText.UIMap.Scope = UIASeachScope.Children;
                    fA010000TextDFBFText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fA010000TextDFBFText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"DFBF0092-9A85-4ffb-A949-CABC5463FA08");
                    fA010000TextDFBFText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"(0-100.00)");
                }

                return fA010000TextDFBFText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text A010000TextBlocText
        {
            get
            {
                if (null == fA010000TextBlocText)
                {
                    fA010000TextBlocText = new Text("A010000TextBlocText", A010000TextDFBFText);
                    fA010000TextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fA010000TextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fA010000TextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"(0-100.00)");
                }

                return fA010000TextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit SmtpFileSizeTextBox
        {
            get
            {
                if (null == fTextBoxDDE87868Edit)
                {
                    fTextBoxDDE87868Edit = new Edit("SmtpFileSizeTextBox", ScrollViewerPane);
                    fTextBoxDDE87868Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxDDE87868Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxDDE87868Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"DDE87868-B848-44c3-83A2-D36371EC905E");
                }

                return fTextBoxDDE87868Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup4Pane
        {
            get
            {
                if (null == fScrollViewerPARDup4Pane)
                {
                    fScrollViewerPARDup4Pane = new Pane("ScrollViewerPARDup4Pane", SmtpFileSizeTextBox);
                    fScrollViewerPARDup4Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup4Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup4Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup4Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI4XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI4XScrollBar)
                {
                    fScrollBarVerticI4XScrollBar = new ScrollBar("ScrollBarVerticI4XScrollBar", ScrollViewerPARDup4Pane);
                    fScrollBarVerticI4XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI4XScrollBar.UIMap.Index = 4;
                    fScrollBarVerticI4XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI4XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI4XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI4XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI4XScrollBar)
                {
                    fScrollBarHorizoI4XScrollBar = new ScrollBar("ScrollBarHorizoI4XScrollBar", ScrollViewerPARDup4Pane);
                    fScrollBarHorizoI4XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI4XScrollBar.UIMap.Index = 4;
                    fScrollBarHorizoI4XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI4XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI4XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TheemailwillbesText
        {
            get
            {
                if (null == fTheemailwillbesText)
                {
                    fTheemailwillbesText = new Text("TheemailwillbesText", ScrollViewerPane);
                    fTheemailwillbesText.UIMap.Scope = UIASeachScope.Children;
                    fTheemailwillbesText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTheemailwillbesText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6B2253DE-3023-421a-A4C6-BEA68552666B");
                    fTheemailwillbesText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"The e-mail will be split into multiple e-mails if larger than the specified size. If the value is 0 the e-mail will not be split.");
                }

                return fTheemailwillbesText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SendatestemailtDup0Text
        {
            get
            {
                if (null == fSendatestemailtDup0Text)
                {
                    fSendatestemailtDup0Text = new Text("SendatestemailtDup0Text", ScrollViewerPane);
                    fSendatestemailtDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fSendatestemailtDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fSendatestemailtDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"233fbc23-6710-42cd-9153-af7634b5178f");
                    fSendatestemailtDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send a test e-mail to");
                }

                return fSendatestemailtDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SendatestemailtDup1Text
        {
            get
            {
                if (null == fSendatestemailtDup1Text)
                {
                    fSendatestemailtDup1Text = new Text("SendatestemailtDup1Text", SendatestemailtDup0Text);
                    fSendatestemailtDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fSendatestemailtDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSendatestemailtDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send a test e-mail to");
                }

                return fSendatestemailtDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox5d53755ComboBox
        {
            get
            {
                if (null == fComboBox5d53755ComboBox)
                {
                    fComboBox5d53755ComboBox = new ComboBox("ComboBox5d53755ComboBox", ScrollViewerPane);
                    fComboBox5d53755ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox5d53755ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox5d53755ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5d537551-622f-4c7e-8fd6-7114ad009200");
                }

                return fComboBox5d53755ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxPARTEdiEdit
        {
            get
            {
                if (null == fTextBoxPARTEdiEdit)
                {
                    fTextBoxPARTEdiEdit = new Edit("TextBoxPARTEdiEdit", ComboBox5d53755ComboBox);
                    fTextBoxPARTEdiEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxPARTEdiEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxPARTEdiEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_EditableTextBox");
                }

                return fTextBoxPARTEdiEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup5Pane
        {
            get
            {
                if (null == fScrollViewerPARDup5Pane)
                {
                    fScrollViewerPARDup5Pane = new Pane("ScrollViewerPARDup5Pane", TextBoxPARTEdiEdit);
                    fScrollViewerPARDup5Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup5Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup5Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup5Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI5XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI5XScrollBar)
                {
                    fScrollBarVerticI5XScrollBar = new ScrollBar("ScrollBarVerticI5XScrollBar", ScrollViewerPARDup5Pane);
                    fScrollBarVerticI5XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI5XScrollBar.UIMap.Index = 5;
                    fScrollBarVerticI5XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI5XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI5XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI5XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI5XScrollBar)
                {
                    fScrollBarHorizoI5XScrollBar = new ScrollBar("ScrollBarHorizoI5XScrollBar", ScrollViewerPARDup5Pane);
                    fScrollBarHorizoI5XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI5XScrollBar.UIMap.Index = 5;
                    fScrollBarHorizoI5XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI5XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI5XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button SendButton9c885Button
        {
            get
            {
                if (null == fSendButton9c885Button)
                {
                    fSendButton9c885Button = new Button("SendButton9c885Button", ScrollViewerPane);
                    fSendButton9c885Button.UIMap.Scope = UIASeachScope.Children;
                    fSendButton9c885Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fSendButton9c885Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9c885cbc-5b93-4dbb-8fb5-151e5e64afe7");
                    fSendButton9c885Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send");
                }

                return fSendButton9c885Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SendTextBlockText
        {
            get
            {
                if (null == fSendTextBlockText)
                {
                    fSendTextBlockText = new Text("SendTextBlockText", SendButton9c885Button);
                    fSendTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fSendTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSendTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send");
                }

                return fSendTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticScrollBar
        {
            get
            {
                if (null == fScrollBarVerticScrollBar)
                {
                    fScrollBarVerticScrollBar = new ScrollBar("ScrollBarVerticScrollBar", ScrollViewerPane);
                    fScrollBarVerticScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoScrollBar)
                {
                    fScrollBarHorizoScrollBar = new ScrollBar("ScrollBarHorizoScrollBar", ScrollViewerPane);
                    fScrollBarHorizoScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar HPDigitalSendinTitleBar
        {
            get
            {
                if (null == fHPDigitalSendinTitleBar)
                {
                    fHPDigitalSendinTitleBar = new TitleBar("HPDigitalSendinTitleBar", HPDigitalSendinWindow);
                    fHPDigitalSendinTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Digital Sending Software Configuration (Server IP Address: 15.77.19.23)");
                }

                return fHPDigitalSendinTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyDup1MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup1MenuBar)
                {
                    fSystemMenuBarSyDup1MenuBar = new MenuBar("SystemMenuBarSyDup1MenuBar", HPDigitalSendinTitleBar);
                    fSystemMenuBarSyDup1MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup1MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyDup1MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyDup1MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1I1XMenuItem
        {
            get
            {
                if (null == fSystemItem1I1XMenuItem)
                {
                    fSystemItem1I1XMenuItem = new MenuItem("SystemItem1I1XMenuItem", SystemMenuBarSyDup1MenuBar);
                    fSystemItem1I1XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I1XMenuItem.UIMap.Index = 1;
                    fSystemItem1I1XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1I1XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1I1XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MinimizeMinimizDup1Button
        {
            get
            {
                if (null == fMinimizeMinimizDup1Button)
                {
                    fMinimizeMinimizDup1Button = new Button("MinimizeMinimizDup1Button", HPDigitalSendinTitleBar);
                    fMinimizeMinimizDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                    fMinimizeMinimizDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                }

                return fMinimizeMinimizDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MaximizeMaximizDup1Button
        {
            get
            {
                if (null == fMaximizeMaximizDup1Button)
                {
                    fMaximizeMaximizDup1Button = new Button("MaximizeMaximizDup1Button", HPDigitalSendinTitleBar);
                    fMaximizeMaximizDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fMaximizeMaximizDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Maximize");
                    fMaximizeMaximizDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximize");
                }

                return fMaximizeMaximizDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseDup1Button
        {
            get
            {
                if (null == fCloseCloseDup1Button)
                {
                    fCloseCloseDup1Button = new Button("CloseCloseDup1Button", HPDigitalSendinTitleBar);
                    fCloseCloseDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button HelpButtonCB8CFButton
        {
            get
            {
                if (null == fHelpButtonCB8CFButton)
                {
                    fHelpButtonCB8CFButton = new Button("HelpButtonCB8CFButton", HPDigitalSendinWindow);
                    fHelpButtonCB8CFButton.UIMap.Scope = UIASeachScope.Children;
                    fHelpButtonCB8CFButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fHelpButtonCB8CFButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"CB8CF0C3-DFBE-49b8-B09B-03A34F5D4186");
                    fHelpButtonCB8CFButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpButtonCB8CFButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HelpTextBlockDup1Text
        {
            get
            {
                if (null == fHelpTextBlockDup1Text)
                {
                    fHelpTextBlockDup1Text = new Text("HelpTextBlockDup1Text", HelpButtonCB8CFButton);
                    fHelpTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fHelpTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHelpTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ApplyButton
        {
            get
            {
                if (null == fApplyButton61E2Button)
                {
                    fApplyButton61E2Button = new Button("ApplyButton", HPDigitalSendinWindow);
                    fApplyButton61E2Button.UIMap.Scope = UIASeachScope.Children;
                    fApplyButton61E2Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fApplyButton61E2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"61E2369B-F53B-4662-A361-B3034C4EFF67");
                    fApplyButton61E2Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Apply");
                }

                return fApplyButton61E2Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ApplyTextBlockText
        {
            get
            {
                if (null == fApplyTextBlockText)
                {
                    fApplyTextBlockText = new Text("ApplyTextBlockText", ApplyButton);
                    fApplyTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fApplyTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fApplyTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Apply");
                }

                return fApplyTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButton65CButton
        {
            get
            {
                if (null == fCancelButton65CButton)
                {
                    fCancelButton65CButton = new Button("CancelButton65CButton", HPDigitalSendinWindow);
                    fCancelButton65CButton.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton65CButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButton65CButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"65C76204-7AB5-4681-B7FD-2D8F02DA6D4B");
                    fCancelButton65CButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButton65CButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CancelTextBlockDup1Text
        {
            get
            {
                if (null == fCancelTextBlockDup1Text)
                {
                    fCancelTextBlockDup1Text = new Text("CancelTextBlockDup1Text", CancelButton65CButton);
                    fCancelTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fCancelTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCancelTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button OKButton
        {
            get
            {
                if (null == fOKButtonCC2EF49Button)
                {
                    fOKButtonCC2EF49Button = new Button("OKButton", HPDigitalSendinWindow);
                    fOKButtonCC2EF49Button.UIMap.Scope = UIASeachScope.Children;
                    fOKButtonCC2EF49Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButtonCC2EF49Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"CC2EF491-0BD1-4ac5-9D00-AA61A9D6BA0C");
                    fOKButtonCC2EF49Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButtonCC2EF49Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OKTextBlockDup1Text
        {
            get
            {
                if (null == fOKTextBlockDup1Text)
                {
                    fOKTextBlockDup1Text = new Text("OKTextBlockDup1Text", OKButton);
                    fOKTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fOKTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOKTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Tab TabControlec0fdTab
        {
            get
            {
                if (null == fTabControlec0fdTab)
                {
                    fTabControlec0fdTab = new Tab("TabControlec0fdTab", HPDigitalSendinWindow);
                    fTabControlec0fdTab.UIMap.Scope = UIASeachScope.Children;
                    fTabControlec0fdTab.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabControl");
                    fTabControlec0fdTab.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ec0fd6cd-2ab8-482f-96a5-d1fa158f38d1");
                }

                return fTabControlec0fdTab;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem EmailTabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup2TabItem)
                {
                    fSystemWindowsCoDup2TabItem = new TabItem("EmailTab", TabControlec0fdTab);
                    fSystemWindowsCoDup2TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup2TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup2TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"33A07ED3-E1EE-411e-B583-7D0A3374100F");
                    fSystemWindowsCoDup2TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup2TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EmailTextmEmailText
        {
            get
            {
                if (null == fEmailTextmEmailText)
                {
                    fEmailTextmEmailText = new Text("EmailTextmEmailText", EmailTabItem);
                    fEmailTextmEmailText.UIMap.Scope = UIASeachScope.Children;
                    fEmailTextmEmailText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fEmailTextmEmailText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mEmailTabLabel");
                    fEmailTextmEmailText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"E-mail");
                }

                return fEmailTextmEmailText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EmailTextBlockText
        {
            get
            {
                if (null == fEmailTextBlockText)
                {
                    fEmailTextBlockText = new Text("EmailTextBlockText", EmailTextmEmailText);
                    fEmailTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fEmailTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEmailTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"E-mail");
                }

                return fEmailTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text32de714a8bdText
        {
            get
            {
                if (null == fText32de714a8bdText)
                {
                    fText32de714a8bdText = new Text("Text32de714a8bdText", EmailTabItem);
                    fText32de714a8bdText.UIMap.Scope = UIASeachScope.Children;
                    fText32de714a8bdText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText32de714a8bdText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"32de714a-8bda-4f11-bf20-b9a56b5f18bc");
                    fText32de714a8bdText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText32de714a8bdText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text3b2a8761f4fText
        {
            get
            {
                if (null == fText3b2a8761f4fText)
                {
                    fText3b2a8761f4fText = new Text("Text3b2a8761f4fText", EmailTabItem);
                    fText3b2a8761f4fText.UIMap.Scope = UIASeachScope.Children;
                    fText3b2a8761f4fText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText3b2a8761f4fText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3b2a8761-f4f6-41b1-b08c-9c33744bdc43");
                    fText3b2a8761f4fText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText3b2a8761f4fText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextBlockText
        {
            get
            {
                if (null == fTextBlockText)
                {
                    fTextBlockText = new Text("TextBlockText", Text3b2a8761f4fText);
                    fTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Custom ServiceConfigurCustom
        {
            get
            {
                if (null == fServiceConfigurCustom)
                {
                    fServiceConfigurCustom = new Custom("ServiceConfigurCustom", EmailTabItem);
                    fServiceConfigurCustom.UIMap.Scope = UIASeachScope.Children;
                    fServiceConfigurCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ServiceConfigurationEmailTab");
                    fServiceConfigurCustom.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mServiceConfigurationEmailTab");
                }

                return fServiceConfigurCustom;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Custom ErrorConflictUsCustom
        {
            get
            {
                if (null == fErrorConflictUsCustom)
                {
                    fErrorConflictUsCustom = new Custom("ErrorConflictUsCustom", ServiceConfigurCustom);
                    fErrorConflictUsCustom.UIMap.Scope = UIASeachScope.Children;
                    fErrorConflictUsCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ErrorConflictUserControl");
                    fErrorConflictUsCustom.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mErrorConflictUserControl");
                }

                return fErrorConflictUsCustom;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup0Image
        {
            get
            {
                if (null == fImageDup0Image)
                {
                    fImageDup0Image = new Image("ImageDup0Image", ErrorConflictUsCustom);
                    fImageDup0Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup0Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup0Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text A1AnOutgoingEmaText
        {
            get
            {
                if (null == fA1AnOutgoingEmaText)
                {
                    fA1AnOutgoingEmaText = new Text("A1AnOutgoingEmaText", ErrorConflictUsCustom);
                    fA1AnOutgoingEmaText.UIMap.Scope = UIASeachScope.Children;
                    fA1AnOutgoingEmaText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fA1AnOutgoingEmaText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"33CC58FF-B4EB-41e5-B4AC-3A926D5E70A7");
                    fA1AnOutgoingEmaText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"1.  An Outgoing E-mail Server (SMTP) is required before Send to E-mail can be enabled.");
                }

                return fA1AnOutgoingEmaText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group OutgoingEmailSeDup1Group
        {
            get
            {
                if (null == fOutgoingEmailSeDup1Group)
                {
                    fOutgoingEmailSeDup1Group = new Group("OutgoingEmailSeDup1Group", ServiceConfigurCustom);
                    fOutgoingEmailSeDup1Group.UIMap.Scope = UIASeachScope.Children;
                    fOutgoingEmailSeDup1Group.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fOutgoingEmailSeDup1Group.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Outgoing E-mail Server (SMTP) Gateway Server");
                }

                return fOutgoingEmailSeDup1Group;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OutgoingEmailSeDup1Text
        {
            get
            {
                if (null == fOutgoingEmailSeDup1Text)
                {
                    fOutgoingEmailSeDup1Text = new Text("OutgoingEmailSeDup1Text", OutgoingEmailSeDup1Group);
                    fOutgoingEmailSeDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fOutgoingEmailSeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOutgoingEmailSeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Outgoing E-mail Server (SMTP) Gateway Server");
                }

                return fOutgoingEmailSeDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public DataGrid ListView3AC5B63DataGrid
        {
            get
            {
                if (null == fListView3AC5B63DataGrid)
                {
                    fListView3AC5B63DataGrid = new DataGrid("ListView3AC5B63DataGrid", OutgoingEmailSeDup1Group);
                    fListView3AC5B63DataGrid.UIMap.Scope = UIASeachScope.Children;
                    fListView3AC5B63DataGrid.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListView");
                    fListView3AC5B63DataGrid.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3AC5B636-A7C3-4724-8B63-8CC8CFA16FE5");
                }

                return fListView3AC5B63DataGrid;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Header GridViewHeaderRHeader
        {
            get
            {
                if (null == fGridViewHeaderRHeader)
                {
                    fGridViewHeaderRHeader = new Header("GridViewHeaderRHeader", ListView3AC5B63DataGrid);
                    fGridViewHeaderRHeader.UIMap.Scope = UIASeachScope.Children;
                    fGridViewHeaderRHeader.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewHeaderRowPresenter");
                }

                return fGridViewHeaderRHeader;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem PriorityOrderGrHeaderItem
        {
            get
            {
                if (null == fPriorityOrderGrHeaderItem)
                {
                    fPriorityOrderGrHeaderItem = new HeaderItem("PriorityOrderGrHeaderItem", GridViewHeaderRHeader);
                    fPriorityOrderGrHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fPriorityOrderGrHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fPriorityOrderGrHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Priority Order");
                }

                return fPriorityOrderGrHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PriorityOrderTeText
        {
            get
            {
                if (null == fPriorityOrderTeText)
                {
                    fPriorityOrderTeText = new Text("PriorityOrderTeText", PriorityOrderGrHeaderItem);
                    fPriorityOrderTeText.UIMap.Scope = UIASeachScope.Children;
                    fPriorityOrderTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPriorityOrderTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Priority Order");
                }

                return fPriorityOrderTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup0Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup0Thumb)
                {
                    fThumbPARTHeadeDup0Thumb = new Thumb("ThumbPARTHeadeDup0Thumb", PriorityOrderGrHeaderItem);
                    fThumbPARTHeadeDup0Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup0Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup0Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup0Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem SMTPGatewayGridHeaderItem
        {
            get
            {
                if (null == fSMTPGatewayGridHeaderItem)
                {
                    fSMTPGatewayGridHeaderItem = new HeaderItem("SMTPGatewayGridHeaderItem", GridViewHeaderRHeader);
                    fSMTPGatewayGridHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fSMTPGatewayGridHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fSMTPGatewayGridHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"SMTP Gateway");
                }

                return fSMTPGatewayGridHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SMTPGatewayTextText
        {
            get
            {
                if (null == fSMTPGatewayTextText)
                {
                    fSMTPGatewayTextText = new Text("SMTPGatewayTextText", SMTPGatewayGridHeaderItem);
                    fSMTPGatewayTextText.UIMap.Scope = UIASeachScope.Children;
                    fSMTPGatewayTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSMTPGatewayTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"SMTP Gateway");
                }

                return fSMTPGatewayTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup1Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup1Thumb)
                {
                    fThumbPARTHeadeDup1Thumb = new Thumb("ThumbPARTHeadeDup1Thumb", SMTPGatewayGridHeaderItem);
                    fThumbPARTHeadeDup1Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup1Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup1Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup1Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem ServerUsageGridHeaderItem
        {
            get
            {
                if (null == fServerUsageGridHeaderItem)
                {
                    fServerUsageGridHeaderItem = new HeaderItem("ServerUsageGridHeaderItem", GridViewHeaderRHeader);
                    fServerUsageGridHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fServerUsageGridHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fServerUsageGridHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Server Usage");
                }

                return fServerUsageGridHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ServerUsageTextDup1Text
        {
            get
            {
                if (null == fServerUsageTextDup1Text)
                {
                    fServerUsageTextDup1Text = new Text("ServerUsageTextDup1Text", ServerUsageGridHeaderItem);
                    fServerUsageTextDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fServerUsageTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fServerUsageTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Server Usage");
                }

                return fServerUsageTextDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup2Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup2Thumb)
                {
                    fThumbPARTHeadeDup2Thumb = new Thumb("ThumbPARTHeadeDup2Thumb", ServerUsageGridHeaderItem);
                    fThumbPARTHeadeDup2Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup2Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup2Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup2Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button Button500BD6574Button
        {
            get
            {
                if (null == fButton500BD6574Button)
                {
                    fButton500BD6574Button = new Button("Button500BD6574Button", OutgoingEmailSeDup1Group);
                    fButton500BD6574Button.UIMap.Scope = UIASeachScope.Children;
                    fButton500BD6574Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButton500BD6574Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"500BD657-4442-4f87-992B-9034CE400FF4");
                }

                return fButton500BD6574Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup1Image
        {
            get
            {
                if (null == fImageDup1Image)
                {
                    fImageDup1Image = new Image("ImageDup1Image", Button500BD6574Button);
                    fImageDup1Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup1Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup1Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MoveText
        {
            get
            {
                if (null == fMoveText)
                {
                    fMoveText = new Text("MoveText", OutgoingEmailSeDup1Group);
                    fMoveText.UIMap.Scope = UIASeachScope.Children;
                    fMoveText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fMoveText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Move");
                }

                return fMoveText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MoveTextBlockText
        {
            get
            {
                if (null == fMoveTextBlockText)
                {
                    fMoveTextBlockText = new Text("MoveTextBlockText", MoveText);
                    fMoveTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fMoveTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fMoveTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Move");
                }

                return fMoveTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button Button6006B949EButton
        {
            get
            {
                if (null == fButton6006B949EButton)
                {
                    fButton6006B949EButton = new Button("Button6006B949EButton", OutgoingEmailSeDup1Group);
                    fButton6006B949EButton.UIMap.Scope = UIASeachScope.Children;
                    fButton6006B949EButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButton6006B949EButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6006B949-ED2D-4b51-BBB8-E3F6446CF91A");
                }

                return fButton6006B949EButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup2Image
        {
            get
            {
                if (null == fImageDup2Image)
                {
                    fImageDup2Image = new Image("ImageDup2Image", Button6006B949EButton);
                    fImageDup2Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup2Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup2Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button AddSmtpGatewayButton
        {
            get
            {
                if (null == fAddButtonED911FButton)
                {
                    fAddButtonED911FButton = new Button("AddSmtpGatewayButton", OutgoingEmailSeDup1Group);
                    fAddButtonED911FButton.UIMap.Scope = UIASeachScope.Children;
                    fAddButtonED911FButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fAddButtonED911FButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ED911F8E-244F-43ed-B4F5-3E972F176E4B");
                    fAddButtonED911FButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add...");
                }

                return fAddButtonED911FButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddTextBlockText
        {
            get
            {
                if (null == fAddTextBlockText)
                {
                    fAddTextBlockText = new Text("AddTextBlockText", AddSmtpGatewayButton);
                    fAddTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fAddTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add...");
                }

                return fAddTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button EditButtonFF8CEButton
        {
            get
            {
                if (null == fEditButtonFF8CEButton)
                {
                    fEditButtonFF8CEButton = new Button("EditButtonFF8CEButton", OutgoingEmailSeDup1Group);
                    fEditButtonFF8CEButton.UIMap.Scope = UIASeachScope.Children;
                    fEditButtonFF8CEButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fEditButtonFF8CEButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"FF8CEF72-3887-4a94-AD9A-50369AE363FC");
                    fEditButtonFF8CEButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Edit...");
                }

                return fEditButtonFF8CEButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EditTextBlockText
        {
            get
            {
                if (null == fEditTextBlockText)
                {
                    fEditTextBlockText = new Text("EditTextBlockText", EditButtonFF8CEButton);
                    fEditTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fEditTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEditTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Edit...");
                }

                return fEditTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RemoveButtonF9DButton
        {
            get
            {
                if (null == fRemoveButtonF9DButton)
                {
                    fRemoveButtonF9DButton = new Button("RemoveButtonF9DButton", OutgoingEmailSeDup1Group);
                    fRemoveButtonF9DButton.UIMap.Scope = UIASeachScope.Children;
                    fRemoveButtonF9DButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fRemoveButtonF9DButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"F9DF66B3-4B59-43b2-AB2F-5F6DD402E62F");
                    fRemoveButtonF9DButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Remove");
                }

                return fRemoveButtonF9DButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RemoveTextBlockText
        {
            get
            {
                if (null == fRemoveTextBlockText)
                {
                    fRemoveTextBlockText = new Text("RemoveTextBlockText", RemoveButtonF9DButton);
                    fRemoveTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fRemoveTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRemoveTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Remove");
                }

                return fRemoveTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button TestButton31203Button
        {
            get
            {
                if (null == fTestButton31203Button)
                {
                    fTestButton31203Button = new Button("TestButton31203Button", OutgoingEmailSeDup1Group);
                    fTestButton31203Button.UIMap.Scope = UIASeachScope.Children;
                    fTestButton31203Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fTestButton31203Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"31203965-E637-452c-9B37-F5111BAD23C4");
                    fTestButton31203Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Test");
                }

                return fTestButton31203Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TestTextBlockText
        {
            get
            {
                if (null == fTestTextBlockText)
                {
                    fTestTextBlockText = new Text("TestTextBlockText", TestButton31203Button);
                    fTestTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fTestTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTestTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Test");
                }

                return fTestTextBlockText;
            }
        }
    }
}

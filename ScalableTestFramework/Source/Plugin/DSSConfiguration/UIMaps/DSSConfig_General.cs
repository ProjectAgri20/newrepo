//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------

using TopCat.TestApi.Enums;

namespace HP.ScalableTest.Plugin.DSSConfiguration.UIMaps
{
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class DSSConfig_General
    {
        /// <summary>
        /// Backing field for HPDigitalSendinWindow property
        /// </summary>
        private Window fHPDigitalSendinWindow;

        /// <summary>
        /// Backing field for HPDigitalSendinTitleBar property
        /// </summary>
        private TitleBar fHPDigitalSendinTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyMenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyMenuBar;

        /// <summary>
        /// Backing field for SystemItem1MenuItem property
        /// </summary>
        private MenuItem fSystemItem1MenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizButton property
        /// </summary>
        private Button fMinimizeMinimizButton;

        /// <summary>
        /// Backing field for MaximizeMaximizButton property
        /// </summary>
        private Button fMaximizeMaximizButton;

        /// <summary>
        /// Backing field for CloseCloseButton property
        /// </summary>
        private Button fCloseCloseButton;

        /// <summary>
        /// Backing field for HelpButtonCB8CFButton property
        /// </summary>
        private Button fHelpButtonCB8CFButton;

        /// <summary>
        /// Backing field for HelpTextBlockText property
        /// </summary>
        private Text fHelpTextBlockText;

        /// <summary>
        /// Backing field for ApplyButton property
        /// </summary>
        private Button fApplyButton61E2Button;

        /// <summary>
        /// Backing field for ApplyTextBlockText property
        /// </summary>
        private Text fApplyTextBlockText;

        /// <summary>
        /// Backing field for CancelButton65CButton property
        /// </summary>
        private Button fCancelButton65CButton;

        /// <summary>
        /// Backing field for CancelTextBlockText property
        /// </summary>
        private Text fCancelTextBlockText;

        /// <summary>
        /// Backing field for OKButton property
        /// </summary>
        private Button fOKButtonCC2EF49Button;

        /// <summary>
        /// Backing field for OKTextBlockText property
        /// </summary>
        private Text fOKTextBlockText;

        /// <summary>
        /// Backing field for TabControlec0fdTab property
        /// </summary>
        private Tab fTabControlec0fdTab;

        /// <summary>
        /// Backing field for GeneralTabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup0TabItem;

        /// <summary>
        /// Backing field for GeneralTextmGenText property
        /// </summary>
        private Text fGeneralTextmGenText;

        /// <summary>
        /// Backing field for GeneralTextBlocText property
        /// </summary>
        private Text fGeneralTextBlocText;

        /// <summary>
        /// Backing field for Text933345b04e3Text property
        /// </summary>
        private Text fText933345b04e3Text;

        /// <summary>
        /// Backing field for Text786caf67344Text property
        /// </summary>
        private Text fText786caf67344Text;

        /// <summary>
        /// Backing field for ScrollViewerPane property
        /// </summary>
        private Pane fScrollViewerPane;

        /// <summary>
        /// Backing field for ErrorConflictUsCustom property
        /// </summary>
        private Custom fErrorConflictUsCustom;

        /// <summary>
        /// Backing field for LicensesGroupBoGroup property
        /// </summary>
        private Group fLicensesGroupBoGroup;

        /// <summary>
        /// Backing field for LicensesTextBloText property
        /// </summary>
        private Text fLicensesTextBloText;

        /// <summary>
        /// Backing field for ListView95bd57eDataGrid property
        /// </summary>
        private DataGrid fListView95bd57eDataGrid;

        /// <summary>
        /// Backing field for GridViewHeaderRHeader property
        /// </summary>
        private Header fGridViewHeaderRHeader;

        /// <summary>
        /// Backing field for TypeGridViewColHeaderItem property
        /// </summary>
        private HeaderItem fTypeGridViewColHeaderItem;

        /// <summary>
        /// Backing field for TypeTextBlockText property
        /// </summary>
        private Text fTypeTextBlockText;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup0Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup0Thumb;

        /// <summary>
        /// Backing field for SeatsGridViewCoHeaderItem property
        /// </summary>
        private HeaderItem fSeatsGridViewCoHeaderItem;

        /// <summary>
        /// Backing field for SeatsTextBlockText property
        /// </summary>
        private Text fSeatsTextBlockText;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup1Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup1Thumb;

        /// <summary>
        /// Backing field for LicenseKeysGridHeaderItem property
        /// </summary>
        private HeaderItem fLicenseKeysGridHeaderItem;

        /// <summary>
        /// Backing field for LicenseKeysTextText property
        /// </summary>
        private Text fLicenseKeysTextText;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup2Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup2Thumb;

        /// <summary>
        /// Backing field for HPDssAppWebServDataItem property
        /// </summary>
        private DataItem fHPDssAppWebServDataItem;

        /// <summary>
        /// Backing field for TrialLicense51DText property
        /// </summary>
        private Text fTrialLicense51DText;

        /// <summary>
        /// Backing field for A50TextBlockText property
        /// </summary>
        private Text fA50TextBlockText;

        /// <summary>
        /// Backing field for A00000000000000Text property
        /// </summary>
        private Text fA00000000000000Text;

        /// <summary>
        /// Backing field for AddButton8a3c56Button property
        /// </summary>
        private Button fAddButton8a3c56Button;

        /// <summary>
        /// Backing field for AddTextBlockText property
        /// </summary>
        private Text fAddTextBlockText;

        /// <summary>
        /// Backing field for RemoveButton7b0Button property
        /// </summary>
        private Button fRemoveButton7b0Button;

        /// <summary>
        /// Backing field for RemoveTextBlockText property
        /// </summary>
        private Text fRemoveTextBlockText;

        /// <summary>
        /// Backing field for TotalSeatsText property
        /// </summary>
        private Text fTotalSeatsText;

        /// <summary>
        /// Backing field for TotalSeatsTextBText property
        /// </summary>
        private Text fTotalSeatsTextBText;

        /// <summary>
        /// Backing field for TextBoxF5F79FEDEdit property
        /// </summary>
        private Edit fTextBoxF5F79FEDEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup0Pane property
        /// </summary>
        private Pane fScrollViewerPARDup0Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI0XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI0XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI0XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI0XScrollBar;

        /// <summary>
        /// Backing field for AdministrationIGroup property
        /// </summary>
        private Group fAdministrationIGroup;

        /// <summary>
        /// Backing field for AdministrationIText property
        /// </summary>
        private Text fAdministrationIText;

        /// <summary>
        /// Backing field for NameText property
        /// </summary>
        private Text fNameText;

        /// <summary>
        /// Backing field for NameTextBlockText property
        /// </summary>
        private Text fNameTextBlockText;

        /// <summary>
        /// Backing field for TextBoxbe5636aaEdit property
        /// </summary>
        private Edit fTextBoxbe5636aaEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup1Pane property
        /// </summary>
        private Pane fScrollViewerPARDup1Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI1XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI1XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI1XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI1XScrollBar;

        /// <summary>
        /// Backing field for PhoneNumberText property
        /// </summary>
        private Text fPhoneNumberText;

        /// <summary>
        /// Backing field for PhoneNumberTextText property
        /// </summary>
        private Text fPhoneNumberTextText;

        /// <summary>
        /// Backing field for TextBoxc9442310Edit property
        /// </summary>
        private Edit fTextBoxc9442310Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup2Pane property
        /// </summary>
        private Pane fScrollViewerPARDup2Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI2XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI2XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI2XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI2XScrollBar;

        /// <summary>
        /// Backing field for EmailAddressText property
        /// </summary>
        private Text fEmailAddressText;

        /// <summary>
        /// Backing field for EmailAddressTexText property
        /// </summary>
        private Text fEmailAddressTexText;

        /// <summary>
        /// Backing field for TextBox7554096dEdit property
        /// </summary>
        private Edit fTextBox7554096dEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup3Pane property
        /// </summary>
        private Pane fScrollViewerPARDup3Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI3XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI3XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI3XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI3XScrollBar;

        /// <summary>
        /// Backing field for LocationText property
        /// </summary>
        private Text fLocationText;

        /// <summary>
        /// Backing field for LocationTextBloText property
        /// </summary>
        private Text fLocationTextBloText;

        /// <summary>
        /// Backing field for TextBoxf4a76ec9Edit property
        /// </summary>
        private Edit fTextBoxf4a76ec9Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup4Pane property
        /// </summary>
        private Pane fScrollViewerPARDup4Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI4XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI4XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI4XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI4XScrollBar;

        /// <summary>
        /// Backing field for NotifyadministrCheckBox property
        /// </summary>
        private CheckBox fNotifyadministrCheckBox;

        /// <summary>
        /// Backing field for NotifyadministrText property
        /// </summary>
        private Text fNotifyadministrText;

        /// <summary>
        /// Backing field for BackupandRestorGroup property
        /// </summary>
        private Group fBackupandRestorGroup;

        /// <summary>
        /// Backing field for BackupandRestorText property
        /// </summary>
        private Text fBackupandRestorText;

        /// <summary>
        /// Backing field for BackupButton property
        /// </summary>
        private Button fBackupButtonB3DButton;

        /// <summary>
        /// Backing field for BackupTextBlockText property
        /// </summary>
        private Text fBackupTextBlockText;

        /// <summary>
        /// Backing field for RestoreButton property
        /// </summary>
        private Button fRestoreButton7CButton;

        /// <summary>
        /// Backing field for RestoreTextBlocText property
        /// </summary>
        private Text fRestoreTextBlocText;

        /// <summary>
        /// Backing field for DataCollectionSGroup property
        /// </summary>
        private Group fDataCollectionSGroup;

        /// <summary>
        /// Backing field for DataCollectionSText property
        /// </summary>
        private Text fDataCollectionSText;

        /// <summary>
        /// Backing field for SendUsageDataToCheckBox property
        /// </summary>
        private CheckBox fSendUsageDataToCheckBox;

        /// <summary>
        /// Backing field for SendUsageDataToText property
        /// </summary>
        private Text fSendUsageDataToText;

        /// <summary>
        /// Backing field for ProxyServerifreGroup property
        /// </summary>
        private Group fProxyServerifreGroup;

        /// <summary>
        /// Backing field for ProxyServerifreText property
        /// </summary>
        private Text fProxyServerifreText;

        /// <summary>
        /// Backing field for AddressTextmProText property
        /// </summary>
        private Text fAddressTextmProText;

        /// <summary>
        /// Backing field for AddressTextBlocText property
        /// </summary>
        private Text fAddressTextBlocText;

        /// <summary>
        /// Backing field for TextBox2D52D54AEdit property
        /// </summary>
        private Edit fTextBox2D52D54AEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup5Pane property
        /// </summary>
        private Pane fScrollViewerPARDup5Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI5XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI5XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI5XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI5XScrollBar;

        /// <summary>
        /// Backing field for PortTextmProxyPText property
        /// </summary>
        private Text fPortTextmProxyPText;

        /// <summary>
        /// Backing field for PortTextBlockText property
        /// </summary>
        private Text fPortTextBlockText;

        /// <summary>
        /// Backing field for TextBoxE6C9345FEdit property
        /// </summary>
        private Edit fTextBoxE6C9345FEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup6Pane property
        /// </summary>
        private Pane fScrollViewerPARDup6Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI6XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI6XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI6XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI6XScrollBar;

        /// <summary>
        /// Backing field for CredentialsifreGroup property
        /// </summary>
        private Group fCredentialsifreGroup;

        /// <summary>
        /// Backing field for CredentialsifreText property
        /// </summary>
        private Text fCredentialsifreText;

        /// <summary>
        /// Backing field for UsernameTextmPrText property
        /// </summary>
        private Text fUsernameTextmPrText;

        /// <summary>
        /// Backing field for UsernameTextBloText property
        /// </summary>
        private Text fUsernameTextBloText;

        /// <summary>
        /// Backing field for TextBox7D3D69B8Edit property
        /// </summary>
        private Edit fTextBox7D3D69B8Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup7Pane property
        /// </summary>
        private Pane fScrollViewerPARDup7Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI7XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI7XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI7XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI7XScrollBar;

        /// <summary>
        /// Backing field for PasswordTextmPrText property
        /// </summary>
        private Text fPasswordTextmPrText;

        /// <summary>
        /// Backing field for PasswordTextBloText property
        /// </summary>
        private Text fPasswordTextBloText;

        /// <summary>
        /// Backing field for PasswordBox7A2CEdit property
        /// </summary>
        private Edit fPasswordBox7A2CEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup8Pane property
        /// </summary>
        private Pane fScrollViewerPARDup8Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI8XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI8XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI8XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI8XScrollBar;

        /// <summary>
        /// Backing field for VerifyConnectioButton property
        /// </summary>
        private Button fVerifyConnectioButton;

        /// <summary>
        /// Backing field for VerifyConnectioText property
        /// </summary>
        private Text fVerifyConnectioText;

        /// <summary>
        /// Backing field for SystemWindowsDoDup0Text property
        /// </summary>
        private Text fSystemWindowsDoDup0Text;

        /// <summary>
        /// Backing field for TextBlockI0XText property
        /// </summary>
        private Text fTextBlockI0XText;

        /// <summary>
        /// Backing field for HyperlinkI0XHyperlink property
        /// </summary>
        private Hyperlink fHyperlinkI0XHyperlink;

        /// <summary>
        /// Backing field for DataCollectionaText property
        /// </summary>
        private Text fDataCollectionaText;

        /// <summary>
        /// Backing field for SystemWindowsDoDup1Text property
        /// </summary>
        private Text fSystemWindowsDoDup1Text;

        /// <summary>
        /// Backing field for TextBlockI1XText property
        /// </summary>
        private Text fTextBlockI1XText;

        /// <summary>
        /// Backing field for HyperlinkI1XHyperlink property
        /// </summary>
        private Hyperlink fHyperlinkI1XHyperlink;

        /// <summary>
        /// Backing field for HPOnlinePrivacyText property
        /// </summary>
        private Text fHPOnlinePrivacyText;

        /// <summary>
        /// Backing field for ScrollBarVerticScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticScrollBar;

        /// <summary>
        /// Backing field for RepeatButtonPARDup0Button property
        /// </summary>
        private Button fRepeatButtonPARDup0Button;

        /// <summary>
        /// Backing field for RepeatButtonPagDup0Button property
        /// </summary>
        private Button fRepeatButtonPagDup0Button;

        /// <summary>
        /// Backing field for RepeatButtonPagDup1Button property
        /// </summary>
        private Button fRepeatButtonPagDup1Button;

        /// <summary>
        /// Backing field for ThumbThumb property
        /// </summary>
        private Thumb fThumbThumb;

        /// <summary>
        /// Backing field for RepeatButtonPARDup1Button property
        /// </summary>
        private Button fRepeatButtonPARDup1Button;

        /// <summary>
        /// Backing field for ScrollBarHorizoScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoScrollBar;

        private string _ipaddress;

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_General"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public DSSConfig_General(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_General"/> class using the default UIAFramework.
        /// </summary>
        public DSSConfig_General()
        {
            Desktop = new Desktop();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_General"/> class using the default UIAFramework.
        /// </summary>
        /// <param name="ipaddress">
        /// The IP address.
        /// </param>
        public DSSConfig_General(string ipaddress)
        {
            Desktop = new Desktop(UIAFramework.ManagedUIA);
            _ipaddress = ipaddress;
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Checks for screen avalability
        /// </summary>
        /// <param name="timeout">
        /// The amount of time allowed for the screen avalability
        /// </param>
        public bool WaitForAvailable(int timeout)
        {
            if (HPDigitalSendinWindow.WaitForAvailable(timeout) == ResultCode.Passed)
            {
                if (GeneralTabItem.WaitForAvailable(timeout) == ResultCode.Passed)
                {
                    return true;
                }
            }

            return false;
        }
        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinWindow
        {
            get
            {
                if (null == fHPDigitalSendinWindow)
                {
                    fHPDigitalSendinWindow = new Window("HPDigitalSendinWindow", Desktop);
                    fHPDigitalSendinWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software Configuration (Server IP Address: {_ipaddress})");
                }

                return fHPDigitalSendinWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar HPDigitalSendinTitleBar
        {
            get
            {
                if (null == fHPDigitalSendinTitleBar)
                {
                    fHPDigitalSendinTitleBar = new TitleBar("HPDigitalSendinTitleBar", HPDigitalSendinWindow);
                    fHPDigitalSendinTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software Configuration (Server IP Address: {_ipaddress})");
                }

                return fHPDigitalSendinTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyMenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyMenuBar)
                {
                    fSystemMenuBarSyMenuBar = new MenuBar("SystemMenuBarSyMenuBar", HPDigitalSendinTitleBar);
                    fSystemMenuBarSyMenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyMenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1MenuItem
        {
            get
            {
                if (null == fSystemItem1MenuItem)
                {
                    fSystemItem1MenuItem = new MenuItem("SystemItem1MenuItem", SystemMenuBarSyMenuBar);
                    fSystemItem1MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MinimizeMinimizButton
        {
            get
            {
                if (null == fMinimizeMinimizButton)
                {
                    fMinimizeMinimizButton = new Button("MinimizeMinimizButton", HPDigitalSendinTitleBar);
                    fMinimizeMinimizButton.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                    fMinimizeMinimizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                }

                return fMinimizeMinimizButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MaximizeMaximizButton
        {
            get
            {
                if (null == fMaximizeMaximizButton)
                {
                    fMaximizeMaximizButton = new Button("MaximizeMaximizButton", HPDigitalSendinTitleBar);
                    fMaximizeMaximizButton.UIMap.Scope = UIASeachScope.Children;
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Maximize");
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximize");
                }

                return fMaximizeMaximizButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseButton
        {
            get
            {
                if (null == fCloseCloseButton)
                {
                    fCloseCloseButton = new Button("CloseCloseButton", HPDigitalSendinTitleBar);
                    fCloseCloseButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button HelpButtonCB8CFButton
        {
            get
            {
                if (null == fHelpButtonCB8CFButton)
                {
                    fHelpButtonCB8CFButton = new Button("HelpButtonCB8CFButton", HPDigitalSendinWindow);
                    fHelpButtonCB8CFButton.UIMap.Scope = UIASeachScope.Children;
                    fHelpButtonCB8CFButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fHelpButtonCB8CFButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpButtonCB8CFButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HelpTextBlockText
        {
            get
            {
                if (null == fHelpTextBlockText)
                {
                    fHelpTextBlockText = new Text("HelpTextBlockText", HelpButtonCB8CFButton);
                    fHelpTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fHelpTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHelpTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ApplyButton61E2Button
        {
            get
            {
                if (null == fApplyButton61E2Button)
                {
                    fApplyButton61E2Button = new Button("ApplyButton", HPDigitalSendinWindow);
                    fApplyButton61E2Button.UIMap.Scope = UIASeachScope.Children;
                    fApplyButton61E2Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fApplyButton61E2Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Apply");
                }

                return fApplyButton61E2Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ApplyTextBlockText
        {
            get
            {
                if (null == fApplyTextBlockText)
                {
                    fApplyTextBlockText = new Text("ApplyTextBlockText", ApplyButton61E2Button);
                    fApplyTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fApplyTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fApplyTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Apply");
                }

                return fApplyTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButton65CButton
        {
            get
            {
                if (null == fCancelButton65CButton)
                {
                    fCancelButton65CButton = new Button("CancelButton65CButton", HPDigitalSendinWindow);
                    fCancelButton65CButton.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton65CButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButton65CButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"65C76204-7AB5-4681-B7FD-2D8F02DA6D4B");
                    fCancelButton65CButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButton65CButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CancelTextBlockText
        {
            get
            {
                if (null == fCancelTextBlockText)
                {
                    fCancelTextBlockText = new Text("CancelTextBlockText", CancelButton65CButton);
                    fCancelTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fCancelTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCancelTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button OKButtonCC2EF49Button
        {
            get
            {
                if (null == fOKButtonCC2EF49Button)
                {
                    fOKButtonCC2EF49Button = new Button("OKButton", HPDigitalSendinWindow);
                    fOKButtonCC2EF49Button.UIMap.Scope = UIASeachScope.Children;
                    fOKButtonCC2EF49Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButtonCC2EF49Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"CC2EF491-0BD1-4ac5-9D00-AA61A9D6BA0C");
                    fOKButtonCC2EF49Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButtonCC2EF49Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OKTextBlockText
        {
            get
            {
                if (null == fOKTextBlockText)
                {
                    fOKTextBlockText = new Text("OKTextBlockText", OKButtonCC2EF49Button);
                    fOKTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fOKTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOKTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Tab TabControlec0fdTab
        {
            get
            {
                if (null == fTabControlec0fdTab)
                {
                    fTabControlec0fdTab = new Tab("TabControlec0fdTab", HPDigitalSendinWindow);
                    fTabControlec0fdTab.UIMap.Scope = UIASeachScope.Children;
                    fTabControlec0fdTab.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabControl");
                    fTabControlec0fdTab.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ec0fd6cd-2ab8-482f-96a5-d1fa158f38d1");
                }

                return fTabControlec0fdTab;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem GeneralTabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup0TabItem)
                {
                    fSystemWindowsCoDup0TabItem = new TabItem("GeneralTabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup0TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup0TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup0TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                    fSystemWindowsCoDup0TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1e2be878-0c03-4404-988c-54d0df925f0f");
                }

                return fSystemWindowsCoDup0TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GeneralTextmGenText
        {
            get
            {
                if (null == fGeneralTextmGenText)
                {
                    fGeneralTextmGenText = new Text("GeneralTextmGenText", GeneralTabItem);
                    fGeneralTextmGenText.UIMap.Scope = UIASeachScope.Children;
                    fGeneralTextmGenText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fGeneralTextmGenText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mGeneralTabLabel");
                    fGeneralTextmGenText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"General");
                }

                return fGeneralTextmGenText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GeneralTextBlocText
        {
            get
            {
                if (null == fGeneralTextBlocText)
                {
                    fGeneralTextBlocText = new Text("GeneralTextBlocText", GeneralTextmGenText);
                    fGeneralTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fGeneralTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fGeneralTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"General");
                }

                return fGeneralTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text933345b04e3Text
        {
            get
            {
                if (null == fText933345b04e3Text)
                {
                    fText933345b04e3Text = new Text("Text933345b04e3Text", GeneralTabItem);
                    fText933345b04e3Text.UIMap.Scope = UIASeachScope.Children;
                    fText933345b04e3Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText933345b04e3Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"933345b0-4e39-44d3-a511-0077f3176ca4");
                    fText933345b04e3Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText933345b04e3Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text786caf67344Text
        {
            get
            {
                if (null == fText786caf67344Text)
                {
                    fText786caf67344Text = new Text("Text786caf67344Text", GeneralTabItem);
                    fText786caf67344Text.UIMap.Scope = UIASeachScope.Children;
                    fText786caf67344Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText786caf67344Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"786caf67-344f-4ddc-83a5-b9431fb36731");
                    fText786caf67344Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText786caf67344Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPane
        {
            get
            {
                if (null == fScrollViewerPane)
                {
                    fScrollViewerPane = new Pane("ScrollViewerPane", GeneralTabItem);
                    fScrollViewerPane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                }

                return fScrollViewerPane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Custom ErrorConflictUsCustom
        {
            get
            {
                if (null == fErrorConflictUsCustom)
                {
                    fErrorConflictUsCustom = new Custom("ErrorConflictUsCustom", ScrollViewerPane);
                    fErrorConflictUsCustom.UIMap.Scope = UIASeachScope.Children;
                    fErrorConflictUsCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ErrorConflictUserControl");
                    fErrorConflictUsCustom.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mErrorConflictUserControl");
                }

                return fErrorConflictUsCustom;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group LicensesGroupBoGroup
        {
            get
            {
                if (null == fLicensesGroupBoGroup)
                {
                    fLicensesGroupBoGroup = new Group("LicensesGroupBoGroup", ScrollViewerPane);
                    fLicensesGroupBoGroup.UIMap.Scope = UIASeachScope.Children;
                    fLicensesGroupBoGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fLicensesGroupBoGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Licenses");
                }

                return fLicensesGroupBoGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text LicensesTextBloText
        {
            get
            {
                if (null == fLicensesTextBloText)
                {
                    fLicensesTextBloText = new Text("LicensesTextBloText", LicensesGroupBoGroup);
                    fLicensesTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fLicensesTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fLicensesTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Licenses");
                }

                return fLicensesTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public DataGrid ListView95bd57eDataGrid
        {
            get
            {
                if (null == fListView95bd57eDataGrid)
                {
                    fListView95bd57eDataGrid = new DataGrid("ListView95bd57eDataGrid", LicensesGroupBoGroup);
                    fListView95bd57eDataGrid.UIMap.Scope = UIASeachScope.Children;
                    fListView95bd57eDataGrid.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListView");
                    fListView95bd57eDataGrid.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"95bd57e0-3f47-4dfc-9916-e3680e626086");
                }

                return fListView95bd57eDataGrid;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Header GridViewHeaderRHeader
        {
            get
            {
                if (null == fGridViewHeaderRHeader)
                {
                    fGridViewHeaderRHeader = new Header("GridViewHeaderRHeader", ListView95bd57eDataGrid);
                    fGridViewHeaderRHeader.UIMap.Scope = UIASeachScope.Children;
                    fGridViewHeaderRHeader.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewHeaderRowPresenter");
                }

                return fGridViewHeaderRHeader;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem TypeGridViewColHeaderItem
        {
            get
            {
                if (null == fTypeGridViewColHeaderItem)
                {
                    fTypeGridViewColHeaderItem = new HeaderItem("TypeGridViewColHeaderItem", GridViewHeaderRHeader);
                    fTypeGridViewColHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fTypeGridViewColHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fTypeGridViewColHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Type");
                }

                return fTypeGridViewColHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TypeTextBlockText
        {
            get
            {
                if (null == fTypeTextBlockText)
                {
                    fTypeTextBlockText = new Text("TypeTextBlockText", TypeGridViewColHeaderItem);
                    fTypeTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fTypeTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTypeTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Type");
                }

                return fTypeTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup0Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup0Thumb)
                {
                    fThumbPARTHeadeDup0Thumb = new Thumb("ThumbPARTHeadeDup0Thumb", TypeGridViewColHeaderItem);
                    fThumbPARTHeadeDup0Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup0Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup0Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup0Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem SeatsGridViewCoHeaderItem
        {
            get
            {
                if (null == fSeatsGridViewCoHeaderItem)
                {
                    fSeatsGridViewCoHeaderItem = new HeaderItem("SeatsGridViewCoHeaderItem", GridViewHeaderRHeader);
                    fSeatsGridViewCoHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fSeatsGridViewCoHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fSeatsGridViewCoHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Seats");
                }

                return fSeatsGridViewCoHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SeatsTextBlockText
        {
            get
            {
                if (null == fSeatsTextBlockText)
                {
                    fSeatsTextBlockText = new Text("SeatsTextBlockText", SeatsGridViewCoHeaderItem);
                    fSeatsTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fSeatsTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSeatsTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Seats");
                }

                return fSeatsTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup1Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup1Thumb)
                {
                    fThumbPARTHeadeDup1Thumb = new Thumb("ThumbPARTHeadeDup1Thumb", SeatsGridViewCoHeaderItem);
                    fThumbPARTHeadeDup1Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup1Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup1Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup1Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem LicenseKeysGridHeaderItem
        {
            get
            {
                if (null == fLicenseKeysGridHeaderItem)
                {
                    fLicenseKeysGridHeaderItem = new HeaderItem("LicenseKeysGridHeaderItem", GridViewHeaderRHeader);
                    fLicenseKeysGridHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fLicenseKeysGridHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fLicenseKeysGridHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"License Keys");
                }

                return fLicenseKeysGridHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text LicenseKeysTextText
        {
            get
            {
                if (null == fLicenseKeysTextText)
                {
                    fLicenseKeysTextText = new Text("LicenseKeysTextText", LicenseKeysGridHeaderItem);
                    fLicenseKeysTextText.UIMap.Scope = UIASeachScope.Children;
                    fLicenseKeysTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fLicenseKeysTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"License Keys");
                }

                return fLicenseKeysTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup2Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup2Thumb)
                {
                    fThumbPARTHeadeDup2Thumb = new Thumb("ThumbPARTHeadeDup2Thumb", LicenseKeysGridHeaderItem);
                    fThumbPARTHeadeDup2Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup2Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup2Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup2Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public DataItem HPDssAppWebServDataItem
        {
            get
            {
                if (null == fHPDssAppWebServDataItem)
                {
                    fHPDssAppWebServDataItem = new DataItem("HPDssAppWebServDataItem", ListView95bd57eDataGrid);
                    fHPDssAppWebServDataItem.UIMap.Scope = UIASeachScope.Children;
                    fHPDssAppWebServDataItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListViewItem");
                    fHPDssAppWebServDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP.Dss.App.Web.Services.Data.LicenseInfo");
                }

                return fHPDssAppWebServDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TrialLicense51DText
        {
            get
            {
                if (null == fTrialLicense51DText)
                {
                    fTrialLicense51DText = new Text("TrialLicense51DText", HPDssAppWebServDataItem);
                    fTrialLicense51DText.UIMap.Scope = UIASeachScope.Children;
                    fTrialLicense51DText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTrialLicense51DText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Trial License (51 Days Remain)");
                }

                return fTrialLicense51DText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text A50TextBlockText
        {
            get
            {
                if (null == fA50TextBlockText)
                {
                    fA50TextBlockText = new Text("A50TextBlockText", HPDssAppWebServDataItem);
                    fA50TextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fA50TextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fA50TextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"50");
                }

                return fA50TextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text A00000000000000Text
        {
            get
            {
                if (null == fA00000000000000Text)
                {
                    fA00000000000000Text = new Text("A00000000000000Text", HPDssAppWebServDataItem);
                    fA00000000000000Text.UIMap.Scope = UIASeachScope.Children;
                    fA00000000000000Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fA00000000000000Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"0000-0000-0000-0000-0000");
                }

                return fA00000000000000Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button AddButton8a3c56Button
        {
            get
            {
                if (null == fAddButton8a3c56Button)
                {
                    fAddButton8a3c56Button = new Button("AddButton8a3c56Button", LicensesGroupBoGroup);
                    fAddButton8a3c56Button.UIMap.Scope = UIASeachScope.Children;
                    fAddButton8a3c56Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fAddButton8a3c56Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8a3c56e6-cb03-41fa-9689-6cb2ff8f53a5");
                    fAddButton8a3c56Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add...");
                }

                return fAddButton8a3c56Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddTextBlockText
        {
            get
            {
                if (null == fAddTextBlockText)
                {
                    fAddTextBlockText = new Text("AddTextBlockText", AddButton8a3c56Button);
                    fAddTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fAddTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add...");
                }

                return fAddTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RemoveButton7b0Button
        {
            get
            {
                if (null == fRemoveButton7b0Button)
                {
                    fRemoveButton7b0Button = new Button("RemoveButton7b0Button", LicensesGroupBoGroup);
                    fRemoveButton7b0Button.UIMap.Scope = UIASeachScope.Children;
                    fRemoveButton7b0Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fRemoveButton7b0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7b06f1b9-7419-445c-96c6-4aa0478d3a5e");
                    fRemoveButton7b0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Remove");
                }

                return fRemoveButton7b0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RemoveTextBlockText
        {
            get
            {
                if (null == fRemoveTextBlockText)
                {
                    fRemoveTextBlockText = new Text("RemoveTextBlockText", RemoveButton7b0Button);
                    fRemoveTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fRemoveTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRemoveTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Remove");
                }

                return fRemoveTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TotalSeatsText
        {
            get
            {
                if (null == fTotalSeatsText)
                {
                    fTotalSeatsText = new Text("TotalSeatsText", LicensesGroupBoGroup);
                    fTotalSeatsText.UIMap.Scope = UIASeachScope.Children;
                    fTotalSeatsText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fTotalSeatsText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Total Seats");
                }

                return fTotalSeatsText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TotalSeatsTextBText
        {
            get
            {
                if (null == fTotalSeatsTextBText)
                {
                    fTotalSeatsTextBText = new Text("TotalSeatsTextBText", TotalSeatsText);
                    fTotalSeatsTextBText.UIMap.Scope = UIASeachScope.Children;
                    fTotalSeatsTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTotalSeatsTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Total Seats");
                }

                return fTotalSeatsTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxF5F79FEDEdit
        {
            get
            {
                if (null == fTextBoxF5F79FEDEdit)
                {
                    fTextBoxF5F79FEDEdit = new Edit("TextBoxF5F79FEDEdit", LicensesGroupBoGroup);
                    fTextBoxF5F79FEDEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxF5F79FEDEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxF5F79FEDEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"F5F79FED-4729-4b69-93C7-6D504C31E9EA");
                }

                return fTextBoxF5F79FEDEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup0Pane
        {
            get
            {
                if (null == fScrollViewerPARDup0Pane)
                {
                    fScrollViewerPARDup0Pane = new Pane("ScrollViewerPARDup0Pane", TextBoxF5F79FEDEdit);
                    fScrollViewerPARDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI0XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI0XScrollBar)
                {
                    fScrollBarVerticI0XScrollBar = new ScrollBar("ScrollBarVerticI0XScrollBar", ScrollViewerPARDup0Pane);
                    fScrollBarVerticI0XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI0XScrollBar.UIMap.Index = 0;
                    fScrollBarVerticI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI0XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI0XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI0XScrollBar)
                {
                    fScrollBarHorizoI0XScrollBar = new ScrollBar("ScrollBarHorizoI0XScrollBar", ScrollViewerPARDup0Pane);
                    fScrollBarHorizoI0XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI0XScrollBar.UIMap.Index = 0;
                    fScrollBarHorizoI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI0XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group AdministrationIGroup
        {
            get
            {
                if (null == fAdministrationIGroup)
                {
                    fAdministrationIGroup = new Group("AdministrationIGroup", ScrollViewerPane);
                    fAdministrationIGroup.UIMap.Scope = UIASeachScope.Children;
                    fAdministrationIGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fAdministrationIGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Administration Information");
                }

                return fAdministrationIGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AdministrationIText
        {
            get
            {
                if (null == fAdministrationIText)
                {
                    fAdministrationIText = new Text("AdministrationIText", AdministrationIGroup);
                    fAdministrationIText.UIMap.Scope = UIASeachScope.Children;
                    fAdministrationIText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAdministrationIText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Administration Information");
                }

                return fAdministrationIText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NameText
        {
            get
            {
                if (null == fNameText)
                {
                    fNameText = new Text("NameText", AdministrationIGroup);
                    fNameText.UIMap.Scope = UIASeachScope.Children;
                    fNameText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fNameText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Name");
                }

                return fNameText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NameTextBlockText
        {
            get
            {
                if (null == fNameTextBlockText)
                {
                    fNameTextBlockText = new Text("NameTextBlockText", NameText);
                    fNameTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fNameTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fNameTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Name");
                }

                return fNameTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxbe5636aaEdit
        {
            get
            {
                if (null == fTextBoxbe5636aaEdit)
                {
                    fTextBoxbe5636aaEdit = new Edit("TextBoxbe5636aaEdit", AdministrationIGroup);
                    fTextBoxbe5636aaEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxbe5636aaEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxbe5636aaEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"be5636aa-474a-4ec8-aed4-d001edbcd508");
                }

                return fTextBoxbe5636aaEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup1Pane
        {
            get
            {
                if (null == fScrollViewerPARDup1Pane)
                {
                    fScrollViewerPARDup1Pane = new Pane("ScrollViewerPARDup1Pane", TextBoxbe5636aaEdit);
                    fScrollViewerPARDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI1XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI1XScrollBar)
                {
                    fScrollBarVerticI1XScrollBar = new ScrollBar("ScrollBarVerticI1XScrollBar", ScrollViewerPARDup1Pane);
                    fScrollBarVerticI1XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI1XScrollBar.UIMap.Index = 1;
                    fScrollBarVerticI1XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI1XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI1XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI1XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI1XScrollBar)
                {
                    fScrollBarHorizoI1XScrollBar = new ScrollBar("ScrollBarHorizoI1XScrollBar", ScrollViewerPARDup1Pane);
                    fScrollBarHorizoI1XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI1XScrollBar.UIMap.Index = 1;
                    fScrollBarHorizoI1XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI1XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI1XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PhoneNumberText
        {
            get
            {
                if (null == fPhoneNumberText)
                {
                    fPhoneNumberText = new Text("PhoneNumberText", AdministrationIGroup);
                    fPhoneNumberText.UIMap.Scope = UIASeachScope.Children;
                    fPhoneNumberText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fPhoneNumberText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Phone Number");
                }

                return fPhoneNumberText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PhoneNumberTextText
        {
            get
            {
                if (null == fPhoneNumberTextText)
                {
                    fPhoneNumberTextText = new Text("PhoneNumberTextText", PhoneNumberText);
                    fPhoneNumberTextText.UIMap.Scope = UIASeachScope.Children;
                    fPhoneNumberTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPhoneNumberTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Phone Number");
                }

                return fPhoneNumberTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxc9442310Edit
        {
            get
            {
                if (null == fTextBoxc9442310Edit)
                {
                    fTextBoxc9442310Edit = new Edit("TextBoxc9442310Edit", AdministrationIGroup);
                    fTextBoxc9442310Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxc9442310Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxc9442310Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c9442310-73c8-41eb-bc83-236ce19bf533");
                }

                return fTextBoxc9442310Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup2Pane
        {
            get
            {
                if (null == fScrollViewerPARDup2Pane)
                {
                    fScrollViewerPARDup2Pane = new Pane("ScrollViewerPARDup2Pane", TextBoxc9442310Edit);
                    fScrollViewerPARDup2Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup2Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup2Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup2Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI2XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI2XScrollBar)
                {
                    fScrollBarVerticI2XScrollBar = new ScrollBar("ScrollBarVerticI2XScrollBar", ScrollViewerPARDup2Pane);
                    fScrollBarVerticI2XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI2XScrollBar.UIMap.Index = 2;
                    fScrollBarVerticI2XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI2XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI2XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI2XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI2XScrollBar)
                {
                    fScrollBarHorizoI2XScrollBar = new ScrollBar("ScrollBarHorizoI2XScrollBar", ScrollViewerPARDup2Pane);
                    fScrollBarHorizoI2XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI2XScrollBar.UIMap.Index = 2;
                    fScrollBarHorizoI2XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI2XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI2XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EmailAddressText
        {
            get
            {
                if (null == fEmailAddressText)
                {
                    fEmailAddressText = new Text("EmailAddressText", AdministrationIGroup);
                    fEmailAddressText.UIMap.Scope = UIASeachScope.Children;
                    fEmailAddressText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fEmailAddressText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"E-mail Address");
                }

                return fEmailAddressText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EmailAddressTexText
        {
            get
            {
                if (null == fEmailAddressTexText)
                {
                    fEmailAddressTexText = new Text("EmailAddressTexText", EmailAddressText);
                    fEmailAddressTexText.UIMap.Scope = UIASeachScope.Children;
                    fEmailAddressTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEmailAddressTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"E-mail Address");
                }

                return fEmailAddressTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBox7554096dEdit
        {
            get
            {
                if (null == fTextBox7554096dEdit)
                {
                    fTextBox7554096dEdit = new Edit("TextBox7554096dEdit", AdministrationIGroup);
                    fTextBox7554096dEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox7554096dEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox7554096dEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7554096d-5672-472e-a3f2-924e34149735");
                }

                return fTextBox7554096dEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup3Pane
        {
            get
            {
                if (null == fScrollViewerPARDup3Pane)
                {
                    fScrollViewerPARDup3Pane = new Pane("ScrollViewerPARDup3Pane", TextBox7554096dEdit);
                    fScrollViewerPARDup3Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup3Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup3Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup3Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI3XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI3XScrollBar)
                {
                    fScrollBarVerticI3XScrollBar = new ScrollBar("ScrollBarVerticI3XScrollBar", ScrollViewerPARDup3Pane);
                    fScrollBarVerticI3XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI3XScrollBar.UIMap.Index = 3;
                    fScrollBarVerticI3XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI3XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI3XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI3XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI3XScrollBar)
                {
                    fScrollBarHorizoI3XScrollBar = new ScrollBar("ScrollBarHorizoI3XScrollBar", ScrollViewerPARDup3Pane);
                    fScrollBarHorizoI3XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI3XScrollBar.UIMap.Index = 3;
                    fScrollBarHorizoI3XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI3XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI3XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text LocationText
        {
            get
            {
                if (null == fLocationText)
                {
                    fLocationText = new Text("LocationText", AdministrationIGroup);
                    fLocationText.UIMap.Scope = UIASeachScope.Children;
                    fLocationText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fLocationText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Location");
                }

                return fLocationText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text LocationTextBloText
        {
            get
            {
                if (null == fLocationTextBloText)
                {
                    fLocationTextBloText = new Text("LocationTextBloText", LocationText);
                    fLocationTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fLocationTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fLocationTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Location");
                }

                return fLocationTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxf4a76ec9Edit
        {
            get
            {
                if (null == fTextBoxf4a76ec9Edit)
                {
                    fTextBoxf4a76ec9Edit = new Edit("TextBoxf4a76ec9Edit", AdministrationIGroup);
                    fTextBoxf4a76ec9Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxf4a76ec9Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxf4a76ec9Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"f4a76ec9-99fb-4fa8-ad14-371a27ba5af1");
                }

                return fTextBoxf4a76ec9Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup4Pane
        {
            get
            {
                if (null == fScrollViewerPARDup4Pane)
                {
                    fScrollViewerPARDup4Pane = new Pane("ScrollViewerPARDup4Pane", TextBoxf4a76ec9Edit);
                    fScrollViewerPARDup4Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup4Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup4Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup4Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI4XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI4XScrollBar)
                {
                    fScrollBarVerticI4XScrollBar = new ScrollBar("ScrollBarVerticI4XScrollBar", ScrollViewerPARDup4Pane);
                    fScrollBarVerticI4XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI4XScrollBar.UIMap.Index = 4;
                    fScrollBarVerticI4XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI4XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI4XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI4XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI4XScrollBar)
                {
                    fScrollBarHorizoI4XScrollBar = new ScrollBar("ScrollBarHorizoI4XScrollBar", ScrollViewerPARDup4Pane);
                    fScrollBarHorizoI4XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI4XScrollBar.UIMap.Index = 4;
                    fScrollBarHorizoI4XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI4XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI4XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox NotifyadministrCheckBox
        {
            get
            {
                if (null == fNotifyadministrCheckBox)
                {
                    fNotifyadministrCheckBox = new CheckBox("NotifyadministrCheckBox", AdministrationIGroup);
                    fNotifyadministrCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fNotifyadministrCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fNotifyadministrCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8f4adb9e-9d0b-4087-9a3e-b584ec203f22");
                    fNotifyadministrCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Notify administrator of critical errors");
                }

                return fNotifyadministrCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NotifyadministrText
        {
            get
            {
                if (null == fNotifyadministrText)
                {
                    fNotifyadministrText = new Text("NotifyadministrText", NotifyadministrCheckBox);
                    fNotifyadministrText.UIMap.Scope = UIASeachScope.Children;
                    fNotifyadministrText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fNotifyadministrText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Notify administrator of critical errors");
                }

                return fNotifyadministrText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group BackupandRestorGroup
        {
            get
            {
                if (null == fBackupandRestorGroup)
                {
                    fBackupandRestorGroup = new Group("BackupandRestorGroup", ScrollViewerPane);
                    fBackupandRestorGroup.UIMap.Scope = UIASeachScope.Children;
                    fBackupandRestorGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fBackupandRestorGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Back up and Restore");
                }

                return fBackupandRestorGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text BackupandRestorText
        {
            get
            {
                if (null == fBackupandRestorText)
                {
                    fBackupandRestorText = new Text("BackupandRestorText", BackupandRestorGroup);
                    fBackupandRestorText.UIMap.Scope = UIASeachScope.Children;
                    fBackupandRestorText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fBackupandRestorText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Back up and Restore");
                }

                return fBackupandRestorText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button BackupButton
        {
            get
            {
                if (null == fBackupButtonB3DButton)
                {
                    fBackupButtonB3DButton = new Button("BackupButton", BackupandRestorGroup);
                    fBackupButtonB3DButton.UIMap.Scope = UIASeachScope.Children;
                    fBackupButtonB3DButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fBackupButtonB3DButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Backup");
                    fBackupButtonB3DButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId,
                        "B3DA8DDD-9E17-4ad3-B72D-CFFE410AAFDC");
                }

                return fBackupButtonB3DButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text BackupTextBlockText
        {
            get
            {
                if (null == fBackupTextBlockText)
                {
                    fBackupTextBlockText = new Text("BackupTextBlockText", BackupButton);
                    fBackupTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fBackupTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fBackupTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Backup");
                }

                return fBackupTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RestoreButton
        {
            get
            {
                if (null == fRestoreButton7CButton)
                {
                    fRestoreButton7CButton = new Button("RestoreButton", BackupandRestorGroup);
                    fRestoreButton7CButton.UIMap.Scope = UIASeachScope.Children;
                    fRestoreButton7CButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fRestoreButton7CButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Restore");
                    fRestoreButton7CButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, "7C80E825-6270-4ba6-95B2-D6A04DF6EB08");
                }

                return fRestoreButton7CButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RestoreTextBlocText
        {
            get
            {
                if (null == fRestoreTextBlocText)
                {
                    fRestoreTextBlocText = new Text("RestoreTextBlocText", RestoreButton);
                    fRestoreTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fRestoreTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRestoreTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Restore");
                }

                return fRestoreTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group DataCollectionSGroup
        {
            get
            {
                if (null == fDataCollectionSGroup)
                {
                    fDataCollectionSGroup = new Group("DataCollectionSGroup", ScrollViewerPane);
                    fDataCollectionSGroup.UIMap.Scope = UIASeachScope.Children;
                    fDataCollectionSGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fDataCollectionSGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Data Collection Settings");
                }

                return fDataCollectionSGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DataCollectionSText
        {
            get
            {
                if (null == fDataCollectionSText)
                {
                    fDataCollectionSText = new Text("DataCollectionSText", DataCollectionSGroup);
                    fDataCollectionSText.UIMap.Scope = UIASeachScope.Children;
                    fDataCollectionSText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDataCollectionSText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Data Collection Settings");
                }

                return fDataCollectionSText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox SendUsageDataToCheckBox
        {
            get
            {
                if (null == fSendUsageDataToCheckBox)
                {
                    fSendUsageDataToCheckBox = new CheckBox("SendUsageDataToCheckBox", DataCollectionSGroup);
                    fSendUsageDataToCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fSendUsageDataToCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fSendUsageDataToCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9DE5C196-8058-46CD-B782-958597F5D0C5");
                    fSendUsageDataToCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send Usage Data To HP");
                }

                return fSendUsageDataToCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SendUsageDataToText
        {
            get
            {
                if (null == fSendUsageDataToText)
                {
                    fSendUsageDataToText = new Text("SendUsageDataToText", SendUsageDataToCheckBox);
                    fSendUsageDataToText.UIMap.Scope = UIASeachScope.Children;
                    fSendUsageDataToText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSendUsageDataToText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send Usage Data To HP");
                }

                return fSendUsageDataToText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group ProxyServerifreGroup
        {
            get
            {
                if (null == fProxyServerifreGroup)
                {
                    fProxyServerifreGroup = new Group("ProxyServerifreGroup", DataCollectionSGroup);
                    fProxyServerifreGroup.UIMap.Scope = UIASeachScope.Children;
                    fProxyServerifreGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fProxyServerifreGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mProxySettingsGroupBox");
                    fProxyServerifreGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Proxy Server (if required)");
                }

                return fProxyServerifreGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ProxyServerifreText
        {
            get
            {
                if (null == fProxyServerifreText)
                {
                    fProxyServerifreText = new Text("ProxyServerifreText", ProxyServerifreGroup);
                    fProxyServerifreText.UIMap.Scope = UIASeachScope.Children;
                    fProxyServerifreText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fProxyServerifreText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Proxy Server (if required)");
                }

                return fProxyServerifreText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddressTextmProText
        {
            get
            {
                if (null == fAddressTextmProText)
                {
                    fAddressTextmProText = new Text("AddressTextmProText", ProxyServerifreGroup);
                    fAddressTextmProText.UIMap.Scope = UIASeachScope.Children;
                    fAddressTextmProText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fAddressTextmProText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mProxyURLLabel");
                    fAddressTextmProText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Address");
                }

                return fAddressTextmProText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddressTextBlocText
        {
            get
            {
                if (null == fAddressTextBlocText)
                {
                    fAddressTextBlocText = new Text("AddressTextBlocText", AddressTextmProText);
                    fAddressTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fAddressTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddressTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Address");
                }

                return fAddressTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBox2D52D54AEdit
        {
            get
            {
                if (null == fTextBox2D52D54AEdit)
                {
                    fTextBox2D52D54AEdit = new Edit("TextBox2D52D54AEdit", ProxyServerifreGroup);
                    fTextBox2D52D54AEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox2D52D54AEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox2D52D54AEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2D52D54A-4F77-4B76-AFF6-1EF0C6AE4B24");
                }

                return fTextBox2D52D54AEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup5Pane
        {
            get
            {
                if (null == fScrollViewerPARDup5Pane)
                {
                    fScrollViewerPARDup5Pane = new Pane("ScrollViewerPARDup5Pane", TextBox2D52D54AEdit);
                    fScrollViewerPARDup5Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup5Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup5Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup5Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI5XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI5XScrollBar)
                {
                    fScrollBarVerticI5XScrollBar = new ScrollBar("ScrollBarVerticI5XScrollBar", ScrollViewerPARDup5Pane);
                    fScrollBarVerticI5XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI5XScrollBar.UIMap.Index = 5;
                    fScrollBarVerticI5XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI5XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI5XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI5XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI5XScrollBar)
                {
                    fScrollBarHorizoI5XScrollBar = new ScrollBar("ScrollBarHorizoI5XScrollBar", ScrollViewerPARDup5Pane);
                    fScrollBarHorizoI5XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI5XScrollBar.UIMap.Index = 5;
                    fScrollBarHorizoI5XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI5XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI5XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PortTextmProxyPText
        {
            get
            {
                if (null == fPortTextmProxyPText)
                {
                    fPortTextmProxyPText = new Text("PortTextmProxyPText", ProxyServerifreGroup);
                    fPortTextmProxyPText.UIMap.Scope = UIASeachScope.Children;
                    fPortTextmProxyPText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fPortTextmProxyPText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mProxyPortLabel");
                    fPortTextmProxyPText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Port");
                }

                return fPortTextmProxyPText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PortTextBlockText
        {
            get
            {
                if (null == fPortTextBlockText)
                {
                    fPortTextBlockText = new Text("PortTextBlockText", PortTextmProxyPText);
                    fPortTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fPortTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPortTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Port");
                }

                return fPortTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxE6C9345FEdit
        {
            get
            {
                if (null == fTextBoxE6C9345FEdit)
                {
                    fTextBoxE6C9345FEdit = new Edit("TextBoxE6C9345FEdit", ProxyServerifreGroup);
                    fTextBoxE6C9345FEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxE6C9345FEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxE6C9345FEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"E6C9345F-5C23-4072-8C8E-9866F79A56F4");
                }

                return fTextBoxE6C9345FEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup6Pane
        {
            get
            {
                if (null == fScrollViewerPARDup6Pane)
                {
                    fScrollViewerPARDup6Pane = new Pane("ScrollViewerPARDup6Pane", TextBoxE6C9345FEdit);
                    fScrollViewerPARDup6Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup6Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup6Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup6Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI6XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI6XScrollBar)
                {
                    fScrollBarVerticI6XScrollBar = new ScrollBar("ScrollBarVerticI6XScrollBar", ScrollViewerPARDup6Pane);
                    fScrollBarVerticI6XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI6XScrollBar.UIMap.Index = 6;
                    fScrollBarVerticI6XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI6XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI6XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI6XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI6XScrollBar)
                {
                    fScrollBarHorizoI6XScrollBar = new ScrollBar("ScrollBarHorizoI6XScrollBar", ScrollViewerPARDup6Pane);
                    fScrollBarHorizoI6XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI6XScrollBar.UIMap.Index = 6;
                    fScrollBarHorizoI6XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI6XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI6XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group CredentialsifreGroup
        {
            get
            {
                if (null == fCredentialsifreGroup)
                {
                    fCredentialsifreGroup = new Group("CredentialsifreGroup", ProxyServerifreGroup);
                    fCredentialsifreGroup.UIMap.Scope = UIASeachScope.Children;
                    fCredentialsifreGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fCredentialsifreGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mProxySettingsCredentials");
                    fCredentialsifreGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Credentials (if required)");
                }

                return fCredentialsifreGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CredentialsifreText
        {
            get
            {
                if (null == fCredentialsifreText)
                {
                    fCredentialsifreText = new Text("CredentialsifreText", CredentialsifreGroup);
                    fCredentialsifreText.UIMap.Scope = UIASeachScope.Children;
                    fCredentialsifreText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCredentialsifreText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Credentials (if required)");
                }

                return fCredentialsifreText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text UsernameTextmPrText
        {
            get
            {
                if (null == fUsernameTextmPrText)
                {
                    fUsernameTextmPrText = new Text("UsernameTextmPrText", CredentialsifreGroup);
                    fUsernameTextmPrText.UIMap.Scope = UIASeachScope.Children;
                    fUsernameTextmPrText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fUsernameTextmPrText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mProxyUserNameLabel");
                    fUsernameTextmPrText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Username");
                }

                return fUsernameTextmPrText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text UsernameTextBloText
        {
            get
            {
                if (null == fUsernameTextBloText)
                {
                    fUsernameTextBloText = new Text("UsernameTextBloText", UsernameTextmPrText);
                    fUsernameTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fUsernameTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fUsernameTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Username");
                }

                return fUsernameTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBox7D3D69B8Edit
        {
            get
            {
                if (null == fTextBox7D3D69B8Edit)
                {
                    fTextBox7D3D69B8Edit = new Edit("TextBox7D3D69B8Edit", CredentialsifreGroup);
                    fTextBox7D3D69B8Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox7D3D69B8Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox7D3D69B8Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7D3D69B8-39AE-4AED-BD50-860CA4A21635");
                }

                return fTextBox7D3D69B8Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup7Pane
        {
            get
            {
                if (null == fScrollViewerPARDup7Pane)
                {
                    fScrollViewerPARDup7Pane = new Pane("ScrollViewerPARDup7Pane", TextBox7D3D69B8Edit);
                    fScrollViewerPARDup7Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup7Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup7Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup7Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI7XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI7XScrollBar)
                {
                    fScrollBarVerticI7XScrollBar = new ScrollBar("ScrollBarVerticI7XScrollBar", ScrollViewerPARDup7Pane);
                    fScrollBarVerticI7XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI7XScrollBar.UIMap.Index = 7;
                    fScrollBarVerticI7XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI7XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI7XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI7XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI7XScrollBar)
                {
                    fScrollBarHorizoI7XScrollBar = new ScrollBar("ScrollBarHorizoI7XScrollBar", ScrollViewerPARDup7Pane);
                    fScrollBarHorizoI7XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI7XScrollBar.UIMap.Index = 7;
                    fScrollBarHorizoI7XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI7XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI7XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PasswordTextmPrText
        {
            get
            {
                if (null == fPasswordTextmPrText)
                {
                    fPasswordTextmPrText = new Text("PasswordTextmPrText", CredentialsifreGroup);
                    fPasswordTextmPrText.UIMap.Scope = UIASeachScope.Children;
                    fPasswordTextmPrText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fPasswordTextmPrText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mProxyPasswordLabel");
                    fPasswordTextmPrText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Password");
                }

                return fPasswordTextmPrText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PasswordTextBloText
        {
            get
            {
                if (null == fPasswordTextBloText)
                {
                    fPasswordTextBloText = new Text("PasswordTextBloText", PasswordTextmPrText);
                    fPasswordTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fPasswordTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPasswordTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Password");
                }

                return fPasswordTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit PasswordBox7A2CEdit
        {
            get
            {
                if (null == fPasswordBox7A2CEdit)
                {
                    fPasswordBox7A2CEdit = new Edit("PasswordBox7A2CEdit", CredentialsifreGroup);
                    fPasswordBox7A2CEdit.UIMap.Scope = UIASeachScope.Children;
                    fPasswordBox7A2CEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"PasswordBox");
                    fPasswordBox7A2CEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7A2CAD59-E473-421A-B12E-F5043AC51841");
                }

                return fPasswordBox7A2CEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup8Pane
        {
            get
            {
                if (null == fScrollViewerPARDup8Pane)
                {
                    fScrollViewerPARDup8Pane = new Pane("ScrollViewerPARDup8Pane", PasswordBox7A2CEdit);
                    fScrollViewerPARDup8Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup8Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup8Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup8Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI8XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI8XScrollBar)
                {
                    fScrollBarVerticI8XScrollBar = new ScrollBar("ScrollBarVerticI8XScrollBar", ScrollViewerPARDup8Pane);
                    fScrollBarVerticI8XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI8XScrollBar.UIMap.Index = 8;
                    fScrollBarVerticI8XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI8XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI8XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI8XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI8XScrollBar)
                {
                    fScrollBarHorizoI8XScrollBar = new ScrollBar("ScrollBarHorizoI8XScrollBar", ScrollViewerPARDup8Pane);
                    fScrollBarHorizoI8XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI8XScrollBar.UIMap.Index = 8;
                    fScrollBarHorizoI8XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI8XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI8XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button VerifyConnectioButton
        {
            get
            {
                if (null == fVerifyConnectioButton)
                {
                    fVerifyConnectioButton = new Button("VerifyConnectioButton", DataCollectionSGroup);
                    fVerifyConnectioButton.UIMap.Scope = UIASeachScope.Children;
                    fVerifyConnectioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fVerifyConnectioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5AD3C779-0DF3-4E9B-9D08-58386EFAD22E");
                    fVerifyConnectioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Verify Connection");
                }

                return fVerifyConnectioButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text VerifyConnectioText
        {
            get
            {
                if (null == fVerifyConnectioText)
                {
                    fVerifyConnectioText = new Text("VerifyConnectioText", VerifyConnectioButton);
                    fVerifyConnectioText.UIMap.Scope = UIASeachScope.Children;
                    fVerifyConnectioText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fVerifyConnectioText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Verify Connection");
                }

                return fVerifyConnectioText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SystemWindowsDoDup0Text
        {
            get
            {
                if (null == fSystemWindowsDoDup0Text)
                {
                    fSystemWindowsDoDup0Text = new Text("SystemWindowsDoDup0Text", DataCollectionSGroup);
                    fSystemWindowsDoDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsDoDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fSystemWindowsDoDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"97D5C126-1C20-4A7E-9024-E549E6B8BE98");
                    fSystemWindowsDoDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Documents.Hyperlink");
                }

                return fSystemWindowsDoDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextBlockI0XText
        {
            get
            {
                if (null == fTextBlockI0XText)
                {
                    fTextBlockI0XText = new Text("TextBlockI0XText", SystemWindowsDoDup0Text);
                    fTextBlockI0XText.UIMap.Scope = UIASeachScope.Children;
                    fTextBlockI0XText.UIMap.Index = 0;
                    fTextBlockI0XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fTextBlockI0XText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Hyperlink HyperlinkI0XHyperlink
        {
            get
            {
                if (null == fHyperlinkI0XHyperlink)
                {
                    fHyperlinkI0XHyperlink = new Hyperlink("HyperlinkI0XHyperlink", TextBlockI0XText);
                    fHyperlinkI0XHyperlink.UIMap.Scope = UIASeachScope.Children;
                    fHyperlinkI0XHyperlink.UIMap.Index = 0;
                    fHyperlinkI0XHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Hyperlink");
                }

                return fHyperlinkI0XHyperlink;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DataCollectionaText
        {
            get
            {
                if (null == fDataCollectionaText)
                {
                    fDataCollectionaText = new Text("DataCollectionaText", HyperlinkI0XHyperlink);
                    fDataCollectionaText.UIMap.Scope = UIASeachScope.Children;
                    fDataCollectionaText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDataCollectionaText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Data Collection and Use Statement");
                }

                return fDataCollectionaText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SystemWindowsDoDup1Text
        {
            get
            {
                if (null == fSystemWindowsDoDup1Text)
                {
                    fSystemWindowsDoDup1Text = new Text("SystemWindowsDoDup1Text", DataCollectionSGroup);
                    fSystemWindowsDoDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsDoDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fSystemWindowsDoDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"CD1BF0E7-29AF-4FD8-B7C1-1E8CA5E2C851");
                    fSystemWindowsDoDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Documents.Hyperlink");
                }

                return fSystemWindowsDoDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextBlockI1XText
        {
            get
            {
                if (null == fTextBlockI1XText)
                {
                    fTextBlockI1XText = new Text("TextBlockI1XText", SystemWindowsDoDup1Text);
                    fTextBlockI1XText.UIMap.Scope = UIASeachScope.Children;
                    fTextBlockI1XText.UIMap.Index = 1;
                    fTextBlockI1XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fTextBlockI1XText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Hyperlink HyperlinkI1XHyperlink
        {
            get
            {
                if (null == fHyperlinkI1XHyperlink)
                {
                    fHyperlinkI1XHyperlink = new Hyperlink("HyperlinkI1XHyperlink", TextBlockI1XText);
                    fHyperlinkI1XHyperlink.UIMap.Scope = UIASeachScope.Children;
                    fHyperlinkI1XHyperlink.UIMap.Index = 1;
                    fHyperlinkI1XHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Hyperlink");
                }

                return fHyperlinkI1XHyperlink;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HPOnlinePrivacyText
        {
            get
            {
                if (null == fHPOnlinePrivacyText)
                {
                    fHPOnlinePrivacyText = new Text("HPOnlinePrivacyText", HyperlinkI1XHyperlink);
                    fHPOnlinePrivacyText.UIMap.Scope = UIASeachScope.Children;
                    fHPOnlinePrivacyText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHPOnlinePrivacyText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Online Privacy Statement");
                }

                return fHPOnlinePrivacyText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticScrollBar
        {
            get
            {
                if (null == fScrollBarVerticScrollBar)
                {
                    fScrollBarVerticScrollBar = new ScrollBar("ScrollBarVerticScrollBar", ScrollViewerPane);
                    fScrollBarVerticScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RepeatButtonPARDup0Button
        {
            get
            {
                if (null == fRepeatButtonPARDup0Button)
                {
                    fRepeatButtonPARDup0Button = new Button("RepeatButtonPARDup0Button", ScrollBarVerticScrollBar);
                    fRepeatButtonPARDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fRepeatButtonPARDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RepeatButton");
                    fRepeatButtonPARDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_LineUpButton");
                }

                return fRepeatButtonPARDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RepeatButtonPagDup0Button
        {
            get
            {
                if (null == fRepeatButtonPagDup0Button)
                {
                    fRepeatButtonPagDup0Button = new Button("RepeatButtonPagDup0Button", ScrollBarVerticScrollBar);
                    fRepeatButtonPagDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fRepeatButtonPagDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RepeatButton");
                    fRepeatButtonPagDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PageUp");
                }

                return fRepeatButtonPagDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RepeatButtonPagDup1Button
        {
            get
            {
                if (null == fRepeatButtonPagDup1Button)
                {
                    fRepeatButtonPagDup1Button = new Button("RepeatButtonPagDup1Button", ScrollBarVerticScrollBar);
                    fRepeatButtonPagDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fRepeatButtonPagDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RepeatButton");
                    fRepeatButtonPagDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PageDown");
                }

                return fRepeatButtonPagDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbThumb
        {
            get
            {
                if (null == fThumbThumb)
                {
                    fThumbThumb = new Thumb("ThumbThumb", ScrollBarVerticScrollBar);
                    fThumbThumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbThumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                }

                return fThumbThumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RepeatButtonPARDup1Button
        {
            get
            {
                if (null == fRepeatButtonPARDup1Button)
                {
                    fRepeatButtonPARDup1Button = new Button("RepeatButtonPARDup1Button", ScrollBarVerticScrollBar);
                    fRepeatButtonPARDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fRepeatButtonPARDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RepeatButton");
                    fRepeatButtonPARDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_LineDownButton");
                }

                return fRepeatButtonPARDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoScrollBar)
                {
                    fScrollBarHorizoScrollBar = new ScrollBar("ScrollBarHorizoScrollBar", ScrollViewerPane);
                    fScrollBarHorizoScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoScrollBar;
            }
        }
   


    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using TopCat.TestApi.Enums;
using TopCat.Core;
namespace HP.ScalableTest.Plugin.DSSConfiguration.UIMaps
{
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class DSSConfig_Prompt
    {
        /// <summary>
        /// Backing field for HPDigitalSendinDup0Window property
        /// </summary>
        private Window fHPDigitalSendinDup0Window;

        /// <summary>
        /// Backing field for HPDigitalSendinDup1Window property
        /// </summary>
        private Window fHPDigitalSendinDup1Window;

        /// <summary>
        /// Backing field for HPDigitalSendinDup0TitleBar property
        /// </summary>
        private TitleBar fHPDigitalSendinDup0TitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyI0XMenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyI0XMenuBar;

        /// <summary>
        /// Backing field for SystemItem1I0XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I0XMenuItem;

        /// <summary>
        /// Backing field for CloseCloseI0XButton property
        /// </summary>
        private Button fCloseCloseI0XButton;

        /// <summary>
        /// Backing field for ImageADA1ECD397Image property
        /// </summary>
        private Image fImageADA1ECD397Image;

        /// <summary>
        /// Backing field for AnOutgoingEmailPane property
        /// </summary>
        private Pane fAnOutgoingEmailPane;

        /// <summary>
        /// Backing field for TextBox85726F33Edit property
        /// </summary>
        private Edit fTextBox85726F33Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARPane property
        /// </summary>
        private Pane fScrollViewerPARPane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup0ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup0ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup0ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup0ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarVerticDup1ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup1ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup1ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup1ScrollBar;

        /// <summary>
        /// Backing field for DoyouwanttocontText property
        /// </summary>
        private Text fDoyouwanttocontText;

        /// <summary>
        /// Backing field for SkipthiswarningCheckBox property
        /// </summary>
        private CheckBox fSkipthiswarningCheckBox;

        /// <summary>
        /// Backing field for OKButtonAE4B0C6Button property
        /// </summary>
        private Button fOKButtonAE4B0C6Button;

        /// <summary>
        /// Backing field for OKTextBlockDup0Text property
        /// </summary>
        private Text fOKTextBlockDup0Text;

        /// <summary>
        /// Backing field for ButtonF5DCA28CCButton property
        /// </summary>
        private Button fButtonF5DCA28CCButton;

        /// <summary>
        /// Backing field for Button221A8BE43Button property
        /// </summary>
        private Button fButton221A8BE43Button;

        /// <summary>
        /// Backing field for Buttone6146bc73Button property
        /// </summary>
        private Button fButtone6146bc73Button;

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_Prompt"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public DSSConfig_Prompt(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_Prompt"/> class using the default UIAFramework.
        /// </summary>
        public DSSConfig_Prompt()
        {
            Desktop = new Desktop();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_Prompt"/> class using the default UIAFramework.
        /// </summary>
        /// <param name="address">
        /// The IP address.
        /// </param>
        public DSSConfig_Prompt(string address)
        {
            _ipAddress = address;
            Desktop = new Desktop(UIAFramework.ManagedUIA);
        }

        /// <summary>
        /// Checks for screen avalability
        /// </summary>
        /// <param name="timeout">
        /// The amount of time allowed for the screen avalability
        /// </param>
        public bool WaitForAvailable(int timeout)
        {
            try
            {
                if (HPDigitalSendinDup0Window.WaitForAvailable(timeout) == ResultCode.Passed)
                {
                    if (HPDigitalSendinDup1Window.WaitForAvailable(timeout) == ResultCode.Passed)
                    {
                        if (DSSPromptOKButton.WaitForAvailable(timeout) == ResultCode.Passed)
                        {
                            return true;
                        }
                    }
                }

            }
            catch (Exception)
            {

                return false;
            }
            
            return false;
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        private string _ipAddress { get; set; }


        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinDup0Window
        {
            get
            {
                if (null == fHPDigitalSendinDup0Window)
                {
                    fHPDigitalSendinDup0Window = new Window("HPDigitalSendinDup0Window", Desktop);
                    fHPDigitalSendinDup0Window.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinDup0Window.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalSendinDup0Window.UIMap.SearchProperties.Add(UIASearchProperty.Name, string.Format(@"HP Digital Sending Software Configuration (Server IP Address: {0})",_ipAddress));
                }

                return fHPDigitalSendinDup0Window;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinDup1Window
        {
            get
            {
                if (null == fHPDigitalSendinDup1Window)
                {
                    fHPDigitalSendinDup1Window = new Window("HPDigitalSendinDup1Window", HPDigitalSendinDup0Window);
                    fHPDigitalSendinDup1Window.UIMap.Scope = UIASeachScope.Descendants;
                    fHPDigitalSendinDup1Window.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalSendinDup1Window.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"336E3250-8749-475d-952F-E36223E36750");
                    fHPDigitalSendinDup1Window.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Digital Sending Software");
                }

                return fHPDigitalSendinDup1Window;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar HPDigitalSendinDup0TitleBar
        {
            get
            {
                if (null == fHPDigitalSendinDup0TitleBar)
                {
                    fHPDigitalSendinDup0TitleBar = new TitleBar("HPDigitalSendinDup0TitleBar", HPDigitalSendinDup1Window);
                    fHPDigitalSendinDup0TitleBar.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinDup0TitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fHPDigitalSendinDup0TitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Digital Sending Software");
                }

                return fHPDigitalSendinDup0TitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyI0XMenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyI0XMenuBar)
                {
                    fSystemMenuBarSyI0XMenuBar = new MenuBar("SystemMenuBarSyI0XMenuBar", HPDigitalSendinDup0TitleBar);
                    fSystemMenuBarSyI0XMenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyI0XMenuBar.UIMap.Index = 0;
                    fSystemMenuBarSyI0XMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyI0XMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyI0XMenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1I0XMenuItem
        {
            get
            {
                if (null == fSystemItem1I0XMenuItem)
                {
                    fSystemItem1I0XMenuItem = new MenuItem("SystemItem1I0XMenuItem", SystemMenuBarSyI0XMenuBar);
                    fSystemItem1I0XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I0XMenuItem.UIMap.Index = 0;
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1I0XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseI0XButton
        {
            get
            {
                if (null == fCloseCloseI0XButton)
                {
                    fCloseCloseI0XButton = new Button("CloseCloseI0XButton", HPDigitalSendinDup0TitleBar);
                    fCloseCloseI0XButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseI0XButton.UIMap.Index = 0;
                    fCloseCloseI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseI0XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseI0XButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageADA1ECD397Image
        {
            get
            {
                if (null == fImageADA1ECD397Image)
                {
                    fImageADA1ECD397Image = new Image("ImageADA1ECD397Image", HPDigitalSendinDup1Window);
                    fImageADA1ECD397Image.UIMap.Scope = UIASeachScope.Children;
                    fImageADA1ECD397Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImageADA1ECD397Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ADA1ECD3-9710-40ab-8188-2BC999BB74C4");
                }

                return fImageADA1ECD397Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane AnOutgoingEmailPane
        {
            get
            {
                if (null == fAnOutgoingEmailPane)
                {
                    fAnOutgoingEmailPane = new Pane("AnOutgoingEmailPane", HPDigitalSendinDup1Window);
                    fAnOutgoingEmailPane.UIMap.Scope = UIASeachScope.Children;
                    fAnOutgoingEmailPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fAnOutgoingEmailPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mMessageScrollViewer");                   
                }

                return fAnOutgoingEmailPane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit PromptMessageEditTextBox
        {
            get
            {
                if (null == fTextBox85726F33Edit)
                {
                    fTextBox85726F33Edit = new Edit("TextBox85726F33Edit", AnOutgoingEmailPane);
                    fTextBox85726F33Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox85726F33Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox85726F33Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"85726F33-6F14-468f-BE13-FE6BFDDBC9C4");
                }

                return fTextBox85726F33Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARPane
        {
            get
            {
                if (null == fScrollViewerPARPane)
                {
                    fScrollViewerPARPane = new Pane("ScrollViewerPARPane", PromptMessageEditTextBox);
                    fScrollViewerPARPane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARPane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup0ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup0ScrollBar)
                {
                    fScrollBarVerticDup0ScrollBar = new ScrollBar("ScrollBarVerticDup0ScrollBar", ScrollViewerPARPane);
                    fScrollBarVerticDup0ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup0ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup0ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup0ScrollBar)
                {
                    fScrollBarHorizoDup0ScrollBar = new ScrollBar("ScrollBarHorizoDup0ScrollBar", ScrollViewerPARPane);
                    fScrollBarHorizoDup0ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup0ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup1ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup1ScrollBar)
                {
                    fScrollBarVerticDup1ScrollBar = new ScrollBar("ScrollBarVerticDup1ScrollBar", AnOutgoingEmailPane);
                    fScrollBarVerticDup1ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup1ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup1ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup1ScrollBar)
                {
                    fScrollBarHorizoDup1ScrollBar = new ScrollBar("ScrollBarHorizoDup1ScrollBar", AnOutgoingEmailPane);
                    fScrollBarHorizoDup1ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup1ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DoyouwanttocontText
        {
            get
            {
                if (null == fDoyouwanttocontText)
                {
                    fDoyouwanttocontText = new Text("DoyouwanttocontText", HPDigitalSendinDup1Window);
                    fDoyouwanttocontText.UIMap.Scope = UIASeachScope.Children;
                    fDoyouwanttocontText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fDoyouwanttocontText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"765D4852-A4CE-4472-8116-4106BCE51F3C");
                    fDoyouwanttocontText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Do you want to continue?");
                }

                return fDoyouwanttocontText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox SkipthiswarningCheckBox
        {
            get
            {
                if (null == fSkipthiswarningCheckBox)
                {
                    fSkipthiswarningCheckBox = new CheckBox("SkipthiswarningCheckBox", HPDigitalSendinDup1Window);
                    fSkipthiswarningCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fSkipthiswarningCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fSkipthiswarningCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2742457A-F95E-4525-846D-141A50A130F2");
                    fSkipthiswarningCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Skip this warning in the future");
                }

                return fSkipthiswarningCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button DSSPromptOKButton
        {
            get
            {
                if (null == fOKButtonAE4B0C6Button)
                {
                    fOKButtonAE4B0C6Button = new Button("OKButtonAE4B0C6Button", HPDigitalSendinDup1Window);
                    fOKButtonAE4B0C6Button.UIMap.Scope = UIASeachScope.Children;
                    fOKButtonAE4B0C6Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButtonAE4B0C6Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AE4B0C61-2DEE-4974-B517-4A1388A3F4CC");
                    fOKButtonAE4B0C6Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButtonAE4B0C6Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OKTextBlockDup0Text
        {
            get
            {
                if (null == fOKTextBlockDup0Text)
                {
                    fOKTextBlockDup0Text = new Text("OKTextBlockDup0Text", DSSPromptOKButton);
                    fOKTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fOKTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOKTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ButtonF5DCA28CCButton
        {
            get
            {
                if (null == fButtonF5DCA28CCButton)
                {
                    fButtonF5DCA28CCButton = new Button("ButtonF5DCA28CCButton", HPDigitalSendinDup1Window);
                    fButtonF5DCA28CCButton.UIMap.Scope = UIASeachScope.Children;
                    fButtonF5DCA28CCButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButtonF5DCA28CCButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"F5DCA28C-C6CD-4bdd-B906-8ED94DC15765");
                }

                return fButtonF5DCA28CCButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button Button221A8BE43Button
        {
            get
            {
                if (null == fButton221A8BE43Button)
                {
                    fButton221A8BE43Button = new Button("Button221A8BE43Button", HPDigitalSendinDup1Window);
                    fButton221A8BE43Button.UIMap.Scope = UIASeachScope.Children;
                    fButton221A8BE43Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButton221A8BE43Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"221A8BE4-38E6-404c-BB43-C15E0DBF3864");
                }

                return fButton221A8BE43Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button Buttone6146bc73Button
        {
            get
            {
                if (null == fButtone6146bc73Button)
                {
                    fButtone6146bc73Button = new Button("Buttone6146bc73Button", HPDigitalSendinDup1Window);
                    fButtone6146bc73Button.UIMap.Scope = UIASeachScope.Children;
                    fButtone6146bc73Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButtone6146bc73Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"e6146bc7-3998-4324-aa44-45b84581525e");
                }

                return fButtone6146bc73Button;
            }
        }
    }
}

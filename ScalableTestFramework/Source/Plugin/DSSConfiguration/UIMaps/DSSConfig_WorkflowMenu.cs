//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using TopCat.Core;

namespace HP.ScalableTest.Plugin.DSSConfiguration.UIMaps
{
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class DSSConfig_WorkflowMenu
    {
        /// <summary>
        /// Backing field for HPDigitalSendinWindow property
        /// </summary>
        private Window fHPDigitalSendinWindow;

        /// <summary>
        /// Backing field for WorkflowPromptWWindow property
        /// </summary>
        private Window fWorkflowPromptWWindow;

        /// <summary>
        /// Backing field for WorkflowPromptTitleBar property
        /// </summary>
        private TitleBar fWorkflowPromptTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup0MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup0MenuBar;

        /// <summary>
        /// Backing field for SystemItem1I0XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I0XMenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizDup0Button property
        /// </summary>
        private Button fMinimizeMinimizDup0Button;

        /// <summary>
        /// Backing field for MaximizeMaximizDup0Button property
        /// </summary>
        private Button fMaximizeMaximizDup0Button;

        /// <summary>
        /// Backing field for CloseCloseDup0Button property
        /// </summary>
        private Button fCloseCloseDup0Button;

        /// <summary>
        /// Backing field for PromptSettingsGGroup property
        /// </summary>
        private Group fPromptSettingsGGroup;

        /// <summary>
        /// Backing field for PromptSettingsTText property
        /// </summary>
        private Text fPromptSettingsTText;

        /// <summary>
        /// Backing field for PromptNameText property
        /// </summary>
        private Text fPromptNameText;

        /// <summary>
        /// Backing field for PromptNameTextBText property
        /// </summary>
        private Text fPromptNameTextBText;

        /// <summary>
        /// Backing field for TextBox35b3cb6cEdit property
        /// </summary>
        private Edit fTextBox35b3cb6cEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup0Pane property
        /// </summary>
        private Pane fScrollViewerPARDup0Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI0XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI0XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI0XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI0XScrollBar;

        /// <summary>
        /// Backing field for HiddenCheckBox6CheckBox property
        /// </summary>
        private CheckBox fHiddenCheckBox6CheckBox;

        /// <summary>
        /// Backing field for HiddenTextBlockText property
        /// </summary>
        private Text fHiddenTextBlockText;

        /// <summary>
        /// Backing field for PromptTextText4Text property
        /// </summary>
        private Text fPromptTextText4Text;

        /// <summary>
        /// Backing field for PromptTextTextBText property
        /// </summary>
        private Text fPromptTextTextBText;

        /// <summary>
        /// Backing field for TextBoxc93b2243Edit property
        /// </summary>
        private Edit fTextBoxc93b2243Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup1Pane property
        /// </summary>
        private Pane fScrollViewerPARDup1Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI1XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI1XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI1XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI1XScrollBar;

        /// <summary>
        /// Backing field for HelpTextTextf1cText property
        /// </summary>
        private Text fHelpTextTextf1cText;

        /// <summary>
        /// Backing field for HelpTextTextBloText property
        /// </summary>
        private Text fHelpTextTextBloText;

        /// <summary>
        /// Backing field for TextBox5c150cf5Edit property
        /// </summary>
        private Edit fTextBox5c150cf5Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup2Pane property
        /// </summary>
        private Pane fScrollViewerPARDup2Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI2XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI2XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI2XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI2XScrollBar;

        /// <summary>
        /// Backing field for ResponseSettingGroup property
        /// </summary>
        private Group fResponseSettingGroup;

        /// <summary>
        /// Backing field for ResponseSettingText property
        /// </summary>
        private Text fResponseSettingText;

        /// <summary>
        /// Backing field for ComboBoxfdad4dcComboBox property
        /// </summary>
        private ComboBox fComboBoxfdad4dcComboBox;

        /// <summary>
        /// Backing field for UserMustSupplyaCheckBox property
        /// </summary>
        private CheckBox fUserMustSupplyaCheckBox;

        /// <summary>
        /// Backing field for UserMustSupplyaText property
        /// </summary>
        private Text fUserMustSupplyaText;

        /// <summary>
        /// Backing field for PasswordPrivacyCheckBox property
        /// </summary>
        private CheckBox fPasswordPrivacyCheckBox;

        /// <summary>
        /// Backing field for PasswordPrivacyText property
        /// </summary>
        private Text fPasswordPrivacyText;

        /// <summary>
        /// Backing field for DecimalPlacesText property
        /// </summary>
        private Text fDecimalPlacesText;

        /// <summary>
        /// Backing field for TextBox2691a881Edit property
        /// </summary>
        private Edit fTextBox2691a881Edit;

        /// <summary>
        /// Backing field for MinimumLengthTeDup0Text property
        /// </summary>
        private Text fMinimumLengthTeDup0Text;

        /// <summary>
        /// Backing field for MinimumLengthTeDup1Text property
        /// </summary>
        private Text fMinimumLengthTeDup1Text;

        /// <summary>
        /// Backing field for TextBoxca4d67a2Edit property
        /// </summary>
        private Edit fTextBoxca4d67a2Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup3Pane property
        /// </summary>
        private Pane fScrollViewerPARDup3Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI3XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI3XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI3XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI3XScrollBar;

        /// <summary>
        /// Backing field for MaximumLengthTeDup0Text property
        /// </summary>
        private Text fMaximumLengthTeDup0Text;

        /// <summary>
        /// Backing field for MaximumLengthTeDup1Text property
        /// </summary>
        private Text fMaximumLengthTeDup1Text;

        /// <summary>
        /// Backing field for TextBoxe5e9fdb8Edit property
        /// </summary>
        private Edit fTextBoxe5e9fdb8Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup4Pane property
        /// </summary>
        private Pane fScrollViewerPARDup4Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI4XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI4XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI4XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI4XScrollBar;

        /// <summary>
        /// Backing field for ListText77c9d9bText property
        /// </summary>
        private Text fListText77c9d9bText;

        /// <summary>
        /// Backing field for TextBox7e9b658fEdit property
        /// </summary>
        private Edit fTextBox7e9b658fEdit;

        /// <summary>
        /// Backing field for DefaultResponseDup0Text property
        /// </summary>
        private Text fDefaultResponseDup0Text;

        /// <summary>
        /// Backing field for DefaultResponseDup1Text property
        /// </summary>
        private Text fDefaultResponseDup1Text;

        /// <summary>
        /// Backing field for TextBoxede04355Edit property
        /// </summary>
        private Edit fTextBoxede04355Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup5Pane property
        /// </summary>
        private Pane fScrollViewerPARDup5Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI5XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI5XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI5XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI5XScrollBar;

        /// <summary>
        /// Backing field for ComboBoxC481CD3ComboBox property
        /// </summary>
        private ComboBox fComboBoxC481CD3ComboBox;

        /// <summary>
        /// Backing field for PasswordBox0c14Edit property
        /// </summary>
        private Edit fPasswordBox0c14Edit;

        /// <summary>
        /// Backing field for ComboBoxmDefaulComboBox property
        /// </summary>
        private ComboBox fComboBoxmDefaulComboBox;

        /// <summary>
        /// Backing field for WindowsFormsHosPane property
        /// </summary>
        private Pane fWindowsFormsHosPane;

        /// <summary>
        /// Backing field for DateFormatTextmText property
        /// </summary>
        private Text fDateFormatTextmText;

        /// <summary>
        /// Backing field for ComboBoxB779EBDComboBox property
        /// </summary>
        private ComboBox fComboBoxB779EBDComboBox;

        /// <summary>
        /// Backing field for A24HourCheckBoxCheckBox property
        /// </summary>
        private CheckBox fA24HourCheckBoxCheckBox;

        /// <summary>
        /// Backing field for OKButton249af4fButton property
        /// </summary>
        private Button fOKButton249af4fButton;

        /// <summary>
        /// Backing field for OKTextBlockDup0Text property
        /// </summary>
        private Text fOKTextBlockDup0Text;

        /// <summary>
        /// Backing field for CancelButtonc31Button property
        /// </summary>
        private Button fCancelButtonc31Button;

        /// <summary>
        /// Backing field for CancelTextBlockDup0Text property
        /// </summary>
        private Text fCancelTextBlockDup0Text;

        /// <summary>
        /// Backing field for HelpButtond12c6Button property
        /// </summary>
        private Button fHelpButtond12c6Button;

        /// <summary>
        /// Backing field for HelpTextBlockDup0Text property
        /// </summary>
        private Text fHelpTextBlockDup0Text;

        /// <summary>
        /// Backing field for AddPromptsWindoWindow property
        /// </summary>
        private Window fAddPromptsWindoWindow;

        /// <summary>
        /// Backing field for AddPromptsTitleBar property
        /// </summary>
        private TitleBar fAddPromptsTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup1MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup1MenuBar;

        /// <summary>
        /// Backing field for SystemItem1I1XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I1XMenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizDup1Button property
        /// </summary>
        private Button fMinimizeMinimizDup1Button;

        /// <summary>
        /// Backing field for MaximizeMaximizDup1Button property
        /// </summary>
        private Button fMaximizeMaximizDup1Button;

        /// <summary>
        /// Backing field for CloseCloseDup1Button property
        /// </summary>
        private Button fCloseCloseDup1Button;

        /// <summary>
        /// Backing field for GroupBoxGroup property
        /// </summary>
        private Group fGroupBoxGroup;

        /// <summary>
        /// Backing field for AvailablePromptDup0Text property
        /// </summary>
        private Text fAvailablePromptDup0Text;

        /// <summary>
        /// Backing field for AvailablePromptDup1Text property
        /// </summary>
        private Text fAvailablePromptDup1Text;

        /// <summary>
        /// Backing field for ListBox62d278ccList property
        /// </summary>
        private List fListBox62d278ccList;

        /// <summary>
        /// Backing field for DEPARTMENTListBListItem property
        /// </summary>
        private ListItem fDEPARTMENTListBListItem;

        /// <summary>
        /// Backing field for DEPARTMENTTextBText property
        /// </summary>
        private Text fDEPARTMENTTextBText;

        /// <summary>
        /// Backing field for Image5A2956C841Dup0Image property
        /// </summary>
        private Image fImage5A2956C841Dup0Image;

        /// <summary>
        /// Backing field for DSSDATEListBoxIListItem property
        /// </summary>
        private ListItem fDSSDATEListBoxIListItem;

        /// <summary>
        /// Backing field for DATETextBlockText property
        /// </summary>
        private Text fDATETextBlockText;

        /// <summary>
        /// Backing field for Image5A2956C841Dup1Image property
        /// </summary>
        private Image fImage5A2956C841Dup1Image;

        /// <summary>
        /// Backing field for DSSDocumentIdLiListItem property
        /// </summary>
        private ListItem fDSSDocumentIdLiListItem;

        /// <summary>
        /// Backing field for DocumentIdTextBText property
        /// </summary>
        private Text fDocumentIdTextBText;

        /// <summary>
        /// Backing field for Image5A2956C841Dup2Image property
        /// </summary>
        private Image fImage5A2956C841Dup2Image;

        /// <summary>
        /// Backing field for DSSDOMAINUSERIDListItem property
        /// </summary>
        private ListItem fDSSDOMAINUSERIDListItem;

        /// <summary>
        /// Backing field for DOMAINUSERIDTexText property
        /// </summary>
        private Text fDOMAINUSERIDTexText;

        /// <summary>
        /// Backing field for Image5A2956C841Dup3Image property
        /// </summary>
        private Image fImage5A2956C841Dup3Image;

        /// <summary>
        /// Backing field for DSSDSSHOSTListBListItem property
        /// </summary>
        private ListItem fDSSDSSHOSTListBListItem;

        /// <summary>
        /// Backing field for DSSHOSTTextBlocText property
        /// </summary>
        private Text fDSSHOSTTextBlocText;

        /// <summary>
        /// Backing field for Image5A2956C841Dup4Image property
        /// </summary>
        private Image fImage5A2956C841Dup4Image;

        /// <summary>
        /// Backing field for DSSEMAILListBoxListItem property
        /// </summary>
        private ListItem fDSSEMAILListBoxListItem;

        /// <summary>
        /// Backing field for EMAILTextBlockText property
        /// </summary>
        private Text fEMAILTextBlockText;

        /// <summary>
        /// Backing field for Image5A2956C841Dup5Image property
        /// </summary>
        private Image fImage5A2956C841Dup5Image;

        /// <summary>
        /// Backing field for DSSFILENAMEListListItem property
        /// </summary>
        private ListItem fDSSFILENAMEListListItem;

        /// <summary>
        /// Backing field for FILENAMETextBloText property
        /// </summary>
        private Text fFILENAMETextBloText;

        /// <summary>
        /// Backing field for Image5A2956C841Dup6Image property
        /// </summary>
        private Image fImage5A2956C841Dup6Image;

        /// <summary>
        /// Backing field for DSSFILEPATHListListItem property
        /// </summary>
        private ListItem fDSSFILEPATHListListItem;

        /// <summary>
        /// Backing field for FILEPATHTextBloText property
        /// </summary>
        private Text fFILEPATHTextBloText;

        /// <summary>
        /// Backing field for Image5A2956C841Dup7Image property
        /// </summary>
        private Image fImage5A2956C841Dup7Image;

        /// <summary>
        /// Backing field for DSSFORMNAMEListListItem property
        /// </summary>
        private ListItem fDSSFORMNAMEListListItem;

        /// <summary>
        /// Backing field for FORMNAMETextBloText property
        /// </summary>
        private Text fFORMNAMETextBloText;

        /// <summary>
        /// Backing field for Image5A2956C841Dup8Image property
        /// </summary>
        private Image fImage5A2956C841Dup8Image;

        /// <summary>
        /// Backing field for GroupBoxI0XGroup property
        /// </summary>
        private Group fGroupBoxI0XGroup;

        /// <summary>
        /// Backing field for Button58234b8b2Button property
        /// </summary>
        private Button fButton58234b8b2Button;

        /// <summary>
        /// Backing field for ImageDup0Image property
        /// </summary>
        private Image fImageDup0Image;

        /// <summary>
        /// Backing field for Button3b14973e7Button property
        /// </summary>
        private Button fButton3b14973e7Button;

        /// <summary>
        /// Backing field for ImageDup1Image property
        /// </summary>
        private Image fImageDup1Image;

        /// <summary>
        /// Backing field for GroupBoxI1XGroup property
        /// </summary>
        private Group fGroupBoxI1XGroup;

        /// <summary>
        /// Backing field for NewButtond6f529Button property
        /// </summary>
        private Button fNewButtond6f529Button;

        /// <summary>
        /// Backing field for NewTextBlockText property
        /// </summary>
        private Text fNewTextBlockText;

        /// <summary>
        /// Backing field for EditButtonb4df6Button property
        /// </summary>
        private Button fEditButtonb4df6Button;

        /// <summary>
        /// Backing field for EditTextBlockDup0Text property
        /// </summary>
        private Text fEditTextBlockDup0Text;

        /// <summary>
        /// Backing field for DeleteButton8ecButton property
        /// </summary>
        private Button fDeleteButton8ecButton;

        /// <summary>
        /// Backing field for DeleteTextBlockText property
        /// </summary>
        private Text fDeleteTextBlockText;

        /// <summary>
        /// Backing field for PromptListText property
        /// </summary>
        private Text fPromptListText;

        /// <summary>
        /// Backing field for PromptListTextBText property
        /// </summary>
        private Text fPromptListTextBText;

        /// <summary>
        /// Backing field for ListBoxd5d588ddList property
        /// </summary>
        private List fListBoxd5d588ddList;

        /// <summary>
        /// Backing field for Buttonfb8688204Button property
        /// </summary>
        private Button fButtonfb8688204Button;

        /// <summary>
        /// Backing field for ImageDup2Image property
        /// </summary>
        private Image fImageDup2Image;

        /// <summary>
        /// Backing field for Button98ceca8e6Button property
        /// </summary>
        private Button fButton98ceca8e6Button;

        /// <summary>
        /// Backing field for ImageDup3Image property
        /// </summary>
        private Image fImageDup3Image;

        /// <summary>
        /// Backing field for OKButton5fc8b2bButton property
        /// </summary>
        private Button fOKButton5fc8b2bButton;

        /// <summary>
        /// Backing field for OKTextBlockDup1Text property
        /// </summary>
        private Text fOKTextBlockDup1Text;

        /// <summary>
        /// Backing field for CancelButtonf87Button property
        /// </summary>
        private Button fCancelButtonf87Button;

        /// <summary>
        /// Backing field for CancelTextBlockDup1Text property
        /// </summary>
        private Text fCancelTextBlockDup1Text;

        /// <summary>
        /// Backing field for HelpButtonc1b1bButton property
        /// </summary>
        private Button fHelpButtonc1b1bButton;

        /// <summary>
        /// Backing field for HelpTextBlockDup1Text property
        /// </summary>
        private Text fHelpTextBlockDup1Text;

        /// <summary>
        /// Backing field for WorkflowFormWindow property
        /// </summary>
        private Window fWorkflowFormWinWindow;

        /// <summary>
        /// Backing field for WorkflowFormTitleBar property
        /// </summary>
        private TitleBar fWorkflowFormTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup2MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup2MenuBar;

        /// <summary>
        /// Backing field for SystemItem1I2XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I2XMenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizDup2Button property
        /// </summary>
        private Button fMinimizeMinimizDup2Button;

        /// <summary>
        /// Backing field for MaximizeMaximizDup2Button property
        /// </summary>
        private Button fMaximizeMaximizDup2Button;

        /// <summary>
        /// Backing field for CloseCloseDup2Button property
        /// </summary>
        private Button fCloseCloseDup2Button;

        /// <summary>
        /// Backing field for OKButton2fc035eButton property
        /// </summary>
        private Button fOKButton2fc035eButton;

        /// <summary>
        /// Backing field for OKTextBlockDup2Text property
        /// </summary>
        private Text fOKTextBlockDup2Text;

        /// <summary>
        /// Backing field for CancelButtone11Button property
        /// </summary>
        private Button fCancelButtone11Button;

        /// <summary>
        /// Backing field for CancelTextBlockDup2Text property
        /// </summary>
        private Text fCancelTextBlockDup2Text;

        /// <summary>
        /// Backing field for HelpButtonfa83fButton property
        /// </summary>
        private Button fHelpButtonfa83fButton;

        /// <summary>
        /// Backing field for HelpTextBlockDup2Text property
        /// </summary>
        private Text fHelpTextBlockDup2Text;

        /// <summary>
        /// Backing field for ScrollViewerPane property
        /// </summary>
        private Pane fScrollViewerPane;

        /// <summary>
        /// Backing field for FormNameQuickSeDup0Text property
        /// </summary>
        private Text fFormNameQuickSeDup0Text;

        /// <summary>
        /// Backing field for FormNameQuickSeDup1Text property
        /// </summary>
        private Text fFormNameQuickSeDup1Text;

        /// <summary>
        /// Backing field for FormNameEditTextBox property
        /// </summary>
        private Edit fTextBox340fa90dEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup6Pane property
        /// </summary>
        private Pane fScrollViewerPARDup6Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI6XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI6XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI6XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI6XScrollBar;

        /// <summary>
        /// Backing field for DestinationTypeDup0Text property
        /// </summary>
        private Text fDestinationTypeDup0Text;

        /// <summary>
        /// Backing field for DestinationTypeDup1Text property
        /// </summary>
        private Text fDestinationTypeDup1Text;

        /// <summary>
        /// Backing field for DestinationTypeComboBox property
        /// </summary>
        private ComboBox fComboBoxd65b8ebComboBox;

        /// <summary>
        /// Backing field for DestinationSettDup0Group property
        /// </summary>
        private Group fDestinationSettDup0Group;

        /// <summary>
        /// Backing field for DestinationSettI0XText property
        /// </summary>
        private Text fDestinationSettI0XText;

        /// <summary>
        /// Backing field for FolderPathText property
        /// </summary>
        private Text fFolderPathText;

        /// <summary>
        /// Backing field for FolderPathTextBText property
        /// </summary>
        private Text fFolderPathTextBText;

        /// <summary>
        /// Backing field for TextBoxC4C0507BEdit property
        /// </summary>
        private Edit fTextBoxC4C0507BEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup7Pane property
        /// </summary>
        private Pane fScrollViewerPARDup7Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI7XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI7XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI7XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI7XScrollBar;

        /// <summary>
        /// Backing field for BrowseButtonc08Button property
        /// </summary>
        private Button fBrowseButtonc08Button;

        /// <summary>
        /// Backing field for BrowseTextBlockText property
        /// </summary>
        private Text fBrowseTextBlockText;

        /// <summary>
        /// Backing field for DestinationSettDup1Group property
        /// </summary>
        private Group fDestinationSettDup1Group;

        /// <summary>
        /// Backing field for DestinationSettI1XText property
        /// </summary>
        private Text fDestinationSettI1XText;

        /// <summary>
        /// Backing field for FTPServerText property
        /// </summary>
        private Text fFTPServerText;

        /// <summary>
        /// Backing field for FTPServerTextBlText property
        /// </summary>
        private Text fFTPServerTextBlText;

        /// <summary>
        /// Backing field for TextBox2d151aefEdit property
        /// </summary>
        private Edit fTextBox2d151aefEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup8Pane property
        /// </summary>
        private Pane fScrollViewerPARDup8Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI8XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI8XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI8XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI8XScrollBar;

        /// <summary>
        /// Backing field for FTPPathText property
        /// </summary>
        private Text fFTPPathText;

        /// <summary>
        /// Backing field for FTPPathTextBlocText property
        /// </summary>
        private Text fFTPPathTextBlocText;

        /// <summary>
        /// Backing field for TextBox6bb6284fEdit property
        /// </summary>
        private Edit fTextBox6bb6284fEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup9Pane property
        /// </summary>
        private Pane fScrollViewerPARDup9Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI9XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI9XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI9XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI9XScrollBar;

        /// <summary>
        /// Backing field for DestinationSettDup2Group property
        /// </summary>
        private Group fDestinationSettDup2Group;

        /// <summary>
        /// Backing field for DestinationSettI2XText property
        /// </summary>
        private Text fDestinationSettI2XText;

        /// <summary>
        /// Backing field for SelectPrinterText property
        /// </summary>
        private Text fSelectPrinterText;

        /// <summary>
        /// Backing field for SelectPrinterTeText property
        /// </summary>
        private Text fSelectPrinterTeText;

        /// <summary>
        /// Backing field for ComboBox19b6064ComboBox property
        /// </summary>
        private ComboBox fComboBox19b6064ComboBox;

        /// <summary>
        /// Backing field for UseDefaultPrintRadioButton property
        /// </summary>
        private RadioButton fUseDefaultPrintRadioButton;

        /// <summary>
        /// Backing field for UseDefaultPrintText property
        /// </summary>
        private Text fUseDefaultPrintText;

        /// <summary>
        /// Backing field for UseCustomPrinteRadioButton property
        /// </summary>
        private RadioButton fUseCustomPrinteRadioButton;

        /// <summary>
        /// Backing field for UseCustomPrinteText property
        /// </summary>
        private Text fUseCustomPrinteText;

        /// <summary>
        /// Backing field for PreferencesButtButton property
        /// </summary>
        private Button fPreferencesButtButton;

        /// <summary>
        /// Backing field for PreferencesTextText property
        /// </summary>
        private Text fPreferencesTextText;

        /// <summary>
        /// Backing field for DestinationSettDup3Group property
        /// </summary>
        private Group fDestinationSettDup3Group;

        /// <summary>
        /// Backing field for DestinationSettI3XText property
        /// </summary>
        private Text fDestinationSettI3XText;

        /// <summary>
        /// Backing field for SharePointPathText property
        /// </summary>
        private Text fSharePointPathText;

        /// <summary>
        /// Backing field for SharePointPathTText property
        /// </summary>
        private Text fSharePointPathTText;

        /// <summary>
        /// Backing field for TextBox90D7BA83Edit property
        /// </summary>
        private Edit fTextBox90D7BA83Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup10Pane property
        /// </summary>
        private Pane fScrollViewerPARDup10Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI10XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI10XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI10XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI10XScrollBar;

        /// <summary>
        /// Backing field for OverwriteexistiCheckBox property
        /// </summary>
        private CheckBox fOverwriteexistiCheckBox;

        /// <summary>
        /// Backing field for OverwriteexistiText property
        /// </summary>
        private Text fOverwriteexistiText;

        /// <summary>
        /// Backing field for GenerateShortURButton property
        /// </summary>
        private Button fGenerateShortURButton;

        /// <summary>
        /// Backing field for GenerateShortURText property
        /// </summary>
        private Text fGenerateShortURText;

        /// <summary>
        /// Backing field for AuthenticationSGroup property
        /// </summary>
        private Group fAuthenticationSGroup;

        /// <summary>
        /// Backing field for AuthenticationSText property
        /// </summary>
        private Text fAuthenticationSText;

        /// <summary>
        /// Backing field for UsecredentialsoRadioButton property
        /// </summary>
        private RadioButton fUsecredentialsoRadioButton;

        /// <summary>
        /// Backing field for UsecredentialsoText property
        /// </summary>
        private Text fUsecredentialsoText;

        /// <summary>
        /// Backing field for AlwaysusethesecRadioButton property
        /// </summary>
        private RadioButton fAlwaysusethesecRadioButton;

        /// <summary>
        /// Backing field for AlwaysusethesecText property
        /// </summary>
        private Text fAlwaysusethesecText;

        /// <summary>
        /// Backing field for UsernameText property
        /// </summary>
        private Text fUsernameText;

        /// <summary>
        /// Backing field for UsernameTextBloText property
        /// </summary>
        private Text fUsernameTextBloText;

        /// <summary>
        /// Backing field for CredentialUserNameEditTextBox property
        /// </summary>
        private Edit fTextBox508FCAECEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup11Pane property
        /// </summary>
        private Pane fScrollViewerPARDup11Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI11XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI11XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI11XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI11XScrollBar;

        /// <summary>
        /// Backing field for PasswordText property
        /// </summary>
        private Text fPasswordText;

        /// <summary>
        /// Backing field for PasswordTextBloText property
        /// </summary>
        private Text fPasswordTextBloText;

        /// <summary>
        /// Backing field for CredentialPasswordEditTextBox property
        /// </summary>
        private Edit fPasswordBox1761Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup12Pane property
        /// </summary>
        private Pane fScrollViewerPARDup12Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI12XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI12XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI12XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI12XScrollBar;

        /// <summary>
        /// Backing field for WindowsDomainTeDup0Text property
        /// </summary>
        private Text fWindowsDomainTeDup0Text;

        /// <summary>
        /// Backing field for WindowsDomainTeDup1Text property
        /// </summary>
        private Text fWindowsDomainTeDup1Text;

        /// <summary>
        /// Backing field for CredentialDomainEditTextBox property
        /// </summary>
        private Edit fTextBoxB55EDC61Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup13Pane property
        /// </summary>
        private Pane fScrollViewerPARDup13Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI13XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI13XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI13XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI13XScrollBar;

        /// <summary>
        /// Backing field for VerifyAccessButButton property
        /// </summary>
        private Button fVerifyAccessButButton;

        /// <summary>
        /// Backing field for VerifyAccessTexText property
        /// </summary>
        private Text fVerifyAccessTexText;

        /// <summary>
        /// Backing field for GroupBoxa2a172cGroup property
        /// </summary>
        private Group fGroupBoxa2a172cGroup;

        /// <summary>
        /// Backing field for ImagePresetsText property
        /// </summary>
        private Text fImagePresetsText;

        /// <summary>
        /// Backing field for ImagePresetsTexText property
        /// </summary>
        private Text fImagePresetsTexText;

        /// <summary>
        /// Backing field for ImagePresetsComboBox property
        /// </summary>
        private ComboBox fComboBox4aaf0c4ComboBox;

        /// <summary>
        /// Backing field for ScanSettingsGroGroup property
        /// </summary>
        private Group fScanSettingsGroGroup;

        /// <summary>
        /// Backing field for ScanSettingsTexText property
        /// </summary>
        private Text fScanSettingsTexText;

        /// <summary>
        /// Backing field for OriginalSizeText property
        /// </summary>
        private Text fOriginalSizeText;

        /// <summary>
        /// Backing field for OriginalSizeTexDup0Text property
        /// </summary>
        private Text fOriginalSizeTexDup0Text;

        /// <summary>
        /// Backing field for OriginalSizeComboBox property
        /// </summary>
        private ComboBox fComboBox0CF9C1FComboBox;

        /// <summary>
        /// Backing field for OriginalSidesText property
        /// </summary>
        private Text fOriginalSidesText;

        /// <summary>
        /// Backing field for OriginalSidesTeText property
        /// </summary>
        private Text fOriginalSidesTeText;

        /// <summary>
        /// Backing field for OriginalSideComboBox property
        /// </summary>
        private ComboBox fComboBoxF6BD163ComboBox;

        /// <summary>
        /// Backing field for OptimizeForText property
        /// </summary>
        private Text fOptimizeForText;

        /// <summary>
        /// Backing field for OptimizeForTextText property
        /// </summary>
        private Text fOptimizeForTextText;

        /// <summary>
        /// Backing field for OptimizeComboBox property
        /// </summary>
        private ComboBox fComboBox9CB2C4EComboBox;

        /// <summary>
        /// Backing field for ContentOrientatDup0Text property
        /// </summary>
        private Text fContentOrientatDup0Text;

        /// <summary>
        /// Backing field for ContentOrientatDup1Text property
        /// </summary>
        private Text fContentOrientatDup1Text;

        /// <summary>
        /// Backing field for OrientationComboBox property
        /// </summary>
        private ComboBox fComboBoxACA3B88ComboBox;

        /// <summary>
        /// Backing field for BackgroundCleanDup0Text property
        /// </summary>
        private Text fBackgroundCleanDup0Text;

        /// <summary>
        /// Backing field for BackgroundCleanDup1Text property
        /// </summary>
        private Text fBackgroundCleanDup1Text;

        /// <summary>
        /// Backing field for BackgroundCleanupComboBox property
        /// </summary>
        private ComboBox fComboBox3251159ComboBox;

        /// <summary>
        /// Backing field for SharpnessText property
        /// </summary>
        private Text fSharpnessText;

        /// <summary>
        /// Backing field for SharpnessTextBlText property
        /// </summary>
        private Text fSharpnessTextBlText;

        /// <summary>
        /// Backing field for SharpnessComboBox property
        /// </summary>
        private ComboBox fComboBox1174440ComboBox;

        /// <summary>
        /// Backing field for DarknessText property
        /// </summary>
        private Text fDarknessText;

        /// <summary>
        /// Backing field for DarknessTextBloText property
        /// </summary>
        private Text fDarknessTextBloText;

        /// <summary>
        /// Backing field for DarknessComboBox property
        /// </summary>
        private ComboBox fComboBox9773BB7ComboBox;

        /// <summary>
        /// Backing field for ContrastText property
        /// </summary>
        private Text fContrastText;

        /// <summary>
        /// Backing field for ContrastTextBloText property
        /// </summary>
        private Text fContrastTextBloText;

        /// <summary>
        /// Backing field for ContrastComboBox property
        /// </summary>
        private ComboBox fComboBox833E87FComboBox;

        /// <summary>
        /// Backing field for JobBuildCheckBoCheckBox property
        /// </summary>
        private CheckBox fJobBuildCheckBoCheckBox;

        /// <summary>
        /// Backing field for JobBuildTextBloText property
        /// </summary>
        private Text fJobBuildTextBloText;

        /// <summary>
        /// Backing field for AppliesonlyforEGroup property
        /// </summary>
        private Group fAppliesonlyforEGroup;

        /// <summary>
        /// Backing field for AppliesonlyforEText property
        /// </summary>
        private Text fAppliesonlyforEText;

        /// <summary>
        /// Backing field for OriginalSizeTexDup1Text property
        /// </summary>
        private Text fOriginalSizeTexDup1Text;

        /// <summary>
        /// Backing field for OriginalSizeTexDup2Text property
        /// </summary>
        private Text fOriginalSizeTexDup2Text;

        /// <summary>
        /// Backing field for ComboBox1B4345AComboBox property
        /// </summary>
        private ComboBox fComboBox1B4345AComboBox;

        /// <summary>
        /// Backing field for BlankPageSuppreCheckBox property
        /// </summary>
        private CheckBox fBlankPageSuppreCheckBox;

        /// <summary>
        /// Backing field for BlankPageSuppreText property
        /// </summary>
        private Text fBlankPageSuppreText;

        /// <summary>
        /// Backing field for NotificationSetGroup property
        /// </summary>
        private Group fNotificationSetGroup;

        /// <summary>
        /// Backing field for NotificationSetText property
        /// </summary>
        private Text fNotificationSetText;

        /// <summary>
        /// Backing field for TextmEWNotifyCoText property
        /// </summary>
        private Text fTextmEWNotifyCoText;

        /// <summary>
        /// Backing field for ConditiononWhicText property
        /// </summary>
        private Text fConditiononWhicText;

        /// <summary>
        /// Backing field for TextmEWNotifyMeText property
        /// </summary>
        private Text fTextmEWNotifyMeText;

        /// <summary>
        /// Backing field for MethodUsedtoDelText property
        /// </summary>
        private Text fMethodUsedtoDelText;

        /// <summary>
        /// Backing field for TextmEWNotifyEmText property
        /// </summary>
        private Text fTextmEWNotifyEmText;

        /// <summary>
        /// Backing field for NotificationEmaText property
        /// </summary>
        private Text fNotificationEmaText;

        /// <summary>
        /// Backing field for ComboBoxmEWNotiDup0ComboBox property
        /// </summary>
        private ComboBox fComboBoxmEWNotiDup0ComboBox;

        /// <summary>
        /// Backing field for ComboBoxmEWNotiDup1ComboBox property
        /// </summary>
        private ComboBox fComboBoxmEWNotiDup1ComboBox;

        /// <summary>
        /// Backing field for TextBoxmEWNotifEdit property
        /// </summary>
        private Edit fTextBoxmEWNotifEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup14Pane property
        /// </summary>
        private Pane fScrollViewerPARDup14Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticI14XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticI14XScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoI14XScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoI14XScrollBar;

        /// <summary>
        /// Backing field for NoteTheemailaddText property
        /// </summary>
        private Text fNoteTheemailaddText;

        /// <summary>
        /// Backing field for AppliesonlytoFuDup0Text property
        /// </summary>
        private Text fAppliesonlytoFuDup0Text;

        /// <summary>
        /// Backing field for AppliesonlytoFuDup1Text property
        /// </summary>
        private Text fAppliesonlytoFuDup1Text;

        /// <summary>
        /// Backing field for FileSettingsGroGroup property
        /// </summary>
        private Group fFileSettingsGroGroup;

        /// <summary>
        /// Backing field for FileSettingsTexText property
        /// </summary>
        private Text fFileSettingsTexText;

        /// <summary>
        /// Backing field for DefaultColorPreDup0Text property
        /// </summary>
        private Text fDefaultColorPreDup0Text;

        /// <summary>
        /// Backing field for DefaultColorPreDup1Text property
        /// </summary>
        private Text fDefaultColorPreDup1Text;

        /// <summary>
        /// Backing field for ColorPreferenceComboBox property
        /// </summary>
        private ComboBox fComboBoxBADCFECComboBox;

        /// <summary>
        /// Backing field for DefaultOutputQuDup0Text property
        /// </summary>
        private Text fDefaultOutputQuDup0Text;

        /// <summary>
        /// Backing field for DefaultOutputQuDup1Text property
        /// </summary>
        private Text fDefaultOutputQuDup1Text;

        /// <summary>
        /// Backing field for OutputQualityComboBox property
        /// </summary>
        private ComboBox fComboBoxFECC82EComboBox;

        /// <summary>
        /// Backing field for DefaultFileTypeDup0Text property
        /// </summary>
        private Text fDefaultFileTypeDup0Text;

        /// <summary>
        /// Backing field for DefaultFileTypeDup1Text property
        /// </summary>
        private Text fDefaultFileTypeDup1Text;

        /// <summary>
        /// Backing field for FileTypeComboBox property
        /// </summary>
        private ComboBox fComboBoxFDC7218ComboBox;

        /// <summary>
        /// Backing field for DefaultResolutiDup0Text property
        /// </summary>
        private Text fDefaultResolutiDup0Text;

        /// <summary>
        /// Backing field for DefaultResolutiDup1Text property
        /// </summary>
        private Text fDefaultResolutiDup1Text;

        /// <summary>
        /// Backing field for ResolutionComboBox property
        /// </summary>
        private ComboBox fComboBox47D258FComboBox;

        /// <summary>
        /// Backing field for CompressionText property
        /// </summary>
        private Text fCompressionText;

        /// <summary>
        /// Backing field for CompressionTextText property
        /// </summary>
        private Text fCompressionTextText;

        /// <summary>
        /// Backing field for CompressionCombobox property
        /// </summary>
        private ComboBox fComboBox95387FBComboBox;

        /// <summary>
        /// Backing field for PDFEncryptionChCheckBox property
        /// </summary>
        private CheckBox fPDFEncryptionChCheckBox;

        /// <summary>
        /// Backing field for PDFEncryptionTeText property
        /// </summary>
        private Text fPDFEncryptionTeText;

        /// <summary>
        /// Backing field for OCRSettingsGrouGroup property
        /// </summary>
        private Group fOCRSettingsGrouGroup;

        /// <summary>
        /// Backing field for MetadataFileSetGroup property
        /// </summary>
        private Group fMetadataFileSetGroup;

        /// <summary>
        /// Backing field for MetadataFileSetText property
        /// </summary>
        private Text fMetadataFileSetText;

        /// <summary>
        /// Backing field for FileFormatText property
        /// </summary>
        private Text fFileFormatText;

        /// <summary>
        /// Backing field for FileFormatTextBText property
        /// </summary>
        private Text fFileFormatTextBText;

        /// <summary>
        /// Backing field for MetadataFileTypeCombobox property
        /// </summary>
        private ComboBox fComboBoxde3a789ComboBox;

        /// <summary>
        /// Backing field for PromptsGroupBoxGroup property
        /// </summary>
        private Group fPromptsGroupBoxGroup;

        /// <summary>
        /// Backing field for PromptsTextBlocText property
        /// </summary>
        private Text fPromptsTextBlocText;

        /// <summary>
        /// Backing field for ListBoxb5fe1936List property
        /// </summary>
        private List fListBoxb5fe1936List;

        /// <summary>
        /// Backing field for Buttonc73866563Button property
        /// </summary>
        private Button fButtonc73866563Button;

        /// <summary>
        /// Backing field for ImageDup4Image property
        /// </summary>
        private Image fImageDup4Image;

        /// <summary>
        /// Backing field for Buttonb49ded7f1Button property
        /// </summary>
        private Button fButtonb49ded7f1Button;

        /// <summary>
        /// Backing field for ImageDup5Image property
        /// </summary>
        private Image fImageDup5Image;

        /// <summary>
        /// Backing field for AddButtond376aeButton property
        /// </summary>
        private Button fAddButtond376aeButton;

        /// <summary>
        /// Backing field for AddTextBlockText property
        /// </summary>
        private Text fAddTextBlockText;

        /// <summary>
        /// Backing field for RemoveButton3b2Button property
        /// </summary>
        private Button fRemoveButton3b2Button;

        /// <summary>
        /// Backing field for RemoveTextBlockDup0Text property
        /// </summary>
        private Text fRemoveTextBlockDup0Text;

        /// <summary>
        /// Backing field for PropertiesButtoButton property
        /// </summary>
        private Button fPropertiesButtoButton;

        /// <summary>
        /// Backing field for PropertiesTextBText property
        /// </summary>
        private Text fPropertiesTextBText;

        /// <summary>
        /// Backing field for cApplicationSpeGroup property
        /// </summary>
        private Group fcApplicationSpeGroup;

        /// <summary>
        /// Backing field for ScrollBarVerticScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticScrollBar;

        /// <summary>
        /// Backing field for RepeatButtonPARDup0Button property
        /// </summary>
        private Button fRepeatButtonPARDup0Button;

        /// <summary>
        /// Backing field for RepeatButtonPagDup0Button property
        /// </summary>
        private Button fRepeatButtonPagDup0Button;

        /// <summary>
        /// Backing field for RepeatButtonPagDup1Button property
        /// </summary>
        private Button fRepeatButtonPagDup1Button;

        /// <summary>
        /// Backing field for ThumbThumb property
        /// </summary>
        private Thumb fThumbThumb;

        /// <summary>
        /// Backing field for RepeatButtonPARDup1Button property
        /// </summary>
        private Button fRepeatButtonPARDup1Button;

        /// <summary>
        /// Backing field for ScrollBarHorizoScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoScrollBar;

        /// <summary>
        /// Backing field for HPDigitalSendinTitleBar property
        /// </summary>
        private TitleBar fHPDigitalSendinTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup3MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup3MenuBar;

        /// <summary>
        /// Backing field for SystemItem1I3XMenuItem property
        /// </summary>
        private MenuItem fSystemItem1I3XMenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizDup3Button property
        /// </summary>
        private Button fMinimizeMinimizDup3Button;

        /// <summary>
        /// Backing field for MaximizeMaximizDup3Button property
        /// </summary>
        private Button fMaximizeMaximizDup3Button;

        /// <summary>
        /// Backing field for CloseCloseDup3Button property
        /// </summary>
        private Button fCloseCloseDup3Button;

        /// <summary>
        /// Backing field for HelpButtonCB8CFButton property
        /// </summary>
        private Button fHelpButtonCB8CFButton;

        /// <summary>
        /// Backing field for HelpTextBlockDup3Text property
        /// </summary>
        private Text fHelpTextBlockDup3Text;

        /// <summary>
        /// Backing field for ApplyButton61E2Button property
        /// </summary>
        private Button fApplyButton61E2Button;

        /// <summary>
        /// Backing field for ApplyTextBlockText property
        /// </summary>
        private Text fApplyTextBlockText;

        /// <summary>
        /// Backing field for CancelButton65CButton property
        /// </summary>
        private Button fCancelButton65CButton;

        /// <summary>
        /// Backing field for CancelTextBlockDup3Text property
        /// </summary>
        private Text fCancelTextBlockDup3Text;

        /// <summary>
        /// Backing field for OKButtonCC2EF49Button property
        /// </summary>
        private Button fOKButtonCC2EF49Button;

        /// <summary>
        /// Backing field for OKTextBlockDup3Text property
        /// </summary>
        private Text fOKTextBlockDup3Text;

        /// <summary>
        /// Backing field for TabControlec0fdTab property
        /// </summary>
        private Tab fTabControlec0fdTab;

        /// <summary>
        /// Backing field for WorkflowsTabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup5TabItem;

        /// <summary>
        /// Backing field for WorkflowsTextmWText property
        /// </summary>
        private Text fWorkflowsTextmWText;

        /// <summary>
        /// Backing field for WorkflowsTextBlDup0Text property
        /// </summary>
        private Text fWorkflowsTextBlDup0Text;

        /// <summary>
        /// Backing field for Text22D9C34E84CText property
        /// </summary>
        private Text fText22D9C34E84CText;

        /// <summary>
        /// Backing field for TextBlockDup1Text property
        /// </summary>
        private Text fTextBlockDup1Text;

        /// <summary>
        /// Backing field for TextC8D15BD39C8Text property
        /// </summary>
        private Text fTextC8D15BD39C8Text;

        /// <summary>
        /// Backing field for EnableWorkflowsCheckBox property
        /// </summary>
        private CheckBox fEnableWorkflowsCheckBox;

        /// <summary>
        /// Backing field for WorkflowsGroupBGroup property
        /// </summary>
        private Group fWorkflowsGroupBGroup;

        /// <summary>
        /// Backing field for WorkflowsTextBlDup1Text property
        /// </summary>
        private Text fWorkflowsTextBlDup1Text;

        /// <summary>
        /// Backing field for DisplayPromptTeCheckBox property
        /// </summary>
        private CheckBox fDisplayPromptTeCheckBox;

        /// <summary>
        /// Backing field for DisplayPromptTeText property
        /// </summary>
        private Text fDisplayPromptTeText;

        /// <summary>
        /// Backing field for AddGroupButton property
        /// </summary>
        private Button fButtona1be7942bButton;

        /// <summary>
        /// Backing field for ImageDup6Image property
        /// </summary>
        private Image fImageDup6Image;

        /// <summary>
        /// Backing field for AddGroupText property
        /// </summary>
        private Text fAddGroupText;

        /// <summary>
        /// Backing field for AddGroupTextBloText property
        /// </summary>
        private Text fAddGroupTextBloText;

        /// <summary>
        /// Backing field for AddMenuNameButton property
        /// </summary>
        private Button fButton1864d3cfeButton;

        /// <summary>
        /// Backing field for ImageDup7Image property
        /// </summary>
        private Image fImageDup7Image;

        /// <summary>
        /// Backing field for AddMenuText property
        /// </summary>
        private Text fAddMenuText;

        /// <summary>
        /// Backing field for AddMenuTextBlocText property
        /// </summary>
        private Text fAddMenuTextBlocText;

        /// <summary>
        /// Backing field for AddFormButton property
        /// </summary>
        private Button fButton13d3c30c3Button;

        /// <summary>
        /// Backing field for ImageDup8Image property
        /// </summary>
        private Image fImageDup8Image;

        /// <summary>
        /// Backing field for AddFormText property
        /// </summary>
        private Text fAddFormText;

        /// <summary>
        /// Backing field for AddFormTextBlocText property
        /// </summary>
        private Text fAddFormTextBlocText;

        /// <summary>
        /// Backing field for Buttond508dee64Button property
        /// </summary>
        private Button fButtond508dee64Button;

        /// <summary>
        /// Backing field for ImageDup9Image property
        /// </summary>
        private Image fImageDup9Image;

        /// <summary>
        /// Backing field for AddPromptsText property
        /// </summary>
        private Text fAddPromptsText;

        /// <summary>
        /// Backing field for AddPromptsTextBText property
        /// </summary>
        private Text fAddPromptsTextBText;

        /// <summary>
        /// Backing field for EditButton252ecButton property
        /// </summary>
        private Button fEditButton252ecButton;

        /// <summary>
        /// Backing field for EditTextBlockDup1Text property
        /// </summary>
        private Text fEditTextBlockDup1Text;

        /// <summary>
        /// Backing field for RemoveButton148Button property
        /// </summary>
        private Button fRemoveButton148Button;

        /// <summary>
        /// Backing field for RemoveTextBlockDup1Text property
        /// </summary>
        private Text fRemoveTextBlockDup1Text;

        /// <summary>
        /// Backing field for TreeViewd9ec713Tree property
        /// </summary>
        private Tree fTreeViewd9ec713Tree;

        /// <summary>
        /// Backing field for GroupTreeItem property
        /// </summary>
        private TreeItem fCOMMONMFPGROUPTTreeItem;

        /// <summary>
        /// Backing field for ButtonExpanderDup0Button property
        /// </summary>
        private Button fButtonExpanderDup0Button;

        /// <summary>
        /// Backing field for ImageDup10Image property
        /// </summary>
        private Image fImageDup10Image;

        /// <summary>
        /// Backing field for GroupTreeText property
        /// </summary>
        private Text fCOMMONMFPGROUPTText;

        /// <summary>
        /// Backing field for STFTreeViewItemTreeItem property
        /// </summary>
        private TreeItem fSTFTreeViewItemTreeItem;

        /// <summary>
        /// Backing field for ButtonExpanderDup1Button property
        /// </summary>
        private Button fButtonExpanderDup1Button;

        /// <summary>
        /// Backing field for ImageDup11Image property
        /// </summary>
        private Image fImageDup11Image;

        /// <summary>
        /// Backing field for STFTextBlockText property
        /// </summary>
        private Text fSTFTextBlockText;

        /// <summary>
        /// Backing field for MenuTreeViewItem property
        /// </summary>
        private TreeItem fSTFTESTTreeVieTreeItem;

        /// <summary>
        /// Backing field for ButtonExpanderDup2Button property
        /// </summary>
        private Button fButtonExpanderDup2Button;

        /// <summary>
        /// Backing field for ImageDup12Image property
        /// </summary>
        private Image fImageDup12Image;

        /// <summary>
        /// Backing field for MenuTextBlockText property
        /// </summary>
        private Text fSTFTESTTextBloText;
        /// <summary>
        /// Backing field for SharepointOCRTrTreeItem property
        /// </summary>
        private TreeItem fSharepointOCRTrTreeItem;

        /// <summary>
        /// Backing field for ButtonExpanderDup7Button property
        /// </summary>
        private Button fButtonExpanderDup7Button;

        /// <summary>
        /// Backing field for Image6C67385BE4Dup3Image property
        /// </summary>
        private Image fImage6C67385BE4Dup3Image;

        /// <summary>
        /// Backing field for SharepointOCRTeText property
        /// </summary>
        private Text fSharepointOCRTeText;

        /// <summary>
        /// Backing field for WorkflowMenuWinWindow property
        /// </summary>
        private Window fWorkflowMenuWinWindow;

        /// <summary>
        /// Backing field for MenuNameEdit property
        /// </summary>
        private Edit fTextBoxa69127a9Edit;

        /// <summary>
        /// Backing field for CancelButtoncd4Button property
        /// </summary>
        private Button fCancelButtoncd4Button;

        /// <summary>
        /// Backing field for MenuNameOKButton property
        /// </summary>
        private Button fOKButton8227078Button;

        /// <summary>
        /// Backing field for OKTextBlockDup0Text property
        /// </summary>
        private Text fOKTextBlockDup4Text;

        /// <summary>
        /// Backing field for CancelTextBlockDup0Text property
        /// </summary>
        private Text fCancelTextBlockDup4Text;

        /// <summary>
        /// Backing field for HelpButtonc8aaeButton property
        /// </summary>
        private Button fHelpButtonc8aaeButton;

        /// <summary>
        /// Backing field for HelpTextBlockDup0Text property
        /// </summary>
        private Text fHelpTextBlockDup4Text;

        /// <summary>
        /// Backing field for TheoperationwasPane property
        /// </summary>
        private Pane fTheoperationwasPane;

        /// <summary>
        /// Backing field for TextBox85726F33Edit property
        /// </summary>
        private Edit fTextBox85726F33Edit;

        /// <summary>
        /// The Ip Address
        /// </summary>
        private string _ipAddress;

        /// <summary>
        /// _groupName 
        /// </summary>
        private string _groupName = @"COMMON MFP GROUP";

        /// <summary>
        /// _menuName 
        /// </summary>
        private string _menuName = @"STF_TEST";

        /// <summary>
        /// _formName
        /// </summary>
        private string _formName = @"Sharepoint-OCR";

        /// <summary>
        /// GroupName Property
        /// </summary>
        public string GroupName
        {
            get { return _groupName; }
        }

        /// <summary>
        /// MenuName Property
        /// </summary>
        public string MenuName
        {
            get { return _menuName; }
        }

        /// <summary>
        /// FormName Property
        /// </summary>
        public string FormName
        {
            get { return _formName; }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_WorkflowMenu"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public DSSConfig_WorkflowMenu(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_WorkflowMenu"/> class using the default UIAFramework.
        /// </summary>
        public DSSConfig_WorkflowMenu()
        {
            Desktop = new Desktop();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSConfig_WorkflowMenu"/> class using the default UIAFramework.
        /// </summary>
        /// <param name="address">
        /// The IP address.
        /// </param>
        public DSSConfig_WorkflowMenu(string address)
        {
            _ipAddress = address;
            Desktop = new Desktop(UIAFramework.ManagedUIA);
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Checks for screen avalability
        /// </summary>
        /// <param name="timeout">
        /// The amount of time allowed for the screen avalability
        /// </param>
        public bool WaitForAvailable(int timeout)
        {
            try
            {
                HPDigitalSendinWindow.WaitForAvailable(timeout);
                WorkflowsTabItem.WaitForAvailable(timeout);
            }
            catch (Exception)
            {
                return false;
            }

            return true;
        }

        public void SetGroupMenuName(string groupName, string menuName, string formName)
        {
            _groupName = groupName;
            _menuName = menuName;
            _formName = formName;
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinWindow
        {
            get
            {
                if (null == fHPDigitalSendinWindow)
                {
                    fHPDigitalSendinWindow = new Window("HPDigitalSendinWindow", Desktop);
                    fHPDigitalSendinWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AB81453F-68AD-4243-ACA8-B4D9362C4ED4");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software Configuration (Server IP Address: {_ipAddress})");
                }

                return fHPDigitalSendinWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window WorkflowPromptWWindow
        {
            get
            {
                if (null == fWorkflowPromptWWindow)
                {
                    fWorkflowPromptWWindow = new Window("WorkflowPromptWWindow", HPDigitalSendinWindow);
                    fWorkflowPromptWWindow.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowPromptWWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fWorkflowPromptWWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"DDFB478B-AC3A-4a1d-B950-4ECDC19C627A");
                    fWorkflowPromptWWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflow Prompt");
                }

                return fWorkflowPromptWWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window WorkflowMenuWinWindow
        {
            get
            {
                if (null == fWorkflowMenuWinWindow)
                {
                    fWorkflowMenuWinWindow = new Window("WorkflowMenuWinWindow", HPDigitalSendinWindow);
                    fWorkflowMenuWinWindow.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowMenuWinWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fWorkflowMenuWinWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3DB66A34-3266-4b6f-B897-4B426BE14749");
                    fWorkflowMenuWinWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflow Menu");
                }

                return fWorkflowMenuWinWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar WorkflowPromptTitleBar
        {
            get
            {
                if (null == fWorkflowPromptTitleBar)
                {
                    fWorkflowPromptTitleBar = new TitleBar("WorkflowPromptTitleBar", WorkflowPromptWWindow);
                    fWorkflowPromptTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowPromptTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fWorkflowPromptTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflow Prompt");
                }

                return fWorkflowPromptTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyDup0MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup0MenuBar)
                {
                    fSystemMenuBarSyDup0MenuBar = new MenuBar("SystemMenuBarSyDup0MenuBar", WorkflowPromptTitleBar);
                    fSystemMenuBarSyDup0MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyDup0MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1I0XMenuItem
        {
            get
            {
                if (null == fSystemItem1I0XMenuItem)
                {
                    fSystemItem1I0XMenuItem = new MenuItem("SystemItem1I0XMenuItem", SystemMenuBarSyDup0MenuBar);
                    fSystemItem1I0XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I0XMenuItem.UIMap.Index = 0;
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1I0XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1I0XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MinimizeMinimizDup0Button
        {
            get
            {
                if (null == fMinimizeMinimizDup0Button)
                {
                    fMinimizeMinimizDup0Button = new Button("MinimizeMinimizDup0Button", WorkflowPromptTitleBar);
                    fMinimizeMinimizDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                    fMinimizeMinimizDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                }

                return fMinimizeMinimizDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MaximizeMaximizDup0Button
        {
            get
            {
                if (null == fMaximizeMaximizDup0Button)
                {
                    fMaximizeMaximizDup0Button = new Button("MaximizeMaximizDup0Button", WorkflowPromptTitleBar);
                    fMaximizeMaximizDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fMaximizeMaximizDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Maximize");
                    fMaximizeMaximizDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximize");
                }

                return fMaximizeMaximizDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseDup0Button
        {
            get
            {
                if (null == fCloseCloseDup0Button)
                {
                    fCloseCloseDup0Button = new Button("CloseCloseDup0Button", WorkflowPromptTitleBar);
                    fCloseCloseDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group PromptSettingsGGroup
        {
            get
            {
                if (null == fPromptSettingsGGroup)
                {
                    fPromptSettingsGGroup = new Group("PromptSettingsGGroup", WorkflowPromptWWindow);
                    fPromptSettingsGGroup.UIMap.Scope = UIASeachScope.Children;
                    fPromptSettingsGGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fPromptSettingsGGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Prompt Settings");
                }

                return fPromptSettingsGGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PromptSettingsTText
        {
            get
            {
                if (null == fPromptSettingsTText)
                {
                    fPromptSettingsTText = new Text("PromptSettingsTText", PromptSettingsGGroup);
                    fPromptSettingsTText.UIMap.Scope = UIASeachScope.Children;
                    fPromptSettingsTText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPromptSettingsTText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Prompt Settings");
                }

                return fPromptSettingsTText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PromptNameText
        {
            get
            {
                if (null == fPromptNameText)
                {
                    fPromptNameText = new Text("PromptNameText", PromptSettingsGGroup);
                    fPromptNameText.UIMap.Scope = UIASeachScope.Children;
                    fPromptNameText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fPromptNameText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Prompt Name");
                }

                return fPromptNameText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PromptNameTextBText
        {
            get
            {
                if (null == fPromptNameTextBText)
                {
                    fPromptNameTextBText = new Text("PromptNameTextBText", PromptNameText);
                    fPromptNameTextBText.UIMap.Scope = UIASeachScope.Children;
                    fPromptNameTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPromptNameTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Prompt Name");
                }

                return fPromptNameTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBox35b3cb6cEdit
        {
            get
            {
                if (null == fTextBox35b3cb6cEdit)
                {
                    fTextBox35b3cb6cEdit = new Edit("TextBox35b3cb6cEdit", PromptSettingsGGroup);
                    fTextBox35b3cb6cEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox35b3cb6cEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox35b3cb6cEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"35b3cb6c-7682-4831-b0b3-e77331e5ba55");
                }

                return fTextBox35b3cb6cEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup0Pane
        {
            get
            {
                if (null == fScrollViewerPARDup0Pane)
                {
                    fScrollViewerPARDup0Pane = new Pane("ScrollViewerPARDup0Pane", TextBox35b3cb6cEdit);
                    fScrollViewerPARDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI0XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI0XScrollBar)
                {
                    fScrollBarVerticI0XScrollBar = new ScrollBar("ScrollBarVerticI0XScrollBar", ScrollViewerPARDup0Pane);
                    fScrollBarVerticI0XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI0XScrollBar.UIMap.Index = 0;
                    fScrollBarVerticI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI0XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI0XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI0XScrollBar)
                {
                    fScrollBarHorizoI0XScrollBar = new ScrollBar("ScrollBarHorizoI0XScrollBar", ScrollViewerPARDup0Pane);
                    fScrollBarHorizoI0XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI0XScrollBar.UIMap.Index = 0;
                    fScrollBarHorizoI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI0XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI0XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox HiddenCheckBox6CheckBox
        {
            get
            {
                if (null == fHiddenCheckBox6CheckBox)
                {
                    fHiddenCheckBox6CheckBox = new CheckBox("HiddenCheckBox6CheckBox", PromptSettingsGGroup);
                    fHiddenCheckBox6CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fHiddenCheckBox6CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fHiddenCheckBox6CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6adc59f4-983c-49e6-9d1f-8b2f418acfb0");
                    fHiddenCheckBox6CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Hidden");
                }

                return fHiddenCheckBox6CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HiddenTextBlockText
        {
            get
            {
                if (null == fHiddenTextBlockText)
                {
                    fHiddenTextBlockText = new Text("HiddenTextBlockText", HiddenCheckBox6CheckBox);
                    fHiddenTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fHiddenTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHiddenTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Hidden");
                }

                return fHiddenTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PromptTextText4Text
        {
            get
            {
                if (null == fPromptTextText4Text)
                {
                    fPromptTextText4Text = new Text("PromptTextText4Text", PromptSettingsGGroup);
                    fPromptTextText4Text.UIMap.Scope = UIASeachScope.Children;
                    fPromptTextText4Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fPromptTextText4Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"483cc474-c968-4312-b9a0-46402bf87308");
                    fPromptTextText4Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Prompt Text");
                }

                return fPromptTextText4Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PromptTextTextBText
        {
            get
            {
                if (null == fPromptTextTextBText)
                {
                    fPromptTextTextBText = new Text("PromptTextTextBText", PromptTextText4Text);
                    fPromptTextTextBText.UIMap.Scope = UIASeachScope.Children;
                    fPromptTextTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPromptTextTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Prompt Text");
                }

                return fPromptTextTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxc93b2243Edit
        {
            get
            {
                if (null == fTextBoxc93b2243Edit)
                {
                    fTextBoxc93b2243Edit = new Edit("TextBoxc93b2243Edit", PromptSettingsGGroup);
                    fTextBoxc93b2243Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxc93b2243Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxc93b2243Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c93b2243-01ef-44e3-a248-5229a5c11e0e");
                }

                return fTextBoxc93b2243Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup1Pane
        {
            get
            {
                if (null == fScrollViewerPARDup1Pane)
                {
                    fScrollViewerPARDup1Pane = new Pane("ScrollViewerPARDup1Pane", TextBoxc93b2243Edit);
                    fScrollViewerPARDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI1XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI1XScrollBar)
                {
                    fScrollBarVerticI1XScrollBar = new ScrollBar("ScrollBarVerticI1XScrollBar", ScrollViewerPARDup1Pane);
                    fScrollBarVerticI1XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI1XScrollBar.UIMap.Index = 1;
                    fScrollBarVerticI1XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI1XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI1XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI1XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI1XScrollBar)
                {
                    fScrollBarHorizoI1XScrollBar = new ScrollBar("ScrollBarHorizoI1XScrollBar", ScrollViewerPARDup1Pane);
                    fScrollBarHorizoI1XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI1XScrollBar.UIMap.Index = 1;
                    fScrollBarHorizoI1XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI1XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI1XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HelpTextTextf1cText
        {
            get
            {
                if (null == fHelpTextTextf1cText)
                {
                    fHelpTextTextf1cText = new Text("HelpTextTextf1cText", PromptSettingsGGroup);
                    fHelpTextTextf1cText.UIMap.Scope = UIASeachScope.Children;
                    fHelpTextTextf1cText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fHelpTextTextf1cText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"f1c65a33-c084-4787-a882-1641ec1bf0a6");
                    fHelpTextTextf1cText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help Text");
                }

                return fHelpTextTextf1cText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HelpTextTextBloText
        {
            get
            {
                if (null == fHelpTextTextBloText)
                {
                    fHelpTextTextBloText = new Text("HelpTextTextBloText", HelpTextTextf1cText);
                    fHelpTextTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fHelpTextTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHelpTextTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help Text");
                }

                return fHelpTextTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBox5c150cf5Edit
        {
            get
            {
                if (null == fTextBox5c150cf5Edit)
                {
                    fTextBox5c150cf5Edit = new Edit("TextBox5c150cf5Edit", PromptSettingsGGroup);
                    fTextBox5c150cf5Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox5c150cf5Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox5c150cf5Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5c150cf5-edda-4399-81d2-dd093094fcfa");
                }

                return fTextBox5c150cf5Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup2Pane
        {
            get
            {
                if (null == fScrollViewerPARDup2Pane)
                {
                    fScrollViewerPARDup2Pane = new Pane("ScrollViewerPARDup2Pane", TextBox5c150cf5Edit);
                    fScrollViewerPARDup2Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup2Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup2Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup2Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI2XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI2XScrollBar)
                {
                    fScrollBarVerticI2XScrollBar = new ScrollBar("ScrollBarVerticI2XScrollBar", ScrollViewerPARDup2Pane);
                    fScrollBarVerticI2XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI2XScrollBar.UIMap.Index = 2;
                    fScrollBarVerticI2XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI2XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI2XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI2XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI2XScrollBar)
                {
                    fScrollBarHorizoI2XScrollBar = new ScrollBar("ScrollBarHorizoI2XScrollBar", ScrollViewerPARDup2Pane);
                    fScrollBarHorizoI2XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI2XScrollBar.UIMap.Index = 2;
                    fScrollBarHorizoI2XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI2XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI2XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group ResponseSettingGroup
        {
            get
            {
                if (null == fResponseSettingGroup)
                {
                    fResponseSettingGroup = new Group("ResponseSettingGroup", WorkflowPromptWWindow);
                    fResponseSettingGroup.UIMap.Scope = UIASeachScope.Children;
                    fResponseSettingGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fResponseSettingGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6d885248-7259-4279-aaa4-e06bdb506c1b");
                    fResponseSettingGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Response Settings");
                }

                return fResponseSettingGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ResponseSettingText
        {
            get
            {
                if (null == fResponseSettingText)
                {
                    fResponseSettingText = new Text("ResponseSettingText", ResponseSettingGroup);
                    fResponseSettingText.UIMap.Scope = UIASeachScope.Children;
                    fResponseSettingText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fResponseSettingText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Response Settings");
                }

                return fResponseSettingText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxfdad4dcComboBox
        {
            get
            {
                if (null == fComboBoxfdad4dcComboBox)
                {
                    fComboBoxfdad4dcComboBox = new ComboBox("ComboBoxfdad4dcComboBox", ResponseSettingGroup);
                    fComboBoxfdad4dcComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxfdad4dcComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxfdad4dcComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"fdad4dc7-11bf-49c1-804f-b68980486130");
                }

                return fComboBoxfdad4dcComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox UserMustSupplyaCheckBox
        {
            get
            {
                if (null == fUserMustSupplyaCheckBox)
                {
                    fUserMustSupplyaCheckBox = new CheckBox("UserMustSupplyaCheckBox", ResponseSettingGroup);
                    fUserMustSupplyaCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fUserMustSupplyaCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fUserMustSupplyaCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5d31de6a-6bdd-43e2-ac40-2841f29659ca");
                    fUserMustSupplyaCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"User Must Supply a Response");
                }

                return fUserMustSupplyaCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text UserMustSupplyaText
        {
            get
            {
                if (null == fUserMustSupplyaText)
                {
                    fUserMustSupplyaText = new Text("UserMustSupplyaText", UserMustSupplyaCheckBox);
                    fUserMustSupplyaText.UIMap.Scope = UIASeachScope.Children;
                    fUserMustSupplyaText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fUserMustSupplyaText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"User Must Supply a Response");
                }

                return fUserMustSupplyaText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox PasswordPrivacyCheckBox
        {
            get
            {
                if (null == fPasswordPrivacyCheckBox)
                {
                    fPasswordPrivacyCheckBox = new CheckBox("PasswordPrivacyCheckBox", ResponseSettingGroup);
                    fPasswordPrivacyCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fPasswordPrivacyCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fPasswordPrivacyCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7F13497F-3AA6-4840-9632-BCE22206A3C8");
                    fPasswordPrivacyCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Password/Privacy");
                }

                return fPasswordPrivacyCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PasswordPrivacyText
        {
            get
            {
                if (null == fPasswordPrivacyText)
                {
                    fPasswordPrivacyText = new Text("PasswordPrivacyText", PasswordPrivacyCheckBox);
                    fPasswordPrivacyText.UIMap.Scope = UIASeachScope.Children;
                    fPasswordPrivacyText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPasswordPrivacyText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Password/Privacy");
                }

                return fPasswordPrivacyText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DecimalPlacesText
        {
            get
            {
                if (null == fDecimalPlacesText)
                {
                    fDecimalPlacesText = new Text("DecimalPlacesText", ResponseSettingGroup);
                    fDecimalPlacesText.UIMap.Scope = UIASeachScope.Children;
                    fDecimalPlacesText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fDecimalPlacesText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Decimal Places");
                }

                return fDecimalPlacesText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBox2691a881Edit
        {
            get
            {
                if (null == fTextBox2691a881Edit)
                {
                    fTextBox2691a881Edit = new Edit("TextBox2691a881Edit", ResponseSettingGroup);
                    fTextBox2691a881Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox2691a881Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox2691a881Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2691a881-9c82-4d9f-aab3-460e57e6f321");
                }

                return fTextBox2691a881Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MinimumLengthTeDup0Text
        {
            get
            {
                if (null == fMinimumLengthTeDup0Text)
                {
                    fMinimumLengthTeDup0Text = new Text("MinimumLengthTeDup0Text", ResponseSettingGroup);
                    fMinimumLengthTeDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fMinimumLengthTeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fMinimumLengthTeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"879206ED-CE36-43cb-AE92-5AAB342E1D80");
                    fMinimumLengthTeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimum Length");
                }

                return fMinimumLengthTeDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MinimumLengthTeDup1Text
        {
            get
            {
                if (null == fMinimumLengthTeDup1Text)
                {
                    fMinimumLengthTeDup1Text = new Text("MinimumLengthTeDup1Text", MinimumLengthTeDup0Text);
                    fMinimumLengthTeDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fMinimumLengthTeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fMinimumLengthTeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimum Length");
                }

                return fMinimumLengthTeDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxca4d67a2Edit
        {
            get
            {
                if (null == fTextBoxca4d67a2Edit)
                {
                    fTextBoxca4d67a2Edit = new Edit("TextBoxca4d67a2Edit", ResponseSettingGroup);
                    fTextBoxca4d67a2Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxca4d67a2Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxca4d67a2Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ca4d67a2-1b30-4d94-b4e8-7b1b1d665c30");
                }

                return fTextBoxca4d67a2Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup3Pane
        {
            get
            {
                if (null == fScrollViewerPARDup3Pane)
                {
                    fScrollViewerPARDup3Pane = new Pane("ScrollViewerPARDup3Pane", TextBoxca4d67a2Edit);
                    fScrollViewerPARDup3Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup3Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup3Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup3Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI3XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI3XScrollBar)
                {
                    fScrollBarVerticI3XScrollBar = new ScrollBar("ScrollBarVerticI3XScrollBar", ScrollViewerPARDup3Pane);
                    fScrollBarVerticI3XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI3XScrollBar.UIMap.Index = 3;
                    fScrollBarVerticI3XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI3XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI3XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI3XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI3XScrollBar)
                {
                    fScrollBarHorizoI3XScrollBar = new ScrollBar("ScrollBarHorizoI3XScrollBar", ScrollViewerPARDup3Pane);
                    fScrollBarHorizoI3XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI3XScrollBar.UIMap.Index = 3;
                    fScrollBarHorizoI3XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI3XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI3XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MaximumLengthTeDup0Text
        {
            get
            {
                if (null == fMaximumLengthTeDup0Text)
                {
                    fMaximumLengthTeDup0Text = new Text("MaximumLengthTeDup0Text", ResponseSettingGroup);
                    fMaximumLengthTeDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fMaximumLengthTeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fMaximumLengthTeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"0435C404-01D0-4580-83B2-938212FD7EA0");
                    fMaximumLengthTeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximum Length");
                }

                return fMaximumLengthTeDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MaximumLengthTeDup1Text
        {
            get
            {
                if (null == fMaximumLengthTeDup1Text)
                {
                    fMaximumLengthTeDup1Text = new Text("MaximumLengthTeDup1Text", MaximumLengthTeDup0Text);
                    fMaximumLengthTeDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fMaximumLengthTeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fMaximumLengthTeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximum Length");
                }

                return fMaximumLengthTeDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxe5e9fdb8Edit
        {
            get
            {
                if (null == fTextBoxe5e9fdb8Edit)
                {
                    fTextBoxe5e9fdb8Edit = new Edit("TextBoxe5e9fdb8Edit", ResponseSettingGroup);
                    fTextBoxe5e9fdb8Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxe5e9fdb8Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxe5e9fdb8Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"e5e9fdb8-613f-412d-a1c7-c03e5fbdc569");
                }

                return fTextBoxe5e9fdb8Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup4Pane
        {
            get
            {
                if (null == fScrollViewerPARDup4Pane)
                {
                    fScrollViewerPARDup4Pane = new Pane("ScrollViewerPARDup4Pane", TextBoxe5e9fdb8Edit);
                    fScrollViewerPARDup4Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup4Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup4Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup4Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI4XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI4XScrollBar)
                {
                    fScrollBarVerticI4XScrollBar = new ScrollBar("ScrollBarVerticI4XScrollBar", ScrollViewerPARDup4Pane);
                    fScrollBarVerticI4XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI4XScrollBar.UIMap.Index = 4;
                    fScrollBarVerticI4XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI4XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI4XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI4XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI4XScrollBar)
                {
                    fScrollBarHorizoI4XScrollBar = new ScrollBar("ScrollBarHorizoI4XScrollBar", ScrollViewerPARDup4Pane);
                    fScrollBarHorizoI4XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI4XScrollBar.UIMap.Index = 4;
                    fScrollBarHorizoI4XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI4XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI4XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ListText77c9d9bText
        {
            get
            {
                if (null == fListText77c9d9bText)
                {
                    fListText77c9d9bText = new Text("ListText77c9d9bText", ResponseSettingGroup);
                    fListText77c9d9bText.UIMap.Scope = UIASeachScope.Children;
                    fListText77c9d9bText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fListText77c9d9bText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"77c9d9bc-1098-40f7-b8a3-eb530682a9f3");
                    fListText77c9d9bText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"List");
                }

                return fListText77c9d9bText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBox7e9b658fEdit
        {
            get
            {
                if (null == fTextBox7e9b658fEdit)
                {
                    fTextBox7e9b658fEdit = new Edit("TextBox7e9b658fEdit", ResponseSettingGroup);
                    fTextBox7e9b658fEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox7e9b658fEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox7e9b658fEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7e9b658f-aa1b-45bc-abbb-01a9bc0042ce");
                }

                return fTextBox7e9b658fEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DefaultResponseDup0Text
        {
            get
            {
                if (null == fDefaultResponseDup0Text)
                {
                    fDefaultResponseDup0Text = new Text("DefaultResponseDup0Text", ResponseSettingGroup);
                    fDefaultResponseDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fDefaultResponseDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fDefaultResponseDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mDefaultResponseLabel");
                    fDefaultResponseDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Default Response");
                }

                return fDefaultResponseDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DefaultResponseDup1Text
        {
            get
            {
                if (null == fDefaultResponseDup1Text)
                {
                    fDefaultResponseDup1Text = new Text("DefaultResponseDup1Text", DefaultResponseDup0Text);
                    fDefaultResponseDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fDefaultResponseDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDefaultResponseDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Default Response");
                }

                return fDefaultResponseDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxede04355Edit
        {
            get
            {
                if (null == fTextBoxede04355Edit)
                {
                    fTextBoxede04355Edit = new Edit("TextBoxede04355Edit", ResponseSettingGroup);
                    fTextBoxede04355Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxede04355Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxede04355Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ede04355-bc19-4a90-99a4-c3d35b6242f6");
                }

                return fTextBoxede04355Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup5Pane
        {
            get
            {
                if (null == fScrollViewerPARDup5Pane)
                {
                    fScrollViewerPARDup5Pane = new Pane("ScrollViewerPARDup5Pane", TextBoxede04355Edit);
                    fScrollViewerPARDup5Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup5Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup5Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup5Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI5XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI5XScrollBar)
                {
                    fScrollBarVerticI5XScrollBar = new ScrollBar("ScrollBarVerticI5XScrollBar", ScrollViewerPARDup5Pane);
                    fScrollBarVerticI5XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI5XScrollBar.UIMap.Index = 5;
                    fScrollBarVerticI5XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI5XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI5XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI5XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI5XScrollBar)
                {
                    fScrollBarHorizoI5XScrollBar = new ScrollBar("ScrollBarHorizoI5XScrollBar", ScrollViewerPARDup5Pane);
                    fScrollBarHorizoI5XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI5XScrollBar.UIMap.Index = 5;
                    fScrollBarHorizoI5XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI5XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI5XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxC481CD3ComboBox
        {
            get
            {
                if (null == fComboBoxC481CD3ComboBox)
                {
                    fComboBoxC481CD3ComboBox = new ComboBox("ComboBoxC481CD3ComboBox", ResponseSettingGroup);
                    fComboBoxC481CD3ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxC481CD3ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxC481CD3ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"C481CD35-8666-4c99-92E3-EE1DF2EA23D4");
                }

                return fComboBoxC481CD3ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit PasswordBox0c14Edit
        {
            get
            {
                if (null == fPasswordBox0c14Edit)
                {
                    fPasswordBox0c14Edit = new Edit("PasswordBox0c14Edit", ResponseSettingGroup);
                    fPasswordBox0c14Edit.UIMap.Scope = UIASeachScope.Children;
                    fPasswordBox0c14Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"PasswordBox");
                    fPasswordBox0c14Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"0c14b93e-7517-45f3-9ff2-d759a845d1ee");
                }

                return fPasswordBox0c14Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxmDefaulComboBox
        {
            get
            {
                if (null == fComboBoxmDefaulComboBox)
                {
                    fComboBoxmDefaulComboBox = new ComboBox("ComboBoxmDefaulComboBox", ResponseSettingGroup);
                    fComboBoxmDefaulComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxmDefaulComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxmDefaulComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mDefaultDateTimeComboBox");
                }

                return fComboBoxmDefaulComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane WindowsFormsHosPane
        {
            get
            {
                if (null == fWindowsFormsHosPane)
                {
                    fWindowsFormsHosPane = new Pane("WindowsFormsHosPane", ResponseSettingGroup);
                    fWindowsFormsHosPane.UIMap.Scope = UIASeachScope.Children;
                    fWindowsFormsHosPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"WindowsFormsHost");
                    fWindowsFormsHosPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"fea6a83b-73cb-4cad-9802-4fdd16ef0a7a");
                }

                return fWindowsFormsHosPane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DateFormatTextmText
        {
            get
            {
                if (null == fDateFormatTextmText)
                {
                    fDateFormatTextmText = new Text("DateFormatTextmText", ResponseSettingGroup);
                    fDateFormatTextmText.UIMap.Scope = UIASeachScope.Children;
                    fDateFormatTextmText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fDateFormatTextmText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mDateFormatLabel");
                    fDateFormatTextmText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Date Format");
                }

                return fDateFormatTextmText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxB779EBDComboBox
        {
            get
            {
                if (null == fComboBoxB779EBDComboBox)
                {
                    fComboBoxB779EBDComboBox = new ComboBox("ComboBoxB779EBDComboBox", ResponseSettingGroup);
                    fComboBoxB779EBDComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxB779EBDComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxB779EBDComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"B779EBDB-5189-4491-A9E6-7CB80F179ECF");
                }

                return fComboBoxB779EBDComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox A24HourCheckBoxCheckBox
        {
            get
            {
                if (null == fA24HourCheckBoxCheckBox)
                {
                    fA24HourCheckBoxCheckBox = new CheckBox("A24HourCheckBoxCheckBox", ResponseSettingGroup);
                    fA24HourCheckBoxCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fA24HourCheckBoxCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fA24HourCheckBoxCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"m24HourFormatCheckBox");
                    fA24HourCheckBoxCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"24 Hour");
                }

                return fA24HourCheckBoxCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button OKButton249af4fButton
        {
            get
            {
                if (null == fOKButton249af4fButton)
                {
                    fOKButton249af4fButton = new Button("OKButton249af4fButton", WorkflowPromptWWindow);
                    fOKButton249af4fButton.UIMap.Scope = UIASeachScope.Children;
                    fOKButton249af4fButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButton249af4fButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"249af4f6-a2fd-4970-87af-bed34a26accd");
                    fOKButton249af4fButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButton249af4fButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OKTextBlockDup0Text
        {
            get
            {
                if (null == fOKTextBlockDup0Text)
                {
                    fOKTextBlockDup0Text = new Text("OKTextBlockDup0Text", OKButton249af4fButton);
                    fOKTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fOKTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOKTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButtonc31Button
        {
            get
            {
                if (null == fCancelButtonc31Button)
                {
                    fCancelButtonc31Button = new Button("CancelButtonc31Button", WorkflowPromptWWindow);
                    fCancelButtonc31Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButtonc31Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButtonc31Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c31a9bb3-e33d-4bcd-8ca7-d254de192873");
                    fCancelButtonc31Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButtonc31Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CancelTextBlockDup0Text
        {
            get
            {
                if (null == fCancelTextBlockDup0Text)
                {
                    fCancelTextBlockDup0Text = new Text("CancelTextBlockDup0Text", CancelButtonc31Button);
                    fCancelTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fCancelTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCancelTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button HelpButtond12c6Button
        {
            get
            {
                if (null == fHelpButtond12c6Button)
                {
                    fHelpButtond12c6Button = new Button("HelpButtond12c6Button", WorkflowPromptWWindow);
                    fHelpButtond12c6Button.UIMap.Scope = UIASeachScope.Children;
                    fHelpButtond12c6Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fHelpButtond12c6Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d12c6f90-44c1-4c07-be2e-b02b80f118c3");
                    fHelpButtond12c6Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpButtond12c6Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HelpTextBlockDup0Text
        {
            get
            {
                if (null == fHelpTextBlockDup0Text)
                {
                    fHelpTextBlockDup0Text = new Text("HelpTextBlockDup0Text", HelpButtond12c6Button);
                    fHelpTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fHelpTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHelpTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window AddPromptsWindoWindow
        {
            get
            {
                if (null == fAddPromptsWindoWindow)
                {
                    fAddPromptsWindoWindow = new Window("AddPromptsWindoWindow", HPDigitalSendinWindow);
                    fAddPromptsWindoWindow.UIMap.Scope = UIASeachScope.Children;
                    fAddPromptsWindoWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fAddPromptsWindoWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6092E3F3-534E-4185-B621-FC3D67CC473F");
                    fAddPromptsWindoWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Prompts");
                }

                return fAddPromptsWindoWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar AddPromptsTitleBar
        {
            get
            {
                if (null == fAddPromptsTitleBar)
                {
                    fAddPromptsTitleBar = new TitleBar("AddPromptsTitleBar", AddPromptsWindoWindow);
                    fAddPromptsTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fAddPromptsTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fAddPromptsTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Prompts");
                }

                return fAddPromptsTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyDup1MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup1MenuBar)
                {
                    fSystemMenuBarSyDup1MenuBar = new MenuBar("SystemMenuBarSyDup1MenuBar", AddPromptsTitleBar);
                    fSystemMenuBarSyDup1MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup1MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyDup1MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyDup1MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1I1XMenuItem
        {
            get
            {
                if (null == fSystemItem1I1XMenuItem)
                {
                    fSystemItem1I1XMenuItem = new MenuItem("SystemItem1I1XMenuItem", SystemMenuBarSyDup1MenuBar);
                    fSystemItem1I1XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I1XMenuItem.UIMap.Index = 1;
                    fSystemItem1I1XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1I1XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1I1XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MinimizeMinimizDup1Button
        {
            get
            {
                if (null == fMinimizeMinimizDup1Button)
                {
                    fMinimizeMinimizDup1Button = new Button("MinimizeMinimizDup1Button", AddPromptsTitleBar);
                    fMinimizeMinimizDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                    fMinimizeMinimizDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                }

                return fMinimizeMinimizDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MaximizeMaximizDup1Button
        {
            get
            {
                if (null == fMaximizeMaximizDup1Button)
                {
                    fMaximizeMaximizDup1Button = new Button("MaximizeMaximizDup1Button", AddPromptsTitleBar);
                    fMaximizeMaximizDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fMaximizeMaximizDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Maximize");
                    fMaximizeMaximizDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximize");
                }

                return fMaximizeMaximizDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseDup1Button
        {
            get
            {
                if (null == fCloseCloseDup1Button)
                {
                    fCloseCloseDup1Button = new Button("CloseCloseDup1Button", AddPromptsTitleBar);
                    fCloseCloseDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group GroupBoxGroup
        {
            get
            {
                if (null == fGroupBoxGroup)
                {
                    fGroupBoxGroup = new Group("GroupBoxGroup", AddPromptsWindoWindow);
                    fGroupBoxGroup.UIMap.Scope = UIASeachScope.Children;
                    fGroupBoxGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                }

                return fGroupBoxGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AvailablePromptDup0Text
        {
            get
            {
                if (null == fAvailablePromptDup0Text)
                {
                    fAvailablePromptDup0Text = new Text("AvailablePromptDup0Text", GroupBoxGroup);
                    fAvailablePromptDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fAvailablePromptDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fAvailablePromptDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Available Prompts:");
                }

                return fAvailablePromptDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AvailablePromptDup1Text
        {
            get
            {
                if (null == fAvailablePromptDup1Text)
                {
                    fAvailablePromptDup1Text = new Text("AvailablePromptDup1Text", AvailablePromptDup0Text);
                    fAvailablePromptDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fAvailablePromptDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAvailablePromptDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Available Prompts:");
                }

                return fAvailablePromptDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public List ListBox62d278ccList
        {
            get
            {
                if (null == fListBox62d278ccList)
                {
                    fListBox62d278ccList = new List("ListBox62d278ccList", GroupBoxGroup);
                    fListBox62d278ccList.UIMap.Scope = UIASeachScope.Children;
                    fListBox62d278ccList.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBox");
                    fListBox62d278ccList.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"62d278cc-b8cd-492b-b125-998831a6b3b8");
                }

                return fListBox62d278ccList;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem DEPARTMENTListBListItem
        {
            get
            {
                if (null == fDEPARTMENTListBListItem)
                {
                    fDEPARTMENTListBListItem = new ListItem("DEPARTMENTListBListItem", ListBox62d278ccList);
                    fDEPARTMENTListBListItem.UIMap.Scope = UIASeachScope.Children;
                    fDEPARTMENTListBListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fDEPARTMENTListBListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DEPARTMENT");
                }

                return fDEPARTMENTListBListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DEPARTMENTTextBText
        {
            get
            {
                if (null == fDEPARTMENTTextBText)
                {
                    fDEPARTMENTTextBText = new Text("DEPARTMENTTextBText", DEPARTMENTListBListItem);
                    fDEPARTMENTTextBText.UIMap.Scope = UIASeachScope.Children;
                    fDEPARTMENTTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDEPARTMENTTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DEPARTMENT");
                }

                return fDEPARTMENTTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image Image5A2956C841Dup0Image
        {
            get
            {
                if (null == fImage5A2956C841Dup0Image)
                {
                    fImage5A2956C841Dup0Image = new Image("Image5A2956C841Dup0Image", DEPARTMENTListBListItem);
                    fImage5A2956C841Dup0Image.UIMap.Scope = UIASeachScope.Children;
                    fImage5A2956C841Dup0Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImage5A2956C841Dup0Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5A2956C8-4172-4ea0-8363-C2D0A97CB783");
                }

                return fImage5A2956C841Dup0Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem DSSDATEListBoxIListItem
        {
            get
            {
                if (null == fDSSDATEListBoxIListItem)
                {
                    fDSSDATEListBoxIListItem = new ListItem("DSSDATEListBoxIListItem", ListBox62d278ccList);
                    fDSSDATEListBoxIListItem.UIMap.Scope = UIASeachScope.Children;
                    fDSSDATEListBoxIListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fDSSDATEListBoxIListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"[DSS]DATE");
                }

                return fDSSDATEListBoxIListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DATETextBlockText
        {
            get
            {
                if (null == fDATETextBlockText)
                {
                    fDATETextBlockText = new Text("DATETextBlockText", DSSDATEListBoxIListItem);
                    fDATETextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fDATETextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDATETextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DATE");
                }

                return fDATETextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image Image5A2956C841Dup1Image
        {
            get
            {
                if (null == fImage5A2956C841Dup1Image)
                {
                    fImage5A2956C841Dup1Image = new Image("Image5A2956C841Dup1Image", DSSDATEListBoxIListItem);
                    fImage5A2956C841Dup1Image.UIMap.Scope = UIASeachScope.Children;
                    fImage5A2956C841Dup1Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImage5A2956C841Dup1Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5A2956C8-4172-4ea0-8363-C2D0A97CB783");
                }

                return fImage5A2956C841Dup1Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem DSSDocumentIdLiListItem
        {
            get
            {
                if (null == fDSSDocumentIdLiListItem)
                {
                    fDSSDocumentIdLiListItem = new ListItem("DSSDocumentIdLiListItem", ListBox62d278ccList);
                    fDSSDocumentIdLiListItem.UIMap.Scope = UIASeachScope.Children;
                    fDSSDocumentIdLiListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fDSSDocumentIdLiListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"[DSS]Document Id");
                }

                return fDSSDocumentIdLiListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DocumentIdTextBText
        {
            get
            {
                if (null == fDocumentIdTextBText)
                {
                    fDocumentIdTextBText = new Text("DocumentIdTextBText", DSSDocumentIdLiListItem);
                    fDocumentIdTextBText.UIMap.Scope = UIASeachScope.Children;
                    fDocumentIdTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDocumentIdTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Document Id");
                }

                return fDocumentIdTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image Image5A2956C841Dup2Image
        {
            get
            {
                if (null == fImage5A2956C841Dup2Image)
                {
                    fImage5A2956C841Dup2Image = new Image("Image5A2956C841Dup2Image", DSSDocumentIdLiListItem);
                    fImage5A2956C841Dup2Image.UIMap.Scope = UIASeachScope.Children;
                    fImage5A2956C841Dup2Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImage5A2956C841Dup2Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5A2956C8-4172-4ea0-8363-C2D0A97CB783");
                }

                return fImage5A2956C841Dup2Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem DSSDOMAINUSERIDListItem
        {
            get
            {
                if (null == fDSSDOMAINUSERIDListItem)
                {
                    fDSSDOMAINUSERIDListItem = new ListItem("DSSDOMAINUSERIDListItem", ListBox62d278ccList);
                    fDSSDOMAINUSERIDListItem.UIMap.Scope = UIASeachScope.Children;
                    fDSSDOMAINUSERIDListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fDSSDOMAINUSERIDListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"[DSS]DOMAINUSERID");
                }

                return fDSSDOMAINUSERIDListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DOMAINUSERIDTexText
        {
            get
            {
                if (null == fDOMAINUSERIDTexText)
                {
                    fDOMAINUSERIDTexText = new Text("DOMAINUSERIDTexText", DSSDOMAINUSERIDListItem);
                    fDOMAINUSERIDTexText.UIMap.Scope = UIASeachScope.Children;
                    fDOMAINUSERIDTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDOMAINUSERIDTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DOMAINUSERID");
                }

                return fDOMAINUSERIDTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image Image5A2956C841Dup3Image
        {
            get
            {
                if (null == fImage5A2956C841Dup3Image)
                {
                    fImage5A2956C841Dup3Image = new Image("Image5A2956C841Dup3Image", DSSDOMAINUSERIDListItem);
                    fImage5A2956C841Dup3Image.UIMap.Scope = UIASeachScope.Children;
                    fImage5A2956C841Dup3Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImage5A2956C841Dup3Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5A2956C8-4172-4ea0-8363-C2D0A97CB783");
                }

                return fImage5A2956C841Dup3Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem DSSDSSHOSTListBListItem
        {
            get
            {
                if (null == fDSSDSSHOSTListBListItem)
                {
                    fDSSDSSHOSTListBListItem = new ListItem("DSSDSSHOSTListBListItem", ListBox62d278ccList);
                    fDSSDSSHOSTListBListItem.UIMap.Scope = UIASeachScope.Children;
                    fDSSDSSHOSTListBListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fDSSDSSHOSTListBListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"[DSS]DSS HOST");
                }

                return fDSSDSSHOSTListBListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DSSHOSTTextBlocText
        {
            get
            {
                if (null == fDSSHOSTTextBlocText)
                {
                    fDSSHOSTTextBlocText = new Text("DSSHOSTTextBlocText", DSSDSSHOSTListBListItem);
                    fDSSHOSTTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fDSSHOSTTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDSSHOSTTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DSS HOST");
                }

                return fDSSHOSTTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image Image5A2956C841Dup4Image
        {
            get
            {
                if (null == fImage5A2956C841Dup4Image)
                {
                    fImage5A2956C841Dup4Image = new Image("Image5A2956C841Dup4Image", DSSDSSHOSTListBListItem);
                    fImage5A2956C841Dup4Image.UIMap.Scope = UIASeachScope.Children;
                    fImage5A2956C841Dup4Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImage5A2956C841Dup4Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5A2956C8-4172-4ea0-8363-C2D0A97CB783");
                }

                return fImage5A2956C841Dup4Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem DSSEMAILListBoxListItem
        {
            get
            {
                if (null == fDSSEMAILListBoxListItem)
                {
                    fDSSEMAILListBoxListItem = new ListItem("DSSEMAILListBoxListItem", ListBox62d278ccList);
                    fDSSEMAILListBoxListItem.UIMap.Scope = UIASeachScope.Children;
                    fDSSEMAILListBoxListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fDSSEMAILListBoxListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"[DSS]EMAIL");
                }

                return fDSSEMAILListBoxListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EMAILTextBlockText
        {
            get
            {
                if (null == fEMAILTextBlockText)
                {
                    fEMAILTextBlockText = new Text("EMAILTextBlockText", DSSEMAILListBoxListItem);
                    fEMAILTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fEMAILTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEMAILTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"EMAIL");
                }

                return fEMAILTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image Image5A2956C841Dup5Image
        {
            get
            {
                if (null == fImage5A2956C841Dup5Image)
                {
                    fImage5A2956C841Dup5Image = new Image("Image5A2956C841Dup5Image", DSSEMAILListBoxListItem);
                    fImage5A2956C841Dup5Image.UIMap.Scope = UIASeachScope.Children;
                    fImage5A2956C841Dup5Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImage5A2956C841Dup5Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5A2956C8-4172-4ea0-8363-C2D0A97CB783");
                }

                return fImage5A2956C841Dup5Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem DSSFILENAMEListListItem
        {
            get
            {
                if (null == fDSSFILENAMEListListItem)
                {
                    fDSSFILENAMEListListItem = new ListItem("DSSFILENAMEListListItem", ListBox62d278ccList);
                    fDSSFILENAMEListListItem.UIMap.Scope = UIASeachScope.Children;
                    fDSSFILENAMEListListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fDSSFILENAMEListListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"[DSS]FILE NAME");
                }

                return fDSSFILENAMEListListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FILENAMETextBloText
        {
            get
            {
                if (null == fFILENAMETextBloText)
                {
                    fFILENAMETextBloText = new Text("FILENAMETextBloText", DSSFILENAMEListListItem);
                    fFILENAMETextBloText.UIMap.Scope = UIASeachScope.Children;
                    fFILENAMETextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFILENAMETextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"FILE NAME");
                }

                return fFILENAMETextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image Image5A2956C841Dup6Image
        {
            get
            {
                if (null == fImage5A2956C841Dup6Image)
                {
                    fImage5A2956C841Dup6Image = new Image("Image5A2956C841Dup6Image", DSSFILENAMEListListItem);
                    fImage5A2956C841Dup6Image.UIMap.Scope = UIASeachScope.Children;
                    fImage5A2956C841Dup6Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImage5A2956C841Dup6Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5A2956C8-4172-4ea0-8363-C2D0A97CB783");
                }

                return fImage5A2956C841Dup6Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem DSSFILEPATHListListItem
        {
            get
            {
                if (null == fDSSFILEPATHListListItem)
                {
                    fDSSFILEPATHListListItem = new ListItem("DSSFILEPATHListListItem", ListBox62d278ccList);
                    fDSSFILEPATHListListItem.UIMap.Scope = UIASeachScope.Children;
                    fDSSFILEPATHListListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fDSSFILEPATHListListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"[DSS]FILE PATH");
                }

                return fDSSFILEPATHListListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FILEPATHTextBloText
        {
            get
            {
                if (null == fFILEPATHTextBloText)
                {
                    fFILEPATHTextBloText = new Text("FILEPATHTextBloText", DSSFILEPATHListListItem);
                    fFILEPATHTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fFILEPATHTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFILEPATHTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"FILE PATH");
                }

                return fFILEPATHTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image Image5A2956C841Dup7Image
        {
            get
            {
                if (null == fImage5A2956C841Dup7Image)
                {
                    fImage5A2956C841Dup7Image = new Image("Image5A2956C841Dup7Image", DSSFILEPATHListListItem);
                    fImage5A2956C841Dup7Image.UIMap.Scope = UIASeachScope.Children;
                    fImage5A2956C841Dup7Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImage5A2956C841Dup7Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5A2956C8-4172-4ea0-8363-C2D0A97CB783");
                }

                return fImage5A2956C841Dup7Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem DSSFORMNAMEListListItem
        {
            get
            {
                if (null == fDSSFORMNAMEListListItem)
                {
                    fDSSFORMNAMEListListItem = new ListItem("DSSFORMNAMEListListItem", ListBox62d278ccList);
                    fDSSFORMNAMEListListItem.UIMap.Scope = UIASeachScope.Children;
                    fDSSFORMNAMEListListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fDSSFORMNAMEListListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"[DSS]FORMNAME");
                }

                return fDSSFORMNAMEListListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FORMNAMETextBloText
        {
            get
            {
                if (null == fFORMNAMETextBloText)
                {
                    fFORMNAMETextBloText = new Text("FORMNAMETextBloText", DSSFORMNAMEListListItem);
                    fFORMNAMETextBloText.UIMap.Scope = UIASeachScope.Children;
                    fFORMNAMETextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFORMNAMETextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"FORMNAME");
                }

                return fFORMNAMETextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image Image5A2956C841Dup8Image
        {
            get
            {
                if (null == fImage5A2956C841Dup8Image)
                {
                    fImage5A2956C841Dup8Image = new Image("Image5A2956C841Dup8Image", DSSFORMNAMEListListItem);
                    fImage5A2956C841Dup8Image.UIMap.Scope = UIASeachScope.Children;
                    fImage5A2956C841Dup8Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImage5A2956C841Dup8Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5A2956C8-4172-4ea0-8363-C2D0A97CB783");
                }

                return fImage5A2956C841Dup8Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group GroupBoxI0XGroup
        {
            get
            {
                if (null == fGroupBoxI0XGroup)
                {
                    fGroupBoxI0XGroup = new Group("GroupBoxI0XGroup", GroupBoxGroup);
                    fGroupBoxI0XGroup.UIMap.Scope = UIASeachScope.Children;
                    fGroupBoxI0XGroup.UIMap.Index = 0;
                    fGroupBoxI0XGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                }

                return fGroupBoxI0XGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button Button58234b8b2Button
        {
            get
            {
                if (null == fButton58234b8b2Button)
                {
                    fButton58234b8b2Button = new Button("Button58234b8b2Button", GroupBoxI0XGroup);
                    fButton58234b8b2Button.UIMap.Scope = UIASeachScope.Children;
                    fButton58234b8b2Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButton58234b8b2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"58234b8b-2846-4c1c-9296-4b344380119c");
                }

                return fButton58234b8b2Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup0Image
        {
            get
            {
                if (null == fImageDup0Image)
                {
                    fImageDup0Image = new Image("ImageDup0Image", Button58234b8b2Button);
                    fImageDup0Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup0Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup0Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button Button3b14973e7Button
        {
            get
            {
                if (null == fButton3b14973e7Button)
                {
                    fButton3b14973e7Button = new Button("Button3b14973e7Button", GroupBoxI0XGroup);
                    fButton3b14973e7Button.UIMap.Scope = UIASeachScope.Children;
                    fButton3b14973e7Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButton3b14973e7Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3b14973e-7bbe-405b-843b-e0cd7fc94ab7");
                }

                return fButton3b14973e7Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup1Image
        {
            get
            {
                if (null == fImageDup1Image)
                {
                    fImageDup1Image = new Image("ImageDup1Image", Button3b14973e7Button);
                    fImageDup1Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup1Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup1Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group GroupBoxI1XGroup
        {
            get
            {
                if (null == fGroupBoxI1XGroup)
                {
                    fGroupBoxI1XGroup = new Group("GroupBoxI1XGroup", GroupBoxGroup);
                    fGroupBoxI1XGroup.UIMap.Scope = UIASeachScope.Children;
                    fGroupBoxI1XGroup.UIMap.Index = 1;
                    fGroupBoxI1XGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                }

                return fGroupBoxI1XGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button NewButtond6f529Button
        {
            get
            {
                if (null == fNewButtond6f529Button)
                {
                    fNewButtond6f529Button = new Button("NewButtond6f529Button", GroupBoxI1XGroup);
                    fNewButtond6f529Button.UIMap.Scope = UIASeachScope.Children;
                    fNewButtond6f529Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fNewButtond6f529Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d6f529c4-0352-47d9-818f-9c2543f0efee");
                    fNewButtond6f529Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"New...");
                }

                return fNewButtond6f529Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NewTextBlockText
        {
            get
            {
                if (null == fNewTextBlockText)
                {
                    fNewTextBlockText = new Text("NewTextBlockText", NewButtond6f529Button);
                    fNewTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fNewTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fNewTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"New...");
                }

                return fNewTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button EditButtonb4df6Button
        {
            get
            {
                if (null == fEditButtonb4df6Button)
                {
                    fEditButtonb4df6Button = new Button("EditButtonb4df6Button", GroupBoxI1XGroup);
                    fEditButtonb4df6Button.UIMap.Scope = UIASeachScope.Children;
                    fEditButtonb4df6Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fEditButtonb4df6Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"b4df6af7-b656-4338-9650-0075f8b8a32d");
                    fEditButtonb4df6Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Edit...");
                }

                return fEditButtonb4df6Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EditTextBlockDup0Text
        {
            get
            {
                if (null == fEditTextBlockDup0Text)
                {
                    fEditTextBlockDup0Text = new Text("EditTextBlockDup0Text", EditButtonb4df6Button);
                    fEditTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fEditTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEditTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Edit...");
                }

                return fEditTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button DeleteButton8ecButton
        {
            get
            {
                if (null == fDeleteButton8ecButton)
                {
                    fDeleteButton8ecButton = new Button("DeleteButton8ecButton", GroupBoxI1XGroup);
                    fDeleteButton8ecButton.UIMap.Scope = UIASeachScope.Children;
                    fDeleteButton8ecButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fDeleteButton8ecButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8ec1ae53-ac78-4dad-83c4-092281e35922");
                    fDeleteButton8ecButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Delete");
                }

                return fDeleteButton8ecButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DeleteTextBlockText
        {
            get
            {
                if (null == fDeleteTextBlockText)
                {
                    fDeleteTextBlockText = new Text("DeleteTextBlockText", DeleteButton8ecButton);
                    fDeleteTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fDeleteTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDeleteTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Delete");
                }

                return fDeleteTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PromptListText
        {
            get
            {
                if (null == fPromptListText)
                {
                    fPromptListText = new Text("PromptListText", GroupBoxGroup);
                    fPromptListText.UIMap.Scope = UIASeachScope.Children;
                    fPromptListText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fPromptListText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Prompt List:");
                }

                return fPromptListText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PromptListTextBText
        {
            get
            {
                if (null == fPromptListTextBText)
                {
                    fPromptListTextBText = new Text("PromptListTextBText", PromptListText);
                    fPromptListTextBText.UIMap.Scope = UIASeachScope.Children;
                    fPromptListTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPromptListTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Prompt List:");
                }

                return fPromptListTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public List ListBoxd5d588ddList
        {
            get
            {
                if (null == fListBoxd5d588ddList)
                {
                    fListBoxd5d588ddList = new List("ListBoxd5d588ddList", GroupBoxGroup);
                    fListBoxd5d588ddList.UIMap.Scope = UIASeachScope.Children;
                    fListBoxd5d588ddList.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBox");
                    fListBoxd5d588ddList.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d5d588dd-f1ff-4748-af69-668b75ae457d");
                }

                return fListBoxd5d588ddList;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button Buttonfb8688204Button
        {
            get
            {
                if (null == fButtonfb8688204Button)
                {
                    fButtonfb8688204Button = new Button("Buttonfb8688204Button", GroupBoxGroup);
                    fButtonfb8688204Button.UIMap.Scope = UIASeachScope.Children;
                    fButtonfb8688204Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButtonfb8688204Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"fb868820-43be-4517-8dee-df3a75a224f3");
                }

                return fButtonfb8688204Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup2Image
        {
            get
            {
                if (null == fImageDup2Image)
                {
                    fImageDup2Image = new Image("ImageDup2Image", Buttonfb8688204Button);
                    fImageDup2Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup2Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup2Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button Button98ceca8e6Button
        {
            get
            {
                if (null == fButton98ceca8e6Button)
                {
                    fButton98ceca8e6Button = new Button("Button98ceca8e6Button", GroupBoxGroup);
                    fButton98ceca8e6Button.UIMap.Scope = UIASeachScope.Children;
                    fButton98ceca8e6Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButton98ceca8e6Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"98ceca8e-6c71-4088-8c56-ecc3e641eca5");
                }

                return fButton98ceca8e6Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup3Image
        {
            get
            {
                if (null == fImageDup3Image)
                {
                    fImageDup3Image = new Image("ImageDup3Image", Button98ceca8e6Button);
                    fImageDup3Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup3Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup3Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button OKButton5fc8b2bButton
        {
            get
            {
                if (null == fOKButton5fc8b2bButton)
                {
                    fOKButton5fc8b2bButton = new Button("OKButton5fc8b2bButton", AddPromptsWindoWindow);
                    fOKButton5fc8b2bButton.UIMap.Scope = UIASeachScope.Children;
                    fOKButton5fc8b2bButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButton5fc8b2bButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5fc8b2b6-2ad0-4053-a420-c3f67522afa4");
                    fOKButton5fc8b2bButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButton5fc8b2bButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OKTextBlockDup1Text
        {
            get
            {
                if (null == fOKTextBlockDup1Text)
                {
                    fOKTextBlockDup1Text = new Text("OKTextBlockDup1Text", OKButton5fc8b2bButton);
                    fOKTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fOKTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOKTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButtonf87Button
        {
            get
            {
                if (null == fCancelButtonf87Button)
                {
                    fCancelButtonf87Button = new Button("CancelButtonf87Button", AddPromptsWindoWindow);
                    fCancelButtonf87Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButtonf87Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButtonf87Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"f87beaa7-eaf0-4f85-a771-dc625f83d2a3");
                    fCancelButtonf87Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButtonf87Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CancelTextBlockDup1Text
        {
            get
            {
                if (null == fCancelTextBlockDup1Text)
                {
                    fCancelTextBlockDup1Text = new Text("CancelTextBlockDup1Text", CancelButtonf87Button);
                    fCancelTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fCancelTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCancelTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button HelpButtonc1b1bButton
        {
            get
            {
                if (null == fHelpButtonc1b1bButton)
                {
                    fHelpButtonc1b1bButton = new Button("HelpButtonc1b1bButton", AddPromptsWindoWindow);
                    fHelpButtonc1b1bButton.UIMap.Scope = UIASeachScope.Children;
                    fHelpButtonc1b1bButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fHelpButtonc1b1bButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c1b1b996-8eed-47a5-b3ba-3868b10789f2");
                    fHelpButtonc1b1bButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpButtonc1b1bButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HelpTextBlockDup1Text
        {
            get
            {
                if (null == fHelpTextBlockDup1Text)
                {
                    fHelpTextBlockDup1Text = new Text("HelpTextBlockDup1Text", HelpButtonc1b1bButton);
                    fHelpTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fHelpTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHelpTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window WorkflowFormWindow
        {
            get
            {
                if (null == fWorkflowFormWinWindow)
                {
                    fWorkflowFormWinWindow = new Window("WorkflowFormWindow", HPDigitalSendinWindow);
                    fWorkflowFormWinWindow.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowFormWinWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fWorkflowFormWinWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"95C39EA4-FEBF-4b92-95B0-3BFC6A8113CA");
                    fWorkflowFormWinWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflow Form");
                }

                return fWorkflowFormWinWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar WorkflowFormTitleBar
        {
            get
            {
                if (null == fWorkflowFormTitleBar)
                {
                    fWorkflowFormTitleBar = new TitleBar("WorkflowFormTitleBar", WorkflowFormWindow);
                    fWorkflowFormTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowFormTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fWorkflowFormTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflow Form");
                }

                return fWorkflowFormTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyDup2MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup2MenuBar)
                {
                    fSystemMenuBarSyDup2MenuBar = new MenuBar("SystemMenuBarSyDup2MenuBar", WorkflowFormTitleBar);
                    fSystemMenuBarSyDup2MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup2MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyDup2MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyDup2MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1I2XMenuItem
        {
            get
            {
                if (null == fSystemItem1I2XMenuItem)
                {
                    fSystemItem1I2XMenuItem = new MenuItem("SystemItem1I2XMenuItem", SystemMenuBarSyDup2MenuBar);
                    fSystemItem1I2XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I2XMenuItem.UIMap.Index = 2;
                    fSystemItem1I2XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1I2XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1I2XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MinimizeMinimizDup2Button
        {
            get
            {
                if (null == fMinimizeMinimizDup2Button)
                {
                    fMinimizeMinimizDup2Button = new Button("MinimizeMinimizDup2Button", WorkflowFormTitleBar);
                    fMinimizeMinimizDup2Button.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                    fMinimizeMinimizDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                }

                return fMinimizeMinimizDup2Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MaximizeMaximizDup2Button
        {
            get
            {
                if (null == fMaximizeMaximizDup2Button)
                {
                    fMaximizeMaximizDup2Button = new Button("MaximizeMaximizDup2Button", WorkflowFormTitleBar);
                    fMaximizeMaximizDup2Button.UIMap.Scope = UIASeachScope.Children;
                    fMaximizeMaximizDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Maximize");
                    fMaximizeMaximizDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximize");
                }

                return fMaximizeMaximizDup2Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseDup2Button
        {
            get
            {
                if (null == fCloseCloseDup2Button)
                {
                    fCloseCloseDup2Button = new Button("CloseCloseDup2Button", WorkflowFormTitleBar);
                    fCloseCloseDup2Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseDup2Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button WorkflowFormOkButton
        {
            get
            {
                if (null == fOKButton2fc035eButton)
                {
                    fOKButton2fc035eButton = new Button("OKButton2fc035eButton", WorkflowFormWindow);
                    fOKButton2fc035eButton.UIMap.Scope = UIASeachScope.Children;
                    fOKButton2fc035eButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButton2fc035eButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2fc035e7-38ec-4b91-93d1-24849b1ad821");
                    fOKButton2fc035eButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButton2fc035eButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OKTextBlockDup2Text
        {
            get
            {
                if (null == fOKTextBlockDup2Text)
                {
                    fOKTextBlockDup2Text = new Text("OKTextBlockDup2Text", WorkflowFormOkButton);
                    fOKTextBlockDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fOKTextBlockDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOKTextBlockDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKTextBlockDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButtone11Button
        {
            get
            {
                if (null == fCancelButtone11Button)
                {
                    fCancelButtone11Button = new Button("CancelButtone11Button", WorkflowFormWindow);
                    fCancelButtone11Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButtone11Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButtone11Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"e11cf745-6b5a-49fd-bb4a-e10e2c1bf1cc");
                    fCancelButtone11Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButtone11Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CancelTextBlockDup2Text
        {
            get
            {
                if (null == fCancelTextBlockDup2Text)
                {
                    fCancelTextBlockDup2Text = new Text("CancelTextBlockDup2Text", CancelButtone11Button);
                    fCancelTextBlockDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fCancelTextBlockDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCancelTextBlockDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelTextBlockDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button HelpButtonfa83fButton
        {
            get
            {
                if (null == fHelpButtonfa83fButton)
                {
                    fHelpButtonfa83fButton = new Button("HelpButtonfa83fButton", WorkflowFormWindow);
                    fHelpButtonfa83fButton.UIMap.Scope = UIASeachScope.Children;
                    fHelpButtonfa83fButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fHelpButtonfa83fButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"fa83f3ee-2d73-40e3-9c31-b47f66b4f8b1");
                    fHelpButtonfa83fButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpButtonfa83fButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HelpTextBlockDup2Text
        {
            get
            {
                if (null == fHelpTextBlockDup2Text)
                {
                    fHelpTextBlockDup2Text = new Text("HelpTextBlockDup2Text", HelpButtonfa83fButton);
                    fHelpTextBlockDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fHelpTextBlockDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHelpTextBlockDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpTextBlockDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPane
        {
            get
            {
                if (null == fScrollViewerPane)
                {
                    fScrollViewerPane = new Pane("ScrollViewerPane", WorkflowFormWindow);
                    fScrollViewerPane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                }

                return fScrollViewerPane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FormNameQuickSeDup0Text
        {
            get
            {
                if (null == fFormNameQuickSeDup0Text)
                {
                    fFormNameQuickSeDup0Text = new Text("FormNameQuickSeDup0Text", ScrollViewerPane);
                    fFormNameQuickSeDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fFormNameQuickSeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fFormNameQuickSeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Form Name (Quick Set Title)");
                }

                return fFormNameQuickSeDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FormNameQuickSeDup1Text
        {
            get
            {
                if (null == fFormNameQuickSeDup1Text)
                {
                    fFormNameQuickSeDup1Text = new Text("FormNameQuickSeDup1Text", FormNameQuickSeDup0Text);
                    fFormNameQuickSeDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fFormNameQuickSeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFormNameQuickSeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Form Name (Quick Set Title)");
                }

                return fFormNameQuickSeDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit FormNameEditTextBox
        {
            get
            {
                if (null == fTextBox340fa90dEdit)
                {
                    fTextBox340fa90dEdit = new Edit("FormNameEditTextBox", ScrollViewerPane);
                    fTextBox340fa90dEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox340fa90dEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox340fa90dEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"340fa90d-0284-4998-a519-43e2a2bacfd7");
                }

                return fTextBox340fa90dEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup6Pane
        {
            get
            {
                if (null == fScrollViewerPARDup6Pane)
                {
                    fScrollViewerPARDup6Pane = new Pane("ScrollViewerPARDup6Pane", FormNameEditTextBox);
                    fScrollViewerPARDup6Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup6Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup6Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup6Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI6XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI6XScrollBar)
                {
                    fScrollBarVerticI6XScrollBar = new ScrollBar("ScrollBarVerticI6XScrollBar", ScrollViewerPARDup6Pane);
                    fScrollBarVerticI6XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI6XScrollBar.UIMap.Index = 6;
                    fScrollBarVerticI6XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI6XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI6XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI6XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI6XScrollBar)
                {
                    fScrollBarHorizoI6XScrollBar = new ScrollBar("ScrollBarHorizoI6XScrollBar", ScrollViewerPARDup6Pane);
                    fScrollBarHorizoI6XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI6XScrollBar.UIMap.Index = 6;
                    fScrollBarHorizoI6XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI6XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI6XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DestinationTypeDup0Text
        {
            get
            {
                if (null == fDestinationTypeDup0Text)
                {
                    fDestinationTypeDup0Text = new Text("DestinationTypeDup0Text", ScrollViewerPane);
                    fDestinationTypeDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fDestinationTypeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fDestinationTypeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Destination Type");
                }

                return fDestinationTypeDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DestinationTypeDup1Text
        {
            get
            {
                if (null == fDestinationTypeDup1Text)
                {
                    fDestinationTypeDup1Text = new Text("DestinationTypeDup1Text", DestinationTypeDup0Text);
                    fDestinationTypeDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fDestinationTypeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDestinationTypeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Destination Type");
                }

                return fDestinationTypeDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox DestinationTypeComboBox
        {
            get
            {
                if (null == fComboBoxd65b8ebComboBox)
                {
                    fComboBoxd65b8ebComboBox = new ComboBox("DestinationTypeComboBox", ScrollViewerPane);
                    fComboBoxd65b8ebComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxd65b8ebComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxd65b8ebComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d65b8ebe-30dd-4dea-916e-e45ef7cb1cb2");
                }

                return fComboBoxd65b8ebComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group DestinationSettDup0Group
        {
            get
            {
                if (null == fDestinationSettDup0Group)
                {
                    fDestinationSettDup0Group = new Group("DestinationSettDup0Group", ScrollViewerPane);
                    fDestinationSettDup0Group.UIMap.Scope = UIASeachScope.Children;
                    fDestinationSettDup0Group.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fDestinationSettDup0Group.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8fa14d5d-0862-42a3-98db-a9ef7b789be3");
                    fDestinationSettDup0Group.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Destination Settings");
                }

                return fDestinationSettDup0Group;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DestinationSettI0XText
        {
            get
            {
                if (null == fDestinationSettI0XText)
                {
                    fDestinationSettI0XText = new Text("DestinationSettI0XText", DestinationSettDup0Group);
                    fDestinationSettI0XText.UIMap.Scope = UIASeachScope.Children;
                    fDestinationSettI0XText.UIMap.Index = 0;
                    fDestinationSettI0XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDestinationSettI0XText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Destination Settings");
                }

                return fDestinationSettI0XText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FolderPathText
        {
            get
            {
                if (null == fFolderPathText)
                {
                    fFolderPathText = new Text("FolderPathText", DestinationSettDup0Group);
                    fFolderPathText.UIMap.Scope = UIASeachScope.Children;
                    fFolderPathText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fFolderPathText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Folder Path");
                }

                return fFolderPathText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FolderPathTextBText
        {
            get
            {
                if (null == fFolderPathTextBText)
                {
                    fFolderPathTextBText = new Text("FolderPathTextBText", FolderPathText);
                    fFolderPathTextBText.UIMap.Scope = UIASeachScope.Children;
                    fFolderPathTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFolderPathTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Folder Path");
                }

                return fFolderPathTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit FolderPathEditTextBox
        {
            get
            {
                if (null == fTextBoxC4C0507BEdit)
                {
                    fTextBoxC4C0507BEdit = new Edit("TextBoxC4C0507BEdit", DestinationSettDup0Group);
                    fTextBoxC4C0507BEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxC4C0507BEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxC4C0507BEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"C4C0507B-C080-47d0-A5CC-636EB29C6150");
                }

                return fTextBoxC4C0507BEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup7Pane
        {
            get
            {
                if (null == fScrollViewerPARDup7Pane)
                {
                    fScrollViewerPARDup7Pane = new Pane("ScrollViewerPARDup7Pane", FolderPathEditTextBox);
                    fScrollViewerPARDup7Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup7Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup7Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup7Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI7XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI7XScrollBar)
                {
                    fScrollBarVerticI7XScrollBar = new ScrollBar("ScrollBarVerticI7XScrollBar", ScrollViewerPARDup7Pane);
                    fScrollBarVerticI7XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI7XScrollBar.UIMap.Index = 7;
                    fScrollBarVerticI7XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI7XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI7XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI7XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI7XScrollBar)
                {
                    fScrollBarHorizoI7XScrollBar = new ScrollBar("ScrollBarHorizoI7XScrollBar", ScrollViewerPARDup7Pane);
                    fScrollBarHorizoI7XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI7XScrollBar.UIMap.Index = 7;
                    fScrollBarHorizoI7XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI7XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI7XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button BrowseButtonc08Button
        {
            get
            {
                if (null == fBrowseButtonc08Button)
                {
                    fBrowseButtonc08Button = new Button("BrowseButtonc08Button", DestinationSettDup0Group);
                    fBrowseButtonc08Button.UIMap.Scope = UIASeachScope.Children;
                    fBrowseButtonc08Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fBrowseButtonc08Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c08eaa97-b5d7-440e-bae2-5574828e3599");
                    fBrowseButtonc08Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Browse...");
                }

                return fBrowseButtonc08Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text BrowseTextBlockText
        {
            get
            {
                if (null == fBrowseTextBlockText)
                {
                    fBrowseTextBlockText = new Text("BrowseTextBlockText", BrowseButtonc08Button);
                    fBrowseTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fBrowseTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fBrowseTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Browse...");
                }

                return fBrowseTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group DestinationSettDup1Group
        {
            get
            {
                if (null == fDestinationSettDup1Group)
                {
                    fDestinationSettDup1Group = new Group("DestinationSettDup1Group", ScrollViewerPane);
                    fDestinationSettDup1Group.UIMap.Scope = UIASeachScope.Children;
                    fDestinationSettDup1Group.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fDestinationSettDup1Group.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4aa11416-7968-458d-8ce0-783fa1658bed");
                    fDestinationSettDup1Group.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Destination Settings");
                }

                return fDestinationSettDup1Group;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DestinationSettI1XText
        {
            get
            {
                if (null == fDestinationSettI1XText)
                {
                    fDestinationSettI1XText = new Text("DestinationSettI1XText", DestinationSettDup1Group);
                    fDestinationSettI1XText.UIMap.Scope = UIASeachScope.Children;
                    fDestinationSettI1XText.UIMap.Index = 1;
                    fDestinationSettI1XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDestinationSettI1XText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Destination Settings");
                }

                return fDestinationSettI1XText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FTPServerText
        {
            get
            {
                if (null == fFTPServerText)
                {
                    fFTPServerText = new Text("FTPServerText", DestinationSettDup1Group);
                    fFTPServerText.UIMap.Scope = UIASeachScope.Children;
                    fFTPServerText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fFTPServerText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"FTP Server");
                }

                return fFTPServerText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FTPServerTextBlText
        {
            get
            {
                if (null == fFTPServerTextBlText)
                {
                    fFTPServerTextBlText = new Text("FTPServerTextBlText", FTPServerText);
                    fFTPServerTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fFTPServerTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFTPServerTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"FTP Server");
                }

                return fFTPServerTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBox2d151aefEdit
        {
            get
            {
                if (null == fTextBox2d151aefEdit)
                {
                    fTextBox2d151aefEdit = new Edit("TextBox2d151aefEdit", DestinationSettDup1Group);
                    fTextBox2d151aefEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox2d151aefEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox2d151aefEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2d151aef-4148-4d84-b992-329e95dad646");
                }

                return fTextBox2d151aefEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup8Pane
        {
            get
            {
                if (null == fScrollViewerPARDup8Pane)
                {
                    fScrollViewerPARDup8Pane = new Pane("ScrollViewerPARDup8Pane", TextBox2d151aefEdit);
                    fScrollViewerPARDup8Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup8Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup8Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup8Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI8XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI8XScrollBar)
                {
                    fScrollBarVerticI8XScrollBar = new ScrollBar("ScrollBarVerticI8XScrollBar", ScrollViewerPARDup8Pane);
                    fScrollBarVerticI8XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI8XScrollBar.UIMap.Index = 8;
                    fScrollBarVerticI8XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI8XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI8XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI8XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI8XScrollBar)
                {
                    fScrollBarHorizoI8XScrollBar = new ScrollBar("ScrollBarHorizoI8XScrollBar", ScrollViewerPARDup8Pane);
                    fScrollBarHorizoI8XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI8XScrollBar.UIMap.Index = 8;
                    fScrollBarHorizoI8XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI8XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI8XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FTPPathText
        {
            get
            {
                if (null == fFTPPathText)
                {
                    fFTPPathText = new Text("FTPPathText", DestinationSettDup1Group);
                    fFTPPathText.UIMap.Scope = UIASeachScope.Children;
                    fFTPPathText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fFTPPathText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"FTP Path");
                }

                return fFTPPathText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FTPPathTextBlocText
        {
            get
            {
                if (null == fFTPPathTextBlocText)
                {
                    fFTPPathTextBlocText = new Text("FTPPathTextBlocText", FTPPathText);
                    fFTPPathTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fFTPPathTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFTPPathTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"FTP Path");
                }

                return fFTPPathTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBox6bb6284fEdit
        {
            get
            {
                if (null == fTextBox6bb6284fEdit)
                {
                    fTextBox6bb6284fEdit = new Edit("TextBox6bb6284fEdit", DestinationSettDup1Group);
                    fTextBox6bb6284fEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox6bb6284fEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox6bb6284fEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6bb6284f-9d6f-4048-a312-a482d5064cc6");
                }

                return fTextBox6bb6284fEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup9Pane
        {
            get
            {
                if (null == fScrollViewerPARDup9Pane)
                {
                    fScrollViewerPARDup9Pane = new Pane("ScrollViewerPARDup9Pane", TextBox6bb6284fEdit);
                    fScrollViewerPARDup9Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup9Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup9Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup9Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI9XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI9XScrollBar)
                {
                    fScrollBarVerticI9XScrollBar = new ScrollBar("ScrollBarVerticI9XScrollBar", ScrollViewerPARDup9Pane);
                    fScrollBarVerticI9XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI9XScrollBar.UIMap.Index = 9;
                    fScrollBarVerticI9XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI9XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI9XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI9XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI9XScrollBar)
                {
                    fScrollBarHorizoI9XScrollBar = new ScrollBar("ScrollBarHorizoI9XScrollBar", ScrollViewerPARDup9Pane);
                    fScrollBarHorizoI9XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI9XScrollBar.UIMap.Index = 9;
                    fScrollBarHorizoI9XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI9XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI9XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group DestinationSettDup2Group
        {
            get
            {
                if (null == fDestinationSettDup2Group)
                {
                    fDestinationSettDup2Group = new Group("DestinationSettDup2Group", ScrollViewerPane);
                    fDestinationSettDup2Group.UIMap.Scope = UIASeachScope.Children;
                    fDestinationSettDup2Group.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fDestinationSettDup2Group.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"504dd2ba-1bc6-4b9b-ab72-a276fe333a0c");
                    fDestinationSettDup2Group.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Destination Settings");
                }

                return fDestinationSettDup2Group;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DestinationSettI2XText
        {
            get
            {
                if (null == fDestinationSettI2XText)
                {
                    fDestinationSettI2XText = new Text("DestinationSettI2XText", DestinationSettDup2Group);
                    fDestinationSettI2XText.UIMap.Scope = UIASeachScope.Children;
                    fDestinationSettI2XText.UIMap.Index = 2;
                    fDestinationSettI2XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDestinationSettI2XText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Destination Settings");
                }

                return fDestinationSettI2XText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SelectPrinterText
        {
            get
            {
                if (null == fSelectPrinterText)
                {
                    fSelectPrinterText = new Text("SelectPrinterText", DestinationSettDup2Group);
                    fSelectPrinterText.UIMap.Scope = UIASeachScope.Children;
                    fSelectPrinterText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fSelectPrinterText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Select Printer");
                }

                return fSelectPrinterText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SelectPrinterTeText
        {
            get
            {
                if (null == fSelectPrinterTeText)
                {
                    fSelectPrinterTeText = new Text("SelectPrinterTeText", SelectPrinterText);
                    fSelectPrinterTeText.UIMap.Scope = UIASeachScope.Children;
                    fSelectPrinterTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSelectPrinterTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Select Printer");
                }

                return fSelectPrinterTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox19b6064ComboBox
        {
            get
            {
                if (null == fComboBox19b6064ComboBox)
                {
                    fComboBox19b6064ComboBox = new ComboBox("ComboBox19b6064ComboBox", DestinationSettDup2Group);
                    fComboBox19b6064ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox19b6064ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox19b6064ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"19b60645-c01b-4265-b7e8-f29a121bf301");
                }

                return fComboBox19b6064ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public RadioButton UseDefaultPrintRadioButton
        {
            get
            {
                if (null == fUseDefaultPrintRadioButton)
                {
                    fUseDefaultPrintRadioButton = new RadioButton("UseDefaultPrintRadioButton", DestinationSettDup2Group);
                    fUseDefaultPrintRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fUseDefaultPrintRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RadioButton");
                    fUseDefaultPrintRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ba2e783e-bced-47c5-bb12-a8a85cf1daf8");
                    fUseDefaultPrintRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Use Default Printer Preferences");
                }

                return fUseDefaultPrintRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text UseDefaultPrintText
        {
            get
            {
                if (null == fUseDefaultPrintText)
                {
                    fUseDefaultPrintText = new Text("UseDefaultPrintText", UseDefaultPrintRadioButton);
                    fUseDefaultPrintText.UIMap.Scope = UIASeachScope.Children;
                    fUseDefaultPrintText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fUseDefaultPrintText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Use Default Printer Preferences");
                }

                return fUseDefaultPrintText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public RadioButton UseCustomPrinteRadioButton
        {
            get
            {
                if (null == fUseCustomPrinteRadioButton)
                {
                    fUseCustomPrinteRadioButton = new RadioButton("UseCustomPrinteRadioButton", DestinationSettDup2Group);
                    fUseCustomPrinteRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fUseCustomPrinteRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RadioButton");
                    fUseCustomPrinteRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ec62cb94-167d-4c3d-af94-6025a4a4eab5");
                    fUseCustomPrinteRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Use Custom Printer Preferences");
                }

                return fUseCustomPrinteRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text UseCustomPrinteText
        {
            get
            {
                if (null == fUseCustomPrinteText)
                {
                    fUseCustomPrinteText = new Text("UseCustomPrinteText", UseCustomPrinteRadioButton);
                    fUseCustomPrinteText.UIMap.Scope = UIASeachScope.Children;
                    fUseCustomPrinteText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fUseCustomPrinteText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Use Custom Printer Preferences");
                }

                return fUseCustomPrinteText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button PreferencesButtButton
        {
            get
            {
                if (null == fPreferencesButtButton)
                {
                    fPreferencesButtButton = new Button("PreferencesButtButton", DestinationSettDup2Group);
                    fPreferencesButtButton.UIMap.Scope = UIASeachScope.Children;
                    fPreferencesButtButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fPreferencesButtButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5e5a95e0-54da-42ee-99a0-ccddea2bad46");
                    fPreferencesButtButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Preferences...");
                }

                return fPreferencesButtButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PreferencesTextText
        {
            get
            {
                if (null == fPreferencesTextText)
                {
                    fPreferencesTextText = new Text("PreferencesTextText", PreferencesButtButton);
                    fPreferencesTextText.UIMap.Scope = UIASeachScope.Children;
                    fPreferencesTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPreferencesTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Preferences...");
                }

                return fPreferencesTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group DestinationSettDup3Group
        {
            get
            {
                if (null == fDestinationSettDup3Group)
                {
                    fDestinationSettDup3Group = new Group("DestinationSettDup3Group", ScrollViewerPane);
                    fDestinationSettDup3Group.UIMap.Scope = UIASeachScope.Children;
                    fDestinationSettDup3Group.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fDestinationSettDup3Group.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1F763494-C261-447A-A42E-6D3F0E160CF4");
                    fDestinationSettDup3Group.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Destination Settings");
                }

                return fDestinationSettDup3Group;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DestinationSettI3XText
        {
            get
            {
                if (null == fDestinationSettI3XText)
                {
                    fDestinationSettI3XText = new Text("DestinationSettI3XText", DestinationSettDup3Group);
                    fDestinationSettI3XText.UIMap.Scope = UIASeachScope.Children;
                    fDestinationSettI3XText.UIMap.Index = 3;
                    fDestinationSettI3XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDestinationSettI3XText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Destination Settings");
                }

                return fDestinationSettI3XText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SharePointPathText
        {
            get
            {
                if (null == fSharePointPathText)
                {
                    fSharePointPathText = new Text("SharePointPathText", DestinationSettDup3Group);
                    fSharePointPathText.UIMap.Scope = UIASeachScope.Children;
                    fSharePointPathText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fSharePointPathText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"SharePoint® Path");
                }

                return fSharePointPathText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SharePointPathTText
        {
            get
            {
                if (null == fSharePointPathTText)
                {
                    fSharePointPathTText = new Text("SharePointPathTText", SharePointPathText);
                    fSharePointPathTText.UIMap.Scope = UIASeachScope.Children;
                    fSharePointPathTText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSharePointPathTText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"SharePoint® Path");
                }

                return fSharePointPathTText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit SharePointEditTextBox
        {
            get
            {
                if (null == fTextBox90D7BA83Edit)
                {
                    fTextBox90D7BA83Edit = new Edit("TextBox90D7BA83Edit", DestinationSettDup3Group);
                    fTextBox90D7BA83Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox90D7BA83Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox90D7BA83Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"90D7BA83-DE23-4B63-B6F4-D14810BF1D7D");
                }

                return fTextBox90D7BA83Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup10Pane
        {
            get
            {
                if (null == fScrollViewerPARDup10Pane)
                {
                    fScrollViewerPARDup10Pane = new Pane("ScrollViewerPARDup10Pane", SharePointEditTextBox);
                    fScrollViewerPARDup10Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup10Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup10Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup10Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI10XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI10XScrollBar)
                {
                    fScrollBarVerticI10XScrollBar = new ScrollBar("ScrollBarVerticI10XScrollBar", ScrollViewerPARDup10Pane);
                    fScrollBarVerticI10XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI10XScrollBar.UIMap.Index = 10;
                    fScrollBarVerticI10XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI10XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI10XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI10XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI10XScrollBar)
                {
                    fScrollBarHorizoI10XScrollBar = new ScrollBar("ScrollBarHorizoI10XScrollBar", ScrollViewerPARDup10Pane);
                    fScrollBarHorizoI10XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI10XScrollBar.UIMap.Index = 10;
                    fScrollBarHorizoI10XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI10XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI10XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox OverwriteexistiCheckBox
        {
            get
            {
                if (null == fOverwriteexistiCheckBox)
                {
                    fOverwriteexistiCheckBox = new CheckBox("OverwriteexistiCheckBox", DestinationSettDup3Group);
                    fOverwriteexistiCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fOverwriteexistiCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fOverwriteexistiCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"FEEFDD05-7025-4E51-B0D2-C3334DBE82C4");
                    fOverwriteexistiCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Overwrite existing files");
                }

                return fOverwriteexistiCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OverwriteexistiText
        {
            get
            {
                if (null == fOverwriteexistiText)
                {
                    fOverwriteexistiText = new Text("OverwriteexistiText", OverwriteexistiCheckBox);
                    fOverwriteexistiText.UIMap.Scope = UIASeachScope.Children;
                    fOverwriteexistiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOverwriteexistiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Overwrite existing files");
                }

                return fOverwriteexistiText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button GenerateShortURButton
        {
            get
            {
                if (null == fGenerateShortURButton)
                {
                    fGenerateShortURButton = new Button("GenerateShortURButton", DestinationSettDup3Group);
                    fGenerateShortURButton.UIMap.Scope = UIASeachScope.Children;
                    fGenerateShortURButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fGenerateShortURButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"A02E383F-DD36-4394-AE3B-701D87A91AED");
                    fGenerateShortURButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Generate Short URL");
                }

                return fGenerateShortURButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GenerateShortURText
        {
            get
            {
                if (null == fGenerateShortURText)
                {
                    fGenerateShortURText = new Text("GenerateShortURText", GenerateShortURButton);
                    fGenerateShortURText.UIMap.Scope = UIASeachScope.Children;
                    fGenerateShortURText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fGenerateShortURText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Generate Short URL");
                }

                return fGenerateShortURText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group AuthenticationSGroup
        {
            get
            {
                if (null == fAuthenticationSGroup)
                {
                    fAuthenticationSGroup = new Group("AuthenticationSGroup", ScrollViewerPane);
                    fAuthenticationSGroup.UIMap.Scope = UIASeachScope.Children;
                    fAuthenticationSGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fAuthenticationSGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"630E0D75-0F13-44ff-85DD-9734AF94965F");
                    fAuthenticationSGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Authentication Settings");
                }

                return fAuthenticationSGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AuthenticationSText
        {
            get
            {
                if (null == fAuthenticationSText)
                {
                    fAuthenticationSText = new Text("AuthenticationSText", AuthenticationSGroup);
                    fAuthenticationSText.UIMap.Scope = UIASeachScope.Children;
                    fAuthenticationSText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAuthenticationSText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Authentication Settings");
                }

                return fAuthenticationSText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public RadioButton UsecredentialsoRadioButton
        {
            get
            {
                if (null == fUsecredentialsoRadioButton)
                {
                    fUsecredentialsoRadioButton = new RadioButton("UsecredentialsoRadioButton", AuthenticationSGroup);
                    fUsecredentialsoRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fUsecredentialsoRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RadioButton");
                    fUsecredentialsoRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"89CC9B28-7EAC-4630-BAC2-08B3D35A4992");
                    fUsecredentialsoRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Use credentials of user to connect after Sign In at the control panel");
                }

                return fUsecredentialsoRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text UsecredentialsoText
        {
            get
            {
                if (null == fUsecredentialsoText)
                {
                    fUsecredentialsoText = new Text("UsecredentialsoText", UsecredentialsoRadioButton);
                    fUsecredentialsoText.UIMap.Scope = UIASeachScope.Children;
                    fUsecredentialsoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fUsecredentialsoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Use credentials of user to connect after Sign In at the control panel");
                }

                return fUsecredentialsoText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public RadioButton AlwaysusethesecRadioButton
        {
            get
            {
                if (null == fAlwaysusethesecRadioButton)
                {
                    fAlwaysusethesecRadioButton = new RadioButton("AlwaysusethesecRadioButton", AuthenticationSGroup);
                    fAlwaysusethesecRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fAlwaysusethesecRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RadioButton");
                    fAlwaysusethesecRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"FC49B6AB-D7AA-46fe-8CF8-794702A18A2C");
                    fAlwaysusethesecRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Always use these credentials");
                }

                return fAlwaysusethesecRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AlwaysusethesecText
        {
            get
            {
                if (null == fAlwaysusethesecText)
                {
                    fAlwaysusethesecText = new Text("AlwaysusethesecText", AlwaysusethesecRadioButton);
                    fAlwaysusethesecText.UIMap.Scope = UIASeachScope.Children;
                    fAlwaysusethesecText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAlwaysusethesecText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Always use these credentials");
                }

                return fAlwaysusethesecText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text UsernameText
        {
            get
            {
                if (null == fUsernameText)
                {
                    fUsernameText = new Text("UsernameText", AuthenticationSGroup);
                    fUsernameText.UIMap.Scope = UIASeachScope.Children;
                    fUsernameText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fUsernameText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Username");
                }

                return fUsernameText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text UsernameTextBloText
        {
            get
            {
                if (null == fUsernameTextBloText)
                {
                    fUsernameTextBloText = new Text("UsernameTextBloText", UsernameText);
                    fUsernameTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fUsernameTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fUsernameTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Username");
                }

                return fUsernameTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit CredentialUserNameEditTextBox
        {
            get
            {
                if (null == fTextBox508FCAECEdit)
                {
                    fTextBox508FCAECEdit = new Edit("CredentialUserNameEditTextBox", AuthenticationSGroup);
                    fTextBox508FCAECEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox508FCAECEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox508FCAECEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"508FCAEC-00D7-4118-BC4A-772E2136C6A2");
                }

                return fTextBox508FCAECEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup11Pane
        {
            get
            {
                if (null == fScrollViewerPARDup11Pane)
                {
                    fScrollViewerPARDup11Pane = new Pane("ScrollViewerPARDup11Pane", CredentialUserNameEditTextBox);
                    fScrollViewerPARDup11Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup11Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup11Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup11Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI11XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI11XScrollBar)
                {
                    fScrollBarVerticI11XScrollBar = new ScrollBar("ScrollBarVerticI11XScrollBar", ScrollViewerPARDup11Pane);
                    fScrollBarVerticI11XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI11XScrollBar.UIMap.Index = 11;
                    fScrollBarVerticI11XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI11XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI11XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI11XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI11XScrollBar)
                {
                    fScrollBarHorizoI11XScrollBar = new ScrollBar("ScrollBarHorizoI11XScrollBar", ScrollViewerPARDup11Pane);
                    fScrollBarHorizoI11XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI11XScrollBar.UIMap.Index = 11;
                    fScrollBarHorizoI11XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI11XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI11XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PasswordText
        {
            get
            {
                if (null == fPasswordText)
                {
                    fPasswordText = new Text("PasswordText", AuthenticationSGroup);
                    fPasswordText.UIMap.Scope = UIASeachScope.Children;
                    fPasswordText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fPasswordText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Password");
                }

                return fPasswordText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PasswordTextBloText
        {
            get
            {
                if (null == fPasswordTextBloText)
                {
                    fPasswordTextBloText = new Text("PasswordTextBloText", PasswordText);
                    fPasswordTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fPasswordTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPasswordTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Password");
                }

                return fPasswordTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit CredentialPasswordEditTextBox
        {
            get
            {
                if (null == fPasswordBox1761Edit)
                {
                    fPasswordBox1761Edit = new Edit("CredentialPasswordEditTextBox", AuthenticationSGroup);
                    fPasswordBox1761Edit.UIMap.Scope = UIASeachScope.Children;
                    fPasswordBox1761Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"PasswordBox");
                    fPasswordBox1761Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"176188ED-25B3-4b51-B7E5-EF00BD4CC4F5");
                }

                return fPasswordBox1761Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup12Pane
        {
            get
            {
                if (null == fScrollViewerPARDup12Pane)
                {
                    fScrollViewerPARDup12Pane = new Pane("ScrollViewerPARDup12Pane", CredentialPasswordEditTextBox);
                    fScrollViewerPARDup12Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup12Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup12Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup12Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI12XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI12XScrollBar)
                {
                    fScrollBarVerticI12XScrollBar = new ScrollBar("ScrollBarVerticI12XScrollBar", ScrollViewerPARDup12Pane);
                    fScrollBarVerticI12XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI12XScrollBar.UIMap.Index = 12;
                    fScrollBarVerticI12XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI12XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI12XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI12XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI12XScrollBar)
                {
                    fScrollBarHorizoI12XScrollBar = new ScrollBar("ScrollBarHorizoI12XScrollBar", ScrollViewerPARDup12Pane);
                    fScrollBarHorizoI12XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI12XScrollBar.UIMap.Index = 12;
                    fScrollBarHorizoI12XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI12XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI12XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text WindowsDomainTeDup0Text
        {
            get
            {
                if (null == fWindowsDomainTeDup0Text)
                {
                    fWindowsDomainTeDup0Text = new Text("WindowsDomainTeDup0Text", AuthenticationSGroup);
                    fWindowsDomainTeDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fWindowsDomainTeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fWindowsDomainTeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mCredentialsDomainLabel");
                    fWindowsDomainTeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Windows Domain");
                }

                return fWindowsDomainTeDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text WindowsDomainTeDup1Text
        {
            get
            {
                if (null == fWindowsDomainTeDup1Text)
                {
                    fWindowsDomainTeDup1Text = new Text("WindowsDomainTeDup1Text", WindowsDomainTeDup0Text);
                    fWindowsDomainTeDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fWindowsDomainTeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fWindowsDomainTeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Windows Domain");
                }

                return fWindowsDomainTeDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit CredentialDomainEditTextBox
        {
            get
            {
                if (null == fTextBoxB55EDC61Edit)
                {
                    fTextBoxB55EDC61Edit = new Edit("CredentialDomainEditTextBox", AuthenticationSGroup);
                    fTextBoxB55EDC61Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxB55EDC61Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxB55EDC61Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"B55EDC61-30D5-4784-BBAF-06738090EF6B");
                }

                return fTextBoxB55EDC61Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup13Pane
        {
            get
            {
                if (null == fScrollViewerPARDup13Pane)
                {
                    fScrollViewerPARDup13Pane = new Pane("ScrollViewerPARDup13Pane", CredentialDomainEditTextBox);
                    fScrollViewerPARDup13Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup13Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup13Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup13Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI13XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI13XScrollBar)
                {
                    fScrollBarVerticI13XScrollBar = new ScrollBar("ScrollBarVerticI13XScrollBar", ScrollViewerPARDup13Pane);
                    fScrollBarVerticI13XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI13XScrollBar.UIMap.Index = 13;
                    fScrollBarVerticI13XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI13XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI13XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI13XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI13XScrollBar)
                {
                    fScrollBarHorizoI13XScrollBar = new ScrollBar("ScrollBarHorizoI13XScrollBar", ScrollViewerPARDup13Pane);
                    fScrollBarHorizoI13XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI13XScrollBar.UIMap.Index = 13;
                    fScrollBarHorizoI13XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI13XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI13XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button VerifyAccessButButton
        {
            get
            {
                if (null == fVerifyAccessButButton)
                {
                    fVerifyAccessButButton = new Button("VerifyAccessButButton", AuthenticationSGroup);
                    fVerifyAccessButButton.UIMap.Scope = UIASeachScope.Children;
                    fVerifyAccessButButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fVerifyAccessButButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"79C3D87B-1292-4be5-84ED-C53BCC956632");
                    fVerifyAccessButButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Verify Access");
                }

                return fVerifyAccessButButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text VerifyAccessTexText
        {
            get
            {
                if (null == fVerifyAccessTexText)
                {
                    fVerifyAccessTexText = new Text("VerifyAccessTexText", VerifyAccessButButton);
                    fVerifyAccessTexText.UIMap.Scope = UIASeachScope.Children;
                    fVerifyAccessTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fVerifyAccessTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Verify Access");
                }

                return fVerifyAccessTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group GroupBoxa2a172cGroup
        {
            get
            {
                if (null == fGroupBoxa2a172cGroup)
                {
                    fGroupBoxa2a172cGroup = new Group("GroupBoxa2a172cGroup", ScrollViewerPane);
                    fGroupBoxa2a172cGroup.UIMap.Scope = UIASeachScope.Children;
                    fGroupBoxa2a172cGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fGroupBoxa2a172cGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"a2a172cc-840c-44c9-b44c-c860b42a9ad0");
                }

                return fGroupBoxa2a172cGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ImagePresetsText
        {
            get
            {
                if (null == fImagePresetsText)
                {
                    fImagePresetsText = new Text("ImagePresetsText", GroupBoxa2a172cGroup);
                    fImagePresetsText.UIMap.Scope = UIASeachScope.Children;
                    fImagePresetsText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fImagePresetsText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Image Presets:");
                }

                return fImagePresetsText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ImagePresetsTexText
        {
            get
            {
                if (null == fImagePresetsTexText)
                {
                    fImagePresetsTexText = new Text("ImagePresetsTexText", ImagePresetsText);
                    fImagePresetsTexText.UIMap.Scope = UIASeachScope.Children;
                    fImagePresetsTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fImagePresetsTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Image Presets:");
                }

                return fImagePresetsTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ImagePresetsComboBox
        {
            get
            {
                if (null == fComboBox4aaf0c4ComboBox)
                {
                    fComboBox4aaf0c4ComboBox = new ComboBox("ImagePresetsComboBox", GroupBoxa2a172cGroup);
                    fComboBox4aaf0c4ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox4aaf0c4ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox4aaf0c4ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4aaf0c45-9257-4445-aec0-23169c8282f2");
                }

                return fComboBox4aaf0c4ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group ScanSettingsGroGroup
        {
            get
            {
                if (null == fScanSettingsGroGroup)
                {
                    fScanSettingsGroGroup = new Group("ScanSettingsGroGroup", ScrollViewerPane);
                    fScanSettingsGroGroup.UIMap.Scope = UIASeachScope.Children;
                    fScanSettingsGroGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fScanSettingsGroGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"D729227B-16F9-4e22-91CF-73BD04640B53");
                    fScanSettingsGroGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Scan Settings");
                }

                return fScanSettingsGroGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ScanSettingsTexText
        {
            get
            {
                if (null == fScanSettingsTexText)
                {
                    fScanSettingsTexText = new Text("ScanSettingsTexText", ScanSettingsGroGroup);
                    fScanSettingsTexText.UIMap.Scope = UIASeachScope.Children;
                    fScanSettingsTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fScanSettingsTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Scan Settings");
                }

                return fScanSettingsTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OriginalSizeText
        {
            get
            {
                if (null == fOriginalSizeText)
                {
                    fOriginalSizeText = new Text("OriginalSizeText", ScanSettingsGroGroup);
                    fOriginalSizeText.UIMap.Scope = UIASeachScope.Children;
                    fOriginalSizeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fOriginalSizeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Original Size*");
                }

                return fOriginalSizeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OriginalSizeTexDup0Text
        {
            get
            {
                if (null == fOriginalSizeTexDup0Text)
                {
                    fOriginalSizeTexDup0Text = new Text("OriginalSizeTexDup0Text", OriginalSizeText);
                    fOriginalSizeTexDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fOriginalSizeTexDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOriginalSizeTexDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Original Size*");
                }

                return fOriginalSizeTexDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox OriginalSizeComboBox
        {
            get
            {
                if (null == fComboBox0CF9C1FComboBox)
                {
                    fComboBox0CF9C1FComboBox = new ComboBox("OriginalSizeComboBox", ScanSettingsGroGroup);
                    fComboBox0CF9C1FComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox0CF9C1FComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox0CF9C1FComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"0CF9C1FB-1D42-4955-B049-A3A32E3DB5DD");
                }

                return fComboBox0CF9C1FComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OriginalSidesText
        {
            get
            {
                if (null == fOriginalSidesText)
                {
                    fOriginalSidesText = new Text("OriginalSidesText", ScanSettingsGroGroup);
                    fOriginalSidesText.UIMap.Scope = UIASeachScope.Children;
                    fOriginalSidesText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fOriginalSidesText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Original Sides*");
                }

                return fOriginalSidesText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OriginalSidesTeText
        {
            get
            {
                if (null == fOriginalSidesTeText)
                {
                    fOriginalSidesTeText = new Text("OriginalSidesTeText", OriginalSidesText);
                    fOriginalSidesTeText.UIMap.Scope = UIASeachScope.Children;
                    fOriginalSidesTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOriginalSidesTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Original Sides*");
                }

                return fOriginalSidesTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox OriginalSideComboBox
        {
            get
            {
                if (null == fComboBoxF6BD163ComboBox)
                {
                    fComboBoxF6BD163ComboBox = new ComboBox("OriginalSideComboBox", ScanSettingsGroGroup);
                    fComboBoxF6BD163ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxF6BD163ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxF6BD163ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"F6BD163E-E5E4-4575-93CA-FAE5F1A4F9DF");
                }

                return fComboBoxF6BD163ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OptimizeForText
        {
            get
            {
                if (null == fOptimizeForText)
                {
                    fOptimizeForText = new Text("OptimizeForText", ScanSettingsGroGroup);
                    fOptimizeForText.UIMap.Scope = UIASeachScope.Children;
                    fOptimizeForText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fOptimizeForText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Optimize For*");
                }

                return fOptimizeForText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OptimizeForTextText
        {
            get
            {
                if (null == fOptimizeForTextText)
                {
                    fOptimizeForTextText = new Text("OptimizeForTextText", OptimizeForText);
                    fOptimizeForTextText.UIMap.Scope = UIASeachScope.Children;
                    fOptimizeForTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOptimizeForTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Optimize For*");
                }

                return fOptimizeForTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox OptimizeComboBox
        {
            get
            {
                if (null == fComboBox9CB2C4EComboBox)
                {
                    fComboBox9CB2C4EComboBox = new ComboBox("OptimizeComboBox", ScanSettingsGroGroup);
                    fComboBox9CB2C4EComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox9CB2C4EComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox9CB2C4EComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9CB2C4EA-29D1-4111-BD2D-B16802B480CE");
                }

                return fComboBox9CB2C4EComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ContentOrientatDup0Text
        {
            get
            {
                if (null == fContentOrientatDup0Text)
                {
                    fContentOrientatDup0Text = new Text("ContentOrientatDup0Text", ScanSettingsGroGroup);
                    fContentOrientatDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fContentOrientatDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fContentOrientatDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Content Orientation");
                }

                return fContentOrientatDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ContentOrientatDup1Text
        {
            get
            {
                if (null == fContentOrientatDup1Text)
                {
                    fContentOrientatDup1Text = new Text("ContentOrientatDup1Text", ContentOrientatDup0Text);
                    fContentOrientatDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fContentOrientatDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fContentOrientatDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Content Orientation");
                }

                return fContentOrientatDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox OrientationComboBox
        {
            get
            {
                if (null == fComboBoxACA3B88ComboBox)
                {
                    fComboBoxACA3B88ComboBox = new ComboBox("OrientationComboBox", ScanSettingsGroGroup);
                    fComboBoxACA3B88ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxACA3B88ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxACA3B88ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ACA3B883-DB3A-475f-A345-BEB9EA95B062");
                }

                return fComboBoxACA3B88ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text BackgroundCleanDup0Text
        {
            get
            {
                if (null == fBackgroundCleanDup0Text)
                {
                    fBackgroundCleanDup0Text = new Text("BackgroundCleanDup0Text", ScanSettingsGroGroup);
                    fBackgroundCleanDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fBackgroundCleanDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fBackgroundCleanDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Background Cleanup");
                }

                return fBackgroundCleanDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text BackgroundCleanDup1Text
        {
            get
            {
                if (null == fBackgroundCleanDup1Text)
                {
                    fBackgroundCleanDup1Text = new Text("BackgroundCleanDup1Text", BackgroundCleanDup0Text);
                    fBackgroundCleanDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fBackgroundCleanDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fBackgroundCleanDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Background Cleanup");
                }

                return fBackgroundCleanDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox BackgroundCleanupComboBox
        {
            get
            {
                if (null == fComboBox3251159ComboBox)
                {
                    fComboBox3251159ComboBox = new ComboBox("BackgroundCleanupComboBox", ScanSettingsGroGroup);
                    fComboBox3251159ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox3251159ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox3251159ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"32511593-CACC-46cb-9D86-69D722CA1D51");
                }

                return fComboBox3251159ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SharpnessText
        {
            get
            {
                if (null == fSharpnessText)
                {
                    fSharpnessText = new Text("SharpnessText", ScanSettingsGroGroup);
                    fSharpnessText.UIMap.Scope = UIASeachScope.Children;
                    fSharpnessText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fSharpnessText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Sharpness");
                }

                return fSharpnessText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SharpnessTextBlText
        {
            get
            {
                if (null == fSharpnessTextBlText)
                {
                    fSharpnessTextBlText = new Text("SharpnessTextBlText", SharpnessText);
                    fSharpnessTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fSharpnessTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSharpnessTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Sharpness");
                }

                return fSharpnessTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox SharpnessComboBox
        {
            get
            {
                if (null == fComboBox1174440ComboBox)
                {
                    fComboBox1174440ComboBox = new ComboBox("SharpnessComboBox", ScanSettingsGroGroup);
                    fComboBox1174440ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox1174440ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox1174440ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"11744406-E2F1-4c0c-8537-EA6B2CC6EB12");
                }

                return fComboBox1174440ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DarknessText
        {
            get
            {
                if (null == fDarknessText)
                {
                    fDarknessText = new Text("DarknessText", ScanSettingsGroGroup);
                    fDarknessText.UIMap.Scope = UIASeachScope.Children;
                    fDarknessText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fDarknessText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Darkness");
                }

                return fDarknessText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DarknessTextBloText
        {
            get
            {
                if (null == fDarknessTextBloText)
                {
                    fDarknessTextBloText = new Text("DarknessTextBloText", DarknessText);
                    fDarknessTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fDarknessTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDarknessTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Darkness");
                }

                return fDarknessTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox DarknessComboBox
        {
            get
            {
                if (null == fComboBox9773BB7ComboBox)
                {
                    fComboBox9773BB7ComboBox = new ComboBox("DarknessComboBox", ScanSettingsGroGroup);
                    fComboBox9773BB7ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox9773BB7ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox9773BB7ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9773BB76-39AC-4327-86C4-909A23114E26");
                }

                return fComboBox9773BB7ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ContrastText
        {
            get
            {
                if (null == fContrastText)
                {
                    fContrastText = new Text("ContrastText", ScanSettingsGroGroup);
                    fContrastText.UIMap.Scope = UIASeachScope.Children;
                    fContrastText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fContrastText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Contrast");
                }

                return fContrastText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ContrastTextBloText
        {
            get
            {
                if (null == fContrastTextBloText)
                {
                    fContrastTextBloText = new Text("ContrastTextBloText", ContrastText);
                    fContrastTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fContrastTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fContrastTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Contrast");
                }

                return fContrastTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ContrastComboBox
        {
            get
            {
                if (null == fComboBox833E87FComboBox)
                {
                    fComboBox833E87FComboBox = new ComboBox("ContrastComboBox", ScanSettingsGroGroup);
                    fComboBox833E87FComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox833E87FComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox833E87FComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"833E87F4-75E8-47e9-980C-E0FFD36D89C6");
                }

                return fComboBox833E87FComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox JobBuildCheckBoCheckBox
        {
            get
            {
                if (null == fJobBuildCheckBoCheckBox)
                {
                    fJobBuildCheckBoCheckBox = new CheckBox("JobBuildCheckBoCheckBox", ScanSettingsGroGroup);
                    fJobBuildCheckBoCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fJobBuildCheckBoCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fJobBuildCheckBoCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"371DFFBC-EC28-47AA-BBF1-A2E0CAA94E25");
                    fJobBuildCheckBoCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Job Build+");
                }

                return fJobBuildCheckBoCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text JobBuildTextBloText
        {
            get
            {
                if (null == fJobBuildTextBloText)
                {
                    fJobBuildTextBloText = new Text("JobBuildTextBloText", JobBuildCheckBoCheckBox);
                    fJobBuildTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fJobBuildTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fJobBuildTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Job Build+");
                }

                return fJobBuildTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group AppliesonlyforEGroup
        {
            get
            {
                if (null == fAppliesonlyforEGroup)
                {
                    fAppliesonlyforEGroup = new Group("AppliesonlyforEGroup", ScanSettingsGroGroup);
                    fAppliesonlyforEGroup.UIMap.Scope = UIASeachScope.Children;
                    fAppliesonlyforEGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fAppliesonlyforEGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"534BD345-D53D-47A9-94E0-635714B99AB8");
                    fAppliesonlyforEGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Applies only for Enhanced Workflows on FutureSmart devices");
                }

                return fAppliesonlyforEGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AppliesonlyforEText
        {
            get
            {
                if (null == fAppliesonlyforEText)
                {
                    fAppliesonlyforEText = new Text("AppliesonlyforEText", AppliesonlyforEGroup);
                    fAppliesonlyforEText.UIMap.Scope = UIASeachScope.Children;
                    fAppliesonlyforEText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAppliesonlyforEText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Applies only for Enhanced Workflows on FutureSmart devices");
                }

                return fAppliesonlyforEText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OriginalSizeTexDup1Text
        {
            get
            {
                if (null == fOriginalSizeTexDup1Text)
                {
                    fOriginalSizeTexDup1Text = new Text("OriginalSizeTexDup1Text", AppliesonlyforEGroup);
                    fOriginalSizeTexDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fOriginalSizeTexDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fOriginalSizeTexDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"D6D2961D-B7BA-455B-AE35-4F1B24D915E0");
                    fOriginalSizeTexDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Original Size");
                }

                return fOriginalSizeTexDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OriginalSizeTexDup2Text
        {
            get
            {
                if (null == fOriginalSizeTexDup2Text)
                {
                    fOriginalSizeTexDup2Text = new Text("OriginalSizeTexDup2Text", OriginalSizeTexDup1Text);
                    fOriginalSizeTexDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fOriginalSizeTexDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOriginalSizeTexDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Original Size");
                }

                return fOriginalSizeTexDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox1B4345AComboBox
        {
            get
            {
                if (null == fComboBox1B4345AComboBox)
                {
                    fComboBox1B4345AComboBox = new ComboBox("ComboBox1B4345AComboBox", AppliesonlyforEGroup);
                    fComboBox1B4345AComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox1B4345AComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox1B4345AComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1B4345AA-F267-4073-BEAA-08C9A3DB41C3");
                }

                return fComboBox1B4345AComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox BlankPageSuppreCheckBox
        {
            get
            {
                if (null == fBlankPageSuppreCheckBox)
                {
                    fBlankPageSuppreCheckBox = new CheckBox("BlankPageSuppreCheckBox", AppliesonlyforEGroup);
                    fBlankPageSuppreCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fBlankPageSuppreCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fBlankPageSuppreCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4E675DA8-214E-4889-82A7-272E6156441A");
                    fBlankPageSuppreCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Blank Page Suppression");
                }

                return fBlankPageSuppreCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text BlankPageSuppreText
        {
            get
            {
                if (null == fBlankPageSuppreText)
                {
                    fBlankPageSuppreText = new Text("BlankPageSuppreText", BlankPageSuppreCheckBox);
                    fBlankPageSuppreText.UIMap.Scope = UIASeachScope.Children;
                    fBlankPageSuppreText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fBlankPageSuppreText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Blank Page Suppression");
                }

                return fBlankPageSuppreText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group NotificationSetGroup
        {
            get
            {
                if (null == fNotificationSetGroup)
                {
                    fNotificationSetGroup = new Group("NotificationSetGroup", AppliesonlyforEGroup);
                    fNotificationSetGroup.UIMap.Scope = UIASeachScope.Children;
                    fNotificationSetGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fNotificationSetGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c0bbeea0-91cc-49df-9a75-a034030c456b");
                    fNotificationSetGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Notification Settings");
                }

                return fNotificationSetGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NotificationSetText
        {
            get
            {
                if (null == fNotificationSetText)
                {
                    fNotificationSetText = new Text("NotificationSetText", NotificationSetGroup);
                    fNotificationSetText.UIMap.Scope = UIASeachScope.Children;
                    fNotificationSetText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fNotificationSetText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Notification Settings");
                }

                return fNotificationSetText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextmEWNotifyCoText
        {
            get
            {
                if (null == fTextmEWNotifyCoText)
                {
                    fTextmEWNotifyCoText = new Text("TextmEWNotifyCoText", NotificationSetGroup);
                    fTextmEWNotifyCoText.UIMap.Scope = UIASeachScope.Children;
                    fTextmEWNotifyCoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fTextmEWNotifyCoText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mEWNotifyConditionLabel");
                }

                return fTextmEWNotifyCoText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ConditiononWhicText
        {
            get
            {
                if (null == fConditiononWhicText)
                {
                    fConditiononWhicText = new Text("ConditiononWhicText", TextmEWNotifyCoText);
                    fConditiononWhicText.UIMap.Scope = UIASeachScope.Children;
                    fConditiononWhicText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fConditiononWhicText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Condition on Which to Notify");
                }

                return fConditiononWhicText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextmEWNotifyMeText
        {
            get
            {
                if (null == fTextmEWNotifyMeText)
                {
                    fTextmEWNotifyMeText = new Text("TextmEWNotifyMeText", NotificationSetGroup);
                    fTextmEWNotifyMeText.UIMap.Scope = UIASeachScope.Children;
                    fTextmEWNotifyMeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fTextmEWNotifyMeText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mEWNotifyMethodLabel");
                }

                return fTextmEWNotifyMeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MethodUsedtoDelText
        {
            get
            {
                if (null == fMethodUsedtoDelText)
                {
                    fMethodUsedtoDelText = new Text("MethodUsedtoDelText", TextmEWNotifyMeText);
                    fMethodUsedtoDelText.UIMap.Scope = UIASeachScope.Children;
                    fMethodUsedtoDelText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fMethodUsedtoDelText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Method Used to Deliver Notification");
                }

                return fMethodUsedtoDelText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextmEWNotifyEmText
        {
            get
            {
                if (null == fTextmEWNotifyEmText)
                {
                    fTextmEWNotifyEmText = new Text("TextmEWNotifyEmText", NotificationSetGroup);
                    fTextmEWNotifyEmText.UIMap.Scope = UIASeachScope.Children;
                    fTextmEWNotifyEmText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fTextmEWNotifyEmText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mEWNotifyEmailLabel");
                }

                return fTextmEWNotifyEmText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NotificationEmaText
        {
            get
            {
                if (null == fNotificationEmaText)
                {
                    fNotificationEmaText = new Text("NotificationEmaText", TextmEWNotifyEmText);
                    fNotificationEmaText.UIMap.Scope = UIASeachScope.Children;
                    fNotificationEmaText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fNotificationEmaText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Notification E-mail Address");
                }

                return fNotificationEmaText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxmEWNotiDup0ComboBox
        {
            get
            {
                if (null == fComboBoxmEWNotiDup0ComboBox)
                {
                    fComboBoxmEWNotiDup0ComboBox = new ComboBox("ComboBoxmEWNotiDup0ComboBox", NotificationSetGroup);
                    fComboBoxmEWNotiDup0ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxmEWNotiDup0ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxmEWNotiDup0ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mEWNotifyConditionComboBox");
                }

                return fComboBoxmEWNotiDup0ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxmEWNotiDup1ComboBox
        {
            get
            {
                if (null == fComboBoxmEWNotiDup1ComboBox)
                {
                    fComboBoxmEWNotiDup1ComboBox = new ComboBox("ComboBoxmEWNotiDup1ComboBox", NotificationSetGroup);
                    fComboBoxmEWNotiDup1ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxmEWNotiDup1ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxmEWNotiDup1ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mEWNotifyMethodComboBox");
                }

                return fComboBoxmEWNotiDup1ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxmEWNotifEdit
        {
            get
            {
                if (null == fTextBoxmEWNotifEdit)
                {
                    fTextBoxmEWNotifEdit = new Edit("TextBoxmEWNotifEdit", NotificationSetGroup);
                    fTextBoxmEWNotifEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxmEWNotifEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxmEWNotifEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mEWNotifyEmailTextBox");
                }

                return fTextBoxmEWNotifEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup14Pane
        {
            get
            {
                if (null == fScrollViewerPARDup14Pane)
                {
                    fScrollViewerPARDup14Pane = new Pane("ScrollViewerPARDup14Pane", TextBoxmEWNotifEdit);
                    fScrollViewerPARDup14Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup14Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup14Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup14Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticI14XScrollBar
        {
            get
            {
                if (null == fScrollBarVerticI14XScrollBar)
                {
                    fScrollBarVerticI14XScrollBar = new ScrollBar("ScrollBarVerticI14XScrollBar", ScrollViewerPARDup14Pane);
                    fScrollBarVerticI14XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticI14XScrollBar.UIMap.Index = 14;
                    fScrollBarVerticI14XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticI14XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticI14XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoI14XScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoI14XScrollBar)
                {
                    fScrollBarHorizoI14XScrollBar = new ScrollBar("ScrollBarHorizoI14XScrollBar", ScrollViewerPARDup14Pane);
                    fScrollBarHorizoI14XScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoI14XScrollBar.UIMap.Index = 14;
                    fScrollBarHorizoI14XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoI14XScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoI14XScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NoteTheemailaddText
        {
            get
            {
                if (null == fNoteTheemailaddText)
                {
                    fNoteTheemailaddText = new Text("NoteTheemailaddText", NotificationSetGroup);
                    fNoteTheemailaddText.UIMap.Scope = UIASeachScope.Children;
                    fNoteTheemailaddText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fNoteTheemailaddText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mEWWorkflowNotificationSettingsNote");
                    fNoteTheemailaddText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Note: The e-mail address associated with a user's account is used for job notification when a user signs in at the device. If not signed in, the user must enter an e-mail address before notification is sent.");
                }

                return fNoteTheemailaddText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AppliesonlytoFuDup0Text
        {
            get
            {
                if (null == fAppliesonlytoFuDup0Text)
                {
                    fAppliesonlytoFuDup0Text = new Text("AppliesonlytoFuDup0Text", ScanSettingsGroGroup);
                    fAppliesonlytoFuDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fAppliesonlytoFuDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAppliesonlytoFuDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"A8B7D0F7-48F8-4846-BEF0-1581928F725A");
                    fAppliesonlytoFuDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*Applies only to FutureSmart devices. For pre-FutureSmart devices this setting is configured on the device’s Preferences tab.");
                }

                return fAppliesonlytoFuDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AppliesonlytoFuDup1Text
        {
            get
            {
                if (null == fAppliesonlytoFuDup1Text)
                {
                    fAppliesonlytoFuDup1Text = new Text("AppliesonlytoFuDup1Text", ScanSettingsGroGroup);
                    fAppliesonlytoFuDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fAppliesonlytoFuDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAppliesonlytoFuDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"262C542C-3636-43c0-8325-5B0CB1133523");
                    fAppliesonlytoFuDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"+Applies only to FutureSmart devices.");
                }

                return fAppliesonlytoFuDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group FileSettingsGroGroup
        {
            get
            {
                if (null == fFileSettingsGroGroup)
                {
                    fFileSettingsGroGroup = new Group("FileSettingsGroGroup", ScrollViewerPane);
                    fFileSettingsGroGroup.UIMap.Scope = UIASeachScope.Children;
                    fFileSettingsGroGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fFileSettingsGroGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8C18B39F-AD6B-4de2-9826-3901AD1F8B15");
                    fFileSettingsGroGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"File Settings");
                }

                return fFileSettingsGroGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FileSettingsTexText
        {
            get
            {
                if (null == fFileSettingsTexText)
                {
                    fFileSettingsTexText = new Text("FileSettingsTexText", FileSettingsGroGroup);
                    fFileSettingsTexText.UIMap.Scope = UIASeachScope.Children;
                    fFileSettingsTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFileSettingsTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"File Settings");
                }

                return fFileSettingsTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DefaultColorPreDup0Text
        {
            get
            {
                if (null == fDefaultColorPreDup0Text)
                {
                    fDefaultColorPreDup0Text = new Text("DefaultColorPreDup0Text", FileSettingsGroGroup);
                    fDefaultColorPreDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fDefaultColorPreDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fDefaultColorPreDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Default Color Preference");
                }

                return fDefaultColorPreDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DefaultColorPreDup1Text
        {
            get
            {
                if (null == fDefaultColorPreDup1Text)
                {
                    fDefaultColorPreDup1Text = new Text("DefaultColorPreDup1Text", DefaultColorPreDup0Text);
                    fDefaultColorPreDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fDefaultColorPreDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDefaultColorPreDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Default Color Preference");
                }

                return fDefaultColorPreDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ColorPreferenceComboBox
        {
            get
            {
                if (null == fComboBoxBADCFECComboBox)
                {
                    fComboBoxBADCFECComboBox = new ComboBox("ColorPreferenceComboBox", FileSettingsGroGroup);
                    fComboBoxBADCFECComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxBADCFECComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxBADCFECComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"BADCFEC3-F4A5-48ab-BA12-51B2C4C69467");
                }

                return fComboBoxBADCFECComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DefaultOutputQuDup0Text
        {
            get
            {
                if (null == fDefaultOutputQuDup0Text)
                {
                    fDefaultOutputQuDup0Text = new Text("DefaultOutputQuDup0Text", FileSettingsGroGroup);
                    fDefaultOutputQuDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fDefaultOutputQuDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fDefaultOutputQuDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Default Output Quality");
                }

                return fDefaultOutputQuDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DefaultOutputQuDup1Text
        {
            get
            {
                if (null == fDefaultOutputQuDup1Text)
                {
                    fDefaultOutputQuDup1Text = new Text("DefaultOutputQuDup1Text", DefaultOutputQuDup0Text);
                    fDefaultOutputQuDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fDefaultOutputQuDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDefaultOutputQuDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Default Output Quality");
                }

                return fDefaultOutputQuDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox OutputQualityComboBox
        {
            get
            {
                if (null == fComboBoxFECC82EComboBox)
                {
                    fComboBoxFECC82EComboBox = new ComboBox("OutputQualityComboBox", FileSettingsGroGroup);
                    fComboBoxFECC82EComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxFECC82EComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxFECC82EComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"FECC82E6-13BD-4eb5-917C-CC5808CCFE60");
                }

                return fComboBoxFECC82EComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DefaultFileTypeDup0Text
        {
            get
            {
                if (null == fDefaultFileTypeDup0Text)
                {
                    fDefaultFileTypeDup0Text = new Text("DefaultFileTypeDup0Text", FileSettingsGroGroup);
                    fDefaultFileTypeDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fDefaultFileTypeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fDefaultFileTypeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Default File Type");
                }

                return fDefaultFileTypeDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DefaultFileTypeDup1Text
        {
            get
            {
                if (null == fDefaultFileTypeDup1Text)
                {
                    fDefaultFileTypeDup1Text = new Text("DefaultFileTypeDup1Text", DefaultFileTypeDup0Text);
                    fDefaultFileTypeDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fDefaultFileTypeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDefaultFileTypeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Default File Type");
                }

                return fDefaultFileTypeDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox FileTypeComboBox
        {
            get
            {
                if (null == fComboBoxFDC7218ComboBox)
                {
                    fComboBoxFDC7218ComboBox = new ComboBox("FileTypeComboBox", FileSettingsGroGroup);
                    fComboBoxFDC7218ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxFDC7218ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxFDC7218ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"FDC72185-93CE-4aa0-B516-7A60F76E24FA");
                }

                return fComboBoxFDC7218ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DefaultResolutiDup0Text
        {
            get
            {
                if (null == fDefaultResolutiDup0Text)
                {
                    fDefaultResolutiDup0Text = new Text("DefaultResolutiDup0Text", FileSettingsGroGroup);
                    fDefaultResolutiDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fDefaultResolutiDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fDefaultResolutiDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Default Resolution");
                }

                return fDefaultResolutiDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DefaultResolutiDup1Text
        {
            get
            {
                if (null == fDefaultResolutiDup1Text)
                {
                    fDefaultResolutiDup1Text = new Text("DefaultResolutiDup1Text", DefaultResolutiDup0Text);
                    fDefaultResolutiDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fDefaultResolutiDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDefaultResolutiDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Default Resolution");
                }

                return fDefaultResolutiDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ResolutionComboBox
        {
            get
            {
                if (null == fComboBox47D258FComboBox)
                {
                    fComboBox47D258FComboBox = new ComboBox("ResolutionComboBox", FileSettingsGroGroup);
                    fComboBox47D258FComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox47D258FComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox47D258FComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"47D258F1-231F-4eee-A39C-D251DF0FDB9A");
                }

                return fComboBox47D258FComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CompressionText
        {
            get
            {
                if (null == fCompressionText)
                {
                    fCompressionText = new Text("CompressionText", FileSettingsGroGroup);
                    fCompressionText.UIMap.Scope = UIASeachScope.Children;
                    fCompressionText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fCompressionText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Compression");
                }

                return fCompressionText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CompressionTextText
        {
            get
            {
                if (null == fCompressionTextText)
                {
                    fCompressionTextText = new Text("CompressionTextText", CompressionText);
                    fCompressionTextText.UIMap.Scope = UIASeachScope.Children;
                    fCompressionTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCompressionTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Compression");
                }

                return fCompressionTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox CompressionCombobox
        {
            get
            {
                if (null == fComboBox95387FBComboBox)
                {
                    fComboBox95387FBComboBox = new ComboBox("CompressionCombobox", FileSettingsGroGroup);
                    fComboBox95387FBComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox95387FBComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox95387FBComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"95387FB6-6FC9-4a40-845F-2979D86A100A");
                }

                return fComboBox95387FBComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox PDFEncryptionChCheckBox
        {
            get
            {
                if (null == fPDFEncryptionChCheckBox)
                {
                    fPDFEncryptionChCheckBox = new CheckBox("PDFEncryptionChCheckBox", FileSettingsGroGroup);
                    fPDFEncryptionChCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fPDFEncryptionChCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fPDFEncryptionChCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2BE73595-3642-4f6b-99FB-A3A927448EF7");
                    fPDFEncryptionChCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"PDF Encryption");
                }

                return fPDFEncryptionChCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PDFEncryptionTeText
        {
            get
            {
                if (null == fPDFEncryptionTeText)
                {
                    fPDFEncryptionTeText = new Text("PDFEncryptionTeText", PDFEncryptionChCheckBox);
                    fPDFEncryptionTeText.UIMap.Scope = UIASeachScope.Children;
                    fPDFEncryptionTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPDFEncryptionTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"PDF Encryption");
                }

                return fPDFEncryptionTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group OCRSettingsGrouGroup
        {
            get
            {
                if (null == fOCRSettingsGrouGroup)
                {
                    fOCRSettingsGrouGroup = new Group("OCRSettingsGrouGroup", ScrollViewerPane);
                    fOCRSettingsGrouGroup.UIMap.Scope = UIASeachScope.Children;
                    fOCRSettingsGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fOCRSettingsGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"f14fb312-6955-493b-abce-b0ca5e1f7e26");
                    fOCRSettingsGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OCR Settings");
                }

                return fOCRSettingsGrouGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group MetadataFileSetGroup
        {
            get
            {
                if (null == fMetadataFileSetGroup)
                {
                    fMetadataFileSetGroup = new Group("MetadataFileSetGroup", ScrollViewerPane);
                    fMetadataFileSetGroup.UIMap.Scope = UIASeachScope.Children;
                    fMetadataFileSetGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fMetadataFileSetGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"a73a57d0-5689-44ea-a557-458f45e2ecbc");
                    fMetadataFileSetGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Metadata File Settings");
                }

                return fMetadataFileSetGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MetadataFileSetText
        {
            get
            {
                if (null == fMetadataFileSetText)
                {
                    fMetadataFileSetText = new Text("MetadataFileSetText", MetadataFileSetGroup);
                    fMetadataFileSetText.UIMap.Scope = UIASeachScope.Children;
                    fMetadataFileSetText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fMetadataFileSetText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Metadata File Settings");
                }

                return fMetadataFileSetText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FileFormatText
        {
            get
            {
                if (null == fFileFormatText)
                {
                    fFileFormatText = new Text("FileFormatText", MetadataFileSetGroup);
                    fFileFormatText.UIMap.Scope = UIASeachScope.Children;
                    fFileFormatText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fFileFormatText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"File Format");
                }

                return fFileFormatText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FileFormatTextBText
        {
            get
            {
                if (null == fFileFormatTextBText)
                {
                    fFileFormatTextBText = new Text("FileFormatTextBText", FileFormatText);
                    fFileFormatTextBText.UIMap.Scope = UIASeachScope.Children;
                    fFileFormatTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFileFormatTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"File Format");
                }

                return fFileFormatTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox MetadataFileTypeComboBox
        {
            get
            {
                if (null == fComboBoxde3a789ComboBox)
                {
                    fComboBoxde3a789ComboBox = new ComboBox("MetadataFileTypeCombobox", MetadataFileSetGroup);
                    fComboBoxde3a789ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxde3a789ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxde3a789ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"de3a7899-d743-4d4a-96e0-6755f72467d5");
                }

                return fComboBoxde3a789ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group PromptsGroupBoxGroup
        {
            get
            {
                if (null == fPromptsGroupBoxGroup)
                {
                    fPromptsGroupBoxGroup = new Group("PromptsGroupBoxGroup", ScrollViewerPane);
                    fPromptsGroupBoxGroup.UIMap.Scope = UIASeachScope.Children;
                    fPromptsGroupBoxGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fPromptsGroupBoxGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"dd6a1279-0516-4c4f-8b55-bc46e7599762");
                    fPromptsGroupBoxGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Prompts");
                }

                return fPromptsGroupBoxGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PromptsTextBlocText
        {
            get
            {
                if (null == fPromptsTextBlocText)
                {
                    fPromptsTextBlocText = new Text("PromptsTextBlocText", PromptsGroupBoxGroup);
                    fPromptsTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fPromptsTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPromptsTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Prompts");
                }

                return fPromptsTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public List ListBoxb5fe1936List
        {
            get
            {
                if (null == fListBoxb5fe1936List)
                {
                    fListBoxb5fe1936List = new List("ListBoxb5fe1936List", PromptsGroupBoxGroup);
                    fListBoxb5fe1936List.UIMap.Scope = UIASeachScope.Children;
                    fListBoxb5fe1936List.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBox");
                    fListBoxb5fe1936List.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"b5fe1936-b1ae-4897-bde3-d3b7f0a6a74d");
                }

                return fListBoxb5fe1936List;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button Buttonc73866563Button
        {
            get
            {
                if (null == fButtonc73866563Button)
                {
                    fButtonc73866563Button = new Button("Buttonc73866563Button", PromptsGroupBoxGroup);
                    fButtonc73866563Button.UIMap.Scope = UIASeachScope.Children;
                    fButtonc73866563Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButtonc73866563Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c7386656-330f-46e4-963e-13efabedf039");
                }

                return fButtonc73866563Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup4Image
        {
            get
            {
                if (null == fImageDup4Image)
                {
                    fImageDup4Image = new Image("ImageDup4Image", Buttonc73866563Button);
                    fImageDup4Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup4Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup4Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button Buttonb49ded7f1Button
        {
            get
            {
                if (null == fButtonb49ded7f1Button)
                {
                    fButtonb49ded7f1Button = new Button("Buttonb49ded7f1Button", PromptsGroupBoxGroup);
                    fButtonb49ded7f1Button.UIMap.Scope = UIASeachScope.Children;
                    fButtonb49ded7f1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButtonb49ded7f1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"b49ded7f-1a01-486e-98d6-58b75e664202");
                }

                return fButtonb49ded7f1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup5Image
        {
            get
            {
                if (null == fImageDup5Image)
                {
                    fImageDup5Image = new Image("ImageDup5Image", Buttonb49ded7f1Button);
                    fImageDup5Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup5Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup5Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button AddButtond376aeButton
        {
            get
            {
                if (null == fAddButtond376aeButton)
                {
                    fAddButtond376aeButton = new Button("AddButtond376aeButton", PromptsGroupBoxGroup);
                    fAddButtond376aeButton.UIMap.Scope = UIASeachScope.Children;
                    fAddButtond376aeButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fAddButtond376aeButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d376aeb3-9395-4c35-a167-9d08dd07cb81");
                    fAddButtond376aeButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add...");
                }

                return fAddButtond376aeButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddTextBlockText
        {
            get
            {
                if (null == fAddTextBlockText)
                {
                    fAddTextBlockText = new Text("AddTextBlockText", AddButtond376aeButton);
                    fAddTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fAddTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add...");
                }

                return fAddTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RemoveButton3b2Button
        {
            get
            {
                if (null == fRemoveButton3b2Button)
                {
                    fRemoveButton3b2Button = new Button("RemoveButton3b2Button", PromptsGroupBoxGroup);
                    fRemoveButton3b2Button.UIMap.Scope = UIASeachScope.Children;
                    fRemoveButton3b2Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fRemoveButton3b2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3b24d5a2-6c5a-48ad-818d-e83f1b97058f");
                    fRemoveButton3b2Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Remove");
                }

                return fRemoveButton3b2Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RemoveTextBlockDup0Text
        {
            get
            {
                if (null == fRemoveTextBlockDup0Text)
                {
                    fRemoveTextBlockDup0Text = new Text("RemoveTextBlockDup0Text", RemoveButton3b2Button);
                    fRemoveTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fRemoveTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRemoveTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Remove");
                }

                return fRemoveTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button PropertiesButtoButton
        {
            get
            {
                if (null == fPropertiesButtoButton)
                {
                    fPropertiesButtoButton = new Button("PropertiesButtoButton", PromptsGroupBoxGroup);
                    fPropertiesButtoButton.UIMap.Scope = UIASeachScope.Children;
                    fPropertiesButtoButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fPropertiesButtoButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4412eb6e-7d3d-4ba8-90a7-be955237c74e");
                    fPropertiesButtoButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Properties");
                }

                return fPropertiesButtoButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PropertiesTextBText
        {
            get
            {
                if (null == fPropertiesTextBText)
                {
                    fPropertiesTextBText = new Text("PropertiesTextBText", PropertiesButtoButton);
                    fPropertiesTextBText.UIMap.Scope = UIASeachScope.Children;
                    fPropertiesTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPropertiesTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Properties");
                }

                return fPropertiesTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group cApplicationSpeGroup
        {
            get
            {
                if (null == fcApplicationSpeGroup)
                {
                    fcApplicationSpeGroup = new Group("cApplicationSpeGroup", ScrollViewerPane);
                    fcApplicationSpeGroup.UIMap.Scope = UIASeachScope.Children;
                    fcApplicationSpeGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fcApplicationSpeGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3ECE5554-90A5-4ede-B500-7B5E7A1AA653");
                    fcApplicationSpeGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"[[cApplicationSpecificData]]");
                }

                return fcApplicationSpeGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticScrollBar
        {
            get
            {
                if (null == fScrollBarVerticScrollBar)
                {
                    fScrollBarVerticScrollBar = new ScrollBar("ScrollBarVerticScrollBar", ScrollViewerPane);
                    fScrollBarVerticScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RepeatButtonPARDup0Button
        {
            get
            {
                if (null == fRepeatButtonPARDup0Button)
                {
                    fRepeatButtonPARDup0Button = new Button("RepeatButtonPARDup0Button", ScrollBarVerticScrollBar);
                    fRepeatButtonPARDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fRepeatButtonPARDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RepeatButton");
                    fRepeatButtonPARDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_LineUpButton");
                }

                return fRepeatButtonPARDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RepeatButtonPagDup0Button
        {
            get
            {
                if (null == fRepeatButtonPagDup0Button)
                {
                    fRepeatButtonPagDup0Button = new Button("RepeatButtonPagDup0Button", ScrollBarVerticScrollBar);
                    fRepeatButtonPagDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fRepeatButtonPagDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RepeatButton");
                    fRepeatButtonPagDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PageUp");
                }

                return fRepeatButtonPagDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RepeatButtonPagDup1Button
        {
            get
            {
                if (null == fRepeatButtonPagDup1Button)
                {
                    fRepeatButtonPagDup1Button = new Button("RepeatButtonPagDup1Button", ScrollBarVerticScrollBar);
                    fRepeatButtonPagDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fRepeatButtonPagDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RepeatButton");
                    fRepeatButtonPagDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PageDown");
                }

                return fRepeatButtonPagDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbThumb
        {
            get
            {
                if (null == fThumbThumb)
                {
                    fThumbThumb = new Thumb("ThumbThumb", ScrollBarVerticScrollBar);
                    fThumbThumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbThumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                }

                return fThumbThumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RepeatButtonPARDup1Button
        {
            get
            {
                if (null == fRepeatButtonPARDup1Button)
                {
                    fRepeatButtonPARDup1Button = new Button("RepeatButtonPARDup1Button", ScrollBarVerticScrollBar);
                    fRepeatButtonPARDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fRepeatButtonPARDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RepeatButton");
                    fRepeatButtonPARDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_LineDownButton");
                }

                return fRepeatButtonPARDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoScrollBar)
                {
                    fScrollBarHorizoScrollBar = new ScrollBar("ScrollBarHorizoScrollBar", ScrollViewerPane);
                    fScrollBarHorizoScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar HPDigitalSendinTitleBar
        {
            get
            {
                if (null == fHPDigitalSendinTitleBar)
                {
                    fHPDigitalSendinTitleBar = new TitleBar("HPDigitalSendinTitleBar", HPDigitalSendinWindow);
                    fHPDigitalSendinTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Digital Sending Software Configuration (Server IP Address: 15.77.19.23)");
                }

                return fHPDigitalSendinTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyDup3MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup3MenuBar)
                {
                    fSystemMenuBarSyDup3MenuBar = new MenuBar("SystemMenuBarSyDup3MenuBar", HPDigitalSendinTitleBar);
                    fSystemMenuBarSyDup3MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup3MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyDup3MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyDup3MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1I3XMenuItem
        {
            get
            {
                if (null == fSystemItem1I3XMenuItem)
                {
                    fSystemItem1I3XMenuItem = new MenuItem("SystemItem1I3XMenuItem", SystemMenuBarSyDup3MenuBar);
                    fSystemItem1I3XMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1I3XMenuItem.UIMap.Index = 3;
                    fSystemItem1I3XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1I3XMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1I3XMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MinimizeMinimizDup3Button
        {
            get
            {
                if (null == fMinimizeMinimizDup3Button)
                {
                    fMinimizeMinimizDup3Button = new Button("MinimizeMinimizDup3Button", HPDigitalSendinTitleBar);
                    fMinimizeMinimizDup3Button.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizDup3Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                    fMinimizeMinimizDup3Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                }

                return fMinimizeMinimizDup3Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MaximizeMaximizDup3Button
        {
            get
            {
                if (null == fMaximizeMaximizDup3Button)
                {
                    fMaximizeMaximizDup3Button = new Button("MaximizeMaximizDup3Button", HPDigitalSendinTitleBar);
                    fMaximizeMaximizDup3Button.UIMap.Scope = UIASeachScope.Children;
                    fMaximizeMaximizDup3Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Maximize");
                    fMaximizeMaximizDup3Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximize");
                }

                return fMaximizeMaximizDup3Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseDup3Button
        {
            get
            {
                if (null == fCloseCloseDup3Button)
                {
                    fCloseCloseDup3Button = new Button("CloseCloseDup3Button", HPDigitalSendinTitleBar);
                    fCloseCloseDup3Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup3Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseDup3Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseDup3Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button HelpButtonCB8CFButton
        {
            get
            {
                if (null == fHelpButtonCB8CFButton)
                {
                    fHelpButtonCB8CFButton = new Button("HelpButtonCB8CFButton", HPDigitalSendinWindow);
                    fHelpButtonCB8CFButton.UIMap.Scope = UIASeachScope.Children;
                    fHelpButtonCB8CFButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fHelpButtonCB8CFButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"CB8CF0C3-DFBE-49b8-B09B-03A34F5D4186");
                    fHelpButtonCB8CFButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpButtonCB8CFButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HelpTextBlockDup3Text
        {
            get
            {
                if (null == fHelpTextBlockDup3Text)
                {
                    fHelpTextBlockDup3Text = new Text("HelpTextBlockDup3Text", HelpButtonCB8CFButton);
                    fHelpTextBlockDup3Text.UIMap.Scope = UIASeachScope.Children;
                    fHelpTextBlockDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHelpTextBlockDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpTextBlockDup3Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ApplyButtonButton
        {
            get
            {
                if (null == fApplyButton61E2Button)
                {
                    fApplyButton61E2Button = new Button("ApplyButton61E2Button", HPDigitalSendinWindow);
                    fApplyButton61E2Button.UIMap.Scope = UIASeachScope.Children;
                    fApplyButton61E2Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fApplyButton61E2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"61E2369B-F53B-4662-A361-B3034C4EFF67");
                    fApplyButton61E2Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Apply");
                }

                return fApplyButton61E2Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ApplyTextBlockText
        {
            get
            {
                if (null == fApplyTextBlockText)
                {
                    fApplyTextBlockText = new Text("ApplyTextBlockText", ApplyButtonButton);
                    fApplyTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fApplyTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fApplyTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Apply");
                }

                return fApplyTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButton65CButton
        {
            get
            {
                if (null == fCancelButton65CButton)
                {
                    fCancelButton65CButton = new Button("CancelButton65CButton", HPDigitalSendinWindow);
                    fCancelButton65CButton.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton65CButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButton65CButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"65C76204-7AB5-4681-B7FD-2D8F02DA6D4B");
                    fCancelButton65CButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButton65CButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CancelTextBlockDup3Text
        {
            get
            {
                if (null == fCancelTextBlockDup3Text)
                {
                    fCancelTextBlockDup3Text = new Text("CancelTextBlockDup3Text", CancelButton65CButton);
                    fCancelTextBlockDup3Text.UIMap.Scope = UIASeachScope.Children;
                    fCancelTextBlockDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCancelTextBlockDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelTextBlockDup3Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button OKButtonCC2EF49Button
        {
            get
            {
                if (null == fOKButtonCC2EF49Button)
                {
                    fOKButtonCC2EF49Button = new Button("OKButtonCC2EF49Button", HPDigitalSendinWindow);
                    fOKButtonCC2EF49Button.UIMap.Scope = UIASeachScope.Children;
                    fOKButtonCC2EF49Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButtonCC2EF49Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"CC2EF491-0BD1-4ac5-9D00-AA61A9D6BA0C");
                    fOKButtonCC2EF49Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButtonCC2EF49Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OKTextBlockDup3Text
        {
            get
            {
                if (null == fOKTextBlockDup3Text)
                {
                    fOKTextBlockDup3Text = new Text("OKTextBlockDup3Text", OKButtonCC2EF49Button);
                    fOKTextBlockDup3Text.UIMap.Scope = UIASeachScope.Children;
                    fOKTextBlockDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOKTextBlockDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKTextBlockDup3Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Tab TabControlec0fdTab
        {
            get
            {
                if (null == fTabControlec0fdTab)
                {
                    fTabControlec0fdTab = new Tab("TabControlec0fdTab", HPDigitalSendinWindow);
                    fTabControlec0fdTab.UIMap.Scope = UIASeachScope.Children;
                    fTabControlec0fdTab.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabControl");
                    fTabControlec0fdTab.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ec0fd6cd-2ab8-482f-96a5-d1fa158f38d1");
                }

                return fTabControlec0fdTab;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem WorkflowsTabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup5TabItem)
                {
                    fSystemWindowsCoDup5TabItem = new TabItem("WorkflowsTabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup5TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup5TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup5TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"38feb495-2893-4d8b-8961-31ebc2a3bd56");
                    fSystemWindowsCoDup5TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup5TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text WorkflowsTextmWText
        {
            get
            {
                if (null == fWorkflowsTextmWText)
                {
                    fWorkflowsTextmWText = new Text("WorkflowsTextmWText", WorkflowsTabItem);
                    fWorkflowsTextmWText.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowsTextmWText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fWorkflowsTextmWText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mWorkflowsTabLabel");
                    fWorkflowsTextmWText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflows");
                }

                return fWorkflowsTextmWText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text WorkflowsTextBlDup0Text
        {
            get
            {
                if (null == fWorkflowsTextBlDup0Text)
                {
                    fWorkflowsTextBlDup0Text = new Text("WorkflowsTextBlDup0Text", WorkflowsTextmWText);
                    fWorkflowsTextBlDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowsTextBlDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fWorkflowsTextBlDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflows");
                }

                return fWorkflowsTextBlDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text22D9C34E84CText
        {
            get
            {
                if (null == fText22D9C34E84CText)
                {
                    fText22D9C34E84CText = new Text("Text22D9C34E84CText", WorkflowsTabItem);
                    fText22D9C34E84CText.UIMap.Scope = UIASeachScope.Children;
                    fText22D9C34E84CText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText22D9C34E84CText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"22D9C34E-84C8-4995-AC9E-5B46F8284284");
                    fText22D9C34E84CText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText22D9C34E84CText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextBlockDup1Text
        {
            get
            {
                if (null == fTextBlockDup1Text)
                {
                    fTextBlockDup1Text = new Text("TextBlockDup1Text", Text22D9C34E84CText);
                    fTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextC8D15BD39C8Text
        {
            get
            {
                if (null == fTextC8D15BD39C8Text)
                {
                    fTextC8D15BD39C8Text = new Text("TextC8D15BD39C8Text", WorkflowsTabItem);
                    fTextC8D15BD39C8Text.UIMap.Scope = UIASeachScope.Children;
                    fTextC8D15BD39C8Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fTextC8D15BD39C8Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"C8D15BD3-9C8D-484c-A5E2-309CA8AA6C56");
                    fTextC8D15BD39C8Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fTextC8D15BD39C8Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox EnableWorkflowsCheckBox
        {
            get
            {
                if (null == fEnableWorkflowsCheckBox)
                {
                    fEnableWorkflowsCheckBox = new CheckBox("EnableWorkflowsCheckBox", WorkflowsTabItem);
                    fEnableWorkflowsCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fEnableWorkflowsCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fEnableWorkflowsCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"566318c9-1b59-4da0-a51e-da04be46709f");
                    fEnableWorkflowsCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enable Workflows");
                }

                return fEnableWorkflowsCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group WorkflowsGroupBGroup
        {
            get
            {
                if (null == fWorkflowsGroupBGroup)
                {
                    fWorkflowsGroupBGroup = new Group("WorkflowsGroupBGroup", WorkflowsTabItem);
                    fWorkflowsGroupBGroup.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowsGroupBGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fWorkflowsGroupBGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"31A44099-1E87-4348-992C-66CC0BDED7CE");
                    fWorkflowsGroupBGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflows");
                }

                return fWorkflowsGroupBGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text WorkflowsTextBlDup1Text
        {
            get
            {
                if (null == fWorkflowsTextBlDup1Text)
                {
                    fWorkflowsTextBlDup1Text = new Text("WorkflowsTextBlDup1Text", WorkflowsGroupBGroup);
                    fWorkflowsTextBlDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowsTextBlDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fWorkflowsTextBlDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflows");
                }

                return fWorkflowsTextBlDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox DisplayPromptTeCheckBox
        {
            get
            {
                if (null == fDisplayPromptTeCheckBox)
                {
                    fDisplayPromptTeCheckBox = new CheckBox("DisplayPromptTeCheckBox", WorkflowsGroupBGroup);
                    fDisplayPromptTeCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fDisplayPromptTeCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fDisplayPromptTeCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"EF74004A-9D76-4544-BFCD-9FCE694F91B5");
                    fDisplayPromptTeCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Display Prompt Text");
                }

                return fDisplayPromptTeCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DisplayPromptTeText
        {
            get
            {
                if (null == fDisplayPromptTeText)
                {
                    fDisplayPromptTeText = new Text("DisplayPromptTeText", DisplayPromptTeCheckBox);
                    fDisplayPromptTeText.UIMap.Scope = UIASeachScope.Children;
                    fDisplayPromptTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDisplayPromptTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Display Prompt Text");
                }

                return fDisplayPromptTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button AddGroupButton
        {
            get
            {
                if (null == fButtona1be7942bButton)
                {
                    fButtona1be7942bButton = new Button("AddGroupButton", WorkflowsGroupBGroup);
                    fButtona1be7942bButton.UIMap.Scope = UIASeachScope.Children;
                    fButtona1be7942bButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButtona1be7942bButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"a1be7942-bfe7-4f51-88a8-d3a0b76095b4");
                }

                return fButtona1be7942bButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup6Image
        {
            get
            {
                if (null == fImageDup6Image)
                {
                    fImageDup6Image = new Image("ImageDup6Image", AddGroupButton);
                    fImageDup6Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup6Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup6Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddGroupText
        {
            get
            {
                if (null == fAddGroupText)
                {
                    fAddGroupText = new Text("AddGroupText", AddGroupButton);
                    fAddGroupText.UIMap.Scope = UIASeachScope.Children;
                    fAddGroupText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fAddGroupText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Group...");
                }

                return fAddGroupText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddGroupTextBloText
        {
            get
            {
                if (null == fAddGroupTextBloText)
                {
                    fAddGroupTextBloText = new Text("AddGroupTextBloText", AddGroupText);
                    fAddGroupTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fAddGroupTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddGroupTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Group...");
                }

                return fAddGroupTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button AddMenuNameButton
        {
            get
            {
                if (null == fButton1864d3cfeButton)
                {
                    fButton1864d3cfeButton = new Button("AddMenuNameButton", WorkflowsGroupBGroup);
                    fButton1864d3cfeButton.UIMap.Scope = UIASeachScope.Children;
                    fButton1864d3cfeButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButton1864d3cfeButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1864d3cf-e8a1-4626-81c7-a69b47b8cec9");
                }

                return fButton1864d3cfeButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup7Image
        {
            get
            {
                if (null == fImageDup7Image)
                {
                    fImageDup7Image = new Image("ImageDup7Image", AddMenuNameButton);
                    fImageDup7Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup7Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup7Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddMenuText
        {
            get
            {
                if (null == fAddMenuText)
                {
                    fAddMenuText = new Text("AddMenuText", AddMenuNameButton);
                    fAddMenuText.UIMap.Scope = UIASeachScope.Children;
                    fAddMenuText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fAddMenuText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Menu...");
                }

                return fAddMenuText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddMenuTextBlocText
        {
            get
            {
                if (null == fAddMenuTextBlocText)
                {
                    fAddMenuTextBlocText = new Text("AddMenuTextBlocText", AddMenuText);
                    fAddMenuTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fAddMenuTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddMenuTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Menu...");
                }

                return fAddMenuTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button AddFormButton
        {
            get
            {
                if (null == fButton13d3c30c3Button)
                {
                    fButton13d3c30c3Button = new Button("AddFormButton", WorkflowsGroupBGroup);
                    fButton13d3c30c3Button.UIMap.Scope = UIASeachScope.Children;
                    fButton13d3c30c3Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButton13d3c30c3Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"13d3c30c-382a-43ed-900f-7b6d3f7dc586");
                }

                return fButton13d3c30c3Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup8Image
        {
            get
            {
                if (null == fImageDup8Image)
                {
                    fImageDup8Image = new Image("ImageDup8Image", AddFormButton);
                    fImageDup8Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup8Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup8Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddFormText
        {
            get
            {
                if (null == fAddFormText)
                {
                    fAddFormText = new Text("AddFormText", AddFormButton);
                    fAddFormText.UIMap.Scope = UIASeachScope.Children;
                    fAddFormText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fAddFormText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Form...");
                }

                return fAddFormText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddFormTextBlocText
        {
            get
            {
                if (null == fAddFormTextBlocText)
                {
                    fAddFormTextBlocText = new Text("AddFormTextBlocText", AddFormText);
                    fAddFormTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fAddFormTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddFormTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Form...");
                }

                return fAddFormTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button Buttond508dee64Button
        {
            get
            {
                if (null == fButtond508dee64Button)
                {
                    fButtond508dee64Button = new Button("Buttond508dee64Button", WorkflowsGroupBGroup);
                    fButtond508dee64Button.UIMap.Scope = UIASeachScope.Children;
                    fButtond508dee64Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButtond508dee64Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d508dee6-4a70-4d0c-8ec4-492a34329617");
                }

                return fButtond508dee64Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup9Image
        {
            get
            {
                if (null == fImageDup9Image)
                {
                    fImageDup9Image = new Image("ImageDup9Image", Buttond508dee64Button);
                    fImageDup9Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup9Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup9Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddPromptsText
        {
            get
            {
                if (null == fAddPromptsText)
                {
                    fAddPromptsText = new Text("AddPromptsText", Buttond508dee64Button);
                    fAddPromptsText.UIMap.Scope = UIASeachScope.Children;
                    fAddPromptsText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fAddPromptsText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Prompts...");
                }

                return fAddPromptsText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddPromptsTextBText
        {
            get
            {
                if (null == fAddPromptsTextBText)
                {
                    fAddPromptsTextBText = new Text("AddPromptsTextBText", AddPromptsText);
                    fAddPromptsTextBText.UIMap.Scope = UIASeachScope.Children;
                    fAddPromptsTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddPromptsTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Prompts...");
                }

                return fAddPromptsTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button EditButton252ecButton
        {
            get
            {
                if (null == fEditButton252ecButton)
                {
                    fEditButton252ecButton = new Button("EditButton252ecButton", WorkflowsGroupBGroup);
                    fEditButton252ecButton.UIMap.Scope = UIASeachScope.Children;
                    fEditButton252ecButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fEditButton252ecButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"252ecbbe-c9e3-4f3e-b022-493d53bd6f91");
                    fEditButton252ecButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Edit...");
                }

                return fEditButton252ecButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EditTextBlockDup1Text
        {
            get
            {
                if (null == fEditTextBlockDup1Text)
                {
                    fEditTextBlockDup1Text = new Text("EditTextBlockDup1Text", EditButton252ecButton);
                    fEditTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fEditTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEditTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Edit...");
                }

                return fEditTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RemoveButton148Button
        {
            get
            {
                if (null == fRemoveButton148Button)
                {
                    fRemoveButton148Button = new Button("RemoveButton148Button", WorkflowsGroupBGroup);
                    fRemoveButton148Button.UIMap.Scope = UIASeachScope.Children;
                    fRemoveButton148Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fRemoveButton148Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1485788e-38b6-4b04-b6f1-0d10f55e0749");
                    fRemoveButton148Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Remove");
                }

                return fRemoveButton148Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RemoveTextBlockDup1Text
        {
            get
            {
                if (null == fRemoveTextBlockDup1Text)
                {
                    fRemoveTextBlockDup1Text = new Text("RemoveTextBlockDup1Text", RemoveButton148Button);
                    fRemoveTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fRemoveTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRemoveTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Remove");
                }

                return fRemoveTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Tree TreeViewd9ec713Tree
        {
            get
            {
                if (null == fTreeViewd9ec713Tree)
                {
                    fTreeViewd9ec713Tree = new Tree("TreeViewd9ec713Tree", WorkflowsGroupBGroup);
                    fTreeViewd9ec713Tree.UIMap.Scope = UIASeachScope.Children;
                    fTreeViewd9ec713Tree.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TreeView");
                    fTreeViewd9ec713Tree.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d9ec7133-aa0e-4589-828b-dba70b9746b8");
                }

                return fTreeViewd9ec713Tree;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TreeItem GroupTreeItem
        {
            get
            {
                if (null == fCOMMONMFPGROUPTTreeItem)
                {
                    fCOMMONMFPGROUPTTreeItem = new TreeItem("GroupTreeItem", TreeViewd9ec713Tree);
                    fCOMMONMFPGROUPTTreeItem.UIMap.Scope = UIASeachScope.Children;
                    fCOMMONMFPGROUPTTreeItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TreeViewItem");
                    fCOMMONMFPGROUPTTreeItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, _groupName);
                }

                return fCOMMONMFPGROUPTTreeItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ButtonExpanderDup0Button
        {
            get
            {
                if (null == fButtonExpanderDup0Button)
                {
                    fButtonExpanderDup0Button = new Button("ButtonExpanderDup0Button", GroupTreeItem);
                    fButtonExpanderDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fButtonExpanderDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButtonExpanderDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Expander");
                }

                return fButtonExpanderDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup10Image
        {
            get
            {
                if (null == fImageDup10Image)
                {
                    fImageDup10Image = new Image("ImageDup10Image", GroupTreeItem);
                    fImageDup10Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup10Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup10Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GroupTreeText
        {
            get
            {
                if (null == fCOMMONMFPGROUPTText)
                {
                    fCOMMONMFPGROUPTText = new Text("GroupTreeText", GroupTreeItem);
                    fCOMMONMFPGROUPTText.UIMap.Scope = UIASeachScope.Children;
                    fCOMMONMFPGROUPTText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCOMMONMFPGROUPTText.UIMap.SearchProperties.Add(UIASearchProperty.Name, _groupName);
                }

                return fCOMMONMFPGROUPTText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TreeItem STFTreeViewItemTreeItem
        {
            get
            {
                if (null == fSTFTreeViewItemTreeItem)
                {
                    fSTFTreeViewItemTreeItem = new TreeItem("STFTreeViewItemTreeItem", GroupTreeItem);
                    fSTFTreeViewItemTreeItem.UIMap.Scope = UIASeachScope.Children;
                    fSTFTreeViewItemTreeItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TreeViewItem");
                    fSTFTreeViewItemTreeItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"STF");
                }

                return fSTFTreeViewItemTreeItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ButtonExpanderDup1Button
        {
            get
            {
                if (null == fButtonExpanderDup1Button)
                {
                    fButtonExpanderDup1Button = new Button("ButtonExpanderDup1Button", STFTreeViewItemTreeItem);
                    fButtonExpanderDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fButtonExpanderDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButtonExpanderDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Expander");
                }

                return fButtonExpanderDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup11Image
        {
            get
            {
                if (null == fImageDup11Image)
                {
                    fImageDup11Image = new Image("ImageDup11Image", STFTreeViewItemTreeItem);
                    fImageDup11Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup11Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup11Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text STFTextBlockText
        {
            get
            {
                if (null == fSTFTextBlockText)
                {
                    fSTFTextBlockText = new Text("STFTextBlockText", STFTreeViewItemTreeItem);
                    fSTFTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fSTFTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSTFTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"STF");
                }

                return fSTFTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TreeItem MenuTreeViewItem
        {
            get
            {
                if (null == fSTFTESTTreeVieTreeItem)
                {
                    fSTFTESTTreeVieTreeItem = new TreeItem("MenuTreeViewItem", GroupTreeItem);
                    fSTFTESTTreeVieTreeItem.UIMap.Scope = UIASeachScope.Children;
                    fSTFTESTTreeVieTreeItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TreeViewItem");
                    fSTFTESTTreeVieTreeItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, _menuName);
                }

                return fSTFTESTTreeVieTreeItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ButtonExpanderDup2Button
        {
            get
            {
                if (null == fButtonExpanderDup2Button)
                {
                    fButtonExpanderDup2Button = new Button("ButtonExpanderDup2Button", MenuTreeViewItem);
                    fButtonExpanderDup2Button.UIMap.Scope = UIASeachScope.Children;
                    fButtonExpanderDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButtonExpanderDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Expander");
                }

                return fButtonExpanderDup2Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup12Image
        {
            get
            {
                if (null == fImageDup12Image)
                {
                    fImageDup12Image = new Image("ImageDup12Image", MenuTreeViewItem);
                    fImageDup12Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup12Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup12Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MenuTextBlockText
        {
            get
            {
                if (null == fSTFTESTTextBloText)
                {
                    fSTFTESTTextBloText = new Text("MenuTextBlockText", MenuTreeViewItem);
                    fSTFTESTTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fSTFTESTTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSTFTESTTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, _menuName);
                }

                return fSTFTESTTextBloText;
            }
        }
       
        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TreeItem FormNameTreeItem
        {
            get
            {
                if (null == fSharepointOCRTrTreeItem)
                {
                    fSharepointOCRTrTreeItem = new TreeItem("FormNameTreeItem", MenuTreeViewItem);
                    fSharepointOCRTrTreeItem.UIMap.Scope = UIASeachScope.Children;
                    fSharepointOCRTrTreeItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TreeViewItem");
                    fSharepointOCRTrTreeItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, _formName);
                }

                return fSharepointOCRTrTreeItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ButtonExpanderDup7Button
        {
            get
            {
                if (null == fButtonExpanderDup7Button)
                {
                    fButtonExpanderDup7Button = new Button("ButtonExpanderDup7Button", FormNameTreeItem);
                    fButtonExpanderDup7Button.UIMap.Scope = UIASeachScope.Children;
                    fButtonExpanderDup7Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButtonExpanderDup7Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Expander");
                }

                return fButtonExpanderDup7Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image Image6C67385BE4Dup3Image
        {
            get
            {
                if (null == fImage6C67385BE4Dup3Image)
                {
                    fImage6C67385BE4Dup3Image = new Image("Image6C67385BE4Dup3Image", FormNameTreeItem);
                    fImage6C67385BE4Dup3Image.UIMap.Scope = UIASeachScope.Children;
                    fImage6C67385BE4Dup3Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImage6C67385BE4Dup3Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6C67385B-E43F-4ec0-B879-4FE51625A588");
                }

                return fImage6C67385BE4Dup3Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SharepointOCRTeText
        {
            get
            {
                if (null == fSharepointOCRTeText)
                {
                    fSharepointOCRTeText = new Text("SharepointOCRTeText", FormNameTreeItem);
                    fSharepointOCRTeText.UIMap.Scope = UIASeachScope.Children;
                    fSharepointOCRTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSharepointOCRTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, _formName);
                }

                return fSharepointOCRTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxa69127a9Edit
        {
            get
            {
                if (null == fTextBoxa69127a9Edit)
                {
                    fTextBoxa69127a9Edit = new Edit("MenuNameEdit", WorkflowMenuWinWindow);
                    fTextBoxa69127a9Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxa69127a9Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxa69127a9Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"a69127a9-dd59-49f5-a0ac-54fc315ab41a");
                }

                return fTextBoxa69127a9Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button OKButton8227078Button
        {
            get
            {
                if (null == fOKButton8227078Button)
                {
                    fOKButton8227078Button = new Button("MenuNameOKButton", WorkflowMenuWinWindow);
                    fOKButton8227078Button.UIMap.Scope = UIASeachScope.Children;
                    fOKButton8227078Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButton8227078Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8227078c-3aac-4655-9b24-08630c95d96d");
                    fOKButton8227078Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButton8227078Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OKTextBlockDup4Text
        {
            get
            {
                if (null == fOKTextBlockDup4Text)
                {
                    fOKTextBlockDup4Text = new Text("OKTextBlockDup4Text", OKButton8227078Button);
                    fOKTextBlockDup4Text.UIMap.Scope = UIASeachScope.Children;
                    fOKTextBlockDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOKTextBlockDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKTextBlockDup4Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButtoncd4Button
        {
            get
            {
                if (null == fCancelButtoncd4Button)
                {
                    fCancelButtoncd4Button = new Button("CancelButtoncd4Button", WorkflowMenuWinWindow);
                    fCancelButtoncd4Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButtoncd4Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButtoncd4Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cd49fd31-9545-489f-86d3-3e2115434151");
                    fCancelButtoncd4Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButtoncd4Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CancelTextBlockDup4Text
        {
            get
            {
                if (null == fCancelTextBlockDup4Text)
                {
                    fCancelTextBlockDup4Text = new Text("CancelTextBlockDup4Text", CancelButtoncd4Button);
                    fCancelTextBlockDup4Text.UIMap.Scope = UIASeachScope.Children;
                    fCancelTextBlockDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCancelTextBlockDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelTextBlockDup4Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button HelpButtonc8aaeButton
        {
            get
            {
                if (null == fHelpButtonc8aaeButton)
                {
                    fHelpButtonc8aaeButton = new Button("HelpButtonc8aaeButton", WorkflowMenuWinWindow);
                    fHelpButtonc8aaeButton.UIMap.Scope = UIASeachScope.Children;
                    fHelpButtonc8aaeButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fHelpButtonc8aaeButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c8aae5f5-da35-431d-95e8-f53c2772503d");
                    fHelpButtonc8aaeButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpButtonc8aaeButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HelpTextBlockDup4Text
        {
            get
            {
                if (null == fHelpTextBlockDup4Text)
                {
                    fHelpTextBlockDup4Text = new Text("HelpTextBlockDup4Text", HelpButtonc8aaeButton);
                    fHelpTextBlockDup4Text.UIMap.Scope = UIASeachScope.Children;
                    fHelpTextBlockDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHelpTextBlockDup4Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpTextBlockDup4Text;
            }
        }

        //CR-2625
        /// <summary>
        /// Backing field for HPDigitalSendinDup1Window property
        /// </summary>
        private Window fHPDigitalSendinDup1Window;

        /// <summary>
        /// Backing field for OKButtonAE4B0C6Button property
        /// </summary>
        private Button fOKButtonAE4B0C6Button;


        /// <summary>
        /// Backing field for HPDigitalSendinDup0Window property
        /// </summary>
        private Window fHPDigitalSendinDup0Window;

        /// <summary>
        /// Gets Reference to HPDigitalSendinDup0Window
        /// </summary>
        public Window HPDigitalSendinDup0Window
        {
            get
            {
                if (null == fHPDigitalSendinDup0Window)
                {
                    fHPDigitalSendinDup0Window = new Window("HPDigitalSendinDup0Window", Desktop);
                    fHPDigitalSendinDup0Window.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinDup0Window.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalSendinDup0Window.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Digital Sending Software Configuration (Server IP Address: 15.75.36.123)");
                    fHPDigitalSendinDup0Window.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AB81453F-68AD-4243-ACA8-B4D9362C4ED4");
                }

                return fHPDigitalSendinDup0Window;
            }
        }

        /// <summary>
        /// Gets Reference to WorkflowFormWinWindow
        /// </summary>
        public Window WorkflowFormWinWindow
        {
            get
            {
                if (null == fWorkflowFormWinWindow)
                {
                    fWorkflowFormWinWindow = new Window("WorkflowFormWinWindow", HPDigitalSendinDup0Window);
                    fWorkflowFormWinWindow.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowFormWinWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fWorkflowFormWinWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflow Form");
                    fWorkflowFormWinWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"95C39EA4-FEBF-4b92-95B0-3BFC6A8113CA");
                }

                return fWorkflowFormWinWindow;
            }
        }
        /// <summary>
        /// Gets Reference to HPDigitalSendinDup1Window
        /// </summary>
        public Window HPDigitalSendinDup1Window
        {
            get
            {
                if (null == fHPDigitalSendinDup1Window)
                {
                    fHPDigitalSendinDup1Window = new Window("HPDigitalSendinDup1Window", WorkflowFormWinWindow);
                    fHPDigitalSendinDup1Window.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinDup1Window.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalSendinDup1Window.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Digital Sending Software");
                    fHPDigitalSendinDup1Window.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"336E3250-8749-475d-952F-E36223E36750");
                }

                return fHPDigitalSendinDup1Window;
            }
        }


        /// <summary>
        /// Gets Reference to OKButtonAE4B0C6Button
        /// </summary>
        public Button OKButtonAE4B0C6Button
        {
            get
            {
                if (null == fOKButtonAE4B0C6Button)
                {
                    fOKButtonAE4B0C6Button = new Button("OKButtonAE4B0C6Button", HPDigitalSendinDup1Window);
                    fOKButtonAE4B0C6Button.UIMap.Scope = UIASeachScope.Children;
                    fOKButtonAE4B0C6Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButtonAE4B0C6Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                    fOKButtonAE4B0C6Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AE4B0C61-2DEE-4974-B517-4A1388A3F4CC");
                }

                return fOKButtonAE4B0C6Button;
            }
        }

        /// <summary>
        /// Gets Reference to TextBox85726F33Edit
        /// </summary>
        public Edit TextBox85726F33Edit
        {
            get
            {
                if (null == fTextBox85726F33Edit)
                {
                    fTextBox85726F33Edit = new Edit("TextBox85726F33Edit", TheoperationwasPane);
                    fTextBox85726F33Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox85726F33Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox85726F33Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"85726F33-6F14-468f-BE13-FE6BFDDBC9C4");
                }

                return fTextBox85726F33Edit;
            }
        }

        /// <summary>
        /// Gets Reference to TheoperationwasPane
        /// </summary>
        public Pane TheoperationwasPane
        {
            get
            {
                if (null == fTheoperationwasPane)
                {
                    fTheoperationwasPane = new Pane("TheoperationwasPane", HPDigitalSendinDup1Window);
                    fTheoperationwasPane.UIMap.Scope = UIASeachScope.Children;
                    fTheoperationwasPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fTheoperationwasPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"The operation was completed successfully.");
                    fTheoperationwasPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mMessageScrollViewer");
                }

                return fTheoperationwasPane;
            }
        }
    }
}

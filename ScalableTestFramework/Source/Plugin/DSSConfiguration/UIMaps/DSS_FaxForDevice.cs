//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------

namespace HP.ScalableTest.Plugin.DSSConfiguration.UIMaps
{
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class DSS_FaxForDevice
    {
        /// <summary>
        /// Backing field for HPDigitalSendinWindow property
        /// </summary>
        private Window fHPDigitalSendinWindow;

        /// <summary>
        /// Backing field for ConfigureDeviceWindow property
        /// </summary>
        private Window fConfigureDeviceWindow;

        /// <summary>
        /// Backing field for PopupWindow property
        /// </summary>
        private Window fPopupWindow;

        /// <summary>
        /// Backing field for ConfigureDeviceWindow property
        /// </summary>
        private Window fWindow336E32508Window;

        /// <summary>
        /// Backing field for ConfigureDeviceWindow property
        /// </summary>
        private Button fYesButtonAE4B0CButton;

        /// <summary>
        /// Backing field for ConfigureDeviceWindow property
        /// </summary>
        private Button fNoButtonF5DCA28Button;

        /// <summary>
        /// Backing field for ScrollViewerDroPane property
        /// </summary>
        private Pane fScrollViewerDroPane;

        /// <summary>
        /// Backing field for NoneListBoxItemDup0ListItem property
        /// </summary>
        private ListItem fNoneListBoxItemDup0ListItem;

        /// <summary>
        /// Backing field for NoneTextBlockText property
        /// </summary>
        private Text fNoneTextBlockText;

        /// <summary>
        /// Backing field for HPDigitalSendinDup1Window property
        /// </summary>
        private Window fHPDigitalSendinDup1Window;

        /// <summary>
        /// Backing field for OKButtonAE4B0C6Button property
        /// </summary>
        private Button fOKButtonAE4B0C6Button;

        /// <summary>
        /// Backing field for ArgentinaListBoDup0ListItem property
        /// </summary>
        private ListItem fArgentinaListBoDup0ListItem;

        /// <summary>
        /// Backing field for ArgentinaTextBlText property
        /// </summary>
        private Text fArgentinaTextBlText;

        /// <summary>
        /// Backing field for AustraliaListBoDup0ListItem property
        /// </summary>
        private ListItem fAustraliaListBoDup0ListItem;

        /// <summary>
        /// Backing field for AustraliaTextBlText property
        /// </summary>
        private Text fAustraliaTextBlText;

        /// <summary>
        /// Backing field for AustriaListBoxIDup0ListItem property
        /// </summary>
        private ListItem fAustriaListBoxIDup0ListItem;

        /// <summary>
        /// Backing field for AustriaTextBlocText property
        /// </summary>
        private Text fAustriaTextBlocText;

        /// <summary>
        /// Backing field for BelarusListBoxIDup0ListItem property
        /// </summary>
        private ListItem fBelarusListBoxIDup0ListItem;

        /// <summary>
        /// Backing field for BelarusTextBlocText property
        /// </summary>
        private Text fBelarusTextBlocText;

        /// <summary>
        /// Backing field for BelgiumListBoxIDup0ListItem property
        /// </summary>
        private ListItem fBelgiumListBoxIDup0ListItem;

        /// <summary>
        /// Backing field for BelgiumTextBlocText property
        /// </summary>
        private Text fBelgiumTextBlocText;

        /// <summary>
        /// Backing field for BrazilListBoxItDup0ListItem property
        /// </summary>
        private ListItem fBrazilListBoxItDup0ListItem;

        /// <summary>
        /// Backing field for BrazilTextBlockText property
        /// </summary>
        private Text fBrazilTextBlockText;

        /// <summary>
        /// Backing field for BulgariaListBoxDup0ListItem property
        /// </summary>
        private ListItem fBulgariaListBoxDup0ListItem;

        /// <summary>
        /// Backing field for BulgariaTextBloText property
        /// </summary>
        private Text fBulgariaTextBloText;

        /// <summary>
        /// Backing field for CanadaListBoxItDup0ListItem property
        /// </summary>
        private ListItem fCanadaListBoxItDup0ListItem;

        /// <summary>
        /// Backing field for CanadaTextBlockText property
        /// </summary>
        private Text fCanadaTextBlockText;

        /// <summary>
        /// Backing field for ChileListBoxIteDup0ListItem property
        /// </summary>
        private ListItem fChileListBoxIteDup0ListItem;

        /// <summary>
        /// Backing field for ChileTextBlockText property
        /// </summary>
        private Text fChileTextBlockText;

        /// <summary>
        /// Backing field for CroatiaListBoxIDup0ListItem property
        /// </summary>
        private ListItem fCroatiaListBoxIDup0ListItem;

        /// <summary>
        /// Backing field for CroatiaTextBlocText property
        /// </summary>
        private Text fCroatiaTextBlocText;

        /// <summary>
        /// Backing field for CzechRepublicLiDup0ListItem property
        /// </summary>
        private ListItem fCzechRepublicLiDup0ListItem;

        /// <summary>
        /// Backing field for CzechRepublicTeText property
        /// </summary>
        private Text fCzechRepublicTeText;

        /// <summary>
        /// Backing field for ChinaListBoxIteDup0ListItem property
        /// </summary>
        private ListItem fChinaListBoxIteDup0ListItem;

        /// <summary>
        /// Backing field for ChinaTextBlockText property
        /// </summary>
        private Text fChinaTextBlockText;

        /// <summary>
        /// Backing field for DenmarkListBoxIDup0ListItem property
        /// </summary>
        private ListItem fDenmarkListBoxIDup0ListItem;

        /// <summary>
        /// Backing field for DenmarkTextBlocText property
        /// </summary>
        private Text fDenmarkTextBlocText;

        /// <summary>
        /// Backing field for EstoniaListBoxIDup0ListItem property
        /// </summary>
        private ListItem fEstoniaListBoxIDup0ListItem;

        /// <summary>
        /// Backing field for EstoniaTextBlocText property
        /// </summary>
        private Text fEstoniaTextBlocText;

        /// <summary>
        /// Backing field for FinlandListBoxIDup0ListItem property
        /// </summary>
        private ListItem fFinlandListBoxIDup0ListItem;

        /// <summary>
        /// Backing field for FinlandTextBlocText property
        /// </summary>
        private Text fFinlandTextBlocText;

        /// <summary>
        /// Backing field for FranceListBoxItDup0ListItem property
        /// </summary>
        private ListItem fFranceListBoxItDup0ListItem;

        /// <summary>
        /// Backing field for FranceTextBlockText property
        /// </summary>
        private Text fFranceTextBlockText;

        /// <summary>
        /// Backing field for GermanyListBoxIDup0ListItem property
        /// </summary>
        private ListItem fGermanyListBoxIDup0ListItem;

        /// <summary>
        /// Backing field for GermanyTextBlocText property
        /// </summary>
        private Text fGermanyTextBlocText;

        /// <summary>
        /// Backing field for GreeceListBoxItDup0ListItem property
        /// </summary>
        private ListItem fGreeceListBoxItDup0ListItem;

        /// <summary>
        /// Backing field for GreeceTextBlockText property
        /// </summary>
        private Text fGreeceTextBlockText;

        /// <summary>
        /// Backing field for HongKongSARListDup0ListItem property
        /// </summary>
        private ListItem fHongKongSARListDup0ListItem;

        /// <summary>
        /// Backing field for HongKongSARTextText property
        /// </summary>
        private Text fHongKongSARTextText;

        /// <summary>
        /// Backing field for HungaryListBoxIDup0ListItem property
        /// </summary>
        private ListItem fHungaryListBoxIDup0ListItem;

        /// <summary>
        /// Backing field for HungaryTextBlocText property
        /// </summary>
        private Text fHungaryTextBlocText;

        /// <summary>
        /// Backing field for IcelandListBoxIDup0ListItem property
        /// </summary>
        private ListItem fIcelandListBoxIDup0ListItem;

        /// <summary>
        /// Backing field for IcelandTextBlocText property
        /// </summary>
        private Text fIcelandTextBlocText;

        /// <summary>
        /// Backing field for IndiaListBoxIteDup0ListItem property
        /// </summary>
        private ListItem fIndiaListBoxIteDup0ListItem;

        /// <summary>
        /// Backing field for IndiaTextBlockText property
        /// </summary>
        private Text fIndiaTextBlockText;

        /// <summary>
        /// Backing field for IndonesiaListBoDup0ListItem property
        /// </summary>
        private ListItem fIndonesiaListBoDup0ListItem;

        /// <summary>
        /// Backing field for IndonesiaTextBlText property
        /// </summary>
        private Text fIndonesiaTextBlText;

        /// <summary>
        /// Backing field for IrelandListBoxIDup0ListItem property
        /// </summary>
        private ListItem fIrelandListBoxIDup0ListItem;

        /// <summary>
        /// Backing field for IrelandTextBlocText property
        /// </summary>
        private Text fIrelandTextBlocText;

        /// <summary>
        /// Backing field for IsraelListBoxItDup0ListItem property
        /// </summary>
        private ListItem fIsraelListBoxItDup0ListItem;

        /// <summary>
        /// Backing field for IsraelTextBlockText property
        /// </summary>
        private Text fIsraelTextBlockText;

        /// <summary>
        /// Backing field for ItalyListBoxIteDup0ListItem property
        /// </summary>
        private ListItem fItalyListBoxIteDup0ListItem;

        /// <summary>
        /// Backing field for ItalyTextBlockText property
        /// </summary>
        private Text fItalyTextBlockText;

        /// <summary>
        /// Backing field for JapanListBoxIteDup0ListItem property
        /// </summary>
        private ListItem fJapanListBoxIteDup0ListItem;

        /// <summary>
        /// Backing field for JapanTextBlockText property
        /// </summary>
        private Text fJapanTextBlockText;

        /// <summary>
        /// Backing field for KoreaListBoxIteDup0ListItem property
        /// </summary>
        private ListItem fKoreaListBoxIteDup0ListItem;

        /// <summary>
        /// Backing field for KoreaTextBlockText property
        /// </summary>
        private Text fKoreaTextBlockText;

        /// <summary>
        /// Backing field for LatviaListBoxItDup0ListItem property
        /// </summary>
        private ListItem fLatviaListBoxItDup0ListItem;

        /// <summary>
        /// Backing field for LatviaTextBlockText property
        /// </summary>
        private Text fLatviaTextBlockText;

        /// <summary>
        /// Backing field for LiechtensteinLiDup0ListItem property
        /// </summary>
        private ListItem fLiechtensteinLiDup0ListItem;

        /// <summary>
        /// Backing field for LiechtensteinTeText property
        /// </summary>
        private Text fLiechtensteinTeText;

        /// <summary>
        /// Backing field for LithuaniaListBoDup0ListItem property
        /// </summary>
        private ListItem fLithuaniaListBoDup0ListItem;

        /// <summary>
        /// Backing field for LithuaniaTextBlText property
        /// </summary>
        private Text fLithuaniaTextBlText;

        /// <summary>
        /// Backing field for LuxembourgListBDup0ListItem property
        /// </summary>
        private ListItem fLuxembourgListBDup0ListItem;

        /// <summary>
        /// Backing field for LuxembourgTextBText property
        /// </summary>
        private Text fLuxembourgTextBText;

        /// <summary>
        /// Backing field for MalaysiaListBoxDup0ListItem property
        /// </summary>
        private ListItem fMalaysiaListBoxDup0ListItem;

        /// <summary>
        /// Backing field for MalaysiaTextBloText property
        /// </summary>
        private Text fMalaysiaTextBloText;

        /// <summary>
        /// Backing field for MexicoListBoxItDup0ListItem property
        /// </summary>
        private ListItem fMexicoListBoxItDup0ListItem;

        /// <summary>
        /// Backing field for MexicoTextBlockText property
        /// </summary>
        private Text fMexicoTextBlockText;

        /// <summary>
        /// Backing field for MoroccoListBoxIDup0ListItem property
        /// </summary>
        private ListItem fMoroccoListBoxIDup0ListItem;

        /// <summary>
        /// Backing field for MoroccoTextBlocText property
        /// </summary>
        private Text fMoroccoTextBlocText;

        /// <summary>
        /// Backing field for NetherlandsListDup0ListItem property
        /// </summary>
        private ListItem fNetherlandsListDup0ListItem;

        /// <summary>
        /// Backing field for NetherlandsTextText property
        /// </summary>
        private Text fNetherlandsTextText;

        /// <summary>
        /// Backing field for NewZealandListBDup0ListItem property
        /// </summary>
        private ListItem fNewZealandListBDup0ListItem;

        /// <summary>
        /// Backing field for NewZealandTextBText property
        /// </summary>
        private Text fNewZealandTextBText;

        /// <summary>
        /// Backing field for NorwayListBoxItDup0ListItem property
        /// </summary>
        private ListItem fNorwayListBoxItDup0ListItem;

        /// <summary>
        /// Backing field for NorwayTextBlockText property
        /// </summary>
        private Text fNorwayTextBlockText;

        /// <summary>
        /// Backing field for PakistanListBoxDup0ListItem property
        /// </summary>
        private ListItem fPakistanListBoxDup0ListItem;

        /// <summary>
        /// Backing field for PakistanTextBloText property
        /// </summary>
        private Text fPakistanTextBloText;

        /// <summary>
        /// Backing field for PeruListBoxItemDup0ListItem property
        /// </summary>
        private ListItem fPeruListBoxItemDup0ListItem;

        /// <summary>
        /// Backing field for PeruTextBlockText property
        /// </summary>
        private Text fPeruTextBlockText;

        /// <summary>
        /// Backing field for PhilippinesListDup0ListItem property
        /// </summary>
        private ListItem fPhilippinesListDup0ListItem;

        /// <summary>
        /// Backing field for PhilippinesTextText property
        /// </summary>
        private Text fPhilippinesTextText;

        /// <summary>
        /// Backing field for PolandListBoxItDup0ListItem property
        /// </summary>
        private ListItem fPolandListBoxItDup0ListItem;

        /// <summary>
        /// Backing field for PolandTextBlockText property
        /// </summary>
        private Text fPolandTextBlockText;

        /// <summary>
        /// Backing field for PortugalListBoxDup0ListItem property
        /// </summary>
        private ListItem fPortugalListBoxDup0ListItem;

        /// <summary>
        /// Backing field for PortugalTextBloText property
        /// </summary>
        private Text fPortugalTextBloText;

        /// <summary>
        /// Backing field for RomaniaListBoxIDup0ListItem property
        /// </summary>
        private ListItem fRomaniaListBoxIDup0ListItem;

        /// <summary>
        /// Backing field for RomaniaTextBlocText property
        /// </summary>
        private Text fRomaniaTextBlocText;

        /// <summary>
        /// Backing field for RussiaListBoxItDup0ListItem property
        /// </summary>
        private ListItem fRussiaListBoxItDup0ListItem;

        /// <summary>
        /// Backing field for RussiaTextBlockText property
        /// </summary>
        private Text fRussiaTextBlockText;

        /// <summary>
        /// Backing field for SingaporeListBoDup0ListItem property
        /// </summary>
        private ListItem fSingaporeListBoDup0ListItem;

        /// <summary>
        /// Backing field for SingaporeTextBlText property
        /// </summary>
        private Text fSingaporeTextBlText;

        /// <summary>
        /// Backing field for SlovakiaListBoxDup0ListItem property
        /// </summary>
        private ListItem fSlovakiaListBoxDup0ListItem;

        /// <summary>
        /// Backing field for SlovakiaTextBloText property
        /// </summary>
        private Text fSlovakiaTextBloText;

        /// <summary>
        /// Backing field for SloveniaListBoxDup0ListItem property
        /// </summary>
        private ListItem fSloveniaListBoxDup0ListItem;

        /// <summary>
        /// Backing field for SloveniaTextBloText property
        /// </summary>
        private Text fSloveniaTextBloText;

        /// <summary>
        /// Backing field for SouthAfricaListDup0ListItem property
        /// </summary>
        private ListItem fSouthAfricaListDup0ListItem;

        /// <summary>
        /// Backing field for SouthAfricaTextText property
        /// </summary>
        private Text fSouthAfricaTextText;

        /// <summary>
        /// Backing field for SpainListBoxIteDup0ListItem property
        /// </summary>
        private ListItem fSpainListBoxIteDup0ListItem;

        /// <summary>
        /// Backing field for SpainTextBlockText property
        /// </summary>
        private Text fSpainTextBlockText;

        /// <summary>
        /// Backing field for SriLankaListBoxDup0ListItem property
        /// </summary>
        private ListItem fSriLankaListBoxDup0ListItem;

        /// <summary>
        /// Backing field for SriLankaTextBloText property
        /// </summary>
        private Text fSriLankaTextBloText;

        /// <summary>
        /// Backing field for SwedenListBoxItDup0ListItem property
        /// </summary>
        private ListItem fSwedenListBoxItDup0ListItem;

        /// <summary>
        /// Backing field for SwedenTextBlockText property
        /// </summary>
        private Text fSwedenTextBlockText;

        /// <summary>
        /// Backing field for SwitzerlandListDup0ListItem property
        /// </summary>
        private ListItem fSwitzerlandListDup0ListItem;

        /// <summary>
        /// Backing field for SwitzerlandTextText property
        /// </summary>
        private Text fSwitzerlandTextText;

        /// <summary>
        /// Backing field for TaiwanListBoxItDup0ListItem property
        /// </summary>
        private ListItem fTaiwanListBoxItDup0ListItem;

        /// <summary>
        /// Backing field for TaiwanTextBlockText property
        /// </summary>
        private Text fTaiwanTextBlockText;

        /// <summary>
        /// Backing field for ThailandListBoxDup0ListItem property
        /// </summary>
        private ListItem fThailandListBoxDup0ListItem;

        /// <summary>
        /// Backing field for ThailandTextBloText property
        /// </summary>
        private Text fThailandTextBloText;

        /// <summary>
        /// Backing field for TurkeyListBoxItDup0ListItem property
        /// </summary>
        private ListItem fTurkeyListBoxItDup0ListItem;

        /// <summary>
        /// Backing field for TurkeyTextBlockText property
        /// </summary>
        private Text fTurkeyTextBlockText;

        /// <summary>
        /// Backing field for UkraineListBoxIDup0ListItem property
        /// </summary>
        private ListItem fUkraineListBoxIDup0ListItem;

        /// <summary>
        /// Backing field for UkraineTextBlocText property
        /// </summary>
        private Text fUkraineTextBlocText;

        /// <summary>
        /// Backing field for UnitedKingdomLiDup0ListItem property
        /// </summary>
        private ListItem fUnitedKingdomLiDup0ListItem;

        /// <summary>
        /// Backing field for UnitedKingdomTeText property
        /// </summary>
        private Text fUnitedKingdomTeText;

        /// <summary>
        /// Backing field for UnitedStatesLisDup0ListItem property
        /// </summary>
        private ListItem fUnitedStatesLisDup0ListItem;

        /// <summary>
        /// Backing field for UnitedStatesTexText property
        /// </summary>
        private Text fUnitedStatesTexText;

        /// <summary>
        /// Backing field for VietnamListBoxIDup0ListItem property
        /// </summary>
        private ListItem fVietnamListBoxIDup0ListItem;

        /// <summary>
        /// Backing field for VietnamTextBlocText property
        /// </summary>
        private Text fVietnamTextBlocText;

        /// <summary>
        /// Backing field for ScrollBarVerticDup0ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup0ScrollBar;

        /// <summary>
        /// Backing field for RepeatButtonLinDup0Button property
        /// </summary>
        private Button fRepeatButtonLinDup0Button;

        /// <summary>
        /// Backing field for RepeatButtonPagDup0Button property
        /// </summary>
        private Button fRepeatButtonPagDup0Button;

        /// <summary>
        /// Backing field for RepeatButtonPagDup1Button property
        /// </summary>
        private Button fRepeatButtonPagDup1Button;

        /// <summary>
        /// Backing field for ThumbDup0Thumb property
        /// </summary>
        private Thumb fThumbDup0Thumb;

        /// <summary>
        /// Backing field for RepeatButtonLinDup1Button property
        /// </summary>
        private Button fRepeatButtonLinDup1Button;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup0ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup0ScrollBar;

        /// <summary>
        /// Backing field for ConfigureDeviceTitleBar property
        /// </summary>
        private TitleBar fConfigureDeviceTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup0MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup0MenuBar;

        /// <summary>
        /// Backing field for SystemItem1Dup0MenuItem property
        /// </summary>
        private MenuItem fSystemItem1Dup0MenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizDup0Button property
        /// </summary>
        private Button fMinimizeMinimizDup0Button;

        /// <summary>
        /// Backing field for MaximizeMaximizButton property
        /// </summary>
        private Button fMaximizeMaximizButton;

        /// <summary>
        /// Backing field for CloseCloseDup0Button property
        /// </summary>
        private Button fCloseCloseDup0Button;

        /// <summary>
        /// Backing field for HelpButtonfb686Button property
        /// </summary>
        private Button fHelpButtonfb686Button;

        /// <summary>
        /// Backing field for HelpTextBlockDup0Text property
        /// </summary>
        private Text fHelpTextBlockDup0Text;

        /// <summary>
        /// Backing field for ApplyButton46D6Button property
        /// </summary>
        private Button fApplyButton46D6Button;

        /// <summary>
        /// Backing field for ApplyTextBlockDup0Text property
        /// </summary>
        private Text fApplyTextBlockDup0Text;

        /// <summary>
        /// Backing field for CancelButtoned9Button property
        /// </summary>
        private Button fCancelButtoned9Button;

        /// <summary>
        /// Backing field for CancelTextBlockDup0Text property
        /// </summary>
        private Text fCancelTextBlockDup0Text;

        /// <summary>
        /// Backing field for OKButton8c9182aButton property
        /// </summary>
        private Button fOKButton8c9182aButton;

        /// <summary>
        /// Backing field for OKTextBlockDup0Text property
        /// </summary>
        private Text fOKTextBlockDup0Text;

        /// <summary>
        /// Backing field for TabControl2111BTab property
        /// </summary>
        private Tab fTabControl2111BTab;

        /// <summary>
        /// Backing field for SystemWindowsCoDup0TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup0TabItem;

        /// <summary>
        /// Backing field for GeneralTextmGenDup0Text property
        /// </summary>
        private Text fGeneralTextmGenDup0Text;

        /// <summary>
        /// Backing field for GeneralTextBlocDup0Text property
        /// </summary>
        private Text fGeneralTextBlocDup0Text;

        /// <summary>
        /// Backing field for Text9127A6692D0Text property
        /// </summary>
        private Text fText9127A6692D0Text;

        /// <summary>
        /// Backing field for ProgressBar836eProgressBar property
        /// </summary>
        private ProgressBar fProgressBar836eProgressBar;

        /// <summary>
        /// Backing field for SystemWindowsCoDup1TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup1TabItem;

        /// <summary>
        /// Backing field for AuthenticationTDup0Text property
        /// </summary>
        private Text fAuthenticationTDup0Text;

        /// <summary>
        /// Backing field for AuthenticationTDup1Text property
        /// </summary>
        private Text fAuthenticationTDup1Text;

        /// <summary>
        /// Backing field for Text2087FBF2200Text property
        /// </summary>
        private Text fText2087FBF2200Text;

        /// <summary>
        /// Backing field for Text3C0A7A0B490Text property
        /// </summary>
        private Text fText3C0A7A0B490Text;

        /// <summary>
        /// Backing field for ProgressBar992dProgressBar property
        /// </summary>
        private ProgressBar fProgressBar992dProgressBar;

        /// <summary>
        /// Backing field for SystemWindowsCoDup2TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup2TabItem;

        /// <summary>
        /// Backing field for SendtoEmailTextDup0Text property
        /// </summary>
        private Text fSendtoEmailTextDup0Text;

        /// <summary>
        /// Backing field for SendtoEmailTextDup1Text property
        /// </summary>
        private Text fSendtoEmailTextDup1Text;

        /// <summary>
        /// Backing field for Text265ea8f2a5fText property
        /// </summary>
        private Text fText265ea8f2a5fText;

        /// <summary>
        /// Backing field for Text1a251d5f398Text property
        /// </summary>
        private Text fText1a251d5f398Text;

        /// <summary>
        /// Backing field for ProgressBara2e8ProgressBar property
        /// </summary>
        private ProgressBar fProgressBara2e8ProgressBar;

        /// <summary>
        /// Backing field for SystemWindowsCoDup3TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup3TabItem;

        /// <summary>
        /// Backing field for FaxTextmFaxTabLDup0Text property
        /// </summary>
        private Text fFaxTextmFaxTabLDup0Text;

        /// <summary>
        /// Backing field for FaxTextBlockDup0Text property
        /// </summary>
        private Text fFaxTextBlockDup0Text;

        /// <summary>
        /// Backing field for Text105C9A93254Text property
        /// </summary>
        private Text fText105C9A93254Text;

        /// <summary>
        /// Backing field for TextBlockDup0Text property
        /// </summary>
        private Text fTextBlockDup0Text;

        /// <summary>
        /// Backing field for Text25DD30D682EText property
        /// </summary>
        private Text fText25DD30D682EText;

        /// <summary>
        /// Backing field for ProgressBare99cProgressBar property
        /// </summary>
        private ProgressBar fProgressBare99cProgressBar;

        /// <summary>
        /// Backing field for TabStatusUserCoCustom property
        /// </summary>
        private Custom fTabStatusUserCoCustom;

        /// <summary>
        /// Backing field for ErrorTextBlockText property
        /// </summary>
        private Text fEnabledTextBlocText;

        /// <summary>
        /// Backing field for MfpConfiguratioCustom property
        /// </summary>
        private Custom fMfpConfiguratioCustom;

        /// <summary>
        /// Backing field for ScrollViewer336Pane property
        /// </summary>
        private Pane fScrollViewer336Pane;

        /// <summary>
        /// Backing field for ErrorConflictUsCustom property
        /// </summary>
        private Custom fErrorConflictUsCustom;

        /// <summary>
        /// Backing field for EnableFaxSendChCheckBox property
        /// </summary>
        private CheckBox fEnableFaxSendChCheckBox;

        /// <summary>
        /// Backing field for EnableFaxSendTeText property
        /// </summary>
        private Text fEnableFaxSendTeText;

        /// <summary>
        /// Backing field for EnableFaxReceivDup0CheckBox property
        /// </summary>
        private CheckBox fEnableFaxReceivDup0CheckBox;

        /// <summary>
        /// Backing field for FaxSendGroupBoxGroup property
        /// </summary>
        private Group fFaxSendGroupBoxGroup;

        /// <summary>
        /// Backing field for FaxSendTextBlocText property
        /// </summary>
        private Text fFaxSendTextBlocText;

        /// <summary>
        /// Backing field for ComboBox27bdd55ComboBox property
        /// </summary>
        private ComboBox fComboBox27bdd55ComboBox;

        /// <summary>
        /// Backing field for InternalModemLiListItem property
        /// </summary>
        private ListItem fInternalModemLiListItem;

        /// <summary>
        /// Backing field for InternalModemTeText property
        /// </summary>
        private Text fInternalModemTeText;

        /// <summary>
        /// Backing field for InternetFaxServListItem property
        /// </summary>
        private ListItem fInternetFaxServListItem;

        /// <summary>
        /// Backing field for InternetFaxServText property
        /// </summary>
        private Text fInternetFaxServText;

        /// <summary>
        /// Backing field for LANFaxServiceLiListItem property
        /// </summary>
        private ListItem fLANFaxServiceLiListItem;

        /// <summary>
        /// Backing field for LANFaxServiceTeText property
        /// </summary>
        private Text fLANFaxServiceTeText;

        /// <summary>
        /// Backing field for viatheDigitalSeListItem property
        /// </summary>
        private ListItem fviatheDigitalSeListItem;

        /// <summary>
        /// Backing field for viatheDigitalSeText property
        /// </summary>
        private Text fviatheDigitalSeText;

        /// <summary>
        /// Backing field for DeviceModemSettGroup property
        /// </summary>
        private Group fDeviceModemSettGroup;

        /// <summary>
        /// Backing field for DeviceModemSettText property
        /// </summary>
        private Text fDeviceModemSettText;

        /// <summary>
        /// Backing field for ApplyDeviceModeGroup property
        /// </summary>
        private Group fApplyDeviceModeGroup;

        /// <summary>
        /// Backing field for CountryRegionText property
        /// </summary>
        private Text fCountryRegionText;

        /// <summary>
        /// Backing field for CountryRegionTeText property
        /// </summary>
        private Text fCountryRegionTeText;

        /// <summary>
        /// Backing field for ComboBoxf62a935ComboBox property
        /// </summary>
        private ComboBox fComboBoxf62a935ComboBox;

        /// <summary>
        /// Backing field for NoneListBoxItemDup1ListItem property
        /// </summary>
        private ListItem fNoneListBoxItemDup1ListItem;

        /// <summary>
        /// Backing field for ArgentinaListBoDup1ListItem property
        /// </summary>
        private ListItem fArgentinaListBoDup1ListItem;

        /// <summary>
        /// Backing field for AustraliaListBoDup1ListItem property
        /// </summary>
        private ListItem fAustraliaListBoDup1ListItem;

        /// <summary>
        /// Backing field for AustriaListBoxIDup1ListItem property
        /// </summary>
        private ListItem fAustriaListBoxIDup1ListItem;

        /// <summary>
        /// Backing field for BelarusListBoxIDup1ListItem property
        /// </summary>
        private ListItem fBelarusListBoxIDup1ListItem;

        /// <summary>
        /// Backing field for BelgiumListBoxIDup1ListItem property
        /// </summary>
        private ListItem fBelgiumListBoxIDup1ListItem;

        /// <summary>
        /// Backing field for BrazilListBoxItDup1ListItem property
        /// </summary>
        private ListItem fBrazilListBoxItDup1ListItem;

        /// <summary>
        /// Backing field for BulgariaListBoxDup1ListItem property
        /// </summary>
        private ListItem fBulgariaListBoxDup1ListItem;

        /// <summary>
        /// Backing field for CanadaListBoxItDup1ListItem property
        /// </summary>
        private ListItem fCanadaListBoxItDup1ListItem;

        /// <summary>
        /// Backing field for ChileListBoxIteDup1ListItem property
        /// </summary>
        private ListItem fChileListBoxIteDup1ListItem;

        /// <summary>
        /// Backing field for CroatiaListBoxIDup1ListItem property
        /// </summary>
        private ListItem fCroatiaListBoxIDup1ListItem;

        /// <summary>
        /// Backing field for CzechRepublicLiDup1ListItem property
        /// </summary>
        private ListItem fCzechRepublicLiDup1ListItem;

        /// <summary>
        /// Backing field for ChinaListBoxIteDup1ListItem property
        /// </summary>
        private ListItem fChinaListBoxIteDup1ListItem;

        /// <summary>
        /// Backing field for DenmarkListBoxIDup1ListItem property
        /// </summary>
        private ListItem fDenmarkListBoxIDup1ListItem;

        /// <summary>
        /// Backing field for EstoniaListBoxIDup1ListItem property
        /// </summary>
        private ListItem fEstoniaListBoxIDup1ListItem;

        /// <summary>
        /// Backing field for FinlandListBoxIDup1ListItem property
        /// </summary>
        private ListItem fFinlandListBoxIDup1ListItem;

        /// <summary>
        /// Backing field for FranceListBoxItDup1ListItem property
        /// </summary>
        private ListItem fFranceListBoxItDup1ListItem;

        /// <summary>
        /// Backing field for GermanyListBoxIDup1ListItem property
        /// </summary>
        private ListItem fGermanyListBoxIDup1ListItem;

        /// <summary>
        /// Backing field for GreeceListBoxItDup1ListItem property
        /// </summary>
        private ListItem fGreeceListBoxItDup1ListItem;

        /// <summary>
        /// Backing field for HongKongSARListDup1ListItem property
        /// </summary>
        private ListItem fHongKongSARListDup1ListItem;

        /// <summary>
        /// Backing field for HungaryListBoxIDup1ListItem property
        /// </summary>
        private ListItem fHungaryListBoxIDup1ListItem;

        /// <summary>
        /// Backing field for IcelandListBoxIDup1ListItem property
        /// </summary>
        private ListItem fIcelandListBoxIDup1ListItem;

        /// <summary>
        /// Backing field for IndiaListBoxIteDup1ListItem property
        /// </summary>
        private ListItem fIndiaListBoxIteDup1ListItem;

        /// <summary>
        /// Backing field for IndonesiaListBoDup1ListItem property
        /// </summary>
        private ListItem fIndonesiaListBoDup1ListItem;

        /// <summary>
        /// Backing field for IrelandListBoxIDup1ListItem property
        /// </summary>
        private ListItem fIrelandListBoxIDup1ListItem;

        /// <summary>
        /// Backing field for IsraelListBoxItDup1ListItem property
        /// </summary>
        private ListItem fIsraelListBoxItDup1ListItem;

        /// <summary>
        /// Backing field for ItalyListBoxIteDup1ListItem property
        /// </summary>
        private ListItem fItalyListBoxIteDup1ListItem;

        /// <summary>
        /// Backing field for JapanListBoxIteDup1ListItem property
        /// </summary>
        private ListItem fJapanListBoxIteDup1ListItem;

        /// <summary>
        /// Backing field for KoreaListBoxIteDup1ListItem property
        /// </summary>
        private ListItem fKoreaListBoxIteDup1ListItem;

        /// <summary>
        /// Backing field for LatviaListBoxItDup1ListItem property
        /// </summary>
        private ListItem fLatviaListBoxItDup1ListItem;

        /// <summary>
        /// Backing field for LiechtensteinLiDup1ListItem property
        /// </summary>
        private ListItem fLiechtensteinLiDup1ListItem;

        /// <summary>
        /// Backing field for LithuaniaListBoDup1ListItem property
        /// </summary>
        private ListItem fLithuaniaListBoDup1ListItem;

        /// <summary>
        /// Backing field for LuxembourgListBDup1ListItem property
        /// </summary>
        private ListItem fLuxembourgListBDup1ListItem;

        /// <summary>
        /// Backing field for MalaysiaListBoxDup1ListItem property
        /// </summary>
        private ListItem fMalaysiaListBoxDup1ListItem;

        /// <summary>
        /// Backing field for MexicoListBoxItDup1ListItem property
        /// </summary>
        private ListItem fMexicoListBoxItDup1ListItem;

        /// <summary>
        /// Backing field for MoroccoListBoxIDup1ListItem property
        /// </summary>
        private ListItem fMoroccoListBoxIDup1ListItem;

        /// <summary>
        /// Backing field for NetherlandsListDup1ListItem property
        /// </summary>
        private ListItem fNetherlandsListDup1ListItem;

        /// <summary>
        /// Backing field for NewZealandListBDup1ListItem property
        /// </summary>
        private ListItem fNewZealandListBDup1ListItem;

        /// <summary>
        /// Backing field for NorwayListBoxItDup1ListItem property
        /// </summary>
        private ListItem fNorwayListBoxItDup1ListItem;

        /// <summary>
        /// Backing field for PakistanListBoxDup1ListItem property
        /// </summary>
        private ListItem fPakistanListBoxDup1ListItem;

        /// <summary>
        /// Backing field for PeruListBoxItemDup1ListItem property
        /// </summary>
        private ListItem fPeruListBoxItemDup1ListItem;

        /// <summary>
        /// Backing field for PhilippinesListDup1ListItem property
        /// </summary>
        private ListItem fPhilippinesListDup1ListItem;

        /// <summary>
        /// Backing field for PolandListBoxItDup1ListItem property
        /// </summary>
        private ListItem fPolandListBoxItDup1ListItem;

        /// <summary>
        /// Backing field for PortugalListBoxDup1ListItem property
        /// </summary>
        private ListItem fPortugalListBoxDup1ListItem;

        /// <summary>
        /// Backing field for RomaniaListBoxIDup1ListItem property
        /// </summary>
        private ListItem fRomaniaListBoxIDup1ListItem;

        /// <summary>
        /// Backing field for RussiaListBoxItDup1ListItem property
        /// </summary>
        private ListItem fRussiaListBoxItDup1ListItem;

        /// <summary>
        /// Backing field for SingaporeListBoDup1ListItem property
        /// </summary>
        private ListItem fSingaporeListBoDup1ListItem;

        /// <summary>
        /// Backing field for SlovakiaListBoxDup1ListItem property
        /// </summary>
        private ListItem fSlovakiaListBoxDup1ListItem;

        /// <summary>
        /// Backing field for SloveniaListBoxDup1ListItem property
        /// </summary>
        private ListItem fSloveniaListBoxDup1ListItem;

        /// <summary>
        /// Backing field for SouthAfricaListDup1ListItem property
        /// </summary>
        private ListItem fSouthAfricaListDup1ListItem;

        /// <summary>
        /// Backing field for SpainListBoxIteDup1ListItem property
        /// </summary>
        private ListItem fSpainListBoxIteDup1ListItem;

        /// <summary>
        /// Backing field for SriLankaListBoxDup1ListItem property
        /// </summary>
        private ListItem fSriLankaListBoxDup1ListItem;

        /// <summary>
        /// Backing field for SwedenListBoxItDup1ListItem property
        /// </summary>
        private ListItem fSwedenListBoxItDup1ListItem;

        /// <summary>
        /// Backing field for SwitzerlandListDup1ListItem property
        /// </summary>
        private ListItem fSwitzerlandListDup1ListItem;

        /// <summary>
        /// Backing field for TaiwanListBoxItDup1ListItem property
        /// </summary>
        private ListItem fTaiwanListBoxItDup1ListItem;

        /// <summary>
        /// Backing field for ThailandListBoxDup1ListItem property
        /// </summary>
        private ListItem fThailandListBoxDup1ListItem;

        /// <summary>
        /// Backing field for TurkeyListBoxItDup1ListItem property
        /// </summary>
        private ListItem fTurkeyListBoxItDup1ListItem;

        /// <summary>
        /// Backing field for UkraineListBoxIDup1ListItem property
        /// </summary>
        private ListItem fUkraineListBoxIDup1ListItem;

        /// <summary>
        /// Backing field for UnitedKingdomLiDup1ListItem property
        /// </summary>
        private ListItem fUnitedKingdomLiDup1ListItem;

        /// <summary>
        /// Backing field for UnitedStatesLisDup1ListItem property
        /// </summary>
        private ListItem fUnitedStatesLisDup1ListItem;

        /// <summary>
        /// Backing field for VietnamListBoxIDup1ListItem property
        /// </summary>
        private ListItem fVietnamListBoxIDup1ListItem;

        /// <summary>
        /// Backing field for CompanyNameText property
        /// </summary>
        private Text fCompanyNameText;

        /// <summary>
        /// Backing field for CompanyNameTextText property
        /// </summary>
        private Text fCompanyNameTextText;

        /// <summary>
        /// Backing field for TextBoxf025cf4cEdit property
        /// </summary>
        private Edit fTextBoxf025cf4cEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup0Pane property
        /// </summary>
        private Pane fScrollViewerPARDup0Pane;

        /// <summary>
        /// Backing field for PhoneNumberText property
        /// </summary>
        private Text fPhoneNumberText;

        /// <summary>
        /// Backing field for PhoneNumberTextText property
        /// </summary>
        private Text fPhoneNumberTextText;

        /// <summary>
        /// Backing field for TextBoxa903a57eEdit property
        /// </summary>
        private Edit fTextBoxa903a57eEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup1Pane property
        /// </summary>
        private Pane fScrollViewerPARDup1Pane;

        /// <summary>
        /// Backing field for ApplyDeviceModeCheckBox property
        /// </summary>
        private CheckBox fApplyDeviceModeCheckBox;

        /// <summary>
        /// Backing field for GeneralFaxSendSGroup property
        /// </summary>
        private Group fGeneralFaxSendSGroup;

        /// <summary>
        /// Backing field for GeneralFaxSendSText property
        /// </summary>
        private Text fGeneralFaxSendSText;

        /// <summary>
        /// Backing field for EnablePCFaxSendCheckBox property
        /// </summary>
        private CheckBox fEnablePCFaxSendCheckBox;

        /// <summary>
        /// Backing field for EnablePCFaxSendText property
        /// </summary>
        private Text fEnablePCFaxSendText;

        /// <summary>
        /// Backing field for ErrorCorrectionDup0Text property
        /// </summary>
        private Text fErrorCorrectionDup0Text;

        /// <summary>
        /// Backing field for ErrorCorrectionDup1Text property
        /// </summary>
        private Text fErrorCorrectionDup1Text;

        /// <summary>
        /// Backing field for ComboBox779dfdcComboBox property
        /// </summary>
        private ComboBox fComboBox779dfdcComboBox;

        /// <summary>
        /// Backing field for FaxHeaderText property
        /// </summary>
        private Text fFaxHeaderText;

        /// <summary>
        /// Backing field for FaxHeaderTextBlText property
        /// </summary>
        private Text fFaxHeaderTextBlText;

        /// <summary>
        /// Backing field for ComboBoxABA7D67ComboBox property
        /// </summary>
        private ComboBox fComboBoxABA7D67ComboBox;

        /// <summary>
        /// Backing field for EnableJBIGComprCheckBox property
        /// </summary>
        private CheckBox fEnableJBIGComprCheckBox;

        /// <summary>
        /// Backing field for EnableJBIGComprText property
        /// </summary>
        private Text fEnableJBIGComprText;

        /// <summary>
        /// Backing field for FaxDialingSettiGroup property
        /// </summary>
        private Group fFaxDialingSettiGroup;

        /// <summary>
        /// Backing field for FaxDialingSettiText property
        /// </summary>
        private Text fFaxDialingSettiText;

        /// <summary>
        /// Backing field for FaxDialVolumeText property
        /// </summary>
        private Text fFaxDialVolumeText;

        /// <summary>
        /// Backing field for FaxDialVolumeTeText property
        /// </summary>
        private Text fFaxDialVolumeTeText;

        /// <summary>
        /// Backing field for ComboBoxa2ba831ComboBox property
        /// </summary>
        private ComboBox fComboBoxa2ba831ComboBox;

        /// <summary>
        /// Backing field for DialingModeText property
        /// </summary>
        private Text fDialingModeText;

        /// <summary>
        /// Backing field for DialingModeTextText property
        /// </summary>
        private Text fDialingModeTextText;

        /// <summary>
        /// Backing field for ComboBox7b47845ComboBox property
        /// </summary>
        private ComboBox fComboBox7b47845ComboBox;

        /// <summary>
        /// Backing field for DialingPrefixText property
        /// </summary>
        private Text fDialingPrefixText;

        /// <summary>
        /// Backing field for DialingPrefixTeText property
        /// </summary>
        private Text fDialingPrefixTeText;

        /// <summary>
        /// Backing field for TextBox3d3f4141Edit property
        /// </summary>
        private Edit fTextBox3d3f4141Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup2Pane property
        /// </summary>
        private Pane fScrollViewerPARDup2Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup1ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup1ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup1ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup1ScrollBar;

        /// <summary>
        /// Backing field for RedialIntervalText property
        /// </summary>
        private Text fRedialIntervalText;

        /// <summary>
        /// Backing field for RedialIntervalTText property
        /// </summary>
        private Text fRedialIntervalTText;

        /// <summary>
        /// Backing field for ComboBox2b4c51bComboBox property
        /// </summary>
        private ComboBox fComboBox2b4c51bComboBox;

        /// <summary>
        /// Backing field for RedialonNoAnsweDup0Text property
        /// </summary>
        private Text fRedialonNoAnsweDup0Text;

        /// <summary>
        /// Backing field for RedialonNoAnsweDup1Text property
        /// </summary>
        private Text fRedialonNoAnsweDup1Text;

        /// <summary>
        /// Backing field for ComboBox69408eeComboBox property
        /// </summary>
        private ComboBox fComboBox69408eeComboBox;

        /// <summary>
        /// Backing field for RedialonBusyText property
        /// </summary>
        private Text fRedialonBusyText;

        /// <summary>
        /// Backing field for RedialonBusyTexText property
        /// </summary>
        private Text fRedialonBusyTexText;

        /// <summary>
        /// Backing field for ComboBox4d349bbComboBox property
        /// </summary>
        private ComboBox fComboBox4d349bbComboBox;

        /// <summary>
        /// Backing field for DetectDialToneCCheckBox property
        /// </summary>
        private CheckBox fDetectDialToneCCheckBox;

        /// <summary>
        /// Backing field for DetectDialToneTText property
        /// </summary>
        private Text fDetectDialToneTText;

        /// <summary>
        /// Backing field for InternetFaxSetuDup0Group property
        /// </summary>
        private Group fInternetFaxSetuDup0Group;

        /// <summary>
        /// Backing field for InternetFaxSetuDup1Group property
        /// </summary>
        private Group fInternetFaxSetuDup1Group;

        /// <summary>
        /// Backing field for LANFaxSetupGrouGroup property
        /// </summary>
        private Group fLANFaxSetupGrouGroup;

        /// <summary>
        /// Backing field for BillingCodesGroGroup property
        /// </summary>
        private Group fBillingCodesGroGroup;

        /// <summary>
        /// Backing field for BillingCodesTexText property
        /// </summary>
        private Text fBillingCodesTexText;

        /// <summary>
        /// Backing field for ApplyBillingCodGroup property
        /// </summary>
        private Group fApplyBillingCodGroup;

        /// <summary>
        /// Backing field for BillingcodesareText property
        /// </summary>
        private Text fBillingcodesareText;

        /// <summary>
        /// Backing field for EnableBillingCoCheckBox property
        /// </summary>
        private CheckBox fEnableBillingCoCheckBox;

        /// <summary>
        /// Backing field for EnableBillingCoText property
        /// </summary>
        private Text fEnableBillingCoText;

        /// <summary>
        /// Backing field for DefaultBillingCText property
        /// </summary>
        private Text fDefaultBillingCText;

        /// <summary>
        /// Backing field for TextBox46ada864Edit property
        /// </summary>
        private Edit fTextBox46ada864Edit;

        /// <summary>
        /// Backing field for MinimumLengthText property
        /// </summary>
        private Text fMinimumLengthText;

        /// <summary>
        /// Backing field for TextBoxa28b4e38Edit property
        /// </summary>
        private Edit fTextBoxa28b4e38Edit;

        /// <summary>
        /// Backing field for A116Text property
        /// </summary>
        private Text fA116Text;

        /// <summary>
        /// Backing field for AllowuserstoediCheckBox property
        /// </summary>
        private CheckBox fAllowuserstoediCheckBox;

        /// <summary>
        /// Backing field for ApplyBillingCodCheckBox property
        /// </summary>
        private CheckBox fApplyBillingCodCheckBox;

        /// <summary>
        /// Backing field for CommonJobSettinGroup property
        /// </summary>
        private Group fCommonJobSettinGroup;

        /// <summary>
        /// Backing field for CommonJobSettinText property
        /// </summary>
        private Text fCommonJobSettinText;

        /// <summary>
        /// Backing field for FaxNumberConfirCheckBox property
        /// </summary>
        private CheckBox fFaxNumberConfirCheckBox;

        /// <summary>
        /// Backing field for FaxNumberConfirText property
        /// </summary>
        private Text fFaxNumberConfirText;

        /// <summary>
        /// Backing field for FaxNumberSpeedDCheckBox property
        /// </summary>
        private CheckBox fFaxNumberSpeedDCheckBox;

        /// <summary>
        /// Backing field for FaxNumberSpeedDText property
        /// </summary>
        private Text fFaxNumberSpeedDText;

        /// <summary>
        /// Backing field for QuickSetsGroupBGroup property
        /// </summary>
        private Group fQuickSetsGroupBGroup;

        /// <summary>
        /// Backing field for QuickSetsTextBlText property
        /// </summary>
        private Text fQuickSetsTextBlText;

        /// <summary>
        /// Backing field for ListView01b98aeDataGrid property
        /// </summary>
        private DataGrid fListView01b98aeDataGrid;

        /// <summary>
        /// Backing field for GridViewHeaderRDup0Header property
        /// </summary>
        private Header fGridViewHeaderRDup0Header;

        /// <summary>
        /// Backing field for QuickSetTitleGrHeaderItem property
        /// </summary>
        private HeaderItem fQuickSetTitleGrHeaderItem;

        /// <summary>
        /// Backing field for QuickSetDescripHeaderItem property
        /// </summary>
        private HeaderItem fQuickSetDescripHeaderItem;

        /// <summary>
        /// Backing field for ButtonLocationGHeaderItem property
        /// </summary>
        private HeaderItem fButtonLocationGHeaderItem;

        /// <summary>
        /// Backing field for AddButtonaaef93Button property
        /// </summary>
        private Button fAddButtonaaef93Button;

        /// <summary>
        /// Backing field for AddTextBlockDup0Text property
        /// </summary>
        private Text fAddTextBlockDup0Text;

        /// <summary>
        /// Backing field for EditButton56b39Button property
        /// </summary>
        private Button fEditButton56b39Button;

        /// <summary>
        /// Backing field for EditTextBlockDup0Text property
        /// </summary>
        private Text fEditTextBlockDup0Text;

        /// <summary>
        /// Backing field for CopyButtonbfbd1Button property
        /// </summary>
        private Button fCopyButtonbfbd1Button;

        /// <summary>
        /// Backing field for CopyTextBlockText property
        /// </summary>
        private Text fCopyTextBlockText;

        /// <summary>
        /// Backing field for RemoveButton941Button property
        /// </summary>
        private Button fRemoveButton941Button;

        /// <summary>
        /// Backing field for RemoveTextBlockDup0Text property
        /// </summary>
        private Text fRemoveTextBlockDup0Text;

        /// <summary>
        /// Backing field for DefaultSendNotiGroup property
        /// </summary>
        private Group fDefaultSendNotiGroup;

        /// <summary>
        /// Backing field for DefaultSendNotiText property
        /// </summary>
        private Text fDefaultSendNotiText;

        /// <summary>
        /// Backing field for ConditiononWhicDup0Text property
        /// </summary>
        private Text fConditiononWhicDup0Text;

        /// <summary>
        /// Backing field for ConditiononWhicDup1Text property
        /// </summary>
        private Text fConditiononWhicDup1Text;

        /// <summary>
        /// Backing field for ComboBox774ee1bComboBox property
        /// </summary>
        private ComboBox fComboBox774ee1bComboBox;

        /// <summary>
        /// Backing field for MethodUsedtoDelDup0Text property
        /// </summary>
        private Text fMethodUsedtoDelDup0Text;

        /// <summary>
        /// Backing field for MethodUsedtoDelDup1Text property
        /// </summary>
        private Text fMethodUsedtoDelDup1Text;

        /// <summary>
        /// Backing field for ComboBox6736806ComboBox property
        /// </summary>
        private ComboBox fComboBox6736806ComboBox;

        /// <summary>
        /// Backing field for NotificationEmaDup0Text property
        /// </summary>
        private Text fNotificationEmaDup0Text;

        /// <summary>
        /// Backing field for NotificationEmaDup1Text property
        /// </summary>
        private Text fNotificationEmaDup1Text;

        /// <summary>
        /// Backing field for TextBox35317EE0Edit property
        /// </summary>
        private Edit fTextBox35317EE0Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup3Pane property
        /// </summary>
        private Pane fScrollViewerPARDup3Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup2ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup2ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup2ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup2ScrollBar;

        /// <summary>
        /// Backing field for LanguageoftheNoText property
        /// </summary>
        private Text fLanguageoftheNoText;

        /// <summary>
        /// Backing field for ComboBoxF221C6FComboBox property
        /// </summary>
        private ComboBox fComboBoxF221C6FComboBox;

        /// <summary>
        /// Backing field for IncludeThumbnaiDup0CheckBox property
        /// </summary>
        private CheckBox fIncludeThumbnaiDup0CheckBox;

        /// <summary>
        /// Backing field for IncludeThumbnaiDup0Text property
        /// </summary>
        private Text fIncludeThumbnaiDup0Text;

        /// <summary>
        /// Backing field for IncludeathumbnaDup0Text property
        /// </summary>
        private Text fIncludeathumbnaDup0Text;

        /// <summary>
        /// Backing field for ConsolidateprinCheckBox property
        /// </summary>
        private CheckBox fConsolidateprinCheckBox;

        /// <summary>
        /// Backing field for ConsolidateprinText property
        /// </summary>
        private Text fConsolidateprinText;

        /// <summary>
        /// Backing field for WhenprintingafaText property
        /// </summary>
        private Text fWhenprintingafaText;

        /// <summary>
        /// Backing field for NoteTheemailaddDup0Text property
        /// </summary>
        private Text fNoteTheemailaddDup0Text;

        /// <summary>
        /// Backing field for ScanSettingsGroGroup property
        /// </summary>
        private Group fScanSettingsGroGroup;

        /// <summary>
        /// Backing field for ScanSettingsTexText property
        /// </summary>
        private Text fScanSettingsTexText;

        /// <summary>
        /// Backing field for ResolutionDup0I0XText property
        /// </summary>
        private Text fResolutionDup0I0XText;

        /// <summary>
        /// Backing field for ComboBox91A6644ComboBox property
        /// </summary>
        private ComboBox fComboBox91A6644ComboBox;

        /// <summary>
        /// Backing field for ResolutionDup1I1XText property
        /// </summary>
        private Text fResolutionDup1I1XText;

        /// <summary>
        /// Backing field for ResolutionTextBText property
        /// </summary>
        private Text fResolutionTextBText;

        /// <summary>
        /// Backing field for ComboBox5FFDA7BComboBox property
        /// </summary>
        private ComboBox fComboBox5FFDA7BComboBox;

        /// <summary>
        /// Backing field for OriginalSizeText property
        /// </summary>
        private Text fOriginalSizeText;

        /// <summary>
        /// Backing field for OriginalSizeTexText property
        /// </summary>
        private Text fOriginalSizeTexText;

        /// <summary>
        /// Backing field for ComboBoxe9737feComboBox property
        /// </summary>
        private ComboBox fComboBoxe9737feComboBox;

        /// <summary>
        /// Backing field for CustomDimensionText property
        /// </summary>
        private Text fCustomDimensionText;

        /// <summary>
        /// Backing field for ComboBox3dba318ComboBox property
        /// </summary>
        private ComboBox fComboBox3dba318ComboBox;

        /// <summary>
        /// Backing field for CustomXDimensioText property
        /// </summary>
        private Text fCustomXDimensioText;

        /// <summary>
        /// Backing field for TextBox8db6a2f1Edit property
        /// </summary>
        private Edit fTextBox8db6a2f1Edit;

        /// <summary>
        /// Backing field for CustomYDimensioText property
        /// </summary>
        private Text fCustomYDimensioText;

        /// <summary>
        /// Backing field for TextBoxd3f2a111Edit property
        /// </summary>
        private Edit fTextBoxd3f2a111Edit;

        /// <summary>
        /// Backing field for OriginalSidesText property
        /// </summary>
        private Text fOriginalSidesText;

        /// <summary>
        /// Backing field for OriginalSidesTeText property
        /// </summary>
        private Text fOriginalSidesTeText;

        /// <summary>
        /// Backing field for ComboBoxda8de30ComboBox property
        /// </summary>
        private ComboBox fComboBoxda8de30ComboBox;

        /// <summary>
        /// Backing field for OptimizeTextPicDup0Text property
        /// </summary>
        private Text fOptimizeTextPicDup0Text;

        /// <summary>
        /// Backing field for OptimizeTextPicDup1Text property
        /// </summary>
        private Text fOptimizeTextPicDup1Text;

        /// <summary>
        /// Backing field for ComboBoxc7f4e07ComboBox property
        /// </summary>
        private ComboBox fComboBoxc7f4e07ComboBox;

        /// <summary>
        /// Backing field for OptimizeForText property
        /// </summary>
        private Text fOptimizeForText;

        /// <summary>
        /// Backing field for OptimizeForTextText property
        /// </summary>
        private Text fOptimizeForTextText;

        /// <summary>
        /// Backing field for ComboBoxfc09eccComboBox property
        /// </summary>
        private ComboBox fComboBoxfc09eccComboBox;

        /// <summary>
        /// Backing field for ContentOrientatDup0Text property
        /// </summary>
        private Text fContentOrientatDup0Text;

        /// <summary>
        /// Backing field for ContentOrientatDup1Text property
        /// </summary>
        private Text fContentOrientatDup1Text;

        /// <summary>
        /// Backing field for ComboBoxc80838aComboBox property
        /// </summary>
        private ComboBox fComboBoxc80838aComboBox;

        /// <summary>
        /// Backing field for A2SidedFormatTeDup0Text property
        /// </summary>
        private Text fA2SidedFormatTeDup0Text;

        /// <summary>
        /// Backing field for A2SidedFormatTeDup1Text property
        /// </summary>
        private Text fA2SidedFormatTeDup1Text;

        /// <summary>
        /// Backing field for ComboBoxcbf9bb8ComboBox property
        /// </summary>
        private ComboBox fComboBoxcbf9bb8ComboBox;

        /// <summary>
        /// Backing field for BackgroundCleanDup0Text property
        /// </summary>
        private Text fBackgroundCleanDup0Text;

        /// <summary>
        /// Backing field for BackgroundCleanDup1Text property
        /// </summary>
        private Text fBackgroundCleanDup1Text;

        /// <summary>
        /// Backing field for ComboBoxd42c834ComboBox property
        /// </summary>
        private ComboBox fComboBoxd42c834ComboBox;

        /// <summary>
        /// Backing field for DarknessText property
        /// </summary>
        private Text fDarknessText;

        /// <summary>
        /// Backing field for DarknessTextBloText property
        /// </summary>
        private Text fDarknessTextBloText;

        /// <summary>
        /// Backing field for ComboBoxd71070cComboBox property
        /// </summary>
        private ComboBox fComboBoxd71070cComboBox;

        /// <summary>
        /// Backing field for ContrastText property
        /// </summary>
        private Text fContrastText;

        /// <summary>
        /// Backing field for ContrastTextBloText property
        /// </summary>
        private Text fContrastTextBloText;

        /// <summary>
        /// Backing field for ComboBox7ac6309ComboBox property
        /// </summary>
        private ComboBox fComboBox7ac6309ComboBox;

        /// <summary>
        /// Backing field for SharpnessText property
        /// </summary>
        private Text fSharpnessText;

        /// <summary>
        /// Backing field for SharpnessTextBlText property
        /// </summary>
        private Text fSharpnessTextBlText;

        /// <summary>
        /// Backing field for ComboBox774c1f8ComboBox property
        /// </summary>
        private ComboBox fComboBox774c1f8ComboBox;

        /// <summary>
        /// Backing field for ColorDropoutText property
        /// </summary>
        private Text fColorDropoutText;

        /// <summary>
        /// Backing field for ComboBoxe5f22ceComboBox property
        /// </summary>
        private ComboBox fComboBoxe5f22ceComboBox;

        /// <summary>
        /// Backing field for ImagePreviewText property
        /// </summary>
        private Text fImagePreviewText;

        /// <summary>
        /// Backing field for ImagePreviewTexText property
        /// </summary>
        private Text fImagePreviewTexText;

        /// <summary>
        /// Backing field for ComboBoxd615bcbComboBox property
        /// </summary>
        private ComboBox fComboBoxd615bcbComboBox;

        /// <summary>
        /// Backing field for JobBuildCheckBoCheckBox property
        /// </summary>
        private CheckBox fJobBuildCheckBoCheckBox;

        /// <summary>
        /// Backing field for JobBuildTextBloText property
        /// </summary>
        private Text fJobBuildTextBloText;

        /// <summary>
        /// Backing field for MultifeedDetectCheckBox property
        /// </summary>
        private CheckBox fMultifeedDetectCheckBox;

        /// <summary>
        /// Backing field for MultifeedDetectText property
        /// </summary>
        private Text fMultifeedDetectText;

        /// <summary>
        /// Backing field for AutomaticToneChCheckBox property
        /// </summary>
        private CheckBox fAutomaticToneChCheckBox;

        /// <summary>
        /// Backing field for CheckingthisboxText property
        /// </summary>
        private Text fCheckingthisboxText;

        /// <summary>
        /// Backing field for AutomaticallyStCheckBox property
        /// </summary>
        private CheckBox fAutomaticallyStCheckBox;

        /// <summary>
        /// Backing field for WhenenabledpageText property
        /// </summary>
        private Text fWhenenabledpageText;

        /// <summary>
        /// Backing field for EnableBlankPageCheckBox property
        /// </summary>
        private CheckBox fEnableBlankPageCheckBox;

        /// <summary>
        /// Backing field for EnableBlankPageText property
        /// </summary>
        private Text fEnableBlankPageText;

        /// <summary>
        /// Backing field for AnalogFaxReceivGroup property
        /// </summary>
        private Group fAnalogFaxReceivGroup;

        /// <summary>
        /// Backing field for AnalogFaxReceivText property
        /// </summary>
        private Text fAnalogFaxReceivText;

        /// <summary>
        /// Backing field for EnableFaxReceivDup1CheckBox property
        /// </summary>
        private CheckBox fEnableFaxReceivDup1CheckBox;

        /// <summary>
        /// Backing field for EnableFaxReceivText property
        /// </summary>
        private Text fEnableFaxReceivText;

        /// <summary>
        /// Backing field for FaxJobOptionsGrGroup property
        /// </summary>
        private Group fFaxJobOptionsGrGroup;

        /// <summary>
        /// Backing field for FaxJobOptionsTeText property
        /// </summary>
        private Text fFaxJobOptionsTeText;

        /// <summary>
        /// Backing field for SidesText property
        /// </summary>
        private Text fSidesText;

        /// <summary>
        /// Backing field for SidesTextBlockText property
        /// </summary>
        private Text fSidesTextBlockText;

        /// <summary>
        /// Backing field for ComboBoxdc3f94cComboBox property
        /// </summary>
        private ComboBox fComboBoxdc3f94cComboBox;

        /// <summary>
        /// Backing field for StapleText property
        /// </summary>
        private Text fStapleText;

        /// <summary>
        /// Backing field for ComboBoxcaa1fc0ComboBox property
        /// </summary>
        private ComboBox fComboBoxcaa1fc0ComboBox;

        /// <summary>
        /// Backing field for CollateCheckBoxCheckBox property
        /// </summary>
        private CheckBox fCollateCheckBoxCheckBox;

        /// <summary>
        /// Backing field for PaperSelectionText property
        /// </summary>
        private Text fPaperSelectionText;

        /// <summary>
        /// Backing field for PaperSelectionTText property
        /// </summary>
        private Text fPaperSelectionTText;

        /// <summary>
        /// Backing field for ComboBox08ab3d6ComboBox property
        /// </summary>
        private ComboBox fComboBox08ab3d6ComboBox;

        /// <summary>
        /// Backing field for OutputBinText property
        /// </summary>
        private Text fOutputBinText;

        /// <summary>
        /// Backing field for OutputBinTextBlText property
        /// </summary>
        private Text fOutputBinTextBlText;

        /// <summary>
        /// Backing field for ComboBox1ab9bb5ComboBox property
        /// </summary>
        private ComboBox fComboBox1ab9bb5ComboBox;

        /// <summary>
        /// Backing field for StampReceivedFaCheckBox property
        /// </summary>
        private CheckBox fStampReceivedFaCheckBox;

        /// <summary>
        /// Backing field for StampReceivedFaText property
        /// </summary>
        private Text fStampReceivedFaText;

        /// <summary>
        /// Backing field for UsereditableCheCheckBox property
        /// </summary>
        private CheckBox fUsereditableCheCheckBox;

        /// <summary>
        /// Backing field for FaxReceiveSettiGroup property
        /// </summary>
        private Group fFaxReceiveSettiGroup;

        /// <summary>
        /// Backing field for FaxReceiveSettiText property
        /// </summary>
        private Text fFaxReceiveSettiText;

        /// <summary>
        /// Backing field for RingerVolumeText property
        /// </summary>
        private Text fRingerVolumeText;

        /// <summary>
        /// Backing field for RingerVolumeTexText property
        /// </summary>
        private Text fRingerVolumeTexText;

        /// <summary>
        /// Backing field for ComboBoxbd77d40ComboBox property
        /// </summary>
        private ComboBox fComboBoxbd77d40ComboBox;

        /// <summary>
        /// Backing field for RingsToAnswerText property
        /// </summary>
        private Text fRingsToAnswerText;

        /// <summary>
        /// Backing field for RingsToAnswerTeText property
        /// </summary>
        private Text fRingsToAnswerTeText;

        /// <summary>
        /// Backing field for ComboBoxcbd11fbComboBox property
        /// </summary>
        private ComboBox fComboBoxcbd11fbComboBox;

        /// <summary>
        /// Backing field for MaximumBaudRateDup0Text property
        /// </summary>
        private Text fMaximumBaudRateDup0Text;

        /// <summary>
        /// Backing field for MaximumBaudRateDup1Text property
        /// </summary>
        private Text fMaximumBaudRateDup1Text;

        /// <summary>
        /// Backing field for ComboBoxd7a3af1ComboBox property
        /// </summary>
        private ComboBox fComboBoxd7a3af1ComboBox;

        /// <summary>
        /// Backing field for RingIntervalText property
        /// </summary>
        private Text fRingIntervalText;

        /// <summary>
        /// Backing field for RingIntervalTexText property
        /// </summary>
        private Text fRingIntervalTexText;

        /// <summary>
        /// Backing field for TextBox227a3115Edit property
        /// </summary>
        private Edit fTextBox227a3115Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup4Pane property
        /// </summary>
        private Pane fScrollViewerPARDup4Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup3ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup3ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup3ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup3ScrollBar;

        /// <summary>
        /// Backing field for RingFrequencyText property
        /// </summary>
        private Text fRingFrequencyText;

        /// <summary>
        /// Backing field for RingFrequencyTeText property
        /// </summary>
        private Text fRingFrequencyTeText;

        /// <summary>
        /// Backing field for TextBoxc953e70aEdit property
        /// </summary>
        private Edit fTextBoxc953e70aEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup5Pane property
        /// </summary>
        private Pane fScrollViewerPARDup5Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup4ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup4ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup4ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup4ScrollBar;

        /// <summary>
        /// Backing field for DefaultReceiveNGroup property
        /// </summary>
        private Group fDefaultReceiveNGroup;

        /// <summary>
        /// Backing field for DefaultReceiveNText property
        /// </summary>
        private Text fDefaultReceiveNText;

        /// <summary>
        /// Backing field for ConditiononWhicDup2Text property
        /// </summary>
        private Text fConditiononWhicDup2Text;

        /// <summary>
        /// Backing field for ConditiononWhicDup3Text property
        /// </summary>
        private Text fConditiononWhicDup3Text;

        /// <summary>
        /// Backing field for ComboBox30eac22ComboBox property
        /// </summary>
        private ComboBox fComboBox30eac22ComboBox;

        /// <summary>
        /// Backing field for MethodUsedtoDelDup2Text property
        /// </summary>
        private Text fMethodUsedtoDelDup2Text;

        /// <summary>
        /// Backing field for MethodUsedtoDelDup3Text property
        /// </summary>
        private Text fMethodUsedtoDelDup3Text;

        /// <summary>
        /// Backing field for ComboBox25a6fe7ComboBox property
        /// </summary>
        private ComboBox fComboBox25a6fe7ComboBox;

        /// <summary>
        /// Backing field for NotificationEmaDup2Text property
        /// </summary>
        private Text fNotificationEmaDup2Text;

        /// <summary>
        /// Backing field for NotificationEmaDup3Text property
        /// </summary>
        private Text fNotificationEmaDup3Text;

        /// <summary>
        /// Backing field for TextBox56A93ACDEdit property
        /// </summary>
        private Edit fTextBox56A93ACDEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup6Pane property
        /// </summary>
        private Pane fScrollViewerPARDup6Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup5ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup5ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup5ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup5ScrollBar;

        /// <summary>
        /// Backing field for IncludeThumbnaiDup1CheckBox property
        /// </summary>
        private CheckBox fIncludeThumbnaiDup1CheckBox;

        /// <summary>
        /// Backing field for IncludeThumbnaiDup1Text property
        /// </summary>
        private Text fIncludeThumbnaiDup1Text;

        /// <summary>
        /// Backing field for IncludeathumbnaDup1Text property
        /// </summary>
        private Text fIncludeathumbnaDup1Text;

        /// <summary>
        /// Backing field for NoteTheemailaddDup1Text property
        /// </summary>
        private Text fNoteTheemailaddDup1Text;

        /// <summary>
        /// Backing field for ApplySecurityPIGroup property
        /// </summary>
        private Group fApplySecurityPIGroup;

        /// <summary>
        /// Backing field for Expander3E55AFEGroup property
        /// </summary>
        private Group fExpander3E55AFEGroup;

        /// <summary>
        /// Backing field for FaxPrintingScheGroup property
        /// </summary>
        private Group fFaxPrintingScheGroup;

        /// <summary>
        /// Backing field for FaxPrintingScheText property
        /// </summary>
        private Text fFaxPrintingScheText;

        /// <summary>
        /// Backing field for AlwaysprintfaxeRadioButton property
        /// </summary>
        private RadioButton fAlwaysprintfaxeRadioButton;

        /// <summary>
        /// Backing field for AlwaysprintfaxeText property
        /// </summary>
        private Text fAlwaysprintfaxeText;

        /// <summary>
        /// Backing field for AlwaysstorefaxeRadioButton property
        /// </summary>
        private RadioButton fAlwaysstorefaxeRadioButton;

        /// <summary>
        /// Backing field for AlwaysstorefaxeText property
        /// </summary>
        private Text fAlwaysstorefaxeText;

        /// <summary>
        /// Backing field for UseFaxPrintingSRadioButton property
        /// </summary>
        private RadioButton fUseFaxPrintingSRadioButton;

        /// <summary>
        /// Backing field for UseFaxPrintingSText property
        /// </summary>
        private Text fUseFaxPrintingSText;

        /// <summary>
        /// Backing field for ChangePINButtonButton property
        /// </summary>
        private Button fChangePINButtonButton;

        /// <summary>
        /// Backing field for ListView574cc24DataGrid property
        /// </summary>
        private DataGrid fListView574cc24DataGrid;

        /// <summary>
        /// Backing field for GridViewHeaderRDup1Header property
        /// </summary>
        private Header fGridViewHeaderRDup1Header;

        /// <summary>
        /// Backing field for AddButton8fb8fcButton property
        /// </summary>
        private Button fAddButton8fb8fcButton;

        /// <summary>
        /// Backing field for AddTextBlockDup1Text property
        /// </summary>
        private Text fAddTextBlockDup1Text;

        /// <summary>
        /// Backing field for EditButtonf3f53Button property
        /// </summary>
        private Button fEditButtonf3f53Button;

        /// <summary>
        /// Backing field for EditTextBlockDup1Text property
        /// </summary>
        private Text fEditTextBlockDup1Text;

        /// <summary>
        /// Backing field for RemoveButtonadaButton property
        /// </summary>
        private Button fRemoveButtonadaButton;

        /// <summary>
        /// Backing field for RemoveTextBlockDup1Text property
        /// </summary>
        private Text fRemoveTextBlockDup1Text;

        /// <summary>
        /// Backing field for StartPrintingFaText property
        /// </summary>
        private Text fStartPrintingFaText;

        /// <summary>
        /// Backing field for WindowsFormsHosDup0Pane property
        /// </summary>
        private Pane fWindowsFormsHosDup0Pane;

        /// <summary>
        /// Backing field for StartStoringFaxText property
        /// </summary>
        private Text fStartStoringFaxText;

        /// <summary>
        /// Backing field for WindowsFormsHosDup1Pane property
        /// </summary>
        private Pane fWindowsFormsHosDup1Pane;

        /// <summary>
        /// Backing field for WeekdaysText property
        /// </summary>
        private Text fWeekdaysText;

        /// <summary>
        /// Backing field for SundayCheckBox4CheckBox property
        /// </summary>
        private CheckBox fSundayCheckBox4CheckBox;

        /// <summary>
        /// Backing field for MondayCheckBoxbCheckBox property
        /// </summary>
        private CheckBox fMondayCheckBoxbCheckBox;

        /// <summary>
        /// Backing field for TuesdayCheckBoxCheckBox property
        /// </summary>
        private CheckBox fTuesdayCheckBoxCheckBox;

        /// <summary>
        /// Backing field for WednesdayCheckBCheckBox property
        /// </summary>
        private CheckBox fWednesdayCheckBCheckBox;

        /// <summary>
        /// Backing field for ThursdayCheckBoCheckBox property
        /// </summary>
        private CheckBox fThursdayCheckBoCheckBox;

        /// <summary>
        /// Backing field for FridayCheckBox2CheckBox property
        /// </summary>
        private CheckBox fFridayCheckBox2CheckBox;

        /// <summary>
        /// Backing field for SaturdayCheckBoCheckBox property
        /// </summary>
        private CheckBox fSaturdayCheckBoCheckBox;

        /// <summary>
        /// Backing field for ApplySecurityPICheckBox property
        /// </summary>
        private CheckBox fApplySecurityPICheckBox;

        /// <summary>
        /// Backing field for BlockedFaxListGGroup property
        /// </summary>
        private Group fBlockedFaxListGGroup;

        /// <summary>
        /// Backing field for BlockedFaxListTText property
        /// </summary>
        private Text fBlockedFaxListTText;

        /// <summary>
        /// Backing field for FaxNumberText property
        /// </summary>
        private Text fFaxNumberText;

        /// <summary>
        /// Backing field for FaxNumberTextBlText property
        /// </summary>
        private Text fFaxNumberTextBlText;

        /// <summary>
        /// Backing field for TextBoxae8e8d00Edit property
        /// </summary>
        private Edit fTextBoxae8e8d00Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup7Pane property
        /// </summary>
        private Pane fScrollViewerPARDup7Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup6ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup6ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup6ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup6ScrollBar;

        /// <summary>
        /// Backing field for AddButton5b8232Button property
        /// </summary>
        private Button fAddButton5b8232Button;

        /// <summary>
        /// Backing field for AddTextBlockDup2Text property
        /// </summary>
        private Text fAddTextBlockDup2Text;

        /// <summary>
        /// Backing field for ListViewc9666efDataGrid property
        /// </summary>
        private DataGrid fListViewc9666efDataGrid;

        /// <summary>
        /// Backing field for GridViewHeaderRDup2Header property
        /// </summary>
        private Header fGridViewHeaderRDup2Header;

        /// <summary>
        /// Backing field for BlockedFaxNumbeHeaderItem property
        /// </summary>
        private HeaderItem fBlockedFaxNumbeHeaderItem;

        /// <summary>
        /// Backing field for FaxArchiveandFoGroup property
        /// </summary>
        private Group fFaxArchiveandFoGroup;

        /// <summary>
        /// Backing field for FaxArchiveandFoText property
        /// </summary>
        private Text fFaxArchiveandFoText;

        /// <summary>
        /// Backing field for FaxArchiveGroupGroup property
        /// </summary>
        private Group fFaxArchiveGroupGroup;

        /// <summary>
        /// Backing field for FaxArchiveTextBText property
        /// </summary>
        private Text fFaxArchiveTextBText;

        /// <summary>
        /// Backing field for FaxArchivingText property
        /// </summary>
        private Text fFaxArchivingText;

        /// <summary>
        /// Backing field for FaxArchivingTexText property
        /// </summary>
        private Text fFaxArchivingTexText;

        /// <summary>
        /// Backing field for ComboBoxb3815a5ComboBox property
        /// </summary>
        private ComboBox fComboBoxb3815a5ComboBox;

        /// <summary>
        /// Backing field for ArchiveDestinatText property
        /// </summary>
        private Text fArchiveDestinatText;

        /// <summary>
        /// Backing field for ComboBox3304e41ComboBox property
        /// </summary>
        private ComboBox fComboBox3304e41ComboBox;

        /// <summary>
        /// Backing field for EmailAddressText property
        /// </summary>
        private Text fEmailAddressText;

        /// <summary>
        /// Backing field for TextBoxd4d9966cEdit property
        /// </summary>
        private Edit fTextBoxd4d9966cEdit;

        /// <summary>
        /// Backing field for TypeoffaxjobtoaText property
        /// </summary>
        private Text fTypeoffaxjobtoaText;

        /// <summary>
        /// Backing field for ComboBoxeccf383ComboBox property
        /// </summary>
        private ComboBox fComboBoxeccf383ComboBox;

        /// <summary>
        /// Backing field for FTPServerGroupBGroup property
        /// </summary>
        private Group fFTPServerGroupBGroup;

        /// <summary>
        /// Backing field for FolderSettingsGGroup property
        /// </summary>
        private Group fFolderSettingsGGroup;

        /// <summary>
        /// Backing field for OutgoingEmailSeGroup property
        /// </summary>
        private Group fOutgoingEmailSeGroup;

        /// <summary>
        /// Backing field for FaxForwardingGrGroup property
        /// </summary>
        private Group fFaxForwardingGrGroup;

        /// <summary>
        /// Backing field for FaxForwardingTeText property
        /// </summary>
        private Text fFaxForwardingTeText;

        /// <summary>
        /// Backing field for EnableFaxForwarCheckBox property
        /// </summary>
        private CheckBox fEnableFaxForwarCheckBox;

        /// <summary>
        /// Backing field for EnableFaxForwarText property
        /// </summary>
        private Text fEnableFaxForwarText;

        /// <summary>
        /// Backing field for TypeoffaxjobtofDup0Text property
        /// </summary>
        private Text fTypeoffaxjobtofDup0Text;

        /// <summary>
        /// Backing field for TypeoffaxjobtofDup1Text property
        /// </summary>
        private Text fTypeoffaxjobtofDup1Text;

        /// <summary>
        /// Backing field for ComboBox89bd0daComboBox property
        /// </summary>
        private ComboBox fComboBox89bd0daComboBox;

        /// <summary>
        /// Backing field for ForwardingNumbeDup0Text property
        /// </summary>
        private Text fForwardingNumbeDup0Text;

        /// <summary>
        /// Backing field for ForwardingNumbeDup1Text property
        /// </summary>
        private Text fForwardingNumbeDup1Text;

        /// <summary>
        /// Backing field for TextBoxcfbe8f25Edit property
        /// </summary>
        private Edit fTextBoxcfbe8f25Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup8Pane property
        /// </summary>
        private Pane fScrollViewerPARDup8Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup7ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup7ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup7ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup7ScrollBar;

        /// <summary>
        /// Backing field for TroubleshootingGroup property
        /// </summary>
        private Group fTroubleshootingGroup;

        /// <summary>
        /// Backing field for ReportsandInterGroup property
        /// </summary>
        private Group fReportsandInterGroup;

        /// <summary>
        /// Backing field for FaxActivityLogGGroup property
        /// </summary>
        private Group fFaxActivityLogGGroup;

        /// <summary>
        /// Backing field for FaxActivityLogTText property
        /// </summary>
        private Text fFaxActivityLogTText;

        /// <summary>
        /// Backing field for PrintActivityLoButton property
        /// </summary>
        private Button fPrintActivityLoButton;

        /// <summary>
        /// Backing field for PrintActivityLoText property
        /// </summary>
        private Text fPrintActivityLoText;

        /// <summary>
        /// Backing field for ClearActivityLoButton property
        /// </summary>
        private Button fClearActivityLoButton;

        /// <summary>
        /// Backing field for ClearActivityLoText property
        /// </summary>
        private Text fClearActivityLoText;

        /// <summary>
        /// Backing field for ConfigurationavText property
        /// </summary>
        private Text fConfigurationavText;

        /// <summary>
        /// Backing field for ScrollBarVerticDup8ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup8ScrollBar;

        /// <summary>
        /// Backing field for RepeatButtonLinDup2Button property
        /// </summary>
        private Button fRepeatButtonLinDup2Button;

        /// <summary>
        /// Backing field for RepeatButtonPagDup2Button property
        /// </summary>
        private Button fRepeatButtonPagDup2Button;

        /// <summary>
        /// Backing field for RepeatButtonPagDup3Button property
        /// </summary>
        private Button fRepeatButtonPagDup3Button;

        /// <summary>
        /// Backing field for ThumbDup1Thumb property
        /// </summary>
        private Thumb fThumbDup1Thumb;

        /// <summary>
        /// Backing field for RepeatButtonLinDup3Button property
        /// </summary>
        private Button fRepeatButtonLinDup3Button;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup8ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup8ScrollBar;

        /// <summary>
        /// Backing field for SystemWindowsCoDup4TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup4TabItem;

        /// <summary>
        /// Backing field for SendtoFolderTexDup0Text property
        /// </summary>
        private Text fSendtoFolderTexDup0Text;

        /// <summary>
        /// Backing field for SendtoFolderTexDup1Text property
        /// </summary>
        private Text fSendtoFolderTexDup1Text;

        /// <summary>
        /// Backing field for Texta7a758d4d75Text property
        /// </summary>
        private Text fTexta7a758d4d75Text;

        /// <summary>
        /// Backing field for Texte95b3491f6bText property
        /// </summary>
        private Text fTexte95b3491f6bText;

        /// <summary>
        /// Backing field for ProgressBar9a14ProgressBar property
        /// </summary>
        private ProgressBar fProgressBar9a14ProgressBar;

        /// <summary>
        /// Backing field for SystemWindowsCoDup5TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup5TabItem;

        /// <summary>
        /// Backing field for SendtoWorkflowsDup0Text property
        /// </summary>
        private Text fSendtoWorkflowsDup0Text;

        /// <summary>
        /// Backing field for SendtoWorkflowsDup1Text property
        /// </summary>
        private Text fSendtoWorkflowsDup1Text;

        /// <summary>
        /// Backing field for TextAA63352F914Text property
        /// </summary>
        private Text fTextAA63352F914Text;

        /// <summary>
        /// Backing field for TextB31E1B768A7Text property
        /// </summary>
        private Text fTextB31E1B768A7Text;

        /// <summary>
        /// Backing field for ProgressBar55dfProgressBar property
        /// </summary>
        private ProgressBar fProgressBar55dfProgressBar;

        /// <summary>
        /// Backing field for SystemWindowsCoDup6TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup6TabItem;

        /// <summary>
        /// Backing field for SendtoSharePoinDup0Text property
        /// </summary>
        private Text fSendtoSharePoinDup0Text;

        /// <summary>
        /// Backing field for SendtoSharePoinDup1Text property
        /// </summary>
        private Text fSendtoSharePoinDup1Text;

        /// <summary>
        /// Backing field for Text348fa329f78Text property
        /// </summary>
        private Text fText348fa329f78Text;

        /// <summary>
        /// Backing field for Text4bfa1a11126Text property
        /// </summary>
        private Text fText4bfa1a11126Text;

        /// <summary>
        /// Backing field for ProgressBard093ProgressBar property
        /// </summary>
        private ProgressBar fProgressBard093ProgressBar;

        /// <summary>
        /// Backing field for SystemWindowsCoDup7TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup7TabItem;

        /// <summary>
        /// Backing field for AddressingTextmDup0Text property
        /// </summary>
        private Text fAddressingTextmDup0Text;

        /// <summary>
        /// Backing field for AddressingTextBDup0Text property
        /// </summary>
        private Text fAddressingTextBDup0Text;

        /// <summary>
        /// Backing field for Text7a57f43ecb1Dup0Text property
        /// </summary>
        private Text fText7a57f43ecb1Dup0Text;

        /// <summary>
        /// Backing field for Text654b650dd19Dup0Text property
        /// </summary>
        private Text fText654b650dd19Dup0Text;

        /// <summary>
        /// Backing field for ProgressBar15a0ProgressBar property
        /// </summary>
        private ProgressBar fProgressBar15a0ProgressBar;

        /// <summary>
        /// Backing field for SystemWindowsCoDup8TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup8TabItem;

        /// <summary>
        /// Backing field for LogTextmLogTabLText property
        /// </summary>
        private Text fLogTextmLogTabLText;

        /// <summary>
        /// Backing field for LogTextBlockDup0Text property
        /// </summary>
        private Text fLogTextBlockDup0Text;

        /// <summary>
        /// Backing field for ProgressBarA997ProgressBar property
        /// </summary>
        private ProgressBar fProgressBarA997ProgressBar;

        /// <summary>
        /// Backing field for SystemWindowsCoDup9TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup9TabItem;

        /// <summary>
        /// Backing field for HPDigitalSendinTitleBar property
        /// </summary>
        private TitleBar fHPDigitalSendinTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup1MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup1MenuBar;

        /// <summary>
        /// Backing field for SystemItem1Dup1MenuItem property
        /// </summary>
        private MenuItem fSystemItem1Dup1MenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizDup1Button property
        /// </summary>
        private Button fMinimizeMinimizDup1Button;

        /// <summary>
        /// Backing field for RestoreRestoreButton property
        /// </summary>
        private Button fRestoreRestoreButton;

        /// <summary>
        /// Backing field for CloseCloseDup1Button property
        /// </summary>
        private Button fCloseCloseDup1Button;

        /// <summary>
        /// Backing field for HelpButtonCB8CFButton property
        /// </summary>
        private Button fHelpButtonCB8CFButton;

        /// <summary>
        /// Backing field for HelpTextBlockDup1Text property
        /// </summary>
        private Text fHelpTextBlockDup1Text;

        /// <summary>
        /// Backing field for ApplyButton property
        /// </summary>
        private Button fApplyButton61E2Button;

        /// <summary>
        /// Backing field for ApplyTextBlockDup1Text property
        /// </summary>
        private Text fApplyTextBlockDup1Text;

        /// <summary>
        /// Backing field for CancelButton65CButton property
        /// </summary>
        private Button fCancelButton65CButton;

        /// <summary>
        /// Backing field for CancelTextBlockDup1Text property
        /// </summary>
        private Text fCancelTextBlockDup1Text;

        /// <summary>
        /// Backing field for OKButton property
        /// </summary>
        private Button fOKButtonCC2EF49Button;

        /// <summary>
        /// Backing field for OKTextBlockDup1Text property
        /// </summary>
        private Text fOKTextBlockDup1Text;

        /// <summary>
        /// Backing field for TabControlec0fdTab property
        /// </summary>
        private Tab fTabControlec0fdTab;

        /// <summary>
        /// Backing field for SystemWindowsCoDup10TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup10TabItem;

        /// <summary>
        /// Backing field for GeneralTextmGenDup1Text property
        /// </summary>
        private Text fGeneralTextmGenDup1Text;

        /// <summary>
        /// Backing field for GeneralTextBlocDup1Text property
        /// </summary>
        private Text fGeneralTextBlocDup1Text;

        /// <summary>
        /// Backing field for Text933345b04e3Text property
        /// </summary>
        private Text fText933345b04e3Text;

        /// <summary>
        /// Backing field for Text786caf67344Text property
        /// </summary>
        private Text fText786caf67344Text;

        /// <summary>
        /// Backing field for SystemWindowsCoDup11TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup11TabItem;

        /// <summary>
        /// Backing field for AuthenticationTDup2Text property
        /// </summary>
        private Text fAuthenticationTDup2Text;

        /// <summary>
        /// Backing field for AuthenticationTDup3Text property
        /// </summary>
        private Text fAuthenticationTDup3Text;

        /// <summary>
        /// Backing field for Text31EC91730B9Text property
        /// </summary>
        private Text fText31EC91730B9Text;

        /// <summary>
        /// Backing field for TextA479C271445Text property
        /// </summary>
        private Text fTextA479C271445Text;

        /// <summary>
        /// Backing field for SystemWindowsCoDup12TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup12TabItem;

        /// <summary>
        /// Backing field for EmailTextmEmailText property
        /// </summary>
        private Text fEmailTextmEmailText;

        /// <summary>
        /// Backing field for EmailTextBlockText property
        /// </summary>
        private Text fEmailTextBlockText;

        /// <summary>
        /// Backing field for Text32de714a8bdText property
        /// </summary>
        private Text fText32de714a8bdText;

        /// <summary>
        /// Backing field for Text3b2a8761f4fText property
        /// </summary>
        private Text fText3b2a8761f4fText;

        /// <summary>
        /// Backing field for TextBlockDup1Text property
        /// </summary>
        private Text fTextBlockDup1Text;

        /// <summary>
        /// Backing field for SystemWindowsCoDup13TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup13TabItem;

        /// <summary>
        /// Backing field for FaxTextmFaxTabLDup1Text property
        /// </summary>
        private Text fFaxTextmFaxTabLDup1Text;

        /// <summary>
        /// Backing field for FaxTextBlockDup1Text property
        /// </summary>
        private Text fFaxTextBlockDup1Text;

        /// <summary>
        /// Backing field for TextD1ED4F16F38Text property
        /// </summary>
        private Text fTextD1ED4F16F38Text;

        /// <summary>
        /// Backing field for Text7DDE04FD251Text property
        /// </summary>
        private Text fText7DDE04FD251Text;

        /// <summary>
        /// Backing field for SystemWindowsCoDup14TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup14TabItem;

        /// <summary>
        /// Backing field for SendtoFolderTexDup2Text property
        /// </summary>
        private Text fSendtoFolderTexDup2Text;

        /// <summary>
        /// Backing field for SendtoFolderTexDup3Text property
        /// </summary>
        private Text fSendtoFolderTexDup3Text;

        /// <summary>
        /// Backing field for Text7a57f43ecb1Dup1Text property
        /// </summary>
        private Text fText7a57f43ecb1Dup1Text;

        /// <summary>
        /// Backing field for Text654b650dd19Dup1Text property
        /// </summary>
        private Text fText654b650dd19Dup1Text;

        /// <summary>
        /// Backing field for SystemWindowsCoDup15TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup15TabItem;

        /// <summary>
        /// Backing field for WorkflowsTextmWText property
        /// </summary>
        private Text fWorkflowsTextmWText;

        /// <summary>
        /// Backing field for WorkflowsTextBlText property
        /// </summary>
        private Text fWorkflowsTextBlText;

        /// <summary>
        /// Backing field for Text22D9C34E84CText property
        /// </summary>
        private Text fText22D9C34E84CText;

        /// <summary>
        /// Backing field for TextC8D15BD39C8Text property
        /// </summary>
        private Text fTextC8D15BD39C8Text;

        /// <summary>
        /// Backing field for SystemWindowsCoDup16TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup16TabItem;

        /// <summary>
        /// Backing field for AddressingTextmDup1Text property
        /// </summary>
        private Text fAddressingTextmDup1Text;

        /// <summary>
        /// Backing field for AddressingTextBDup1Text property
        /// </summary>
        private Text fAddressingTextBDup1Text;

        /// <summary>
        /// Backing field for Text47EB5CBA4D1Text property
        /// </summary>
        private Text fText47EB5CBA4D1Text;

        /// <summary>
        /// Backing field for Text0757E148179Text property
        /// </summary>
        private Text fText0757E148179Text;

        /// <summary>
        /// Backing field for DeviceConfiguraTabItem property
        /// </summary>
        private TabItem fDeviceConfiguraTabItem;

        /// <summary>
        /// Backing field for DeviceConfiguraText property
        /// </summary>
        private Text fDeviceConfiguraText;

        /// <summary>
        /// Backing field for ServiceConfigurCustom property
        /// </summary>
        private Custom fServiceConfigurCustom;

        /// <summary>
        /// Backing field for GroupListText property
        /// </summary>
        private Text fGroupListText;

        /// <summary>
        /// Backing field for GroupListTextBlText property
        /// </summary>
        private Text fGroupListTextBlText;

        /// <summary>
        /// Backing field for DeviceGroupsText property
        /// </summary>
        private Text fDeviceGroupsText;

        /// <summary>
        /// Backing field for DeviceGroupsTexText property
        /// </summary>
        private Text fDeviceGroupsTexText;

        /// <summary>
        /// Backing field for TreeView1416BDETree property
        /// </summary>
        private Tree fTreeView1416BDETree;

        /// <summary>
        /// Backing field for AllDevicesTreeVTreeItem property
        /// </summary>
        private TreeItem fAllDevicesTreeVTreeItem;

        /// <summary>
        /// Backing field for ButtonExpanderButton property
        /// </summary>
        private Button fButtonExpanderButton;

        /// <summary>
        /// Backing field for AllDevicesTextBText property
        /// </summary>
        private Text fAllDevicesTextBText;

        /// <summary>
        /// Backing field for AddGroupButtonFButton property
        /// </summary>
        private Button fAddGroupButtonFButton;

        /// <summary>
        /// Backing field for AddGroupTextBloText property
        /// </summary>
        private Text fAddGroupTextBloText;

        /// <summary>
        /// Backing field for RemoveGroupButtButton property
        /// </summary>
        private Button fRemoveGroupButtButton;

        /// <summary>
        /// Backing field for RemoveGroupTextText property
        /// </summary>
        private Text fRemoveGroupTextText;

        /// <summary>
        /// Backing field for RenameButton261Button property
        /// </summary>
        private Button fRenameButton261Button;

        /// <summary>
        /// Backing field for RenameTextBlockText property
        /// </summary>
        private Text fRenameTextBlockText;

        /// <summary>
        /// Backing field for GridSplitterThumb property
        /// </summary>
        private Thumb fGridSplitterThumb;

        /// <summary>
        /// Backing field for DeviceListText property
        /// </summary>
        private Text fDeviceListText;

        /// <summary>
        /// Backing field for DeviceListTextBText property
        /// </summary>
        private Text fDeviceListTextBText;

        /// <summary>
        /// Backing field for ListView141cb8bDataGrid property
        /// </summary>
        private DataGrid fListView141cb8bDataGrid;

        /// <summary>
        /// Backing field for GridViewHeaderRDup3Header property
        /// </summary>
        private Header fGridViewHeaderRDup3Header;

        /// <summary>
        /// Backing field for StatusGridViewCHeaderItem property
        /// </summary>
        private HeaderItem fStatusGridViewCHeaderItem;

        /// <summary>
        /// Backing field for StatusTextBlockText property
        /// </summary>
        private Text fStatusTextBlockText;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup0Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup0Thumb;

        /// <summary>
        /// Backing field for NameGridViewColHeaderItem property
        /// </summary>
        private HeaderItem fNameGridViewColHeaderItem;

        /// <summary>
        /// Backing field for NameTextBlockText property
        /// </summary>
        private Text fNameTextBlockText;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup1Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup1Thumb;

        /// <summary>
        /// Backing field for GridViewColumnHDup0HeaderItem property
        /// </summary>
        private HeaderItem fGridViewColumnHDup0HeaderItem;

        /// <summary>
        /// Backing field for ImageDup0Image property
        /// </summary>
        private Image fImageDup0Image;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup2Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup2Thumb;

        /// <summary>
        /// Backing field for GridViewColumnHDup1HeaderItem property
        /// </summary>
        private HeaderItem fGridViewColumnHDup1HeaderItem;

        /// <summary>
        /// Backing field for ImageDup1Image property
        /// </summary>
        private Image fImageDup1Image;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup3Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup3Thumb;

        /// <summary>
        /// Backing field for GridViewColumnHDup2HeaderItem property
        /// </summary>
        private HeaderItem fGridViewColumnHDup2HeaderItem;

        /// <summary>
        /// Backing field for ImageDup2Image property
        /// </summary>
        private Image fImageDup2Image;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup4Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup4Thumb;

        /// <summary>
        /// Backing field for GridViewColumnHDup3HeaderItem property
        /// </summary>
        private HeaderItem fGridViewColumnHDup3HeaderItem;

        /// <summary>
        /// Backing field for ImageDup3Image property
        /// </summary>
        private Image fImageDup3Image;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup5Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup5Thumb;

        /// <summary>
        /// Backing field for GridViewColumnHDup4HeaderItem property
        /// </summary>
        private HeaderItem fGridViewColumnHDup4HeaderItem;

        /// <summary>
        /// Backing field for ImageDup4Image property
        /// </summary>
        private Image fImageDup4Image;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup6Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup6Thumb;

        /// <summary>
        /// Backing field for GridViewColumnHDup5HeaderItem property
        /// </summary>
        private HeaderItem fGridViewColumnHDup5HeaderItem;

        /// <summary>
        /// Backing field for ImageDup5Image property
        /// </summary>
        private Image fImageDup5Image;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup7Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup7Thumb;

        /// <summary>
        /// Backing field for ModelGridViewCoHeaderItem property
        /// </summary>
        private HeaderItem fModelGridViewCoHeaderItem;

        /// <summary>
        /// Backing field for ModelTextBlockText property
        /// </summary>
        private Text fModelTextBlockText;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup8Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup8Thumb;

        /// <summary>
        /// Backing field for IPAddressGridViHeaderItem property
        /// </summary>
        private HeaderItem fIPAddressGridViHeaderItem;

        /// <summary>
        /// Backing field for IPAddressTextBlText property
        /// </summary>
        private Text fIPAddressTextBlText;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup9Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup9Thumb;

        /// <summary>
        /// Backing field for HostnameGridVieHeaderItem property
        /// </summary>
        private HeaderItem fHostnameGridVieHeaderItem;

        /// <summary>
        /// Backing field for HostnameTextBloText property
        /// </summary>
        private Text fHostnameTextBloText;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup10Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup10Thumb;

        /// <summary>
        /// Backing field for DescriptionGridHeaderItem property
        /// </summary>
        private HeaderItem fDescriptionGridHeaderItem;

        /// <summary>
        /// Backing field for DescriptionTextText property
        /// </summary>
        private Text fDescriptionTextText;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup11Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup11Thumb;

        /// <summary>
        /// Backing field for FirmwareGridVieHeaderItem property
        /// </summary>
        private HeaderItem fFirmwareGridVieHeaderItem;

        /// <summary>
        /// Backing field for FirmwareTextBloText property
        /// </summary>
        private Text fFirmwareTextBloText;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup12Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup12Thumb;

        /// <summary>
        /// Backing field for bound101112170eDataItem property
        /// </summary>
        private DataItem fbound101112170eDataItem;

        /// <summary>
        /// Backing field for ContentPresenteDup0I0XCustom property
        /// </summary>
        private Custom fContentPresenteDup0I0XCustom;

        /// <summary>
        /// Backing field for Image84ACE29E0AImage property
        /// </summary>
        private Image fImage84ACE29E0AImage;

        /// <summary>
        /// Backing field for WaitSpinnerUserCustom property
        /// </summary>
        private Custom fWaitSpinnerUserCustom;

        /// <summary>
        /// Backing field for ImagemWaitSpinnImage property
        /// </summary>
        private Image fImagemWaitSpinnImage;

        /// <summary>
        /// Backing field for HPOfficejetColoDup0I0XText property
        /// </summary>
        private Text fHPOfficejetColoDup0I0XText;

        /// <summary>
        /// Backing field for ContentPresenteDup1I1XCustom property
        /// </summary>
        private Custom fContentPresenteDup1I1XCustom;

        /// <summary>
        /// Backing field for Image844100985AImage property
        /// </summary>
        private Image fImage844100985AImage;

        /// <summary>
        /// Backing field for ContentPresenteDup2I2XCustom property
        /// </summary>
        private Custom fContentPresenteDup2I2XCustom;

        /// <summary>
        /// Backing field for Image20F9A92A96Image property
        /// </summary>
        private Image fImage20F9A92A96Image;

        /// <summary>
        /// Backing field for ContentPresenteDup3I3XCustom property
        /// </summary>
        private Custom fContentPresenteDup3I3XCustom;

        /// <summary>
        /// Backing field for ImageCA1843E8BFImage property
        /// </summary>
        private Image fImageCA1843E8BFImage;

        /// <summary>
        /// Backing field for ContentPresenteDup4I4XCustom property
        /// </summary>
        private Custom fContentPresenteDup4I4XCustom;

        /// <summary>
        /// Backing field for ImageE24499D7C0Image property
        /// </summary>
        private Image fImageE24499D7C0Image;

        /// <summary>
        /// Backing field for ContentPresenteDup5I5XCustom property
        /// </summary>
        private Custom fContentPresenteDup5I5XCustom;

        /// <summary>
        /// Backing field for Image86A371F7F4Image property
        /// </summary>
        private Image fImage86A371F7F4Image;

        /// <summary>
        /// Backing field for ContentPresenteDup6I6XCustom property
        /// </summary>
        private Custom fContentPresenteDup6I6XCustom;

        /// <summary>
        /// Backing field for Image1D2DC29B85Image property
        /// </summary>
        private Image fImage1D2DC29B85Image;

        /// <summary>
        /// Backing field for HPOfficejetColoDup1I1XText property
        /// </summary>
        private Text fHPOfficejetColoDup1I1XText;

        /// <summary>
        /// Backing field for A101112170TextBText property
        /// </summary>
        private Text fA101112170TextBText;

        /// <summary>
        /// Backing field for TextBlockDup2Text property
        /// </summary>
        private Text fTextBlockDup2Text;

        /// <summary>
        /// Backing field for HPOfficejetColoDup2I2XText property
        /// </summary>
        private Text fHPOfficejetColoDup2I2XText;

        /// <summary>
        /// Backing field for FutureSmart3372Text property
        /// </summary>
        private Text fFutureSmart3372Text;

        /// <summary>
        /// Backing field for AddDeviceButtonButton property
        /// </summary>
        private Button fAddDeviceButtonButton;

        /// <summary>
        /// Backing field for AddDeviceTextBlText property
        /// </summary>
        private Text fAddDeviceTextBlText;

        /// <summary>
        /// Backing field for ExportButtonef5Button property
        /// </summary>
        private Button fExportButtonef5Button;

        /// <summary>
        /// Backing field for ExportTextBlockText property
        /// </summary>
        private Text fExportTextBlockText;

        /// <summary>
        /// Backing field for RemoveDeviceButButton property
        /// </summary>
        private Button fRemoveDeviceButButton;

        /// <summary>
        /// Backing field for RemoveDeviceTexText property
        /// </summary>
        private Text fRemoveDeviceTexText;

        /// <summary>
        /// Backing field for ImportButtona69Button property
        /// </summary>
        private Button fImportButtona69Button;

        /// <summary>
        /// Backing field for ImportTextBlockText property
        /// </summary>
        private Text fImportTextBlockText;

        /// <summary>
        /// Backing field for CreateTemplateBButton property
        /// </summary>
        private Button fCreateTemplateBButton;

        /// <summary>
        /// Backing field for CreateTemplateTText property
        /// </summary>
        private Text fCreateTemplateTText;

        /// <summary>
        /// Backing field for DeviceSignInButButton property
        /// </summary>
        private Button fDeviceSignInButButton;

        /// <summary>
        /// Backing field for DeviceSignInTexText property
        /// </summary>
        private Text fDeviceSignInTexText;

        /// <summary>
        /// Backing field for TotalDevicesText property
        /// </summary>
        private Text fTotalDevicesText;

        /// <summary>
        /// Backing field for TotalDevicesTexText property
        /// </summary>
        private Text fTotalDevicesTexText;

        /// <summary>
        /// Backing field for A1Text82f844376Text property
        /// </summary>
        private Text fA1Text82f844376Text;

        /// <summary>
        /// Backing field for A1TextBlockText property
        /// </summary>
        private Text fA1TextBlockText;

        /// <summary>
        /// Backing field for ConfigureDeviceButton property
        /// </summary>
        private Button fConfigureDeviceButton;

        /// <summary>
        /// Backing field for ConfigureDeviceText property
        /// </summary>
        private Text fConfigureDeviceText;

        /// <summary>
        /// Backing field for TemplateConfiguTabItem property
        /// </summary>
        private TabItem fTemplateConfiguTabItem;

        /// <summary>
        /// Backing field for TemplateConfiguText property
        /// </summary>
        private Text fTemplateConfiguText;

        /// <summary>
        /// Backing field for LogTabItem9b4f3TabItem property
        /// </summary>
        private TabItem fLogTabItem9b4f3TabItem;

        /// <summary>
        /// Backing field for LogTextBlockDup1Text property
        /// </summary>
        private Text fLogTextBlockDup1Text;

        /// <summary>
        /// Backing field for SystemWindowsCoDup17TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup17TabItem;

        /// <summary>
        /// Backing field for SecurityTextmSeText property
        /// </summary>
        private Text fSecurityTextmSeText;

        /// <summary>
        /// Backing field for SecurityTextBloText property
        /// </summary>
        private Text fSecurityTextBloText;

        /// <summary>
        /// Backing field for Text8A7A84DB894Text property
        /// </summary>
        private Text fText8A7A84DB894Text;

        /// <summary>
        /// Backing field for Text16F78FB18FFText property
        /// </summary>
        private Text fText16F78FB18FFText;

        /// <summary>
        /// Backing field for SystemWindowsCoDup18TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup18TabItem;

        /// <summary>
        /// Backing field for AnalyticsTextmAText property
        /// </summary>
        private Text fAnalyticsTextmAText;

        /// <summary>
        /// Backing field for AnalyticsTextBlText property
        /// </summary>
        private Text fAnalyticsTextBlText;

        /// <summary>
        /// Backing field for AboutTabItemf45TabItem property
        /// </summary>
        private TabItem fAboutTabItemf45TabItem;

        /// <summary>
        /// Backing field for AboutTextBlockText property
        /// </summary>
        private Text fAboutTextBlockText;

        /// <summary>
        /// The Server Ip
        /// </summary>
        private string _serverIP;

        /// <summary>
        /// The Device Ip
        /// </summary>
        private string _deviceIP;

        /// <summary>
        /// The Device Model Name
        /// </summary>
        private string _deviceModelName;

        /// <summary>
        /// Initializes a new instance of the <see cref="DSS_FaxForDevice"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public DSS_FaxForDevice(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSS_FaxForDevice"/> class using the default UIAFramework.
        /// </summary>
        /// <param name="address">
        /// The server IP address.
        /// </param>
        public DSS_FaxForDevice(string address)
        {
            Desktop = new Desktop(UIAFramework.ManagedUIA);
            _serverIP = address;
           // ContextMenuItem = new ContextMenu(address);
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="DSS_FaxForDevice"/> class using the default UIAFramework.
        /// </summary>
        public DSS_FaxForDevice()
        {
            Desktop = new Desktop();
        }

        /// <summary>
        /// Sets the Device Info
        /// </summary>
        /// <param name="deviceAddress">
        /// The device address
        /// </param>
        /// <param name="deviceModelName">
        /// The device Model Name
        /// </param>
        public void SetDeviceInfo(string deviceAddress, string deviceModelName)
        {
            _deviceIP = deviceAddress;
            _deviceModelName = deviceModelName;
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }



        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinWindow
        {
            get
            {
                if (null == fHPDigitalSendinWindow)
                {
                    fHPDigitalSendinWindow = new Window("HPDigitalSendinWindow", Desktop);
                    fHPDigitalSendinWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AB81453F-68AD-4243-ACA8-B4D9362C4ED4");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software Configuration (Server IP Address: {_serverIP})");
                }

                return fHPDigitalSendinWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window ConfigureDeviceWindow
        {
            get
            {
                if (null == fConfigureDeviceWindow)
                {
                    fConfigureDeviceWindow = new Window("ConfigureDeviceWindow", HPDigitalSendinWindow);
                    fConfigureDeviceWindow.UIMap.Scope = UIASeachScope.Children;
                    fConfigureDeviceWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fConfigureDeviceWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1fbfa621-ccac-42b3-8f91-9f2632ec1d89");
                }

                return fConfigureDeviceWindow;
            }
        }

        public Window ContinuePromptWindow
        {
            get
            {
                if (null == fWindow336E32508Window)
                {
                    fWindow336E32508Window = new Window("Window336E32508Window", HPDigitalSendinWindow);
                    fWindow336E32508Window.UIMap.Scope = UIASeachScope.Children;
                    fWindow336E32508Window.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fWindow336E32508Window.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"336E3250-8749-475d-952F-E36223E36750");
                }

                return fWindow336E32508Window;
            }
        }

        public Button ContinueWindowYesButton
        {
            get
            {
                if (null == fYesButtonAE4B0CButton)
                {
                    fYesButtonAE4B0CButton = new Button("YesButtonAE4B0CButton", ContinuePromptWindow);
                    fYesButtonAE4B0CButton.UIMap.Scope = UIASeachScope.Children;
                    fYesButtonAE4B0CButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fYesButtonAE4B0CButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AE4B0C61-2DEE-4974-B517-4A1388A3F4CC");
                    fYesButtonAE4B0CButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Yes");
                }

                return fYesButtonAE4B0CButton;
            }
        }

        public Button ContinueWindowNoButton
        {
            get
            {
                if (null == fNoButtonF5DCA28Button)
                {
                    fNoButtonF5DCA28Button = new Button("NoButtonF5DCA28Button", ContinuePromptWindow);
                    fNoButtonF5DCA28Button.UIMap.Scope = UIASeachScope.Children;
                    fNoButtonF5DCA28Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fNoButtonF5DCA28Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"F5DCA28C-C6CD-4bdd-B906-8ED94DC15765");
                    fNoButtonF5DCA28Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"No");
                }

                return fNoButtonF5DCA28Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinDup1Window
        {
            get
            {
                if (null == fHPDigitalSendinDup1Window)
                {
                    fHPDigitalSendinDup1Window = new Window("HPDigitalSendinDup1Window", ConfigureDeviceWindow);
                    fHPDigitalSendinDup1Window.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinDup1Window.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalSendinDup1Window.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"336E3250-8749-475d-952F-E36223E36750");
                    fHPDigitalSendinDup1Window.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Digital Sending Software");
                }

                return fHPDigitalSendinDup1Window;
            }
        }



        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button DSSPromptOKButton
        {
            get
            {
                if (null == fOKButtonAE4B0C6Button)
                {
                    fOKButtonAE4B0C6Button = new Button("OKButtonAE4B0C6Button", HPDigitalSendinDup1Window);
                    fOKButtonAE4B0C6Button.UIMap.Scope = UIASeachScope.Children;
                    fOKButtonAE4B0C6Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButtonAE4B0C6Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AE4B0C61-2DEE-4974-B517-4A1388A3F4CC");
                    fOKButtonAE4B0C6Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButtonAE4B0C6Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window PopupWindow
        {
            get
            {
                if (null == fPopupWindow)
                {
                    fPopupWindow = new Window("PopupWindow", ConfigureDeviceWindow);
                    fPopupWindow.UIMap.Scope = UIASeachScope.Children;
                    fPopupWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Popup");
                }

                return fPopupWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerDroPane
        {
            get
            {
                if (null == fScrollViewerDroPane)
                {
                    fScrollViewerDroPane = new Pane("ScrollViewerDroPane", PopupWindow);
                    fScrollViewerDroPane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerDroPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerDroPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"DropDownScrollViewer");
                }

                return fScrollViewerDroPane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem NoneListBoxItemDup0ListItem
        {
            get
            {
                if (null == fNoneListBoxItemDup0ListItem)
                {
                    fNoneListBoxItemDup0ListItem = new ListItem("NoneListBoxItemDup0ListItem", ScrollViewerDroPane);
                    fNoneListBoxItemDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fNoneListBoxItemDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fNoneListBoxItemDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"None");
                }

                return fNoneListBoxItemDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NoneTextBlockText
        {
            get
            {
                if (null == fNoneTextBlockText)
                {
                    fNoneTextBlockText = new Text("NoneTextBlockText", NoneListBoxItemDup0ListItem);
                    fNoneTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fNoneTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fNoneTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"None");
                }

                return fNoneTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem ArgentinaListBoDup0ListItem
        {
            get
            {
                if (null == fArgentinaListBoDup0ListItem)
                {
                    fArgentinaListBoDup0ListItem = new ListItem("ArgentinaListBoDup0ListItem", ScrollViewerDroPane);
                    fArgentinaListBoDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fArgentinaListBoDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fArgentinaListBoDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Argentina");
                }

                return fArgentinaListBoDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ArgentinaTextBlText
        {
            get
            {
                if (null == fArgentinaTextBlText)
                {
                    fArgentinaTextBlText = new Text("ArgentinaTextBlText", ArgentinaListBoDup0ListItem);
                    fArgentinaTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fArgentinaTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fArgentinaTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Argentina");
                }

                return fArgentinaTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem AustraliaListBoDup0ListItem
        {
            get
            {
                if (null == fAustraliaListBoDup0ListItem)
                {
                    fAustraliaListBoDup0ListItem = new ListItem("AustraliaListBoDup0ListItem", ScrollViewerDroPane);
                    fAustraliaListBoDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fAustraliaListBoDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fAustraliaListBoDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Australia");
                }

                return fAustraliaListBoDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AustraliaTextBlText
        {
            get
            {
                if (null == fAustraliaTextBlText)
                {
                    fAustraliaTextBlText = new Text("AustraliaTextBlText", AustraliaListBoDup0ListItem);
                    fAustraliaTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fAustraliaTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAustraliaTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Australia");
                }

                return fAustraliaTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem AustriaListBoxIDup0ListItem
        {
            get
            {
                if (null == fAustriaListBoxIDup0ListItem)
                {
                    fAustriaListBoxIDup0ListItem = new ListItem("AustriaListBoxIDup0ListItem", ScrollViewerDroPane);
                    fAustriaListBoxIDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fAustriaListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fAustriaListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Austria");
                }

                return fAustriaListBoxIDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AustriaTextBlocText
        {
            get
            {
                if (null == fAustriaTextBlocText)
                {
                    fAustriaTextBlocText = new Text("AustriaTextBlocText", AustriaListBoxIDup0ListItem);
                    fAustriaTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fAustriaTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAustriaTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Austria");
                }

                return fAustriaTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem BelarusListBoxIDup0ListItem
        {
            get
            {
                if (null == fBelarusListBoxIDup0ListItem)
                {
                    fBelarusListBoxIDup0ListItem = new ListItem("BelarusListBoxIDup0ListItem", ScrollViewerDroPane);
                    fBelarusListBoxIDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fBelarusListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fBelarusListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Belarus");
                }

                return fBelarusListBoxIDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text BelarusTextBlocText
        {
            get
            {
                if (null == fBelarusTextBlocText)
                {
                    fBelarusTextBlocText = new Text("BelarusTextBlocText", BelarusListBoxIDup0ListItem);
                    fBelarusTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fBelarusTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fBelarusTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Belarus");
                }

                return fBelarusTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem BelgiumListBoxIDup0ListItem
        {
            get
            {
                if (null == fBelgiumListBoxIDup0ListItem)
                {
                    fBelgiumListBoxIDup0ListItem = new ListItem("BelgiumListBoxIDup0ListItem", ScrollViewerDroPane);
                    fBelgiumListBoxIDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fBelgiumListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fBelgiumListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Belgium");
                }

                return fBelgiumListBoxIDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text BelgiumTextBlocText
        {
            get
            {
                if (null == fBelgiumTextBlocText)
                {
                    fBelgiumTextBlocText = new Text("BelgiumTextBlocText", BelgiumListBoxIDup0ListItem);
                    fBelgiumTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fBelgiumTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fBelgiumTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Belgium");
                }

                return fBelgiumTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem BrazilListBoxItDup0ListItem
        {
            get
            {
                if (null == fBrazilListBoxItDup0ListItem)
                {
                    fBrazilListBoxItDup0ListItem = new ListItem("BrazilListBoxItDup0ListItem", ScrollViewerDroPane);
                    fBrazilListBoxItDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fBrazilListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fBrazilListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brazil");
                }

                return fBrazilListBoxItDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text BrazilTextBlockText
        {
            get
            {
                if (null == fBrazilTextBlockText)
                {
                    fBrazilTextBlockText = new Text("BrazilTextBlockText", BrazilListBoxItDup0ListItem);
                    fBrazilTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fBrazilTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fBrazilTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brazil");
                }

                return fBrazilTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem BulgariaListBoxDup0ListItem
        {
            get
            {
                if (null == fBulgariaListBoxDup0ListItem)
                {
                    fBulgariaListBoxDup0ListItem = new ListItem("BulgariaListBoxDup0ListItem", ScrollViewerDroPane);
                    fBulgariaListBoxDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fBulgariaListBoxDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fBulgariaListBoxDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Bulgaria");
                }

                return fBulgariaListBoxDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text BulgariaTextBloText
        {
            get
            {
                if (null == fBulgariaTextBloText)
                {
                    fBulgariaTextBloText = new Text("BulgariaTextBloText", BulgariaListBoxDup0ListItem);
                    fBulgariaTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fBulgariaTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fBulgariaTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Bulgaria");
                }

                return fBulgariaTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem CanadaListBoxItDup0ListItem
        {
            get
            {
                if (null == fCanadaListBoxItDup0ListItem)
                {
                    fCanadaListBoxItDup0ListItem = new ListItem("CanadaListBoxItDup0ListItem", ScrollViewerDroPane);
                    fCanadaListBoxItDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fCanadaListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fCanadaListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Canada");
                }

                return fCanadaListBoxItDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CanadaTextBlockText
        {
            get
            {
                if (null == fCanadaTextBlockText)
                {
                    fCanadaTextBlockText = new Text("CanadaTextBlockText", CanadaListBoxItDup0ListItem);
                    fCanadaTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fCanadaTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCanadaTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Canada");
                }

                return fCanadaTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem ChileListBoxIteDup0ListItem
        {
            get
            {
                if (null == fChileListBoxIteDup0ListItem)
                {
                    fChileListBoxIteDup0ListItem = new ListItem("ChileListBoxIteDup0ListItem", ScrollViewerDroPane);
                    fChileListBoxIteDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fChileListBoxIteDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fChileListBoxIteDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Chile");
                }

                return fChileListBoxIteDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ChileTextBlockText
        {
            get
            {
                if (null == fChileTextBlockText)
                {
                    fChileTextBlockText = new Text("ChileTextBlockText", ChileListBoxIteDup0ListItem);
                    fChileTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fChileTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fChileTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Chile");
                }

                return fChileTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem CroatiaListBoxIDup0ListItem
        {
            get
            {
                if (null == fCroatiaListBoxIDup0ListItem)
                {
                    fCroatiaListBoxIDup0ListItem = new ListItem("CroatiaListBoxIDup0ListItem", ScrollViewerDroPane);
                    fCroatiaListBoxIDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fCroatiaListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fCroatiaListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Croatia");
                }

                return fCroatiaListBoxIDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CroatiaTextBlocText
        {
            get
            {
                if (null == fCroatiaTextBlocText)
                {
                    fCroatiaTextBlocText = new Text("CroatiaTextBlocText", CroatiaListBoxIDup0ListItem);
                    fCroatiaTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fCroatiaTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCroatiaTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Croatia");
                }

                return fCroatiaTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem CzechRepublicLiDup0ListItem
        {
            get
            {
                if (null == fCzechRepublicLiDup0ListItem)
                {
                    fCzechRepublicLiDup0ListItem = new ListItem("CzechRepublicLiDup0ListItem", ScrollViewerDroPane);
                    fCzechRepublicLiDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fCzechRepublicLiDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fCzechRepublicLiDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Czech Republic");
                }

                return fCzechRepublicLiDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CzechRepublicTeText
        {
            get
            {
                if (null == fCzechRepublicTeText)
                {
                    fCzechRepublicTeText = new Text("CzechRepublicTeText", CzechRepublicLiDup0ListItem);
                    fCzechRepublicTeText.UIMap.Scope = UIASeachScope.Children;
                    fCzechRepublicTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCzechRepublicTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Czech Republic");
                }

                return fCzechRepublicTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem ChinaListBoxIteDup0ListItem
        {
            get
            {
                if (null == fChinaListBoxIteDup0ListItem)
                {
                    fChinaListBoxIteDup0ListItem = new ListItem("ChinaListBoxIteDup0ListItem", ScrollViewerDroPane);
                    fChinaListBoxIteDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fChinaListBoxIteDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fChinaListBoxIteDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"China");
                }

                return fChinaListBoxIteDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ChinaTextBlockText
        {
            get
            {
                if (null == fChinaTextBlockText)
                {
                    fChinaTextBlockText = new Text("ChinaTextBlockText", ChinaListBoxIteDup0ListItem);
                    fChinaTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fChinaTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fChinaTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"China");
                }

                return fChinaTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem DenmarkListBoxIDup0ListItem
        {
            get
            {
                if (null == fDenmarkListBoxIDup0ListItem)
                {
                    fDenmarkListBoxIDup0ListItem = new ListItem("DenmarkListBoxIDup0ListItem", ScrollViewerDroPane);
                    fDenmarkListBoxIDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fDenmarkListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fDenmarkListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Denmark");
                }

                return fDenmarkListBoxIDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DenmarkTextBlocText
        {
            get
            {
                if (null == fDenmarkTextBlocText)
                {
                    fDenmarkTextBlocText = new Text("DenmarkTextBlocText", DenmarkListBoxIDup0ListItem);
                    fDenmarkTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fDenmarkTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDenmarkTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Denmark");
                }

                return fDenmarkTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem EstoniaListBoxIDup0ListItem
        {
            get
            {
                if (null == fEstoniaListBoxIDup0ListItem)
                {
                    fEstoniaListBoxIDup0ListItem = new ListItem("EstoniaListBoxIDup0ListItem", ScrollViewerDroPane);
                    fEstoniaListBoxIDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fEstoniaListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fEstoniaListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Estonia");
                }

                return fEstoniaListBoxIDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EstoniaTextBlocText
        {
            get
            {
                if (null == fEstoniaTextBlocText)
                {
                    fEstoniaTextBlocText = new Text("EstoniaTextBlocText", EstoniaListBoxIDup0ListItem);
                    fEstoniaTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fEstoniaTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEstoniaTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Estonia");
                }

                return fEstoniaTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem FinlandListBoxIDup0ListItem
        {
            get
            {
                if (null == fFinlandListBoxIDup0ListItem)
                {
                    fFinlandListBoxIDup0ListItem = new ListItem("FinlandListBoxIDup0ListItem", ScrollViewerDroPane);
                    fFinlandListBoxIDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fFinlandListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fFinlandListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Finland");
                }

                return fFinlandListBoxIDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FinlandTextBlocText
        {
            get
            {
                if (null == fFinlandTextBlocText)
                {
                    fFinlandTextBlocText = new Text("FinlandTextBlocText", FinlandListBoxIDup0ListItem);
                    fFinlandTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fFinlandTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFinlandTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Finland");
                }

                return fFinlandTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem FranceListBoxItDup0ListItem
        {
            get
            {
                if (null == fFranceListBoxItDup0ListItem)
                {
                    fFranceListBoxItDup0ListItem = new ListItem("FranceListBoxItDup0ListItem", ScrollViewerDroPane);
                    fFranceListBoxItDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fFranceListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fFranceListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"France");
                }

                return fFranceListBoxItDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FranceTextBlockText
        {
            get
            {
                if (null == fFranceTextBlockText)
                {
                    fFranceTextBlockText = new Text("FranceTextBlockText", FranceListBoxItDup0ListItem);
                    fFranceTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fFranceTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFranceTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"France");
                }

                return fFranceTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem GermanyListBoxIDup0ListItem
        {
            get
            {
                if (null == fGermanyListBoxIDup0ListItem)
                {
                    fGermanyListBoxIDup0ListItem = new ListItem("GermanyListBoxIDup0ListItem", ScrollViewerDroPane);
                    fGermanyListBoxIDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fGermanyListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fGermanyListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Germany");
                }

                return fGermanyListBoxIDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GermanyTextBlocText
        {
            get
            {
                if (null == fGermanyTextBlocText)
                {
                    fGermanyTextBlocText = new Text("GermanyTextBlocText", GermanyListBoxIDup0ListItem);
                    fGermanyTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fGermanyTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fGermanyTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Germany");
                }

                return fGermanyTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem GreeceListBoxItDup0ListItem
        {
            get
            {
                if (null == fGreeceListBoxItDup0ListItem)
                {
                    fGreeceListBoxItDup0ListItem = new ListItem("GreeceListBoxItDup0ListItem", ScrollViewerDroPane);
                    fGreeceListBoxItDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fGreeceListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fGreeceListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Greece");
                }

                return fGreeceListBoxItDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GreeceTextBlockText
        {
            get
            {
                if (null == fGreeceTextBlockText)
                {
                    fGreeceTextBlockText = new Text("GreeceTextBlockText", GreeceListBoxItDup0ListItem);
                    fGreeceTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fGreeceTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fGreeceTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Greece");
                }

                return fGreeceTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem HongKongSARListDup0ListItem
        {
            get
            {
                if (null == fHongKongSARListDup0ListItem)
                {
                    fHongKongSARListDup0ListItem = new ListItem("HongKongSARListDup0ListItem", ScrollViewerDroPane);
                    fHongKongSARListDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fHongKongSARListDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fHongKongSARListDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Hong Kong SAR");
                }

                return fHongKongSARListDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HongKongSARTextText
        {
            get
            {
                if (null == fHongKongSARTextText)
                {
                    fHongKongSARTextText = new Text("HongKongSARTextText", HongKongSARListDup0ListItem);
                    fHongKongSARTextText.UIMap.Scope = UIASeachScope.Children;
                    fHongKongSARTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHongKongSARTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Hong Kong SAR");
                }

                return fHongKongSARTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem HungaryListBoxIDup0ListItem
        {
            get
            {
                if (null == fHungaryListBoxIDup0ListItem)
                {
                    fHungaryListBoxIDup0ListItem = new ListItem("HungaryListBoxIDup0ListItem", ScrollViewerDroPane);
                    fHungaryListBoxIDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fHungaryListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fHungaryListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Hungary");
                }

                return fHungaryListBoxIDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HungaryTextBlocText
        {
            get
            {
                if (null == fHungaryTextBlocText)
                {
                    fHungaryTextBlocText = new Text("HungaryTextBlocText", HungaryListBoxIDup0ListItem);
                    fHungaryTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fHungaryTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHungaryTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Hungary");
                }

                return fHungaryTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem IcelandListBoxIDup0ListItem
        {
            get
            {
                if (null == fIcelandListBoxIDup0ListItem)
                {
                    fIcelandListBoxIDup0ListItem = new ListItem("IcelandListBoxIDup0ListItem", ScrollViewerDroPane);
                    fIcelandListBoxIDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fIcelandListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fIcelandListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Iceland");
                }

                return fIcelandListBoxIDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text IcelandTextBlocText
        {
            get
            {
                if (null == fIcelandTextBlocText)
                {
                    fIcelandTextBlocText = new Text("IcelandTextBlocText", IcelandListBoxIDup0ListItem);
                    fIcelandTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fIcelandTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fIcelandTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Iceland");
                }

                return fIcelandTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem IndiaListBoxIteDup0ListItem
        {
            get
            {
                if (null == fIndiaListBoxIteDup0ListItem)
                {
                    fIndiaListBoxIteDup0ListItem = new ListItem("IndiaListBoxIteDup0ListItem", ScrollViewerDroPane);
                    fIndiaListBoxIteDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fIndiaListBoxIteDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fIndiaListBoxIteDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"India");
                }

                return fIndiaListBoxIteDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text IndiaTextBlockText
        {
            get
            {
                if (null == fIndiaTextBlockText)
                {
                    fIndiaTextBlockText = new Text("IndiaTextBlockText", IndiaListBoxIteDup0ListItem);
                    fIndiaTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fIndiaTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fIndiaTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"India");
                }

                return fIndiaTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem IndonesiaListBoDup0ListItem
        {
            get
            {
                if (null == fIndonesiaListBoDup0ListItem)
                {
                    fIndonesiaListBoDup0ListItem = new ListItem("IndonesiaListBoDup0ListItem", ScrollViewerDroPane);
                    fIndonesiaListBoDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fIndonesiaListBoDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fIndonesiaListBoDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Indonesia");
                }

                return fIndonesiaListBoDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text IndonesiaTextBlText
        {
            get
            {
                if (null == fIndonesiaTextBlText)
                {
                    fIndonesiaTextBlText = new Text("IndonesiaTextBlText", IndonesiaListBoDup0ListItem);
                    fIndonesiaTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fIndonesiaTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fIndonesiaTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Indonesia");
                }

                return fIndonesiaTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem IrelandListBoxIDup0ListItem
        {
            get
            {
                if (null == fIrelandListBoxIDup0ListItem)
                {
                    fIrelandListBoxIDup0ListItem = new ListItem("IrelandListBoxIDup0ListItem", ScrollViewerDroPane);
                    fIrelandListBoxIDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fIrelandListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fIrelandListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Ireland");
                }

                return fIrelandListBoxIDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text IrelandTextBlocText
        {
            get
            {
                if (null == fIrelandTextBlocText)
                {
                    fIrelandTextBlocText = new Text("IrelandTextBlocText", IrelandListBoxIDup0ListItem);
                    fIrelandTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fIrelandTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fIrelandTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Ireland");
                }

                return fIrelandTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem IsraelListBoxItDup0ListItem
        {
            get
            {
                if (null == fIsraelListBoxItDup0ListItem)
                {
                    fIsraelListBoxItDup0ListItem = new ListItem("IsraelListBoxItDup0ListItem", ScrollViewerDroPane);
                    fIsraelListBoxItDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fIsraelListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fIsraelListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Israel");
                }

                return fIsraelListBoxItDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text IsraelTextBlockText
        {
            get
            {
                if (null == fIsraelTextBlockText)
                {
                    fIsraelTextBlockText = new Text("IsraelTextBlockText", IsraelListBoxItDup0ListItem);
                    fIsraelTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fIsraelTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fIsraelTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Israel");
                }

                return fIsraelTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem ItalyListBoxIteDup0ListItem
        {
            get
            {
                if (null == fItalyListBoxIteDup0ListItem)
                {
                    fItalyListBoxIteDup0ListItem = new ListItem("ItalyListBoxIteDup0ListItem", ScrollViewerDroPane);
                    fItalyListBoxIteDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fItalyListBoxIteDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fItalyListBoxIteDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Italy");
                }

                return fItalyListBoxIteDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ItalyTextBlockText
        {
            get
            {
                if (null == fItalyTextBlockText)
                {
                    fItalyTextBlockText = new Text("ItalyTextBlockText", ItalyListBoxIteDup0ListItem);
                    fItalyTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fItalyTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fItalyTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Italy");
                }

                return fItalyTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem JapanListBoxIteDup0ListItem
        {
            get
            {
                if (null == fJapanListBoxIteDup0ListItem)
                {
                    fJapanListBoxIteDup0ListItem = new ListItem("JapanListBoxIteDup0ListItem", ScrollViewerDroPane);
                    fJapanListBoxIteDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fJapanListBoxIteDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fJapanListBoxIteDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Japan");
                }

                return fJapanListBoxIteDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text JapanTextBlockText
        {
            get
            {
                if (null == fJapanTextBlockText)
                {
                    fJapanTextBlockText = new Text("JapanTextBlockText", JapanListBoxIteDup0ListItem);
                    fJapanTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fJapanTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fJapanTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Japan");
                }

                return fJapanTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem KoreaListBoxIteDup0ListItem
        {
            get
            {
                if (null == fKoreaListBoxIteDup0ListItem)
                {
                    fKoreaListBoxIteDup0ListItem = new ListItem("KoreaListBoxIteDup0ListItem", ScrollViewerDroPane);
                    fKoreaListBoxIteDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fKoreaListBoxIteDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fKoreaListBoxIteDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Korea");
                }

                return fKoreaListBoxIteDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text KoreaTextBlockText
        {
            get
            {
                if (null == fKoreaTextBlockText)
                {
                    fKoreaTextBlockText = new Text("KoreaTextBlockText", KoreaListBoxIteDup0ListItem);
                    fKoreaTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fKoreaTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fKoreaTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Korea");
                }

                return fKoreaTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem LatviaListBoxItDup0ListItem
        {
            get
            {
                if (null == fLatviaListBoxItDup0ListItem)
                {
                    fLatviaListBoxItDup0ListItem = new ListItem("LatviaListBoxItDup0ListItem", ScrollViewerDroPane);
                    fLatviaListBoxItDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fLatviaListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fLatviaListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Latvia");
                }

                return fLatviaListBoxItDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text LatviaTextBlockText
        {
            get
            {
                if (null == fLatviaTextBlockText)
                {
                    fLatviaTextBlockText = new Text("LatviaTextBlockText", LatviaListBoxItDup0ListItem);
                    fLatviaTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fLatviaTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fLatviaTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Latvia");
                }

                return fLatviaTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem LiechtensteinLiDup0ListItem
        {
            get
            {
                if (null == fLiechtensteinLiDup0ListItem)
                {
                    fLiechtensteinLiDup0ListItem = new ListItem("LiechtensteinLiDup0ListItem", ScrollViewerDroPane);
                    fLiechtensteinLiDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fLiechtensteinLiDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fLiechtensteinLiDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Liechtenstein");
                }

                return fLiechtensteinLiDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text LiechtensteinTeText
        {
            get
            {
                if (null == fLiechtensteinTeText)
                {
                    fLiechtensteinTeText = new Text("LiechtensteinTeText", LiechtensteinLiDup0ListItem);
                    fLiechtensteinTeText.UIMap.Scope = UIASeachScope.Children;
                    fLiechtensteinTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fLiechtensteinTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Liechtenstein");
                }

                return fLiechtensteinTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem LithuaniaListBoDup0ListItem
        {
            get
            {
                if (null == fLithuaniaListBoDup0ListItem)
                {
                    fLithuaniaListBoDup0ListItem = new ListItem("LithuaniaListBoDup0ListItem", ScrollViewerDroPane);
                    fLithuaniaListBoDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fLithuaniaListBoDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fLithuaniaListBoDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Lithuania");
                }

                return fLithuaniaListBoDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text LithuaniaTextBlText
        {
            get
            {
                if (null == fLithuaniaTextBlText)
                {
                    fLithuaniaTextBlText = new Text("LithuaniaTextBlText", LithuaniaListBoDup0ListItem);
                    fLithuaniaTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fLithuaniaTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fLithuaniaTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Lithuania");
                }

                return fLithuaniaTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem LuxembourgListBDup0ListItem
        {
            get
            {
                if (null == fLuxembourgListBDup0ListItem)
                {
                    fLuxembourgListBDup0ListItem = new ListItem("LuxembourgListBDup0ListItem", ScrollViewerDroPane);
                    fLuxembourgListBDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fLuxembourgListBDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fLuxembourgListBDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Luxembourg");
                }

                return fLuxembourgListBDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text LuxembourgTextBText
        {
            get
            {
                if (null == fLuxembourgTextBText)
                {
                    fLuxembourgTextBText = new Text("LuxembourgTextBText", LuxembourgListBDup0ListItem);
                    fLuxembourgTextBText.UIMap.Scope = UIASeachScope.Children;
                    fLuxembourgTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fLuxembourgTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Luxembourg");
                }

                return fLuxembourgTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem MalaysiaListBoxDup0ListItem
        {
            get
            {
                if (null == fMalaysiaListBoxDup0ListItem)
                {
                    fMalaysiaListBoxDup0ListItem = new ListItem("MalaysiaListBoxDup0ListItem", ScrollViewerDroPane);
                    fMalaysiaListBoxDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fMalaysiaListBoxDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMalaysiaListBoxDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Malaysia");
                }

                return fMalaysiaListBoxDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MalaysiaTextBloText
        {
            get
            {
                if (null == fMalaysiaTextBloText)
                {
                    fMalaysiaTextBloText = new Text("MalaysiaTextBloText", MalaysiaListBoxDup0ListItem);
                    fMalaysiaTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fMalaysiaTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fMalaysiaTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Malaysia");
                }

                return fMalaysiaTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem MexicoListBoxItDup0ListItem
        {
            get
            {
                if (null == fMexicoListBoxItDup0ListItem)
                {
                    fMexicoListBoxItDup0ListItem = new ListItem("MexicoListBoxItDup0ListItem", ScrollViewerDroPane);
                    fMexicoListBoxItDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fMexicoListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMexicoListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Mexico");
                }

                return fMexicoListBoxItDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MexicoTextBlockText
        {
            get
            {
                if (null == fMexicoTextBlockText)
                {
                    fMexicoTextBlockText = new Text("MexicoTextBlockText", MexicoListBoxItDup0ListItem);
                    fMexicoTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fMexicoTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fMexicoTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Mexico");
                }

                return fMexicoTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem MoroccoListBoxIDup0ListItem
        {
            get
            {
                if (null == fMoroccoListBoxIDup0ListItem)
                {
                    fMoroccoListBoxIDup0ListItem = new ListItem("MoroccoListBoxIDup0ListItem", ScrollViewerDroPane);
                    fMoroccoListBoxIDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fMoroccoListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMoroccoListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Morocco");
                }

                return fMoroccoListBoxIDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MoroccoTextBlocText
        {
            get
            {
                if (null == fMoroccoTextBlocText)
                {
                    fMoroccoTextBlocText = new Text("MoroccoTextBlocText", MoroccoListBoxIDup0ListItem);
                    fMoroccoTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fMoroccoTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fMoroccoTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Morocco");
                }

                return fMoroccoTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem NetherlandsListDup0ListItem
        {
            get
            {
                if (null == fNetherlandsListDup0ListItem)
                {
                    fNetherlandsListDup0ListItem = new ListItem("NetherlandsListDup0ListItem", ScrollViewerDroPane);
                    fNetherlandsListDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fNetherlandsListDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fNetherlandsListDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Netherlands");
                }

                return fNetherlandsListDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NetherlandsTextText
        {
            get
            {
                if (null == fNetherlandsTextText)
                {
                    fNetherlandsTextText = new Text("NetherlandsTextText", NetherlandsListDup0ListItem);
                    fNetherlandsTextText.UIMap.Scope = UIASeachScope.Children;
                    fNetherlandsTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fNetherlandsTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Netherlands");
                }

                return fNetherlandsTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem NewZealandListBDup0ListItem
        {
            get
            {
                if (null == fNewZealandListBDup0ListItem)
                {
                    fNewZealandListBDup0ListItem = new ListItem("NewZealandListBDup0ListItem", ScrollViewerDroPane);
                    fNewZealandListBDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fNewZealandListBDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fNewZealandListBDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"New Zealand");
                }

                return fNewZealandListBDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NewZealandTextBText
        {
            get
            {
                if (null == fNewZealandTextBText)
                {
                    fNewZealandTextBText = new Text("NewZealandTextBText", NewZealandListBDup0ListItem);
                    fNewZealandTextBText.UIMap.Scope = UIASeachScope.Children;
                    fNewZealandTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fNewZealandTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"New Zealand");
                }

                return fNewZealandTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem NorwayListBoxItDup0ListItem
        {
            get
            {
                if (null == fNorwayListBoxItDup0ListItem)
                {
                    fNorwayListBoxItDup0ListItem = new ListItem("NorwayListBoxItDup0ListItem", ScrollViewerDroPane);
                    fNorwayListBoxItDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fNorwayListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fNorwayListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Norway");
                }

                return fNorwayListBoxItDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NorwayTextBlockText
        {
            get
            {
                if (null == fNorwayTextBlockText)
                {
                    fNorwayTextBlockText = new Text("NorwayTextBlockText", NorwayListBoxItDup0ListItem);
                    fNorwayTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fNorwayTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fNorwayTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Norway");
                }

                return fNorwayTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem PakistanListBoxDup0ListItem
        {
            get
            {
                if (null == fPakistanListBoxDup0ListItem)
                {
                    fPakistanListBoxDup0ListItem = new ListItem("PakistanListBoxDup0ListItem", ScrollViewerDroPane);
                    fPakistanListBoxDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fPakistanListBoxDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fPakistanListBoxDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Pakistan");
                }

                return fPakistanListBoxDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PakistanTextBloText
        {
            get
            {
                if (null == fPakistanTextBloText)
                {
                    fPakistanTextBloText = new Text("PakistanTextBloText", PakistanListBoxDup0ListItem);
                    fPakistanTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fPakistanTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPakistanTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Pakistan");
                }

                return fPakistanTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem PeruListBoxItemDup0ListItem
        {
            get
            {
                if (null == fPeruListBoxItemDup0ListItem)
                {
                    fPeruListBoxItemDup0ListItem = new ListItem("PeruListBoxItemDup0ListItem", ScrollViewerDroPane);
                    fPeruListBoxItemDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fPeruListBoxItemDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fPeruListBoxItemDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Peru");
                }

                return fPeruListBoxItemDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PeruTextBlockText
        {
            get
            {
                if (null == fPeruTextBlockText)
                {
                    fPeruTextBlockText = new Text("PeruTextBlockText", PeruListBoxItemDup0ListItem);
                    fPeruTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fPeruTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPeruTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Peru");
                }

                return fPeruTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem PhilippinesListDup0ListItem
        {
            get
            {
                if (null == fPhilippinesListDup0ListItem)
                {
                    fPhilippinesListDup0ListItem = new ListItem("PhilippinesListDup0ListItem", ScrollViewerDroPane);
                    fPhilippinesListDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fPhilippinesListDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fPhilippinesListDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Philippines");
                }

                return fPhilippinesListDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PhilippinesTextText
        {
            get
            {
                if (null == fPhilippinesTextText)
                {
                    fPhilippinesTextText = new Text("PhilippinesTextText", PhilippinesListDup0ListItem);
                    fPhilippinesTextText.UIMap.Scope = UIASeachScope.Children;
                    fPhilippinesTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPhilippinesTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Philippines");
                }

                return fPhilippinesTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem PolandListBoxItDup0ListItem
        {
            get
            {
                if (null == fPolandListBoxItDup0ListItem)
                {
                    fPolandListBoxItDup0ListItem = new ListItem("PolandListBoxItDup0ListItem", ScrollViewerDroPane);
                    fPolandListBoxItDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fPolandListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fPolandListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Poland");
                }

                return fPolandListBoxItDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PolandTextBlockText
        {
            get
            {
                if (null == fPolandTextBlockText)
                {
                    fPolandTextBlockText = new Text("PolandTextBlockText", PolandListBoxItDup0ListItem);
                    fPolandTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fPolandTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPolandTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Poland");
                }

                return fPolandTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem PortugalListBoxDup0ListItem
        {
            get
            {
                if (null == fPortugalListBoxDup0ListItem)
                {
                    fPortugalListBoxDup0ListItem = new ListItem("PortugalListBoxDup0ListItem", ScrollViewerDroPane);
                    fPortugalListBoxDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fPortugalListBoxDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fPortugalListBoxDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Portugal");
                }

                return fPortugalListBoxDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PortugalTextBloText
        {
            get
            {
                if (null == fPortugalTextBloText)
                {
                    fPortugalTextBloText = new Text("PortugalTextBloText", PortugalListBoxDup0ListItem);
                    fPortugalTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fPortugalTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPortugalTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Portugal");
                }

                return fPortugalTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem RomaniaListBoxIDup0ListItem
        {
            get
            {
                if (null == fRomaniaListBoxIDup0ListItem)
                {
                    fRomaniaListBoxIDup0ListItem = new ListItem("RomaniaListBoxIDup0ListItem", ScrollViewerDroPane);
                    fRomaniaListBoxIDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fRomaniaListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fRomaniaListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Romania");
                }

                return fRomaniaListBoxIDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RomaniaTextBlocText
        {
            get
            {
                if (null == fRomaniaTextBlocText)
                {
                    fRomaniaTextBlocText = new Text("RomaniaTextBlocText", RomaniaListBoxIDup0ListItem);
                    fRomaniaTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fRomaniaTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRomaniaTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Romania");
                }

                return fRomaniaTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem RussiaListBoxItDup0ListItem
        {
            get
            {
                if (null == fRussiaListBoxItDup0ListItem)
                {
                    fRussiaListBoxItDup0ListItem = new ListItem("RussiaListBoxItDup0ListItem", ScrollViewerDroPane);
                    fRussiaListBoxItDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fRussiaListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fRussiaListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Russia");
                }

                return fRussiaListBoxItDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RussiaTextBlockText
        {
            get
            {
                if (null == fRussiaTextBlockText)
                {
                    fRussiaTextBlockText = new Text("RussiaTextBlockText", RussiaListBoxItDup0ListItem);
                    fRussiaTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fRussiaTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRussiaTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Russia");
                }

                return fRussiaTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem SingaporeListBoDup0ListItem
        {
            get
            {
                if (null == fSingaporeListBoDup0ListItem)
                {
                    fSingaporeListBoDup0ListItem = new ListItem("SingaporeListBoDup0ListItem", ScrollViewerDroPane);
                    fSingaporeListBoDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fSingaporeListBoDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fSingaporeListBoDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Singapore");
                }

                return fSingaporeListBoDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SingaporeTextBlText
        {
            get
            {
                if (null == fSingaporeTextBlText)
                {
                    fSingaporeTextBlText = new Text("SingaporeTextBlText", SingaporeListBoDup0ListItem);
                    fSingaporeTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fSingaporeTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSingaporeTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Singapore");
                }

                return fSingaporeTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem SlovakiaListBoxDup0ListItem
        {
            get
            {
                if (null == fSlovakiaListBoxDup0ListItem)
                {
                    fSlovakiaListBoxDup0ListItem = new ListItem("SlovakiaListBoxDup0ListItem", ScrollViewerDroPane);
                    fSlovakiaListBoxDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fSlovakiaListBoxDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fSlovakiaListBoxDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Slovakia");
                }

                return fSlovakiaListBoxDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SlovakiaTextBloText
        {
            get
            {
                if (null == fSlovakiaTextBloText)
                {
                    fSlovakiaTextBloText = new Text("SlovakiaTextBloText", SlovakiaListBoxDup0ListItem);
                    fSlovakiaTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fSlovakiaTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSlovakiaTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Slovakia");
                }

                return fSlovakiaTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem SloveniaListBoxDup0ListItem
        {
            get
            {
                if (null == fSloveniaListBoxDup0ListItem)
                {
                    fSloveniaListBoxDup0ListItem = new ListItem("SloveniaListBoxDup0ListItem", ScrollViewerDroPane);
                    fSloveniaListBoxDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fSloveniaListBoxDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fSloveniaListBoxDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Slovenia");
                }

                return fSloveniaListBoxDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SloveniaTextBloText
        {
            get
            {
                if (null == fSloveniaTextBloText)
                {
                    fSloveniaTextBloText = new Text("SloveniaTextBloText", SloveniaListBoxDup0ListItem);
                    fSloveniaTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fSloveniaTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSloveniaTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Slovenia");
                }

                return fSloveniaTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem SouthAfricaListDup0ListItem
        {
            get
            {
                if (null == fSouthAfricaListDup0ListItem)
                {
                    fSouthAfricaListDup0ListItem = new ListItem("SouthAfricaListDup0ListItem", ScrollViewerDroPane);
                    fSouthAfricaListDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fSouthAfricaListDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fSouthAfricaListDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"South Africa");
                }

                return fSouthAfricaListDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SouthAfricaTextText
        {
            get
            {
                if (null == fSouthAfricaTextText)
                {
                    fSouthAfricaTextText = new Text("SouthAfricaTextText", SouthAfricaListDup0ListItem);
                    fSouthAfricaTextText.UIMap.Scope = UIASeachScope.Children;
                    fSouthAfricaTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSouthAfricaTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"South Africa");
                }

                return fSouthAfricaTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem SpainListBoxIteDup0ListItem
        {
            get
            {
                if (null == fSpainListBoxIteDup0ListItem)
                {
                    fSpainListBoxIteDup0ListItem = new ListItem("SpainListBoxIteDup0ListItem", ScrollViewerDroPane);
                    fSpainListBoxIteDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fSpainListBoxIteDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fSpainListBoxIteDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Spain");
                }

                return fSpainListBoxIteDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SpainTextBlockText
        {
            get
            {
                if (null == fSpainTextBlockText)
                {
                    fSpainTextBlockText = new Text("SpainTextBlockText", SpainListBoxIteDup0ListItem);
                    fSpainTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fSpainTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSpainTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Spain");
                }

                return fSpainTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem SriLankaListBoxDup0ListItem
        {
            get
            {
                if (null == fSriLankaListBoxDup0ListItem)
                {
                    fSriLankaListBoxDup0ListItem = new ListItem("SriLankaListBoxDup0ListItem", ScrollViewerDroPane);
                    fSriLankaListBoxDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fSriLankaListBoxDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fSriLankaListBoxDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Sri Lanka");
                }

                return fSriLankaListBoxDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SriLankaTextBloText
        {
            get
            {
                if (null == fSriLankaTextBloText)
                {
                    fSriLankaTextBloText = new Text("SriLankaTextBloText", SriLankaListBoxDup0ListItem);
                    fSriLankaTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fSriLankaTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSriLankaTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Sri Lanka");
                }

                return fSriLankaTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem SwedenListBoxItDup0ListItem
        {
            get
            {
                if (null == fSwedenListBoxItDup0ListItem)
                {
                    fSwedenListBoxItDup0ListItem = new ListItem("SwedenListBoxItDup0ListItem", ScrollViewerDroPane);
                    fSwedenListBoxItDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fSwedenListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fSwedenListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Sweden");
                }

                return fSwedenListBoxItDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SwedenTextBlockText
        {
            get
            {
                if (null == fSwedenTextBlockText)
                {
                    fSwedenTextBlockText = new Text("SwedenTextBlockText", SwedenListBoxItDup0ListItem);
                    fSwedenTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fSwedenTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSwedenTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Sweden");
                }

                return fSwedenTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem SwitzerlandListDup0ListItem
        {
            get
            {
                if (null == fSwitzerlandListDup0ListItem)
                {
                    fSwitzerlandListDup0ListItem = new ListItem("SwitzerlandListDup0ListItem", ScrollViewerDroPane);
                    fSwitzerlandListDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fSwitzerlandListDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fSwitzerlandListDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Switzerland");
                }

                return fSwitzerlandListDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SwitzerlandTextText
        {
            get
            {
                if (null == fSwitzerlandTextText)
                {
                    fSwitzerlandTextText = new Text("SwitzerlandTextText", SwitzerlandListDup0ListItem);
                    fSwitzerlandTextText.UIMap.Scope = UIASeachScope.Children;
                    fSwitzerlandTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSwitzerlandTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Switzerland");
                }

                return fSwitzerlandTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem TaiwanListBoxItDup0ListItem
        {
            get
            {
                if (null == fTaiwanListBoxItDup0ListItem)
                {
                    fTaiwanListBoxItDup0ListItem = new ListItem("TaiwanListBoxItDup0ListItem", ScrollViewerDroPane);
                    fTaiwanListBoxItDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fTaiwanListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fTaiwanListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Taiwan");
                }

                return fTaiwanListBoxItDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TaiwanTextBlockText
        {
            get
            {
                if (null == fTaiwanTextBlockText)
                {
                    fTaiwanTextBlockText = new Text("TaiwanTextBlockText", TaiwanListBoxItDup0ListItem);
                    fTaiwanTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fTaiwanTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTaiwanTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Taiwan");
                }

                return fTaiwanTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem ThailandListBoxDup0ListItem
        {
            get
            {
                if (null == fThailandListBoxDup0ListItem)
                {
                    fThailandListBoxDup0ListItem = new ListItem("ThailandListBoxDup0ListItem", ScrollViewerDroPane);
                    fThailandListBoxDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fThailandListBoxDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fThailandListBoxDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Thailand");
                }

                return fThailandListBoxDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ThailandTextBloText
        {
            get
            {
                if (null == fThailandTextBloText)
                {
                    fThailandTextBloText = new Text("ThailandTextBloText", ThailandListBoxDup0ListItem);
                    fThailandTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fThailandTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fThailandTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Thailand");
                }

                return fThailandTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem TurkeyListBoxItDup0ListItem
        {
            get
            {
                if (null == fTurkeyListBoxItDup0ListItem)
                {
                    fTurkeyListBoxItDup0ListItem = new ListItem("TurkeyListBoxItDup0ListItem", ScrollViewerDroPane);
                    fTurkeyListBoxItDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fTurkeyListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fTurkeyListBoxItDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Turkey");
                }

                return fTurkeyListBoxItDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TurkeyTextBlockText
        {
            get
            {
                if (null == fTurkeyTextBlockText)
                {
                    fTurkeyTextBlockText = new Text("TurkeyTextBlockText", TurkeyListBoxItDup0ListItem);
                    fTurkeyTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fTurkeyTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTurkeyTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Turkey");
                }

                return fTurkeyTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem UkraineListBoxIDup0ListItem
        {
            get
            {
                if (null == fUkraineListBoxIDup0ListItem)
                {
                    fUkraineListBoxIDup0ListItem = new ListItem("UkraineListBoxIDup0ListItem", ScrollViewerDroPane);
                    fUkraineListBoxIDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fUkraineListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fUkraineListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Ukraine");
                }

                return fUkraineListBoxIDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text UkraineTextBlocText
        {
            get
            {
                if (null == fUkraineTextBlocText)
                {
                    fUkraineTextBlocText = new Text("UkraineTextBlocText", UkraineListBoxIDup0ListItem);
                    fUkraineTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fUkraineTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fUkraineTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Ukraine");
                }

                return fUkraineTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem UnitedKingdomLiDup0ListItem
        {
            get
            {
                if (null == fUnitedKingdomLiDup0ListItem)
                {
                    fUnitedKingdomLiDup0ListItem = new ListItem("UnitedKingdomLiDup0ListItem", ScrollViewerDroPane);
                    fUnitedKingdomLiDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fUnitedKingdomLiDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fUnitedKingdomLiDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"United Kingdom");
                }

                return fUnitedKingdomLiDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text UnitedKingdomTeText
        {
            get
            {
                if (null == fUnitedKingdomTeText)
                {
                    fUnitedKingdomTeText = new Text("UnitedKingdomTeText", UnitedKingdomLiDup0ListItem);
                    fUnitedKingdomTeText.UIMap.Scope = UIASeachScope.Children;
                    fUnitedKingdomTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fUnitedKingdomTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"United Kingdom");
                }

                return fUnitedKingdomTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem UnitedStatesLisDup0ListItem
        {
            get
            {
                if (null == fUnitedStatesLisDup0ListItem)
                {
                    fUnitedStatesLisDup0ListItem = new ListItem("UnitedStatesLisDup0ListItem", ScrollViewerDroPane);
                    fUnitedStatesLisDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fUnitedStatesLisDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fUnitedStatesLisDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"United States");
                }

                return fUnitedStatesLisDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text UnitedStatesTexText
        {
            get
            {
                if (null == fUnitedStatesTexText)
                {
                    fUnitedStatesTexText = new Text("UnitedStatesTexText", UnitedStatesLisDup0ListItem);
                    fUnitedStatesTexText.UIMap.Scope = UIASeachScope.Children;
                    fUnitedStatesTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fUnitedStatesTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"United States");
                }

                return fUnitedStatesTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem VietnamListBoxIDup0ListItem
        {
            get
            {
                if (null == fVietnamListBoxIDup0ListItem)
                {
                    fVietnamListBoxIDup0ListItem = new ListItem("VietnamListBoxIDup0ListItem", ScrollViewerDroPane);
                    fVietnamListBoxIDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fVietnamListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fVietnamListBoxIDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Vietnam");
                }

                return fVietnamListBoxIDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text VietnamTextBlocText
        {
            get
            {
                if (null == fVietnamTextBlocText)
                {
                    fVietnamTextBlocText = new Text("VietnamTextBlocText", VietnamListBoxIDup0ListItem);
                    fVietnamTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fVietnamTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fVietnamTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Vietnam");
                }

                return fVietnamTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup0ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup0ScrollBar)
                {
                    fScrollBarVerticDup0ScrollBar = new ScrollBar("ScrollBarVerticDup0ScrollBar", ScrollViewerDroPane);
                    fScrollBarVerticDup0ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup0ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RepeatButtonLinDup0Button
        {
            get
            {
                if (null == fRepeatButtonLinDup0Button)
                {
                    fRepeatButtonLinDup0Button = new Button("RepeatButtonLinDup0Button", ScrollBarVerticDup0ScrollBar);
                    fRepeatButtonLinDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fRepeatButtonLinDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RepeatButton");
                    fRepeatButtonLinDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"LineUp");
                }

                return fRepeatButtonLinDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RepeatButtonPagDup0Button
        {
            get
            {
                if (null == fRepeatButtonPagDup0Button)
                {
                    fRepeatButtonPagDup0Button = new Button("RepeatButtonPagDup0Button", ScrollBarVerticDup0ScrollBar);
                    fRepeatButtonPagDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fRepeatButtonPagDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RepeatButton");
                    fRepeatButtonPagDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PageUp");
                }

                return fRepeatButtonPagDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RepeatButtonPagDup1Button
        {
            get
            {
                if (null == fRepeatButtonPagDup1Button)
                {
                    fRepeatButtonPagDup1Button = new Button("RepeatButtonPagDup1Button", ScrollBarVerticDup0ScrollBar);
                    fRepeatButtonPagDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fRepeatButtonPagDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RepeatButton");
                    fRepeatButtonPagDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PageDown");
                }

                return fRepeatButtonPagDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbDup0Thumb
        {
            get
            {
                if (null == fThumbDup0Thumb)
                {
                    fThumbDup0Thumb = new Thumb("ThumbDup0Thumb", ScrollBarVerticDup0ScrollBar);
                    fThumbDup0Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbDup0Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                }

                return fThumbDup0Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RepeatButtonLinDup1Button
        {
            get
            {
                if (null == fRepeatButtonLinDup1Button)
                {
                    fRepeatButtonLinDup1Button = new Button("RepeatButtonLinDup1Button", ScrollBarVerticDup0ScrollBar);
                    fRepeatButtonLinDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fRepeatButtonLinDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RepeatButton");
                    fRepeatButtonLinDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"LineDown");
                }

                return fRepeatButtonLinDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup0ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup0ScrollBar)
                {
                    fScrollBarHorizoDup0ScrollBar = new ScrollBar("ScrollBarHorizoDup0ScrollBar", ScrollViewerDroPane);
                    fScrollBarHorizoDup0ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup0ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar ConfigureDeviceTitleBar
        {
            get
            {
                if (null == fConfigureDeviceTitleBar)
                {
                    fConfigureDeviceTitleBar = new TitleBar("ConfigureDeviceTitleBar", ConfigureDeviceWindow);
                    fConfigureDeviceTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fConfigureDeviceTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                }

                return fConfigureDeviceTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyDup0MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup0MenuBar)
                {
                    fSystemMenuBarSyDup0MenuBar = new MenuBar("SystemMenuBarSyDup0MenuBar", ConfigureDeviceTitleBar);
                    fSystemMenuBarSyDup0MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyDup0MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1Dup0MenuItem
        {
            get
            {
                if (null == fSystemItem1Dup0MenuItem)
                {
                    fSystemItem1Dup0MenuItem = new MenuItem("SystemItem1Dup0MenuItem", SystemMenuBarSyDup0MenuBar);
                    fSystemItem1Dup0MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1Dup0MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1Dup0MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1Dup0MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MinimizeMinimizDup0Button
        {
            get
            {
                if (null == fMinimizeMinimizDup0Button)
                {
                    fMinimizeMinimizDup0Button = new Button("MinimizeMinimizDup0Button", ConfigureDeviceTitleBar);
                    fMinimizeMinimizDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                    fMinimizeMinimizDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                }

                return fMinimizeMinimizDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MaximizeMaximizButton
        {
            get
            {
                if (null == fMaximizeMaximizButton)
                {
                    fMaximizeMaximizButton = new Button("MaximizeMaximizButton", ConfigureDeviceTitleBar);
                    fMaximizeMaximizButton.UIMap.Scope = UIASeachScope.Children;
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Maximize");
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximize");
                }

                return fMaximizeMaximizButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseDup0Button
        {
            get
            {
                if (null == fCloseCloseDup0Button)
                {
                    fCloseCloseDup0Button = new Button("CloseCloseDup0Button", ConfigureDeviceTitleBar);
                    fCloseCloseDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button HelpButtonfb686Button
        {
            get
            {
                if (null == fHelpButtonfb686Button)
                {
                    fHelpButtonfb686Button = new Button("HelpButtonfb686Button", ConfigureDeviceWindow);
                    fHelpButtonfb686Button.UIMap.Scope = UIASeachScope.Children;
                    fHelpButtonfb686Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fHelpButtonfb686Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"fb68687e-7025-47cb-b1b1-c3df439a2773");
                    fHelpButtonfb686Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpButtonfb686Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HelpTextBlockDup0Text
        {
            get
            {
                if (null == fHelpTextBlockDup0Text)
                {
                    fHelpTextBlockDup0Text = new Text("HelpTextBlockDup0Text", HelpButtonfb686Button);
                    fHelpTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fHelpTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHelpTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ApplyButton46D6Button
        {
            get
            {
                if (null == fApplyButton46D6Button)
                {
                    fApplyButton46D6Button = new Button("ApplyButton46D6Button", ConfigureDeviceWindow);
                    fApplyButton46D6Button.UIMap.Scope = UIASeachScope.Children;
                    fApplyButton46D6Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fApplyButton46D6Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"46D669A0-F3DB-49c5-B67D-DAE887281B4E");
                    fApplyButton46D6Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Apply");
                }

                return fApplyButton46D6Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ApplyTextBlockDup0Text
        {
            get
            {
                if (null == fApplyTextBlockDup0Text)
                {
                    fApplyTextBlockDup0Text = new Text("ApplyTextBlockDup0Text", ApplyButton46D6Button);
                    fApplyTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fApplyTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fApplyTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Apply");
                }

                return fApplyTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButtoned9Button
        {
            get
            {
                if (null == fCancelButtoned9Button)
                {
                    fCancelButtoned9Button = new Button("CancelButtoned9Button", ConfigureDeviceWindow);
                    fCancelButtoned9Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButtoned9Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButtoned9Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ed9b74ee-24a6-4138-ae44-bdb7b44cffcb");
                    fCancelButtoned9Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButtoned9Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CancelTextBlockDup0Text
        {
            get
            {
                if (null == fCancelTextBlockDup0Text)
                {
                    fCancelTextBlockDup0Text = new Text("CancelTextBlockDup0Text", CancelButtoned9Button);
                    fCancelTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fCancelTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCancelTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ConfigureDeviceOKButton
        {
            get
            {
                if (null == fOKButton8c9182aButton)
                {
                    fOKButton8c9182aButton = new Button("OKButton8c9182aButton", ConfigureDeviceWindow);
                    fOKButton8c9182aButton.UIMap.Scope = UIASeachScope.Children;
                    fOKButton8c9182aButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButton8c9182aButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8c9182a5-6104-46bc-b6ac-6bc57ec6ea81");
                    fOKButton8c9182aButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButton8c9182aButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OKTextBlockDup0Text
        {
            get
            {
                if (null == fOKTextBlockDup0Text)
                {
                    fOKTextBlockDup0Text = new Text("OKTextBlockDup0Text", ConfigureDeviceOKButton);
                    fOKTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fOKTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOKTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Tab TabControl2111BTab
        {
            get
            {
                if (null == fTabControl2111BTab)
                {
                    fTabControl2111BTab = new Tab("TabControl2111BTab", ConfigureDeviceWindow);
                    fTabControl2111BTab.UIMap.Scope = UIASeachScope.Children;
                    fTabControl2111BTab.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabControl");
                    fTabControl2111BTab.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2111B07F-601C-4442-9A43-CAC4268C264A");
                }

                return fTabControl2111BTab;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup0TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup0TabItem)
                {
                    fSystemWindowsCoDup0TabItem = new TabItem("SystemWindowsCoDup0TabItem", TabControl2111BTab);
                    fSystemWindowsCoDup0TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup0TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup0TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"e0422d26-5fd8-44bc-b019-886f5e135c97");
                    fSystemWindowsCoDup0TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup0TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GeneralTextmGenDup0Text
        {
            get
            {
                if (null == fGeneralTextmGenDup0Text)
                {
                    fGeneralTextmGenDup0Text = new Text("GeneralTextmGenDup0Text", SystemWindowsCoDup0TabItem);
                    fGeneralTextmGenDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fGeneralTextmGenDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fGeneralTextmGenDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mGeneralTabLabel");
                    fGeneralTextmGenDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"General");
                }

                return fGeneralTextmGenDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GeneralTextBlocDup0Text
        {
            get
            {
                if (null == fGeneralTextBlocDup0Text)
                {
                    fGeneralTextBlocDup0Text = new Text("GeneralTextBlocDup0Text", GeneralTextmGenDup0Text);
                    fGeneralTextBlocDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fGeneralTextBlocDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fGeneralTextBlocDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"General");
                }

                return fGeneralTextBlocDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text9127A6692D0Text
        {
            get
            {
                if (null == fText9127A6692D0Text)
                {
                    fText9127A6692D0Text = new Text("Text9127A6692D0Text", SystemWindowsCoDup0TabItem);
                    fText9127A6692D0Text.UIMap.Scope = UIASeachScope.Children;
                    fText9127A6692D0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText9127A6692D0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9127A669-2D02-477d-B2B0-818B59F1EC24");
                    fText9127A6692D0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText9127A6692D0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ProgressBar ProgressBar836eProgressBar
        {
            get
            {
                if (null == fProgressBar836eProgressBar)
                {
                    fProgressBar836eProgressBar = new ProgressBar("ProgressBar836eProgressBar", SystemWindowsCoDup0TabItem);
                    fProgressBar836eProgressBar.UIMap.Scope = UIASeachScope.Children;
                    fProgressBar836eProgressBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ProgressBar");
                    fProgressBar836eProgressBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"836e39c4-f336-411d-b4bf-7ce21bd659a1");
                }

                return fProgressBar836eProgressBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup1TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup1TabItem)
                {
                    fSystemWindowsCoDup1TabItem = new TabItem("SystemWindowsCoDup1TabItem", TabControl2111BTab);
                    fSystemWindowsCoDup1TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup1TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup1TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1cc57c14-8994-43b6-9870-5199757f8fc4");
                    fSystemWindowsCoDup1TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup1TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AuthenticationTDup0Text
        {
            get
            {
                if (null == fAuthenticationTDup0Text)
                {
                    fAuthenticationTDup0Text = new Text("AuthenticationTDup0Text", SystemWindowsCoDup1TabItem);
                    fAuthenticationTDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fAuthenticationTDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fAuthenticationTDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mAuthTabLabel");
                    fAuthenticationTDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Authentication");
                }

                return fAuthenticationTDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AuthenticationTDup1Text
        {
            get
            {
                if (null == fAuthenticationTDup1Text)
                {
                    fAuthenticationTDup1Text = new Text("AuthenticationTDup1Text", AuthenticationTDup0Text);
                    fAuthenticationTDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fAuthenticationTDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAuthenticationTDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Authentication");
                }

                return fAuthenticationTDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text2087FBF2200Text
        {
            get
            {
                if (null == fText2087FBF2200Text)
                {
                    fText2087FBF2200Text = new Text("Text2087FBF2200Text", SystemWindowsCoDup1TabItem);
                    fText2087FBF2200Text.UIMap.Scope = UIASeachScope.Children;
                    fText2087FBF2200Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText2087FBF2200Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2087FBF2-200E-4f1e-9B53-80F1D9CF632A");
                    fText2087FBF2200Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText2087FBF2200Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text3C0A7A0B490Text
        {
            get
            {
                if (null == fText3C0A7A0B490Text)
                {
                    fText3C0A7A0B490Text = new Text("Text3C0A7A0B490Text", SystemWindowsCoDup1TabItem);
                    fText3C0A7A0B490Text.UIMap.Scope = UIASeachScope.Children;
                    fText3C0A7A0B490Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText3C0A7A0B490Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3C0A7A0B-490D-4539-B6B3-66DD241D05EE");
                    fText3C0A7A0B490Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText3C0A7A0B490Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ProgressBar ProgressBar992dProgressBar
        {
            get
            {
                if (null == fProgressBar992dProgressBar)
                {
                    fProgressBar992dProgressBar = new ProgressBar("ProgressBar992dProgressBar", SystemWindowsCoDup1TabItem);
                    fProgressBar992dProgressBar.UIMap.Scope = UIASeachScope.Children;
                    fProgressBar992dProgressBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ProgressBar");
                    fProgressBar992dProgressBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"992d5944-26af-4308-aa22-d41cb035a4c7");
                }

                return fProgressBar992dProgressBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup2TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup2TabItem)
                {
                    fSystemWindowsCoDup2TabItem = new TabItem("SystemWindowsCoDup2TabItem", TabControl2111BTab);
                    fSystemWindowsCoDup2TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup2TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup2TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6D0F0F02-8197-4a09-BEE5-BDF68AFFBB76");
                    fSystemWindowsCoDup2TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup2TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SendtoEmailTextDup0Text
        {
            get
            {
                if (null == fSendtoEmailTextDup0Text)
                {
                    fSendtoEmailTextDup0Text = new Text("SendtoEmailTextDup0Text", SystemWindowsCoDup2TabItem);
                    fSendtoEmailTextDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fSendtoEmailTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fSendtoEmailTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mEmailTabLabel");
                    fSendtoEmailTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send to E-mail");
                }

                return fSendtoEmailTextDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SendtoEmailTextDup1Text
        {
            get
            {
                if (null == fSendtoEmailTextDup1Text)
                {
                    fSendtoEmailTextDup1Text = new Text("SendtoEmailTextDup1Text", SendtoEmailTextDup0Text);
                    fSendtoEmailTextDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fSendtoEmailTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSendtoEmailTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send to E-mail");
                }

                return fSendtoEmailTextDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text265ea8f2a5fText
        {
            get
            {
                if (null == fText265ea8f2a5fText)
                {
                    fText265ea8f2a5fText = new Text("Text265ea8f2a5fText", SystemWindowsCoDup2TabItem);
                    fText265ea8f2a5fText.UIMap.Scope = UIASeachScope.Children;
                    fText265ea8f2a5fText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText265ea8f2a5fText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"265ea8f2-a5f1-4612-b9c9-04b14bb686b6");
                    fText265ea8f2a5fText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText265ea8f2a5fText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text1a251d5f398Text
        {
            get
            {
                if (null == fText1a251d5f398Text)
                {
                    fText1a251d5f398Text = new Text("Text1a251d5f398Text", SystemWindowsCoDup2TabItem);
                    fText1a251d5f398Text.UIMap.Scope = UIASeachScope.Children;
                    fText1a251d5f398Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText1a251d5f398Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1a251d5f-3981-419a-b1b8-472df8e4b6aa");
                    fText1a251d5f398Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText1a251d5f398Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ProgressBar ProgressBara2e8ProgressBar
        {
            get
            {
                if (null == fProgressBara2e8ProgressBar)
                {
                    fProgressBara2e8ProgressBar = new ProgressBar("ProgressBara2e8ProgressBar", SystemWindowsCoDup2TabItem);
                    fProgressBara2e8ProgressBar.UIMap.Scope = UIASeachScope.Children;
                    fProgressBara2e8ProgressBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ProgressBar");
                    fProgressBara2e8ProgressBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"a2e8e90d-d0e0-4939-a375-588d9cf351be");
                }

                return fProgressBara2e8ProgressBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem FaxforDeviceTabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup3TabItem)
                {
                    fSystemWindowsCoDup3TabItem = new TabItem("SystemWindowsCoDup3TabItem", TabControl2111BTab);
                    fSystemWindowsCoDup3TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup3TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup3TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"59f7cef3-80db-4e16-8c7d-7214d65c4ad6");
                    fSystemWindowsCoDup3TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup3TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxTextmFaxTabLDup0Text
        {
            get
            {
                if (null == fFaxTextmFaxTabLDup0Text)
                {
                    fFaxTextmFaxTabLDup0Text = new Text("FaxTextmFaxTabLDup0Text", FaxforDeviceTabItem);
                    fFaxTextmFaxTabLDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fFaxTextmFaxTabLDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fFaxTextmFaxTabLDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mFaxTabLabel");
                    fFaxTextmFaxTabLDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax");
                }

                return fFaxTextmFaxTabLDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxTextBlockDup0Text
        {
            get
            {
                if (null == fFaxTextBlockDup0Text)
                {
                    fFaxTextBlockDup0Text = new Text("FaxTextBlockDup0Text", FaxTextmFaxTabLDup0Text);
                    fFaxTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fFaxTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax");
                }

                return fFaxTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text105C9A93254Text
        {
            get
            {
                if (null == fText105C9A93254Text)
                {
                    fText105C9A93254Text = new Text("Text105C9A93254Text", FaxforDeviceTabItem);
                    fText105C9A93254Text.UIMap.Scope = UIASeachScope.Children;
                    fText105C9A93254Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText105C9A93254Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"105C9A93-254E-4da7-8BA1-3CC66B8EAD15");
                    fText105C9A93254Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText105C9A93254Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextBlockDup0Text
        {
            get
            {
                if (null == fTextBlockDup0Text)
                {
                    fTextBlockDup0Text = new Text("TextBlockDup0Text", Text105C9A93254Text);
                    fTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text25DD30D682EText
        {
            get
            {
                if (null == fText25DD30D682EText)
                {
                    fText25DD30D682EText = new Text("Text25DD30D682EText", FaxforDeviceTabItem);
                    fText25DD30D682EText.UIMap.Scope = UIASeachScope.Children;
                    fText25DD30D682EText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText25DD30D682EText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"25DD30D6-82E0-4bf3-9D85-D9C3EF71087A");
                    fText25DD30D682EText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText25DD30D682EText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ProgressBar ProgressBare99cProgressBar
        {
            get
            {
                if (null == fProgressBare99cProgressBar)
                {
                    fProgressBare99cProgressBar = new ProgressBar("ProgressBare99cProgressBar", FaxforDeviceTabItem);
                    fProgressBare99cProgressBar.UIMap.Scope = UIASeachScope.Children;
                    fProgressBare99cProgressBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ProgressBar");
                    fProgressBare99cProgressBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"e99c5788-f8b1-43bb-849f-3ab550aa4b30");
                }

                return fProgressBare99cProgressBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Custom TabStatusUserCoCustom
        {
            get
            {
                if (null == fTabStatusUserCoCustom)
                {
                    fTabStatusUserCoCustom = new Custom("TabStatusUserCoCustom", FaxforDeviceTabItem);
                    fTabStatusUserCoCustom.UIMap.Scope = UIASeachScope.Children;
                    fTabStatusUserCoCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabStatusUserControl");
                    fTabStatusUserCoCustom.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mFaxTabStatusUserControl");
                }

                return fTabStatusUserCoCustom;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ErrorTextBlockText
        {
            get
            {
                if (null == fEnabledTextBlocText)
                {
                    fEnabledTextBlocText = new Text("ErrorTextBlockText", TabStatusUserCoCustom);
                    fEnabledTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fEnabledTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEnabledTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"570af218-7199-4b1c-9820-168d476e74ae");
                }

                return fEnabledTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Custom MfpConfiguratioCustom
        {
            get
            {
                if (null == fMfpConfiguratioCustom)
                {
                    fMfpConfiguratioCustom = new Custom("MfpConfiguratioCustom", FaxforDeviceTabItem);
                    fMfpConfiguratioCustom.UIMap.Scope = UIASeachScope.Children;
                    fMfpConfiguratioCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"MfpConfigurationFaxTab");
                    fMfpConfiguratioCustom.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mMfpConfigurationFaxTab");
                }

                return fMfpConfiguratioCustom;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewer336Pane
        {
            get
            {
                if (null == fScrollViewer336Pane)
                {
                    fScrollViewer336Pane = new Pane("ScrollViewer336Pane", MfpConfiguratioCustom);
                    fScrollViewer336Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewer336Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewer336Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"336AAF25-2C72-4a18-8D03-9D862DC508C2");
                }

                return fScrollViewer336Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Custom ErrorConflictUsCustom
        {
            get
            {
                if (null == fErrorConflictUsCustom)
                {
                    fErrorConflictUsCustom = new Custom("ErrorConflictUsCustom", ScrollViewer336Pane);
                    fErrorConflictUsCustom.UIMap.Scope = UIASeachScope.Children;
                    fErrorConflictUsCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ErrorConflictUserControl");
                    fErrorConflictUsCustom.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mErrorConflictUserControl");
                }

                return fErrorConflictUsCustom;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox EnableFaxSendCheckBox
        {
            get
            {
                if (null == fEnableFaxSendChCheckBox)
                {
                    fEnableFaxSendChCheckBox = new CheckBox("EnableFaxSendChCheckBox", ScrollViewer336Pane);
                    fEnableFaxSendChCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fEnableFaxSendChCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fEnableFaxSendChCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ceffce27-8ee9-482c-8bdc-957686a69e86");
                    fEnableFaxSendChCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enable Fax Send");
                }

                return fEnableFaxSendChCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EnableFaxSendTeText
        {
            get
            {
                if (null == fEnableFaxSendTeText)
                {
                    fEnableFaxSendTeText = new Text("EnableFaxSendTeText", EnableFaxSendCheckBox);
                    fEnableFaxSendTeText.UIMap.Scope = UIASeachScope.Children;
                    fEnableFaxSendTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEnableFaxSendTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enable Fax Send");
                }

                return fEnableFaxSendTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox EnableFaxReceivDup0CheckBox
        {
            get
            {
                if (null == fEnableFaxReceivDup0CheckBox)
                {
                    fEnableFaxReceivDup0CheckBox = new CheckBox("EnableFaxReceivDup0CheckBox", ScrollViewer336Pane);
                    fEnableFaxReceivDup0CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fEnableFaxReceivDup0CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fEnableFaxReceivDup0CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5131B9C4-FF7A-4df9-AFF4-D616765803D2");
                    fEnableFaxReceivDup0CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enable Fax Receive");
                }

                return fEnableFaxReceivDup0CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group FaxSendGroupBoxGroup
        {
            get
            {
                if (null == fFaxSendGroupBoxGroup)
                {
                    fFaxSendGroupBoxGroup = new Group("FaxSendGroupBoxGroup", ScrollViewer336Pane);
                    fFaxSendGroupBoxGroup.UIMap.Scope = UIASeachScope.Children;
                    fFaxSendGroupBoxGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fFaxSendGroupBoxGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6efbde0b-f3a0-40fc-8f10-92b676439500");
                    fFaxSendGroupBoxGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Send");
                }

                return fFaxSendGroupBoxGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxSendTextBlocText
        {
            get
            {
                if (null == fFaxSendTextBlocText)
                {
                    fFaxSendTextBlocText = new Text("FaxSendTextBlocText", FaxSendGroupBoxGroup);
                    fFaxSendTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fFaxSendTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxSendTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Send");
                }

                return fFaxSendTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox FaxServiceTypeComboBox
        {
            get
            {
                if (null == fComboBox27bdd55ComboBox)
                {
                    fComboBox27bdd55ComboBox = new ComboBox("ComboBox27bdd55ComboBox", FaxSendGroupBoxGroup);
                    fComboBox27bdd55ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox27bdd55ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox27bdd55ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"27bdd55d-6dcc-4bff-a632-624a6f3683ca");
                }

                return fComboBox27bdd55ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem InternalModemLiListItem
        {
            get
            {
                if (null == fInternalModemLiListItem)
                {
                    fInternalModemLiListItem = new ListItem("InternalModemLiListItem", FaxServiceTypeComboBox);
                    fInternalModemLiListItem.UIMap.Scope = UIASeachScope.Children;
                    fInternalModemLiListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fInternalModemLiListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Internal Modem");
                }

                return fInternalModemLiListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text InternalModemTeText
        {
            get
            {
                if (null == fInternalModemTeText)
                {
                    fInternalModemTeText = new Text("InternalModemTeText", InternalModemLiListItem);
                    fInternalModemTeText.UIMap.Scope = UIASeachScope.Children;
                    fInternalModemTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fInternalModemTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Internal Modem");
                }

                return fInternalModemTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem InternetFaxServListItem
        {
            get
            {
                if (null == fInternetFaxServListItem)
                {
                    fInternetFaxServListItem = new ListItem("InternetFaxServListItem", FaxServiceTypeComboBox);
                    fInternetFaxServListItem.UIMap.Scope = UIASeachScope.Children;
                    fInternetFaxServListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fInternetFaxServListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Internet Fax Service");
                }

                return fInternetFaxServListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text InternetFaxServText
        {
            get
            {
                if (null == fInternetFaxServText)
                {
                    fInternetFaxServText = new Text("InternetFaxServText", InternetFaxServListItem);
                    fInternetFaxServText.UIMap.Scope = UIASeachScope.Children;
                    fInternetFaxServText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fInternetFaxServText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Internet Fax Service");
                }

                return fInternetFaxServText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem LANFaxServiceLiListItem
        {
            get
            {
                if (null == fLANFaxServiceLiListItem)
                {
                    fLANFaxServiceLiListItem = new ListItem("LANFaxServiceLiListItem", FaxServiceTypeComboBox);
                    fLANFaxServiceLiListItem.UIMap.Scope = UIASeachScope.Children;
                    fLANFaxServiceLiListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fLANFaxServiceLiListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"LAN Fax Service");
                }

                return fLANFaxServiceLiListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text LANFaxServiceTeText
        {
            get
            {
                if (null == fLANFaxServiceTeText)
                {
                    fLANFaxServiceTeText = new Text("LANFaxServiceTeText", LANFaxServiceLiListItem);
                    fLANFaxServiceTeText.UIMap.Scope = UIASeachScope.Children;
                    fLANFaxServiceTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fLANFaxServiceTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"LAN Fax Service");
                }

                return fLANFaxServiceTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem viatheDigitalSeListItem
        {
            get
            {
                if (null == fviatheDigitalSeListItem)
                {
                    fviatheDigitalSeListItem = new ListItem("viatheDigitalSeListItem", FaxServiceTypeComboBox);
                    fviatheDigitalSeListItem.UIMap.Scope = UIASeachScope.Children;
                    fviatheDigitalSeListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fviatheDigitalSeListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"via the Digital Sending Service");
                }

                return fviatheDigitalSeListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text viatheDigitalSeText
        {
            get
            {
                if (null == fviatheDigitalSeText)
                {
                    fviatheDigitalSeText = new Text("viatheDigitalSeText", viatheDigitalSeListItem);
                    fviatheDigitalSeText.UIMap.Scope = UIASeachScope.Children;
                    fviatheDigitalSeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fviatheDigitalSeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"via the Digital Sending Service");
                }

                return fviatheDigitalSeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group DeviceModemSettGroup
        {
            get
            {
                if (null == fDeviceModemSettGroup)
                {
                    fDeviceModemSettGroup = new Group("DeviceModemSettGroup", FaxSendGroupBoxGroup);
                    fDeviceModemSettGroup.UIMap.Scope = UIASeachScope.Children;
                    fDeviceModemSettGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fDeviceModemSettGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device Modem Settings");
                }

                return fDeviceModemSettGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DeviceModemSettText
        {
            get
            {
                if (null == fDeviceModemSettText)
                {
                    fDeviceModemSettText = new Text("DeviceModemSettText", DeviceModemSettGroup);
                    fDeviceModemSettText.UIMap.Scope = UIASeachScope.Children;
                    fDeviceModemSettText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDeviceModemSettText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device Modem Settings");
                }

                return fDeviceModemSettText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group ApplyDeviceModeGroup
        {
            get
            {
                if (null == fApplyDeviceModeGroup)
                {
                    fApplyDeviceModeGroup = new Group("ApplyDeviceModeGroup", DeviceModemSettGroup);
                    fApplyDeviceModeGroup.UIMap.Scope = UIASeachScope.Children;
                    fApplyDeviceModeGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fApplyDeviceModeGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mApplyModemSettingsToDeviceGroupBox");
                    fApplyDeviceModeGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Apply Device Modem Settings to Device");
                }

                return fApplyDeviceModeGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CountryRegionText
        {
            get
            {
                if (null == fCountryRegionText)
                {
                    fCountryRegionText = new Text("CountryRegionText", ApplyDeviceModeGroup);
                    fCountryRegionText.UIMap.Scope = UIASeachScope.Children;
                    fCountryRegionText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fCountryRegionText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Country/Region");
                }

                return fCountryRegionText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CountryRegionTeText
        {
            get
            {
                if (null == fCountryRegionTeText)
                {
                    fCountryRegionTeText = new Text("CountryRegionTeText", CountryRegionText);
                    fCountryRegionTeText.UIMap.Scope = UIASeachScope.Children;
                    fCountryRegionTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCountryRegionTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Country/Region");
                }

                return fCountryRegionTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox CountryComboBox
        {
            get
            {
                if (null == fComboBoxf62a935ComboBox)
                {
                    fComboBoxf62a935ComboBox = new ComboBox("ComboBoxf62a935ComboBox", ApplyDeviceModeGroup);
                    fComboBoxf62a935ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxf62a935ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxf62a935ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"f62a9356-2dc0-482e-9b14-1a5f7f5bbd36");
                }

                return fComboBoxf62a935ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem NoneListBoxItemDup1ListItem
        {
            get
            {
                if (null == fNoneListBoxItemDup1ListItem)
                {
                    fNoneListBoxItemDup1ListItem = new ListItem("NoneListBoxItemDup1ListItem", CountryComboBox);
                    fNoneListBoxItemDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fNoneListBoxItemDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fNoneListBoxItemDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"None");
                }

                return fNoneListBoxItemDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem ArgentinaListBoDup1ListItem
        {
            get
            {
                if (null == fArgentinaListBoDup1ListItem)
                {
                    fArgentinaListBoDup1ListItem = new ListItem("ArgentinaListBoDup1ListItem", CountryComboBox);
                    fArgentinaListBoDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fArgentinaListBoDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fArgentinaListBoDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Argentina");
                }

                return fArgentinaListBoDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem AustraliaListBoDup1ListItem
        {
            get
            {
                if (null == fAustraliaListBoDup1ListItem)
                {
                    fAustraliaListBoDup1ListItem = new ListItem("AustraliaListBoDup1ListItem", CountryComboBox);
                    fAustraliaListBoDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fAustraliaListBoDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fAustraliaListBoDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Australia");
                }

                return fAustraliaListBoDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem AustriaListBoxIDup1ListItem
        {
            get
            {
                if (null == fAustriaListBoxIDup1ListItem)
                {
                    fAustriaListBoxIDup1ListItem = new ListItem("AustriaListBoxIDup1ListItem", CountryComboBox);
                    fAustriaListBoxIDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fAustriaListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fAustriaListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Austria");
                }

                return fAustriaListBoxIDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem BelarusListBoxIDup1ListItem
        {
            get
            {
                if (null == fBelarusListBoxIDup1ListItem)
                {
                    fBelarusListBoxIDup1ListItem = new ListItem("BelarusListBoxIDup1ListItem", CountryComboBox);
                    fBelarusListBoxIDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fBelarusListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fBelarusListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Belarus");
                }

                return fBelarusListBoxIDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem BelgiumListBoxIDup1ListItem
        {
            get
            {
                if (null == fBelgiumListBoxIDup1ListItem)
                {
                    fBelgiumListBoxIDup1ListItem = new ListItem("BelgiumListBoxIDup1ListItem", CountryComboBox);
                    fBelgiumListBoxIDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fBelgiumListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fBelgiumListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Belgium");
                }

                return fBelgiumListBoxIDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem BrazilListBoxItDup1ListItem
        {
            get
            {
                if (null == fBrazilListBoxItDup1ListItem)
                {
                    fBrazilListBoxItDup1ListItem = new ListItem("BrazilListBoxItDup1ListItem", CountryComboBox);
                    fBrazilListBoxItDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fBrazilListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fBrazilListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Brazil");
                }

                return fBrazilListBoxItDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem BulgariaListBoxDup1ListItem
        {
            get
            {
                if (null == fBulgariaListBoxDup1ListItem)
                {
                    fBulgariaListBoxDup1ListItem = new ListItem("BulgariaListBoxDup1ListItem", CountryComboBox);
                    fBulgariaListBoxDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fBulgariaListBoxDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fBulgariaListBoxDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Bulgaria");
                }

                return fBulgariaListBoxDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem CanadaListBoxItDup1ListItem
        {
            get
            {
                if (null == fCanadaListBoxItDup1ListItem)
                {
                    fCanadaListBoxItDup1ListItem = new ListItem("CanadaListBoxItDup1ListItem", CountryComboBox);
                    fCanadaListBoxItDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fCanadaListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fCanadaListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Canada");
                }

                return fCanadaListBoxItDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem ChileListBoxIteDup1ListItem
        {
            get
            {
                if (null == fChileListBoxIteDup1ListItem)
                {
                    fChileListBoxIteDup1ListItem = new ListItem("ChileListBoxIteDup1ListItem", CountryComboBox);
                    fChileListBoxIteDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fChileListBoxIteDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fChileListBoxIteDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Chile");
                }

                return fChileListBoxIteDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem CroatiaListBoxIDup1ListItem
        {
            get
            {
                if (null == fCroatiaListBoxIDup1ListItem)
                {
                    fCroatiaListBoxIDup1ListItem = new ListItem("CroatiaListBoxIDup1ListItem", CountryComboBox);
                    fCroatiaListBoxIDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fCroatiaListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fCroatiaListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Croatia");
                }

                return fCroatiaListBoxIDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem CzechRepublicLiDup1ListItem
        {
            get
            {
                if (null == fCzechRepublicLiDup1ListItem)
                {
                    fCzechRepublicLiDup1ListItem = new ListItem("CzechRepublicLiDup1ListItem", CountryComboBox);
                    fCzechRepublicLiDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fCzechRepublicLiDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fCzechRepublicLiDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Czech Republic");
                }

                return fCzechRepublicLiDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem ChinaListBoxIteDup1ListItem
        {
            get
            {
                if (null == fChinaListBoxIteDup1ListItem)
                {
                    fChinaListBoxIteDup1ListItem = new ListItem("ChinaListBoxIteDup1ListItem", CountryComboBox);
                    fChinaListBoxIteDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fChinaListBoxIteDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fChinaListBoxIteDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"China");
                }

                return fChinaListBoxIteDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem DenmarkListBoxIDup1ListItem
        {
            get
            {
                if (null == fDenmarkListBoxIDup1ListItem)
                {
                    fDenmarkListBoxIDup1ListItem = new ListItem("DenmarkListBoxIDup1ListItem", CountryComboBox);
                    fDenmarkListBoxIDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fDenmarkListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fDenmarkListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Denmark");
                }

                return fDenmarkListBoxIDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem EstoniaListBoxIDup1ListItem
        {
            get
            {
                if (null == fEstoniaListBoxIDup1ListItem)
                {
                    fEstoniaListBoxIDup1ListItem = new ListItem("EstoniaListBoxIDup1ListItem", CountryComboBox);
                    fEstoniaListBoxIDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fEstoniaListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fEstoniaListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Estonia");
                }

                return fEstoniaListBoxIDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem FinlandListBoxIDup1ListItem
        {
            get
            {
                if (null == fFinlandListBoxIDup1ListItem)
                {
                    fFinlandListBoxIDup1ListItem = new ListItem("FinlandListBoxIDup1ListItem", CountryComboBox);
                    fFinlandListBoxIDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fFinlandListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fFinlandListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Finland");
                }

                return fFinlandListBoxIDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem FranceListBoxItDup1ListItem
        {
            get
            {
                if (null == fFranceListBoxItDup1ListItem)
                {
                    fFranceListBoxItDup1ListItem = new ListItem("FranceListBoxItDup1ListItem", CountryComboBox);
                    fFranceListBoxItDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fFranceListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fFranceListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"France");
                }

                return fFranceListBoxItDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem GermanyListBoxIDup1ListItem
        {
            get
            {
                if (null == fGermanyListBoxIDup1ListItem)
                {
                    fGermanyListBoxIDup1ListItem = new ListItem("GermanyListBoxIDup1ListItem", CountryComboBox);
                    fGermanyListBoxIDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fGermanyListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fGermanyListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Germany");
                }

                return fGermanyListBoxIDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem GreeceListBoxItDup1ListItem
        {
            get
            {
                if (null == fGreeceListBoxItDup1ListItem)
                {
                    fGreeceListBoxItDup1ListItem = new ListItem("GreeceListBoxItDup1ListItem", CountryComboBox);
                    fGreeceListBoxItDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fGreeceListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fGreeceListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Greece");
                }

                return fGreeceListBoxItDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem HongKongSARListDup1ListItem
        {
            get
            {
                if (null == fHongKongSARListDup1ListItem)
                {
                    fHongKongSARListDup1ListItem = new ListItem("HongKongSARListDup1ListItem", CountryComboBox);
                    fHongKongSARListDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fHongKongSARListDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fHongKongSARListDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Hong Kong SAR");
                }

                return fHongKongSARListDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem HungaryListBoxIDup1ListItem
        {
            get
            {
                if (null == fHungaryListBoxIDup1ListItem)
                {
                    fHungaryListBoxIDup1ListItem = new ListItem("HungaryListBoxIDup1ListItem", CountryComboBox);
                    fHungaryListBoxIDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fHungaryListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fHungaryListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Hungary");
                }

                return fHungaryListBoxIDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem IcelandListBoxIDup1ListItem
        {
            get
            {
                if (null == fIcelandListBoxIDup1ListItem)
                {
                    fIcelandListBoxIDup1ListItem = new ListItem("IcelandListBoxIDup1ListItem", CountryComboBox);
                    fIcelandListBoxIDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fIcelandListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fIcelandListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Iceland");
                }

                return fIcelandListBoxIDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem IndiaListBoxIteDup1ListItem
        {
            get
            {
                if (null == fIndiaListBoxIteDup1ListItem)
                {
                    fIndiaListBoxIteDup1ListItem = new ListItem("IndiaListBoxIteDup1ListItem", CountryComboBox);
                    fIndiaListBoxIteDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fIndiaListBoxIteDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fIndiaListBoxIteDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"India");
                }

                return fIndiaListBoxIteDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem IndonesiaListBoDup1ListItem
        {
            get
            {
                if (null == fIndonesiaListBoDup1ListItem)
                {
                    fIndonesiaListBoDup1ListItem = new ListItem("IndonesiaListBoDup1ListItem", CountryComboBox);
                    fIndonesiaListBoDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fIndonesiaListBoDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fIndonesiaListBoDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Indonesia");
                }

                return fIndonesiaListBoDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem IrelandListBoxIDup1ListItem
        {
            get
            {
                if (null == fIrelandListBoxIDup1ListItem)
                {
                    fIrelandListBoxIDup1ListItem = new ListItem("IrelandListBoxIDup1ListItem", CountryComboBox);
                    fIrelandListBoxIDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fIrelandListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fIrelandListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Ireland");
                }

                return fIrelandListBoxIDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem IsraelListBoxItDup1ListItem
        {
            get
            {
                if (null == fIsraelListBoxItDup1ListItem)
                {
                    fIsraelListBoxItDup1ListItem = new ListItem("IsraelListBoxItDup1ListItem", CountryComboBox);
                    fIsraelListBoxItDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fIsraelListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fIsraelListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Israel");
                }

                return fIsraelListBoxItDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem ItalyListBoxIteDup1ListItem
        {
            get
            {
                if (null == fItalyListBoxIteDup1ListItem)
                {
                    fItalyListBoxIteDup1ListItem = new ListItem("ItalyListBoxIteDup1ListItem", CountryComboBox);
                    fItalyListBoxIteDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fItalyListBoxIteDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fItalyListBoxIteDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Italy");
                }

                return fItalyListBoxIteDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem JapanListBoxIteDup1ListItem
        {
            get
            {
                if (null == fJapanListBoxIteDup1ListItem)
                {
                    fJapanListBoxIteDup1ListItem = new ListItem("JapanListBoxIteDup1ListItem", CountryComboBox);
                    fJapanListBoxIteDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fJapanListBoxIteDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fJapanListBoxIteDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Japan");
                }

                return fJapanListBoxIteDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem KoreaListBoxIteDup1ListItem
        {
            get
            {
                if (null == fKoreaListBoxIteDup1ListItem)
                {
                    fKoreaListBoxIteDup1ListItem = new ListItem("KoreaListBoxIteDup1ListItem", CountryComboBox);
                    fKoreaListBoxIteDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fKoreaListBoxIteDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fKoreaListBoxIteDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Korea");
                }

                return fKoreaListBoxIteDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem LatviaListBoxItDup1ListItem
        {
            get
            {
                if (null == fLatviaListBoxItDup1ListItem)
                {
                    fLatviaListBoxItDup1ListItem = new ListItem("LatviaListBoxItDup1ListItem", CountryComboBox);
                    fLatviaListBoxItDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fLatviaListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fLatviaListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Latvia");
                }

                return fLatviaListBoxItDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem LiechtensteinLiDup1ListItem
        {
            get
            {
                if (null == fLiechtensteinLiDup1ListItem)
                {
                    fLiechtensteinLiDup1ListItem = new ListItem("LiechtensteinLiDup1ListItem", CountryComboBox);
                    fLiechtensteinLiDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fLiechtensteinLiDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fLiechtensteinLiDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Liechtenstein");
                }

                return fLiechtensteinLiDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem LithuaniaListBoDup1ListItem
        {
            get
            {
                if (null == fLithuaniaListBoDup1ListItem)
                {
                    fLithuaniaListBoDup1ListItem = new ListItem("LithuaniaListBoDup1ListItem", CountryComboBox);
                    fLithuaniaListBoDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fLithuaniaListBoDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fLithuaniaListBoDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Lithuania");
                }

                return fLithuaniaListBoDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem LuxembourgListBDup1ListItem
        {
            get
            {
                if (null == fLuxembourgListBDup1ListItem)
                {
                    fLuxembourgListBDup1ListItem = new ListItem("LuxembourgListBDup1ListItem", CountryComboBox);
                    fLuxembourgListBDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fLuxembourgListBDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fLuxembourgListBDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Luxembourg");
                }

                return fLuxembourgListBDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem MalaysiaListBoxDup1ListItem
        {
            get
            {
                if (null == fMalaysiaListBoxDup1ListItem)
                {
                    fMalaysiaListBoxDup1ListItem = new ListItem("MalaysiaListBoxDup1ListItem", CountryComboBox);
                    fMalaysiaListBoxDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fMalaysiaListBoxDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMalaysiaListBoxDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Malaysia");
                }

                return fMalaysiaListBoxDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem MexicoListBoxItDup1ListItem
        {
            get
            {
                if (null == fMexicoListBoxItDup1ListItem)
                {
                    fMexicoListBoxItDup1ListItem = new ListItem("MexicoListBoxItDup1ListItem", CountryComboBox);
                    fMexicoListBoxItDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fMexicoListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMexicoListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Mexico");
                }

                return fMexicoListBoxItDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem MoroccoListBoxIDup1ListItem
        {
            get
            {
                if (null == fMoroccoListBoxIDup1ListItem)
                {
                    fMoroccoListBoxIDup1ListItem = new ListItem("MoroccoListBoxIDup1ListItem", CountryComboBox);
                    fMoroccoListBoxIDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fMoroccoListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMoroccoListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Morocco");
                }

                return fMoroccoListBoxIDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem NetherlandsListDup1ListItem
        {
            get
            {
                if (null == fNetherlandsListDup1ListItem)
                {
                    fNetherlandsListDup1ListItem = new ListItem("NetherlandsListDup1ListItem", CountryComboBox);
                    fNetherlandsListDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fNetherlandsListDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fNetherlandsListDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Netherlands");
                }

                return fNetherlandsListDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem NewZealandListBDup1ListItem
        {
            get
            {
                if (null == fNewZealandListBDup1ListItem)
                {
                    fNewZealandListBDup1ListItem = new ListItem("NewZealandListBDup1ListItem", CountryComboBox);
                    fNewZealandListBDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fNewZealandListBDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fNewZealandListBDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"New Zealand");
                }

                return fNewZealandListBDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem NorwayListBoxItDup1ListItem
        {
            get
            {
                if (null == fNorwayListBoxItDup1ListItem)
                {
                    fNorwayListBoxItDup1ListItem = new ListItem("NorwayListBoxItDup1ListItem", CountryComboBox);
                    fNorwayListBoxItDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fNorwayListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fNorwayListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Norway");
                }

                return fNorwayListBoxItDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem PakistanListBoxDup1ListItem
        {
            get
            {
                if (null == fPakistanListBoxDup1ListItem)
                {
                    fPakistanListBoxDup1ListItem = new ListItem("PakistanListBoxDup1ListItem", CountryComboBox);
                    fPakistanListBoxDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fPakistanListBoxDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fPakistanListBoxDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Pakistan");
                }

                return fPakistanListBoxDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem PeruListBoxItemDup1ListItem
        {
            get
            {
                if (null == fPeruListBoxItemDup1ListItem)
                {
                    fPeruListBoxItemDup1ListItem = new ListItem("PeruListBoxItemDup1ListItem", CountryComboBox);
                    fPeruListBoxItemDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fPeruListBoxItemDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fPeruListBoxItemDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Peru");
                }

                return fPeruListBoxItemDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem PhilippinesListDup1ListItem
        {
            get
            {
                if (null == fPhilippinesListDup1ListItem)
                {
                    fPhilippinesListDup1ListItem = new ListItem("PhilippinesListDup1ListItem", CountryComboBox);
                    fPhilippinesListDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fPhilippinesListDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fPhilippinesListDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Philippines");
                }

                return fPhilippinesListDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem PolandListBoxItDup1ListItem
        {
            get
            {
                if (null == fPolandListBoxItDup1ListItem)
                {
                    fPolandListBoxItDup1ListItem = new ListItem("PolandListBoxItDup1ListItem", CountryComboBox);
                    fPolandListBoxItDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fPolandListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fPolandListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Poland");
                }

                return fPolandListBoxItDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem PortugalListBoxDup1ListItem
        {
            get
            {
                if (null == fPortugalListBoxDup1ListItem)
                {
                    fPortugalListBoxDup1ListItem = new ListItem("PortugalListBoxDup1ListItem", CountryComboBox);
                    fPortugalListBoxDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fPortugalListBoxDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fPortugalListBoxDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Portugal");
                }

                return fPortugalListBoxDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem RomaniaListBoxIDup1ListItem
        {
            get
            {
                if (null == fRomaniaListBoxIDup1ListItem)
                {
                    fRomaniaListBoxIDup1ListItem = new ListItem("RomaniaListBoxIDup1ListItem", CountryComboBox);
                    fRomaniaListBoxIDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fRomaniaListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fRomaniaListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Romania");
                }

                return fRomaniaListBoxIDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem RussiaListBoxItDup1ListItem
        {
            get
            {
                if (null == fRussiaListBoxItDup1ListItem)
                {
                    fRussiaListBoxItDup1ListItem = new ListItem("RussiaListBoxItDup1ListItem", CountryComboBox);
                    fRussiaListBoxItDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fRussiaListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fRussiaListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Russia");
                }

                return fRussiaListBoxItDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem SingaporeListBoDup1ListItem
        {
            get
            {
                if (null == fSingaporeListBoDup1ListItem)
                {
                    fSingaporeListBoDup1ListItem = new ListItem("SingaporeListBoDup1ListItem", CountryComboBox);
                    fSingaporeListBoDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fSingaporeListBoDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fSingaporeListBoDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Singapore");
                }

                return fSingaporeListBoDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem SlovakiaListBoxDup1ListItem
        {
            get
            {
                if (null == fSlovakiaListBoxDup1ListItem)
                {
                    fSlovakiaListBoxDup1ListItem = new ListItem("SlovakiaListBoxDup1ListItem", CountryComboBox);
                    fSlovakiaListBoxDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fSlovakiaListBoxDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fSlovakiaListBoxDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Slovakia");
                }

                return fSlovakiaListBoxDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem SloveniaListBoxDup1ListItem
        {
            get
            {
                if (null == fSloveniaListBoxDup1ListItem)
                {
                    fSloveniaListBoxDup1ListItem = new ListItem("SloveniaListBoxDup1ListItem", CountryComboBox);
                    fSloveniaListBoxDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fSloveniaListBoxDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fSloveniaListBoxDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Slovenia");
                }

                return fSloveniaListBoxDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem SouthAfricaListDup1ListItem
        {
            get
            {
                if (null == fSouthAfricaListDup1ListItem)
                {
                    fSouthAfricaListDup1ListItem = new ListItem("SouthAfricaListDup1ListItem", CountryComboBox);
                    fSouthAfricaListDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fSouthAfricaListDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fSouthAfricaListDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"South Africa");
                }

                return fSouthAfricaListDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem SpainListBoxIteDup1ListItem
        {
            get
            {
                if (null == fSpainListBoxIteDup1ListItem)
                {
                    fSpainListBoxIteDup1ListItem = new ListItem("SpainListBoxIteDup1ListItem", CountryComboBox);
                    fSpainListBoxIteDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fSpainListBoxIteDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fSpainListBoxIteDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Spain");
                }

                return fSpainListBoxIteDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem SriLankaListBoxDup1ListItem
        {
            get
            {
                if (null == fSriLankaListBoxDup1ListItem)
                {
                    fSriLankaListBoxDup1ListItem = new ListItem("SriLankaListBoxDup1ListItem", CountryComboBox);
                    fSriLankaListBoxDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fSriLankaListBoxDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fSriLankaListBoxDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Sri Lanka");
                }

                return fSriLankaListBoxDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem SwedenListBoxItDup1ListItem
        {
            get
            {
                if (null == fSwedenListBoxItDup1ListItem)
                {
                    fSwedenListBoxItDup1ListItem = new ListItem("SwedenListBoxItDup1ListItem", CountryComboBox);
                    fSwedenListBoxItDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fSwedenListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fSwedenListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Sweden");
                }

                return fSwedenListBoxItDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem SwitzerlandListDup1ListItem
        {
            get
            {
                if (null == fSwitzerlandListDup1ListItem)
                {
                    fSwitzerlandListDup1ListItem = new ListItem("SwitzerlandListDup1ListItem", CountryComboBox);
                    fSwitzerlandListDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fSwitzerlandListDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fSwitzerlandListDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Switzerland");
                }

                return fSwitzerlandListDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem TaiwanListBoxItDup1ListItem
        {
            get
            {
                if (null == fTaiwanListBoxItDup1ListItem)
                {
                    fTaiwanListBoxItDup1ListItem = new ListItem("TaiwanListBoxItDup1ListItem", CountryComboBox);
                    fTaiwanListBoxItDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fTaiwanListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fTaiwanListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Taiwan");
                }

                return fTaiwanListBoxItDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem ThailandListBoxDup1ListItem
        {
            get
            {
                if (null == fThailandListBoxDup1ListItem)
                {
                    fThailandListBoxDup1ListItem = new ListItem("ThailandListBoxDup1ListItem", CountryComboBox);
                    fThailandListBoxDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fThailandListBoxDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fThailandListBoxDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Thailand");
                }

                return fThailandListBoxDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem TurkeyListBoxItDup1ListItem
        {
            get
            {
                if (null == fTurkeyListBoxItDup1ListItem)
                {
                    fTurkeyListBoxItDup1ListItem = new ListItem("TurkeyListBoxItDup1ListItem", CountryComboBox);
                    fTurkeyListBoxItDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fTurkeyListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fTurkeyListBoxItDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Turkey");
                }

                return fTurkeyListBoxItDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem UkraineListBoxIDup1ListItem
        {
            get
            {
                if (null == fUkraineListBoxIDup1ListItem)
                {
                    fUkraineListBoxIDup1ListItem = new ListItem("UkraineListBoxIDup1ListItem", CountryComboBox);
                    fUkraineListBoxIDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fUkraineListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fUkraineListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Ukraine");
                }

                return fUkraineListBoxIDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem UnitedKingdomLiDup1ListItem
        {
            get
            {
                if (null == fUnitedKingdomLiDup1ListItem)
                {
                    fUnitedKingdomLiDup1ListItem = new ListItem("UnitedKingdomLiDup1ListItem", CountryComboBox);
                    fUnitedKingdomLiDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fUnitedKingdomLiDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fUnitedKingdomLiDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"United Kingdom");
                }

                return fUnitedKingdomLiDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem UnitedStatesLisDup1ListItem
        {
            get
            {
                if (null == fUnitedStatesLisDup1ListItem)
                {
                    fUnitedStatesLisDup1ListItem = new ListItem("UnitedStatesLisDup1ListItem", CountryComboBox);
                    fUnitedStatesLisDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fUnitedStatesLisDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fUnitedStatesLisDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"United States");
                }

                return fUnitedStatesLisDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem VietnamListBoxIDup1ListItem
        {
            get
            {
                if (null == fVietnamListBoxIDup1ListItem)
                {
                    fVietnamListBoxIDup1ListItem = new ListItem("VietnamListBoxIDup1ListItem", CountryComboBox);
                    fVietnamListBoxIDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fVietnamListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fVietnamListBoxIDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Vietnam");
                }

                return fVietnamListBoxIDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CompanyNameText
        {
            get
            {
                if (null == fCompanyNameText)
                {
                    fCompanyNameText = new Text("CompanyNameText", ApplyDeviceModeGroup);
                    fCompanyNameText.UIMap.Scope = UIASeachScope.Children;
                    fCompanyNameText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fCompanyNameText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Company Name");
                }

                return fCompanyNameText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CompanyNameTextText
        {
            get
            {
                if (null == fCompanyNameTextText)
                {
                    fCompanyNameTextText = new Text("CompanyNameTextText", CompanyNameText);
                    fCompanyNameTextText.UIMap.Scope = UIASeachScope.Children;
                    fCompanyNameTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCompanyNameTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Company Name");
                }

                return fCompanyNameTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit CompanyNameEditTextBox
        {
            get
            {
                if (null == fTextBoxf025cf4cEdit)
                {
                    fTextBoxf025cf4cEdit = new Edit("TextBoxf025cf4cEdit", ApplyDeviceModeGroup);
                    fTextBoxf025cf4cEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxf025cf4cEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxf025cf4cEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"f025cf4c-82c2-4745-ac3f-e3a8fe1e2505");
                }

                return fTextBoxf025cf4cEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup0Pane
        {
            get
            {
                if (null == fScrollViewerPARDup0Pane)
                {
                    fScrollViewerPARDup0Pane = new Pane("ScrollViewerPARDup0Pane", CompanyNameEditTextBox);
                    fScrollViewerPARDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PhoneNumberText
        {
            get
            {
                if (null == fPhoneNumberText)
                {
                    fPhoneNumberText = new Text("PhoneNumberText", ApplyDeviceModeGroup);
                    fPhoneNumberText.UIMap.Scope = UIASeachScope.Children;
                    fPhoneNumberText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fPhoneNumberText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Phone Number");
                }

                return fPhoneNumberText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PhoneNumberTextText
        {
            get
            {
                if (null == fPhoneNumberTextText)
                {
                    fPhoneNumberTextText = new Text("PhoneNumberTextText", PhoneNumberText);
                    fPhoneNumberTextText.UIMap.Scope = UIASeachScope.Children;
                    fPhoneNumberTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPhoneNumberTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Phone Number");
                }

                return fPhoneNumberTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit PhoneNumberEditTextBox
        {
            get
            {
                if (null == fTextBoxa903a57eEdit)
                {
                    fTextBoxa903a57eEdit = new Edit("TextBoxa903a57eEdit", ApplyDeviceModeGroup);
                    fTextBoxa903a57eEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxa903a57eEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxa903a57eEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"a903a57e-a25d-4efb-a6de-9bc0ca2616ca");
                }

                return fTextBoxa903a57eEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup1Pane
        {
            get
            {
                if (null == fScrollViewerPARDup1Pane)
                {
                    fScrollViewerPARDup1Pane = new Pane("ScrollViewerPARDup1Pane", PhoneNumberEditTextBox);
                    fScrollViewerPARDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox ApplyDeviceModeCheckBox
        {
            get
            {
                if (null == fApplyDeviceModeCheckBox)
                {
                    fApplyDeviceModeCheckBox = new CheckBox("ApplyDeviceModeCheckBox", ApplyDeviceModeGroup);
                    fApplyDeviceModeCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fApplyDeviceModeCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fApplyDeviceModeCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mApplyModemSettingsToDeviceCheckBox");
                    fApplyDeviceModeCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Apply Device Modem Settings to Device");
                }

                return fApplyDeviceModeCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group GeneralFaxSendSGroup
        {
            get
            {
                if (null == fGeneralFaxSendSGroup)
                {
                    fGeneralFaxSendSGroup = new Group("GeneralFaxSendSGroup", FaxSendGroupBoxGroup);
                    fGeneralFaxSendSGroup.UIMap.Scope = UIASeachScope.Children;
                    fGeneralFaxSendSGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fGeneralFaxSendSGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"General Fax Send Settings");
                }

                return fGeneralFaxSendSGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GeneralFaxSendSText
        {
            get
            {
                if (null == fGeneralFaxSendSText)
                {
                    fGeneralFaxSendSText = new Text("GeneralFaxSendSText", GeneralFaxSendSGroup);
                    fGeneralFaxSendSText.UIMap.Scope = UIASeachScope.Children;
                    fGeneralFaxSendSText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fGeneralFaxSendSText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"General Fax Send Settings");
                }

                return fGeneralFaxSendSText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox EnablePCFaxSendCheckBox
        {
            get
            {
                if (null == fEnablePCFaxSendCheckBox)
                {
                    fEnablePCFaxSendCheckBox = new CheckBox("EnablePCFaxSendCheckBox", GeneralFaxSendSGroup);
                    fEnablePCFaxSendCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fEnablePCFaxSendCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fEnablePCFaxSendCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"e358bf2d-8127-4882-b1a6-62e1a320eef5");
                    fEnablePCFaxSendCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enable PC Fax Send");
                }

                return fEnablePCFaxSendCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EnablePCFaxSendText
        {
            get
            {
                if (null == fEnablePCFaxSendText)
                {
                    fEnablePCFaxSendText = new Text("EnablePCFaxSendText", EnablePCFaxSendCheckBox);
                    fEnablePCFaxSendText.UIMap.Scope = UIASeachScope.Children;
                    fEnablePCFaxSendText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEnablePCFaxSendText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enable PC Fax Send");
                }

                return fEnablePCFaxSendText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ErrorCorrectionDup0Text
        {
            get
            {
                if (null == fErrorCorrectionDup0Text)
                {
                    fErrorCorrectionDup0Text = new Text("ErrorCorrectionDup0Text", GeneralFaxSendSGroup);
                    fErrorCorrectionDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fErrorCorrectionDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fErrorCorrectionDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Error Correction Mode");
                }

                return fErrorCorrectionDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ErrorCorrectionDup1Text
        {
            get
            {
                if (null == fErrorCorrectionDup1Text)
                {
                    fErrorCorrectionDup1Text = new Text("ErrorCorrectionDup1Text", ErrorCorrectionDup0Text);
                    fErrorCorrectionDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fErrorCorrectionDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fErrorCorrectionDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Error Correction Mode");
                }

                return fErrorCorrectionDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox779dfdcComboBox
        {
            get
            {
                if (null == fComboBox779dfdcComboBox)
                {
                    fComboBox779dfdcComboBox = new ComboBox("ComboBox779dfdcComboBox", GeneralFaxSendSGroup);
                    fComboBox779dfdcComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox779dfdcComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox779dfdcComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"779dfdc8-1a3c-46cd-a227-73ddd44343b0");
                }

                return fComboBox779dfdcComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxHeaderText
        {
            get
            {
                if (null == fFaxHeaderText)
                {
                    fFaxHeaderText = new Text("FaxHeaderText", GeneralFaxSendSGroup);
                    fFaxHeaderText.UIMap.Scope = UIASeachScope.Children;
                    fFaxHeaderText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fFaxHeaderText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Header");
                }

                return fFaxHeaderText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxHeaderTextBlText
        {
            get
            {
                if (null == fFaxHeaderTextBlText)
                {
                    fFaxHeaderTextBlText = new Text("FaxHeaderTextBlText", FaxHeaderText);
                    fFaxHeaderTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fFaxHeaderTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxHeaderTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Header");
                }

                return fFaxHeaderTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxABA7D67ComboBox
        {
            get
            {
                if (null == fComboBoxABA7D67ComboBox)
                {
                    fComboBoxABA7D67ComboBox = new ComboBox("ComboBoxABA7D67ComboBox", GeneralFaxSendSGroup);
                    fComboBoxABA7D67ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxABA7D67ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxABA7D67ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ABA7D676-C7D2-4eb2-A63F-AE14793BF0BB");
                }

                return fComboBoxABA7D67ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox EnableJBIGComprCheckBox
        {
            get
            {
                if (null == fEnableJBIGComprCheckBox)
                {
                    fEnableJBIGComprCheckBox = new CheckBox("EnableJBIGComprCheckBox", GeneralFaxSendSGroup);
                    fEnableJBIGComprCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fEnableJBIGComprCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fEnableJBIGComprCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"f7822cde-0d02-4825-ac43-c57639b76971");
                    fEnableJBIGComprCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enable JBIG Compression");
                }

                return fEnableJBIGComprCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EnableJBIGComprText
        {
            get
            {
                if (null == fEnableJBIGComprText)
                {
                    fEnableJBIGComprText = new Text("EnableJBIGComprText", EnableJBIGComprCheckBox);
                    fEnableJBIGComprText.UIMap.Scope = UIASeachScope.Children;
                    fEnableJBIGComprText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEnableJBIGComprText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enable JBIG Compression");
                }

                return fEnableJBIGComprText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group FaxDialingSettiGroup
        {
            get
            {
                if (null == fFaxDialingSettiGroup)
                {
                    fFaxDialingSettiGroup = new Group("FaxDialingSettiGroup", FaxSendGroupBoxGroup);
                    fFaxDialingSettiGroup.UIMap.Scope = UIASeachScope.Children;
                    fFaxDialingSettiGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fFaxDialingSettiGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Dialing Settings");
                }

                return fFaxDialingSettiGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxDialingSettiText
        {
            get
            {
                if (null == fFaxDialingSettiText)
                {
                    fFaxDialingSettiText = new Text("FaxDialingSettiText", FaxDialingSettiGroup);
                    fFaxDialingSettiText.UIMap.Scope = UIASeachScope.Children;
                    fFaxDialingSettiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxDialingSettiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Dialing Settings");
                }

                return fFaxDialingSettiText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxDialVolumeText
        {
            get
            {
                if (null == fFaxDialVolumeText)
                {
                    fFaxDialVolumeText = new Text("FaxDialVolumeText", FaxDialingSettiGroup);
                    fFaxDialVolumeText.UIMap.Scope = UIASeachScope.Children;
                    fFaxDialVolumeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fFaxDialVolumeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Dial Volume");
                }

                return fFaxDialVolumeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxDialVolumeTeText
        {
            get
            {
                if (null == fFaxDialVolumeTeText)
                {
                    fFaxDialVolumeTeText = new Text("FaxDialVolumeTeText", FaxDialVolumeText);
                    fFaxDialVolumeTeText.UIMap.Scope = UIASeachScope.Children;
                    fFaxDialVolumeTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxDialVolumeTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Dial Volume");
                }

                return fFaxDialVolumeTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxa2ba831ComboBox
        {
            get
            {
                if (null == fComboBoxa2ba831ComboBox)
                {
                    fComboBoxa2ba831ComboBox = new ComboBox("ComboBoxa2ba831ComboBox", FaxDialingSettiGroup);
                    fComboBoxa2ba831ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxa2ba831ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxa2ba831ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"a2ba8313-7c1a-4899-ae46-701d3d2f25ea");
                }

                return fComboBoxa2ba831ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DialingModeText
        {
            get
            {
                if (null == fDialingModeText)
                {
                    fDialingModeText = new Text("DialingModeText", FaxDialingSettiGroup);
                    fDialingModeText.UIMap.Scope = UIASeachScope.Children;
                    fDialingModeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fDialingModeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Dialing Mode");
                }

                return fDialingModeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DialingModeTextText
        {
            get
            {
                if (null == fDialingModeTextText)
                {
                    fDialingModeTextText = new Text("DialingModeTextText", DialingModeText);
                    fDialingModeTextText.UIMap.Scope = UIASeachScope.Children;
                    fDialingModeTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDialingModeTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Dialing Mode");
                }

                return fDialingModeTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox7b47845ComboBox
        {
            get
            {
                if (null == fComboBox7b47845ComboBox)
                {
                    fComboBox7b47845ComboBox = new ComboBox("ComboBox7b47845ComboBox", FaxDialingSettiGroup);
                    fComboBox7b47845ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox7b47845ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox7b47845ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7b478454-e886-418b-9991-d373c30909fe");
                }

                return fComboBox7b47845ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DialingPrefixText
        {
            get
            {
                if (null == fDialingPrefixText)
                {
                    fDialingPrefixText = new Text("DialingPrefixText", FaxDialingSettiGroup);
                    fDialingPrefixText.UIMap.Scope = UIASeachScope.Children;
                    fDialingPrefixText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fDialingPrefixText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Dialing Prefix");
                }

                return fDialingPrefixText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DialingPrefixTeText
        {
            get
            {
                if (null == fDialingPrefixTeText)
                {
                    fDialingPrefixTeText = new Text("DialingPrefixTeText", DialingPrefixText);
                    fDialingPrefixTeText.UIMap.Scope = UIASeachScope.Children;
                    fDialingPrefixTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDialingPrefixTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Dialing Prefix");
                }

                return fDialingPrefixTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBox3d3f4141Edit
        {
            get
            {
                if (null == fTextBox3d3f4141Edit)
                {
                    fTextBox3d3f4141Edit = new Edit("TextBox3d3f4141Edit", FaxDialingSettiGroup);
                    fTextBox3d3f4141Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox3d3f4141Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox3d3f4141Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3d3f4141-1c8a-4558-9d7b-6b7093b25d7d");
                }

                return fTextBox3d3f4141Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup2Pane
        {
            get
            {
                if (null == fScrollViewerPARDup2Pane)
                {
                    fScrollViewerPARDup2Pane = new Pane("ScrollViewerPARDup2Pane", TextBox3d3f4141Edit);
                    fScrollViewerPARDup2Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup2Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup2Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup2Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup1ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup1ScrollBar)
                {
                    fScrollBarVerticDup1ScrollBar = new ScrollBar("ScrollBarVerticDup1ScrollBar", ScrollViewerPARDup2Pane);
                    fScrollBarVerticDup1ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup1ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup1ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup1ScrollBar)
                {
                    fScrollBarHorizoDup1ScrollBar = new ScrollBar("ScrollBarHorizoDup1ScrollBar", ScrollViewerPARDup2Pane);
                    fScrollBarHorizoDup1ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup1ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RedialIntervalText
        {
            get
            {
                if (null == fRedialIntervalText)
                {
                    fRedialIntervalText = new Text("RedialIntervalText", FaxDialingSettiGroup);
                    fRedialIntervalText.UIMap.Scope = UIASeachScope.Children;
                    fRedialIntervalText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fRedialIntervalText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Redial Interval");
                }

                return fRedialIntervalText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RedialIntervalTText
        {
            get
            {
                if (null == fRedialIntervalTText)
                {
                    fRedialIntervalTText = new Text("RedialIntervalTText", RedialIntervalText);
                    fRedialIntervalTText.UIMap.Scope = UIASeachScope.Children;
                    fRedialIntervalTText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRedialIntervalTText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Redial Interval");
                }

                return fRedialIntervalTText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox2b4c51bComboBox
        {
            get
            {
                if (null == fComboBox2b4c51bComboBox)
                {
                    fComboBox2b4c51bComboBox = new ComboBox("ComboBox2b4c51bComboBox", FaxDialingSettiGroup);
                    fComboBox2b4c51bComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox2b4c51bComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox2b4c51bComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2b4c51b4-1baa-489f-9676-f85ec43f7367");
                }

                return fComboBox2b4c51bComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RedialonNoAnsweDup0Text
        {
            get
            {
                if (null == fRedialonNoAnsweDup0Text)
                {
                    fRedialonNoAnsweDup0Text = new Text("RedialonNoAnsweDup0Text", FaxDialingSettiGroup);
                    fRedialonNoAnsweDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fRedialonNoAnsweDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fRedialonNoAnsweDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Redial on No Answer");
                }

                return fRedialonNoAnsweDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RedialonNoAnsweDup1Text
        {
            get
            {
                if (null == fRedialonNoAnsweDup1Text)
                {
                    fRedialonNoAnsweDup1Text = new Text("RedialonNoAnsweDup1Text", RedialonNoAnsweDup0Text);
                    fRedialonNoAnsweDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fRedialonNoAnsweDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRedialonNoAnsweDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Redial on No Answer");
                }

                return fRedialonNoAnsweDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox69408eeComboBox
        {
            get
            {
                if (null == fComboBox69408eeComboBox)
                {
                    fComboBox69408eeComboBox = new ComboBox("ComboBox69408eeComboBox", FaxDialingSettiGroup);
                    fComboBox69408eeComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox69408eeComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox69408eeComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"69408ee2-ce52-4925-8701-a500a9adcc4d");
                }

                return fComboBox69408eeComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RedialonBusyText
        {
            get
            {
                if (null == fRedialonBusyText)
                {
                    fRedialonBusyText = new Text("RedialonBusyText", FaxDialingSettiGroup);
                    fRedialonBusyText.UIMap.Scope = UIASeachScope.Children;
                    fRedialonBusyText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fRedialonBusyText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Redial on Busy");
                }

                return fRedialonBusyText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RedialonBusyTexText
        {
            get
            {
                if (null == fRedialonBusyTexText)
                {
                    fRedialonBusyTexText = new Text("RedialonBusyTexText", RedialonBusyText);
                    fRedialonBusyTexText.UIMap.Scope = UIASeachScope.Children;
                    fRedialonBusyTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRedialonBusyTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Redial on Busy");
                }

                return fRedialonBusyTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox4d349bbComboBox
        {
            get
            {
                if (null == fComboBox4d349bbComboBox)
                {
                    fComboBox4d349bbComboBox = new ComboBox("ComboBox4d349bbComboBox", FaxDialingSettiGroup);
                    fComboBox4d349bbComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox4d349bbComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox4d349bbComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4d349bb3-6e52-46bf-a462-df94389b7703");
                }

                return fComboBox4d349bbComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox DetectDialToneCCheckBox
        {
            get
            {
                if (null == fDetectDialToneCCheckBox)
                {
                    fDetectDialToneCCheckBox = new CheckBox("DetectDialToneCCheckBox", FaxDialingSettiGroup);
                    fDetectDialToneCCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fDetectDialToneCCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fDetectDialToneCCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"74bff246-83ac-4701-8019-3b2ef3dba918");
                    fDetectDialToneCCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Detect Dial Tone");
                }

                return fDetectDialToneCCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DetectDialToneTText
        {
            get
            {
                if (null == fDetectDialToneTText)
                {
                    fDetectDialToneTText = new Text("DetectDialToneTText", DetectDialToneCCheckBox);
                    fDetectDialToneTText.UIMap.Scope = UIASeachScope.Children;
                    fDetectDialToneTText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDetectDialToneTText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Detect Dial Tone");
                }

                return fDetectDialToneTText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group InternetFaxSetuDup0Group
        {
            get
            {
                if (null == fInternetFaxSetuDup0Group)
                {
                    fInternetFaxSetuDup0Group = new Group("InternetFaxSetuDup0Group", FaxSendGroupBoxGroup);
                    fInternetFaxSetuDup0Group.UIMap.Scope = UIASeachScope.Children;
                    fInternetFaxSetuDup0Group.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fInternetFaxSetuDup0Group.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"49631f7e-29f8-496c-8eca-074505b510f3");
                    fInternetFaxSetuDup0Group.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Internet Fax Setup");
                }

                return fInternetFaxSetuDup0Group;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group InternetFaxSetuDup1Group
        {
            get
            {
                if (null == fInternetFaxSetuDup1Group)
                {
                    fInternetFaxSetuDup1Group = new Group("InternetFaxSetuDup1Group", FaxSendGroupBoxGroup);
                    fInternetFaxSetuDup1Group.UIMap.Scope = UIASeachScope.Children;
                    fInternetFaxSetuDup1Group.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fInternetFaxSetuDup1Group.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9db964f5-2057-4434-9574-99fdf382c513");
                    fInternetFaxSetuDup1Group.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Internet Fax Setup");
                }

                return fInternetFaxSetuDup1Group;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group LANFaxSetupGrouGroup
        {
            get
            {
                if (null == fLANFaxSetupGrouGroup)
                {
                    fLANFaxSetupGrouGroup = new Group("LANFaxSetupGrouGroup", FaxSendGroupBoxGroup);
                    fLANFaxSetupGrouGroup.UIMap.Scope = UIASeachScope.Children;
                    fLANFaxSetupGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fLANFaxSetupGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c50dfaff-d600-4a5c-becb-03fdf7060c9f");
                    fLANFaxSetupGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"LAN Fax Setup");
                }

                return fLANFaxSetupGrouGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group BillingCodesGroGroup
        {
            get
            {
                if (null == fBillingCodesGroGroup)
                {
                    fBillingCodesGroGroup = new Group("BillingCodesGroGroup", FaxSendGroupBoxGroup);
                    fBillingCodesGroGroup.UIMap.Scope = UIASeachScope.Children;
                    fBillingCodesGroGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fBillingCodesGroGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mBillingCodeOuterMostGroupBox");
                    fBillingCodesGroGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Billing Codes");
                }

                return fBillingCodesGroGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text BillingCodesTexText
        {
            get
            {
                if (null == fBillingCodesTexText)
                {
                    fBillingCodesTexText = new Text("BillingCodesTexText", BillingCodesGroGroup);
                    fBillingCodesTexText.UIMap.Scope = UIASeachScope.Children;
                    fBillingCodesTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fBillingCodesTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Billing Codes");
                }

                return fBillingCodesTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group ApplyBillingCodGroup
        {
            get
            {
                if (null == fApplyBillingCodGroup)
                {
                    fApplyBillingCodGroup = new Group("ApplyBillingCodGroup", BillingCodesGroGroup);
                    fApplyBillingCodGroup.UIMap.Scope = UIASeachScope.Children;
                    fApplyBillingCodGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fApplyBillingCodGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mApplyBillingCodeToDeviceGroupBox");
                    fApplyBillingCodGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Apply Billing Codes to Device");
                }

                return fApplyBillingCodGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text BillingcodesareText
        {
            get
            {
                if (null == fBillingcodesareText)
                {
                    fBillingcodesareText = new Text("BillingcodesareText", ApplyBillingCodGroup);
                    fBillingcodesareText.UIMap.Scope = UIASeachScope.Children;
                    fBillingcodesareText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fBillingcodesareText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"330a7624-0255-4837-bd31-2c4260f35880");
                    fBillingcodesareText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Billing codes are used to track faxes sent from this device. If billing codes are on, a message will appear every time a fax is sent unless users are not allowed to edit the billing code.");
                }

                return fBillingcodesareText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox EnableBillingCoCheckBox
        {
            get
            {
                if (null == fEnableBillingCoCheckBox)
                {
                    fEnableBillingCoCheckBox = new CheckBox("EnableBillingCoCheckBox", ApplyBillingCodGroup);
                    fEnableBillingCoCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fEnableBillingCoCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fEnableBillingCoCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8740f456-46b7-4dc7-8dc4-a8ac609814aa");
                    fEnableBillingCoCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enable Billing Codes");
                }

                return fEnableBillingCoCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EnableBillingCoText
        {
            get
            {
                if (null == fEnableBillingCoText)
                {
                    fEnableBillingCoText = new Text("EnableBillingCoText", EnableBillingCoCheckBox);
                    fEnableBillingCoText.UIMap.Scope = UIASeachScope.Children;
                    fEnableBillingCoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEnableBillingCoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enable Billing Codes");
                }

                return fEnableBillingCoText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DefaultBillingCText
        {
            get
            {
                if (null == fDefaultBillingCText)
                {
                    fDefaultBillingCText = new Text("DefaultBillingCText", ApplyBillingCodGroup);
                    fDefaultBillingCText.UIMap.Scope = UIASeachScope.Children;
                    fDefaultBillingCText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fDefaultBillingCText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Default Billing Code");
                }

                return fDefaultBillingCText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBox46ada864Edit
        {
            get
            {
                if (null == fTextBox46ada864Edit)
                {
                    fTextBox46ada864Edit = new Edit("TextBox46ada864Edit", ApplyBillingCodGroup);
                    fTextBox46ada864Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox46ada864Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox46ada864Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"46ada864-3f0b-4aec-9d1e-090067d3a3bd");
                }

                return fTextBox46ada864Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MinimumLengthText
        {
            get
            {
                if (null == fMinimumLengthText)
                {
                    fMinimumLengthText = new Text("MinimumLengthText", ApplyBillingCodGroup);
                    fMinimumLengthText.UIMap.Scope = UIASeachScope.Children;
                    fMinimumLengthText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fMinimumLengthText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimum Length");
                }

                return fMinimumLengthText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxa28b4e38Edit
        {
            get
            {
                if (null == fTextBoxa28b4e38Edit)
                {
                    fTextBoxa28b4e38Edit = new Edit("TextBoxa28b4e38Edit", ApplyBillingCodGroup);
                    fTextBoxa28b4e38Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxa28b4e38Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxa28b4e38Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"a28b4e38-db6a-4038-b387-c3f1598d469d");
                }

                return fTextBoxa28b4e38Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text A116Text
        {
            get
            {
                if (null == fA116Text)
                {
                    fA116Text = new Text("A116Text", ApplyBillingCodGroup);
                    fA116Text.UIMap.Scope = UIASeachScope.Children;
                    fA116Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fA116Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"(1 - 16)");
                }

                return fA116Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox AllowuserstoediCheckBox
        {
            get
            {
                if (null == fAllowuserstoediCheckBox)
                {
                    fAllowuserstoediCheckBox = new CheckBox("AllowuserstoediCheckBox", ApplyBillingCodGroup);
                    fAllowuserstoediCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fAllowuserstoediCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fAllowuserstoediCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"60bc9967-9589-4448-b572-b67b292fb67c");
                    fAllowuserstoediCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Allow users to edit billing code");
                }

                return fAllowuserstoediCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox ApplyBillingCodCheckBox
        {
            get
            {
                if (null == fApplyBillingCodCheckBox)
                {
                    fApplyBillingCodCheckBox = new CheckBox("ApplyBillingCodCheckBox", ApplyBillingCodGroup);
                    fApplyBillingCodCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fApplyBillingCodCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fApplyBillingCodCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5CA316F7-4E60-4157-BE0B-3624ED75C55D");
                    fApplyBillingCodCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Apply Billing Codes to Device");
                }

                return fApplyBillingCodCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group CommonJobSettinGroup
        {
            get
            {
                if (null == fCommonJobSettinGroup)
                {
                    fCommonJobSettinGroup = new Group("CommonJobSettinGroup", ScrollViewer336Pane);
                    fCommonJobSettinGroup.UIMap.Scope = UIASeachScope.Children;
                    fCommonJobSettinGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fCommonJobSettinGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"a1376893-9d9d-4f3b-ad5f-7fe353568236");
                    fCommonJobSettinGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Common Job Settings");
                }

                return fCommonJobSettinGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CommonJobSettinText
        {
            get
            {
                if (null == fCommonJobSettinText)
                {
                    fCommonJobSettinText = new Text("CommonJobSettinText", CommonJobSettinGroup);
                    fCommonJobSettinText.UIMap.Scope = UIASeachScope.Children;
                    fCommonJobSettinText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCommonJobSettinText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Common Job Settings");
                }

                return fCommonJobSettinText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox FaxNumberConfirCheckBox
        {
            get
            {
                if (null == fFaxNumberConfirCheckBox)
                {
                    fFaxNumberConfirCheckBox = new CheckBox("FaxNumberConfirCheckBox", CommonJobSettinGroup);
                    fFaxNumberConfirCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fFaxNumberConfirCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fFaxNumberConfirCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"bc742087-39a2-448f-a657-ddfcf064d04b");
                    fFaxNumberConfirCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Number Confirmation");
                }

                return fFaxNumberConfirCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxNumberConfirText
        {
            get
            {
                if (null == fFaxNumberConfirText)
                {
                    fFaxNumberConfirText = new Text("FaxNumberConfirText", FaxNumberConfirCheckBox);
                    fFaxNumberConfirText.UIMap.Scope = UIASeachScope.Children;
                    fFaxNumberConfirText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxNumberConfirText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Number Confirmation");
                }

                return fFaxNumberConfirText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox FaxNumberSpeedDCheckBox
        {
            get
            {
                if (null == fFaxNumberSpeedDCheckBox)
                {
                    fFaxNumberSpeedDCheckBox = new CheckBox("FaxNumberSpeedDCheckBox", CommonJobSettinGroup);
                    fFaxNumberSpeedDCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fFaxNumberSpeedDCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fFaxNumberSpeedDCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5B99DAAB-55B6-45eb-843D-C3DB622308CE");
                    fFaxNumberSpeedDCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Number Speed Dial Matching");
                }

                return fFaxNumberSpeedDCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxNumberSpeedDText
        {
            get
            {
                if (null == fFaxNumberSpeedDText)
                {
                    fFaxNumberSpeedDText = new Text("FaxNumberSpeedDText", FaxNumberSpeedDCheckBox);
                    fFaxNumberSpeedDText.UIMap.Scope = UIASeachScope.Children;
                    fFaxNumberSpeedDText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxNumberSpeedDText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Number Speed Dial Matching");
                }

                return fFaxNumberSpeedDText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group QuickSetsGroupBGroup
        {
            get
            {
                if (null == fQuickSetsGroupBGroup)
                {
                    fQuickSetsGroupBGroup = new Group("QuickSetsGroupBGroup", CommonJobSettinGroup);
                    fQuickSetsGroupBGroup.UIMap.Scope = UIASeachScope.Children;
                    fQuickSetsGroupBGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fQuickSetsGroupBGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"a1061d6e-4d7f-42c5-94ca-6fbf9e24504a");
                    fQuickSetsGroupBGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Quick Sets");
                }

                return fQuickSetsGroupBGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text QuickSetsTextBlText
        {
            get
            {
                if (null == fQuickSetsTextBlText)
                {
                    fQuickSetsTextBlText = new Text("QuickSetsTextBlText", QuickSetsGroupBGroup);
                    fQuickSetsTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fQuickSetsTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fQuickSetsTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Quick Sets");
                }

                return fQuickSetsTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public DataGrid ListView01b98aeDataGrid
        {
            get
            {
                if (null == fListView01b98aeDataGrid)
                {
                    fListView01b98aeDataGrid = new DataGrid("ListView01b98aeDataGrid", QuickSetsGroupBGroup);
                    fListView01b98aeDataGrid.UIMap.Scope = UIASeachScope.Children;
                    fListView01b98aeDataGrid.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListView");
                    fListView01b98aeDataGrid.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"01b98ae9-367e-4a1d-a058-daa6d634959b");
                }

                return fListView01b98aeDataGrid;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Header GridViewHeaderRDup0Header
        {
            get
            {
                if (null == fGridViewHeaderRDup0Header)
                {
                    fGridViewHeaderRDup0Header = new Header("GridViewHeaderRDup0Header", ListView01b98aeDataGrid);
                    fGridViewHeaderRDup0Header.UIMap.Scope = UIASeachScope.Children;
                    fGridViewHeaderRDup0Header.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewHeaderRowPresenter");
                }

                return fGridViewHeaderRDup0Header;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem QuickSetTitleGrHeaderItem
        {
            get
            {
                if (null == fQuickSetTitleGrHeaderItem)
                {
                    fQuickSetTitleGrHeaderItem = new HeaderItem("QuickSetTitleGrHeaderItem", GridViewHeaderRDup0Header);
                    fQuickSetTitleGrHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fQuickSetTitleGrHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fQuickSetTitleGrHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Quick Set Title");
                }

                return fQuickSetTitleGrHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem QuickSetDescripHeaderItem
        {
            get
            {
                if (null == fQuickSetDescripHeaderItem)
                {
                    fQuickSetDescripHeaderItem = new HeaderItem("QuickSetDescripHeaderItem", GridViewHeaderRDup0Header);
                    fQuickSetDescripHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fQuickSetDescripHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fQuickSetDescripHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Quick Set Description");
                }

                return fQuickSetDescripHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem ButtonLocationGHeaderItem
        {
            get
            {
                if (null == fButtonLocationGHeaderItem)
                {
                    fButtonLocationGHeaderItem = new HeaderItem("ButtonLocationGHeaderItem", GridViewHeaderRDup0Header);
                    fButtonLocationGHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fButtonLocationGHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fButtonLocationGHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Button Location");
                }

                return fButtonLocationGHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button AddButtonaaef93Button
        {
            get
            {
                if (null == fAddButtonaaef93Button)
                {
                    fAddButtonaaef93Button = new Button("AddButtonaaef93Button", QuickSetsGroupBGroup);
                    fAddButtonaaef93Button.UIMap.Scope = UIASeachScope.Children;
                    fAddButtonaaef93Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fAddButtonaaef93Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"aaef93f4-b57d-435a-8bc1-11542d2776e2");
                    fAddButtonaaef93Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add...");
                }

                return fAddButtonaaef93Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddTextBlockDup0Text
        {
            get
            {
                if (null == fAddTextBlockDup0Text)
                {
                    fAddTextBlockDup0Text = new Text("AddTextBlockDup0Text", AddButtonaaef93Button);
                    fAddTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fAddTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add...");
                }

                return fAddTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button EditButton56b39Button
        {
            get
            {
                if (null == fEditButton56b39Button)
                {
                    fEditButton56b39Button = new Button("EditButton56b39Button", QuickSetsGroupBGroup);
                    fEditButton56b39Button.UIMap.Scope = UIASeachScope.Children;
                    fEditButton56b39Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fEditButton56b39Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"56b39276-f23d-479b-8db2-b06d0713ee40");
                    fEditButton56b39Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Edit...");
                }

                return fEditButton56b39Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EditTextBlockDup0Text
        {
            get
            {
                if (null == fEditTextBlockDup0Text)
                {
                    fEditTextBlockDup0Text = new Text("EditTextBlockDup0Text", EditButton56b39Button);
                    fEditTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fEditTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEditTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Edit...");
                }

                return fEditTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CopyButtonbfbd1Button
        {
            get
            {
                if (null == fCopyButtonbfbd1Button)
                {
                    fCopyButtonbfbd1Button = new Button("CopyButtonbfbd1Button", QuickSetsGroupBGroup);
                    fCopyButtonbfbd1Button.UIMap.Scope = UIASeachScope.Children;
                    fCopyButtonbfbd1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCopyButtonbfbd1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"bfbd1dfb-0c5e-414a-8cdf-6c23f8d4df35");
                    fCopyButtonbfbd1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Copy");
                }

                return fCopyButtonbfbd1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CopyTextBlockText
        {
            get
            {
                if (null == fCopyTextBlockText)
                {
                    fCopyTextBlockText = new Text("CopyTextBlockText", CopyButtonbfbd1Button);
                    fCopyTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fCopyTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCopyTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Copy");
                }

                return fCopyTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RemoveButton941Button
        {
            get
            {
                if (null == fRemoveButton941Button)
                {
                    fRemoveButton941Button = new Button("RemoveButton941Button", QuickSetsGroupBGroup);
                    fRemoveButton941Button.UIMap.Scope = UIASeachScope.Children;
                    fRemoveButton941Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fRemoveButton941Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"941678fd-3f1c-4a1c-9612-0bd496801be4");
                    fRemoveButton941Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Remove");
                }

                return fRemoveButton941Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RemoveTextBlockDup0Text
        {
            get
            {
                if (null == fRemoveTextBlockDup0Text)
                {
                    fRemoveTextBlockDup0Text = new Text("RemoveTextBlockDup0Text", RemoveButton941Button);
                    fRemoveTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fRemoveTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRemoveTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Remove");
                }

                return fRemoveTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group DefaultSendNotiGroup
        {
            get
            {
                if (null == fDefaultSendNotiGroup)
                {
                    fDefaultSendNotiGroup = new Group("DefaultSendNotiGroup", CommonJobSettinGroup);
                    fDefaultSendNotiGroup.UIMap.Scope = UIASeachScope.Children;
                    fDefaultSendNotiGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fDefaultSendNotiGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"31ca6814-b542-4eeb-a67c-ce77cf887a79");
                    fDefaultSendNotiGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Default Send Notification Settings");
                }

                return fDefaultSendNotiGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DefaultSendNotiText
        {
            get
            {
                if (null == fDefaultSendNotiText)
                {
                    fDefaultSendNotiText = new Text("DefaultSendNotiText", DefaultSendNotiGroup);
                    fDefaultSendNotiText.UIMap.Scope = UIASeachScope.Children;
                    fDefaultSendNotiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDefaultSendNotiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Default Send Notification Settings");
                }

                return fDefaultSendNotiText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ConditiononWhicDup0Text
        {
            get
            {
                if (null == fConditiononWhicDup0Text)
                {
                    fConditiononWhicDup0Text = new Text("ConditiononWhicDup0Text", DefaultSendNotiGroup);
                    fConditiononWhicDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fConditiononWhicDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fConditiononWhicDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Condition on Which to Notify");
                }

                return fConditiononWhicDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ConditiononWhicDup1Text
        {
            get
            {
                if (null == fConditiononWhicDup1Text)
                {
                    fConditiononWhicDup1Text = new Text("ConditiononWhicDup1Text", ConditiononWhicDup0Text);
                    fConditiononWhicDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fConditiononWhicDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fConditiononWhicDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Condition on Which to Notify");
                }

                return fConditiononWhicDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox NotifyConditionComboBox
        {
            get
            {
                if (null == fComboBox774ee1bComboBox)
                {
                    fComboBox774ee1bComboBox = new ComboBox("ComboBox774ee1bComboBox", DefaultSendNotiGroup);
                    fComboBox774ee1bComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox774ee1bComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox774ee1bComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"774ee1bd-3760-4d8b-864b-0731919c3508");
                }

                return fComboBox774ee1bComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MethodUsedtoDelDup0Text
        {
            get
            {
                if (null == fMethodUsedtoDelDup0Text)
                {
                    fMethodUsedtoDelDup0Text = new Text("MethodUsedtoDelDup0Text", DefaultSendNotiGroup);
                    fMethodUsedtoDelDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fMethodUsedtoDelDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fMethodUsedtoDelDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6e9fba2a-cb56-4fe2-9f74-03f4d5c8dc64");
                    fMethodUsedtoDelDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Method Used to Deliver Notification");
                }

                return fMethodUsedtoDelDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MethodUsedtoDelDup1Text
        {
            get
            {
                if (null == fMethodUsedtoDelDup1Text)
                {
                    fMethodUsedtoDelDup1Text = new Text("MethodUsedtoDelDup1Text", MethodUsedtoDelDup0Text);
                    fMethodUsedtoDelDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fMethodUsedtoDelDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fMethodUsedtoDelDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Method Used to Deliver Notification");
                }

                return fMethodUsedtoDelDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox NotifyMethodComboBox
        {
            get
            {
                if (null == fComboBox6736806ComboBox)
                {
                    fComboBox6736806ComboBox = new ComboBox("ComboBox6736806ComboBox", DefaultSendNotiGroup);
                    fComboBox6736806ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox6736806ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox6736806ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"67368061-c718-42bf-98d9-93590d95ac7c");
                }

                return fComboBox6736806ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NotificationEmaDup0Text
        {
            get
            {
                if (null == fNotificationEmaDup0Text)
                {
                    fNotificationEmaDup0Text = new Text("NotificationEmaDup0Text", DefaultSendNotiGroup);
                    fNotificationEmaDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fNotificationEmaDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fNotificationEmaDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2E87E1A7-46F5-4f47-B739-DF2474A3812B");
                    fNotificationEmaDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Notification E-mail Address");
                }

                return fNotificationEmaDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NotificationEmaDup1Text
        {
            get
            {
                if (null == fNotificationEmaDup1Text)
                {
                    fNotificationEmaDup1Text = new Text("NotificationEmaDup1Text", NotificationEmaDup0Text);
                    fNotificationEmaDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fNotificationEmaDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fNotificationEmaDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Notification E-mail Address");
                }

                return fNotificationEmaDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit NotificationEmailEditTextBox
        {
            get
            {
                if (null == fTextBox35317EE0Edit)
                {
                    fTextBox35317EE0Edit = new Edit("TextBox35317EE0Edit", DefaultSendNotiGroup);
                    fTextBox35317EE0Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox35317EE0Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox35317EE0Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"35317EE0-11FD-44aa-84D3-BB424DE88B33");
                }

                return fTextBox35317EE0Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup3Pane
        {
            get
            {
                if (null == fScrollViewerPARDup3Pane)
                {
                    fScrollViewerPARDup3Pane = new Pane("ScrollViewerPARDup3Pane", NotificationEmailEditTextBox);
                    fScrollViewerPARDup3Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup3Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup3Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup3Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup2ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup2ScrollBar)
                {
                    fScrollBarVerticDup2ScrollBar = new ScrollBar("ScrollBarVerticDup2ScrollBar", ScrollViewerPARDup3Pane);
                    fScrollBarVerticDup2ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup2ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup2ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup2ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup2ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup2ScrollBar)
                {
                    fScrollBarHorizoDup2ScrollBar = new ScrollBar("ScrollBarHorizoDup2ScrollBar", ScrollViewerPARDup3Pane);
                    fScrollBarHorizoDup2ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup2ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup2ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup2ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text LanguageoftheNoText
        {
            get
            {
                if (null == fLanguageoftheNoText)
                {
                    fLanguageoftheNoText = new Text("LanguageoftheNoText", DefaultSendNotiGroup);
                    fLanguageoftheNoText.UIMap.Scope = UIASeachScope.Children;
                    fLanguageoftheNoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fLanguageoftheNoText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"C77C06EF-27FB-409d-A34A-22BC1E55C84D");
                    fLanguageoftheNoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Language of the Notification Report");
                }

                return fLanguageoftheNoText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxF221C6FComboBox
        {
            get
            {
                if (null == fComboBoxF221C6FComboBox)
                {
                    fComboBoxF221C6FComboBox = new ComboBox("ComboBoxF221C6FComboBox", DefaultSendNotiGroup);
                    fComboBoxF221C6FComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxF221C6FComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxF221C6FComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"F221C6F0-E9F8-4a10-98F9-01283AF8F789");
                }

                return fComboBoxF221C6FComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox IncludeThumbnaiDup0CheckBox
        {
            get
            {
                if (null == fIncludeThumbnaiDup0CheckBox)
                {
                    fIncludeThumbnaiDup0CheckBox = new CheckBox("IncludeThumbnaiDup0CheckBox", DefaultSendNotiGroup);
                    fIncludeThumbnaiDup0CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fIncludeThumbnaiDup0CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fIncludeThumbnaiDup0CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2BED30BC-C79B-4594-A609-378B073B7C9D");
                    fIncludeThumbnaiDup0CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Include Thumbnail");
                }

                return fIncludeThumbnaiDup0CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text IncludeThumbnaiDup0Text
        {
            get
            {
                if (null == fIncludeThumbnaiDup0Text)
                {
                    fIncludeThumbnaiDup0Text = new Text("IncludeThumbnaiDup0Text", IncludeThumbnaiDup0CheckBox);
                    fIncludeThumbnaiDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fIncludeThumbnaiDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fIncludeThumbnaiDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Include Thumbnail");
                }

                return fIncludeThumbnaiDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text IncludeathumbnaDup0Text
        {
            get
            {
                if (null == fIncludeathumbnaDup0Text)
                {
                    fIncludeathumbnaDup0Text = new Text("IncludeathumbnaDup0Text", DefaultSendNotiGroup);
                    fIncludeathumbnaDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fIncludeathumbnaDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fIncludeathumbnaDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Include a thumbnail of the first scanned page in the notification.");
                }

                return fIncludeathumbnaDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox ConsolidateprinCheckBox
        {
            get
            {
                if (null == fConsolidateprinCheckBox)
                {
                    fConsolidateprinCheckBox = new CheckBox("ConsolidateprinCheckBox", DefaultSendNotiGroup);
                    fConsolidateprinCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fConsolidateprinCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fConsolidateprinCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3549C600-C437-4FA4-9C74-F030EDE7AB36");
                    fConsolidateprinCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Consolidate printed reports");
                }

                return fConsolidateprinCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ConsolidateprinText
        {
            get
            {
                if (null == fConsolidateprinText)
                {
                    fConsolidateprinText = new Text("ConsolidateprinText", ConsolidateprinCheckBox);
                    fConsolidateprinText.UIMap.Scope = UIASeachScope.Children;
                    fConsolidateprinText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fConsolidateprinText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Consolidate printed reports");
                }

                return fConsolidateprinText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text WhenprintingafaText
        {
            get
            {
                if (null == fWhenprintingafaText)
                {
                    fWhenprintingafaText = new Text("WhenprintingafaText", DefaultSendNotiGroup);
                    fWhenprintingafaText.UIMap.Scope = UIASeachScope.Children;
                    fWhenprintingafaText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fWhenprintingafaText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"When printing a fax call report, consolidate multiple destinations in the same report.");
                }

                return fWhenprintingafaText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NoteTheemailaddDup0Text
        {
            get
            {
                if (null == fNoteTheemailaddDup0Text)
                {
                    fNoteTheemailaddDup0Text = new Text("NoteTheemailaddDup0Text", DefaultSendNotiGroup);
                    fNoteTheemailaddDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fNoteTheemailaddDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fNoteTheemailaddDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @">Note: The e-mail address associated with a user's account is used for notification when a user signs in at the device. If not signed in, the user must enter an e-mail address before notification is sent. The device must also be set up to use an SMTP server.");
                }

                return fNoteTheemailaddDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group ScanSettingsGroGroup
        {
            get
            {
                if (null == fScanSettingsGroGroup)
                {
                    fScanSettingsGroGroup = new Group("ScanSettingsGroGroup", CommonJobSettinGroup);
                    fScanSettingsGroGroup.UIMap.Scope = UIASeachScope.Children;
                    fScanSettingsGroGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fScanSettingsGroGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ea000941-2104-4774-9261-858d12c14a89");
                    fScanSettingsGroGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Scan Settings");
                }

                return fScanSettingsGroGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ScanSettingsTexText
        {
            get
            {
                if (null == fScanSettingsTexText)
                {
                    fScanSettingsTexText = new Text("ScanSettingsTexText", ScanSettingsGroGroup);
                    fScanSettingsTexText.UIMap.Scope = UIASeachScope.Children;
                    fScanSettingsTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fScanSettingsTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Scan Settings");
                }

                return fScanSettingsTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ResolutionDup0I0XText
        {
            get
            {
                if (null == fResolutionDup0I0XText)
                {
                    fResolutionDup0I0XText = new Text("ResolutionDup0I0XText", ScanSettingsGroGroup);
                    fResolutionDup0I0XText.UIMap.Scope = UIASeachScope.Children;
                    fResolutionDup0I0XText.UIMap.Index = 0;
                    fResolutionDup0I0XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fResolutionDup0I0XText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Resolution");
                }

                return fResolutionDup0I0XText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox91A6644ComboBox
        {
            get
            {
                if (null == fComboBox91A6644ComboBox)
                {
                    fComboBox91A6644ComboBox = new ComboBox("ComboBox91A6644ComboBox", ScanSettingsGroGroup);
                    fComboBox91A6644ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox91A6644ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox91A6644ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"91A66445-AC3F-45F0-9F4C-30F15C749472");
                }

                return fComboBox91A6644ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ResolutionDup1I1XText
        {
            get
            {
                if (null == fResolutionDup1I1XText)
                {
                    fResolutionDup1I1XText = new Text("ResolutionDup1I1XText", ScanSettingsGroGroup);
                    fResolutionDup1I1XText.UIMap.Scope = UIASeachScope.Children;
                    fResolutionDup1I1XText.UIMap.Index = 1;
                    fResolutionDup1I1XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fResolutionDup1I1XText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Resolution");
                }

                return fResolutionDup1I1XText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ResolutionTextBText
        {
            get
            {
                if (null == fResolutionTextBText)
                {
                    fResolutionTextBText = new Text("ResolutionTextBText", ResolutionDup1I1XText);
                    fResolutionTextBText.UIMap.Scope = UIASeachScope.Children;
                    fResolutionTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fResolutionTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Resolution");
                }

                return fResolutionTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox5FFDA7BComboBox
        {
            get
            {
                if (null == fComboBox5FFDA7BComboBox)
                {
                    fComboBox5FFDA7BComboBox = new ComboBox("ComboBox5FFDA7BComboBox", ScanSettingsGroGroup);
                    fComboBox5FFDA7BComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox5FFDA7BComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox5FFDA7BComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5FFDA7BA-DD79-4561-B774-087645CE610F");
                }

                return fComboBox5FFDA7BComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OriginalSizeText
        {
            get
            {
                if (null == fOriginalSizeText)
                {
                    fOriginalSizeText = new Text("OriginalSizeText", ScanSettingsGroGroup);
                    fOriginalSizeText.UIMap.Scope = UIASeachScope.Children;
                    fOriginalSizeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fOriginalSizeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Original Size");
                }

                return fOriginalSizeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OriginalSizeTexText
        {
            get
            {
                if (null == fOriginalSizeTexText)
                {
                    fOriginalSizeTexText = new Text("OriginalSizeTexText", OriginalSizeText);
                    fOriginalSizeTexText.UIMap.Scope = UIASeachScope.Children;
                    fOriginalSizeTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOriginalSizeTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Original Size");
                }

                return fOriginalSizeTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxe9737feComboBox
        {
            get
            {
                if (null == fComboBoxe9737feComboBox)
                {
                    fComboBoxe9737feComboBox = new ComboBox("ComboBoxe9737feComboBox", ScanSettingsGroGroup);
                    fComboBoxe9737feComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxe9737feComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxe9737feComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"e9737fe7-bcd2-481c-aacf-845729436976");
                }

                return fComboBoxe9737feComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CustomDimensionText
        {
            get
            {
                if (null == fCustomDimensionText)
                {
                    fCustomDimensionText = new Text("CustomDimensionText", ScanSettingsGroGroup);
                    fCustomDimensionText.UIMap.Scope = UIASeachScope.Children;
                    fCustomDimensionText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fCustomDimensionText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Custom Dimension Units");
                }

                return fCustomDimensionText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox3dba318ComboBox
        {
            get
            {
                if (null == fComboBox3dba318ComboBox)
                {
                    fComboBox3dba318ComboBox = new ComboBox("ComboBox3dba318ComboBox", ScanSettingsGroGroup);
                    fComboBox3dba318ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox3dba318ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox3dba318ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3dba3184-99a3-4742-b9f9-0126744d83f5");
                }

                return fComboBox3dba318ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CustomXDimensioText
        {
            get
            {
                if (null == fCustomXDimensioText)
                {
                    fCustomXDimensioText = new Text("CustomXDimensioText", ScanSettingsGroGroup);
                    fCustomXDimensioText.UIMap.Scope = UIASeachScope.Children;
                    fCustomXDimensioText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fCustomXDimensioText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Custom X Dimension");
                }

                return fCustomXDimensioText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBox8db6a2f1Edit
        {
            get
            {
                if (null == fTextBox8db6a2f1Edit)
                {
                    fTextBox8db6a2f1Edit = new Edit("TextBox8db6a2f1Edit", ScanSettingsGroGroup);
                    fTextBox8db6a2f1Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox8db6a2f1Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox8db6a2f1Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8db6a2f1-3f83-40e8-898e-18980730d0b6");
                }

                return fTextBox8db6a2f1Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CustomYDimensioText
        {
            get
            {
                if (null == fCustomYDimensioText)
                {
                    fCustomYDimensioText = new Text("CustomYDimensioText", ScanSettingsGroGroup);
                    fCustomYDimensioText.UIMap.Scope = UIASeachScope.Children;
                    fCustomYDimensioText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fCustomYDimensioText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Custom Y Dimension");
                }

                return fCustomYDimensioText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxd3f2a111Edit
        {
            get
            {
                if (null == fTextBoxd3f2a111Edit)
                {
                    fTextBoxd3f2a111Edit = new Edit("TextBoxd3f2a111Edit", ScanSettingsGroGroup);
                    fTextBoxd3f2a111Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxd3f2a111Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxd3f2a111Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d3f2a111-087d-42e8-a2fb-bcf45a8ce026");
                }

                return fTextBoxd3f2a111Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OriginalSidesText
        {
            get
            {
                if (null == fOriginalSidesText)
                {
                    fOriginalSidesText = new Text("OriginalSidesText", ScanSettingsGroGroup);
                    fOriginalSidesText.UIMap.Scope = UIASeachScope.Children;
                    fOriginalSidesText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fOriginalSidesText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Original Sides");
                }

                return fOriginalSidesText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OriginalSidesTeText
        {
            get
            {
                if (null == fOriginalSidesTeText)
                {
                    fOriginalSidesTeText = new Text("OriginalSidesTeText", OriginalSidesText);
                    fOriginalSidesTeText.UIMap.Scope = UIASeachScope.Children;
                    fOriginalSidesTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOriginalSidesTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Original Sides");
                }

                return fOriginalSidesTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxda8de30ComboBox
        {
            get
            {
                if (null == fComboBoxda8de30ComboBox)
                {
                    fComboBoxda8de30ComboBox = new ComboBox("ComboBoxda8de30ComboBox", ScanSettingsGroGroup);
                    fComboBoxda8de30ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxda8de30ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxda8de30ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"da8de309-9220-4c06-a858-e0b0c45700ba");
                }

                return fComboBoxda8de30ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OptimizeTextPicDup0Text
        {
            get
            {
                if (null == fOptimizeTextPicDup0Text)
                {
                    fOptimizeTextPicDup0Text = new Text("OptimizeTextPicDup0Text", ScanSettingsGroGroup);
                    fOptimizeTextPicDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fOptimizeTextPicDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fOptimizeTextPicDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5d9a506b-cc29-4707-81b1-050eccc0814a");
                    fOptimizeTextPicDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Optimize Text/Picture");
                }

                return fOptimizeTextPicDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OptimizeTextPicDup1Text
        {
            get
            {
                if (null == fOptimizeTextPicDup1Text)
                {
                    fOptimizeTextPicDup1Text = new Text("OptimizeTextPicDup1Text", OptimizeTextPicDup0Text);
                    fOptimizeTextPicDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fOptimizeTextPicDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOptimizeTextPicDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Optimize Text/Picture");
                }

                return fOptimizeTextPicDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxc7f4e07ComboBox
        {
            get
            {
                if (null == fComboBoxc7f4e07ComboBox)
                {
                    fComboBoxc7f4e07ComboBox = new ComboBox("ComboBoxc7f4e07ComboBox", ScanSettingsGroGroup);
                    fComboBoxc7f4e07ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxc7f4e07ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxc7f4e07ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c7f4e07f-50b8-4745-b546-9049ff2497dd");
                }

                return fComboBoxc7f4e07ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OptimizeForText
        {
            get
            {
                if (null == fOptimizeForText)
                {
                    fOptimizeForText = new Text("OptimizeForText", ScanSettingsGroGroup);
                    fOptimizeForText.UIMap.Scope = UIASeachScope.Children;
                    fOptimizeForText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fOptimizeForText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Optimize For");
                }

                return fOptimizeForText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OptimizeForTextText
        {
            get
            {
                if (null == fOptimizeForTextText)
                {
                    fOptimizeForTextText = new Text("OptimizeForTextText", OptimizeForText);
                    fOptimizeForTextText.UIMap.Scope = UIASeachScope.Children;
                    fOptimizeForTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOptimizeForTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Optimize For");
                }

                return fOptimizeForTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxfc09eccComboBox
        {
            get
            {
                if (null == fComboBoxfc09eccComboBox)
                {
                    fComboBoxfc09eccComboBox = new ComboBox("ComboBoxfc09eccComboBox", ScanSettingsGroGroup);
                    fComboBoxfc09eccComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxfc09eccComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxfc09eccComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"fc09ecc4-eee9-4689-ab69-90c28dde7252");
                }

                return fComboBoxfc09eccComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ContentOrientatDup0Text
        {
            get
            {
                if (null == fContentOrientatDup0Text)
                {
                    fContentOrientatDup0Text = new Text("ContentOrientatDup0Text", ScanSettingsGroGroup);
                    fContentOrientatDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fContentOrientatDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fContentOrientatDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Content Orientation");
                }

                return fContentOrientatDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ContentOrientatDup1Text
        {
            get
            {
                if (null == fContentOrientatDup1Text)
                {
                    fContentOrientatDup1Text = new Text("ContentOrientatDup1Text", ContentOrientatDup0Text);
                    fContentOrientatDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fContentOrientatDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fContentOrientatDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Content Orientation");
                }

                return fContentOrientatDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxc80838aComboBox
        {
            get
            {
                if (null == fComboBoxc80838aComboBox)
                {
                    fComboBoxc80838aComboBox = new ComboBox("ComboBoxc80838aComboBox", ScanSettingsGroGroup);
                    fComboBoxc80838aComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxc80838aComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxc80838aComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c80838a7-9011-4507-967f-cbc165627bc9");
                }

                return fComboBoxc80838aComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text A2SidedFormatTeDup0Text
        {
            get
            {
                if (null == fA2SidedFormatTeDup0Text)
                {
                    fA2SidedFormatTeDup0Text = new Text("A2SidedFormatTeDup0Text", ScanSettingsGroGroup);
                    fA2SidedFormatTeDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fA2SidedFormatTeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fA2SidedFormatTeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"97b6896b-3dbc-43d1-98b3-78547ea82720");
                    fA2SidedFormatTeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"2-Sided Format");
                }

                return fA2SidedFormatTeDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text A2SidedFormatTeDup1Text
        {
            get
            {
                if (null == fA2SidedFormatTeDup1Text)
                {
                    fA2SidedFormatTeDup1Text = new Text("A2SidedFormatTeDup1Text", A2SidedFormatTeDup0Text);
                    fA2SidedFormatTeDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fA2SidedFormatTeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fA2SidedFormatTeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"2-Sided Format");
                }

                return fA2SidedFormatTeDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxcbf9bb8ComboBox
        {
            get
            {
                if (null == fComboBoxcbf9bb8ComboBox)
                {
                    fComboBoxcbf9bb8ComboBox = new ComboBox("ComboBoxcbf9bb8ComboBox", ScanSettingsGroGroup);
                    fComboBoxcbf9bb8ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcbf9bb8ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxcbf9bb8ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cbf9bb8f-7ded-482a-87de-1b229664a0b6");
                }

                return fComboBoxcbf9bb8ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text BackgroundCleanDup0Text
        {
            get
            {
                if (null == fBackgroundCleanDup0Text)
                {
                    fBackgroundCleanDup0Text = new Text("BackgroundCleanDup0Text", ScanSettingsGroGroup);
                    fBackgroundCleanDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fBackgroundCleanDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fBackgroundCleanDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Background Cleanup");
                }

                return fBackgroundCleanDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text BackgroundCleanDup1Text
        {
            get
            {
                if (null == fBackgroundCleanDup1Text)
                {
                    fBackgroundCleanDup1Text = new Text("BackgroundCleanDup1Text", BackgroundCleanDup0Text);
                    fBackgroundCleanDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fBackgroundCleanDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fBackgroundCleanDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Background Cleanup");
                }

                return fBackgroundCleanDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxd42c834ComboBox
        {
            get
            {
                if (null == fComboBoxd42c834ComboBox)
                {
                    fComboBoxd42c834ComboBox = new ComboBox("ComboBoxd42c834ComboBox", ScanSettingsGroGroup);
                    fComboBoxd42c834ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxd42c834ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxd42c834ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d42c8346-203e-4d67-875b-b5727c8d9f2f");
                }

                return fComboBoxd42c834ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DarknessText
        {
            get
            {
                if (null == fDarknessText)
                {
                    fDarknessText = new Text("DarknessText", ScanSettingsGroGroup);
                    fDarknessText.UIMap.Scope = UIASeachScope.Children;
                    fDarknessText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fDarknessText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Darkness");
                }

                return fDarknessText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DarknessTextBloText
        {
            get
            {
                if (null == fDarknessTextBloText)
                {
                    fDarknessTextBloText = new Text("DarknessTextBloText", DarknessText);
                    fDarknessTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fDarknessTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDarknessTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Darkness");
                }

                return fDarknessTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxd71070cComboBox
        {
            get
            {
                if (null == fComboBoxd71070cComboBox)
                {
                    fComboBoxd71070cComboBox = new ComboBox("ComboBoxd71070cComboBox", ScanSettingsGroGroup);
                    fComboBoxd71070cComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxd71070cComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxd71070cComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d71070c9-fe5e-4e23-bca6-ce3a98c1ef51");
                }

                return fComboBoxd71070cComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ContrastText
        {
            get
            {
                if (null == fContrastText)
                {
                    fContrastText = new Text("ContrastText", ScanSettingsGroGroup);
                    fContrastText.UIMap.Scope = UIASeachScope.Children;
                    fContrastText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fContrastText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Contrast");
                }

                return fContrastText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ContrastTextBloText
        {
            get
            {
                if (null == fContrastTextBloText)
                {
                    fContrastTextBloText = new Text("ContrastTextBloText", ContrastText);
                    fContrastTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fContrastTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fContrastTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Contrast");
                }

                return fContrastTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox7ac6309ComboBox
        {
            get
            {
                if (null == fComboBox7ac6309ComboBox)
                {
                    fComboBox7ac6309ComboBox = new ComboBox("ComboBox7ac6309ComboBox", ScanSettingsGroGroup);
                    fComboBox7ac6309ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox7ac6309ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox7ac6309ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7ac63093-eb43-43b8-863b-aca2dda5158d");
                }

                return fComboBox7ac6309ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SharpnessText
        {
            get
            {
                if (null == fSharpnessText)
                {
                    fSharpnessText = new Text("SharpnessText", ScanSettingsGroGroup);
                    fSharpnessText.UIMap.Scope = UIASeachScope.Children;
                    fSharpnessText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fSharpnessText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Sharpness");
                }

                return fSharpnessText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SharpnessTextBlText
        {
            get
            {
                if (null == fSharpnessTextBlText)
                {
                    fSharpnessTextBlText = new Text("SharpnessTextBlText", SharpnessText);
                    fSharpnessTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fSharpnessTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSharpnessTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Sharpness");
                }

                return fSharpnessTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox774c1f8ComboBox
        {
            get
            {
                if (null == fComboBox774c1f8ComboBox)
                {
                    fComboBox774c1f8ComboBox = new ComboBox("ComboBox774c1f8ComboBox", ScanSettingsGroGroup);
                    fComboBox774c1f8ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox774c1f8ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox774c1f8ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"774c1f88-6535-49f2-b929-494ae868b4f1");
                }

                return fComboBox774c1f8ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ColorDropoutText
        {
            get
            {
                if (null == fColorDropoutText)
                {
                    fColorDropoutText = new Text("ColorDropoutText", ScanSettingsGroGroup);
                    fColorDropoutText.UIMap.Scope = UIASeachScope.Children;
                    fColorDropoutText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fColorDropoutText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Color Dropout");
                }

                return fColorDropoutText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxe5f22ceComboBox
        {
            get
            {
                if (null == fComboBoxe5f22ceComboBox)
                {
                    fComboBoxe5f22ceComboBox = new ComboBox("ComboBoxe5f22ceComboBox", ScanSettingsGroGroup);
                    fComboBoxe5f22ceComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxe5f22ceComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxe5f22ceComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"e5f22cef-2ec8-4fda-a251-a5990d84b84e");
                }

                return fComboBoxe5f22ceComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ImagePreviewText
        {
            get
            {
                if (null == fImagePreviewText)
                {
                    fImagePreviewText = new Text("ImagePreviewText", ScanSettingsGroGroup);
                    fImagePreviewText.UIMap.Scope = UIASeachScope.Children;
                    fImagePreviewText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fImagePreviewText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Image Preview");
                }

                return fImagePreviewText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ImagePreviewTexText
        {
            get
            {
                if (null == fImagePreviewTexText)
                {
                    fImagePreviewTexText = new Text("ImagePreviewTexText", ImagePreviewText);
                    fImagePreviewTexText.UIMap.Scope = UIASeachScope.Children;
                    fImagePreviewTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fImagePreviewTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Image Preview");
                }

                return fImagePreviewTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxd615bcbComboBox
        {
            get
            {
                if (null == fComboBoxd615bcbComboBox)
                {
                    fComboBoxd615bcbComboBox = new ComboBox("ComboBoxd615bcbComboBox", ScanSettingsGroGroup);
                    fComboBoxd615bcbComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxd615bcbComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxd615bcbComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d615bcbd-9c05-4b89-b1e3-725c5749a6ff");
                }

                return fComboBoxd615bcbComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox JobBuildCheckBoCheckBox
        {
            get
            {
                if (null == fJobBuildCheckBoCheckBox)
                {
                    fJobBuildCheckBoCheckBox = new CheckBox("JobBuildCheckBoCheckBox", ScanSettingsGroGroup);
                    fJobBuildCheckBoCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fJobBuildCheckBoCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fJobBuildCheckBoCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"f27c9143-800d-4a81-bea4-dc596915992f");
                    fJobBuildCheckBoCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Job Build");
                }

                return fJobBuildCheckBoCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text JobBuildTextBloText
        {
            get
            {
                if (null == fJobBuildTextBloText)
                {
                    fJobBuildTextBloText = new Text("JobBuildTextBloText", JobBuildCheckBoCheckBox);
                    fJobBuildTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fJobBuildTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fJobBuildTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Job Build");
                }

                return fJobBuildTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox MultifeedDetectCheckBox
        {
            get
            {
                if (null == fMultifeedDetectCheckBox)
                {
                    fMultifeedDetectCheckBox = new CheckBox("MultifeedDetectCheckBox", ScanSettingsGroGroup);
                    fMultifeedDetectCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fMultifeedDetectCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fMultifeedDetectCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4ada4a24-7505-4480-a56a-6443eefd3360");
                    fMultifeedDetectCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Multi-feed Detection");
                }

                return fMultifeedDetectCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MultifeedDetectText
        {
            get
            {
                if (null == fMultifeedDetectText)
                {
                    fMultifeedDetectText = new Text("MultifeedDetectText", MultifeedDetectCheckBox);
                    fMultifeedDetectText.UIMap.Scope = UIASeachScope.Children;
                    fMultifeedDetectText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fMultifeedDetectText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Multi-feed Detection");
                }

                return fMultifeedDetectText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox AutomaticToneChCheckBox
        {
            get
            {
                if (null == fAutomaticToneChCheckBox)
                {
                    fAutomaticToneChCheckBox = new CheckBox("AutomaticToneChCheckBox", ScanSettingsGroGroup);
                    fAutomaticToneChCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fAutomaticToneChCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fAutomaticToneChCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"A0B235E2-4363-45F0-BA50-474E6C1BFF10");
                    fAutomaticToneChCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Automatic Tone");
                }

                return fAutomaticToneChCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CheckingthisboxText
        {
            get
            {
                if (null == fCheckingthisboxText)
                {
                    fCheckingthisboxText = new Text("CheckingthisboxText", ScanSettingsGroGroup);
                    fCheckingthisboxText.UIMap.Scope = UIASeachScope.Children;
                    fCheckingthisboxText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fCheckingthisboxText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1AC885A6-A0FF-48FE-81F1-AFE9259F2F78");
                    fCheckingthisboxText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Checking this box sets the Darkness, Contrast, and Background Cleanup settings automatically.");
                }

                return fCheckingthisboxText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox AutomaticallyStCheckBox
        {
            get
            {
                if (null == fAutomaticallyStCheckBox)
                {
                    fAutomaticallyStCheckBox = new CheckBox("AutomaticallyStCheckBox", ScanSettingsGroGroup);
                    fAutomaticallyStCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fAutomaticallyStCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fAutomaticallyStCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"D4A68ABB-3D40-41F7-AB81-EE7020501C52");
                    fAutomaticallyStCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Automatically Straighten");
                }

                return fAutomaticallyStCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text WhenenabledpageText
        {
            get
            {
                if (null == fWhenenabledpageText)
                {
                    fWhenenabledpageText = new Text("WhenenabledpageText", ScanSettingsGroGroup);
                    fWhenenabledpageText.UIMap.Scope = UIASeachScope.Children;
                    fWhenenabledpageText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fWhenenabledpageText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"When enabled, pages that are skewed during scanning will automatically be straightened.");
                }

                return fWhenenabledpageText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox EnableBlankPageCheckBox
        {
            get
            {
                if (null == fEnableBlankPageCheckBox)
                {
                    fEnableBlankPageCheckBox = new CheckBox("EnableBlankPageCheckBox", ScanSettingsGroGroup);
                    fEnableBlankPageCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fEnableBlankPageCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fEnableBlankPageCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1FC61829-B472-4abb-8DA2-40CB9BE357D8");
                    fEnableBlankPageCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enable Blank Page Suppression");
                }

                return fEnableBlankPageCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EnableBlankPageText
        {
            get
            {
                if (null == fEnableBlankPageText)
                {
                    fEnableBlankPageText = new Text("EnableBlankPageText", EnableBlankPageCheckBox);
                    fEnableBlankPageText.UIMap.Scope = UIASeachScope.Children;
                    fEnableBlankPageText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEnableBlankPageText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enable Blank Page Suppression");
                }

                return fEnableBlankPageText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group AnalogFaxReceivGroup
        {
            get
            {
                if (null == fAnalogFaxReceivGroup)
                {
                    fAnalogFaxReceivGroup = new Group("AnalogFaxReceivGroup", ScrollViewer336Pane);
                    fAnalogFaxReceivGroup.UIMap.Scope = UIASeachScope.Children;
                    fAnalogFaxReceivGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fAnalogFaxReceivGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"f4db821b-4282-4942-b606-682755626710");
                    fAnalogFaxReceivGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Analog Fax Receive");
                }

                return fAnalogFaxReceivGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AnalogFaxReceivText
        {
            get
            {
                if (null == fAnalogFaxReceivText)
                {
                    fAnalogFaxReceivText = new Text("AnalogFaxReceivText", AnalogFaxReceivGroup);
                    fAnalogFaxReceivText.UIMap.Scope = UIASeachScope.Children;
                    fAnalogFaxReceivText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAnalogFaxReceivText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Analog Fax Receive");
                }

                return fAnalogFaxReceivText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox EnableFaxReceivDup1CheckBox
        {
            get
            {
                if (null == fEnableFaxReceivDup1CheckBox)
                {
                    fEnableFaxReceivDup1CheckBox = new CheckBox("EnableFaxReceivDup1CheckBox", AnalogFaxReceivGroup);
                    fEnableFaxReceivDup1CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fEnableFaxReceivDup1CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fEnableFaxReceivDup1CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"F84C284F-2214-42C4-A1F2-164BEB35F8BB");
                    fEnableFaxReceivDup1CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enable Fax Receive");
                }

                return fEnableFaxReceivDup1CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EnableFaxReceivText
        {
            get
            {
                if (null == fEnableFaxReceivText)
                {
                    fEnableFaxReceivText = new Text("EnableFaxReceivText", EnableFaxReceivDup1CheckBox);
                    fEnableFaxReceivText.UIMap.Scope = UIASeachScope.Children;
                    fEnableFaxReceivText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEnableFaxReceivText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enable Fax Receive");
                }

                return fEnableFaxReceivText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group FaxJobOptionsGrGroup
        {
            get
            {
                if (null == fFaxJobOptionsGrGroup)
                {
                    fFaxJobOptionsGrGroup = new Group("FaxJobOptionsGrGroup", AnalogFaxReceivGroup);
                    fFaxJobOptionsGrGroup.UIMap.Scope = UIASeachScope.Children;
                    fFaxJobOptionsGrGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fFaxJobOptionsGrGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Job Options");
                }

                return fFaxJobOptionsGrGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxJobOptionsTeText
        {
            get
            {
                if (null == fFaxJobOptionsTeText)
                {
                    fFaxJobOptionsTeText = new Text("FaxJobOptionsTeText", FaxJobOptionsGrGroup);
                    fFaxJobOptionsTeText.UIMap.Scope = UIASeachScope.Children;
                    fFaxJobOptionsTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxJobOptionsTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Job Options");
                }

                return fFaxJobOptionsTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SidesText
        {
            get
            {
                if (null == fSidesText)
                {
                    fSidesText = new Text("SidesText", FaxJobOptionsGrGroup);
                    fSidesText.UIMap.Scope = UIASeachScope.Children;
                    fSidesText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fSidesText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Sides");
                }

                return fSidesText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SidesTextBlockText
        {
            get
            {
                if (null == fSidesTextBlockText)
                {
                    fSidesTextBlockText = new Text("SidesTextBlockText", SidesText);
                    fSidesTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fSidesTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSidesTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Sides");
                }

                return fSidesTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxdc3f94cComboBox
        {
            get
            {
                if (null == fComboBoxdc3f94cComboBox)
                {
                    fComboBoxdc3f94cComboBox = new ComboBox("ComboBoxdc3f94cComboBox", FaxJobOptionsGrGroup);
                    fComboBoxdc3f94cComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxdc3f94cComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxdc3f94cComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"dc3f94c3-2a8a-4268-b6be-97afc85be118");
                }

                return fComboBoxdc3f94cComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text StapleText
        {
            get
            {
                if (null == fStapleText)
                {
                    fStapleText = new Text("StapleText", FaxJobOptionsGrGroup);
                    fStapleText.UIMap.Scope = UIASeachScope.Children;
                    fStapleText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fStapleText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Staple");
                }

                return fStapleText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxcaa1fc0ComboBox
        {
            get
            {
                if (null == fComboBoxcaa1fc0ComboBox)
                {
                    fComboBoxcaa1fc0ComboBox = new ComboBox("ComboBoxcaa1fc0ComboBox", FaxJobOptionsGrGroup);
                    fComboBoxcaa1fc0ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcaa1fc0ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxcaa1fc0ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"caa1fc0f-c20d-4e82-b8ab-2b11fe5ba3d8");
                }

                return fComboBoxcaa1fc0ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox CollateCheckBoxCheckBox
        {
            get
            {
                if (null == fCollateCheckBoxCheckBox)
                {
                    fCollateCheckBoxCheckBox = new CheckBox("CollateCheckBoxCheckBox", FaxJobOptionsGrGroup);
                    fCollateCheckBoxCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fCollateCheckBoxCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fCollateCheckBoxCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6434e529-58c5-445e-bc57-dda201a82911");
                    fCollateCheckBoxCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Collate");
                }

                return fCollateCheckBoxCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PaperSelectionText
        {
            get
            {
                if (null == fPaperSelectionText)
                {
                    fPaperSelectionText = new Text("PaperSelectionText", FaxJobOptionsGrGroup);
                    fPaperSelectionText.UIMap.Scope = UIASeachScope.Children;
                    fPaperSelectionText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fPaperSelectionText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Paper Selection");
                }

                return fPaperSelectionText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PaperSelectionTText
        {
            get
            {
                if (null == fPaperSelectionTText)
                {
                    fPaperSelectionTText = new Text("PaperSelectionTText", PaperSelectionText);
                    fPaperSelectionTText.UIMap.Scope = UIASeachScope.Children;
                    fPaperSelectionTText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPaperSelectionTText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Paper Selection");
                }

                return fPaperSelectionTText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox08ab3d6ComboBox
        {
            get
            {
                if (null == fComboBox08ab3d6ComboBox)
                {
                    fComboBox08ab3d6ComboBox = new ComboBox("ComboBox08ab3d6ComboBox", FaxJobOptionsGrGroup);
                    fComboBox08ab3d6ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox08ab3d6ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox08ab3d6ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"08ab3d6a-c9d7-4132-a3c3-af5ab2ff624a");
                }

                return fComboBox08ab3d6ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OutputBinText
        {
            get
            {
                if (null == fOutputBinText)
                {
                    fOutputBinText = new Text("OutputBinText", FaxJobOptionsGrGroup);
                    fOutputBinText.UIMap.Scope = UIASeachScope.Children;
                    fOutputBinText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fOutputBinText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Output Bin");
                }

                return fOutputBinText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OutputBinTextBlText
        {
            get
            {
                if (null == fOutputBinTextBlText)
                {
                    fOutputBinTextBlText = new Text("OutputBinTextBlText", OutputBinText);
                    fOutputBinTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fOutputBinTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOutputBinTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Output Bin");
                }

                return fOutputBinTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox1ab9bb5ComboBox
        {
            get
            {
                if (null == fComboBox1ab9bb5ComboBox)
                {
                    fComboBox1ab9bb5ComboBox = new ComboBox("ComboBox1ab9bb5ComboBox", FaxJobOptionsGrGroup);
                    fComboBox1ab9bb5ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox1ab9bb5ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox1ab9bb5ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1ab9bb53-9516-4e99-a6d0-74bd34a52548");
                }

                return fComboBox1ab9bb5ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox StampReceivedFaCheckBox
        {
            get
            {
                if (null == fStampReceivedFaCheckBox)
                {
                    fStampReceivedFaCheckBox = new CheckBox("StampReceivedFaCheckBox", FaxJobOptionsGrGroup);
                    fStampReceivedFaCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fStampReceivedFaCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fStampReceivedFaCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"90a33230-0ebb-46ca-a5e2-9d4547cfa90e");
                    fStampReceivedFaCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Stamp Received Faxes");
                }

                return fStampReceivedFaCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text StampReceivedFaText
        {
            get
            {
                if (null == fStampReceivedFaText)
                {
                    fStampReceivedFaText = new Text("StampReceivedFaText", StampReceivedFaCheckBox);
                    fStampReceivedFaText.UIMap.Scope = UIASeachScope.Children;
                    fStampReceivedFaText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fStampReceivedFaText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Stamp Received Faxes");
                }

                return fStampReceivedFaText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox UsereditableCheCheckBox
        {
            get
            {
                if (null == fUsereditableCheCheckBox)
                {
                    fUsereditableCheCheckBox = new CheckBox("UsereditableCheCheckBox", FaxJobOptionsGrGroup);
                    fUsereditableCheCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fUsereditableCheCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fUsereditableCheCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6ee06094-a823-4113-8406-1c5f845f8a1c");
                    fUsereditableCheCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"User editable");
                }

                return fUsereditableCheCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group FaxReceiveSettiGroup
        {
            get
            {
                if (null == fFaxReceiveSettiGroup)
                {
                    fFaxReceiveSettiGroup = new Group("FaxReceiveSettiGroup", AnalogFaxReceivGroup);
                    fFaxReceiveSettiGroup.UIMap.Scope = UIASeachScope.Children;
                    fFaxReceiveSettiGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fFaxReceiveSettiGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Receive Settings");
                }

                return fFaxReceiveSettiGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxReceiveSettiText
        {
            get
            {
                if (null == fFaxReceiveSettiText)
                {
                    fFaxReceiveSettiText = new Text("FaxReceiveSettiText", FaxReceiveSettiGroup);
                    fFaxReceiveSettiText.UIMap.Scope = UIASeachScope.Children;
                    fFaxReceiveSettiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxReceiveSettiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Receive Settings");
                }

                return fFaxReceiveSettiText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RingerVolumeText
        {
            get
            {
                if (null == fRingerVolumeText)
                {
                    fRingerVolumeText = new Text("RingerVolumeText", FaxReceiveSettiGroup);
                    fRingerVolumeText.UIMap.Scope = UIASeachScope.Children;
                    fRingerVolumeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fRingerVolumeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Ringer Volume");
                }

                return fRingerVolumeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RingerVolumeTexText
        {
            get
            {
                if (null == fRingerVolumeTexText)
                {
                    fRingerVolumeTexText = new Text("RingerVolumeTexText", RingerVolumeText);
                    fRingerVolumeTexText.UIMap.Scope = UIASeachScope.Children;
                    fRingerVolumeTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRingerVolumeTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Ringer Volume");
                }

                return fRingerVolumeTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxbd77d40ComboBox
        {
            get
            {
                if (null == fComboBoxbd77d40ComboBox)
                {
                    fComboBoxbd77d40ComboBox = new ComboBox("ComboBoxbd77d40ComboBox", FaxReceiveSettiGroup);
                    fComboBoxbd77d40ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxbd77d40ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxbd77d40ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"bd77d40e-eb00-402d-abdc-6829bdc69fbf");
                }

                return fComboBoxbd77d40ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RingsToAnswerText
        {
            get
            {
                if (null == fRingsToAnswerText)
                {
                    fRingsToAnswerText = new Text("RingsToAnswerText", FaxReceiveSettiGroup);
                    fRingsToAnswerText.UIMap.Scope = UIASeachScope.Children;
                    fRingsToAnswerText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fRingsToAnswerText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Rings To Answer");
                }

                return fRingsToAnswerText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RingsToAnswerTeText
        {
            get
            {
                if (null == fRingsToAnswerTeText)
                {
                    fRingsToAnswerTeText = new Text("RingsToAnswerTeText", RingsToAnswerText);
                    fRingsToAnswerTeText.UIMap.Scope = UIASeachScope.Children;
                    fRingsToAnswerTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRingsToAnswerTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Rings To Answer");
                }

                return fRingsToAnswerTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxcbd11fbComboBox
        {
            get
            {
                if (null == fComboBoxcbd11fbComboBox)
                {
                    fComboBoxcbd11fbComboBox = new ComboBox("ComboBoxcbd11fbComboBox", FaxReceiveSettiGroup);
                    fComboBoxcbd11fbComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcbd11fbComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxcbd11fbComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cbd11fbe-7d9c-425b-96a6-4cb92fa92ba2");
                }

                return fComboBoxcbd11fbComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MaximumBaudRateDup0Text
        {
            get
            {
                if (null == fMaximumBaudRateDup0Text)
                {
                    fMaximumBaudRateDup0Text = new Text("MaximumBaudRateDup0Text", FaxReceiveSettiGroup);
                    fMaximumBaudRateDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fMaximumBaudRateDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fMaximumBaudRateDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximum Baud Rate");
                }

                return fMaximumBaudRateDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MaximumBaudRateDup1Text
        {
            get
            {
                if (null == fMaximumBaudRateDup1Text)
                {
                    fMaximumBaudRateDup1Text = new Text("MaximumBaudRateDup1Text", MaximumBaudRateDup0Text);
                    fMaximumBaudRateDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fMaximumBaudRateDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fMaximumBaudRateDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximum Baud Rate");
                }

                return fMaximumBaudRateDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxd7a3af1ComboBox
        {
            get
            {
                if (null == fComboBoxd7a3af1ComboBox)
                {
                    fComboBoxd7a3af1ComboBox = new ComboBox("ComboBoxd7a3af1ComboBox", FaxReceiveSettiGroup);
                    fComboBoxd7a3af1ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxd7a3af1ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxd7a3af1ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d7a3af1d-8be0-4a9b-82a4-b5c9922cc997");
                }

                return fComboBoxd7a3af1ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RingIntervalText
        {
            get
            {
                if (null == fRingIntervalText)
                {
                    fRingIntervalText = new Text("RingIntervalText", FaxReceiveSettiGroup);
                    fRingIntervalText.UIMap.Scope = UIASeachScope.Children;
                    fRingIntervalText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fRingIntervalText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Ring Interval");
                }

                return fRingIntervalText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RingIntervalTexText
        {
            get
            {
                if (null == fRingIntervalTexText)
                {
                    fRingIntervalTexText = new Text("RingIntervalTexText", RingIntervalText);
                    fRingIntervalTexText.UIMap.Scope = UIASeachScope.Children;
                    fRingIntervalTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRingIntervalTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Ring Interval");
                }

                return fRingIntervalTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBox227a3115Edit
        {
            get
            {
                if (null == fTextBox227a3115Edit)
                {
                    fTextBox227a3115Edit = new Edit("TextBox227a3115Edit", FaxReceiveSettiGroup);
                    fTextBox227a3115Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox227a3115Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox227a3115Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"227a3115-1b08-4b0a-a505-574c088ef261");
                }

                return fTextBox227a3115Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup4Pane
        {
            get
            {
                if (null == fScrollViewerPARDup4Pane)
                {
                    fScrollViewerPARDup4Pane = new Pane("ScrollViewerPARDup4Pane", TextBox227a3115Edit);
                    fScrollViewerPARDup4Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup4Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup4Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup4Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup3ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup3ScrollBar)
                {
                    fScrollBarVerticDup3ScrollBar = new ScrollBar("ScrollBarVerticDup3ScrollBar", ScrollViewerPARDup4Pane);
                    fScrollBarVerticDup3ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup3ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup3ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup3ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup3ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup3ScrollBar)
                {
                    fScrollBarHorizoDup3ScrollBar = new ScrollBar("ScrollBarHorizoDup3ScrollBar", ScrollViewerPARDup4Pane);
                    fScrollBarHorizoDup3ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup3ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup3ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup3ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RingFrequencyText
        {
            get
            {
                if (null == fRingFrequencyText)
                {
                    fRingFrequencyText = new Text("RingFrequencyText", FaxReceiveSettiGroup);
                    fRingFrequencyText.UIMap.Scope = UIASeachScope.Children;
                    fRingFrequencyText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fRingFrequencyText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Ring Frequency");
                }

                return fRingFrequencyText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RingFrequencyTeText
        {
            get
            {
                if (null == fRingFrequencyTeText)
                {
                    fRingFrequencyTeText = new Text("RingFrequencyTeText", RingFrequencyText);
                    fRingFrequencyTeText.UIMap.Scope = UIASeachScope.Children;
                    fRingFrequencyTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRingFrequencyTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Ring Frequency");
                }

                return fRingFrequencyTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxc953e70aEdit
        {
            get
            {
                if (null == fTextBoxc953e70aEdit)
                {
                    fTextBoxc953e70aEdit = new Edit("TextBoxc953e70aEdit", FaxReceiveSettiGroup);
                    fTextBoxc953e70aEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxc953e70aEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxc953e70aEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c953e70a-b108-4780-86a4-4f10185d6723");
                }

                return fTextBoxc953e70aEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup5Pane
        {
            get
            {
                if (null == fScrollViewerPARDup5Pane)
                {
                    fScrollViewerPARDup5Pane = new Pane("ScrollViewerPARDup5Pane", TextBoxc953e70aEdit);
                    fScrollViewerPARDup5Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup5Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup5Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup5Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup4ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup4ScrollBar)
                {
                    fScrollBarVerticDup4ScrollBar = new ScrollBar("ScrollBarVerticDup4ScrollBar", ScrollViewerPARDup5Pane);
                    fScrollBarVerticDup4ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup4ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup4ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup4ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup4ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup4ScrollBar)
                {
                    fScrollBarHorizoDup4ScrollBar = new ScrollBar("ScrollBarHorizoDup4ScrollBar", ScrollViewerPARDup5Pane);
                    fScrollBarHorizoDup4ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup4ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup4ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup4ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group DefaultReceiveNGroup
        {
            get
            {
                if (null == fDefaultReceiveNGroup)
                {
                    fDefaultReceiveNGroup = new Group("DefaultReceiveNGroup", AnalogFaxReceivGroup);
                    fDefaultReceiveNGroup.UIMap.Scope = UIASeachScope.Children;
                    fDefaultReceiveNGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fDefaultReceiveNGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9F19DCEE-1D9E-468e-8B7C-A0A2134135EB");
                    fDefaultReceiveNGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Default Receive Notification Settings");
                }

                return fDefaultReceiveNGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DefaultReceiveNText
        {
            get
            {
                if (null == fDefaultReceiveNText)
                {
                    fDefaultReceiveNText = new Text("DefaultReceiveNText", DefaultReceiveNGroup);
                    fDefaultReceiveNText.UIMap.Scope = UIASeachScope.Children;
                    fDefaultReceiveNText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDefaultReceiveNText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Default Receive Notification Settings");
                }

                return fDefaultReceiveNText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ConditiononWhicDup2Text
        {
            get
            {
                if (null == fConditiononWhicDup2Text)
                {
                    fConditiononWhicDup2Text = new Text("ConditiononWhicDup2Text", DefaultReceiveNGroup);
                    fConditiononWhicDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fConditiononWhicDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fConditiononWhicDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mReceiveFaxNotifyConditionLabel");
                    fConditiononWhicDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Condition on Which to Notify");
                }

                return fConditiononWhicDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ConditiononWhicDup3Text
        {
            get
            {
                if (null == fConditiononWhicDup3Text)
                {
                    fConditiononWhicDup3Text = new Text("ConditiononWhicDup3Text", ConditiononWhicDup2Text);
                    fConditiononWhicDup3Text.UIMap.Scope = UIASeachScope.Children;
                    fConditiononWhicDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fConditiononWhicDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Condition on Which to Notify");
                }

                return fConditiononWhicDup3Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox30eac22ComboBox
        {
            get
            {
                if (null == fComboBox30eac22ComboBox)
                {
                    fComboBox30eac22ComboBox = new ComboBox("ComboBox30eac22ComboBox", DefaultReceiveNGroup);
                    fComboBox30eac22ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox30eac22ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox30eac22ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"30eac227-34b5-4099-b380-72e209cbdf43");
                }

                return fComboBox30eac22ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MethodUsedtoDelDup2Text
        {
            get
            {
                if (null == fMethodUsedtoDelDup2Text)
                {
                    fMethodUsedtoDelDup2Text = new Text("MethodUsedtoDelDup2Text", DefaultReceiveNGroup);
                    fMethodUsedtoDelDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fMethodUsedtoDelDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fMethodUsedtoDelDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"91f7860a-c97d-47b9-8acc-92ca1626ed95");
                    fMethodUsedtoDelDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Method Used to Deliver Notification");
                }

                return fMethodUsedtoDelDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MethodUsedtoDelDup3Text
        {
            get
            {
                if (null == fMethodUsedtoDelDup3Text)
                {
                    fMethodUsedtoDelDup3Text = new Text("MethodUsedtoDelDup3Text", MethodUsedtoDelDup2Text);
                    fMethodUsedtoDelDup3Text.UIMap.Scope = UIASeachScope.Children;
                    fMethodUsedtoDelDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fMethodUsedtoDelDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Method Used to Deliver Notification");
                }

                return fMethodUsedtoDelDup3Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox25a6fe7ComboBox
        {
            get
            {
                if (null == fComboBox25a6fe7ComboBox)
                {
                    fComboBox25a6fe7ComboBox = new ComboBox("ComboBox25a6fe7ComboBox", DefaultReceiveNGroup);
                    fComboBox25a6fe7ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox25a6fe7ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox25a6fe7ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"25a6fe72-c5d9-4d60-9630-d66a41bdfc51");
                }

                return fComboBox25a6fe7ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NotificationEmaDup2Text
        {
            get
            {
                if (null == fNotificationEmaDup2Text)
                {
                    fNotificationEmaDup2Text = new Text("NotificationEmaDup2Text", DefaultReceiveNGroup);
                    fNotificationEmaDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fNotificationEmaDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fNotificationEmaDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"B1AC92B5-F1A0-408e-8E6F-3C34F3224E51");
                    fNotificationEmaDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Notification E-mail Address");
                }

                return fNotificationEmaDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NotificationEmaDup3Text
        {
            get
            {
                if (null == fNotificationEmaDup3Text)
                {
                    fNotificationEmaDup3Text = new Text("NotificationEmaDup3Text", NotificationEmaDup2Text);
                    fNotificationEmaDup3Text.UIMap.Scope = UIASeachScope.Children;
                    fNotificationEmaDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fNotificationEmaDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Notification E-mail Address");
                }

                return fNotificationEmaDup3Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBox56A93ACDEdit
        {
            get
            {
                if (null == fTextBox56A93ACDEdit)
                {
                    fTextBox56A93ACDEdit = new Edit("TextBox56A93ACDEdit", DefaultReceiveNGroup);
                    fTextBox56A93ACDEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox56A93ACDEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox56A93ACDEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"56A93ACD-08D0-4857-A8E7-CBCBEE28E7AF");
                }

                return fTextBox56A93ACDEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup6Pane
        {
            get
            {
                if (null == fScrollViewerPARDup6Pane)
                {
                    fScrollViewerPARDup6Pane = new Pane("ScrollViewerPARDup6Pane", TextBox56A93ACDEdit);
                    fScrollViewerPARDup6Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup6Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup6Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup6Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup5ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup5ScrollBar)
                {
                    fScrollBarVerticDup5ScrollBar = new ScrollBar("ScrollBarVerticDup5ScrollBar", ScrollViewerPARDup6Pane);
                    fScrollBarVerticDup5ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup5ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup5ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup5ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup5ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup5ScrollBar)
                {
                    fScrollBarHorizoDup5ScrollBar = new ScrollBar("ScrollBarHorizoDup5ScrollBar", ScrollViewerPARDup6Pane);
                    fScrollBarHorizoDup5ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup5ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup5ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup5ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox IncludeThumbnaiDup1CheckBox
        {
            get
            {
                if (null == fIncludeThumbnaiDup1CheckBox)
                {
                    fIncludeThumbnaiDup1CheckBox = new CheckBox("IncludeThumbnaiDup1CheckBox", DefaultReceiveNGroup);
                    fIncludeThumbnaiDup1CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fIncludeThumbnaiDup1CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fIncludeThumbnaiDup1CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"F6C1020B-EDF4-4380-B1B0-A4B5EA39273E");
                    fIncludeThumbnaiDup1CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Include Thumbnail");
                }

                return fIncludeThumbnaiDup1CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text IncludeThumbnaiDup1Text
        {
            get
            {
                if (null == fIncludeThumbnaiDup1Text)
                {
                    fIncludeThumbnaiDup1Text = new Text("IncludeThumbnaiDup1Text", IncludeThumbnaiDup1CheckBox);
                    fIncludeThumbnaiDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fIncludeThumbnaiDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fIncludeThumbnaiDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Include Thumbnail");
                }

                return fIncludeThumbnaiDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text IncludeathumbnaDup1Text
        {
            get
            {
                if (null == fIncludeathumbnaDup1Text)
                {
                    fIncludeathumbnaDup1Text = new Text("IncludeathumbnaDup1Text", DefaultReceiveNGroup);
                    fIncludeathumbnaDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fIncludeathumbnaDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fIncludeathumbnaDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Include a thumbnail of the first scanned page in the notification.");
                }

                return fIncludeathumbnaDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NoteTheemailaddDup1Text
        {
            get
            {
                if (null == fNoteTheemailaddDup1Text)
                {
                    fNoteTheemailaddDup1Text = new Text("NoteTheemailaddDup1Text", DefaultReceiveNGroup);
                    fNoteTheemailaddDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fNoteTheemailaddDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fNoteTheemailaddDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @">Note: The e-mail address associated with a user's account is used for notification when a user signs in at the device. If not signed in, the user must enter an e-mail address before notification is sent. The device must also be set up to use an SMTP server.");
                }

                return fNoteTheemailaddDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group ApplySecurityPIGroup
        {
            get
            {
                if (null == fApplySecurityPIGroup)
                {
                    fApplySecurityPIGroup = new Group("ApplySecurityPIGroup", AnalogFaxReceivGroup);
                    fApplySecurityPIGroup.UIMap.Scope = UIASeachScope.Children;
                    fApplySecurityPIGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fApplySecurityPIGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mApplyFaxSecurityPinToDeviceGroupBox");
                    fApplySecurityPIGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Apply Security PIN to Device");
                }

                return fApplySecurityPIGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group Expander3E55AFEGroup
        {
            get
            {
                if (null == fExpander3E55AFEGroup)
                {
                    fExpander3E55AFEGroup = new Group("Expander3E55AFEGroup", ApplySecurityPIGroup);
                    fExpander3E55AFEGroup.UIMap.Scope = UIASeachScope.Children;
                    fExpander3E55AFEGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Expander");
                    fExpander3E55AFEGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3E55AFE2-1F9F-4166-B01B-2FE50B9AE6B8");
                }

                return fExpander3E55AFEGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group FaxPrintingScheGroup
        {
            get
            {
                if (null == fFaxPrintingScheGroup)
                {
                    fFaxPrintingScheGroup = new Group("FaxPrintingScheGroup", ApplySecurityPIGroup);
                    fFaxPrintingScheGroup.UIMap.Scope = UIASeachScope.Children;
                    fFaxPrintingScheGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fFaxPrintingScheGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"e75147bb-7d0f-49eb-a342-ba0749280aa9");
                    fFaxPrintingScheGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Printing Schedule");
                }

                return fFaxPrintingScheGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxPrintingScheText
        {
            get
            {
                if (null == fFaxPrintingScheText)
                {
                    fFaxPrintingScheText = new Text("FaxPrintingScheText", FaxPrintingScheGroup);
                    fFaxPrintingScheText.UIMap.Scope = UIASeachScope.Children;
                    fFaxPrintingScheText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxPrintingScheText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Printing Schedule");
                }

                return fFaxPrintingScheText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public RadioButton AlwaysprintfaxeRadioButton
        {
            get
            {
                if (null == fAlwaysprintfaxeRadioButton)
                {
                    fAlwaysprintfaxeRadioButton = new RadioButton("AlwaysprintfaxeRadioButton", FaxPrintingScheGroup);
                    fAlwaysprintfaxeRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fAlwaysprintfaxeRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RadioButton");
                    fAlwaysprintfaxeRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1a855e90-43d6-4f6b-8793-4f565b3102db");
                    fAlwaysprintfaxeRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Always print faxes");
                }

                return fAlwaysprintfaxeRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AlwaysprintfaxeText
        {
            get
            {
                if (null == fAlwaysprintfaxeText)
                {
                    fAlwaysprintfaxeText = new Text("AlwaysprintfaxeText", AlwaysprintfaxeRadioButton);
                    fAlwaysprintfaxeText.UIMap.Scope = UIASeachScope.Children;
                    fAlwaysprintfaxeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAlwaysprintfaxeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Always print faxes");
                }

                return fAlwaysprintfaxeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public RadioButton AlwaysstorefaxeRadioButton
        {
            get
            {
                if (null == fAlwaysstorefaxeRadioButton)
                {
                    fAlwaysstorefaxeRadioButton = new RadioButton("AlwaysstorefaxeRadioButton", FaxPrintingScheGroup);
                    fAlwaysstorefaxeRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fAlwaysstorefaxeRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RadioButton");
                    fAlwaysstorefaxeRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"935b797c-b0ac-4bb6-898b-0269be562ab7");
                    fAlwaysstorefaxeRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Always store faxes");
                }

                return fAlwaysstorefaxeRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AlwaysstorefaxeText
        {
            get
            {
                if (null == fAlwaysstorefaxeText)
                {
                    fAlwaysstorefaxeText = new Text("AlwaysstorefaxeText", AlwaysstorefaxeRadioButton);
                    fAlwaysstorefaxeText.UIMap.Scope = UIASeachScope.Children;
                    fAlwaysstorefaxeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAlwaysstorefaxeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Always store faxes");
                }

                return fAlwaysstorefaxeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public RadioButton UseFaxPrintingSRadioButton
        {
            get
            {
                if (null == fUseFaxPrintingSRadioButton)
                {
                    fUseFaxPrintingSRadioButton = new RadioButton("UseFaxPrintingSRadioButton", FaxPrintingScheGroup);
                    fUseFaxPrintingSRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fUseFaxPrintingSRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RadioButton");
                    fUseFaxPrintingSRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4a46c9ea-8e7e-47ec-8dc5-7f5de22a13b9");
                    fUseFaxPrintingSRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Use Fax Printing Schedule");
                }

                return fUseFaxPrintingSRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text UseFaxPrintingSText
        {
            get
            {
                if (null == fUseFaxPrintingSText)
                {
                    fUseFaxPrintingSText = new Text("UseFaxPrintingSText", UseFaxPrintingSRadioButton);
                    fUseFaxPrintingSText.UIMap.Scope = UIASeachScope.Children;
                    fUseFaxPrintingSText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fUseFaxPrintingSText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Use Fax Printing Schedule");
                }

                return fUseFaxPrintingSText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ChangePINButtonButton
        {
            get
            {
                if (null == fChangePINButtonButton)
                {
                    fChangePINButtonButton = new Button("ChangePINButtonButton", FaxPrintingScheGroup);
                    fChangePINButtonButton.UIMap.Scope = UIASeachScope.Children;
                    fChangePINButtonButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fChangePINButtonButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5159EFD7-AE88-465a-AB66-B24C407FCA24");
                    fChangePINButtonButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Change PIN...");
                }

                return fChangePINButtonButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public DataGrid ListView574cc24DataGrid
        {
            get
            {
                if (null == fListView574cc24DataGrid)
                {
                    fListView574cc24DataGrid = new DataGrid("ListView574cc24DataGrid", FaxPrintingScheGroup);
                    fListView574cc24DataGrid.UIMap.Scope = UIASeachScope.Children;
                    fListView574cc24DataGrid.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListView");
                    fListView574cc24DataGrid.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"574cc24b-5463-454a-b577-732a6f857817");
                }

                return fListView574cc24DataGrid;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Header GridViewHeaderRDup1Header
        {
            get
            {
                if (null == fGridViewHeaderRDup1Header)
                {
                    fGridViewHeaderRDup1Header = new Header("GridViewHeaderRDup1Header", ListView574cc24DataGrid);
                    fGridViewHeaderRDup1Header.UIMap.Scope = UIASeachScope.Children;
                    fGridViewHeaderRDup1Header.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewHeaderRowPresenter");
                }

                return fGridViewHeaderRDup1Header;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button AddButton8fb8fcButton
        {
            get
            {
                if (null == fAddButton8fb8fcButton)
                {
                    fAddButton8fb8fcButton = new Button("AddButton8fb8fcButton", FaxPrintingScheGroup);
                    fAddButton8fb8fcButton.UIMap.Scope = UIASeachScope.Children;
                    fAddButton8fb8fcButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fAddButton8fb8fcButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8fb8fc6c-3865-4968-a406-5c3ceef7cd48");
                    fAddButton8fb8fcButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add...");
                }

                return fAddButton8fb8fcButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddTextBlockDup1Text
        {
            get
            {
                if (null == fAddTextBlockDup1Text)
                {
                    fAddTextBlockDup1Text = new Text("AddTextBlockDup1Text", AddButton8fb8fcButton);
                    fAddTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fAddTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add...");
                }

                return fAddTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button EditButtonf3f53Button
        {
            get
            {
                if (null == fEditButtonf3f53Button)
                {
                    fEditButtonf3f53Button = new Button("EditButtonf3f53Button", FaxPrintingScheGroup);
                    fEditButtonf3f53Button.UIMap.Scope = UIASeachScope.Children;
                    fEditButtonf3f53Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fEditButtonf3f53Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"f3f531eb-6fe5-4c26-a0d0-21db683cb6a6");
                    fEditButtonf3f53Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Edit...");
                }

                return fEditButtonf3f53Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EditTextBlockDup1Text
        {
            get
            {
                if (null == fEditTextBlockDup1Text)
                {
                    fEditTextBlockDup1Text = new Text("EditTextBlockDup1Text", EditButtonf3f53Button);
                    fEditTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fEditTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEditTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Edit...");
                }

                return fEditTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RemoveButtonadaButton
        {
            get
            {
                if (null == fRemoveButtonadaButton)
                {
                    fRemoveButtonadaButton = new Button("RemoveButtonadaButton", FaxPrintingScheGroup);
                    fRemoveButtonadaButton.UIMap.Scope = UIASeachScope.Children;
                    fRemoveButtonadaButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fRemoveButtonadaButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ada9d05e-e0ba-44dd-b8d3-206e0b31ce4e");
                    fRemoveButtonadaButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Remove");
                }

                return fRemoveButtonadaButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RemoveTextBlockDup1Text
        {
            get
            {
                if (null == fRemoveTextBlockDup1Text)
                {
                    fRemoveTextBlockDup1Text = new Text("RemoveTextBlockDup1Text", RemoveButtonadaButton);
                    fRemoveTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fRemoveTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRemoveTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Remove");
                }

                return fRemoveTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text StartPrintingFaText
        {
            get
            {
                if (null == fStartPrintingFaText)
                {
                    fStartPrintingFaText = new Text("StartPrintingFaText", FaxPrintingScheGroup);
                    fStartPrintingFaText.UIMap.Scope = UIASeachScope.Children;
                    fStartPrintingFaText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fStartPrintingFaText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Start Printing Faxes");
                }

                return fStartPrintingFaText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane WindowsFormsHosDup0Pane
        {
            get
            {
                if (null == fWindowsFormsHosDup0Pane)
                {
                    fWindowsFormsHosDup0Pane = new Pane("WindowsFormsHosDup0Pane", FaxPrintingScheGroup);
                    fWindowsFormsHosDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fWindowsFormsHosDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"WindowsFormsHost");
                    fWindowsFormsHosDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"e9967edc-7ee9-4a1d-b9ae-0aa7467fd4f0");
                }

                return fWindowsFormsHosDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text StartStoringFaxText
        {
            get
            {
                if (null == fStartStoringFaxText)
                {
                    fStartStoringFaxText = new Text("StartStoringFaxText", FaxPrintingScheGroup);
                    fStartStoringFaxText.UIMap.Scope = UIASeachScope.Children;
                    fStartStoringFaxText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fStartStoringFaxText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Start Storing Faxes");
                }

                return fStartStoringFaxText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane WindowsFormsHosDup1Pane
        {
            get
            {
                if (null == fWindowsFormsHosDup1Pane)
                {
                    fWindowsFormsHosDup1Pane = new Pane("WindowsFormsHosDup1Pane", FaxPrintingScheGroup);
                    fWindowsFormsHosDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fWindowsFormsHosDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"WindowsFormsHost");
                    fWindowsFormsHosDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"fdc33da4-9923-4ee1-8071-406e70f36d94");
                }

                return fWindowsFormsHosDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text WeekdaysText
        {
            get
            {
                if (null == fWeekdaysText)
                {
                    fWeekdaysText = new Text("WeekdaysText", FaxPrintingScheGroup);
                    fWeekdaysText.UIMap.Scope = UIASeachScope.Children;
                    fWeekdaysText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fWeekdaysText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Weekdays");
                }

                return fWeekdaysText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox SundayCheckBox4CheckBox
        {
            get
            {
                if (null == fSundayCheckBox4CheckBox)
                {
                    fSundayCheckBox4CheckBox = new CheckBox("SundayCheckBox4CheckBox", FaxPrintingScheGroup);
                    fSundayCheckBox4CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fSundayCheckBox4CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fSundayCheckBox4CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4b2d7536-4b5f-46eb-bcf0-b6004750ab03");
                    fSundayCheckBox4CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Sunday");
                }

                return fSundayCheckBox4CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox MondayCheckBoxbCheckBox
        {
            get
            {
                if (null == fMondayCheckBoxbCheckBox)
                {
                    fMondayCheckBoxbCheckBox = new CheckBox("MondayCheckBoxbCheckBox", FaxPrintingScheGroup);
                    fMondayCheckBoxbCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fMondayCheckBoxbCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fMondayCheckBoxbCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"b4cc817e-692d-46a8-9745-cd2bea00f47a");
                    fMondayCheckBoxbCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monday");
                }

                return fMondayCheckBoxbCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox TuesdayCheckBoxCheckBox
        {
            get
            {
                if (null == fTuesdayCheckBoxCheckBox)
                {
                    fTuesdayCheckBoxCheckBox = new CheckBox("TuesdayCheckBoxCheckBox", FaxPrintingScheGroup);
                    fTuesdayCheckBoxCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fTuesdayCheckBoxCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fTuesdayCheckBoxCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9a18b119-527e-4ecf-9783-9f36fd7424da");
                    fTuesdayCheckBoxCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Tuesday");
                }

                return fTuesdayCheckBoxCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox WednesdayCheckBCheckBox
        {
            get
            {
                if (null == fWednesdayCheckBCheckBox)
                {
                    fWednesdayCheckBCheckBox = new CheckBox("WednesdayCheckBCheckBox", FaxPrintingScheGroup);
                    fWednesdayCheckBCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fWednesdayCheckBCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fWednesdayCheckBCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6db01e39-a1a2-47e3-b74f-4041893b768c");
                    fWednesdayCheckBCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Wednesday");
                }

                return fWednesdayCheckBCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox ThursdayCheckBoCheckBox
        {
            get
            {
                if (null == fThursdayCheckBoCheckBox)
                {
                    fThursdayCheckBoCheckBox = new CheckBox("ThursdayCheckBoCheckBox", FaxPrintingScheGroup);
                    fThursdayCheckBoCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fThursdayCheckBoCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fThursdayCheckBoCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"14c1dc91-ae7a-484c-bba8-4f918a3f2d82");
                    fThursdayCheckBoCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Thursday");
                }

                return fThursdayCheckBoCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox FridayCheckBox2CheckBox
        {
            get
            {
                if (null == fFridayCheckBox2CheckBox)
                {
                    fFridayCheckBox2CheckBox = new CheckBox("FridayCheckBox2CheckBox", FaxPrintingScheGroup);
                    fFridayCheckBox2CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fFridayCheckBox2CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fFridayCheckBox2CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"20900b6c-608b-4d65-8937-53855413c373");
                    fFridayCheckBox2CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Friday");
                }

                return fFridayCheckBox2CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox SaturdayCheckBoCheckBox
        {
            get
            {
                if (null == fSaturdayCheckBoCheckBox)
                {
                    fSaturdayCheckBoCheckBox = new CheckBox("SaturdayCheckBoCheckBox", FaxPrintingScheGroup);
                    fSaturdayCheckBoCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fSaturdayCheckBoCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fSaturdayCheckBoCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d9e7de7c-750d-4b7b-92cc-39c91c9a8c53");
                    fSaturdayCheckBoCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Saturday");
                }

                return fSaturdayCheckBoCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox ApplySecurityPICheckBox
        {
            get
            {
                if (null == fApplySecurityPICheckBox)
                {
                    fApplySecurityPICheckBox = new CheckBox("ApplySecurityPICheckBox", ApplySecurityPIGroup);
                    fApplySecurityPICheckBox.UIMap.Scope = UIASeachScope.Children;
                    fApplySecurityPICheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fApplySecurityPICheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mApplyFaxSecurityPinToDeviceCheckBox");
                    fApplySecurityPICheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Apply Security PIN to Device");
                }

                return fApplySecurityPICheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group BlockedFaxListGGroup
        {
            get
            {
                if (null == fBlockedFaxListGGroup)
                {
                    fBlockedFaxListGGroup = new Group("BlockedFaxListGGroup", AnalogFaxReceivGroup);
                    fBlockedFaxListGGroup.UIMap.Scope = UIASeachScope.Children;
                    fBlockedFaxListGGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fBlockedFaxListGGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9f86ea02-6df3-4413-9b9c-8667a4fd38b6");
                    fBlockedFaxListGGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Blocked Fax List");
                }

                return fBlockedFaxListGGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text BlockedFaxListTText
        {
            get
            {
                if (null == fBlockedFaxListTText)
                {
                    fBlockedFaxListTText = new Text("BlockedFaxListTText", BlockedFaxListGGroup);
                    fBlockedFaxListTText.UIMap.Scope = UIASeachScope.Children;
                    fBlockedFaxListTText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fBlockedFaxListTText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Blocked Fax List");
                }

                return fBlockedFaxListTText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxNumberText
        {
            get
            {
                if (null == fFaxNumberText)
                {
                    fFaxNumberText = new Text("FaxNumberText", BlockedFaxListGGroup);
                    fFaxNumberText.UIMap.Scope = UIASeachScope.Children;
                    fFaxNumberText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fFaxNumberText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Number");
                }

                return fFaxNumberText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxNumberTextBlText
        {
            get
            {
                if (null == fFaxNumberTextBlText)
                {
                    fFaxNumberTextBlText = new Text("FaxNumberTextBlText", FaxNumberText);
                    fFaxNumberTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fFaxNumberTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxNumberTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Number");
                }

                return fFaxNumberTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxae8e8d00Edit
        {
            get
            {
                if (null == fTextBoxae8e8d00Edit)
                {
                    fTextBoxae8e8d00Edit = new Edit("TextBoxae8e8d00Edit", BlockedFaxListGGroup);
                    fTextBoxae8e8d00Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxae8e8d00Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxae8e8d00Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ae8e8d00-ce71-4e8a-9807-be737f9be439");
                }

                return fTextBoxae8e8d00Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup7Pane
        {
            get
            {
                if (null == fScrollViewerPARDup7Pane)
                {
                    fScrollViewerPARDup7Pane = new Pane("ScrollViewerPARDup7Pane", TextBoxae8e8d00Edit);
                    fScrollViewerPARDup7Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup7Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup7Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup7Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup6ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup6ScrollBar)
                {
                    fScrollBarVerticDup6ScrollBar = new ScrollBar("ScrollBarVerticDup6ScrollBar", ScrollViewerPARDup7Pane);
                    fScrollBarVerticDup6ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup6ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup6ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup6ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup6ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup6ScrollBar)
                {
                    fScrollBarHorizoDup6ScrollBar = new ScrollBar("ScrollBarHorizoDup6ScrollBar", ScrollViewerPARDup7Pane);
                    fScrollBarHorizoDup6ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup6ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup6ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup6ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button AddButton5b8232Button
        {
            get
            {
                if (null == fAddButton5b8232Button)
                {
                    fAddButton5b8232Button = new Button("AddButton5b8232Button", BlockedFaxListGGroup);
                    fAddButton5b8232Button.UIMap.Scope = UIASeachScope.Children;
                    fAddButton5b8232Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fAddButton5b8232Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5b823261-06cd-464c-94ed-dbe28798cb31");
                    fAddButton5b8232Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add");
                }

                return fAddButton5b8232Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddTextBlockDup2Text
        {
            get
            {
                if (null == fAddTextBlockDup2Text)
                {
                    fAddTextBlockDup2Text = new Text("AddTextBlockDup2Text", AddButton5b8232Button);
                    fAddTextBlockDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fAddTextBlockDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddTextBlockDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add");
                }

                return fAddTextBlockDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public DataGrid ListViewc9666efDataGrid
        {
            get
            {
                if (null == fListViewc9666efDataGrid)
                {
                    fListViewc9666efDataGrid = new DataGrid("ListViewc9666efDataGrid", BlockedFaxListGGroup);
                    fListViewc9666efDataGrid.UIMap.Scope = UIASeachScope.Children;
                    fListViewc9666efDataGrid.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListView");
                    fListViewc9666efDataGrid.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c9666ef0-5a9b-4f46-b16e-fc0f3cf5a5df");
                }

                return fListViewc9666efDataGrid;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Header GridViewHeaderRDup2Header
        {
            get
            {
                if (null == fGridViewHeaderRDup2Header)
                {
                    fGridViewHeaderRDup2Header = new Header("GridViewHeaderRDup2Header", ListViewc9666efDataGrid);
                    fGridViewHeaderRDup2Header.UIMap.Scope = UIASeachScope.Children;
                    fGridViewHeaderRDup2Header.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewHeaderRowPresenter");
                }

                return fGridViewHeaderRDup2Header;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem BlockedFaxNumbeHeaderItem
        {
            get
            {
                if (null == fBlockedFaxNumbeHeaderItem)
                {
                    fBlockedFaxNumbeHeaderItem = new HeaderItem("BlockedFaxNumbeHeaderItem", GridViewHeaderRDup2Header);
                    fBlockedFaxNumbeHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fBlockedFaxNumbeHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fBlockedFaxNumbeHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Blocked Fax Numbers");
                }

                return fBlockedFaxNumbeHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group FaxArchiveandFoGroup
        {
            get
            {
                if (null == fFaxArchiveandFoGroup)
                {
                    fFaxArchiveandFoGroup = new Group("FaxArchiveandFoGroup", ScrollViewer336Pane);
                    fFaxArchiveandFoGroup.UIMap.Scope = UIASeachScope.Children;
                    fFaxArchiveandFoGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fFaxArchiveandFoGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d324473b-8c37-4e42-95fd-40f5810aecfb");
                    fFaxArchiveandFoGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Archive and Forwarding");
                }

                return fFaxArchiveandFoGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxArchiveandFoText
        {
            get
            {
                if (null == fFaxArchiveandFoText)
                {
                    fFaxArchiveandFoText = new Text("FaxArchiveandFoText", FaxArchiveandFoGroup);
                    fFaxArchiveandFoText.UIMap.Scope = UIASeachScope.Children;
                    fFaxArchiveandFoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxArchiveandFoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Archive and Forwarding");
                }

                return fFaxArchiveandFoText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group FaxArchiveGroupGroup
        {
            get
            {
                if (null == fFaxArchiveGroupGroup)
                {
                    fFaxArchiveGroupGroup = new Group("FaxArchiveGroupGroup", FaxArchiveandFoGroup);
                    fFaxArchiveGroupGroup.UIMap.Scope = UIASeachScope.Children;
                    fFaxArchiveGroupGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fFaxArchiveGroupGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ff2648d4-5830-4ed1-87b0-be2b3dc86a2d");
                    fFaxArchiveGroupGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Archive");
                }

                return fFaxArchiveGroupGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxArchiveTextBText
        {
            get
            {
                if (null == fFaxArchiveTextBText)
                {
                    fFaxArchiveTextBText = new Text("FaxArchiveTextBText", FaxArchiveGroupGroup);
                    fFaxArchiveTextBText.UIMap.Scope = UIASeachScope.Children;
                    fFaxArchiveTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxArchiveTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Archive");
                }

                return fFaxArchiveTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxArchivingText
        {
            get
            {
                if (null == fFaxArchivingText)
                {
                    fFaxArchivingText = new Text("FaxArchivingText", FaxArchiveGroupGroup);
                    fFaxArchivingText.UIMap.Scope = UIASeachScope.Children;
                    fFaxArchivingText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fFaxArchivingText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Archiving");
                }

                return fFaxArchivingText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxArchivingTexText
        {
            get
            {
                if (null == fFaxArchivingTexText)
                {
                    fFaxArchivingTexText = new Text("FaxArchivingTexText", FaxArchivingText);
                    fFaxArchivingTexText.UIMap.Scope = UIASeachScope.Children;
                    fFaxArchivingTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxArchivingTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Archiving");
                }

                return fFaxArchivingTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxb3815a5ComboBox
        {
            get
            {
                if (null == fComboBoxb3815a5ComboBox)
                {
                    fComboBoxb3815a5ComboBox = new ComboBox("ComboBoxb3815a5ComboBox", FaxArchiveGroupGroup);
                    fComboBoxb3815a5ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxb3815a5ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxb3815a5ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"b3815a59-870b-426a-bc31-640d307750f4");
                }

                return fComboBoxb3815a5ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ArchiveDestinatText
        {
            get
            {
                if (null == fArchiveDestinatText)
                {
                    fArchiveDestinatText = new Text("ArchiveDestinatText", FaxArchiveGroupGroup);
                    fArchiveDestinatText.UIMap.Scope = UIASeachScope.Children;
                    fArchiveDestinatText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fArchiveDestinatText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Archive Destination");
                }

                return fArchiveDestinatText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox3304e41ComboBox
        {
            get
            {
                if (null == fComboBox3304e41ComboBox)
                {
                    fComboBox3304e41ComboBox = new ComboBox("ComboBox3304e41ComboBox", FaxArchiveGroupGroup);
                    fComboBox3304e41ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox3304e41ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox3304e41ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3304e41e-5c2c-4639-ab8f-fb1cbd5852a8");
                }

                return fComboBox3304e41ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EmailAddressText
        {
            get
            {
                if (null == fEmailAddressText)
                {
                    fEmailAddressText = new Text("EmailAddressText", FaxArchiveGroupGroup);
                    fEmailAddressText.UIMap.Scope = UIASeachScope.Children;
                    fEmailAddressText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fEmailAddressText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"E-mail Address");
                }

                return fEmailAddressText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxd4d9966cEdit
        {
            get
            {
                if (null == fTextBoxd4d9966cEdit)
                {
                    fTextBoxd4d9966cEdit = new Edit("TextBoxd4d9966cEdit", FaxArchiveGroupGroup);
                    fTextBoxd4d9966cEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxd4d9966cEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxd4d9966cEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d4d9966c-7127-4cec-954b-b39c519a4480");
                }

                return fTextBoxd4d9966cEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TypeoffaxjobtoaText
        {
            get
            {
                if (null == fTypeoffaxjobtoaText)
                {
                    fTypeoffaxjobtoaText = new Text("TypeoffaxjobtoaText", FaxArchiveGroupGroup);
                    fTypeoffaxjobtoaText.UIMap.Scope = UIASeachScope.Children;
                    fTypeoffaxjobtoaText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fTypeoffaxjobtoaText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Type of fax job to archive");
                }

                return fTypeoffaxjobtoaText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxeccf383ComboBox
        {
            get
            {
                if (null == fComboBoxeccf383ComboBox)
                {
                    fComboBoxeccf383ComboBox = new ComboBox("ComboBoxeccf383ComboBox", FaxArchiveGroupGroup);
                    fComboBoxeccf383ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxeccf383ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxeccf383ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"eccf3834-c0aa-499f-a95b-7c82e672b306");
                }

                return fComboBoxeccf383ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group FTPServerGroupBGroup
        {
            get
            {
                if (null == fFTPServerGroupBGroup)
                {
                    fFTPServerGroupBGroup = new Group("FTPServerGroupBGroup", FaxArchiveandFoGroup);
                    fFTPServerGroupBGroup.UIMap.Scope = UIASeachScope.Children;
                    fFTPServerGroupBGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fFTPServerGroupBGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"f97d2976-b204-4577-9c75-0e6fb8b3f89d");
                    fFTPServerGroupBGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"FTP Server");
                }

                return fFTPServerGroupBGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group FolderSettingsGGroup
        {
            get
            {
                if (null == fFolderSettingsGGroup)
                {
                    fFolderSettingsGGroup = new Group("FolderSettingsGGroup", FaxArchiveandFoGroup);
                    fFolderSettingsGGroup.UIMap.Scope = UIASeachScope.Children;
                    fFolderSettingsGGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fFolderSettingsGGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"941B571E-A1EA-4d15-B781-2EFE7CCFE849");
                    fFolderSettingsGGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Folder Settings");
                }

                return fFolderSettingsGGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group OutgoingEmailSeGroup
        {
            get
            {
                if (null == fOutgoingEmailSeGroup)
                {
                    fOutgoingEmailSeGroup = new Group("OutgoingEmailSeGroup", FaxArchiveandFoGroup);
                    fOutgoingEmailSeGroup.UIMap.Scope = UIASeachScope.Children;
                    fOutgoingEmailSeGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fOutgoingEmailSeGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mAnalogFaxOutgoingEmailServerGroupBox");
                    fOutgoingEmailSeGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Outgoing E-mail Server (SMTP)");
                }

                return fOutgoingEmailSeGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group FaxForwardingGrGroup
        {
            get
            {
                if (null == fFaxForwardingGrGroup)
                {
                    fFaxForwardingGrGroup = new Group("FaxForwardingGrGroup", FaxArchiveandFoGroup);
                    fFaxForwardingGrGroup.UIMap.Scope = UIASeachScope.Children;
                    fFaxForwardingGrGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fFaxForwardingGrGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ca705113-b7bf-4544-8a72-27681d756ec1");
                    fFaxForwardingGrGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Forwarding");
                }

                return fFaxForwardingGrGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxForwardingTeText
        {
            get
            {
                if (null == fFaxForwardingTeText)
                {
                    fFaxForwardingTeText = new Text("FaxForwardingTeText", FaxForwardingGrGroup);
                    fFaxForwardingTeText.UIMap.Scope = UIASeachScope.Children;
                    fFaxForwardingTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxForwardingTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Forwarding");
                }

                return fFaxForwardingTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox EnableFaxForwarCheckBox
        {
            get
            {
                if (null == fEnableFaxForwarCheckBox)
                {
                    fEnableFaxForwarCheckBox = new CheckBox("EnableFaxForwarCheckBox", FaxForwardingGrGroup);
                    fEnableFaxForwarCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fEnableFaxForwarCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fEnableFaxForwarCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"b9b52e85-d356-40c4-83d0-bac58a6b747e");
                    fEnableFaxForwarCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enable Fax Forwarding");
                }

                return fEnableFaxForwarCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EnableFaxForwarText
        {
            get
            {
                if (null == fEnableFaxForwarText)
                {
                    fEnableFaxForwarText = new Text("EnableFaxForwarText", EnableFaxForwarCheckBox);
                    fEnableFaxForwarText.UIMap.Scope = UIASeachScope.Children;
                    fEnableFaxForwarText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEnableFaxForwarText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enable Fax Forwarding");
                }

                return fEnableFaxForwarText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TypeoffaxjobtofDup0Text
        {
            get
            {
                if (null == fTypeoffaxjobtofDup0Text)
                {
                    fTypeoffaxjobtofDup0Text = new Text("TypeoffaxjobtofDup0Text", FaxForwardingGrGroup);
                    fTypeoffaxjobtofDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fTypeoffaxjobtofDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fTypeoffaxjobtofDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mFaxJobTypeToForwardComboBoxLabel");
                    fTypeoffaxjobtofDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Type of fax job to forward");
                }

                return fTypeoffaxjobtofDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TypeoffaxjobtofDup1Text
        {
            get
            {
                if (null == fTypeoffaxjobtofDup1Text)
                {
                    fTypeoffaxjobtofDup1Text = new Text("TypeoffaxjobtofDup1Text", TypeoffaxjobtofDup0Text);
                    fTypeoffaxjobtofDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fTypeoffaxjobtofDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTypeoffaxjobtofDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Type of fax job to forward");
                }

                return fTypeoffaxjobtofDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox89bd0daComboBox
        {
            get
            {
                if (null == fComboBox89bd0daComboBox)
                {
                    fComboBox89bd0daComboBox = new ComboBox("ComboBox89bd0daComboBox", FaxForwardingGrGroup);
                    fComboBox89bd0daComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox89bd0daComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox89bd0daComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"89bd0da3-dbd8-45f8-bacd-bac7ab521d80");
                }

                return fComboBox89bd0daComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ForwardingNumbeDup0Text
        {
            get
            {
                if (null == fForwardingNumbeDup0Text)
                {
                    fForwardingNumbeDup0Text = new Text("ForwardingNumbeDup0Text", FaxForwardingGrGroup);
                    fForwardingNumbeDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fForwardingNumbeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fForwardingNumbeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Forwarding Number");
                }

                return fForwardingNumbeDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ForwardingNumbeDup1Text
        {
            get
            {
                if (null == fForwardingNumbeDup1Text)
                {
                    fForwardingNumbeDup1Text = new Text("ForwardingNumbeDup1Text", ForwardingNumbeDup0Text);
                    fForwardingNumbeDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fForwardingNumbeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fForwardingNumbeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Forwarding Number");
                }

                return fForwardingNumbeDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxcfbe8f25Edit
        {
            get
            {
                if (null == fTextBoxcfbe8f25Edit)
                {
                    fTextBoxcfbe8f25Edit = new Edit("TextBoxcfbe8f25Edit", FaxForwardingGrGroup);
                    fTextBoxcfbe8f25Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxcfbe8f25Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxcfbe8f25Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cfbe8f25-4609-47ca-be70-0c8fdaa0fc26");
                }

                return fTextBoxcfbe8f25Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup8Pane
        {
            get
            {
                if (null == fScrollViewerPARDup8Pane)
                {
                    fScrollViewerPARDup8Pane = new Pane("ScrollViewerPARDup8Pane", TextBoxcfbe8f25Edit);
                    fScrollViewerPARDup8Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup8Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup8Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup8Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup7ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup7ScrollBar)
                {
                    fScrollBarVerticDup7ScrollBar = new ScrollBar("ScrollBarVerticDup7ScrollBar", ScrollViewerPARDup8Pane);
                    fScrollBarVerticDup7ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup7ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup7ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup7ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup7ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup7ScrollBar)
                {
                    fScrollBarHorizoDup7ScrollBar = new ScrollBar("ScrollBarHorizoDup7ScrollBar", ScrollViewerPARDup8Pane);
                    fScrollBarHorizoDup7ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup7ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup7ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup7ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group TroubleshootingGroup
        {
            get
            {
                if (null == fTroubleshootingGroup)
                {
                    fTroubleshootingGroup = new Group("TroubleshootingGroup", ScrollViewer336Pane);
                    fTroubleshootingGroup.UIMap.Scope = UIASeachScope.Children;
                    fTroubleshootingGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fTroubleshootingGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cde9a606-4393-48fb-a19e-73c965e03fbf");
                    fTroubleshootingGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Troubleshooting");
                }

                return fTroubleshootingGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group ReportsandInterGroup
        {
            get
            {
                if (null == fReportsandInterGroup)
                {
                    fReportsandInterGroup = new Group("ReportsandInterGroup", ScrollViewer336Pane);
                    fReportsandInterGroup.UIMap.Scope = UIASeachScope.Children;
                    fReportsandInterGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fReportsandInterGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"b1b27bba-c7ce-453a-bebb-0c2383749531");
                    fReportsandInterGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Reports and Internal Pages");
                }

                return fReportsandInterGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group FaxActivityLogGGroup
        {
            get
            {
                if (null == fFaxActivityLogGGroup)
                {
                    fFaxActivityLogGGroup = new Group("FaxActivityLogGGroup", ScrollViewer336Pane);
                    fFaxActivityLogGGroup.UIMap.Scope = UIASeachScope.Children;
                    fFaxActivityLogGGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fFaxActivityLogGGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"60243ef9-271a-483b-89d5-464c8f70e02a");
                    fFaxActivityLogGGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Activity Log");
                }

                return fFaxActivityLogGGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxActivityLogTText
        {
            get
            {
                if (null == fFaxActivityLogTText)
                {
                    fFaxActivityLogTText = new Text("FaxActivityLogTText", FaxActivityLogGGroup);
                    fFaxActivityLogTText.UIMap.Scope = UIASeachScope.Children;
                    fFaxActivityLogTText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxActivityLogTText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Activity Log");
                }

                return fFaxActivityLogTText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button PrintActivityLoButton
        {
            get
            {
                if (null == fPrintActivityLoButton)
                {
                    fPrintActivityLoButton = new Button("PrintActivityLoButton", FaxActivityLogGGroup);
                    fPrintActivityLoButton.UIMap.Scope = UIASeachScope.Children;
                    fPrintActivityLoButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fPrintActivityLoButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"445CB109-B29D-47d5-A404-4AC3F0E5C7BB");
                    fPrintActivityLoButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Print Activity Log");
                }

                return fPrintActivityLoButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PrintActivityLoText
        {
            get
            {
                if (null == fPrintActivityLoText)
                {
                    fPrintActivityLoText = new Text("PrintActivityLoText", PrintActivityLoButton);
                    fPrintActivityLoText.UIMap.Scope = UIASeachScope.Children;
                    fPrintActivityLoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPrintActivityLoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Print Activity Log");
                }

                return fPrintActivityLoText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ClearActivityLoButton
        {
            get
            {
                if (null == fClearActivityLoButton)
                {
                    fClearActivityLoButton = new Button("ClearActivityLoButton", FaxActivityLogGGroup);
                    fClearActivityLoButton.UIMap.Scope = UIASeachScope.Children;
                    fClearActivityLoButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fClearActivityLoButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5F7FAFE6-EA15-4d3f-97A5-1DAA50AA9B7D");
                    fClearActivityLoButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Clear Activity Log");
                }

                return fClearActivityLoButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ClearActivityLoText
        {
            get
            {
                if (null == fClearActivityLoText)
                {
                    fClearActivityLoText = new Text("ClearActivityLoText", ClearActivityLoButton);
                    fClearActivityLoText.UIMap.Scope = UIASeachScope.Children;
                    fClearActivityLoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fClearActivityLoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Clear Activity Log");
                }

                return fClearActivityLoText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ConfigurationavText
        {
            get
            {
                if (null == fConfigurationavText)
                {
                    fConfigurationavText = new Text("ConfigurationavText", ScrollViewer336Pane);
                    fConfigurationavText.UIMap.Scope = UIASeachScope.Children;
                    fConfigurationavText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fConfigurationavText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"94AFEF2E-D7E4-4835-A5D6-E6AF4881A84F");
                    fConfigurationavText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Configuration available only at the device");
                }

                return fConfigurationavText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup8ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup8ScrollBar)
                {
                    fScrollBarVerticDup8ScrollBar = new ScrollBar("ScrollBarVerticDup8ScrollBar", ScrollViewer336Pane);
                    fScrollBarVerticDup8ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup8ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup8ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup8ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RepeatButtonLinDup2Button
        {
            get
            {
                if (null == fRepeatButtonLinDup2Button)
                {
                    fRepeatButtonLinDup2Button = new Button("RepeatButtonLinDup2Button", ScrollBarVerticDup8ScrollBar);
                    fRepeatButtonLinDup2Button.UIMap.Scope = UIASeachScope.Children;
                    fRepeatButtonLinDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RepeatButton");
                    fRepeatButtonLinDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"LineUp");
                }

                return fRepeatButtonLinDup2Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RepeatButtonPagDup2Button
        {
            get
            {
                if (null == fRepeatButtonPagDup2Button)
                {
                    fRepeatButtonPagDup2Button = new Button("RepeatButtonPagDup2Button", ScrollBarVerticDup8ScrollBar);
                    fRepeatButtonPagDup2Button.UIMap.Scope = UIASeachScope.Children;
                    fRepeatButtonPagDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RepeatButton");
                    fRepeatButtonPagDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PageUp");
                }

                return fRepeatButtonPagDup2Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RepeatButtonPagDup3Button
        {
            get
            {
                if (null == fRepeatButtonPagDup3Button)
                {
                    fRepeatButtonPagDup3Button = new Button("RepeatButtonPagDup3Button", ScrollBarVerticDup8ScrollBar);
                    fRepeatButtonPagDup3Button.UIMap.Scope = UIASeachScope.Children;
                    fRepeatButtonPagDup3Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RepeatButton");
                    fRepeatButtonPagDup3Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PageDown");
                }

                return fRepeatButtonPagDup3Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbDup1Thumb
        {
            get
            {
                if (null == fThumbDup1Thumb)
                {
                    fThumbDup1Thumb = new Thumb("ThumbDup1Thumb", ScrollBarVerticDup8ScrollBar);
                    fThumbDup1Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbDup1Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                }

                return fThumbDup1Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RepeatButtonLinDup3Button
        {
            get
            {
                if (null == fRepeatButtonLinDup3Button)
                {
                    fRepeatButtonLinDup3Button = new Button("RepeatButtonLinDup3Button", ScrollBarVerticDup8ScrollBar);
                    fRepeatButtonLinDup3Button.UIMap.Scope = UIASeachScope.Children;
                    fRepeatButtonLinDup3Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RepeatButton");
                    fRepeatButtonLinDup3Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"LineDown");
                }

                return fRepeatButtonLinDup3Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup8ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup8ScrollBar)
                {
                    fScrollBarHorizoDup8ScrollBar = new ScrollBar("ScrollBarHorizoDup8ScrollBar", ScrollViewer336Pane);
                    fScrollBarHorizoDup8ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup8ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup8ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup8ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup4TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup4TabItem)
                {
                    fSystemWindowsCoDup4TabItem = new TabItem("SystemWindowsCoDup4TabItem", TabControl2111BTab);
                    fSystemWindowsCoDup4TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup4TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup4TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4fc77c37-e986-429e-b033-e2e5fb4a85e5");
                    fSystemWindowsCoDup4TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup4TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SendtoFolderTexDup0Text
        {
            get
            {
                if (null == fSendtoFolderTexDup0Text)
                {
                    fSendtoFolderTexDup0Text = new Text("SendtoFolderTexDup0Text", SystemWindowsCoDup4TabItem);
                    fSendtoFolderTexDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fSendtoFolderTexDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fSendtoFolderTexDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mFolderTabLabel");
                    fSendtoFolderTexDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send to Folder");
                }

                return fSendtoFolderTexDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SendtoFolderTexDup1Text
        {
            get
            {
                if (null == fSendtoFolderTexDup1Text)
                {
                    fSendtoFolderTexDup1Text = new Text("SendtoFolderTexDup1Text", SendtoFolderTexDup0Text);
                    fSendtoFolderTexDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fSendtoFolderTexDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSendtoFolderTexDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send to Folder");
                }

                return fSendtoFolderTexDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Texta7a758d4d75Text
        {
            get
            {
                if (null == fTexta7a758d4d75Text)
                {
                    fTexta7a758d4d75Text = new Text("Texta7a758d4d75Text", SystemWindowsCoDup4TabItem);
                    fTexta7a758d4d75Text.UIMap.Scope = UIASeachScope.Children;
                    fTexta7a758d4d75Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fTexta7a758d4d75Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"a7a758d4-d759-4b19-8ea7-353731d0c2f4");
                    fTexta7a758d4d75Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fTexta7a758d4d75Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Texte95b3491f6bText
        {
            get
            {
                if (null == fTexte95b3491f6bText)
                {
                    fTexte95b3491f6bText = new Text("Texte95b3491f6bText", SystemWindowsCoDup4TabItem);
                    fTexte95b3491f6bText.UIMap.Scope = UIASeachScope.Children;
                    fTexte95b3491f6bText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fTexte95b3491f6bText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"e95b3491-f6b7-4a10-92d2-862dc0b4b188");
                    fTexte95b3491f6bText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fTexte95b3491f6bText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ProgressBar ProgressBar9a14ProgressBar
        {
            get
            {
                if (null == fProgressBar9a14ProgressBar)
                {
                    fProgressBar9a14ProgressBar = new ProgressBar("ProgressBar9a14ProgressBar", SystemWindowsCoDup4TabItem);
                    fProgressBar9a14ProgressBar.UIMap.Scope = UIASeachScope.Children;
                    fProgressBar9a14ProgressBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ProgressBar");
                    fProgressBar9a14ProgressBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9a144af2-3c52-4a7b-8336-ba2eef27f32c");
                }

                return fProgressBar9a14ProgressBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup5TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup5TabItem)
                {
                    fSystemWindowsCoDup5TabItem = new TabItem("SystemWindowsCoDup5TabItem", TabControl2111BTab);
                    fSystemWindowsCoDup5TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup5TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup5TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"72389cc4-0879-48a1-94ae-3f27e4f6ebf4");
                    fSystemWindowsCoDup5TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup5TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SendtoWorkflowsDup0Text
        {
            get
            {
                if (null == fSendtoWorkflowsDup0Text)
                {
                    fSendtoWorkflowsDup0Text = new Text("SendtoWorkflowsDup0Text", SystemWindowsCoDup5TabItem);
                    fSendtoWorkflowsDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fSendtoWorkflowsDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fSendtoWorkflowsDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mWorkflowsTabLabel");
                    fSendtoWorkflowsDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send to Workflows");
                }

                return fSendtoWorkflowsDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SendtoWorkflowsDup1Text
        {
            get
            {
                if (null == fSendtoWorkflowsDup1Text)
                {
                    fSendtoWorkflowsDup1Text = new Text("SendtoWorkflowsDup1Text", SendtoWorkflowsDup0Text);
                    fSendtoWorkflowsDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fSendtoWorkflowsDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSendtoWorkflowsDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send to Workflows");
                }

                return fSendtoWorkflowsDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextAA63352F914Text
        {
            get
            {
                if (null == fTextAA63352F914Text)
                {
                    fTextAA63352F914Text = new Text("TextAA63352F914Text", SystemWindowsCoDup5TabItem);
                    fTextAA63352F914Text.UIMap.Scope = UIASeachScope.Children;
                    fTextAA63352F914Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fTextAA63352F914Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AA63352F-9148-41b9-AED8-B26A079FCA6A");
                    fTextAA63352F914Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fTextAA63352F914Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextB31E1B768A7Text
        {
            get
            {
                if (null == fTextB31E1B768A7Text)
                {
                    fTextB31E1B768A7Text = new Text("TextB31E1B768A7Text", SystemWindowsCoDup5TabItem);
                    fTextB31E1B768A7Text.UIMap.Scope = UIASeachScope.Children;
                    fTextB31E1B768A7Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fTextB31E1B768A7Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"B31E1B76-8A70-407b-B844-637C1737D8A0");
                    fTextB31E1B768A7Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fTextB31E1B768A7Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ProgressBar ProgressBar55dfProgressBar
        {
            get
            {
                if (null == fProgressBar55dfProgressBar)
                {
                    fProgressBar55dfProgressBar = new ProgressBar("ProgressBar55dfProgressBar", SystemWindowsCoDup5TabItem);
                    fProgressBar55dfProgressBar.UIMap.Scope = UIASeachScope.Children;
                    fProgressBar55dfProgressBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ProgressBar");
                    fProgressBar55dfProgressBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"55df71ad-b53b-46b8-95fc-ab4433bec7b4");
                }

                return fProgressBar55dfProgressBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup6TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup6TabItem)
                {
                    fSystemWindowsCoDup6TabItem = new TabItem("SystemWindowsCoDup6TabItem", TabControl2111BTab);
                    fSystemWindowsCoDup6TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup6TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup6TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2392b462-3286-4dd1-9fb7-c962c43de01a");
                    fSystemWindowsCoDup6TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup6TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SendtoSharePoinDup0Text
        {
            get
            {
                if (null == fSendtoSharePoinDup0Text)
                {
                    fSendtoSharePoinDup0Text = new Text("SendtoSharePoinDup0Text", SystemWindowsCoDup6TabItem);
                    fSendtoSharePoinDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fSendtoSharePoinDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fSendtoSharePoinDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mSharePointTabLabel");
                    fSendtoSharePoinDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send to SharePoint®");
                }

                return fSendtoSharePoinDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SendtoSharePoinDup1Text
        {
            get
            {
                if (null == fSendtoSharePoinDup1Text)
                {
                    fSendtoSharePoinDup1Text = new Text("SendtoSharePoinDup1Text", SendtoSharePoinDup0Text);
                    fSendtoSharePoinDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fSendtoSharePoinDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSendtoSharePoinDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send to SharePoint®");
                }

                return fSendtoSharePoinDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text348fa329f78Text
        {
            get
            {
                if (null == fText348fa329f78Text)
                {
                    fText348fa329f78Text = new Text("Text348fa329f78Text", SystemWindowsCoDup6TabItem);
                    fText348fa329f78Text.UIMap.Scope = UIASeachScope.Children;
                    fText348fa329f78Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText348fa329f78Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"348fa329-f78c-49b1-9622-5c08f7e021d2");
                    fText348fa329f78Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText348fa329f78Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text4bfa1a11126Text
        {
            get
            {
                if (null == fText4bfa1a11126Text)
                {
                    fText4bfa1a11126Text = new Text("Text4bfa1a11126Text", SystemWindowsCoDup6TabItem);
                    fText4bfa1a11126Text.UIMap.Scope = UIASeachScope.Children;
                    fText4bfa1a11126Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText4bfa1a11126Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4bfa1a11-126e-47ee-bae0-b57524f306c5");
                    fText4bfa1a11126Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText4bfa1a11126Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ProgressBar ProgressBard093ProgressBar
        {
            get
            {
                if (null == fProgressBard093ProgressBar)
                {
                    fProgressBard093ProgressBar = new ProgressBar("ProgressBard093ProgressBar", SystemWindowsCoDup6TabItem);
                    fProgressBard093ProgressBar.UIMap.Scope = UIASeachScope.Children;
                    fProgressBard093ProgressBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ProgressBar");
                    fProgressBard093ProgressBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d093c10f-9c9a-4951-8778-ae36e4cb8906");
                }

                return fProgressBard093ProgressBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup7TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup7TabItem)
                {
                    fSystemWindowsCoDup7TabItem = new TabItem("SystemWindowsCoDup7TabItem", TabControl2111BTab);
                    fSystemWindowsCoDup7TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup7TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup7TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2c39648c-5b8c-4a4a-8403-9204bab8f86a");
                    fSystemWindowsCoDup7TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup7TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddressingTextmDup0Text
        {
            get
            {
                if (null == fAddressingTextmDup0Text)
                {
                    fAddressingTextmDup0Text = new Text("AddressingTextmDup0Text", SystemWindowsCoDup7TabItem);
                    fAddressingTextmDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fAddressingTextmDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fAddressingTextmDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mAddressingTabLabel");
                    fAddressingTextmDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Addressing");
                }

                return fAddressingTextmDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddressingTextBDup0Text
        {
            get
            {
                if (null == fAddressingTextBDup0Text)
                {
                    fAddressingTextBDup0Text = new Text("AddressingTextBDup0Text", AddressingTextmDup0Text);
                    fAddressingTextBDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fAddressingTextBDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddressingTextBDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Addressing");
                }

                return fAddressingTextBDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text7a57f43ecb1Dup0Text
        {
            get
            {
                if (null == fText7a57f43ecb1Dup0Text)
                {
                    fText7a57f43ecb1Dup0Text = new Text("Text7a57f43ecb1Dup0Text", SystemWindowsCoDup7TabItem);
                    fText7a57f43ecb1Dup0Text.UIMap.Scope = UIASeachScope.Children;
                    fText7a57f43ecb1Dup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText7a57f43ecb1Dup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7a57f43e-cb18-48d3-ac92-9dad7b3dc47e");
                    fText7a57f43ecb1Dup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText7a57f43ecb1Dup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text654b650dd19Dup0Text
        {
            get
            {
                if (null == fText654b650dd19Dup0Text)
                {
                    fText654b650dd19Dup0Text = new Text("Text654b650dd19Dup0Text", SystemWindowsCoDup7TabItem);
                    fText654b650dd19Dup0Text.UIMap.Scope = UIASeachScope.Children;
                    fText654b650dd19Dup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText654b650dd19Dup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"654b650d-d19f-413b-aaea-ed4ce008fdd5");
                    fText654b650dd19Dup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText654b650dd19Dup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ProgressBar ProgressBar15a0ProgressBar
        {
            get
            {
                if (null == fProgressBar15a0ProgressBar)
                {
                    fProgressBar15a0ProgressBar = new ProgressBar("ProgressBar15a0ProgressBar", SystemWindowsCoDup7TabItem);
                    fProgressBar15a0ProgressBar.UIMap.Scope = UIASeachScope.Children;
                    fProgressBar15a0ProgressBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ProgressBar");
                    fProgressBar15a0ProgressBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"15a0e097-7457-4429-ad09-7faad221b9da");
                }

                return fProgressBar15a0ProgressBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup8TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup8TabItem)
                {
                    fSystemWindowsCoDup8TabItem = new TabItem("SystemWindowsCoDup8TabItem", TabControl2111BTab);
                    fSystemWindowsCoDup8TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup8TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup8TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"C5AD81FA-F1DA-466c-96FD-190B67B3FB49");
                    fSystemWindowsCoDup8TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup8TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text LogTextmLogTabLText
        {
            get
            {
                if (null == fLogTextmLogTabLText)
                {
                    fLogTextmLogTabLText = new Text("LogTextmLogTabLText", SystemWindowsCoDup8TabItem);
                    fLogTextmLogTabLText.UIMap.Scope = UIASeachScope.Children;
                    fLogTextmLogTabLText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fLogTextmLogTabLText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mLogTabLabel");
                    fLogTextmLogTabLText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Log");
                }

                return fLogTextmLogTabLText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text LogTextBlockDup0Text
        {
            get
            {
                if (null == fLogTextBlockDup0Text)
                {
                    fLogTextBlockDup0Text = new Text("LogTextBlockDup0Text", LogTextmLogTabLText);
                    fLogTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fLogTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fLogTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Log");
                }

                return fLogTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ProgressBar ProgressBarA997ProgressBar
        {
            get
            {
                if (null == fProgressBarA997ProgressBar)
                {
                    fProgressBarA997ProgressBar = new ProgressBar("ProgressBarA997ProgressBar", SystemWindowsCoDup8TabItem);
                    fProgressBarA997ProgressBar.UIMap.Scope = UIASeachScope.Children;
                    fProgressBarA997ProgressBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ProgressBar");
                    fProgressBarA997ProgressBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"A99714B6-EFB6-4249-BE44-2C003700270A");
                }

                return fProgressBarA997ProgressBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup9TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup9TabItem)
                {
                    fSystemWindowsCoDup9TabItem = new TabItem("SystemWindowsCoDup9TabItem", TabControl2111BTab);
                    fSystemWindowsCoDup9TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup9TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup9TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cf949d55-8696-4f80-9cf7-0478eedc98e0");
                    fSystemWindowsCoDup9TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup9TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar HPDigitalSendinTitleBar
        {
            get
            {
                if (null == fHPDigitalSendinTitleBar)
                {
                    fHPDigitalSendinTitleBar = new TitleBar("HPDigitalSendinTitleBar", HPDigitalSendinWindow);
                    fHPDigitalSendinTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software Configuration (Server IP Address: {_serverIP})");
                }

                return fHPDigitalSendinTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyDup1MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup1MenuBar)
                {
                    fSystemMenuBarSyDup1MenuBar = new MenuBar("SystemMenuBarSyDup1MenuBar", HPDigitalSendinTitleBar);
                    fSystemMenuBarSyDup1MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup1MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyDup1MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyDup1MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1Dup1MenuItem
        {
            get
            {
                if (null == fSystemItem1Dup1MenuItem)
                {
                    fSystemItem1Dup1MenuItem = new MenuItem("SystemItem1Dup1MenuItem", SystemMenuBarSyDup1MenuBar);
                    fSystemItem1Dup1MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1Dup1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1Dup1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1Dup1MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MinimizeMinimizDup1Button
        {
            get
            {
                if (null == fMinimizeMinimizDup1Button)
                {
                    fMinimizeMinimizDup1Button = new Button("MinimizeMinimizDup1Button", HPDigitalSendinTitleBar);
                    fMinimizeMinimizDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                    fMinimizeMinimizDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                }

                return fMinimizeMinimizDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RestoreRestoreButton
        {
            get
            {
                if (null == fRestoreRestoreButton)
                {
                    fRestoreRestoreButton = new Button("RestoreRestoreButton", HPDigitalSendinTitleBar);
                    fRestoreRestoreButton.UIMap.Scope = UIASeachScope.Children;
                    fRestoreRestoreButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Restore");
                    fRestoreRestoreButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Restore");
                }

                return fRestoreRestoreButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseDup1Button
        {
            get
            {
                if (null == fCloseCloseDup1Button)
                {
                    fCloseCloseDup1Button = new Button("CloseCloseDup1Button", HPDigitalSendinTitleBar);
                    fCloseCloseDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button HelpButtonCB8CFButton
        {
            get
            {
                if (null == fHelpButtonCB8CFButton)
                {
                    fHelpButtonCB8CFButton = new Button("HelpButtonCB8CFButton", HPDigitalSendinWindow);
                    fHelpButtonCB8CFButton.UIMap.Scope = UIASeachScope.Children;
                    fHelpButtonCB8CFButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fHelpButtonCB8CFButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"CB8CF0C3-DFBE-49b8-B09B-03A34F5D4186");
                    fHelpButtonCB8CFButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpButtonCB8CFButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HelpTextBlockDup1Text
        {
            get
            {
                if (null == fHelpTextBlockDup1Text)
                {
                    fHelpTextBlockDup1Text = new Text("HelpTextBlockDup1Text", HelpButtonCB8CFButton);
                    fHelpTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fHelpTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHelpTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ApplyButton61E2Button
        {
            get
            {
                if (null == fApplyButton61E2Button)
                {
                    fApplyButton61E2Button = new Button("ApplyButton", HPDigitalSendinWindow);
                    fApplyButton61E2Button.UIMap.Scope = UIASeachScope.Children;
                    fApplyButton61E2Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fApplyButton61E2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"61E2369B-F53B-4662-A361-B3034C4EFF67");
                    fApplyButton61E2Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Apply");
                }

                return fApplyButton61E2Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ApplyTextBlockDup1Text
        {
            get
            {
                if (null == fApplyTextBlockDup1Text)
                {
                    fApplyTextBlockDup1Text = new Text("ApplyTextBlockDup1Text", ApplyButton61E2Button);
                    fApplyTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fApplyTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fApplyTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Apply");
                }

                return fApplyTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButton65CButton
        {
            get
            {
                if (null == fCancelButton65CButton)
                {
                    fCancelButton65CButton = new Button("CancelButton65CButton", HPDigitalSendinWindow);
                    fCancelButton65CButton.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton65CButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButton65CButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"65C76204-7AB5-4681-B7FD-2D8F02DA6D4B");
                    fCancelButton65CButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButton65CButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CancelTextBlockDup1Text
        {
            get
            {
                if (null == fCancelTextBlockDup1Text)
                {
                    fCancelTextBlockDup1Text = new Text("CancelTextBlockDup1Text", CancelButton65CButton);
                    fCancelTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fCancelTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCancelTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button OKButtonCC2EF49Button
        {
            get
            {
                if (null == fOKButtonCC2EF49Button)
                {
                    fOKButtonCC2EF49Button = new Button("OKButton", HPDigitalSendinWindow);
                    fOKButtonCC2EF49Button.UIMap.Scope = UIASeachScope.Children;
                    fOKButtonCC2EF49Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButtonCC2EF49Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"CC2EF491-0BD1-4ac5-9D00-AA61A9D6BA0C");
                    fOKButtonCC2EF49Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButtonCC2EF49Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OKTextBlockDup1Text
        {
            get
            {
                if (null == fOKTextBlockDup1Text)
                {
                    fOKTextBlockDup1Text = new Text("OKTextBlockDup1Text", OKButtonCC2EF49Button);
                    fOKTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fOKTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOKTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Tab TabControlec0fdTab
        {
            get
            {
                if (null == fTabControlec0fdTab)
                {
                    fTabControlec0fdTab = new Tab("TabControlec0fdTab", HPDigitalSendinWindow);
                    fTabControlec0fdTab.UIMap.Scope = UIASeachScope.Children;
                    fTabControlec0fdTab.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabControl");
                    fTabControlec0fdTab.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ec0fd6cd-2ab8-482f-96a5-d1fa158f38d1");
                }

                return fTabControlec0fdTab;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup10TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup10TabItem)
                {
                    fSystemWindowsCoDup10TabItem = new TabItem("SystemWindowsCoDup10TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup10TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup10TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup10TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1e2be878-0c03-4404-988c-54d0df925f0f");
                    fSystemWindowsCoDup10TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup10TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GeneralTextmGenDup1Text
        {
            get
            {
                if (null == fGeneralTextmGenDup1Text)
                {
                    fGeneralTextmGenDup1Text = new Text("GeneralTextmGenDup1Text", SystemWindowsCoDup10TabItem);
                    fGeneralTextmGenDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fGeneralTextmGenDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fGeneralTextmGenDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mGeneralTabLabel");
                    fGeneralTextmGenDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"General");
                }

                return fGeneralTextmGenDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GeneralTextBlocDup1Text
        {
            get
            {
                if (null == fGeneralTextBlocDup1Text)
                {
                    fGeneralTextBlocDup1Text = new Text("GeneralTextBlocDup1Text", GeneralTextmGenDup1Text);
                    fGeneralTextBlocDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fGeneralTextBlocDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fGeneralTextBlocDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"General");
                }

                return fGeneralTextBlocDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text933345b04e3Text
        {
            get
            {
                if (null == fText933345b04e3Text)
                {
                    fText933345b04e3Text = new Text("Text933345b04e3Text", SystemWindowsCoDup10TabItem);
                    fText933345b04e3Text.UIMap.Scope = UIASeachScope.Children;
                    fText933345b04e3Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText933345b04e3Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"933345b0-4e39-44d3-a511-0077f3176ca4");
                    fText933345b04e3Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText933345b04e3Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text786caf67344Text
        {
            get
            {
                if (null == fText786caf67344Text)
                {
                    fText786caf67344Text = new Text("Text786caf67344Text", SystemWindowsCoDup10TabItem);
                    fText786caf67344Text.UIMap.Scope = UIASeachScope.Children;
                    fText786caf67344Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText786caf67344Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"786caf67-344f-4ddc-83a5-b9431fb36731");
                    fText786caf67344Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText786caf67344Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup11TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup11TabItem)
                {
                    fSystemWindowsCoDup11TabItem = new TabItem("SystemWindowsCoDup11TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup11TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup11TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup11TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4e90d18a-f33c-43c0-8505-08f4a17169b5");
                    fSystemWindowsCoDup11TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup11TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AuthenticationTDup2Text
        {
            get
            {
                if (null == fAuthenticationTDup2Text)
                {
                    fAuthenticationTDup2Text = new Text("AuthenticationTDup2Text", SystemWindowsCoDup11TabItem);
                    fAuthenticationTDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fAuthenticationTDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fAuthenticationTDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mAuthTabLabel");
                    fAuthenticationTDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Authentication");
                }

                return fAuthenticationTDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AuthenticationTDup3Text
        {
            get
            {
                if (null == fAuthenticationTDup3Text)
                {
                    fAuthenticationTDup3Text = new Text("AuthenticationTDup3Text", AuthenticationTDup2Text);
                    fAuthenticationTDup3Text.UIMap.Scope = UIASeachScope.Children;
                    fAuthenticationTDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAuthenticationTDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Authentication");
                }

                return fAuthenticationTDup3Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text31EC91730B9Text
        {
            get
            {
                if (null == fText31EC91730B9Text)
                {
                    fText31EC91730B9Text = new Text("Text31EC91730B9Text", SystemWindowsCoDup11TabItem);
                    fText31EC91730B9Text.UIMap.Scope = UIASeachScope.Children;
                    fText31EC91730B9Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText31EC91730B9Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"31EC9173-0B98-4d46-BC99-7DF8EA2BE02F");
                    fText31EC91730B9Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText31EC91730B9Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextA479C271445Text
        {
            get
            {
                if (null == fTextA479C271445Text)
                {
                    fTextA479C271445Text = new Text("TextA479C271445Text", SystemWindowsCoDup11TabItem);
                    fTextA479C271445Text.UIMap.Scope = UIASeachScope.Children;
                    fTextA479C271445Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fTextA479C271445Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"A479C271-445D-43f1-864D-7503428703E4");
                    fTextA479C271445Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fTextA479C271445Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup12TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup12TabItem)
                {
                    fSystemWindowsCoDup12TabItem = new TabItem("SystemWindowsCoDup12TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup12TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup12TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup12TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"33A07ED3-E1EE-411e-B583-7D0A3374100F");
                    fSystemWindowsCoDup12TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup12TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EmailTextmEmailText
        {
            get
            {
                if (null == fEmailTextmEmailText)
                {
                    fEmailTextmEmailText = new Text("EmailTextmEmailText", SystemWindowsCoDup12TabItem);
                    fEmailTextmEmailText.UIMap.Scope = UIASeachScope.Children;
                    fEmailTextmEmailText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fEmailTextmEmailText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mEmailTabLabel");
                    fEmailTextmEmailText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"E-mail");
                }

                return fEmailTextmEmailText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EmailTextBlockText
        {
            get
            {
                if (null == fEmailTextBlockText)
                {
                    fEmailTextBlockText = new Text("EmailTextBlockText", EmailTextmEmailText);
                    fEmailTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fEmailTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEmailTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"E-mail");
                }

                return fEmailTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text32de714a8bdText
        {
            get
            {
                if (null == fText32de714a8bdText)
                {
                    fText32de714a8bdText = new Text("Text32de714a8bdText", SystemWindowsCoDup12TabItem);
                    fText32de714a8bdText.UIMap.Scope = UIASeachScope.Children;
                    fText32de714a8bdText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText32de714a8bdText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"32de714a-8bda-4f11-bf20-b9a56b5f18bc");
                    fText32de714a8bdText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText32de714a8bdText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text3b2a8761f4fText
        {
            get
            {
                if (null == fText3b2a8761f4fText)
                {
                    fText3b2a8761f4fText = new Text("Text3b2a8761f4fText", SystemWindowsCoDup12TabItem);
                    fText3b2a8761f4fText.UIMap.Scope = UIASeachScope.Children;
                    fText3b2a8761f4fText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText3b2a8761f4fText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3b2a8761-f4f6-41b1-b08c-9c33744bdc43");
                    fText3b2a8761f4fText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText3b2a8761f4fText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextBlockDup1Text
        {
            get
            {
                if (null == fTextBlockDup1Text)
                {
                    fTextBlockDup1Text = new Text("TextBlockDup1Text", Text3b2a8761f4fText);
                    fTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup13TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup13TabItem)
                {
                    fSystemWindowsCoDup13TabItem = new TabItem("SystemWindowsCoDup13TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup13TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup13TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup13TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4f116988-2b22-473f-bca3-094589a44954");
                    fSystemWindowsCoDup13TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup13TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxTextmFaxTabLDup1Text
        {
            get
            {
                if (null == fFaxTextmFaxTabLDup1Text)
                {
                    fFaxTextmFaxTabLDup1Text = new Text("FaxTextmFaxTabLDup1Text", SystemWindowsCoDup13TabItem);
                    fFaxTextmFaxTabLDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fFaxTextmFaxTabLDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fFaxTextmFaxTabLDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mFaxTabLabel");
                    fFaxTextmFaxTabLDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax");
                }

                return fFaxTextmFaxTabLDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxTextBlockDup1Text
        {
            get
            {
                if (null == fFaxTextBlockDup1Text)
                {
                    fFaxTextBlockDup1Text = new Text("FaxTextBlockDup1Text", FaxTextmFaxTabLDup1Text);
                    fFaxTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fFaxTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax");
                }

                return fFaxTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextD1ED4F16F38Text
        {
            get
            {
                if (null == fTextD1ED4F16F38Text)
                {
                    fTextD1ED4F16F38Text = new Text("TextD1ED4F16F38Text", SystemWindowsCoDup13TabItem);
                    fTextD1ED4F16F38Text.UIMap.Scope = UIASeachScope.Children;
                    fTextD1ED4F16F38Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fTextD1ED4F16F38Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"D1ED4F16-F389-4dfd-A884-D258EDB48C11");
                    fTextD1ED4F16F38Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fTextD1ED4F16F38Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text7DDE04FD251Text
        {
            get
            {
                if (null == fText7DDE04FD251Text)
                {
                    fText7DDE04FD251Text = new Text("Text7DDE04FD251Text", SystemWindowsCoDup13TabItem);
                    fText7DDE04FD251Text.UIMap.Scope = UIASeachScope.Children;
                    fText7DDE04FD251Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText7DDE04FD251Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7DDE04FD-2519-44c2-A212-67B0838E1C91");
                    fText7DDE04FD251Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText7DDE04FD251Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup14TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup14TabItem)
                {
                    fSystemWindowsCoDup14TabItem = new TabItem("SystemWindowsCoDup14TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup14TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup14TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup14TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ff96a045-6e12-4ce3-ba85-b65d16c39ffb");
                    fSystemWindowsCoDup14TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup14TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SendtoFolderTexDup2Text
        {
            get
            {
                if (null == fSendtoFolderTexDup2Text)
                {
                    fSendtoFolderTexDup2Text = new Text("SendtoFolderTexDup2Text", SystemWindowsCoDup14TabItem);
                    fSendtoFolderTexDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fSendtoFolderTexDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fSendtoFolderTexDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mFolderTabLabel");
                    fSendtoFolderTexDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send to Folder");
                }

                return fSendtoFolderTexDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SendtoFolderTexDup3Text
        {
            get
            {
                if (null == fSendtoFolderTexDup3Text)
                {
                    fSendtoFolderTexDup3Text = new Text("SendtoFolderTexDup3Text", SendtoFolderTexDup2Text);
                    fSendtoFolderTexDup3Text.UIMap.Scope = UIASeachScope.Children;
                    fSendtoFolderTexDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSendtoFolderTexDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send to Folder");
                }

                return fSendtoFolderTexDup3Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text7a57f43ecb1Dup1Text
        {
            get
            {
                if (null == fText7a57f43ecb1Dup1Text)
                {
                    fText7a57f43ecb1Dup1Text = new Text("Text7a57f43ecb1Dup1Text", SystemWindowsCoDup14TabItem);
                    fText7a57f43ecb1Dup1Text.UIMap.Scope = UIASeachScope.Children;
                    fText7a57f43ecb1Dup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText7a57f43ecb1Dup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7a57f43e-cb18-48d3-ac92-9dad7b3dc47e");
                    fText7a57f43ecb1Dup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText7a57f43ecb1Dup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text654b650dd19Dup1Text
        {
            get
            {
                if (null == fText654b650dd19Dup1Text)
                {
                    fText654b650dd19Dup1Text = new Text("Text654b650dd19Dup1Text", SystemWindowsCoDup14TabItem);
                    fText654b650dd19Dup1Text.UIMap.Scope = UIASeachScope.Children;
                    fText654b650dd19Dup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText654b650dd19Dup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"654b650d-d19f-413b-aaea-ed4ce008fdd5");
                    fText654b650dd19Dup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText654b650dd19Dup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup15TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup15TabItem)
                {
                    fSystemWindowsCoDup15TabItem = new TabItem("SystemWindowsCoDup15TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup15TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup15TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup15TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"38feb495-2893-4d8b-8961-31ebc2a3bd56");
                    fSystemWindowsCoDup15TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup15TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text WorkflowsTextmWText
        {
            get
            {
                if (null == fWorkflowsTextmWText)
                {
                    fWorkflowsTextmWText = new Text("WorkflowsTextmWText", SystemWindowsCoDup15TabItem);
                    fWorkflowsTextmWText.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowsTextmWText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fWorkflowsTextmWText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mWorkflowsTabLabel");
                    fWorkflowsTextmWText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflows");
                }

                return fWorkflowsTextmWText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text WorkflowsTextBlText
        {
            get
            {
                if (null == fWorkflowsTextBlText)
                {
                    fWorkflowsTextBlText = new Text("WorkflowsTextBlText", WorkflowsTextmWText);
                    fWorkflowsTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowsTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fWorkflowsTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflows");
                }

                return fWorkflowsTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text22D9C34E84CText
        {
            get
            {
                if (null == fText22D9C34E84CText)
                {
                    fText22D9C34E84CText = new Text("Text22D9C34E84CText", SystemWindowsCoDup15TabItem);
                    fText22D9C34E84CText.UIMap.Scope = UIASeachScope.Children;
                    fText22D9C34E84CText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText22D9C34E84CText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"22D9C34E-84C8-4995-AC9E-5B46F8284284");
                    fText22D9C34E84CText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText22D9C34E84CText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextC8D15BD39C8Text
        {
            get
            {
                if (null == fTextC8D15BD39C8Text)
                {
                    fTextC8D15BD39C8Text = new Text("TextC8D15BD39C8Text", SystemWindowsCoDup15TabItem);
                    fTextC8D15BD39C8Text.UIMap.Scope = UIASeachScope.Children;
                    fTextC8D15BD39C8Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fTextC8D15BD39C8Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"C8D15BD3-9C8D-484c-A5E2-309CA8AA6C56");
                    fTextC8D15BD39C8Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fTextC8D15BD39C8Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup16TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup16TabItem)
                {
                    fSystemWindowsCoDup16TabItem = new TabItem("SystemWindowsCoDup16TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup16TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup16TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup16TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"b8c06323-208e-4239-a523-a025661e0eab");
                    fSystemWindowsCoDup16TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup16TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddressingTextmDup1Text
        {
            get
            {
                if (null == fAddressingTextmDup1Text)
                {
                    fAddressingTextmDup1Text = new Text("AddressingTextmDup1Text", SystemWindowsCoDup16TabItem);
                    fAddressingTextmDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fAddressingTextmDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fAddressingTextmDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mAddressingTabLabel");
                    fAddressingTextmDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Addressing");
                }

                return fAddressingTextmDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddressingTextBDup1Text
        {
            get
            {
                if (null == fAddressingTextBDup1Text)
                {
                    fAddressingTextBDup1Text = new Text("AddressingTextBDup1Text", AddressingTextmDup1Text);
                    fAddressingTextBDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fAddressingTextBDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddressingTextBDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Addressing");
                }

                return fAddressingTextBDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text47EB5CBA4D1Text
        {
            get
            {
                if (null == fText47EB5CBA4D1Text)
                {
                    fText47EB5CBA4D1Text = new Text("Text47EB5CBA4D1Text", SystemWindowsCoDup16TabItem);
                    fText47EB5CBA4D1Text.UIMap.Scope = UIASeachScope.Children;
                    fText47EB5CBA4D1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText47EB5CBA4D1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"47EB5CBA-4D1C-4eee-AD64-E26BDA31A3AC");
                    fText47EB5CBA4D1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText47EB5CBA4D1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text0757E148179Text
        {
            get
            {
                if (null == fText0757E148179Text)
                {
                    fText0757E148179Text = new Text("Text0757E148179Text", SystemWindowsCoDup16TabItem);
                    fText0757E148179Text.UIMap.Scope = UIASeachScope.Children;
                    fText0757E148179Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText0757E148179Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"0757E148-1794-4a5d-B378-6BE8049F65E1");
                    fText0757E148179Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText0757E148179Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem DeviceConfiguraTabItem
        {
            get
            {
                if (null == fDeviceConfiguraTabItem)
                {
                    fDeviceConfiguraTabItem = new TabItem("DeviceConfiguraTabItem", TabControlec0fdTab);
                    fDeviceConfiguraTabItem.UIMap.Scope = UIASeachScope.Children;
                    fDeviceConfiguraTabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fDeviceConfiguraTabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6DF1E016-517F-40e4-A63E-CD48D560192F");
                    fDeviceConfiguraTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device Configuration");
                }

                return fDeviceConfiguraTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DeviceConfiguraText
        {
            get
            {
                if (null == fDeviceConfiguraText)
                {
                    fDeviceConfiguraText = new Text("DeviceConfiguraText", DeviceConfiguraTabItem);
                    fDeviceConfiguraText.UIMap.Scope = UIASeachScope.Children;
                    fDeviceConfiguraText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDeviceConfiguraText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device Configuration");
                }

                return fDeviceConfiguraText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Custom ServiceConfigurCustom
        {
            get
            {
                if (null == fServiceConfigurCustom)
                {
                    fServiceConfigurCustom = new Custom("ServiceConfigurCustom", DeviceConfiguraTabItem);
                    fServiceConfigurCustom.UIMap.Scope = UIASeachScope.Children;
                    fServiceConfigurCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ServiceConfigurationDeviceConfigTab");
                    fServiceConfigurCustom.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mServiceDeviceTab");
                }

                return fServiceConfigurCustom;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GroupListText
        {
            get
            {
                if (null == fGroupListText)
                {
                    fGroupListText = new Text("GroupListText", ServiceConfigurCustom);
                    fGroupListText.UIMap.Scope = UIASeachScope.Children;
                    fGroupListText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fGroupListText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Group List");
                }

                return fGroupListText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GroupListTextBlText
        {
            get
            {
                if (null == fGroupListTextBlText)
                {
                    fGroupListTextBlText = new Text("GroupListTextBlText", GroupListText);
                    fGroupListTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fGroupListTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fGroupListTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Group List");
                }

                return fGroupListTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DeviceGroupsText
        {
            get
            {
                if (null == fDeviceGroupsText)
                {
                    fDeviceGroupsText = new Text("DeviceGroupsText", ServiceConfigurCustom);
                    fDeviceGroupsText.UIMap.Scope = UIASeachScope.Children;
                    fDeviceGroupsText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fDeviceGroupsText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device Groups");
                }

                return fDeviceGroupsText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DeviceGroupsTexText
        {
            get
            {
                if (null == fDeviceGroupsTexText)
                {
                    fDeviceGroupsTexText = new Text("DeviceGroupsTexText", DeviceGroupsText);
                    fDeviceGroupsTexText.UIMap.Scope = UIASeachScope.Children;
                    fDeviceGroupsTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDeviceGroupsTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device Groups");
                }

                return fDeviceGroupsTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Tree TreeView1416BDETree
        {
            get
            {
                if (null == fTreeView1416BDETree)
                {
                    fTreeView1416BDETree = new Tree("TreeView1416BDETree", ServiceConfigurCustom);
                    fTreeView1416BDETree.UIMap.Scope = UIASeachScope.Children;
                    fTreeView1416BDETree.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TreeView");
                    fTreeView1416BDETree.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1416BDED-715B-43e3-AAE3-D7E3FE37F0F0");
                }

                return fTreeView1416BDETree;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TreeItem AllDevicesTreeVTreeItem
        {
            get
            {
                if (null == fAllDevicesTreeVTreeItem)
                {
                    fAllDevicesTreeVTreeItem = new TreeItem("AllDevicesTreeVTreeItem", TreeView1416BDETree);
                    fAllDevicesTreeVTreeItem.UIMap.Scope = UIASeachScope.Children;
                    fAllDevicesTreeVTreeItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TreeViewItem");
                    fAllDevicesTreeVTreeItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"All Devices");
                }

                return fAllDevicesTreeVTreeItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ButtonExpanderButton
        {
            get
            {
                if (null == fButtonExpanderButton)
                {
                    fButtonExpanderButton = new Button("ButtonExpanderButton", AllDevicesTreeVTreeItem);
                    fButtonExpanderButton.UIMap.Scope = UIASeachScope.Children;
                    fButtonExpanderButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButtonExpanderButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Expander");
                }

                return fButtonExpanderButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AllDevicesTextBText
        {
            get
            {
                if (null == fAllDevicesTextBText)
                {
                    fAllDevicesTextBText = new Text("AllDevicesTextBText", AllDevicesTreeVTreeItem);
                    fAllDevicesTextBText.UIMap.Scope = UIASeachScope.Children;
                    fAllDevicesTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAllDevicesTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"All Devices");
                }

                return fAllDevicesTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button AddGroupButtonFButton
        {
            get
            {
                if (null == fAddGroupButtonFButton)
                {
                    fAddGroupButtonFButton = new Button("AddGroupButtonFButton", ServiceConfigurCustom);
                    fAddGroupButtonFButton.UIMap.Scope = UIASeachScope.Children;
                    fAddGroupButtonFButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fAddGroupButtonFButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"FF3CA114-616C-4372-9E90-DEBFDDC95553");
                    fAddGroupButtonFButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Group...");
                }

                return fAddGroupButtonFButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddGroupTextBloText
        {
            get
            {
                if (null == fAddGroupTextBloText)
                {
                    fAddGroupTextBloText = new Text("AddGroupTextBloText", AddGroupButtonFButton);
                    fAddGroupTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fAddGroupTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddGroupTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Group...");
                }

                return fAddGroupTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RemoveGroupButtButton
        {
            get
            {
                if (null == fRemoveGroupButtButton)
                {
                    fRemoveGroupButtButton = new Button("RemoveGroupButtButton", ServiceConfigurCustom);
                    fRemoveGroupButtButton.UIMap.Scope = UIASeachScope.Children;
                    fRemoveGroupButtButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fRemoveGroupButtButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"254907B3-979B-4706-8099-4EB37924DFB2");
                    fRemoveGroupButtButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Remove Group...");
                }

                return fRemoveGroupButtButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RemoveGroupTextText
        {
            get
            {
                if (null == fRemoveGroupTextText)
                {
                    fRemoveGroupTextText = new Text("RemoveGroupTextText", RemoveGroupButtButton);
                    fRemoveGroupTextText.UIMap.Scope = UIASeachScope.Children;
                    fRemoveGroupTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRemoveGroupTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Remove Group...");
                }

                return fRemoveGroupTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RenameButton261Button
        {
            get
            {
                if (null == fRenameButton261Button)
                {
                    fRenameButton261Button = new Button("RenameButton261Button", ServiceConfigurCustom);
                    fRenameButton261Button.UIMap.Scope = UIASeachScope.Children;
                    fRenameButton261Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fRenameButton261Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2619DFAD-0185-42fb-A689-994ED4ACC316");
                    fRenameButton261Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Rename");
                }

                return fRenameButton261Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RenameTextBlockText
        {
            get
            {
                if (null == fRenameTextBlockText)
                {
                    fRenameTextBlockText = new Text("RenameTextBlockText", RenameButton261Button);
                    fRenameTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fRenameTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRenameTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Rename");
                }

                return fRenameTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb GridSplitterThumb
        {
            get
            {
                if (null == fGridSplitterThumb)
                {
                    fGridSplitterThumb = new Thumb("GridSplitterThumb", ServiceConfigurCustom);
                    fGridSplitterThumb.UIMap.Scope = UIASeachScope.Children;
                    fGridSplitterThumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridSplitter");
                }

                return fGridSplitterThumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DeviceListText
        {
            get
            {
                if (null == fDeviceListText)
                {
                    fDeviceListText = new Text("DeviceListText", ServiceConfigurCustom);
                    fDeviceListText.UIMap.Scope = UIASeachScope.Children;
                    fDeviceListText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fDeviceListText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device List");
                }

                return fDeviceListText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DeviceListTextBText
        {
            get
            {
                if (null == fDeviceListTextBText)
                {
                    fDeviceListTextBText = new Text("DeviceListTextBText", DeviceListText);
                    fDeviceListTextBText.UIMap.Scope = UIASeachScope.Children;
                    fDeviceListTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDeviceListTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device List");
                }

                return fDeviceListTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public DataGrid ListView141cb8bDataGrid
        {
            get
            {
                if (null == fListView141cb8bDataGrid)
                {
                    fListView141cb8bDataGrid = new DataGrid("ListView141cb8bDataGrid", ServiceConfigurCustom);
                    fListView141cb8bDataGrid.UIMap.Scope = UIASeachScope.Children;
                    fListView141cb8bDataGrid.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListView");
                    fListView141cb8bDataGrid.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"141cb8be-89c3-4b41-80ca-be09bdf636f2");
                }

                return fListView141cb8bDataGrid;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Header GridViewHeaderRDup3Header
        {
            get
            {
                if (null == fGridViewHeaderRDup3Header)
                {
                    fGridViewHeaderRDup3Header = new Header("GridViewHeaderRDup3Header", ListView141cb8bDataGrid);
                    fGridViewHeaderRDup3Header.UIMap.Scope = UIASeachScope.Children;
                    fGridViewHeaderRDup3Header.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewHeaderRowPresenter");
                }

                return fGridViewHeaderRDup3Header;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem StatusGridViewCHeaderItem
        {
            get
            {
                if (null == fStatusGridViewCHeaderItem)
                {
                    fStatusGridViewCHeaderItem = new HeaderItem("StatusGridViewCHeaderItem", GridViewHeaderRDup3Header);
                    fStatusGridViewCHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fStatusGridViewCHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fStatusGridViewCHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"84BDE37C-126B-473a-923B-180DBBB478C6");
                    fStatusGridViewCHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Status");
                }

                return fStatusGridViewCHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text StatusTextBlockText
        {
            get
            {
                if (null == fStatusTextBlockText)
                {
                    fStatusTextBlockText = new Text("StatusTextBlockText", StatusGridViewCHeaderItem);
                    fStatusTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fStatusTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fStatusTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Status");
                }

                return fStatusTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup0Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup0Thumb)
                {
                    fThumbPARTHeadeDup0Thumb = new Thumb("ThumbPARTHeadeDup0Thumb", StatusGridViewCHeaderItem);
                    fThumbPARTHeadeDup0Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup0Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup0Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup0Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem NameGridViewColHeaderItem
        {
            get
            {
                if (null == fNameGridViewColHeaderItem)
                {
                    fNameGridViewColHeaderItem = new HeaderItem("NameGridViewColHeaderItem", GridViewHeaderRDup3Header);
                    fNameGridViewColHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fNameGridViewColHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fNameGridViewColHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"507D57C0-BC09-4a0a-8D17-F2A9117ADCE5");
                    fNameGridViewColHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Name");
                }

                return fNameGridViewColHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NameTextBlockText
        {
            get
            {
                if (null == fNameTextBlockText)
                {
                    fNameTextBlockText = new Text("NameTextBlockText", NameGridViewColHeaderItem);
                    fNameTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fNameTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fNameTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Name");
                }

                return fNameTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup1Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup1Thumb)
                {
                    fThumbPARTHeadeDup1Thumb = new Thumb("ThumbPARTHeadeDup1Thumb", NameGridViewColHeaderItem);
                    fThumbPARTHeadeDup1Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup1Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup1Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup1Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem GridViewColumnHDup0HeaderItem
        {
            get
            {
                if (null == fGridViewColumnHDup0HeaderItem)
                {
                    fGridViewColumnHDup0HeaderItem = new HeaderItem("GridViewColumnHDup0HeaderItem", GridViewHeaderRDup3Header);
                    fGridViewColumnHDup0HeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fGridViewColumnHDup0HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fGridViewColumnHDup0HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"458F7960-4394-4579-919F-D58D5043C703");
                }

                return fGridViewColumnHDup0HeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup0Image
        {
            get
            {
                if (null == fImageDup0Image)
                {
                    fImageDup0Image = new Image("ImageDup0Image", GridViewColumnHDup0HeaderItem);
                    fImageDup0Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup0Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup0Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup2Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup2Thumb)
                {
                    fThumbPARTHeadeDup2Thumb = new Thumb("ThumbPARTHeadeDup2Thumb", GridViewColumnHDup0HeaderItem);
                    fThumbPARTHeadeDup2Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup2Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup2Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup2Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem GridViewColumnHDup1HeaderItem
        {
            get
            {
                if (null == fGridViewColumnHDup1HeaderItem)
                {
                    fGridViewColumnHDup1HeaderItem = new HeaderItem("GridViewColumnHDup1HeaderItem", GridViewHeaderRDup3Header);
                    fGridViewColumnHDup1HeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fGridViewColumnHDup1HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fGridViewColumnHDup1HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"CD97A6CC-D4F4-4ddb-A3BB-7FF26B2222FF");
                }

                return fGridViewColumnHDup1HeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup1Image
        {
            get
            {
                if (null == fImageDup1Image)
                {
                    fImageDup1Image = new Image("ImageDup1Image", GridViewColumnHDup1HeaderItem);
                    fImageDup1Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup1Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup1Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup3Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup3Thumb)
                {
                    fThumbPARTHeadeDup3Thumb = new Thumb("ThumbPARTHeadeDup3Thumb", GridViewColumnHDup1HeaderItem);
                    fThumbPARTHeadeDup3Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup3Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup3Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup3Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem GridViewColumnHDup2HeaderItem
        {
            get
            {
                if (null == fGridViewColumnHDup2HeaderItem)
                {
                    fGridViewColumnHDup2HeaderItem = new HeaderItem("GridViewColumnHDup2HeaderItem", GridViewHeaderRDup3Header);
                    fGridViewColumnHDup2HeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fGridViewColumnHDup2HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fGridViewColumnHDup2HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"008BEEE0-3AE1-47be-BD91-66E124BE04A5");
                }

                return fGridViewColumnHDup2HeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup2Image
        {
            get
            {
                if (null == fImageDup2Image)
                {
                    fImageDup2Image = new Image("ImageDup2Image", GridViewColumnHDup2HeaderItem);
                    fImageDup2Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup2Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup2Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup4Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup4Thumb)
                {
                    fThumbPARTHeadeDup4Thumb = new Thumb("ThumbPARTHeadeDup4Thumb", GridViewColumnHDup2HeaderItem);
                    fThumbPARTHeadeDup4Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup4Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup4Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup4Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem GridViewColumnHDup3HeaderItem
        {
            get
            {
                if (null == fGridViewColumnHDup3HeaderItem)
                {
                    fGridViewColumnHDup3HeaderItem = new HeaderItem("GridViewColumnHDup3HeaderItem", GridViewHeaderRDup3Header);
                    fGridViewColumnHDup3HeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fGridViewColumnHDup3HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fGridViewColumnHDup3HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4DC0435C-FF08-4325-A9AC-115D1891ABA6");
                }

                return fGridViewColumnHDup3HeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup3Image
        {
            get
            {
                if (null == fImageDup3Image)
                {
                    fImageDup3Image = new Image("ImageDup3Image", GridViewColumnHDup3HeaderItem);
                    fImageDup3Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup3Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup3Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup5Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup5Thumb)
                {
                    fThumbPARTHeadeDup5Thumb = new Thumb("ThumbPARTHeadeDup5Thumb", GridViewColumnHDup3HeaderItem);
                    fThumbPARTHeadeDup5Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup5Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup5Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup5Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem GridViewColumnHDup4HeaderItem
        {
            get
            {
                if (null == fGridViewColumnHDup4HeaderItem)
                {
                    fGridViewColumnHDup4HeaderItem = new HeaderItem("GridViewColumnHDup4HeaderItem", GridViewHeaderRDup3Header);
                    fGridViewColumnHDup4HeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fGridViewColumnHDup4HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fGridViewColumnHDup4HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"BE6ECE9F-4708-4266-8106-AE6D598B0396");
                }

                return fGridViewColumnHDup4HeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup4Image
        {
            get
            {
                if (null == fImageDup4Image)
                {
                    fImageDup4Image = new Image("ImageDup4Image", GridViewColumnHDup4HeaderItem);
                    fImageDup4Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup4Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup4Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup6Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup6Thumb)
                {
                    fThumbPARTHeadeDup6Thumb = new Thumb("ThumbPARTHeadeDup6Thumb", GridViewColumnHDup4HeaderItem);
                    fThumbPARTHeadeDup6Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup6Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup6Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup6Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem GridViewColumnHDup5HeaderItem
        {
            get
            {
                if (null == fGridViewColumnHDup5HeaderItem)
                {
                    fGridViewColumnHDup5HeaderItem = new HeaderItem("GridViewColumnHDup5HeaderItem", GridViewHeaderRDup3Header);
                    fGridViewColumnHDup5HeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fGridViewColumnHDup5HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fGridViewColumnHDup5HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5C264E70-DAEF-44F3-9DE9-9824BC0B9ECF");
                }

                return fGridViewColumnHDup5HeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup5Image
        {
            get
            {
                if (null == fImageDup5Image)
                {
                    fImageDup5Image = new Image("ImageDup5Image", GridViewColumnHDup5HeaderItem);
                    fImageDup5Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup5Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup5Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup7Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup7Thumb)
                {
                    fThumbPARTHeadeDup7Thumb = new Thumb("ThumbPARTHeadeDup7Thumb", GridViewColumnHDup5HeaderItem);
                    fThumbPARTHeadeDup7Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup7Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup7Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup7Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem ModelGridViewCoHeaderItem
        {
            get
            {
                if (null == fModelGridViewCoHeaderItem)
                {
                    fModelGridViewCoHeaderItem = new HeaderItem("ModelGridViewCoHeaderItem", GridViewHeaderRDup3Header);
                    fModelGridViewCoHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fModelGridViewCoHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fModelGridViewCoHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"805FD78E-D6A4-4559-939B-ECDD285AE6D7");
                    fModelGridViewCoHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Model");
                }

                return fModelGridViewCoHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ModelTextBlockText
        {
            get
            {
                if (null == fModelTextBlockText)
                {
                    fModelTextBlockText = new Text("ModelTextBlockText", ModelGridViewCoHeaderItem);
                    fModelTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fModelTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fModelTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Model");
                }

                return fModelTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup8Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup8Thumb)
                {
                    fThumbPARTHeadeDup8Thumb = new Thumb("ThumbPARTHeadeDup8Thumb", ModelGridViewCoHeaderItem);
                    fThumbPARTHeadeDup8Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup8Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup8Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup8Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem IPAddressGridViHeaderItem
        {
            get
            {
                if (null == fIPAddressGridViHeaderItem)
                {
                    fIPAddressGridViHeaderItem = new HeaderItem("IPAddressGridViHeaderItem", GridViewHeaderRDup3Header);
                    fIPAddressGridViHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fIPAddressGridViHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fIPAddressGridViHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"70E1D5F4-0DA5-4e87-A451-28399734B74C");
                    fIPAddressGridViHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"IP Address");
                }

                return fIPAddressGridViHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text IPAddressTextBlText
        {
            get
            {
                if (null == fIPAddressTextBlText)
                {
                    fIPAddressTextBlText = new Text("IPAddressTextBlText", IPAddressGridViHeaderItem);
                    fIPAddressTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fIPAddressTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fIPAddressTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"IP Address");
                }

                return fIPAddressTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup9Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup9Thumb)
                {
                    fThumbPARTHeadeDup9Thumb = new Thumb("ThumbPARTHeadeDup9Thumb", IPAddressGridViHeaderItem);
                    fThumbPARTHeadeDup9Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup9Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup9Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup9Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem HostnameGridVieHeaderItem
        {
            get
            {
                if (null == fHostnameGridVieHeaderItem)
                {
                    fHostnameGridVieHeaderItem = new HeaderItem("HostnameGridVieHeaderItem", GridViewHeaderRDup3Header);
                    fHostnameGridVieHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fHostnameGridVieHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fHostnameGridVieHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"82BE5D16-D370-4519-8FC4-0F517E12AFDF");
                    fHostnameGridVieHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Hostname");
                }

                return fHostnameGridVieHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HostnameTextBloText
        {
            get
            {
                if (null == fHostnameTextBloText)
                {
                    fHostnameTextBloText = new Text("HostnameTextBloText", HostnameGridVieHeaderItem);
                    fHostnameTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fHostnameTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHostnameTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Hostname");
                }

                return fHostnameTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup10Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup10Thumb)
                {
                    fThumbPARTHeadeDup10Thumb = new Thumb("ThumbPARTHeadeDup10Thumb", HostnameGridVieHeaderItem);
                    fThumbPARTHeadeDup10Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup10Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup10Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup10Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem DescriptionGridHeaderItem
        {
            get
            {
                if (null == fDescriptionGridHeaderItem)
                {
                    fDescriptionGridHeaderItem = new HeaderItem("DescriptionGridHeaderItem", GridViewHeaderRDup3Header);
                    fDescriptionGridHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fDescriptionGridHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fDescriptionGridHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"26A46CB8-53AC-446f-8012-A92323091104");
                    fDescriptionGridHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Description");
                }

                return fDescriptionGridHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DescriptionTextText
        {
            get
            {
                if (null == fDescriptionTextText)
                {
                    fDescriptionTextText = new Text("DescriptionTextText", DescriptionGridHeaderItem);
                    fDescriptionTextText.UIMap.Scope = UIASeachScope.Children;
                    fDescriptionTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDescriptionTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Description");
                }

                return fDescriptionTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup11Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup11Thumb)
                {
                    fThumbPARTHeadeDup11Thumb = new Thumb("ThumbPARTHeadeDup11Thumb", DescriptionGridHeaderItem);
                    fThumbPARTHeadeDup11Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup11Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup11Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup11Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem FirmwareGridVieHeaderItem
        {
            get
            {
                if (null == fFirmwareGridVieHeaderItem)
                {
                    fFirmwareGridVieHeaderItem = new HeaderItem("FirmwareGridVieHeaderItem", GridViewHeaderRDup3Header);
                    fFirmwareGridVieHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fFirmwareGridVieHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fFirmwareGridVieHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2A8C9E5A-0A8D-48DD-9D15-42B45EB4177B");
                    fFirmwareGridVieHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Firmware");
                }

                return fFirmwareGridVieHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FirmwareTextBloText
        {
            get
            {
                if (null == fFirmwareTextBloText)
                {
                    fFirmwareTextBloText = new Text("FirmwareTextBloText", FirmwareGridVieHeaderItem);
                    fFirmwareTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fFirmwareTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFirmwareTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Firmware");
                }

                return fFirmwareTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup12Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup12Thumb)
                {
                    fThumbPARTHeadeDup12Thumb = new Thumb("ThumbPARTHeadeDup12Thumb", FirmwareGridVieHeaderItem);
                    fThumbPARTHeadeDup12Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup12Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup12Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup12Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public DataItem bound101112170eDataItem
        {
            get
            {
                if (null == fbound101112170eDataItem)
                {
                    fbound101112170eDataItem = new DataItem("bound101112170eDataItem", ListView141cb8bDataGrid);
                    fbound101112170eDataItem.UIMap.Scope = UIASeachScope.Children;
                    fbound101112170eDataItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListViewItem");
                    fbound101112170eDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"bound; {_deviceIP}; email=disabled; folder=disabled; fax=disabled; addressing=disabled; authentication=notApplicable; customKey=disabled; sharePoint=disabled; {_deviceModelName}; {_deviceIP}; {_deviceModelName}");
                }

                return fbound101112170eDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Custom ContentPresenteDup0I0XCustom
        {
            get
            {
                if (null == fContentPresenteDup0I0XCustom)
                {
                    fContentPresenteDup0I0XCustom = new Custom("ContentPresenteDup0I0XCustom", bound101112170eDataItem);
                    fContentPresenteDup0I0XCustom.UIMap.Scope = UIASeachScope.Children;
                    fContentPresenteDup0I0XCustom.UIMap.Index = 0;
                    fContentPresenteDup0I0XCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ContentPresenter");
                }

                return fContentPresenteDup0I0XCustom;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image Image84ACE29E0AImage
        {
            get
            {
                if (null == fImage84ACE29E0AImage)
                {
                    fImage84ACE29E0AImage = new Image("Image84ACE29E0AImage", ContentPresenteDup0I0XCustom);
                    fImage84ACE29E0AImage.UIMap.Scope = UIASeachScope.Children;
                    fImage84ACE29E0AImage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImage84ACE29E0AImage.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"84ACE29E-0A0D-4d4b-9168-34F42B14D952");
                }

                return fImage84ACE29E0AImage;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Custom WaitSpinnerUserCustom
        {
            get
            {
                if (null == fWaitSpinnerUserCustom)
                {
                    fWaitSpinnerUserCustom = new Custom("WaitSpinnerUserCustom", ContentPresenteDup0I0XCustom);
                    fWaitSpinnerUserCustom.UIMap.Scope = UIASeachScope.Children;
                    fWaitSpinnerUserCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"WaitSpinnerUserControl");
                    fWaitSpinnerUserCustom.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"C736946B-5A03-4603-A63B-2B489C87B082");
                }

                return fWaitSpinnerUserCustom;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImagemWaitSpinnImage
        {
            get
            {
                if (null == fImagemWaitSpinnImage)
                {
                    fImagemWaitSpinnImage = new Image("ImagemWaitSpinnImage", WaitSpinnerUserCustom);
                    fImagemWaitSpinnImage.UIMap.Scope = UIASeachScope.Children;
                    fImagemWaitSpinnImage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImagemWaitSpinnImage.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mWaitSpinnerImage");
                }

                return fImagemWaitSpinnImage;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HPOfficejetColoDup0I0XText
        {
            get
            {
                if (null == fHPOfficejetColoDup0I0XText)
                {
                    fHPOfficejetColoDup0I0XText = new Text("HPOfficejetColoDup0I0XText", bound101112170eDataItem);
                    fHPOfficejetColoDup0I0XText.UIMap.Scope = UIASeachScope.Children;
                    fHPOfficejetColoDup0I0XText.UIMap.Index = 0;
                    fHPOfficejetColoDup0I0XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHPOfficejetColoDup0I0XText.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"{_deviceModelName}");
                }

                return fHPOfficejetColoDup0I0XText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Custom ContentPresenteDup1I1XCustom
        {
            get
            {
                if (null == fContentPresenteDup1I1XCustom)
                {
                    fContentPresenteDup1I1XCustom = new Custom("ContentPresenteDup1I1XCustom", bound101112170eDataItem);
                    fContentPresenteDup1I1XCustom.UIMap.Scope = UIASeachScope.Children;
                    fContentPresenteDup1I1XCustom.UIMap.Index = 1;
                    fContentPresenteDup1I1XCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ContentPresenter");
                }

                return fContentPresenteDup1I1XCustom;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image Image844100985AImage
        {
            get
            {
                if (null == fImage844100985AImage)
                {
                    fImage844100985AImage = new Image("Image844100985AImage", ContentPresenteDup1I1XCustom);
                    fImage844100985AImage.UIMap.Scope = UIASeachScope.Children;
                    fImage844100985AImage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImage844100985AImage.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"84410098-5A15-4470-B28C-3220220B3CF7");
                }

                return fImage844100985AImage;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Custom ContentPresenteDup2I2XCustom
        {
            get
            {
                if (null == fContentPresenteDup2I2XCustom)
                {
                    fContentPresenteDup2I2XCustom = new Custom("ContentPresenteDup2I2XCustom", bound101112170eDataItem);
                    fContentPresenteDup2I2XCustom.UIMap.Scope = UIASeachScope.Children;
                    fContentPresenteDup2I2XCustom.UIMap.Index = 2;
                    fContentPresenteDup2I2XCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ContentPresenter");
                }

                return fContentPresenteDup2I2XCustom;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image Image20F9A92A96Image
        {
            get
            {
                if (null == fImage20F9A92A96Image)
                {
                    fImage20F9A92A96Image = new Image("Image20F9A92A96Image", ContentPresenteDup2I2XCustom);
                    fImage20F9A92A96Image.UIMap.Scope = UIASeachScope.Children;
                    fImage20F9A92A96Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImage20F9A92A96Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"20F9A92A-9628-46b7-9034-C31A2B2C2052");
                }

                return fImage20F9A92A96Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Custom ContentPresenteDup3I3XCustom
        {
            get
            {
                if (null == fContentPresenteDup3I3XCustom)
                {
                    fContentPresenteDup3I3XCustom = new Custom("ContentPresenteDup3I3XCustom", bound101112170eDataItem);
                    fContentPresenteDup3I3XCustom.UIMap.Scope = UIASeachScope.Children;
                    fContentPresenteDup3I3XCustom.UIMap.Index = 3;
                    fContentPresenteDup3I3XCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ContentPresenter");
                }

                return fContentPresenteDup3I3XCustom;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageCA1843E8BFImage
        {
            get
            {
                if (null == fImageCA1843E8BFImage)
                {
                    fImageCA1843E8BFImage = new Image("ImageCA1843E8BFImage", ContentPresenteDup3I3XCustom);
                    fImageCA1843E8BFImage.UIMap.Scope = UIASeachScope.Children;
                    fImageCA1843E8BFImage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImageCA1843E8BFImage.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"CA1843E8-BF8B-4fd4-88C2-66CB0A66A1C2");
                }

                return fImageCA1843E8BFImage;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Custom ContentPresenteDup4I4XCustom
        {
            get
            {
                if (null == fContentPresenteDup4I4XCustom)
                {
                    fContentPresenteDup4I4XCustom = new Custom("ContentPresenteDup4I4XCustom", bound101112170eDataItem);
                    fContentPresenteDup4I4XCustom.UIMap.Scope = UIASeachScope.Children;
                    fContentPresenteDup4I4XCustom.UIMap.Index = 4;
                    fContentPresenteDup4I4XCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ContentPresenter");
                }

                return fContentPresenteDup4I4XCustom;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageE24499D7C0Image
        {
            get
            {
                if (null == fImageE24499D7C0Image)
                {
                    fImageE24499D7C0Image = new Image("ImageE24499D7C0Image", ContentPresenteDup4I4XCustom);
                    fImageE24499D7C0Image.UIMap.Scope = UIASeachScope.Children;
                    fImageE24499D7C0Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImageE24499D7C0Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"E24499D7-C0DD-4982-A105-C235E810CBF8");
                }

                return fImageE24499D7C0Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Custom ContentPresenteDup5I5XCustom
        {
            get
            {
                if (null == fContentPresenteDup5I5XCustom)
                {
                    fContentPresenteDup5I5XCustom = new Custom("ContentPresenteDup5I5XCustom", bound101112170eDataItem);
                    fContentPresenteDup5I5XCustom.UIMap.Scope = UIASeachScope.Children;
                    fContentPresenteDup5I5XCustom.UIMap.Index = 5;
                    fContentPresenteDup5I5XCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ContentPresenter");
                }

                return fContentPresenteDup5I5XCustom;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image Image86A371F7F4Image
        {
            get
            {
                if (null == fImage86A371F7F4Image)
                {
                    fImage86A371F7F4Image = new Image("Image86A371F7F4Image", ContentPresenteDup5I5XCustom);
                    fImage86A371F7F4Image.UIMap.Scope = UIASeachScope.Children;
                    fImage86A371F7F4Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImage86A371F7F4Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"86A371F7-F478-4dfd-AE88-854F4FB069A0");
                }

                return fImage86A371F7F4Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Custom ContentPresenteDup6I6XCustom
        {
            get
            {
                if (null == fContentPresenteDup6I6XCustom)
                {
                    fContentPresenteDup6I6XCustom = new Custom("ContentPresenteDup6I6XCustom", bound101112170eDataItem);
                    fContentPresenteDup6I6XCustom.UIMap.Scope = UIASeachScope.Children;
                    fContentPresenteDup6I6XCustom.UIMap.Index = 6;
                    fContentPresenteDup6I6XCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ContentPresenter");
                }

                return fContentPresenteDup6I6XCustom;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image Image1D2DC29B85Image
        {
            get
            {
                if (null == fImage1D2DC29B85Image)
                {
                    fImage1D2DC29B85Image = new Image("Image1D2DC29B85Image", ContentPresenteDup6I6XCustom);
                    fImage1D2DC29B85Image.UIMap.Scope = UIASeachScope.Children;
                    fImage1D2DC29B85Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImage1D2DC29B85Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1D2DC29B-85AC-4341-9FBC-741DEC6996B9");
                }

                return fImage1D2DC29B85Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HPOfficejetColoDup1I1XText
        {
            get
            {
                if (null == fHPOfficejetColoDup1I1XText)
                {
                    fHPOfficejetColoDup1I1XText = new Text("HPOfficejetColoDup1I1XText", bound101112170eDataItem);
                    fHPOfficejetColoDup1I1XText.UIMap.Scope = UIASeachScope.Children;
                    fHPOfficejetColoDup1I1XText.UIMap.Index = 1;
                    fHPOfficejetColoDup1I1XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHPOfficejetColoDup1I1XText.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"{_deviceModelName}");
                }

                return fHPOfficejetColoDup1I1XText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text A101112170TextBText
        {
            get
            {
                if (null == fA101112170TextBText)
                {
                    fA101112170TextBText = new Text("A101112170TextBText", bound101112170eDataItem);
                    fA101112170TextBText.UIMap.Scope = UIASeachScope.Children;
                    fA101112170TextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fA101112170TextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"{_deviceIP}");
                }

                return fA101112170TextBText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextBlockDup2Text
        {
            get
            {
                if (null == fTextBlockDup2Text)
                {
                    fTextBlockDup2Text = new Text("TextBlockDup2Text", bound101112170eDataItem);
                    fTextBlockDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fTextBlockDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fTextBlockDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HPOfficejetColoDup2I2XText
        {
            get
            {
                if (null == fHPOfficejetColoDup2I2XText)
                {
                    fHPOfficejetColoDup2I2XText = new Text("HPOfficejetColoDup2I2XText", bound101112170eDataItem);
                    fHPOfficejetColoDup2I2XText.UIMap.Scope = UIASeachScope.Children;
                    fHPOfficejetColoDup2I2XText.UIMap.Index = 2;
                    fHPOfficejetColoDup2I2XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHPOfficejetColoDup2I2XText.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"{_deviceModelName}");
                }

                return fHPOfficejetColoDup2I2XText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FutureSmart3372Text
        {
            get
            {
                if (null == fFutureSmart3372Text)
                {
                    fFutureSmart3372Text = new Text("FutureSmart3372Text", bound101112170eDataItem);
                    fFutureSmart3372Text.UIMap.Scope = UIASeachScope.Children;
                    fFutureSmart3372Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFutureSmart3372Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"FutureSmart 3 (3.7) (2307781_551194)");
                }

                return fFutureSmart3372Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button AddDeviceButtonButton
        {
            get
            {
                if (null == fAddDeviceButtonButton)
                {
                    fAddDeviceButtonButton = new Button("AddDeviceButtonButton", ServiceConfigurCustom);
                    fAddDeviceButtonButton.UIMap.Scope = UIASeachScope.Children;
                    fAddDeviceButtonButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fAddDeviceButtonButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"F312568F-16E2-4717-876C-9A076CE2602B");
                    fAddDeviceButtonButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Device...");
                }

                return fAddDeviceButtonButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddDeviceTextBlText
        {
            get
            {
                if (null == fAddDeviceTextBlText)
                {
                    fAddDeviceTextBlText = new Text("AddDeviceTextBlText", AddDeviceButtonButton);
                    fAddDeviceTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fAddDeviceTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddDeviceTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add Device...");
                }

                return fAddDeviceTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ExportButtonef5Button
        {
            get
            {
                if (null == fExportButtonef5Button)
                {
                    fExportButtonef5Button = new Button("ExportButtonef5Button", ServiceConfigurCustom);
                    fExportButtonef5Button.UIMap.Scope = UIASeachScope.Children;
                    fExportButtonef5Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fExportButtonef5Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ef506fe9-b864-4efe-a960-ad04e56aab91");
                    fExportButtonef5Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Export");
                }

                return fExportButtonef5Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ExportTextBlockText
        {
            get
            {
                if (null == fExportTextBlockText)
                {
                    fExportTextBlockText = new Text("ExportTextBlockText", ExportButtonef5Button);
                    fExportTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fExportTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fExportTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Export");
                }

                return fExportTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RemoveDeviceButButton
        {
            get
            {
                if (null == fRemoveDeviceButButton)
                {
                    fRemoveDeviceButButton = new Button("RemoveDeviceButButton", ServiceConfigurCustom);
                    fRemoveDeviceButButton.UIMap.Scope = UIASeachScope.Children;
                    fRemoveDeviceButButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fRemoveDeviceButButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6f0bbda8-ae72-4b07-bd10-508b3cd6df98");
                    fRemoveDeviceButButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Remove Device...");
                }

                return fRemoveDeviceButButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RemoveDeviceTexText
        {
            get
            {
                if (null == fRemoveDeviceTexText)
                {
                    fRemoveDeviceTexText = new Text("RemoveDeviceTexText", RemoveDeviceButButton);
                    fRemoveDeviceTexText.UIMap.Scope = UIASeachScope.Children;
                    fRemoveDeviceTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRemoveDeviceTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Remove Device...");
                }

                return fRemoveDeviceTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ImportButtona69Button
        {
            get
            {
                if (null == fImportButtona69Button)
                {
                    fImportButtona69Button = new Button("ImportButtona69Button", ServiceConfigurCustom);
                    fImportButtona69Button.UIMap.Scope = UIASeachScope.Children;
                    fImportButtona69Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fImportButtona69Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"a694c1f5-ca51-45dc-ae40-8decc9704ca5");
                    fImportButtona69Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Import");
                }

                return fImportButtona69Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ImportTextBlockText
        {
            get
            {
                if (null == fImportTextBlockText)
                {
                    fImportTextBlockText = new Text("ImportTextBlockText", ImportButtona69Button);
                    fImportTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fImportTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fImportTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Import");
                }

                return fImportTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CreateTemplateBButton
        {
            get
            {
                if (null == fCreateTemplateBButton)
                {
                    fCreateTemplateBButton = new Button("CreateTemplateBButton", ServiceConfigurCustom);
                    fCreateTemplateBButton.UIMap.Scope = UIASeachScope.Children;
                    fCreateTemplateBButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCreateTemplateBButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4C50BE02-6C60-4097-9595-ACF2CC3D5F50");
                    fCreateTemplateBButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Create Template");
                }

                return fCreateTemplateBButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CreateTemplateTText
        {
            get
            {
                if (null == fCreateTemplateTText)
                {
                    fCreateTemplateTText = new Text("CreateTemplateTText", CreateTemplateBButton);
                    fCreateTemplateTText.UIMap.Scope = UIASeachScope.Children;
                    fCreateTemplateTText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCreateTemplateTText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Create Template");
                }

                return fCreateTemplateTText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button DeviceSignInButButton
        {
            get
            {
                if (null == fDeviceSignInButButton)
                {
                    fDeviceSignInButButton = new Button("DeviceSignInButButton", ServiceConfigurCustom);
                    fDeviceSignInButButton.UIMap.Scope = UIASeachScope.Children;
                    fDeviceSignInButButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fDeviceSignInButButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mDeviceSignInButton");
                    fDeviceSignInButButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device Sign In...");
                }

                return fDeviceSignInButButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DeviceSignInTexText
        {
            get
            {
                if (null == fDeviceSignInTexText)
                {
                    fDeviceSignInTexText = new Text("DeviceSignInTexText", DeviceSignInButButton);
                    fDeviceSignInTexText.UIMap.Scope = UIASeachScope.Children;
                    fDeviceSignInTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDeviceSignInTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device Sign In...");
                }

                return fDeviceSignInTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TotalDevicesText
        {
            get
            {
                if (null == fTotalDevicesText)
                {
                    fTotalDevicesText = new Text("TotalDevicesText", ServiceConfigurCustom);
                    fTotalDevicesText.UIMap.Scope = UIASeachScope.Children;
                    fTotalDevicesText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fTotalDevicesText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Total Devices");
                }

                return fTotalDevicesText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TotalDevicesTexText
        {
            get
            {
                if (null == fTotalDevicesTexText)
                {
                    fTotalDevicesTexText = new Text("TotalDevicesTexText", TotalDevicesText);
                    fTotalDevicesTexText.UIMap.Scope = UIASeachScope.Children;
                    fTotalDevicesTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTotalDevicesTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Total Devices");
                }

                return fTotalDevicesTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text A1Text82f844376Text
        {
            get
            {
                if (null == fA1Text82f844376Text)
                {
                    fA1Text82f844376Text = new Text("A1Text82f844376Text", ServiceConfigurCustom);
                    fA1Text82f844376Text.UIMap.Scope = UIASeachScope.Children;
                    fA1Text82f844376Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fA1Text82f844376Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"82f84437-601e-4562-a536-33b7ebcbf6d7");
                    fA1Text82f844376Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"1");
                }

                return fA1Text82f844376Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text A1TextBlockText
        {
            get
            {
                if (null == fA1TextBlockText)
                {
                    fA1TextBlockText = new Text("A1TextBlockText", A1Text82f844376Text);
                    fA1TextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fA1TextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fA1TextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"1");
                }

                return fA1TextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ConfigureDeviceButton
        {
            get
            {
                if (null == fConfigureDeviceButton)
                {
                    fConfigureDeviceButton = new Button("ConfigureDeviceButton", ServiceConfigurCustom);
                    fConfigureDeviceButton.UIMap.Scope = UIASeachScope.Children;
                    fConfigureDeviceButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fConfigureDeviceButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cc06ce85-fb0a-4048-8b41-968e5c947ca3");
                    fConfigureDeviceButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Configure Device...");
                }

                return fConfigureDeviceButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ConfigureDeviceText
        {
            get
            {
                if (null == fConfigureDeviceText)
                {
                    fConfigureDeviceText = new Text("ConfigureDeviceText", ConfigureDeviceButton);
                    fConfigureDeviceText.UIMap.Scope = UIASeachScope.Children;
                    fConfigureDeviceText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fConfigureDeviceText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Configure Device...");
                }

                return fConfigureDeviceText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem TemplateConfiguTabItem
        {
            get
            {
                if (null == fTemplateConfiguTabItem)
                {
                    fTemplateConfiguTabItem = new TabItem("TemplateConfiguTabItem", TabControlec0fdTab);
                    fTemplateConfiguTabItem.UIMap.Scope = UIASeachScope.Children;
                    fTemplateConfiguTabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fTemplateConfiguTabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AC05F9B9-A7D8-4b34-80E7-910FB9870D47");
                    fTemplateConfiguTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Template Configuration");
                }

                return fTemplateConfiguTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TemplateConfiguText
        {
            get
            {
                if (null == fTemplateConfiguText)
                {
                    fTemplateConfiguText = new Text("TemplateConfiguText", TemplateConfiguTabItem);
                    fTemplateConfiguText.UIMap.Scope = UIASeachScope.Children;
                    fTemplateConfiguText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTemplateConfiguText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Template Configuration");
                }

                return fTemplateConfiguText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem LogTabItem9b4f3TabItem
        {
            get
            {
                if (null == fLogTabItem9b4f3TabItem)
                {
                    fLogTabItem9b4f3TabItem = new TabItem("LogTabItem9b4f3TabItem", TabControlec0fdTab);
                    fLogTabItem9b4f3TabItem.UIMap.Scope = UIASeachScope.Children;
                    fLogTabItem9b4f3TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fLogTabItem9b4f3TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9b4f34bb-d75a-4080-9be3-1c50ec31c5b6");
                    fLogTabItem9b4f3TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Log");
                }

                return fLogTabItem9b4f3TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text LogTextBlockDup1Text
        {
            get
            {
                if (null == fLogTextBlockDup1Text)
                {
                    fLogTextBlockDup1Text = new Text("LogTextBlockDup1Text", LogTabItem9b4f3TabItem);
                    fLogTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fLogTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fLogTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Log");
                }

                return fLogTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup17TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup17TabItem)
                {
                    fSystemWindowsCoDup17TabItem = new TabItem("SystemWindowsCoDup17TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup17TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup17TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup17TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3AC8D4A8-3B06-421A-911B-E8CA248A9ED4");
                    fSystemWindowsCoDup17TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup17TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SecurityTextmSeText
        {
            get
            {
                if (null == fSecurityTextmSeText)
                {
                    fSecurityTextmSeText = new Text("SecurityTextmSeText", SystemWindowsCoDup17TabItem);
                    fSecurityTextmSeText.UIMap.Scope = UIASeachScope.Children;
                    fSecurityTextmSeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fSecurityTextmSeText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mSecurityTabLabel");
                    fSecurityTextmSeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Security");
                }

                return fSecurityTextmSeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SecurityTextBloText
        {
            get
            {
                if (null == fSecurityTextBloText)
                {
                    fSecurityTextBloText = new Text("SecurityTextBloText", SecurityTextmSeText);
                    fSecurityTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fSecurityTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSecurityTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Security");
                }

                return fSecurityTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text8A7A84DB894Text
        {
            get
            {
                if (null == fText8A7A84DB894Text)
                {
                    fText8A7A84DB894Text = new Text("Text8A7A84DB894Text", SystemWindowsCoDup17TabItem);
                    fText8A7A84DB894Text.UIMap.Scope = UIASeachScope.Children;
                    fText8A7A84DB894Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText8A7A84DB894Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8A7A84DB-8945-40E1-A0F9-C40DDD129739");
                    fText8A7A84DB894Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText8A7A84DB894Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text16F78FB18FFText
        {
            get
            {
                if (null == fText16F78FB18FFText)
                {
                    fText16F78FB18FFText = new Text("Text16F78FB18FFText", SystemWindowsCoDup17TabItem);
                    fText16F78FB18FFText.UIMap.Scope = UIASeachScope.Children;
                    fText16F78FB18FFText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText16F78FB18FFText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"16F78FB1-8FF9-4B0D-8251-FB09F520EA73");
                    fText16F78FB18FFText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText16F78FB18FFText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup18TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup18TabItem)
                {
                    fSystemWindowsCoDup18TabItem = new TabItem("SystemWindowsCoDup18TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup18TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup18TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup18TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1678607C-20BF-4137-8238-C9D46EA8FF70");
                    fSystemWindowsCoDup18TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup18TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AnalyticsTextmAText
        {
            get
            {
                if (null == fAnalyticsTextmAText)
                {
                    fAnalyticsTextmAText = new Text("AnalyticsTextmAText", SystemWindowsCoDup18TabItem);
                    fAnalyticsTextmAText.UIMap.Scope = UIASeachScope.Children;
                    fAnalyticsTextmAText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fAnalyticsTextmAText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mAnalyticsTabLabel");
                    fAnalyticsTextmAText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Analytics");
                }

                return fAnalyticsTextmAText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AnalyticsTextBlText
        {
            get
            {
                if (null == fAnalyticsTextBlText)
                {
                    fAnalyticsTextBlText = new Text("AnalyticsTextBlText", AnalyticsTextmAText);
                    fAnalyticsTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fAnalyticsTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAnalyticsTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Analytics");
                }

                return fAnalyticsTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem AboutTabItemf45TabItem
        {
            get
            {
                if (null == fAboutTabItemf45TabItem)
                {
                    fAboutTabItemf45TabItem = new TabItem("AboutTabItemf45TabItem", TabControlec0fdTab);
                    fAboutTabItemf45TabItem.UIMap.Scope = UIASeachScope.Children;
                    fAboutTabItemf45TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fAboutTabItemf45TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"f45c22d9-f77a-481a-95bc-09cdff03e131");
                    fAboutTabItemf45TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"About");
                }

                return fAboutTabItemf45TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AboutTextBlockText
        {
            get
            {
                if (null == fAboutTextBlockText)
                {
                    fAboutTextBlockText = new Text("AboutTextBlockText", AboutTabItemf45TabItem);
                    fAboutTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fAboutTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAboutTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"About");
                }

                return fAboutTextBlockText;
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------

namespace HP.ScalableTest.Plugin.DSSConfiguration.UIMaps
{
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class DSS_InternetFaxSetUp
    {
        /// <summary>
        /// Backing field for HPDigitalSendinWindow property
        /// </summary>
        private Window fHPDigitalSendinWindow;

        /// <summary>
        /// Backing field for AddSMTPGatewayWWindow property
        /// </summary>
        private Window fAddSMTPGatewayWWindow;

        /// <summary>
        /// Backing field for AddSMTPGatewayTitleBar property
        /// </summary>
        private TitleBar fAddSMTPGatewayTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup0MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup0MenuBar;

        /// <summary>
        /// Backing field for SystemItem1Dup0MenuItem property
        /// </summary>
        private MenuItem fSystemItem1Dup0MenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizDup0Button property
        /// </summary>
        private Button fMinimizeMinimizDup0Button;

        /// <summary>
        /// Backing field for MaximizeMaximizButton property
        /// </summary>
        private Button fMaximizeMaximizButton;

        /// <summary>
        /// Backing field for CloseCloseDup0Button property
        /// </summary>
        private Button fCloseCloseDup0Button;

        /// <summary>
        /// Backing field for OKButton4D1AF73Button property
        /// </summary>
        private Button fOKButton4D1AF73Button;

        /// <summary>
        /// Backing field for OKTextBlockDup0Text property
        /// </summary>
        private Text fOKTextBlockDup0Text;

        /// <summary>
        /// Backing field for CancelButton132Button property
        /// </summary>
        private Button fCancelButton132Button;

        /// <summary>
        /// Backing field for CancelTextBlockDup0Text property
        /// </summary>
        private Text fCancelTextBlockDup0Text;

        /// <summary>
        /// Backing field for HelpButtonaaafdButton property
        /// </summary>
        private Button fHelpButtonaaafdButton;

        /// <summary>
        /// Backing field for HelpTextBlockDup0Text property
        /// </summary>
        private Text fHelpTextBlockDup0Text;

        /// <summary>
        /// Backing field for OutgoingEmailSeDup0Group property
        /// </summary>
        private Group fOutgoingEmailSeDup0Group;

        /// <summary>
        /// Backing field for OutgoingEmailSeDup0Text property
        /// </summary>
        private Text fOutgoingEmailSeDup0Text;

        /// <summary>
        /// Backing field for ScrollViewerDup0Pane property
        /// </summary>
        private Pane fScrollViewerDup0Pane;

        /// <summary>
        /// Backing field for ServerNameorAddDup0Text property
        /// </summary>
        private Text fServerNameorAddDup0Text;

        /// <summary>
        /// Backing field for ServerNameorAddDup1Text property
        /// </summary>
        private Text fServerNameorAddDup1Text;

        /// <summary>
        /// Backing field for PortText2b91632Text property
        /// </summary>
        private Text fPortText2b91632Text;

        /// <summary>
        /// Backing field for PortTextBlockText property
        /// </summary>
        private Text fPortTextBlockText;

        /// <summary>
        /// Backing field for TextBox59D047B3Edit property
        /// </summary>
        private Edit fTextBox59D047B3Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup0Pane property
        /// </summary>
        private Pane fScrollViewerPARDup0Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup0ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup0ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup0ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup0ScrollBar;

        /// <summary>
        /// Backing field for TextBox2a0b0b2fEdit property
        /// </summary>
        private Edit fTextBox2a0b0b2fEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup1Pane property
        /// </summary>
        private Pane fScrollViewerPARDup1Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup1ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup1ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup1ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup1ScrollBar;

        /// <summary>
        /// Backing field for AutoFindButton3Button property
        /// </summary>
        private Button fAutoFindButton3Button;

        /// <summary>
        /// Backing field for AutoFindTextBloText property
        /// </summary>
        private Text fAutoFindTextBloText;

        /// <summary>
        /// Backing field for EnableSMTPSSLPrCheckBox property
        /// </summary>
        private CheckBox fEnableSMTPSSLPrCheckBox;

        /// <summary>
        /// Backing field for EnableSMTPSSLPrText property
        /// </summary>
        private Text fEnableSMTPSSLPrText;

        /// <summary>
        /// Backing field for ServerRequiresACheckBox property
        /// </summary>
        private CheckBox fServerRequiresACheckBox;

        /// <summary>
        /// Backing field for ServerRequiresAText property
        /// </summary>
        private Text fServerRequiresAText;

        /// <summary>
        /// Backing field for ComboBox9084316ComboBox property
        /// </summary>
        private ComboBox fComboBox9084316ComboBox;

        /// <summary>
        /// Backing field for SMTPcredentialsText property
        /// </summary>
        private Text fSMTPcredentialsText;

        /// <summary>
        /// Backing field for UsernameTexted5Text property
        /// </summary>
        private Text fUsernameTexted5Text;

        /// <summary>
        /// Backing field for UsernameTextBloDup0Text property
        /// </summary>
        private Text fUsernameTextBloDup0Text;

        /// <summary>
        /// Backing field for TextBoxc267ec0dEdit property
        /// </summary>
        private Edit fTextBoxc267ec0dEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup2Pane property
        /// </summary>
        private Pane fScrollViewerPARDup2Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup2ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup2ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup2ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup2ScrollBar;

        /// <summary>
        /// Backing field for PasswordTextbc5Text property
        /// </summary>
        private Text fPasswordTextbc5Text;

        /// <summary>
        /// Backing field for PasswordTextBloDup0Text property
        /// </summary>
        private Text fPasswordTextBloDup0Text;

        /// <summary>
        /// Backing field for PasswordBox1c44Edit property
        /// </summary>
        private Edit fPasswordBox1c44Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup3Pane property
        /// </summary>
        private Pane fScrollViewerPARDup3Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup3ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup3ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup3ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup3ScrollBar;

        /// <summary>
        /// Backing field for ServerUsageGrouGroup property
        /// </summary>
        private Group fServerUsageGrouGroup;

        /// <summary>
        /// Backing field for ServerUsageTextDup0Text property
        /// </summary>
        private Text fServerUsageTextDup0Text;

        /// <summary>
        /// Backing field for EmailSendscanneCheckBox property
        /// </summary>
        private CheckBox fEmailSendscanneCheckBox;

        /// <summary>
        /// Backing field for EmailSendscanneText property
        /// </summary>
        private Text fEmailSendscanneText;

        /// <summary>
        /// Backing field for AutomatedEmailsCheckBox property
        /// </summary>
        private CheckBox fAutomatedEmailsCheckBox;

        /// <summary>
        /// Backing field for AutomatedEmailsText property
        /// </summary>
        private Text fAutomatedEmailsText;

        /// <summary>
        /// Backing field for FaxsendfaxeswheCheckBox property
        /// </summary>
        private CheckBox fFaxsendfaxeswheCheckBox;

        /// <summary>
        /// Backing field for FaxsendfaxeswheText property
        /// </summary>
        private Text fFaxsendfaxeswheText;

        /// <summary>
        /// Backing field for SplitemailsiflaDup0Text property
        /// </summary>
        private Text fSplitemailsiflaDup0Text;

        /// <summary>
        /// Backing field for SplitemailsiflaDup1Text property
        /// </summary>
        private Text fSplitemailsiflaDup1Text;

        /// <summary>
        /// Backing field for A010000TextDFBFText property
        /// </summary>
        private Text fA010000TextDFBFText;

        /// <summary>
        /// Backing field for A010000TextBlocText property
        /// </summary>
        private Text fA010000TextBlocText;

        /// <summary>
        /// Backing field for TextBoxDDE87868Edit property
        /// </summary>
        private Edit fTextBoxDDE87868Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup4Pane property
        /// </summary>
        private Pane fScrollViewerPARDup4Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup4ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup4ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup4ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup4ScrollBar;

        /// <summary>
        /// Backing field for TheemailwillbesText property
        /// </summary>
        private Text fTheemailwillbesText;

        /// <summary>
        /// Backing field for SendatestemailtDup0Text property
        /// </summary>
        private Text fSendatestemailtDup0Text;

        /// <summary>
        /// Backing field for SendatestemailtDup1Text property
        /// </summary>
        private Text fSendatestemailtDup1Text;

        /// <summary>
        /// Backing field for ComboBox5d53755ComboBox property
        /// </summary>
        private ComboBox fComboBox5d53755ComboBox;

        /// <summary>
        /// Backing field for TextBoxPARTEdiEdit property
        /// </summary>
        private Edit fTextBoxPARTEdiEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup5Pane property
        /// </summary>
        private Pane fScrollViewerPARDup5Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup5ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup5ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup5ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup5ScrollBar;

        /// <summary>
        /// Backing field for SendButton9c885Button property
        /// </summary>
        private Button fSendButton9c885Button;

        /// <summary>
        /// Backing field for SendTextBlockText property
        /// </summary>
        private Text fSendTextBlockText;

        /// <summary>
        /// Backing field for ScrollBarVerticDup6ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup6ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup6ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup6ScrollBar;

        /// <summary>
        /// Backing field for HPDigitalSendinTitleBar property
        /// </summary>
        private TitleBar fHPDigitalSendinTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup1MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup1MenuBar;

        /// <summary>
        /// Backing field for SystemItem1Dup1MenuItem property
        /// </summary>
        private MenuItem fSystemItem1Dup1MenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizDup1Button property
        /// </summary>
        private Button fMinimizeMinimizDup1Button;

        /// <summary>
        /// Backing field for RestoreRestoreButton property
        /// </summary>
        private Button fRestoreRestoreButton;

        /// <summary>
        /// Backing field for CloseCloseDup1Button property
        /// </summary>
        private Button fCloseCloseDup1Button;

        /// <summary>
        /// Backing field for HelpButtonCB8CFButton property
        /// </summary>
        private Button fHelpButtonCB8CFButton;

        /// <summary>
        /// Backing field for HelpTextBlockDup1Text property
        /// </summary>
        private Text fHelpTextBlockDup1Text;

        /// <summary>
        /// Backing field for ApplyButton61E2Button property
        /// </summary>
        private Button fApplyButton61E2Button;

        /// <summary>
        /// Backing field for ApplyTextBlockText property
        /// </summary>
        private Text fApplyTextBlockText;

        /// <summary>
        /// Backing field for CancelButton65CButton property
        /// </summary>
        private Button fCancelButton65CButton;

        /// <summary>
        /// Backing field for CancelTextBlockDup1Text property
        /// </summary>
        private Text fCancelTextBlockDup1Text;

        /// <summary>
        /// Backing field for OKButtonCC2EF49Button property
        /// </summary>
        private Button fOKButtonCC2EF49Button;

        /// <summary>
        /// Backing field for OKTextBlockDup1Text property
        /// </summary>
        private Text fOKTextBlockDup1Text;

        /// <summary>
        /// Backing field for TabControlec0fdTab property
        /// </summary>
        private Tab fTabControlec0fdTab;

        /// <summary>
        /// Backing field for SystemWindowsCoDup0TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup0TabItem;

        /// <summary>
        /// Backing field for GeneralTextmGenText property
        /// </summary>
        private Text fGeneralTextmGenText;

        /// <summary>
        /// Backing field for GeneralTextBlocText property
        /// </summary>
        private Text fGeneralTextBlocText;

        /// <summary>
        /// Backing field for Text933345b04e3Text property
        /// </summary>
        private Text fText933345b04e3Text;

        /// <summary>
        /// Backing field for Text786caf67344Text property
        /// </summary>
        private Text fText786caf67344Text;

        /// <summary>
        /// Backing field for SystemWindowsCoDup1TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup1TabItem;

        /// <summary>
        /// Backing field for AuthenticationTDup0Text property
        /// </summary>
        private Text fAuthenticationTDup0Text;

        /// <summary>
        /// Backing field for AuthenticationTDup1Text property
        /// </summary>
        private Text fAuthenticationTDup1Text;

        /// <summary>
        /// Backing field for Text31EC91730B9Text property
        /// </summary>
        private Text fText31EC91730B9Text;

        /// <summary>
        /// Backing field for TextA479C271445Text property
        /// </summary>
        private Text fTextA479C271445Text;

        /// <summary>
        /// Backing field for SystemWindowsCoDup2TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup2TabItem;

        /// <summary>
        /// Backing field for EmailTextmEmailText property
        /// </summary>
        private Text fEmailTextmEmailText;

        /// <summary>
        /// Backing field for EmailTextBlockText property
        /// </summary>
        private Text fEmailTextBlockText;

        /// <summary>
        /// Backing field for Text32de714a8bdText property
        /// </summary>
        private Text fText32de714a8bdText;

        /// <summary>
        /// Backing field for Text3b2a8761f4fText property
        /// </summary>
        private Text fText3b2a8761f4fText;

        /// <summary>
        /// Backing field for TextBlockDup0Text property
        /// </summary>
        private Text fTextBlockDup0Text;

        /// <summary>
        /// Backing field for SystemWindowsCoDup3TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup3TabItem;

        /// <summary>
        /// Backing field for FaxTextmFaxTabLText property
        /// </summary>
        private Text fFaxTextmFaxTabLText;

        /// <summary>
        /// Backing field for FaxTextBlockText property
        /// </summary>
        private Text fFaxTextBlockText;

        /// <summary>
        /// Backing field for TextD1ED4F16F38Text property
        /// </summary>
        private Text fTextD1ED4F16F38Text;

        /// <summary>
        /// Backing field for TextBlockDup1Text property
        /// </summary>
        private Text fTextBlockDup1Text;

        /// <summary>
        /// Backing field for Text7DDE04FD251Text property
        /// </summary>
        private Text fText7DDE04FD251Text;

        /// <summary>
        /// Backing field for TextBlockDup2Text property
        /// </summary>
        private Text fTextBlockDup2Text;

        /// <summary>
        /// Backing field for ServiceConfigurCustom property
        /// </summary>
        private Custom fServiceConfigurCustom;

        /// <summary>
        /// Backing field for ScrollViewerDup1Pane property
        /// </summary>
        private Pane fScrollViewerDup1Pane;

        /// <summary>
        /// Backing field for ErrorConflictUsCustom property
        /// </summary>
        private Custom fErrorConflictUsCustom;

        /// <summary>
        /// Backing field for ImageDup0Image property
        /// </summary>
        private Image fImageDup0Image;

        /// <summary>
        /// Backing field for A1EmailAddressiText property
        /// </summary>
        private Text fA1EmailAddressiText;

        /// <summary>
        /// Backing field for EnableFaxSendChCheckBox property
        /// </summary>
        private CheckBox fEnableFaxSendChCheckBox;

        /// <summary>
        /// Backing field for EnableFaxSendTeText property
        /// </summary>
        private Text fEnableFaxSendTeText;

        /// <summary>
        /// Backing field for FaxSendMethodTeDup0Text property
        /// </summary>
        private Text fFaxSendMethodTeDup0Text;

        /// <summary>
        /// Backing field for FaxSendMethodTeDup1Text property
        /// </summary>
        private Text fFaxSendMethodTeDup1Text;

        /// <summary>
        /// Backing field for ComboBoxf9a5a65ComboBox property
        /// </summary>
        private ComboBox fComboBoxf9a5a65ComboBox;

        /// <summary>
        /// Backing field for LANFaxServiceLiListItem property
        /// </summary>
        private ListItem fLANFaxServiceLiListItem;

        /// <summary>
        /// Backing field for LANFaxServiceTeText property
        /// </summary>
        private Text fLANFaxServiceTeText;

        /// <summary>
        /// Backing field for InternetFaxServListItem property
        /// </summary>
        private ListItem fInternetFaxServListItem;

        /// <summary>
        /// Backing field for InternetFaxServText property
        /// </summary>
        private Text fInternetFaxServText;

        /// <summary>
        /// Backing field for InternetFaxSetuGroup property
        /// </summary>
        private Group fInternetFaxSetuGroup;

        /// <summary>
        /// Backing field for InternetFaxSetuText property
        /// </summary>
        private Text fInternetFaxSetuText;

        /// <summary>
        /// Backing field for OutgoingEmailSeDup1Group property
        /// </summary>
        private Group fOutgoingEmailSeDup1Group;

        /// <summary>
        /// Backing field for OutgoingEmailSeDup1Text property
        /// </summary>
        private Text fOutgoingEmailSeDup1Text;

        /// <summary>
        /// Backing field for ListViewed72841DataGrid property
        /// </summary>
        private DataGrid fListViewed72841DataGrid;

        /// <summary>
        /// Backing field for GridViewHeaderRHeader property
        /// </summary>
        private Header fGridViewHeaderRHeader;

        /// <summary>
        /// Backing field for PriorityOrderGrHeaderItem property
        /// </summary>
        private HeaderItem fPriorityOrderGrHeaderItem;

        /// <summary>
        /// Backing field for PriorityOrderTeText property
        /// </summary>
        private Text fPriorityOrderTeText;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup0Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup0Thumb;

        /// <summary>
        /// Backing field for SMTPGatewayGridHeaderItem property
        /// </summary>
        private HeaderItem fSMTPGatewayGridHeaderItem;

        /// <summary>
        /// Backing field for SMTPGatewayTextText property
        /// </summary>
        private Text fSMTPGatewayTextText;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup1Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup1Thumb;

        /// <summary>
        /// Backing field for ServerUsageGridHeaderItem property
        /// </summary>
        private HeaderItem fServerUsageGridHeaderItem;

        /// <summary>
        /// Backing field for ServerUsageTextDup1Text property
        /// </summary>
        private Text fServerUsageTextDup1Text;

        /// <summary>
        /// Backing field for ThumbPARTHeadeDup2Thumb property
        /// </summary>
        private Thumb fThumbPARTHeadeDup2Thumb;

        /// <summary>
        /// Backing field for Buttonc240142dfButton property
        /// </summary>
        private Button fButtonc240142dfButton;

        /// <summary>
        /// Backing field for ImageDup1Image property
        /// </summary>
        private Image fImageDup1Image;

        /// <summary>
        /// Backing field for MoveText property
        /// </summary>
        private Text fMoveText;

        /// <summary>
        /// Backing field for MoveTextBlockText property
        /// </summary>
        private Text fMoveTextBlockText;

        /// <summary>
        /// Backing field for Buttonf592bfec4Button property
        /// </summary>
        private Button fButtonf592bfec4Button;

        /// <summary>
        /// Backing field for ImageDup2Image property
        /// </summary>
        private Image fImageDup2Image;

        /// <summary>
        /// Backing field for AddButton946212Button property
        /// </summary>
        private Button fAddButton946212Button;

        /// <summary>
        /// Backing field for AddTextBlockText property
        /// </summary>
        private Text fAddTextBlockText;

        /// <summary>
        /// Backing field for EditButton0b46aButton property
        /// </summary>
        private Button fEditButton0b46aButton;

        /// <summary>
        /// Backing field for EditTextBlockText property
        /// </summary>
        private Text fEditTextBlockText;

        /// <summary>
        /// Backing field for RemoveButtond0cButton property
        /// </summary>
        private Button fRemoveButtond0cButton;

        /// <summary>
        /// Backing field for RemoveTextBlockText property
        /// </summary>
        private Text fRemoveTextBlockText;

        /// <summary>
        /// Backing field for TestButtonc6fd1Button property
        /// </summary>
        private Button fTestButtonc6fd1Button;

        /// <summary>
        /// Backing field for TestTextBlockText property
        /// </summary>
        private Text fTestTextBlockText;

        /// <summary>
        /// Backing field for FaxProviderDomaDup0Text property
        /// </summary>
        private Text fFaxProviderDomaDup0Text;

        /// <summary>
        /// Backing field for FaxProviderDomaDup1Text property
        /// </summary>
        private Text fFaxProviderDomaDup1Text;

        /// <summary>
        /// Backing field for TextBoxe6b587feEdit property
        /// </summary>
        private Edit fTextBoxe6b587feEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup6Pane property
        /// </summary>
        private Pane fScrollViewerPARDup6Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup7ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup7ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup7ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup7ScrollBar;

        /// <summary>
        /// Backing field for DefaultFaxAccouDup0Text property
        /// </summary>
        private Text fDefaultFaxAccouDup0Text;

        /// <summary>
        /// Backing field for DefaultFaxAccouDup1Text property
        /// </summary>
        private Text fDefaultFaxAccouDup1Text;

        /// <summary>
        /// Backing field for TextBoxebc1d279Edit property
        /// </summary>
        private Edit fTextBoxebc1d279Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup7Pane property
        /// </summary>
        private Pane fScrollViewerPARDup7Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup8ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup8ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup8ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup8ScrollBar;

        /// <summary>
        /// Backing field for T37PrefixText property
        /// </summary>
        private Text fT37PrefixText;

        /// <summary>
        /// Backing field for T37PrefixTextBlText property
        /// </summary>
        private Text fT37PrefixTextBlText;

        /// <summary>
        /// Backing field for TextBox720525FCEdit property
        /// </summary>
        private Edit fTextBox720525FCEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup8Pane property
        /// </summary>
        private Pane fScrollViewerPARDup8Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup9ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup9ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup9ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup9ScrollBar;

        /// <summary>
        /// Backing field for FileFormatDup0Text property
        /// </summary>
        private Text fFileFormatDup0Text;

        /// <summary>
        /// Backing field for FileFormatTextBDup0Text property
        /// </summary>
        private Text fFileFormatTextBDup0Text;

        /// <summary>
        /// Backing field for ComboBox00cd015ComboBox property
        /// </summary>
        private ComboBox fComboBox00cd015ComboBox;

        /// <summary>
        /// Backing field for IfavailableusetCheckBox property
        /// </summary>
        private CheckBox fIfavailableusetCheckBox;

        /// <summary>
        /// Backing field for IfavailableusetText property
        /// </summary>
        private Text fIfavailableusetText;

        /// <summary>
        /// Backing field for AutocompletetoNCheckBox property
        /// </summary>
        private CheckBox fAutocompletetoNCheckBox;

        /// <summary>
        /// Backing field for AutocompletetoNText property
        /// </summary>
        private Text fAutocompletetoNText;

        /// <summary>
        /// Backing field for TextBox27f9e603Edit property
        /// </summary>
        private Edit fTextBox27f9e603Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup9Pane property
        /// </summary>
        private Pane fScrollViewerPARDup9Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup10ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup10ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup10ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup10ScrollBar;

        /// <summary>
        /// Backing field for LANFaxSetupGrouGroup property
        /// </summary>
        private Group fLANFaxSetupGrouGroup;

        /// <summary>
        /// Backing field for LANFaxSetupTextText property
        /// </summary>
        private Text fLANFaxSetupTextText;

        /// <summary>
        /// Backing field for LanFaxServiceSeGroup property
        /// </summary>
        private Group fLanFaxServiceSeGroup;

        /// <summary>
        /// Backing field for LanFaxServiceSeText property
        /// </summary>
        private Text fLanFaxServiceSeText;

        /// <summary>
        /// Backing field for ThirdPartyLANFaDup0Text property
        /// </summary>
        private Text fThirdPartyLANFaDup0Text;

        /// <summary>
        /// Backing field for ThirdPartyLANFaDup1Text property
        /// </summary>
        private Text fThirdPartyLANFaDup1Text;

        /// <summary>
        /// Backing field for ComboBox411fa59ComboBox property
        /// </summary>
        private ComboBox fComboBox411fa59ComboBox;

        /// <summary>
        /// Backing field for FileFormatDup1Text property
        /// </summary>
        private Text fFileFormatDup1Text;

        /// <summary>
        /// Backing field for FileFormatTextBDup1Text property
        /// </summary>
        private Text fFileFormatTextBDup1Text;

        /// <summary>
        /// Backing field for ComboBox454be57ComboBox property
        /// </summary>
        private ComboBox fComboBox454be57ComboBox;

        /// <summary>
        /// Backing field for FolderSettingsGGroup property
        /// </summary>
        private Group fFolderSettingsGGroup;

        /// <summary>
        /// Backing field for FolderSettingsTText property
        /// </summary>
        private Text fFolderSettingsTText;

        /// <summary>
        /// Backing field for FolderPathText property
        /// </summary>
        private Text fFolderPathText;

        /// <summary>
        /// Backing field for FolderPathTextBText property
        /// </summary>
        private Text fFolderPathTextBText;

        /// <summary>
        /// Backing field for TextBox963de5ecEdit property
        /// </summary>
        private Edit fTextBox963de5ecEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup10Pane property
        /// </summary>
        private Pane fScrollViewerPARDup10Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup11ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup11ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup11ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup11ScrollBar;

        /// <summary>
        /// Backing field for BrowseButton278Button property
        /// </summary>
        private Button fBrowseButton278Button;

        /// <summary>
        /// Backing field for BrowseTextBlockText property
        /// </summary>
        private Text fBrowseTextBlockText;

        /// <summary>
        /// Backing field for UsernameText property
        /// </summary>
        private Text fUsernameText;

        /// <summary>
        /// Backing field for UsernameTextBloDup1Text property
        /// </summary>
        private Text fUsernameTextBloDup1Text;

        /// <summary>
        /// Backing field for TextBoxa432c48dEdit property
        /// </summary>
        private Edit fTextBoxa432c48dEdit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup11Pane property
        /// </summary>
        private Pane fScrollViewerPARDup11Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup12ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup12ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup12ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup12ScrollBar;

        /// <summary>
        /// Backing field for PasswordText property
        /// </summary>
        private Text fPasswordText;

        /// <summary>
        /// Backing field for PasswordTextBloDup1Text property
        /// </summary>
        private Text fPasswordTextBloDup1Text;

        /// <summary>
        /// Backing field for PasswordBoxcd46Edit property
        /// </summary>
        private Edit fPasswordBoxcd46Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup12Pane property
        /// </summary>
        private Pane fScrollViewerPARDup12Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup13ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup13ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup13ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup13ScrollBar;

        /// <summary>
        /// Backing field for WindowsDomainTeDup0Text property
        /// </summary>
        private Text fWindowsDomainTeDup0Text;

        /// <summary>
        /// Backing field for WindowsDomainTeDup1Text property
        /// </summary>
        private Text fWindowsDomainTeDup1Text;

        /// <summary>
        /// Backing field for TextBox80fa1a93Edit property
        /// </summary>
        private Edit fTextBox80fa1a93Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup13Pane property
        /// </summary>
        private Pane fScrollViewerPARDup13Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup14ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup14ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup14ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup14ScrollBar;

        /// <summary>
        /// Backing field for VerifyFolderAccButton property
        /// </summary>
        private Button fVerifyFolderAccButton;

        /// <summary>
        /// Backing field for VerifyFolderAccText property
        /// </summary>
        private Text fVerifyFolderAccText;

        /// <summary>
        /// Backing field for DialingSettingsGroup property
        /// </summary>
        private Group fDialingSettingsGroup;

        /// <summary>
        /// Backing field for DialingSettingsText property
        /// </summary>
        private Text fDialingSettingsText;

        /// <summary>
        /// Backing field for MaximumRetryAttDup0Text property
        /// </summary>
        private Text fMaximumRetryAttDup0Text;

        /// <summary>
        /// Backing field for MaximumRetryAttDup1Text property
        /// </summary>
        private Text fMaximumRetryAttDup1Text;

        /// <summary>
        /// Backing field for TextBoxa0efb839Edit property
        /// </summary>
        private Edit fTextBoxa0efb839Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup14Pane property
        /// </summary>
        private Pane fScrollViewerPARDup14Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup15ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup15ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup15ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup15ScrollBar;

        /// <summary>
        /// Backing field for RetryIntervalmiDup0Text property
        /// </summary>
        private Text fRetryIntervalmiDup0Text;

        /// <summary>
        /// Backing field for RetryIntervalmiDup1Text property
        /// </summary>
        private Text fRetryIntervalmiDup1Text;

        /// <summary>
        /// Backing field for TextBox1b041501Edit property
        /// </summary>
        private Edit fTextBox1b041501Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup15Pane property
        /// </summary>
        private Pane fScrollViewerPARDup15Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup16ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup16ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup16ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup16ScrollBar;

        /// <summary>
        /// Backing field for InputSettingsGrGroup property
        /// </summary>
        private Group fInputSettingsGrGroup;

        /// <summary>
        /// Backing field for InputSettingsTeText property
        /// </summary>
        private Text fInputSettingsTeText;

        /// <summary>
        /// Backing field for NotificationText property
        /// </summary>
        private Text fNotificationText;

        /// <summary>
        /// Backing field for NotificationTexText property
        /// </summary>
        private Text fNotificationTexText;

        /// <summary>
        /// Backing field for ComboBoxd7ebe04ComboBox property
        /// </summary>
        private ComboBox fComboBoxd7ebe04ComboBox;

        /// <summary>
        /// Backing field for ErrorCorrectionDup0Text property
        /// </summary>
        private Text fErrorCorrectionDup0Text;

        /// <summary>
        /// Backing field for ErrorCorrectionDup1Text property
        /// </summary>
        private Text fErrorCorrectionDup1Text;

        /// <summary>
        /// Backing field for ComboBox7a33df3ComboBox property
        /// </summary>
        private ComboBox fComboBox7a33df3ComboBox;

        /// <summary>
        /// Backing field for NotificationTimDup0Text property
        /// </summary>
        private Text fNotificationTimDup0Text;

        /// <summary>
        /// Backing field for NotificationTimDup1Text property
        /// </summary>
        private Text fNotificationTimDup1Text;

        /// <summary>
        /// Backing field for TextBox025adef9Edit property
        /// </summary>
        private Edit fTextBox025adef9Edit;

        /// <summary>
        /// Backing field for ScrollViewerPARDup16Pane property
        /// </summary>
        private Pane fScrollViewerPARDup16Pane;

        /// <summary>
        /// Backing field for ScrollBarVerticDup17ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup17ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup17ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup17ScrollBar;

        /// <summary>
        /// Backing field for OutputSettingsGGroup property
        /// </summary>
        private Group fOutputSettingsGGroup;

        /// <summary>
        /// Backing field for OutputSettingsTText property
        /// </summary>
        private Text fOutputSettingsTText;

        /// <summary>
        /// Backing field for TransmissionSpeDup0Text property
        /// </summary>
        private Text fTransmissionSpeDup0Text;

        /// <summary>
        /// Backing field for TransmissionSpeDup1Text property
        /// </summary>
        private Text fTransmissionSpeDup1Text;

        /// <summary>
        /// Backing field for ComboBox41eac0dComboBox property
        /// </summary>
        private ComboBox fComboBox41eac0dComboBox;

        /// <summary>
        /// Backing field for CoverPageText property
        /// </summary>
        private Text fCoverPageText;

        /// <summary>
        /// Backing field for CoverPageTextBlText property
        /// </summary>
        private Text fCoverPageTextBlText;

        /// <summary>
        /// Backing field for ComboBox8070d42ComboBox property
        /// </summary>
        private ComboBox fComboBox8070d42ComboBox;

        /// <summary>
        /// Backing field for ScrollBarVerticDup18ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup18ScrollBar;

        /// <summary>
        /// Backing field for RepeatButtonLinDup0Button property
        /// </summary>
        private Button fRepeatButtonLinDup0Button;

        /// <summary>
        /// Backing field for RepeatButtonPagDup0Button property
        /// </summary>
        private Button fRepeatButtonPagDup0Button;

        /// <summary>
        /// Backing field for RepeatButtonPagDup1Button property
        /// </summary>
        private Button fRepeatButtonPagDup1Button;

        /// <summary>
        /// Backing field for ThumbThumb property
        /// </summary>
        private Thumb fThumbThumb;

        /// <summary>
        /// Backing field for RepeatButtonLinDup1Button property
        /// </summary>
        private Button fRepeatButtonLinDup1Button;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup18ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup18ScrollBar;

        /// <summary>
        /// Backing field for SystemWindowsCoDup4TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup4TabItem;

        /// <summary>
        /// Backing field for SendtoFolderTexDup0Text property
        /// </summary>
        private Text fSendtoFolderTexDup0Text;

        /// <summary>
        /// Backing field for SendtoFolderTexDup1Text property
        /// </summary>
        private Text fSendtoFolderTexDup1Text;

        /// <summary>
        /// Backing field for Text7a57f43ecb1Text property
        /// </summary>
        private Text fText7a57f43ecb1Text;

        /// <summary>
        /// Backing field for Text654b650dd19Text property
        /// </summary>
        private Text fText654b650dd19Text;

        /// <summary>
        /// Backing field for SystemWindowsCoDup5TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup5TabItem;

        /// <summary>
        /// Backing field for WorkflowsTextmWText property
        /// </summary>
        private Text fWorkflowsTextmWText;

        /// <summary>
        /// Backing field for WorkflowsTextBlText property
        /// </summary>
        private Text fWorkflowsTextBlText;

        /// <summary>
        /// Backing field for Text22D9C34E84CText property
        /// </summary>
        private Text fText22D9C34E84CText;

        /// <summary>
        /// Backing field for TextC8D15BD39C8Text property
        /// </summary>
        private Text fTextC8D15BD39C8Text;

        /// <summary>
        /// Backing field for SystemWindowsCoDup6TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup6TabItem;

        /// <summary>
        /// Backing field for AddressingTextmText property
        /// </summary>
        private Text fAddressingTextmText;

        /// <summary>
        /// Backing field for AddressingTextBText property
        /// </summary>
        private Text fAddressingTextBText;

        /// <summary>
        /// Backing field for Text47EB5CBA4D1Text property
        /// </summary>
        private Text fText47EB5CBA4D1Text;

        /// <summary>
        /// Backing field for Text0757E148179Text property
        /// </summary>
        private Text fText0757E148179Text;

        /// <summary>
        /// Backing field for DeviceConfiguraTabItem property
        /// </summary>
        private TabItem fDeviceConfiguraTabItem;

        /// <summary>
        /// Backing field for DeviceConfiguraText property
        /// </summary>
        private Text fDeviceConfiguraText;

        /// <summary>
        /// Backing field for TemplateConfiguTabItem property
        /// </summary>
        private TabItem fTemplateConfiguTabItem;

        /// <summary>
        /// Backing field for TemplateConfiguText property
        /// </summary>
        private Text fTemplateConfiguText;

        /// <summary>
        /// Backing field for LogTabItem9b4f3TabItem property
        /// </summary>
        private TabItem fLogTabItem9b4f3TabItem;

        /// <summary>
        /// Backing field for LogTextBlockText property
        /// </summary>
        private Text fLogTextBlockText;

        /// <summary>
        /// Backing field for SystemWindowsCoDup7TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup7TabItem;

        /// <summary>
        /// Backing field for SecurityTextmSeText property
        /// </summary>
        private Text fSecurityTextmSeText;

        /// <summary>
        /// Backing field for SecurityTextBloText property
        /// </summary>
        private Text fSecurityTextBloText;

        /// <summary>
        /// Backing field for Text8A7A84DB894Text property
        /// </summary>
        private Text fText8A7A84DB894Text;

        /// <summary>
        /// Backing field for Text16F78FB18FFText property
        /// </summary>
        private Text fText16F78FB18FFText;

        /// <summary>
        /// Backing field for SystemWindowsCoDup8TabItem property
        /// </summary>
        private TabItem fSystemWindowsCoDup8TabItem;

        /// <summary>
        /// Backing field for AnalyticsTextmAText property
        /// </summary>
        private Text fAnalyticsTextmAText;

        /// <summary>
        /// Backing field for AnalyticsTextBlText property
        /// </summary>
        private Text fAnalyticsTextBlText;

        /// <summary>
        /// Backing field for AboutTabItemf45TabItem property
        /// </summary>
        private TabItem fAboutTabItemf45TabItem;

        /// <summary>
        /// Backing field for AboutTextBlockText property
        /// </summary>
        private Text fAboutTextBlockText;

        /// <summary>
        /// The System Ip
        /// </summary>
        private string serverIP;

        /// <summary>
        /// Initializes a new instance of the <see cref="DSS_InternetFaxSetUp"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public DSS_InternetFaxSetUp(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSS_InternetFaxSetUp"/> class using the default UIAFramework.
        /// </summary>
        public DSS_InternetFaxSetUp()
        {
            Desktop = new Desktop();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSS_InternetFaxSetUp"/> class using the default UIAFramework.
        /// </summary>
        /// <param name="Address">
        /// The Server IP address.
        /// </param>
        public DSS_InternetFaxSetUp(string Address)
        {
            Desktop = new Desktop();
            serverIP = Address;
        }
        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinWindow
        {
            get
            {
                if (null == fHPDigitalSendinWindow)
                {
                    fHPDigitalSendinWindow = new Window("HPDigitalSendinWindow", Desktop);
                    fHPDigitalSendinWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AB81453F-68AD-4243-ACA8-B4D9362C4ED4");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software Configuration (Server IP Address: {serverIP})");
                }

                return fHPDigitalSendinWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window AddSMTPGatewayWWindow
        {
            get
            {
                if (null == fAddSMTPGatewayWWindow)
                {
                    fAddSMTPGatewayWWindow = new Window("AddSMTPGatewayWWindow", HPDigitalSendinWindow);
                    fAddSMTPGatewayWWindow.UIMap.Scope = UIASeachScope.Children;
                    fAddSMTPGatewayWWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fAddSMTPGatewayWWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"840DA3C5-5E6C-4629-AB1A-22BEE08AFD2E");
                    fAddSMTPGatewayWWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add SMTP Gateway");
                }

                return fAddSMTPGatewayWWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar AddSMTPGatewayTitleBar
        {
            get
            {
                if (null == fAddSMTPGatewayTitleBar)
                {
                    fAddSMTPGatewayTitleBar = new TitleBar("AddSMTPGatewayTitleBar", AddSMTPGatewayWWindow);
                    fAddSMTPGatewayTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fAddSMTPGatewayTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fAddSMTPGatewayTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add SMTP Gateway");
                }

                return fAddSMTPGatewayTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyDup0MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup0MenuBar)
                {
                    fSystemMenuBarSyDup0MenuBar = new MenuBar("SystemMenuBarSyDup0MenuBar", AddSMTPGatewayTitleBar);
                    fSystemMenuBarSyDup0MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyDup0MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1Dup0MenuItem
        {
            get
            {
                if (null == fSystemItem1Dup0MenuItem)
                {
                    fSystemItem1Dup0MenuItem = new MenuItem("SystemItem1Dup0MenuItem", SystemMenuBarSyDup0MenuBar);
                    fSystemItem1Dup0MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1Dup0MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1Dup0MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1Dup0MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MinimizeMinimizDup0Button
        {
            get
            {
                if (null == fMinimizeMinimizDup0Button)
                {
                    fMinimizeMinimizDup0Button = new Button("MinimizeMinimizDup0Button", AddSMTPGatewayTitleBar);
                    fMinimizeMinimizDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                    fMinimizeMinimizDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                }

                return fMinimizeMinimizDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MaximizeMaximizButton
        {
            get
            {
                if (null == fMaximizeMaximizButton)
                {
                    fMaximizeMaximizButton = new Button("MaximizeMaximizButton", AddSMTPGatewayTitleBar);
                    fMaximizeMaximizButton.UIMap.Scope = UIASeachScope.Children;
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Maximize");
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximize");
                }

                return fMaximizeMaximizButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseDup0Button
        {
            get
            {
                if (null == fCloseCloseDup0Button)
                {
                    fCloseCloseDup0Button = new Button("CloseCloseDup0Button", AddSMTPGatewayTitleBar);
                    fCloseCloseDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button SMTPPromptOKButton
        {
            get
            {
                if (null == fOKButton4D1AF73Button)
                {
                    fOKButton4D1AF73Button = new Button("OKButton4D1AF73Button", AddSMTPGatewayWWindow);
                    fOKButton4D1AF73Button.UIMap.Scope = UIASeachScope.Children;
                    fOKButton4D1AF73Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButton4D1AF73Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4D1AF739-ECAD-44e8-B66C-FEEC4133B6E5");
                    fOKButton4D1AF73Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButton4D1AF73Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OKTextBlockDup0Text
        {
            get
            {
                if (null == fOKTextBlockDup0Text)
                {
                    fOKTextBlockDup0Text = new Text("OKTextBlockDup0Text", SMTPPromptOKButton);
                    fOKTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fOKTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOKTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button PromptCancelButton
        {
            get
            {
                if (null == fCancelButton132Button)
                {
                    fCancelButton132Button = new Button("CancelButton132Button", AddSMTPGatewayWWindow);
                    fCancelButton132Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton132Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButton132Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"13254308-da5f-4048-ac9d-c6c591c58d28");
                    fCancelButton132Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButton132Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CancelTextBlockDup0Text
        {
            get
            {
                if (null == fCancelTextBlockDup0Text)
                {
                    fCancelTextBlockDup0Text = new Text("CancelTextBlockDup0Text", PromptCancelButton);
                    fCancelTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fCancelTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCancelTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button HelpButtonaaafdButton
        {
            get
            {
                if (null == fHelpButtonaaafdButton)
                {
                    fHelpButtonaaafdButton = new Button("HelpButtonaaafdButton", AddSMTPGatewayWWindow);
                    fHelpButtonaaafdButton.UIMap.Scope = UIASeachScope.Children;
                    fHelpButtonaaafdButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fHelpButtonaaafdButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"aaafdab3-ca58-4c44-b86c-124bd7c48d75");
                    fHelpButtonaaafdButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpButtonaaafdButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HelpTextBlockDup0Text
        {
            get
            {
                if (null == fHelpTextBlockDup0Text)
                {
                    fHelpTextBlockDup0Text = new Text("HelpTextBlockDup0Text", HelpButtonaaafdButton);
                    fHelpTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fHelpTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHelpTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group OutgoingEmailSeDup0Group
        {
            get
            {
                if (null == fOutgoingEmailSeDup0Group)
                {
                    fOutgoingEmailSeDup0Group = new Group("OutgoingEmailSeDup0Group", AddSMTPGatewayWWindow);
                    fOutgoingEmailSeDup0Group.UIMap.Scope = UIASeachScope.Children;
                    fOutgoingEmailSeDup0Group.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fOutgoingEmailSeDup0Group.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"326ac2c5-60cf-4403-99e0-f881bec7f17c");
                    fOutgoingEmailSeDup0Group.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Outgoing E-mail Server");
                }

                return fOutgoingEmailSeDup0Group;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OutgoingEmailSeDup0Text
        {
            get
            {
                if (null == fOutgoingEmailSeDup0Text)
                {
                    fOutgoingEmailSeDup0Text = new Text("OutgoingEmailSeDup0Text", OutgoingEmailSeDup0Group);
                    fOutgoingEmailSeDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fOutgoingEmailSeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOutgoingEmailSeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Outgoing E-mail Server");
                }

                return fOutgoingEmailSeDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerDup0Pane
        {
            get
            {
                if (null == fScrollViewerDup0Pane)
                {
                    fScrollViewerDup0Pane = new Pane("ScrollViewerDup0Pane", OutgoingEmailSeDup0Group);
                    fScrollViewerDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                }

                return fScrollViewerDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ServerNameorAddDup0Text
        {
            get
            {
                if (null == fServerNameorAddDup0Text)
                {
                    fServerNameorAddDup0Text = new Text("ServerNameorAddDup0Text", ScrollViewerDup0Pane);
                    fServerNameorAddDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fServerNameorAddDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fServerNameorAddDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ae397b9e-4e7c-4430-a234-2a778bdc954a");
                    fServerNameorAddDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Server Name or Address");
                }

                return fServerNameorAddDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ServerNameorAddDup1Text
        {
            get
            {
                if (null == fServerNameorAddDup1Text)
                {
                    fServerNameorAddDup1Text = new Text("ServerNameorAddDup1Text", ServerNameorAddDup0Text);
                    fServerNameorAddDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fServerNameorAddDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fServerNameorAddDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Server Name or Address");
                }

                return fServerNameorAddDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PortText2b91632Text
        {
            get
            {
                if (null == fPortText2b91632Text)
                {
                    fPortText2b91632Text = new Text("PortText2b91632Text", ScrollViewerDup0Pane);
                    fPortText2b91632Text.UIMap.Scope = UIASeachScope.Children;
                    fPortText2b91632Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fPortText2b91632Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2b916328-44e0-4bf1-aae1-a738afcd1fff");
                    fPortText2b91632Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Port");
                }

                return fPortText2b91632Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PortTextBlockText
        {
            get
            {
                if (null == fPortTextBlockText)
                {
                    fPortTextBlockText = new Text("PortTextBlockText", PortText2b91632Text);
                    fPortTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fPortTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPortTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Port");
                }

                return fPortTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit ServerAddressEditTextBox
        {
            get
            {
                if (null == fTextBox59D047B3Edit)
                {
                    fTextBox59D047B3Edit = new Edit("TextBox59D047B3Edit", ScrollViewerDup0Pane);
                    fTextBox59D047B3Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox59D047B3Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox59D047B3Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"59D047B3-17E9-4904-8B4B-F9EAD3B5102C");
                }

                return fTextBox59D047B3Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup0Pane
        {
            get
            {
                if (null == fScrollViewerPARDup0Pane)
                {
                    fScrollViewerPARDup0Pane = new Pane("ScrollViewerPARDup0Pane", ServerAddressEditTextBox);
                    fScrollViewerPARDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup0ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup0ScrollBar)
                {
                    fScrollBarVerticDup0ScrollBar = new ScrollBar("ScrollBarVerticDup0ScrollBar", ScrollViewerPARDup0Pane);
                    fScrollBarVerticDup0ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup0ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup0ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup0ScrollBar)
                {
                    fScrollBarHorizoDup0ScrollBar = new ScrollBar("ScrollBarHorizoDup0ScrollBar", ScrollViewerPARDup0Pane);
                    fScrollBarHorizoDup0ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup0ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit PortEditTextBox
        {
            get
            {
                if (null == fTextBox2a0b0b2fEdit)
                {
                    fTextBox2a0b0b2fEdit = new Edit("TextBox2a0b0b2fEdit", ScrollViewerDup0Pane);
                    fTextBox2a0b0b2fEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox2a0b0b2fEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox2a0b0b2fEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2a0b0b2f-095d-4f1f-81bb-5be81b8cb06f");
                }

                return fTextBox2a0b0b2fEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup1Pane
        {
            get
            {
                if (null == fScrollViewerPARDup1Pane)
                {
                    fScrollViewerPARDup1Pane = new Pane("ScrollViewerPARDup1Pane", PortEditTextBox);
                    fScrollViewerPARDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup1ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup1ScrollBar)
                {
                    fScrollBarVerticDup1ScrollBar = new ScrollBar("ScrollBarVerticDup1ScrollBar", ScrollViewerPARDup1Pane);
                    fScrollBarVerticDup1ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup1ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup1ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup1ScrollBar)
                {
                    fScrollBarHorizoDup1ScrollBar = new ScrollBar("ScrollBarHorizoDup1ScrollBar", ScrollViewerPARDup1Pane);
                    fScrollBarHorizoDup1ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup1ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button AutoFindButton3Button
        {
            get
            {
                if (null == fAutoFindButton3Button)
                {
                    fAutoFindButton3Button = new Button("AutoFindButton3Button", ScrollViewerDup0Pane);
                    fAutoFindButton3Button.UIMap.Scope = UIASeachScope.Children;
                    fAutoFindButton3Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fAutoFindButton3Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3882885e-72dd-430d-9da3-acbaadb6b0ae");
                    fAutoFindButton3Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Auto Find...");
                }

                return fAutoFindButton3Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AutoFindTextBloText
        {
            get
            {
                if (null == fAutoFindTextBloText)
                {
                    fAutoFindTextBloText = new Text("AutoFindTextBloText", AutoFindButton3Button);
                    fAutoFindTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fAutoFindTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAutoFindTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Auto Find...");
                }

                return fAutoFindTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox EnableSMTPSSLCheckBox
        {
            get
            {
                if (null == fEnableSMTPSSLPrCheckBox)
                {
                    fEnableSMTPSSLPrCheckBox = new CheckBox("EnableSMTPSSLPrCheckBox", ScrollViewerDup0Pane);
                    fEnableSMTPSSLPrCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fEnableSMTPSSLPrCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fEnableSMTPSSLPrCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c1e3fb74-e5a8-4546-bd7b-027161f2e44e");
                    fEnableSMTPSSLPrCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enable SMTP SSL Protocol");
                }

                return fEnableSMTPSSLPrCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EnableSMTPSSLPrText
        {
            get
            {
                if (null == fEnableSMTPSSLPrText)
                {
                    fEnableSMTPSSLPrText = new Text("EnableSMTPSSLPrText", EnableSMTPSSLCheckBox);
                    fEnableSMTPSSLPrText.UIMap.Scope = UIASeachScope.Children;
                    fEnableSMTPSSLPrText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEnableSMTPSSLPrText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enable SMTP SSL Protocol");
                }

                return fEnableSMTPSSLPrText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox ServerRequiresAuthenticationCheckBox
        {
            get
            {
                if (null == fServerRequiresACheckBox)
                {
                    fServerRequiresACheckBox = new CheckBox("ServerRequiresACheckBox", ScrollViewerDup0Pane);
                    fServerRequiresACheckBox.UIMap.Scope = UIASeachScope.Children;
                    fServerRequiresACheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fServerRequiresACheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"79c00105-f651-44fd-974b-f86a292a0ace");
                    fServerRequiresACheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Server Requires Authentication");
                }

                return fServerRequiresACheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ServerRequiresAText
        {
            get
            {
                if (null == fServerRequiresAText)
                {
                    fServerRequiresAText = new Text("ServerRequiresAText", ServerRequiresAuthenticationCheckBox);
                    fServerRequiresAText.UIMap.Scope = UIASeachScope.Children;
                    fServerRequiresAText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fServerRequiresAText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Server Requires Authentication");
                }

                return fServerRequiresAText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox9084316ComboBox
        {
            get
            {
                if (null == fComboBox9084316ComboBox)
                {
                    fComboBox9084316ComboBox = new ComboBox("ComboBox9084316ComboBox", ScrollViewerDup0Pane);
                    fComboBox9084316ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox9084316ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox9084316ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9084316f-31bb-4c78-811d-f3093a832b2d");
                }

                return fComboBox9084316ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SMTPcredentialsText
        {
            get
            {
                if (null == fSMTPcredentialsText)
                {
                    fSMTPcredentialsText = new Text("SMTPcredentialsText", ScrollViewerDup0Pane);
                    fSMTPcredentialsText.UIMap.Scope = UIASeachScope.Children;
                    fSMTPcredentialsText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSMTPcredentialsText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4853565D-16F4-499b-83B7-356EA4BA6263");
                    fSMTPcredentialsText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"SMTP credentials are required by DSS in order to notify administrators of critical errors by email.");
                }

                return fSMTPcredentialsText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text UsernameTexted5Text
        {
            get
            {
                if (null == fUsernameTexted5Text)
                {
                    fUsernameTexted5Text = new Text("UsernameTexted5Text", ScrollViewerDup0Pane);
                    fUsernameTexted5Text.UIMap.Scope = UIASeachScope.Children;
                    fUsernameTexted5Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fUsernameTexted5Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ed54b921-5379-4cb1-8b00-523e82ff1387");
                    fUsernameTexted5Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Username");
                }

                return fUsernameTexted5Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text UsernameTextBloDup0Text
        {
            get
            {
                if (null == fUsernameTextBloDup0Text)
                {
                    fUsernameTextBloDup0Text = new Text("UsernameTextBloDup0Text", UsernameTexted5Text);
                    fUsernameTextBloDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fUsernameTextBloDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fUsernameTextBloDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Username");
                }

                return fUsernameTextBloDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit SMTPUserNameEditTextBox
        {
            get
            {
                if (null == fTextBoxc267ec0dEdit)
                {
                    fTextBoxc267ec0dEdit = new Edit("TextBoxc267ec0dEdit", ScrollViewerDup0Pane);
                    fTextBoxc267ec0dEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxc267ec0dEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxc267ec0dEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c267ec0d-ad84-4ba9-901f-ce874b6265de");
                }

                return fTextBoxc267ec0dEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup2Pane
        {
            get
            {
                if (null == fScrollViewerPARDup2Pane)
                {
                    fScrollViewerPARDup2Pane = new Pane("ScrollViewerPARDup2Pane", SMTPUserNameEditTextBox);
                    fScrollViewerPARDup2Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup2Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup2Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup2Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup2ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup2ScrollBar)
                {
                    fScrollBarVerticDup2ScrollBar = new ScrollBar("ScrollBarVerticDup2ScrollBar", ScrollViewerPARDup2Pane);
                    fScrollBarVerticDup2ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup2ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup2ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup2ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup2ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup2ScrollBar)
                {
                    fScrollBarHorizoDup2ScrollBar = new ScrollBar("ScrollBarHorizoDup2ScrollBar", ScrollViewerPARDup2Pane);
                    fScrollBarHorizoDup2ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup2ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup2ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup2ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PasswordTextbc5Text
        {
            get
            {
                if (null == fPasswordTextbc5Text)
                {
                    fPasswordTextbc5Text = new Text("PasswordTextbc5Text", ScrollViewerDup0Pane);
                    fPasswordTextbc5Text.UIMap.Scope = UIASeachScope.Children;
                    fPasswordTextbc5Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fPasswordTextbc5Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"bc5c15ce-065b-4656-999c-42cd98015678");
                    fPasswordTextbc5Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Password");
                }

                return fPasswordTextbc5Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PasswordTextBloDup0Text
        {
            get
            {
                if (null == fPasswordTextBloDup0Text)
                {
                    fPasswordTextBloDup0Text = new Text("PasswordTextBloDup0Text", PasswordTextbc5Text);
                    fPasswordTextBloDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fPasswordTextBloDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPasswordTextBloDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Password");
                }

                return fPasswordTextBloDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit SMTPPasswordEditBox
        {
            get
            {
                if (null == fPasswordBox1c44Edit)
                {
                    fPasswordBox1c44Edit = new Edit("PasswordBox1c44Edit", ScrollViewerDup0Pane);
                    fPasswordBox1c44Edit.UIMap.Scope = UIASeachScope.Children;
                    fPasswordBox1c44Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"PasswordBox");
                    fPasswordBox1c44Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1c4442f4-a2e8-4f6c-b04c-53bc8858401e");
                }

                return fPasswordBox1c44Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup3Pane
        {
            get
            {
                if (null == fScrollViewerPARDup3Pane)
                {
                    fScrollViewerPARDup3Pane = new Pane("ScrollViewerPARDup3Pane", SMTPPasswordEditBox);
                    fScrollViewerPARDup3Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup3Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup3Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup3Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup3ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup3ScrollBar)
                {
                    fScrollBarVerticDup3ScrollBar = new ScrollBar("ScrollBarVerticDup3ScrollBar", ScrollViewerPARDup3Pane);
                    fScrollBarVerticDup3ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup3ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup3ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup3ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup3ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup3ScrollBar)
                {
                    fScrollBarHorizoDup3ScrollBar = new ScrollBar("ScrollBarHorizoDup3ScrollBar", ScrollViewerPARDup3Pane);
                    fScrollBarHorizoDup3ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup3ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup3ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup3ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group ServerUsageGrouGroup
        {
            get
            {
                if (null == fServerUsageGrouGroup)
                {
                    fServerUsageGrouGroup = new Group("ServerUsageGrouGroup", ScrollViewerDup0Pane);
                    fServerUsageGrouGroup.UIMap.Scope = UIASeachScope.Children;
                    fServerUsageGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fServerUsageGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"FD0F7D22-15E5-44DC-B9FC-77D76136119A");
                    fServerUsageGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Server Usage");
                }

                return fServerUsageGrouGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ServerUsageTextDup0Text
        {
            get
            {
                if (null == fServerUsageTextDup0Text)
                {
                    fServerUsageTextDup0Text = new Text("ServerUsageTextDup0Text", ServerUsageGrouGroup);
                    fServerUsageTextDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fServerUsageTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fServerUsageTextDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Server Usage");
                }

                return fServerUsageTextDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox EmailSendscanneCheckBox
        {
            get
            {
                if (null == fEmailSendscanneCheckBox)
                {
                    fEmailSendscanneCheckBox = new CheckBox("EmailSendscanneCheckBox", ServerUsageGrouGroup);
                    fEmailSendscanneCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fEmailSendscanneCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fEmailSendscanneCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"0C1C0038-08CA-4E40-ACB4-3B2614A195BB");
                    fEmailSendscanneCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"E-mail:  Send scanned documents and job status notifications.");
                }

                return fEmailSendscanneCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EmailSendscanneText
        {
            get
            {
                if (null == fEmailSendscanneText)
                {
                    fEmailSendscanneText = new Text("EmailSendscanneText", EmailSendscanneCheckBox);
                    fEmailSendscanneText.UIMap.Scope = UIASeachScope.Children;
                    fEmailSendscanneText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEmailSendscanneText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"E-mail:  Send scanned documents and job status notifications.");
                }

                return fEmailSendscanneText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox AutomatedEmailsCheckBox
        {
            get
            {
                if (null == fAutomatedEmailsCheckBox)
                {
                    fAutomatedEmailsCheckBox = new CheckBox("AutomatedEmailsCheckBox", ServerUsageGrouGroup);
                    fAutomatedEmailsCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fAutomatedEmailsCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fAutomatedEmailsCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AA73624C-09F6-4418-BEF4-ACBA6F08BAD8");
                    fAutomatedEmailsCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Automated E-mails: device alerts sent to an administrator or archived faxes are examples of automated e-mails sent by this device.");
                }

                return fAutomatedEmailsCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AutomatedEmailsText
        {
            get
            {
                if (null == fAutomatedEmailsText)
                {
                    fAutomatedEmailsText = new Text("AutomatedEmailsText", AutomatedEmailsCheckBox);
                    fAutomatedEmailsText.UIMap.Scope = UIASeachScope.Children;
                    fAutomatedEmailsText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAutomatedEmailsText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Automated E-mails: device alerts sent to an administrator or archived faxes are examples of automated e-mails sent by this device.");
                }

                return fAutomatedEmailsText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox FaxsendfaxeswheCheckBox
        {
            get
            {
                if (null == fFaxsendfaxeswheCheckBox)
                {
                    fFaxsendfaxeswheCheckBox = new CheckBox("FaxsendfaxeswheCheckBox", ServerUsageGrouGroup);
                    fFaxsendfaxeswheCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fFaxsendfaxeswheCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fFaxsendfaxeswheCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"D1781AEB-F16A-423F-B812-E2DFBBA9EBF4");
                    fFaxsendfaxeswheCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax: send faxes when the fax send method is set to Internet Fax");
                }

                return fFaxsendfaxeswheCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxsendfaxeswheText
        {
            get
            {
                if (null == fFaxsendfaxeswheText)
                {
                    fFaxsendfaxeswheText = new Text("FaxsendfaxeswheText", FaxsendfaxeswheCheckBox);
                    fFaxsendfaxeswheText.UIMap.Scope = UIASeachScope.Children;
                    fFaxsendfaxeswheText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxsendfaxeswheText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax: send faxes when the fax send method is set to Internet Fax");
                }

                return fFaxsendfaxeswheText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SplitemailsiflaDup0Text
        {
            get
            {
                if (null == fSplitemailsiflaDup0Text)
                {
                    fSplitemailsiflaDup0Text = new Text("SplitemailsiflaDup0Text", ScrollViewerDup0Pane);
                    fSplitemailsiflaDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fSplitemailsiflaDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fSplitemailsiflaDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"a326a626-3d32-4137-9589-403d8da4608e");
                    fSplitemailsiflaDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Split e-mails if larger than (MB)");
                }

                return fSplitemailsiflaDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SplitemailsiflaDup1Text
        {
            get
            {
                if (null == fSplitemailsiflaDup1Text)
                {
                    fSplitemailsiflaDup1Text = new Text("SplitemailsiflaDup1Text", SplitemailsiflaDup0Text);
                    fSplitemailsiflaDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fSplitemailsiflaDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSplitemailsiflaDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Split e-mails if larger than (MB)");
                }

                return fSplitemailsiflaDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text A010000TextDFBFText
        {
            get
            {
                if (null == fA010000TextDFBFText)
                {
                    fA010000TextDFBFText = new Text("A010000TextDFBFText", ScrollViewerDup0Pane);
                    fA010000TextDFBFText.UIMap.Scope = UIASeachScope.Children;
                    fA010000TextDFBFText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fA010000TextDFBFText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"DFBF0092-9A85-4ffb-A949-CABC5463FA08");
                    fA010000TextDFBFText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"(0-100.00)");
                }

                return fA010000TextDFBFText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text A010000TextBlocText
        {
            get
            {
                if (null == fA010000TextBlocText)
                {
                    fA010000TextBlocText = new Text("A010000TextBlocText", A010000TextDFBFText);
                    fA010000TextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fA010000TextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fA010000TextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"(0-100.00)");
                }

                return fA010000TextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit SplitSizeEditTextBox
        {
            get
            {
                if (null == fTextBoxDDE87868Edit)
                {
                    fTextBoxDDE87868Edit = new Edit("TextBoxDDE87868Edit", ScrollViewerDup0Pane);
                    fTextBoxDDE87868Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxDDE87868Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxDDE87868Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"DDE87868-B848-44c3-83A2-D36371EC905E");
                }

                return fTextBoxDDE87868Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup4Pane
        {
            get
            {
                if (null == fScrollViewerPARDup4Pane)
                {
                    fScrollViewerPARDup4Pane = new Pane("ScrollViewerPARDup4Pane", SplitSizeEditTextBox);
                    fScrollViewerPARDup4Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup4Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup4Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup4Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup4ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup4ScrollBar)
                {
                    fScrollBarVerticDup4ScrollBar = new ScrollBar("ScrollBarVerticDup4ScrollBar", ScrollViewerPARDup4Pane);
                    fScrollBarVerticDup4ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup4ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup4ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup4ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup4ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup4ScrollBar)
                {
                    fScrollBarHorizoDup4ScrollBar = new ScrollBar("ScrollBarHorizoDup4ScrollBar", ScrollViewerPARDup4Pane);
                    fScrollBarHorizoDup4ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup4ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup4ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup4ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TheemailwillbesText
        {
            get
            {
                if (null == fTheemailwillbesText)
                {
                    fTheemailwillbesText = new Text("TheemailwillbesText", ScrollViewerDup0Pane);
                    fTheemailwillbesText.UIMap.Scope = UIASeachScope.Children;
                    fTheemailwillbesText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTheemailwillbesText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6B2253DE-3023-421a-A4C6-BEA68552666B");
                    fTheemailwillbesText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"The e-mail will be split into multiple e-mails if larger than the specified size. If the value is 0 the e-mail will not be split.");
                }

                return fTheemailwillbesText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SendatestemailtDup0Text
        {
            get
            {
                if (null == fSendatestemailtDup0Text)
                {
                    fSendatestemailtDup0Text = new Text("SendatestemailtDup0Text", ScrollViewerDup0Pane);
                    fSendatestemailtDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fSendatestemailtDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fSendatestemailtDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"233fbc23-6710-42cd-9153-af7634b5178f");
                    fSendatestemailtDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send a test e-mail to");
                }

                return fSendatestemailtDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SendatestemailtDup1Text
        {
            get
            {
                if (null == fSendatestemailtDup1Text)
                {
                    fSendatestemailtDup1Text = new Text("SendatestemailtDup1Text", SendatestemailtDup0Text);
                    fSendatestemailtDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fSendatestemailtDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSendatestemailtDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send a test e-mail to");
                }

                return fSendatestemailtDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox5d53755ComboBox
        {
            get
            {
                if (null == fComboBox5d53755ComboBox)
                {
                    fComboBox5d53755ComboBox = new ComboBox("ComboBox5d53755ComboBox", ScrollViewerDup0Pane);
                    fComboBox5d53755ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox5d53755ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox5d53755ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"5d537551-622f-4c7e-8fd6-7114ad009200");
                }

                return fComboBox5d53755ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxPARTEdiEdit
        {
            get
            {
                if (null == fTextBoxPARTEdiEdit)
                {
                    fTextBoxPARTEdiEdit = new Edit("TextBoxPARTEdiEdit", ComboBox5d53755ComboBox);
                    fTextBoxPARTEdiEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxPARTEdiEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxPARTEdiEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_EditableTextBox");
                }

                return fTextBoxPARTEdiEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup5Pane
        {
            get
            {
                if (null == fScrollViewerPARDup5Pane)
                {
                    fScrollViewerPARDup5Pane = new Pane("ScrollViewerPARDup5Pane", TextBoxPARTEdiEdit);
                    fScrollViewerPARDup5Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup5Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup5Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup5Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup5ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup5ScrollBar)
                {
                    fScrollBarVerticDup5ScrollBar = new ScrollBar("ScrollBarVerticDup5ScrollBar", ScrollViewerPARDup5Pane);
                    fScrollBarVerticDup5ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup5ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup5ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup5ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup5ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup5ScrollBar)
                {
                    fScrollBarHorizoDup5ScrollBar = new ScrollBar("ScrollBarHorizoDup5ScrollBar", ScrollViewerPARDup5Pane);
                    fScrollBarHorizoDup5ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup5ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup5ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup5ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button SendButton9c885Button
        {
            get
            {
                if (null == fSendButton9c885Button)
                {
                    fSendButton9c885Button = new Button("SendButton9c885Button", ScrollViewerDup0Pane);
                    fSendButton9c885Button.UIMap.Scope = UIASeachScope.Children;
                    fSendButton9c885Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fSendButton9c885Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9c885cbc-5b93-4dbb-8fb5-151e5e64afe7");
                    fSendButton9c885Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send");
                }

                return fSendButton9c885Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SendTextBlockText
        {
            get
            {
                if (null == fSendTextBlockText)
                {
                    fSendTextBlockText = new Text("SendTextBlockText", SendButton9c885Button);
                    fSendTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fSendTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSendTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send");
                }

                return fSendTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup6ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup6ScrollBar)
                {
                    fScrollBarVerticDup6ScrollBar = new ScrollBar("ScrollBarVerticDup6ScrollBar", ScrollViewerDup0Pane);
                    fScrollBarVerticDup6ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup6ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup6ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup6ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup6ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup6ScrollBar)
                {
                    fScrollBarHorizoDup6ScrollBar = new ScrollBar("ScrollBarHorizoDup6ScrollBar", ScrollViewerDup0Pane);
                    fScrollBarHorizoDup6ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup6ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup6ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup6ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar HPDigitalSendinTitleBar
        {
            get
            {
                if (null == fHPDigitalSendinTitleBar)
                {
                    fHPDigitalSendinTitleBar = new TitleBar("HPDigitalSendinTitleBar", HPDigitalSendinWindow);
                    fHPDigitalSendinTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software Configuration (Server IP Address: {serverIP})");
                }

                return fHPDigitalSendinTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyDup1MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup1MenuBar)
                {
                    fSystemMenuBarSyDup1MenuBar = new MenuBar("SystemMenuBarSyDup1MenuBar", HPDigitalSendinTitleBar);
                    fSystemMenuBarSyDup1MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup1MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyDup1MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyDup1MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1Dup1MenuItem
        {
            get
            {
                if (null == fSystemItem1Dup1MenuItem)
                {
                    fSystemItem1Dup1MenuItem = new MenuItem("SystemItem1Dup1MenuItem", SystemMenuBarSyDup1MenuBar);
                    fSystemItem1Dup1MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1Dup1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1Dup1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1Dup1MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MinimizeMinimizDup1Button
        {
            get
            {
                if (null == fMinimizeMinimizDup1Button)
                {
                    fMinimizeMinimizDup1Button = new Button("MinimizeMinimizDup1Button", HPDigitalSendinTitleBar);
                    fMinimizeMinimizDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                    fMinimizeMinimizDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                }

                return fMinimizeMinimizDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RestoreRestoreButton
        {
            get
            {
                if (null == fRestoreRestoreButton)
                {
                    fRestoreRestoreButton = new Button("RestoreRestoreButton", HPDigitalSendinTitleBar);
                    fRestoreRestoreButton.UIMap.Scope = UIASeachScope.Children;
                    fRestoreRestoreButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Restore");
                    fRestoreRestoreButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Restore");
                }

                return fRestoreRestoreButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseDup1Button
        {
            get
            {
                if (null == fCloseCloseDup1Button)
                {
                    fCloseCloseDup1Button = new Button("CloseCloseDup1Button", HPDigitalSendinTitleBar);
                    fCloseCloseDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button HelpButtonCB8CFButton
        {
            get
            {
                if (null == fHelpButtonCB8CFButton)
                {
                    fHelpButtonCB8CFButton = new Button("HelpButtonCB8CFButton", HPDigitalSendinWindow);
                    fHelpButtonCB8CFButton.UIMap.Scope = UIASeachScope.Children;
                    fHelpButtonCB8CFButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fHelpButtonCB8CFButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"CB8CF0C3-DFBE-49b8-B09B-03A34F5D4186");
                    fHelpButtonCB8CFButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpButtonCB8CFButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HelpTextBlockDup1Text
        {
            get
            {
                if (null == fHelpTextBlockDup1Text)
                {
                    fHelpTextBlockDup1Text = new Text("HelpTextBlockDup1Text", HelpButtonCB8CFButton);
                    fHelpTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fHelpTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHelpTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                }

                return fHelpTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button GlobalApplyButton
        {
            get
            {
                if (null == fApplyButton61E2Button)
                {
                    fApplyButton61E2Button = new Button("ApplyButton61E2Button", HPDigitalSendinWindow);
                    fApplyButton61E2Button.UIMap.Scope = UIASeachScope.Children;
                    fApplyButton61E2Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fApplyButton61E2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"61E2369B-F53B-4662-A361-B3034C4EFF67");
                    fApplyButton61E2Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Apply");
                }

                return fApplyButton61E2Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ApplyTextBlockText
        {
            get
            {
                if (null == fApplyTextBlockText)
                {
                    fApplyTextBlockText = new Text("ApplyTextBlockText", GlobalApplyButton);
                    fApplyTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fApplyTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fApplyTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Apply");
                }

                return fApplyTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButton65CButton
        {
            get
            {
                if (null == fCancelButton65CButton)
                {
                    fCancelButton65CButton = new Button("CancelButton65CButton", HPDigitalSendinWindow);
                    fCancelButton65CButton.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton65CButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButton65CButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"65C76204-7AB5-4681-B7FD-2D8F02DA6D4B");
                    fCancelButton65CButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButton65CButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CancelTextBlockDup1Text
        {
            get
            {
                if (null == fCancelTextBlockDup1Text)
                {
                    fCancelTextBlockDup1Text = new Text("CancelTextBlockDup1Text", CancelButton65CButton);
                    fCancelTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fCancelTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCancelTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button OKButtonCC2EF49Button
        {
            get
            {
                if (null == fOKButtonCC2EF49Button)
                {
                    fOKButtonCC2EF49Button = new Button("OKButtonCC2EF49Button", HPDigitalSendinWindow);
                    fOKButtonCC2EF49Button.UIMap.Scope = UIASeachScope.Children;
                    fOKButtonCC2EF49Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButtonCC2EF49Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"CC2EF491-0BD1-4ac5-9D00-AA61A9D6BA0C");
                    fOKButtonCC2EF49Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButtonCC2EF49Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OKTextBlockDup1Text
        {
            get
            {
                if (null == fOKTextBlockDup1Text)
                {
                    fOKTextBlockDup1Text = new Text("OKTextBlockDup1Text", OKButtonCC2EF49Button);
                    fOKTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fOKTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOKTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Tab TabControlec0fdTab
        {
            get
            {
                if (null == fTabControlec0fdTab)
                {
                    fTabControlec0fdTab = new Tab("TabControlec0fdTab", HPDigitalSendinWindow);
                    fTabControlec0fdTab.UIMap.Scope = UIASeachScope.Children;
                    fTabControlec0fdTab.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabControl");
                    fTabControlec0fdTab.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ec0fd6cd-2ab8-482f-96a5-d1fa158f38d1");
                }

                return fTabControlec0fdTab;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup0TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup0TabItem)
                {
                    fSystemWindowsCoDup0TabItem = new TabItem("SystemWindowsCoDup0TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup0TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup0TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup0TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1e2be878-0c03-4404-988c-54d0df925f0f");
                    fSystemWindowsCoDup0TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup0TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GeneralTextmGenText
        {
            get
            {
                if (null == fGeneralTextmGenText)
                {
                    fGeneralTextmGenText = new Text("GeneralTextmGenText", SystemWindowsCoDup0TabItem);
                    fGeneralTextmGenText.UIMap.Scope = UIASeachScope.Children;
                    fGeneralTextmGenText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fGeneralTextmGenText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mGeneralTabLabel");
                    fGeneralTextmGenText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"General");
                }

                return fGeneralTextmGenText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text GeneralTextBlocText
        {
            get
            {
                if (null == fGeneralTextBlocText)
                {
                    fGeneralTextBlocText = new Text("GeneralTextBlocText", GeneralTextmGenText);
                    fGeneralTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fGeneralTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fGeneralTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"General");
                }

                return fGeneralTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text933345b04e3Text
        {
            get
            {
                if (null == fText933345b04e3Text)
                {
                    fText933345b04e3Text = new Text("Text933345b04e3Text", SystemWindowsCoDup0TabItem);
                    fText933345b04e3Text.UIMap.Scope = UIASeachScope.Children;
                    fText933345b04e3Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText933345b04e3Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"933345b0-4e39-44d3-a511-0077f3176ca4");
                    fText933345b04e3Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText933345b04e3Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text786caf67344Text
        {
            get
            {
                if (null == fText786caf67344Text)
                {
                    fText786caf67344Text = new Text("Text786caf67344Text", SystemWindowsCoDup0TabItem);
                    fText786caf67344Text.UIMap.Scope = UIASeachScope.Children;
                    fText786caf67344Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText786caf67344Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"786caf67-344f-4ddc-83a5-b9431fb36731");
                    fText786caf67344Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText786caf67344Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup1TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup1TabItem)
                {
                    fSystemWindowsCoDup1TabItem = new TabItem("SystemWindowsCoDup1TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup1TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup1TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup1TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4e90d18a-f33c-43c0-8505-08f4a17169b5");
                    fSystemWindowsCoDup1TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup1TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AuthenticationTDup0Text
        {
            get
            {
                if (null == fAuthenticationTDup0Text)
                {
                    fAuthenticationTDup0Text = new Text("AuthenticationTDup0Text", SystemWindowsCoDup1TabItem);
                    fAuthenticationTDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fAuthenticationTDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fAuthenticationTDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mAuthTabLabel");
                    fAuthenticationTDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Authentication");
                }

                return fAuthenticationTDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AuthenticationTDup1Text
        {
            get
            {
                if (null == fAuthenticationTDup1Text)
                {
                    fAuthenticationTDup1Text = new Text("AuthenticationTDup1Text", AuthenticationTDup0Text);
                    fAuthenticationTDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fAuthenticationTDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAuthenticationTDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Authentication");
                }

                return fAuthenticationTDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text31EC91730B9Text
        {
            get
            {
                if (null == fText31EC91730B9Text)
                {
                    fText31EC91730B9Text = new Text("Text31EC91730B9Text", SystemWindowsCoDup1TabItem);
                    fText31EC91730B9Text.UIMap.Scope = UIASeachScope.Children;
                    fText31EC91730B9Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText31EC91730B9Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"31EC9173-0B98-4d46-BC99-7DF8EA2BE02F");
                    fText31EC91730B9Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText31EC91730B9Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextA479C271445Text
        {
            get
            {
                if (null == fTextA479C271445Text)
                {
                    fTextA479C271445Text = new Text("TextA479C271445Text", SystemWindowsCoDup1TabItem);
                    fTextA479C271445Text.UIMap.Scope = UIASeachScope.Children;
                    fTextA479C271445Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fTextA479C271445Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"A479C271-445D-43f1-864D-7503428703E4");
                    fTextA479C271445Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fTextA479C271445Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup2TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup2TabItem)
                {
                    fSystemWindowsCoDup2TabItem = new TabItem("SystemWindowsCoDup2TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup2TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup2TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup2TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"33A07ED3-E1EE-411e-B583-7D0A3374100F");
                    fSystemWindowsCoDup2TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup2TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EmailTextmEmailText
        {
            get
            {
                if (null == fEmailTextmEmailText)
                {
                    fEmailTextmEmailText = new Text("EmailTextmEmailText", SystemWindowsCoDup2TabItem);
                    fEmailTextmEmailText.UIMap.Scope = UIASeachScope.Children;
                    fEmailTextmEmailText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fEmailTextmEmailText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mEmailTabLabel");
                    fEmailTextmEmailText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"E-mail");
                }

                return fEmailTextmEmailText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EmailTextBlockText
        {
            get
            {
                if (null == fEmailTextBlockText)
                {
                    fEmailTextBlockText = new Text("EmailTextBlockText", EmailTextmEmailText);
                    fEmailTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fEmailTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEmailTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"E-mail");
                }

                return fEmailTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text32de714a8bdText
        {
            get
            {
                if (null == fText32de714a8bdText)
                {
                    fText32de714a8bdText = new Text("Text32de714a8bdText", SystemWindowsCoDup2TabItem);
                    fText32de714a8bdText.UIMap.Scope = UIASeachScope.Children;
                    fText32de714a8bdText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText32de714a8bdText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"32de714a-8bda-4f11-bf20-b9a56b5f18bc");
                    fText32de714a8bdText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText32de714a8bdText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text3b2a8761f4fText
        {
            get
            {
                if (null == fText3b2a8761f4fText)
                {
                    fText3b2a8761f4fText = new Text("Text3b2a8761f4fText", SystemWindowsCoDup2TabItem);
                    fText3b2a8761f4fText.UIMap.Scope = UIASeachScope.Children;
                    fText3b2a8761f4fText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText3b2a8761f4fText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3b2a8761-f4f6-41b1-b08c-9c33744bdc43");
                    fText3b2a8761f4fText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText3b2a8761f4fText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextBlockDup0Text
        {
            get
            {
                if (null == fTextBlockDup0Text)
                {
                    fTextBlockDup0Text = new Text("TextBlockDup0Text", Text3b2a8761f4fText);
                    fTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup3TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup3TabItem)
                {
                    fSystemWindowsCoDup3TabItem = new TabItem("SystemWindowsCoDup3TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup3TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup3TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup3TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4f116988-2b22-473f-bca3-094589a44954");
                    fSystemWindowsCoDup3TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup3TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxTextmFaxTabLText
        {
            get
            {
                if (null == fFaxTextmFaxTabLText)
                {
                    fFaxTextmFaxTabLText = new Text("FaxTextmFaxTabLText", SystemWindowsCoDup3TabItem);
                    fFaxTextmFaxTabLText.UIMap.Scope = UIASeachScope.Children;
                    fFaxTextmFaxTabLText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fFaxTextmFaxTabLText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mFaxTabLabel");
                    fFaxTextmFaxTabLText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax");
                }

                return fFaxTextmFaxTabLText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxTextBlockText
        {
            get
            {
                if (null == fFaxTextBlockText)
                {
                    fFaxTextBlockText = new Text("FaxTextBlockText", FaxTextmFaxTabLText);
                    fFaxTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fFaxTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax");
                }

                return fFaxTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextD1ED4F16F38Text
        {
            get
            {
                if (null == fTextD1ED4F16F38Text)
                {
                    fTextD1ED4F16F38Text = new Text("TextD1ED4F16F38Text", SystemWindowsCoDup3TabItem);
                    fTextD1ED4F16F38Text.UIMap.Scope = UIASeachScope.Children;
                    fTextD1ED4F16F38Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fTextD1ED4F16F38Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"D1ED4F16-F389-4dfd-A884-D258EDB48C11");
                    fTextD1ED4F16F38Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fTextD1ED4F16F38Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextBlockDup1Text
        {
            get
            {
                if (null == fTextBlockDup1Text)
                {
                    fTextBlockDup1Text = new Text("TextBlockDup1Text", TextD1ED4F16F38Text);
                    fTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text7DDE04FD251Text
        {
            get
            {
                if (null == fText7DDE04FD251Text)
                {
                    fText7DDE04FD251Text = new Text("Text7DDE04FD251Text", SystemWindowsCoDup3TabItem);
                    fText7DDE04FD251Text.UIMap.Scope = UIASeachScope.Children;
                    fText7DDE04FD251Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText7DDE04FD251Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7DDE04FD-2519-44c2-A212-67B0838E1C91");
                    fText7DDE04FD251Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText7DDE04FD251Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextBlockDup2Text
        {
            get
            {
                if (null == fTextBlockDup2Text)
                {
                    fTextBlockDup2Text = new Text("TextBlockDup2Text", Text7DDE04FD251Text);
                    fTextBlockDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fTextBlockDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTextBlockDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fTextBlockDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Custom ServiceConfigurCustom
        {
            get
            {
                if (null == fServiceConfigurCustom)
                {
                    fServiceConfigurCustom = new Custom("ServiceConfigurCustom", SystemWindowsCoDup3TabItem);
                    fServiceConfigurCustom.UIMap.Scope = UIASeachScope.Children;
                    fServiceConfigurCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ServiceConfigurationFaxTab");
                    fServiceConfigurCustom.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mServiceConfigurationFaxTab");
                }

                return fServiceConfigurCustom;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerDup1Pane
        {
            get
            {
                if (null == fScrollViewerDup1Pane)
                {
                    fScrollViewerDup1Pane = new Pane("ScrollViewerDup1Pane", ServiceConfigurCustom);
                    fScrollViewerDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                }

                return fScrollViewerDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Custom ErrorConflictUsCustom
        {
            get
            {
                if (null == fErrorConflictUsCustom)
                {
                    fErrorConflictUsCustom = new Custom("ErrorConflictUsCustom", ScrollViewerDup1Pane);
                    fErrorConflictUsCustom.UIMap.Scope = UIASeachScope.Children;
                    fErrorConflictUsCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ErrorConflictUserControl");
                    fErrorConflictUsCustom.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mErrorConflictUserControl");
                }

                return fErrorConflictUsCustom;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup0Image
        {
            get
            {
                if (null == fImageDup0Image)
                {
                    fImageDup0Image = new Image("ImageDup0Image", ErrorConflictUsCustom);
                    fImageDup0Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup0Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup0Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text A1EmailAddressiText
        {
            get
            {
                if (null == fA1EmailAddressiText)
                {
                    fA1EmailAddressiText = new Text("A1EmailAddressiText", ErrorConflictUsCustom);
                    fA1EmailAddressiText.UIMap.Scope = UIASeachScope.Children;
                    fA1EmailAddressiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fA1EmailAddressiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"33CC58FF-B4EB-41e5-B4AC-3A926D5E70A7");
                    fA1EmailAddressiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"1.  E-mail Address is required.
2.  Internet Fax Provider Domain is required.
3.  Outgoing E-mail Server (SMTP) Gateway Server is required.");
                }

                return fA1EmailAddressiText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox EnableFaxSendChCheckBox
        {
            get
            {
                if (null == fEnableFaxSendChCheckBox)
                {
                    fEnableFaxSendChCheckBox = new CheckBox("EnableFaxSendChCheckBox", ScrollViewerDup1Pane);
                    fEnableFaxSendChCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fEnableFaxSendChCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fEnableFaxSendChCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6531b666-efa2-4390-ad4a-4580e0cf7d0e");
                    fEnableFaxSendChCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enable Fax Send");
                }

                return fEnableFaxSendChCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EnableFaxSendTeText
        {
            get
            {
                if (null == fEnableFaxSendTeText)
                {
                    fEnableFaxSendTeText = new Text("EnableFaxSendTeText", EnableFaxSendChCheckBox);
                    fEnableFaxSendTeText.UIMap.Scope = UIASeachScope.Children;
                    fEnableFaxSendTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEnableFaxSendTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enable Fax Send");
                }

                return fEnableFaxSendTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxSendMethodTeDup0Text
        {
            get
            {
                if (null == fFaxSendMethodTeDup0Text)
                {
                    fFaxSendMethodTeDup0Text = new Text("FaxSendMethodTeDup0Text", ScrollViewerDup1Pane);
                    fFaxSendMethodTeDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fFaxSendMethodTeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fFaxSendMethodTeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"87366d0a-78d4-451e-885b-caca065f32f7");
                    fFaxSendMethodTeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Send Method");
                }

                return fFaxSendMethodTeDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxSendMethodTeDup1Text
        {
            get
            {
                if (null == fFaxSendMethodTeDup1Text)
                {
                    fFaxSendMethodTeDup1Text = new Text("FaxSendMethodTeDup1Text", FaxSendMethodTeDup0Text);
                    fFaxSendMethodTeDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fFaxSendMethodTeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxSendMethodTeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Send Method");
                }

                return fFaxSendMethodTeDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxf9a5a65ComboBox
        {
            get
            {
                if (null == fComboBoxf9a5a65ComboBox)
                {
                    fComboBoxf9a5a65ComboBox = new ComboBox("ComboBoxf9a5a65ComboBox", ScrollViewerDup1Pane);
                    fComboBoxf9a5a65ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxf9a5a65ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxf9a5a65ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"f9a5a656-b98d-4d86-9021-a3648ea540c9");
                }

                return fComboBoxf9a5a65ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem LANFaxServiceLiListItem
        {
            get
            {
                if (null == fLANFaxServiceLiListItem)
                {
                    fLANFaxServiceLiListItem = new ListItem("LANFaxServiceLiListItem", ComboBoxf9a5a65ComboBox);
                    fLANFaxServiceLiListItem.UIMap.Scope = UIASeachScope.Children;
                    fLANFaxServiceLiListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fLANFaxServiceLiListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"LAN Fax Service");
                }

                return fLANFaxServiceLiListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text LANFaxServiceTeText
        {
            get
            {
                if (null == fLANFaxServiceTeText)
                {
                    fLANFaxServiceTeText = new Text("LANFaxServiceTeText", LANFaxServiceLiListItem);
                    fLANFaxServiceTeText.UIMap.Scope = UIASeachScope.Children;
                    fLANFaxServiceTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fLANFaxServiceTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"LAN Fax Service");
                }

                return fLANFaxServiceTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem InternetFaxServListItem
        {
            get
            {
                if (null == fInternetFaxServListItem)
                {
                    fInternetFaxServListItem = new ListItem("InternetFaxServListItem", ComboBoxf9a5a65ComboBox);
                    fInternetFaxServListItem.UIMap.Scope = UIASeachScope.Children;
                    fInternetFaxServListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fInternetFaxServListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Internet Fax Service");
                }

                return fInternetFaxServListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text InternetFaxServText
        {
            get
            {
                if (null == fInternetFaxServText)
                {
                    fInternetFaxServText = new Text("InternetFaxServText", InternetFaxServListItem);
                    fInternetFaxServText.UIMap.Scope = UIASeachScope.Children;
                    fInternetFaxServText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fInternetFaxServText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Internet Fax Service");
                }

                return fInternetFaxServText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group InternetFaxSetuGroup
        {
            get
            {
                if (null == fInternetFaxSetuGroup)
                {
                    fInternetFaxSetuGroup = new Group("InternetFaxSetuGroup", ScrollViewerDup1Pane);
                    fInternetFaxSetuGroup.UIMap.Scope = UIASeachScope.Children;
                    fInternetFaxSetuGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fInternetFaxSetuGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7cfa635c-75d7-45bc-8ba9-6df755eb6950");
                    fInternetFaxSetuGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Internet Fax Setup");
                }

                return fInternetFaxSetuGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text InternetFaxSetuText
        {
            get
            {
                if (null == fInternetFaxSetuText)
                {
                    fInternetFaxSetuText = new Text("InternetFaxSetuText", InternetFaxSetuGroup);
                    fInternetFaxSetuText.UIMap.Scope = UIASeachScope.Children;
                    fInternetFaxSetuText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fInternetFaxSetuText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Internet Fax Setup");
                }

                return fInternetFaxSetuText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group OutgoingEmailSeDup1Group
        {
            get
            {
                if (null == fOutgoingEmailSeDup1Group)
                {
                    fOutgoingEmailSeDup1Group = new Group("OutgoingEmailSeDup1Group", InternetFaxSetuGroup);
                    fOutgoingEmailSeDup1Group.UIMap.Scope = UIASeachScope.Children;
                    fOutgoingEmailSeDup1Group.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fOutgoingEmailSeDup1Group.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Outgoing E-mail Server (SMTP) Gateway Server");
                }

                return fOutgoingEmailSeDup1Group;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OutgoingEmailSeDup1Text
        {
            get
            {
                if (null == fOutgoingEmailSeDup1Text)
                {
                    fOutgoingEmailSeDup1Text = new Text("OutgoingEmailSeDup1Text", OutgoingEmailSeDup1Group);
                    fOutgoingEmailSeDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fOutgoingEmailSeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOutgoingEmailSeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Outgoing E-mail Server (SMTP) Gateway Server");
                }

                return fOutgoingEmailSeDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public DataGrid ListViewed72841DataGrid
        {
            get
            {
                if (null == fListViewed72841DataGrid)
                {
                    fListViewed72841DataGrid = new DataGrid("ListViewed72841DataGrid", OutgoingEmailSeDup1Group);
                    fListViewed72841DataGrid.UIMap.Scope = UIASeachScope.Children;
                    fListViewed72841DataGrid.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListView");
                    fListViewed72841DataGrid.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ed72841c-8e38-41ca-b904-dd28b242ad85");
                }

                return fListViewed72841DataGrid;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Header GridViewHeaderRHeader
        {
            get
            {
                if (null == fGridViewHeaderRHeader)
                {
                    fGridViewHeaderRHeader = new Header("GridViewHeaderRHeader", ListViewed72841DataGrid);
                    fGridViewHeaderRHeader.UIMap.Scope = UIASeachScope.Children;
                    fGridViewHeaderRHeader.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewHeaderRowPresenter");
                }

                return fGridViewHeaderRHeader;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem PriorityOrderGrHeaderItem
        {
            get
            {
                if (null == fPriorityOrderGrHeaderItem)
                {
                    fPriorityOrderGrHeaderItem = new HeaderItem("PriorityOrderGrHeaderItem", GridViewHeaderRHeader);
                    fPriorityOrderGrHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fPriorityOrderGrHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fPriorityOrderGrHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Priority Order");
                }

                return fPriorityOrderGrHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PriorityOrderTeText
        {
            get
            {
                if (null == fPriorityOrderTeText)
                {
                    fPriorityOrderTeText = new Text("PriorityOrderTeText", PriorityOrderGrHeaderItem);
                    fPriorityOrderTeText.UIMap.Scope = UIASeachScope.Children;
                    fPriorityOrderTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPriorityOrderTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Priority Order");
                }

                return fPriorityOrderTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup0Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup0Thumb)
                {
                    fThumbPARTHeadeDup0Thumb = new Thumb("ThumbPARTHeadeDup0Thumb", PriorityOrderGrHeaderItem);
                    fThumbPARTHeadeDup0Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup0Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup0Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup0Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem SMTPGatewayGridHeaderItem
        {
            get
            {
                if (null == fSMTPGatewayGridHeaderItem)
                {
                    fSMTPGatewayGridHeaderItem = new HeaderItem("SMTPGatewayGridHeaderItem", GridViewHeaderRHeader);
                    fSMTPGatewayGridHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fSMTPGatewayGridHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fSMTPGatewayGridHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"SMTP Gateway");
                }

                return fSMTPGatewayGridHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SMTPGatewayTextText
        {
            get
            {
                if (null == fSMTPGatewayTextText)
                {
                    fSMTPGatewayTextText = new Text("SMTPGatewayTextText", SMTPGatewayGridHeaderItem);
                    fSMTPGatewayTextText.UIMap.Scope = UIASeachScope.Children;
                    fSMTPGatewayTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSMTPGatewayTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"SMTP Gateway");
                }

                return fSMTPGatewayTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup1Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup1Thumb)
                {
                    fThumbPARTHeadeDup1Thumb = new Thumb("ThumbPARTHeadeDup1Thumb", SMTPGatewayGridHeaderItem);
                    fThumbPARTHeadeDup1Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup1Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup1Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup1Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public HeaderItem ServerUsageGridHeaderItem
        {
            get
            {
                if (null == fServerUsageGridHeaderItem)
                {
                    fServerUsageGridHeaderItem = new HeaderItem("ServerUsageGridHeaderItem", GridViewHeaderRHeader);
                    fServerUsageGridHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fServerUsageGridHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GridViewColumnHeader");
                    fServerUsageGridHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Server Usage");
                }

                return fServerUsageGridHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ServerUsageTextDup1Text
        {
            get
            {
                if (null == fServerUsageTextDup1Text)
                {
                    fServerUsageTextDup1Text = new Text("ServerUsageTextDup1Text", ServerUsageGridHeaderItem);
                    fServerUsageTextDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fServerUsageTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fServerUsageTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Server Usage");
                }

                return fServerUsageTextDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbPARTHeadeDup2Thumb
        {
            get
            {
                if (null == fThumbPARTHeadeDup2Thumb)
                {
                    fThumbPARTHeadeDup2Thumb = new Thumb("ThumbPARTHeadeDup2Thumb", ServerUsageGridHeaderItem);
                    fThumbPARTHeadeDup2Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbPARTHeadeDup2Thumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                    fThumbPARTHeadeDup2Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_HeaderGripper");
                }

                return fThumbPARTHeadeDup2Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button Buttonc240142dfButton
        {
            get
            {
                if (null == fButtonc240142dfButton)
                {
                    fButtonc240142dfButton = new Button("Buttonc240142dfButton", OutgoingEmailSeDup1Group);
                    fButtonc240142dfButton.UIMap.Scope = UIASeachScope.Children;
                    fButtonc240142dfButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButtonc240142dfButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c240142d-f6ea-41be-a45a-9192078ab54d");
                }

                return fButtonc240142dfButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup1Image
        {
            get
            {
                if (null == fImageDup1Image)
                {
                    fImageDup1Image = new Image("ImageDup1Image", Buttonc240142dfButton);
                    fImageDup1Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup1Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup1Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MoveText
        {
            get
            {
                if (null == fMoveText)
                {
                    fMoveText = new Text("MoveText", OutgoingEmailSeDup1Group);
                    fMoveText.UIMap.Scope = UIASeachScope.Children;
                    fMoveText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fMoveText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Move");
                }

                return fMoveText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MoveTextBlockText
        {
            get
            {
                if (null == fMoveTextBlockText)
                {
                    fMoveTextBlockText = new Text("MoveTextBlockText", MoveText);
                    fMoveTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fMoveTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fMoveTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Move");
                }

                return fMoveTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button Buttonf592bfec4Button
        {
            get
            {
                if (null == fButtonf592bfec4Button)
                {
                    fButtonf592bfec4Button = new Button("Buttonf592bfec4Button", OutgoingEmailSeDup1Group);
                    fButtonf592bfec4Button.UIMap.Scope = UIASeachScope.Children;
                    fButtonf592bfec4Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButtonf592bfec4Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"f592bfec-4d35-452a-beee-1ee7b64d71d3");
                }

                return fButtonf592bfec4Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup2Image
        {
            get
            {
                if (null == fImageDup2Image)
                {
                    fImageDup2Image = new Image("ImageDup2Image", Buttonf592bfec4Button);
                    fImageDup2Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup2Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup2Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button AddSMTPServerButton
        {
            get
            {
                if (null == fAddButton946212Button)
                {
                    fAddButton946212Button = new Button("AddButton946212Button", OutgoingEmailSeDup1Group);
                    fAddButton946212Button.UIMap.Scope = UIASeachScope.Children;
                    fAddButton946212Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fAddButton946212Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"946212ca-a476-4fa8-9756-8d4be7775efd");
                    fAddButton946212Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add...");
                }

                return fAddButton946212Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddTextBlockText
        {
            get
            {
                if (null == fAddTextBlockText)
                {
                    fAddTextBlockText = new Text("AddTextBlockText", AddSMTPServerButton);
                    fAddTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fAddTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Add...");
                }

                return fAddTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button EditButton0b46aButton
        {
            get
            {
                if (null == fEditButton0b46aButton)
                {
                    fEditButton0b46aButton = new Button("EditButton0b46aButton", OutgoingEmailSeDup1Group);
                    fEditButton0b46aButton.UIMap.Scope = UIASeachScope.Children;
                    fEditButton0b46aButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fEditButton0b46aButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"0b46a9eb-2533-4cfd-856f-a79ebf018a7e");
                    fEditButton0b46aButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Edit...");
                }

                return fEditButton0b46aButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EditTextBlockText
        {
            get
            {
                if (null == fEditTextBlockText)
                {
                    fEditTextBlockText = new Text("EditTextBlockText", EditButton0b46aButton);
                    fEditTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fEditTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEditTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Edit...");
                }

                return fEditTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RemoveButtond0cButton
        {
            get
            {
                if (null == fRemoveButtond0cButton)
                {
                    fRemoveButtond0cButton = new Button("RemoveButtond0cButton", OutgoingEmailSeDup1Group);
                    fRemoveButtond0cButton.UIMap.Scope = UIASeachScope.Children;
                    fRemoveButtond0cButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fRemoveButtond0cButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d0c1a536-a90c-4f38-951e-b46847ded319");
                    fRemoveButtond0cButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Remove");
                }

                return fRemoveButtond0cButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RemoveTextBlockText
        {
            get
            {
                if (null == fRemoveTextBlockText)
                {
                    fRemoveTextBlockText = new Text("RemoveTextBlockText", RemoveButtond0cButton);
                    fRemoveTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fRemoveTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRemoveTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Remove");
                }

                return fRemoveTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button TestButtonc6fd1Button
        {
            get
            {
                if (null == fTestButtonc6fd1Button)
                {
                    fTestButtonc6fd1Button = new Button("TestButtonc6fd1Button", OutgoingEmailSeDup1Group);
                    fTestButtonc6fd1Button.UIMap.Scope = UIASeachScope.Children;
                    fTestButtonc6fd1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fTestButtonc6fd1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"c6fd1121-341b-4cd9-afb1-143d1e738695");
                    fTestButtonc6fd1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Test");
                }

                return fTestButtonc6fd1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TestTextBlockText
        {
            get
            {
                if (null == fTestTextBlockText)
                {
                    fTestTextBlockText = new Text("TestTextBlockText", TestButtonc6fd1Button);
                    fTestTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fTestTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTestTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Test");
                }

                return fTestTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxProviderDomaDup0Text
        {
            get
            {
                if (null == fFaxProviderDomaDup0Text)
                {
                    fFaxProviderDomaDup0Text = new Text("FaxProviderDomaDup0Text", InternetFaxSetuGroup);
                    fFaxProviderDomaDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fFaxProviderDomaDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fFaxProviderDomaDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Provider Domain");
                }

                return fFaxProviderDomaDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FaxProviderDomaDup1Text
        {
            get
            {
                if (null == fFaxProviderDomaDup1Text)
                {
                    fFaxProviderDomaDup1Text = new Text("FaxProviderDomaDup1Text", FaxProviderDomaDup0Text);
                    fFaxProviderDomaDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fFaxProviderDomaDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFaxProviderDomaDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fax Provider Domain");
                }

                return fFaxProviderDomaDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit FaxProviderEditTextBox
        {
            get
            {
                if (null == fTextBoxe6b587feEdit)
                {
                    fTextBoxe6b587feEdit = new Edit("TextBoxe6b587feEdit", InternetFaxSetuGroup);
                    fTextBoxe6b587feEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxe6b587feEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxe6b587feEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"e6b587fe-b767-4576-a2c6-3982666452c9");
                }

                return fTextBoxe6b587feEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup6Pane
        {
            get
            {
                if (null == fScrollViewerPARDup6Pane)
                {
                    fScrollViewerPARDup6Pane = new Pane("ScrollViewerPARDup6Pane", FaxProviderEditTextBox);
                    fScrollViewerPARDup6Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup6Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup6Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup6Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup7ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup7ScrollBar)
                {
                    fScrollBarVerticDup7ScrollBar = new ScrollBar("ScrollBarVerticDup7ScrollBar", ScrollViewerPARDup6Pane);
                    fScrollBarVerticDup7ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup7ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup7ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup7ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup7ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup7ScrollBar)
                {
                    fScrollBarHorizoDup7ScrollBar = new ScrollBar("ScrollBarHorizoDup7ScrollBar", ScrollViewerPARDup6Pane);
                    fScrollBarHorizoDup7ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup7ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup7ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup7ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DefaultFaxAccouDup0Text
        {
            get
            {
                if (null == fDefaultFaxAccouDup0Text)
                {
                    fDefaultFaxAccouDup0Text = new Text("DefaultFaxAccouDup0Text", InternetFaxSetuGroup);
                    fDefaultFaxAccouDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fDefaultFaxAccouDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fDefaultFaxAccouDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Default Fax Account e-mail address");
                }

                return fDefaultFaxAccouDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DefaultFaxAccouDup1Text
        {
            get
            {
                if (null == fDefaultFaxAccouDup1Text)
                {
                    fDefaultFaxAccouDup1Text = new Text("DefaultFaxAccouDup1Text", DefaultFaxAccouDup0Text);
                    fDefaultFaxAccouDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fDefaultFaxAccouDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDefaultFaxAccouDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Default Fax Account e-mail address");
                }

                return fDefaultFaxAccouDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit FaxAccountEmailEditTextBox
        {
            get
            {
                if (null == fTextBoxebc1d279Edit)
                {
                    fTextBoxebc1d279Edit = new Edit("TextBoxebc1d279Edit", InternetFaxSetuGroup);
                    fTextBoxebc1d279Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxebc1d279Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxebc1d279Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ebc1d279-4db3-4483-9cd4-36dea13fa99c");
                }

                return fTextBoxebc1d279Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup7Pane
        {
            get
            {
                if (null == fScrollViewerPARDup7Pane)
                {
                    fScrollViewerPARDup7Pane = new Pane("ScrollViewerPARDup7Pane", FaxAccountEmailEditTextBox);
                    fScrollViewerPARDup7Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup7Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup7Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup7Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup8ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup8ScrollBar)
                {
                    fScrollBarVerticDup8ScrollBar = new ScrollBar("ScrollBarVerticDup8ScrollBar", ScrollViewerPARDup7Pane);
                    fScrollBarVerticDup8ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup8ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup8ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup8ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup8ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup8ScrollBar)
                {
                    fScrollBarHorizoDup8ScrollBar = new ScrollBar("ScrollBarHorizoDup8ScrollBar", ScrollViewerPARDup7Pane);
                    fScrollBarHorizoDup8ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup8ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup8ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup8ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text T37PrefixText
        {
            get
            {
                if (null == fT37PrefixText)
                {
                    fT37PrefixText = new Text("T37PrefixText", InternetFaxSetuGroup);
                    fT37PrefixText.UIMap.Scope = UIASeachScope.Children;
                    fT37PrefixText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fT37PrefixText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"T37 Prefix");
                }

                return fT37PrefixText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text T37PrefixTextBlText
        {
            get
            {
                if (null == fT37PrefixTextBlText)
                {
                    fT37PrefixTextBlText = new Text("T37PrefixTextBlText", T37PrefixText);
                    fT37PrefixTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fT37PrefixTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fT37PrefixTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"T37 Prefix");
                }

                return fT37PrefixTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit T37PrefixEditTextBox
        {
            get
            {
                if (null == fTextBox720525FCEdit)
                {
                    fTextBox720525FCEdit = new Edit("TextBox720525FCEdit", InternetFaxSetuGroup);
                    fTextBox720525FCEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox720525FCEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox720525FCEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"720525FC-57BB-41b9-A135-FC9D6D8A6BA9");
                }

                return fTextBox720525FCEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup8Pane
        {
            get
            {
                if (null == fScrollViewerPARDup8Pane)
                {
                    fScrollViewerPARDup8Pane = new Pane("ScrollViewerPARDup8Pane", T37PrefixEditTextBox);
                    fScrollViewerPARDup8Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup8Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup8Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup8Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup9ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup9ScrollBar)
                {
                    fScrollBarVerticDup9ScrollBar = new ScrollBar("ScrollBarVerticDup9ScrollBar", ScrollViewerPARDup8Pane);
                    fScrollBarVerticDup9ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup9ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup9ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup9ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup9ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup9ScrollBar)
                {
                    fScrollBarHorizoDup9ScrollBar = new ScrollBar("ScrollBarHorizoDup9ScrollBar", ScrollViewerPARDup8Pane);
                    fScrollBarHorizoDup9ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup9ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup9ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup9ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FileFormatDup0Text
        {
            get
            {
                if (null == fFileFormatDup0Text)
                {
                    fFileFormatDup0Text = new Text("FileFormatDup0Text", InternetFaxSetuGroup);
                    fFileFormatDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fFileFormatDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fFileFormatDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"File Format");
                }

                return fFileFormatDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FileFormatTextBDup0Text
        {
            get
            {
                if (null == fFileFormatTextBDup0Text)
                {
                    fFileFormatTextBDup0Text = new Text("FileFormatTextBDup0Text", FileFormatDup0Text);
                    fFileFormatTextBDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fFileFormatTextBDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFileFormatTextBDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"File Format");
                }

                return fFileFormatTextBDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox00cd015ComboBox
        {
            get
            {
                if (null == fComboBox00cd015ComboBox)
                {
                    fComboBox00cd015ComboBox = new ComboBox("ComboBox00cd015ComboBox", InternetFaxSetuGroup);
                    fComboBox00cd015ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox00cd015ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox00cd015ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"00cd0158-19c5-48c0-bb07-c8d950fc65c8");
                }

                return fComboBox00cd015ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox IfavailableuseEmailCheckBox
        {
            get
            {
                if (null == fIfavailableusetCheckBox)
                {
                    fIfavailableusetCheckBox = new CheckBox("IfavailableusetCheckBox", InternetFaxSetuGroup);
                    fIfavailableusetCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fIfavailableusetCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fIfavailableusetCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"163766cb-21c7-4855-9bed-7653ce1f1fd7");
                    fIfavailableusetCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"If available, use the user's e-mail address as the Fax Account address.");
                }

                return fIfavailableusetCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text IfavailableusetText
        {
            get
            {
                if (null == fIfavailableusetText)
                {
                    fIfavailableusetText = new Text("IfavailableusetText", IfavailableuseEmailCheckBox);
                    fIfavailableusetText.UIMap.Scope = UIASeachScope.Children;
                    fIfavailableusetText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fIfavailableusetText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"If available, use the user's e-mail address as the Fax Account address.");
                }

                return fIfavailableusetText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox AutocompleteCheckBox
        {
            get
            {
                if (null == fAutocompletetoNCheckBox)
                {
                    fAutocompletetoNCheckBox = new CheckBox("AutocompletetoNCheckBox", InternetFaxSetuGroup);
                    fAutocompletetoNCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fAutocompletetoNCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fAutocompletetoNCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"78f5edf2-2436-4608-8b0c-cfbaa93ccf88");
                    fAutocompletetoNCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Auto complete to North American Numbering Plan (NANP) format using area code");
                }

                return fAutocompletetoNCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AutocompletetoNText
        {
            get
            {
                if (null == fAutocompletetoNText)
                {
                    fAutocompletetoNText = new Text("AutocompletetoNText", AutocompleteCheckBox);
                    fAutocompletetoNText.UIMap.Scope = UIASeachScope.Children;
                    fAutocompletetoNText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAutocompletetoNText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Auto complete to North American Numbering Plan (NANP) format using area code");
                }

                return fAutocompletetoNText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBox27f9e603Edit
        {
            get
            {
                if (null == fTextBox27f9e603Edit)
                {
                    fTextBox27f9e603Edit = new Edit("TextBox27f9e603Edit", InternetFaxSetuGroup);
                    fTextBox27f9e603Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox27f9e603Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox27f9e603Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"27f9e603-0c36-4310-9ccd-90ee4673b75f");
                }

                return fTextBox27f9e603Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup9Pane
        {
            get
            {
                if (null == fScrollViewerPARDup9Pane)
                {
                    fScrollViewerPARDup9Pane = new Pane("ScrollViewerPARDup9Pane", TextBox27f9e603Edit);
                    fScrollViewerPARDup9Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup9Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup9Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup9Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup10ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup10ScrollBar)
                {
                    fScrollBarVerticDup10ScrollBar = new ScrollBar("ScrollBarVerticDup10ScrollBar", ScrollViewerPARDup9Pane);
                    fScrollBarVerticDup10ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup10ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup10ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup10ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup10ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup10ScrollBar)
                {
                    fScrollBarHorizoDup10ScrollBar = new ScrollBar("ScrollBarHorizoDup10ScrollBar", ScrollViewerPARDup9Pane);
                    fScrollBarHorizoDup10ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup10ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup10ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup10ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group LANFaxSetupGrouGroup
        {
            get
            {
                if (null == fLANFaxSetupGrouGroup)
                {
                    fLANFaxSetupGrouGroup = new Group("LANFaxSetupGrouGroup", ScrollViewerDup1Pane);
                    fLANFaxSetupGrouGroup.UIMap.Scope = UIASeachScope.Children;
                    fLANFaxSetupGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fLANFaxSetupGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"03fd0f29-2571-432d-97a7-f4abe2d640b7");
                    fLANFaxSetupGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"LAN Fax Setup");
                }

                return fLANFaxSetupGrouGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text LANFaxSetupTextText
        {
            get
            {
                if (null == fLANFaxSetupTextText)
                {
                    fLANFaxSetupTextText = new Text("LANFaxSetupTextText", LANFaxSetupGrouGroup);
                    fLANFaxSetupTextText.UIMap.Scope = UIASeachScope.Children;
                    fLANFaxSetupTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fLANFaxSetupTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"LAN Fax Setup");
                }

                return fLANFaxSetupTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group LanFaxServiceSeGroup
        {
            get
            {
                if (null == fLanFaxServiceSeGroup)
                {
                    fLanFaxServiceSeGroup = new Group("LanFaxServiceSeGroup", LANFaxSetupGrouGroup);
                    fLanFaxServiceSeGroup.UIMap.Scope = UIASeachScope.Children;
                    fLanFaxServiceSeGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fLanFaxServiceSeGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Lan Fax Service Settings");
                }

                return fLanFaxServiceSeGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text LanFaxServiceSeText
        {
            get
            {
                if (null == fLanFaxServiceSeText)
                {
                    fLanFaxServiceSeText = new Text("LanFaxServiceSeText", LanFaxServiceSeGroup);
                    fLanFaxServiceSeText.UIMap.Scope = UIASeachScope.Children;
                    fLanFaxServiceSeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fLanFaxServiceSeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Lan Fax Service Settings");
                }

                return fLanFaxServiceSeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ThirdPartyLANFaDup0Text
        {
            get
            {
                if (null == fThirdPartyLANFaDup0Text)
                {
                    fThirdPartyLANFaDup0Text = new Text("ThirdPartyLANFaDup0Text", LanFaxServiceSeGroup);
                    fThirdPartyLANFaDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fThirdPartyLANFaDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fThirdPartyLANFaDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Third Party LAN Fax Product");
                }

                return fThirdPartyLANFaDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ThirdPartyLANFaDup1Text
        {
            get
            {
                if (null == fThirdPartyLANFaDup1Text)
                {
                    fThirdPartyLANFaDup1Text = new Text("ThirdPartyLANFaDup1Text", ThirdPartyLANFaDup0Text);
                    fThirdPartyLANFaDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fThirdPartyLANFaDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fThirdPartyLANFaDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Third Party LAN Fax Product");
                }

                return fThirdPartyLANFaDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox411fa59ComboBox
        {
            get
            {
                if (null == fComboBox411fa59ComboBox)
                {
                    fComboBox411fa59ComboBox = new ComboBox("ComboBox411fa59ComboBox", LanFaxServiceSeGroup);
                    fComboBox411fa59ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox411fa59ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox411fa59ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"411fa594-2202-4e29-81e2-2873f3958240");
                }

                return fComboBox411fa59ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FileFormatDup1Text
        {
            get
            {
                if (null == fFileFormatDup1Text)
                {
                    fFileFormatDup1Text = new Text("FileFormatDup1Text", LanFaxServiceSeGroup);
                    fFileFormatDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fFileFormatDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fFileFormatDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"File Format:");
                }

                return fFileFormatDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FileFormatTextBDup1Text
        {
            get
            {
                if (null == fFileFormatTextBDup1Text)
                {
                    fFileFormatTextBDup1Text = new Text("FileFormatTextBDup1Text", FileFormatDup1Text);
                    fFileFormatTextBDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fFileFormatTextBDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFileFormatTextBDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"File Format:");
                }

                return fFileFormatTextBDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox454be57ComboBox
        {
            get
            {
                if (null == fComboBox454be57ComboBox)
                {
                    fComboBox454be57ComboBox = new ComboBox("ComboBox454be57ComboBox", LanFaxServiceSeGroup);
                    fComboBox454be57ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox454be57ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox454be57ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"454be574-a89c-471a-9899-0122dbfb0635");
                }

                return fComboBox454be57ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group FolderSettingsGGroup
        {
            get
            {
                if (null == fFolderSettingsGGroup)
                {
                    fFolderSettingsGGroup = new Group("FolderSettingsGGroup", LANFaxSetupGrouGroup);
                    fFolderSettingsGGroup.UIMap.Scope = UIASeachScope.Children;
                    fFolderSettingsGGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fFolderSettingsGGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mCredentialsGroupBox");
                    fFolderSettingsGGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Folder Settings");
                }

                return fFolderSettingsGGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FolderSettingsTText
        {
            get
            {
                if (null == fFolderSettingsTText)
                {
                    fFolderSettingsTText = new Text("FolderSettingsTText", FolderSettingsGGroup);
                    fFolderSettingsTText.UIMap.Scope = UIASeachScope.Children;
                    fFolderSettingsTText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFolderSettingsTText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Folder Settings");
                }

                return fFolderSettingsTText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FolderPathText
        {
            get
            {
                if (null == fFolderPathText)
                {
                    fFolderPathText = new Text("FolderPathText", FolderSettingsGGroup);
                    fFolderPathText.UIMap.Scope = UIASeachScope.Children;
                    fFolderPathText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fFolderPathText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Folder Path");
                }

                return fFolderPathText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text FolderPathTextBText
        {
            get
            {
                if (null == fFolderPathTextBText)
                {
                    fFolderPathTextBText = new Text("FolderPathTextBText", FolderPathText);
                    fFolderPathTextBText.UIMap.Scope = UIASeachScope.Children;
                    fFolderPathTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFolderPathTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Folder Path");
                }

                return fFolderPathTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBox963de5ecEdit
        {
            get
            {
                if (null == fTextBox963de5ecEdit)
                {
                    fTextBox963de5ecEdit = new Edit("TextBox963de5ecEdit", FolderSettingsGGroup);
                    fTextBox963de5ecEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox963de5ecEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox963de5ecEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"963de5ec-3d11-41e6-a814-9151d752c939");
                }

                return fTextBox963de5ecEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup10Pane
        {
            get
            {
                if (null == fScrollViewerPARDup10Pane)
                {
                    fScrollViewerPARDup10Pane = new Pane("ScrollViewerPARDup10Pane", TextBox963de5ecEdit);
                    fScrollViewerPARDup10Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup10Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup10Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup10Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup11ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup11ScrollBar)
                {
                    fScrollBarVerticDup11ScrollBar = new ScrollBar("ScrollBarVerticDup11ScrollBar", ScrollViewerPARDup10Pane);
                    fScrollBarVerticDup11ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup11ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup11ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup11ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup11ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup11ScrollBar)
                {
                    fScrollBarHorizoDup11ScrollBar = new ScrollBar("ScrollBarHorizoDup11ScrollBar", ScrollViewerPARDup10Pane);
                    fScrollBarHorizoDup11ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup11ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup11ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup11ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button BrowseButton278Button
        {
            get
            {
                if (null == fBrowseButton278Button)
                {
                    fBrowseButton278Button = new Button("BrowseButton278Button", FolderSettingsGGroup);
                    fBrowseButton278Button.UIMap.Scope = UIASeachScope.Children;
                    fBrowseButton278Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fBrowseButton278Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2786c377-0adb-4358-b077-4066aa12eb43");
                    fBrowseButton278Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Browse");
                }

                return fBrowseButton278Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text BrowseTextBlockText
        {
            get
            {
                if (null == fBrowseTextBlockText)
                {
                    fBrowseTextBlockText = new Text("BrowseTextBlockText", BrowseButton278Button);
                    fBrowseTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fBrowseTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fBrowseTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Browse");
                }

                return fBrowseTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text UsernameText
        {
            get
            {
                if (null == fUsernameText)
                {
                    fUsernameText = new Text("UsernameText", FolderSettingsGGroup);
                    fUsernameText.UIMap.Scope = UIASeachScope.Children;
                    fUsernameText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fUsernameText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Username");
                }

                return fUsernameText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text UsernameTextBloDup1Text
        {
            get
            {
                if (null == fUsernameTextBloDup1Text)
                {
                    fUsernameTextBloDup1Text = new Text("UsernameTextBloDup1Text", UsernameText);
                    fUsernameTextBloDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fUsernameTextBloDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fUsernameTextBloDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Username");
                }

                return fUsernameTextBloDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxa432c48dEdit
        {
            get
            {
                if (null == fTextBoxa432c48dEdit)
                {
                    fTextBoxa432c48dEdit = new Edit("TextBoxa432c48dEdit", FolderSettingsGGroup);
                    fTextBoxa432c48dEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxa432c48dEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxa432c48dEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"a432c48d-4945-4d64-af27-bec2fa28421e");
                }

                return fTextBoxa432c48dEdit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup11Pane
        {
            get
            {
                if (null == fScrollViewerPARDup11Pane)
                {
                    fScrollViewerPARDup11Pane = new Pane("ScrollViewerPARDup11Pane", TextBoxa432c48dEdit);
                    fScrollViewerPARDup11Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup11Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup11Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup11Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup12ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup12ScrollBar)
                {
                    fScrollBarVerticDup12ScrollBar = new ScrollBar("ScrollBarVerticDup12ScrollBar", ScrollViewerPARDup11Pane);
                    fScrollBarVerticDup12ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup12ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup12ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup12ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup12ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup12ScrollBar)
                {
                    fScrollBarHorizoDup12ScrollBar = new ScrollBar("ScrollBarHorizoDup12ScrollBar", ScrollViewerPARDup11Pane);
                    fScrollBarHorizoDup12ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup12ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup12ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup12ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PasswordText
        {
            get
            {
                if (null == fPasswordText)
                {
                    fPasswordText = new Text("PasswordText", FolderSettingsGGroup);
                    fPasswordText.UIMap.Scope = UIASeachScope.Children;
                    fPasswordText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fPasswordText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Password");
                }

                return fPasswordText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PasswordTextBloDup1Text
        {
            get
            {
                if (null == fPasswordTextBloDup1Text)
                {
                    fPasswordTextBloDup1Text = new Text("PasswordTextBloDup1Text", PasswordText);
                    fPasswordTextBloDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fPasswordTextBloDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPasswordTextBloDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Password");
                }

                return fPasswordTextBloDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit PasswordBoxcd46Edit
        {
            get
            {
                if (null == fPasswordBoxcd46Edit)
                {
                    fPasswordBoxcd46Edit = new Edit("PasswordBoxcd46Edit", FolderSettingsGGroup);
                    fPasswordBoxcd46Edit.UIMap.Scope = UIASeachScope.Children;
                    fPasswordBoxcd46Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"PasswordBox");
                    fPasswordBoxcd46Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cd468ecc-9148-4c7c-a15e-5d1ce1623a31");
                }

                return fPasswordBoxcd46Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup12Pane
        {
            get
            {
                if (null == fScrollViewerPARDup12Pane)
                {
                    fScrollViewerPARDup12Pane = new Pane("ScrollViewerPARDup12Pane", PasswordBoxcd46Edit);
                    fScrollViewerPARDup12Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup12Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup12Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup12Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup13ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup13ScrollBar)
                {
                    fScrollBarVerticDup13ScrollBar = new ScrollBar("ScrollBarVerticDup13ScrollBar", ScrollViewerPARDup12Pane);
                    fScrollBarVerticDup13ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup13ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup13ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup13ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup13ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup13ScrollBar)
                {
                    fScrollBarHorizoDup13ScrollBar = new ScrollBar("ScrollBarHorizoDup13ScrollBar", ScrollViewerPARDup12Pane);
                    fScrollBarHorizoDup13ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup13ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup13ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup13ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text WindowsDomainTeDup0Text
        {
            get
            {
                if (null == fWindowsDomainTeDup0Text)
                {
                    fWindowsDomainTeDup0Text = new Text("WindowsDomainTeDup0Text", FolderSettingsGGroup);
                    fWindowsDomainTeDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fWindowsDomainTeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fWindowsDomainTeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"dc8d2a58-72b0-4d71-9731-92eff05bba8a");
                    fWindowsDomainTeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Windows Domain");
                }

                return fWindowsDomainTeDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text WindowsDomainTeDup1Text
        {
            get
            {
                if (null == fWindowsDomainTeDup1Text)
                {
                    fWindowsDomainTeDup1Text = new Text("WindowsDomainTeDup1Text", WindowsDomainTeDup0Text);
                    fWindowsDomainTeDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fWindowsDomainTeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fWindowsDomainTeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Windows Domain");
                }

                return fWindowsDomainTeDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBox80fa1a93Edit
        {
            get
            {
                if (null == fTextBox80fa1a93Edit)
                {
                    fTextBox80fa1a93Edit = new Edit("TextBox80fa1a93Edit", FolderSettingsGGroup);
                    fTextBox80fa1a93Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox80fa1a93Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox80fa1a93Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"80fa1a93-e7ff-4eaa-a833-17881dd99605");
                }

                return fTextBox80fa1a93Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup13Pane
        {
            get
            {
                if (null == fScrollViewerPARDup13Pane)
                {
                    fScrollViewerPARDup13Pane = new Pane("ScrollViewerPARDup13Pane", TextBox80fa1a93Edit);
                    fScrollViewerPARDup13Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup13Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup13Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup13Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup14ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup14ScrollBar)
                {
                    fScrollBarVerticDup14ScrollBar = new ScrollBar("ScrollBarVerticDup14ScrollBar", ScrollViewerPARDup13Pane);
                    fScrollBarVerticDup14ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup14ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup14ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup14ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup14ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup14ScrollBar)
                {
                    fScrollBarHorizoDup14ScrollBar = new ScrollBar("ScrollBarHorizoDup14ScrollBar", ScrollViewerPARDup13Pane);
                    fScrollBarHorizoDup14ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup14ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup14ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup14ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button VerifyFolderAccButton
        {
            get
            {
                if (null == fVerifyFolderAccButton)
                {
                    fVerifyFolderAccButton = new Button("VerifyFolderAccButton", FolderSettingsGGroup);
                    fVerifyFolderAccButton.UIMap.Scope = UIASeachScope.Children;
                    fVerifyFolderAccButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fVerifyFolderAccButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4a683597-b682-422d-bdc7-146ffe63279f");
                    fVerifyFolderAccButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Verify Folder Access");
                }

                return fVerifyFolderAccButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text VerifyFolderAccText
        {
            get
            {
                if (null == fVerifyFolderAccText)
                {
                    fVerifyFolderAccText = new Text("VerifyFolderAccText", VerifyFolderAccButton);
                    fVerifyFolderAccText.UIMap.Scope = UIASeachScope.Children;
                    fVerifyFolderAccText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fVerifyFolderAccText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Verify Folder Access");
                }

                return fVerifyFolderAccText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group DialingSettingsGroup
        {
            get
            {
                if (null == fDialingSettingsGroup)
                {
                    fDialingSettingsGroup = new Group("DialingSettingsGroup", LANFaxSetupGrouGroup);
                    fDialingSettingsGroup.UIMap.Scope = UIASeachScope.Children;
                    fDialingSettingsGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fDialingSettingsGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Dialing Settings");
                }

                return fDialingSettingsGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DialingSettingsText
        {
            get
            {
                if (null == fDialingSettingsText)
                {
                    fDialingSettingsText = new Text("DialingSettingsText", DialingSettingsGroup);
                    fDialingSettingsText.UIMap.Scope = UIASeachScope.Children;
                    fDialingSettingsText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDialingSettingsText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Dialing Settings");
                }

                return fDialingSettingsText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MaximumRetryAttDup0Text
        {
            get
            {
                if (null == fMaximumRetryAttDup0Text)
                {
                    fMaximumRetryAttDup0Text = new Text("MaximumRetryAttDup0Text", DialingSettingsGroup);
                    fMaximumRetryAttDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fMaximumRetryAttDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fMaximumRetryAttDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximum Retry Attempts");
                }

                return fMaximumRetryAttDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text MaximumRetryAttDup1Text
        {
            get
            {
                if (null == fMaximumRetryAttDup1Text)
                {
                    fMaximumRetryAttDup1Text = new Text("MaximumRetryAttDup1Text", MaximumRetryAttDup0Text);
                    fMaximumRetryAttDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fMaximumRetryAttDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fMaximumRetryAttDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximum Retry Attempts");
                }

                return fMaximumRetryAttDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxa0efb839Edit
        {
            get
            {
                if (null == fTextBoxa0efb839Edit)
                {
                    fTextBoxa0efb839Edit = new Edit("TextBoxa0efb839Edit", DialingSettingsGroup);
                    fTextBoxa0efb839Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxa0efb839Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxa0efb839Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"a0efb839-9faf-42dc-8c10-1cc419a32bfe");
                }

                return fTextBoxa0efb839Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup14Pane
        {
            get
            {
                if (null == fScrollViewerPARDup14Pane)
                {
                    fScrollViewerPARDup14Pane = new Pane("ScrollViewerPARDup14Pane", TextBoxa0efb839Edit);
                    fScrollViewerPARDup14Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup14Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup14Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup14Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup15ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup15ScrollBar)
                {
                    fScrollBarVerticDup15ScrollBar = new ScrollBar("ScrollBarVerticDup15ScrollBar", ScrollViewerPARDup14Pane);
                    fScrollBarVerticDup15ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup15ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup15ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup15ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup15ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup15ScrollBar)
                {
                    fScrollBarHorizoDup15ScrollBar = new ScrollBar("ScrollBarHorizoDup15ScrollBar", ScrollViewerPARDup14Pane);
                    fScrollBarHorizoDup15ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup15ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup15ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup15ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RetryIntervalmiDup0Text
        {
            get
            {
                if (null == fRetryIntervalmiDup0Text)
                {
                    fRetryIntervalmiDup0Text = new Text("RetryIntervalmiDup0Text", DialingSettingsGroup);
                    fRetryIntervalmiDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fRetryIntervalmiDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fRetryIntervalmiDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Retry Interval (minutes)");
                }

                return fRetryIntervalmiDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RetryIntervalmiDup1Text
        {
            get
            {
                if (null == fRetryIntervalmiDup1Text)
                {
                    fRetryIntervalmiDup1Text = new Text("RetryIntervalmiDup1Text", RetryIntervalmiDup0Text);
                    fRetryIntervalmiDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fRetryIntervalmiDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRetryIntervalmiDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Retry Interval (minutes)");
                }

                return fRetryIntervalmiDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBox1b041501Edit
        {
            get
            {
                if (null == fTextBox1b041501Edit)
                {
                    fTextBox1b041501Edit = new Edit("TextBox1b041501Edit", DialingSettingsGroup);
                    fTextBox1b041501Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox1b041501Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox1b041501Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1b041501-9935-4d07-a8e3-4ec26ef5be93");
                }

                return fTextBox1b041501Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup15Pane
        {
            get
            {
                if (null == fScrollViewerPARDup15Pane)
                {
                    fScrollViewerPARDup15Pane = new Pane("ScrollViewerPARDup15Pane", TextBox1b041501Edit);
                    fScrollViewerPARDup15Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup15Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup15Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup15Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup16ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup16ScrollBar)
                {
                    fScrollBarVerticDup16ScrollBar = new ScrollBar("ScrollBarVerticDup16ScrollBar", ScrollViewerPARDup15Pane);
                    fScrollBarVerticDup16ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup16ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup16ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup16ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup16ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup16ScrollBar)
                {
                    fScrollBarHorizoDup16ScrollBar = new ScrollBar("ScrollBarHorizoDup16ScrollBar", ScrollViewerPARDup15Pane);
                    fScrollBarHorizoDup16ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup16ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup16ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup16ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group InputSettingsGrGroup
        {
            get
            {
                if (null == fInputSettingsGrGroup)
                {
                    fInputSettingsGrGroup = new Group("InputSettingsGrGroup", LANFaxSetupGrouGroup);
                    fInputSettingsGrGroup.UIMap.Scope = UIASeachScope.Children;
                    fInputSettingsGrGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fInputSettingsGrGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Input Settings");
                }

                return fInputSettingsGrGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text InputSettingsTeText
        {
            get
            {
                if (null == fInputSettingsTeText)
                {
                    fInputSettingsTeText = new Text("InputSettingsTeText", InputSettingsGrGroup);
                    fInputSettingsTeText.UIMap.Scope = UIASeachScope.Children;
                    fInputSettingsTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fInputSettingsTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Input Settings");
                }

                return fInputSettingsTeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NotificationText
        {
            get
            {
                if (null == fNotificationText)
                {
                    fNotificationText = new Text("NotificationText", InputSettingsGrGroup);
                    fNotificationText.UIMap.Scope = UIASeachScope.Children;
                    fNotificationText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fNotificationText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Notification");
                }

                return fNotificationText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NotificationTexText
        {
            get
            {
                if (null == fNotificationTexText)
                {
                    fNotificationTexText = new Text("NotificationTexText", NotificationText);
                    fNotificationTexText.UIMap.Scope = UIASeachScope.Children;
                    fNotificationTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fNotificationTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Notification");
                }

                return fNotificationTexText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBoxd7ebe04ComboBox
        {
            get
            {
                if (null == fComboBoxd7ebe04ComboBox)
                {
                    fComboBoxd7ebe04ComboBox = new ComboBox("ComboBoxd7ebe04ComboBox", InputSettingsGrGroup);
                    fComboBoxd7ebe04ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxd7ebe04ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxd7ebe04ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"d7ebe04c-e411-4c6c-85f2-b015b78ad9e9");
                }

                return fComboBoxd7ebe04ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ErrorCorrectionDup0Text
        {
            get
            {
                if (null == fErrorCorrectionDup0Text)
                {
                    fErrorCorrectionDup0Text = new Text("ErrorCorrectionDup0Text", InputSettingsGrGroup);
                    fErrorCorrectionDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fErrorCorrectionDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fErrorCorrectionDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Error Correction Mode");
                }

                return fErrorCorrectionDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ErrorCorrectionDup1Text
        {
            get
            {
                if (null == fErrorCorrectionDup1Text)
                {
                    fErrorCorrectionDup1Text = new Text("ErrorCorrectionDup1Text", ErrorCorrectionDup0Text);
                    fErrorCorrectionDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fErrorCorrectionDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fErrorCorrectionDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Error Correction Mode");
                }

                return fErrorCorrectionDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox7a33df3ComboBox
        {
            get
            {
                if (null == fComboBox7a33df3ComboBox)
                {
                    fComboBox7a33df3ComboBox = new ComboBox("ComboBox7a33df3ComboBox", InputSettingsGrGroup);
                    fComboBox7a33df3ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox7a33df3ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox7a33df3ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7a33df32-4792-47aa-b457-1c5e44d443d9");
                }

                return fComboBox7a33df3ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NotificationTimDup0Text
        {
            get
            {
                if (null == fNotificationTimDup0Text)
                {
                    fNotificationTimDup0Text = new Text("NotificationTimDup0Text", InputSettingsGrGroup);
                    fNotificationTimDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fNotificationTimDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fNotificationTimDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Notification Timeout (minutes)");
                }

                return fNotificationTimDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NotificationTimDup1Text
        {
            get
            {
                if (null == fNotificationTimDup1Text)
                {
                    fNotificationTimDup1Text = new Text("NotificationTimDup1Text", NotificationTimDup0Text);
                    fNotificationTimDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fNotificationTimDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fNotificationTimDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Notification Timeout (minutes)");
                }

                return fNotificationTimDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBox025adef9Edit
        {
            get
            {
                if (null == fTextBox025adef9Edit)
                {
                    fTextBox025adef9Edit = new Edit("TextBox025adef9Edit", InputSettingsGrGroup);
                    fTextBox025adef9Edit.UIMap.Scope = UIASeachScope.Children;
                    fTextBox025adef9Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBox025adef9Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"025adef9-7861-481d-8fda-fbf409652ed0");
                }

                return fTextBox025adef9Edit;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerPARDup16Pane
        {
            get
            {
                if (null == fScrollViewerPARDup16Pane)
                {
                    fScrollViewerPARDup16Pane = new Pane("ScrollViewerPARDup16Pane", TextBox025adef9Edit);
                    fScrollViewerPARDup16Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARDup16Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerPARDup16Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                }

                return fScrollViewerPARDup16Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup17ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup17ScrollBar)
                {
                    fScrollBarVerticDup17ScrollBar = new ScrollBar("ScrollBarVerticDup17ScrollBar", ScrollViewerPARDup16Pane);
                    fScrollBarVerticDup17ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup17ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup17ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup17ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup17ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup17ScrollBar)
                {
                    fScrollBarHorizoDup17ScrollBar = new ScrollBar("ScrollBarHorizoDup17ScrollBar", ScrollViewerPARDup16Pane);
                    fScrollBarHorizoDup17ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup17ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup17ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup17ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Group OutputSettingsGGroup
        {
            get
            {
                if (null == fOutputSettingsGGroup)
                {
                    fOutputSettingsGGroup = new Group("OutputSettingsGGroup", LANFaxSetupGrouGroup);
                    fOutputSettingsGGroup.UIMap.Scope = UIASeachScope.Children;
                    fOutputSettingsGGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fOutputSettingsGGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Output Settings");
                }

                return fOutputSettingsGGroup;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OutputSettingsTText
        {
            get
            {
                if (null == fOutputSettingsTText)
                {
                    fOutputSettingsTText = new Text("OutputSettingsTText", OutputSettingsGGroup);
                    fOutputSettingsTText.UIMap.Scope = UIASeachScope.Children;
                    fOutputSettingsTText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOutputSettingsTText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Output Settings");
                }

                return fOutputSettingsTText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TransmissionSpeDup0Text
        {
            get
            {
                if (null == fTransmissionSpeDup0Text)
                {
                    fTransmissionSpeDup0Text = new Text("TransmissionSpeDup0Text", OutputSettingsGGroup);
                    fTransmissionSpeDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fTransmissionSpeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fTransmissionSpeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Transmission Speed");
                }

                return fTransmissionSpeDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TransmissionSpeDup1Text
        {
            get
            {
                if (null == fTransmissionSpeDup1Text)
                {
                    fTransmissionSpeDup1Text = new Text("TransmissionSpeDup1Text", TransmissionSpeDup0Text);
                    fTransmissionSpeDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fTransmissionSpeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTransmissionSpeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Transmission Speed");
                }

                return fTransmissionSpeDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox41eac0dComboBox
        {
            get
            {
                if (null == fComboBox41eac0dComboBox)
                {
                    fComboBox41eac0dComboBox = new ComboBox("ComboBox41eac0dComboBox", OutputSettingsGGroup);
                    fComboBox41eac0dComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox41eac0dComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox41eac0dComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"41eac0de-08bc-4bcb-afea-a862e7ab3c85");
                }

                return fComboBox41eac0dComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CoverPageText
        {
            get
            {
                if (null == fCoverPageText)
                {
                    fCoverPageText = new Text("CoverPageText", OutputSettingsGGroup);
                    fCoverPageText.UIMap.Scope = UIASeachScope.Children;
                    fCoverPageText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fCoverPageText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cover Page");
                }

                return fCoverPageText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CoverPageTextBlText
        {
            get
            {
                if (null == fCoverPageTextBlText)
                {
                    fCoverPageTextBlText = new Text("CoverPageTextBlText", CoverPageText);
                    fCoverPageTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fCoverPageTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCoverPageTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cover Page");
                }

                return fCoverPageTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox ComboBox8070d42ComboBox
        {
            get
            {
                if (null == fComboBox8070d42ComboBox)
                {
                    fComboBox8070d42ComboBox = new ComboBox("ComboBox8070d42ComboBox", OutputSettingsGGroup);
                    fComboBox8070d42ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBox8070d42ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBox8070d42ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8070d42c-3648-4429-b3cb-478f8679744d");
                }

                return fComboBox8070d42ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup18ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup18ScrollBar)
                {
                    fScrollBarVerticDup18ScrollBar = new ScrollBar("ScrollBarVerticDup18ScrollBar", ScrollViewerDup1Pane);
                    fScrollBarVerticDup18ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup18ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup18ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup18ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RepeatButtonLinDup0Button
        {
            get
            {
                if (null == fRepeatButtonLinDup0Button)
                {
                    fRepeatButtonLinDup0Button = new Button("RepeatButtonLinDup0Button", ScrollBarVerticDup18ScrollBar);
                    fRepeatButtonLinDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fRepeatButtonLinDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RepeatButton");
                    fRepeatButtonLinDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"LineUp");
                }

                return fRepeatButtonLinDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RepeatButtonPagDup0Button
        {
            get
            {
                if (null == fRepeatButtonPagDup0Button)
                {
                    fRepeatButtonPagDup0Button = new Button("RepeatButtonPagDup0Button", ScrollBarVerticDup18ScrollBar);
                    fRepeatButtonPagDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fRepeatButtonPagDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RepeatButton");
                    fRepeatButtonPagDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PageUp");
                }

                return fRepeatButtonPagDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RepeatButtonPagDup1Button
        {
            get
            {
                if (null == fRepeatButtonPagDup1Button)
                {
                    fRepeatButtonPagDup1Button = new Button("RepeatButtonPagDup1Button", ScrollBarVerticDup18ScrollBar);
                    fRepeatButtonPagDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fRepeatButtonPagDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RepeatButton");
                    fRepeatButtonPagDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PageDown");
                }

                return fRepeatButtonPagDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbThumb
        {
            get
            {
                if (null == fThumbThumb)
                {
                    fThumbThumb = new Thumb("ThumbThumb", ScrollBarVerticDup18ScrollBar);
                    fThumbThumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbThumb.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Thumb");
                }

                return fThumbThumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RepeatButtonLinDup1Button
        {
            get
            {
                if (null == fRepeatButtonLinDup1Button)
                {
                    fRepeatButtonLinDup1Button = new Button("RepeatButtonLinDup1Button", ScrollBarVerticDup18ScrollBar);
                    fRepeatButtonLinDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fRepeatButtonLinDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RepeatButton");
                    fRepeatButtonLinDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"LineDown");
                }

                return fRepeatButtonLinDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup18ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup18ScrollBar)
                {
                    fScrollBarHorizoDup18ScrollBar = new ScrollBar("ScrollBarHorizoDup18ScrollBar", ScrollViewerDup1Pane);
                    fScrollBarHorizoDup18ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup18ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup18ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup18ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup4TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup4TabItem)
                {
                    fSystemWindowsCoDup4TabItem = new TabItem("SystemWindowsCoDup4TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup4TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup4TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup4TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ff96a045-6e12-4ce3-ba85-b65d16c39ffb");
                    fSystemWindowsCoDup4TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup4TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SendtoFolderTexDup0Text
        {
            get
            {
                if (null == fSendtoFolderTexDup0Text)
                {
                    fSendtoFolderTexDup0Text = new Text("SendtoFolderTexDup0Text", SystemWindowsCoDup4TabItem);
                    fSendtoFolderTexDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fSendtoFolderTexDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fSendtoFolderTexDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mFolderTabLabel");
                    fSendtoFolderTexDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send to Folder");
                }

                return fSendtoFolderTexDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SendtoFolderTexDup1Text
        {
            get
            {
                if (null == fSendtoFolderTexDup1Text)
                {
                    fSendtoFolderTexDup1Text = new Text("SendtoFolderTexDup1Text", SendtoFolderTexDup0Text);
                    fSendtoFolderTexDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fSendtoFolderTexDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSendtoFolderTexDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send to Folder");
                }

                return fSendtoFolderTexDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text7a57f43ecb1Text
        {
            get
            {
                if (null == fText7a57f43ecb1Text)
                {
                    fText7a57f43ecb1Text = new Text("Text7a57f43ecb1Text", SystemWindowsCoDup4TabItem);
                    fText7a57f43ecb1Text.UIMap.Scope = UIASeachScope.Children;
                    fText7a57f43ecb1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText7a57f43ecb1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7a57f43e-cb18-48d3-ac92-9dad7b3dc47e");
                    fText7a57f43ecb1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText7a57f43ecb1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text654b650dd19Text
        {
            get
            {
                if (null == fText654b650dd19Text)
                {
                    fText654b650dd19Text = new Text("Text654b650dd19Text", SystemWindowsCoDup4TabItem);
                    fText654b650dd19Text.UIMap.Scope = UIASeachScope.Children;
                    fText654b650dd19Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText654b650dd19Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"654b650d-d19f-413b-aaea-ed4ce008fdd5");
                    fText654b650dd19Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText654b650dd19Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup5TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup5TabItem)
                {
                    fSystemWindowsCoDup5TabItem = new TabItem("SystemWindowsCoDup5TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup5TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup5TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup5TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"38feb495-2893-4d8b-8961-31ebc2a3bd56");
                    fSystemWindowsCoDup5TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup5TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text WorkflowsTextmWText
        {
            get
            {
                if (null == fWorkflowsTextmWText)
                {
                    fWorkflowsTextmWText = new Text("WorkflowsTextmWText", SystemWindowsCoDup5TabItem);
                    fWorkflowsTextmWText.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowsTextmWText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fWorkflowsTextmWText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mWorkflowsTabLabel");
                    fWorkflowsTextmWText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflows");
                }

                return fWorkflowsTextmWText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text WorkflowsTextBlText
        {
            get
            {
                if (null == fWorkflowsTextBlText)
                {
                    fWorkflowsTextBlText = new Text("WorkflowsTextBlText", WorkflowsTextmWText);
                    fWorkflowsTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fWorkflowsTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fWorkflowsTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Workflows");
                }

                return fWorkflowsTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text22D9C34E84CText
        {
            get
            {
                if (null == fText22D9C34E84CText)
                {
                    fText22D9C34E84CText = new Text("Text22D9C34E84CText", SystemWindowsCoDup5TabItem);
                    fText22D9C34E84CText.UIMap.Scope = UIASeachScope.Children;
                    fText22D9C34E84CText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText22D9C34E84CText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"22D9C34E-84C8-4995-AC9E-5B46F8284284");
                    fText22D9C34E84CText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText22D9C34E84CText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TextC8D15BD39C8Text
        {
            get
            {
                if (null == fTextC8D15BD39C8Text)
                {
                    fTextC8D15BD39C8Text = new Text("TextC8D15BD39C8Text", SystemWindowsCoDup5TabItem);
                    fTextC8D15BD39C8Text.UIMap.Scope = UIASeachScope.Children;
                    fTextC8D15BD39C8Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fTextC8D15BD39C8Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"C8D15BD3-9C8D-484c-A5E2-309CA8AA6C56");
                    fTextC8D15BD39C8Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fTextC8D15BD39C8Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup6TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup6TabItem)
                {
                    fSystemWindowsCoDup6TabItem = new TabItem("SystemWindowsCoDup6TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup6TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup6TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup6TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"b8c06323-208e-4239-a523-a025661e0eab");
                    fSystemWindowsCoDup6TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup6TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddressingTextmText
        {
            get
            {
                if (null == fAddressingTextmText)
                {
                    fAddressingTextmText = new Text("AddressingTextmText", SystemWindowsCoDup6TabItem);
                    fAddressingTextmText.UIMap.Scope = UIASeachScope.Children;
                    fAddressingTextmText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fAddressingTextmText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mAddressingTabLabel");
                    fAddressingTextmText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Addressing");
                }

                return fAddressingTextmText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AddressingTextBText
        {
            get
            {
                if (null == fAddressingTextBText)
                {
                    fAddressingTextBText = new Text("AddressingTextBText", AddressingTextmText);
                    fAddressingTextBText.UIMap.Scope = UIASeachScope.Children;
                    fAddressingTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAddressingTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Addressing");
                }

                return fAddressingTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text47EB5CBA4D1Text
        {
            get
            {
                if (null == fText47EB5CBA4D1Text)
                {
                    fText47EB5CBA4D1Text = new Text("Text47EB5CBA4D1Text", SystemWindowsCoDup6TabItem);
                    fText47EB5CBA4D1Text.UIMap.Scope = UIASeachScope.Children;
                    fText47EB5CBA4D1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText47EB5CBA4D1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"47EB5CBA-4D1C-4eee-AD64-E26BDA31A3AC");
                    fText47EB5CBA4D1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText47EB5CBA4D1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text0757E148179Text
        {
            get
            {
                if (null == fText0757E148179Text)
                {
                    fText0757E148179Text = new Text("Text0757E148179Text", SystemWindowsCoDup6TabItem);
                    fText0757E148179Text.UIMap.Scope = UIASeachScope.Children;
                    fText0757E148179Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText0757E148179Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"0757E148-1794-4a5d-B378-6BE8049F65E1");
                    fText0757E148179Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText0757E148179Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem DeviceConfiguraTabItem
        {
            get
            {
                if (null == fDeviceConfiguraTabItem)
                {
                    fDeviceConfiguraTabItem = new TabItem("DeviceConfiguraTabItem", TabControlec0fdTab);
                    fDeviceConfiguraTabItem.UIMap.Scope = UIASeachScope.Children;
                    fDeviceConfiguraTabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fDeviceConfiguraTabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6DF1E016-517F-40e4-A63E-CD48D560192F");
                    fDeviceConfiguraTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device Configuration");
                }

                return fDeviceConfiguraTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DeviceConfiguraText
        {
            get
            {
                if (null == fDeviceConfiguraText)
                {
                    fDeviceConfiguraText = new Text("DeviceConfiguraText", DeviceConfiguraTabItem);
                    fDeviceConfiguraText.UIMap.Scope = UIASeachScope.Children;
                    fDeviceConfiguraText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDeviceConfiguraText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device Configuration");
                }

                return fDeviceConfiguraText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem TemplateConfiguTabItem
        {
            get
            {
                if (null == fTemplateConfiguTabItem)
                {
                    fTemplateConfiguTabItem = new TabItem("TemplateConfiguTabItem", TabControlec0fdTab);
                    fTemplateConfiguTabItem.UIMap.Scope = UIASeachScope.Children;
                    fTemplateConfiguTabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fTemplateConfiguTabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AC05F9B9-A7D8-4b34-80E7-910FB9870D47");
                    fTemplateConfiguTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Template Configuration");
                }

                return fTemplateConfiguTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TemplateConfiguText
        {
            get
            {
                if (null == fTemplateConfiguText)
                {
                    fTemplateConfiguText = new Text("TemplateConfiguText", TemplateConfiguTabItem);
                    fTemplateConfiguText.UIMap.Scope = UIASeachScope.Children;
                    fTemplateConfiguText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fTemplateConfiguText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Template Configuration");
                }

                return fTemplateConfiguText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem LogTabItem9b4f3TabItem
        {
            get
            {
                if (null == fLogTabItem9b4f3TabItem)
                {
                    fLogTabItem9b4f3TabItem = new TabItem("LogTabItem9b4f3TabItem", TabControlec0fdTab);
                    fLogTabItem9b4f3TabItem.UIMap.Scope = UIASeachScope.Children;
                    fLogTabItem9b4f3TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fLogTabItem9b4f3TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9b4f34bb-d75a-4080-9be3-1c50ec31c5b6");
                    fLogTabItem9b4f3TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Log");
                }

                return fLogTabItem9b4f3TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text LogTextBlockText
        {
            get
            {
                if (null == fLogTextBlockText)
                {
                    fLogTextBlockText = new Text("LogTextBlockText", LogTabItem9b4f3TabItem);
                    fLogTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fLogTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fLogTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Log");
                }

                return fLogTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup7TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup7TabItem)
                {
                    fSystemWindowsCoDup7TabItem = new TabItem("SystemWindowsCoDup7TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup7TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup7TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup7TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"3AC8D4A8-3B06-421A-911B-E8CA248A9ED4");
                    fSystemWindowsCoDup7TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup7TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SecurityTextmSeText
        {
            get
            {
                if (null == fSecurityTextmSeText)
                {
                    fSecurityTextmSeText = new Text("SecurityTextmSeText", SystemWindowsCoDup7TabItem);
                    fSecurityTextmSeText.UIMap.Scope = UIASeachScope.Children;
                    fSecurityTextmSeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fSecurityTextmSeText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mSecurityTabLabel");
                    fSecurityTextmSeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Security");
                }

                return fSecurityTextmSeText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SecurityTextBloText
        {
            get
            {
                if (null == fSecurityTextBloText)
                {
                    fSecurityTextBloText = new Text("SecurityTextBloText", SecurityTextmSeText);
                    fSecurityTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fSecurityTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSecurityTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Security");
                }

                return fSecurityTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text8A7A84DB894Text
        {
            get
            {
                if (null == fText8A7A84DB894Text)
                {
                    fText8A7A84DB894Text = new Text("Text8A7A84DB894Text", SystemWindowsCoDup7TabItem);
                    fText8A7A84DB894Text.UIMap.Scope = UIASeachScope.Children;
                    fText8A7A84DB894Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText8A7A84DB894Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8A7A84DB-8945-40E1-A0F9-C40DDD129739");
                    fText8A7A84DB894Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"*");
                }

                return fText8A7A84DB894Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Text16F78FB18FFText
        {
            get
            {
                if (null == fText16F78FB18FFText)
                {
                    fText16F78FB18FFText = new Text("Text16F78FB18FFText", SystemWindowsCoDup7TabItem);
                    fText16F78FB18FFText.UIMap.Scope = UIASeachScope.Children;
                    fText16F78FB18FFText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fText16F78FB18FFText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"16F78FB1-8FF9-4B0D-8251-FB09F520EA73");
                    fText16F78FB18FFText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"!");
                }

                return fText16F78FB18FFText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem SystemWindowsCoDup8TabItem
        {
            get
            {
                if (null == fSystemWindowsCoDup8TabItem)
                {
                    fSystemWindowsCoDup8TabItem = new TabItem("SystemWindowsCoDup8TabItem", TabControlec0fdTab);
                    fSystemWindowsCoDup8TabItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup8TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fSystemWindowsCoDup8TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1678607C-20BF-4137-8238-C9D46EA8FF70");
                    fSystemWindowsCoDup8TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.TabItem Header: Content:");
                }

                return fSystemWindowsCoDup8TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AnalyticsTextmAText
        {
            get
            {
                if (null == fAnalyticsTextmAText)
                {
                    fAnalyticsTextmAText = new Text("AnalyticsTextmAText", SystemWindowsCoDup8TabItem);
                    fAnalyticsTextmAText.UIMap.Scope = UIASeachScope.Children;
                    fAnalyticsTextmAText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fAnalyticsTextmAText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"mAnalyticsTabLabel");
                    fAnalyticsTextmAText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Analytics");
                }

                return fAnalyticsTextmAText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AnalyticsTextBlText
        {
            get
            {
                if (null == fAnalyticsTextBlText)
                {
                    fAnalyticsTextBlText = new Text("AnalyticsTextBlText", AnalyticsTextmAText);
                    fAnalyticsTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fAnalyticsTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAnalyticsTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Analytics");
                }

                return fAnalyticsTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem AboutTabItemf45TabItem
        {
            get
            {
                if (null == fAboutTabItemf45TabItem)
                {
                    fAboutTabItemf45TabItem = new TabItem("AboutTabItemf45TabItem", TabControlec0fdTab);
                    fAboutTabItemf45TabItem.UIMap.Scope = UIASeachScope.Children;
                    fAboutTabItemf45TabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                    fAboutTabItemf45TabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"f45c22d9-f77a-481a-95bc-09cdff03e131");
                    fAboutTabItemf45TabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"About");
                }

                return fAboutTabItemf45TabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AboutTextBlockText
        {
            get
            {
                if (null == fAboutTextBlockText)
                {
                    fAboutTextBlockText = new Text("AboutTextBlockText", AboutTabItemf45TabItem);
                    fAboutTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fAboutTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAboutTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"About");
                }

                return fAboutTextBlockText;
            }
        }
    }
}

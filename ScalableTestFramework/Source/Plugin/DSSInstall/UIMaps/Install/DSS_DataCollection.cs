//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------


using HP.ScalableTest.Framework.Plugin;
using TopCat.TestApi.Enums;

namespace HP.ScalableTest.Plugin.DSSInstall.UIMaps
{
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class DSS_DataCollection: UIMap
    {
        private string _version;

       
        /// <summary>
        /// Backing field for HPDigitalSendinWindow property
        /// </summary>
        private Window fHPDigitalSendinWindow;

        /// <summary>
        /// Backing field for NextButton7196Button property
        /// </summary>
        private Button fNextButton7196Button;

        /// <summary>
        /// Backing field for CancelButton713Button property
        /// </summary>
        private Button fCancelButton713Button;

        /// <summary>
        /// Backing field for BackButton7139Button property
        /// </summary>
        private Button fBackButton7139Button;

        /// <summary>
        /// Backing field for EnableHPtodesigText property
        /// </summary>
        private Text fEnableHPtodesigText;

        /// <summary>
        /// Backing field for IhavereviewedthCheckBox property
        /// </summary>
        private CheckBox fIhavereviewedthCheckBox;

        /// <summary>
        /// Backing field for Button7356Button property
        /// </summary>
        private Button fButton7356Button;

        /// <summary>
        /// Backing field for HPPrivacyStatemHyperlink property
        /// </summary>
        private Hyperlink fHPPrivacyStatemHyperlink;

        /// <summary>
        /// Backing field for AHyperlink property
        /// </summary>
        private Hyperlink fAHyperlink;

        /// <summary>
        /// Backing field for Static7168Text property
        /// </summary>
        private Text fStatic7168Text;

        /// <summary>
        /// Backing field for DataCollectionaText property
        /// </summary>
        private Text fDataCollectionaText;

        /// <summary>
        /// Backing field for DataCollectionaImage property
        /// </summary>
        private Image fDataCollectionaImage;

        /// <summary>
        /// Backing field for NewBinary20StatText property
        /// </summary>
        private Text fNewBinary20StatText;

        /// <summary>
        /// Backing field for InstallShieldStDup0Text property
        /// </summary>
        private Text fInstallShieldStDup0Text;

        /// <summary>
        /// Backing field for InstallShieldStDup1Text property
        /// </summary>
        private Text fInstallShieldStDup1Text;

        /// <summary>
        /// Backing field for InstallShieldStDup2Text property
        /// </summary>
        private Text fInstallShieldStDup2Text;

        /// <summary>
        /// Backing field for HPDigitalSendinTitleBar property
        /// </summary>
        private TitleBar fHPDigitalSendinTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyMenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyMenuBar;

        /// <summary>
        /// Backing field for SystemItem1MenuItem property
        /// </summary>
        private MenuItem fSystemItem1MenuItem;

        /// <summary>
        /// Backing field for CloseCloseButton property
        /// </summary>
        private Button fCloseCloseButton;

        private Window fErrorConnectionWindow;
        private Text fErrorInfoText;
        private Button fOkErrorButton;
        private Pane fInternetConnectionPane;
        private Text fVerifyInternetText;

        /// <summary>
        /// Initializes a new instance of the <see cref="DSS_DataCollection"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public DSS_DataCollection(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
            ScreenName = "Data Collection Screen";
            ScreenIndex = 4;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSS_DataCollection"/> class using the default UIAFramework.
        /// </summary>
        public DSS_DataCollection()
        {
            Desktop = new Desktop();
            ScreenName = "Data Collection Screen";
            ScreenIndex = 4;
        }

        public DSS_DataCollection(string version)
        {
            Desktop = new Desktop(UIAFramework.ManagedUIA);
            _version = version;
            ScreenName = "Data Collection Screen";
            ScreenIndex = 4;
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        public void WaitForAvailable(int timeout)
        {
            HPDigitalSendinWindow.WaitForAvailable(timeout);
            NextButton7196Button.WaitForAvailable(timeout);

        }

        public override PluginExecutionResult PerformAction(int cancelScreen)
        {
            WaitForAvailable(5);
            if (cancelScreen == ScreenIndex)
            {
                if (CancelButton713Button.Click() != ResultCode.Passed)
                {
                    return new PluginExecutionResult(PluginResult.Failed, $"Failed to cancel installation at { (object)ScreenName}");
                }

                return new PluginExecutionResult(PluginResult.Skipped, $"Cancelled the installation at {ScreenName}");
            }

            if (NextButton7196Button.Click() != ResultCode.Passed)
            {
                return new PluginExecutionResult(PluginResult.Failed, "Failed to proceed beyond data collection screen");
            }

            if (VerifyInternetText.IsVisible(5))
            {
                if (ErrorConnectionWindow.IsVisible(10))
                {
                    OkErrorButton.Click(5);
                }
            }

            return new PluginExecutionResult(PluginResult.Passed);

        }
        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinWindow
        {
            get
            {
                if (null == fHPDigitalSendinWindow)
                {
                    fHPDigitalSendinWindow = new Window("HPDigitalSendinWindow", Desktop);
                    fHPDigitalSendinWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"MsiDialogCloseClass");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software {_version} - InstallShield Wizard");
                }

                return fHPDigitalSendinWindow;
            }
        }
        public Window ErrorConnectionWindow
        {
            get
            {
                if (null == fErrorConnectionWindow)
                {
                    fErrorConnectionWindow = new Window("ErrorConnectionWindow", HPDigitalSendinWindow);
                    fErrorConnectionWindow.UIMap.Scope = UIASeachScope.Children;
                    fErrorConnectionWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"#32770");
                    fErrorConnectionWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software {_version.Substring(0, 4)} - InstallShield Wizard");
                }

                return fErrorConnectionWindow;
            }
        }

        public Button OkErrorButton
        {
            get
            {
                if (null == fOkErrorButton)
                {
                    fOkErrorButton = new Button("OkErrorButton", ErrorConnectionWindow);
                    fOkErrorButton.UIMap.Scope = UIASeachScope.Children;
                    fOkErrorButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOkErrorButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOkErrorButton;
            }
        }

        public Text ErrorInfoText
        {
            get
            {
                if (null == fErrorInfoText)
                {
                    fErrorInfoText = new Text("ErrorInfoText", ErrorConnectionWindow);
                    fErrorInfoText.UIMap.Scope = UIASeachScope.Children;
                    fErrorInfoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fErrorInfoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Unable to connect to the internet.  Please check your internet connection settings.  Installation can continue without internet connection but DSS will need it post installation.  Press OK to continue with installation.");
                }

                return fErrorInfoText;
            }

        }

        public Pane InternetConnectionPane
        {
            get
            {
                if (null == fInternetConnectionPane)
                {
                    fInternetConnectionPane = new Pane("InternetConnectionPane", HPDigitalSendinWindow);
                    fInternetConnectionPane.UIMap.Scope = UIASeachScope.Children;
                    fInternetConnectionPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"#32770");
                }

                return fInternetConnectionPane;
            }

        }

        public Text VerifyInternetText
        {
            get
            {
                if (null == fVerifyInternetText)
                {
                    fVerifyInternetText = new Text("VerifyInternetText", InternetConnectionPane);
                    fVerifyInternetText.UIMap.Scope = UIASeachScope.Children;
                    fVerifyInternetText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fVerifyInternetText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Verifying internet connection...");
                }

                return fVerifyInternetText;
            }

        }


        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button NextButton7196Button
        {
            get
            {
                if (null == fNextButton7196Button)
                {
                    fNextButton7196Button = new Button("NextButton7196Button", HPDigitalSendinWindow);
                    fNextButton7196Button.UIMap.Scope = UIASeachScope.Children;
                    fNextButton7196Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fNextButton7196Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Next >");
                }

                return fNextButton7196Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButton713Button
        {
            get
            {
                if (null == fCancelButton713Button)
                {
                    fCancelButton713Button = new Button("CancelButton713Button", HPDigitalSendinWindow);
                    fCancelButton713Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton713Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButton713Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButton713Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button BackButton7139Button
        {
            get
            {
                if (null == fBackButton7139Button)
                {
                    fBackButton7139Button = new Button("BackButton7139Button", HPDigitalSendinWindow);
                    fBackButton7139Button.UIMap.Scope = UIASeachScope.Children;
                    fBackButton7139Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fBackButton7139Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"< Back");
                }

                return fBackButton7139Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EnableHPtodesigText
        {
            get
            {
                if (null == fEnableHPtodesigText)
                {
                    fEnableHPtodesigText = new Text("EnableHPtodesigText", HPDigitalSendinWindow);
                    fEnableHPtodesigText.UIMap.Scope = UIASeachScope.Children;
                    fEnableHPtodesigText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fEnableHPtodesigText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8463");
                    fEnableHPtodesigText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Enable HP to design products and services that help meet your needs by allowing HP to anonymously collect HP Digital Sending Software and printer data.

HP Digital Sending Software uses an Internet connection to transmit data for the following purposes:

    1.  Reduce the chance of having problems with your HP products and services
    2.  Help HP to improve products and services
	
HP is committed to protecting your privacy. You can turn this feature on and off at any time by going to the General tab of the HP Digital Sending Software Configuration Utility.

Your name, address, email address and sensitive data are not sent to HP.");
                }

                return fEnableHPtodesigText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox IhavereviewedthCheckBox
        {
            get
            {
                if (null == fIhavereviewedthCheckBox)
                {
                    fIhavereviewedthCheckBox = new CheckBox("IhavereviewedthCheckBox", HPDigitalSendinWindow);
                    fIhavereviewedthCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fIhavereviewedthCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fIhavereviewedthCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"I have reviewed the data use statement and agree that HP may collect HP Digital Sending Software and printer data.");
                }

                return fIhavereviewedthCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button Button7356Button
        {
            get
            {
                if (null == fButton7356Button)
                {
                    fButton7356Button = new Button("Button7356Button", HPDigitalSendinWindow);
                    fButton7356Button.UIMap.Scope = UIASeachScope.Children;
                    fButton7356Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButton7356Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7356");
                    fButton7356Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"?");
                }

                return fButton7356Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Hyperlink HPPrivacyStatemHyperlink
        {
            get
            {
                if (null == fHPPrivacyStatemHyperlink)
                {
                    fHPPrivacyStatemHyperlink = new Hyperlink("HPPrivacyStatemHyperlink", HPDigitalSendinWindow);
                    fHPPrivacyStatemHyperlink.UIMap.Scope = UIASeachScope.Children;
                    fHPPrivacyStatemHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"SysLink");
                    fHPPrivacyStatemHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8700");
                    fHPPrivacyStatemHyperlink.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Privacy Statement Online");
                }

                return fHPPrivacyStatemHyperlink;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Hyperlink AHyperlink
        {
            get
            {
                if (null == fAHyperlink)
                {
                    fAHyperlink = new Hyperlink("AHyperlink", HPPrivacyStatemHyperlink);
                    fAHyperlink.UIMap.Scope = UIASeachScope.Children;
                }

                return fAHyperlink;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Static7168Text
        {
            get
            {
                if (null == fStatic7168Text)
                {
                    fStatic7168Text = new Text("Static7168Text", HPDigitalSendinWindow);
                    fStatic7168Text.UIMap.Scope = UIASeachScope.Children;
                    fStatic7168Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fStatic7168Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7168");
                }

                return fStatic7168Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text DataCollectionaText
        {
            get
            {
                if (null == fDataCollectionaText)
                {
                    fDataCollectionaText = new Text("DataCollectionaText", HPDigitalSendinWindow);
                    fDataCollectionaText.UIMap.Scope = UIASeachScope.Children;
                    fDataCollectionaText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fDataCollectionaText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7170");
                    fDataCollectionaText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Data Collection and Use Statement");
                }

                return fDataCollectionaText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image DataCollectionaImage
        {
            get
            {
                if (null == fDataCollectionaImage)
                {
                    fDataCollectionaImage = new Image("DataCollectionaImage", HPDigitalSendinWindow);
                    fDataCollectionaImage.UIMap.Scope = UIASeachScope.Children;
                    fDataCollectionaImage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fDataCollectionaImage.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8422");
                    fDataCollectionaImage.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Data Collection and Use Statement");
                }

                return fDataCollectionaImage;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NewBinary20StatText
        {
            get
            {
                if (null == fNewBinary20StatText)
                {
                    fNewBinary20StatText = new Text("NewBinary20StatText", HPDigitalSendinWindow);
                    fNewBinary20StatText.UIMap.Scope = UIASeachScope.Children;
                    fNewBinary20StatText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fNewBinary20StatText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8424");
                    fNewBinary20StatText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NewBinary20");
                }

                return fNewBinary20StatText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text InstallShieldStDup0Text
        {
            get
            {
                if (null == fInstallShieldStDup0Text)
                {
                    fInstallShieldStDup0Text = new Text("InstallShieldStDup0Text", HPDigitalSendinWindow);
                    fInstallShieldStDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fInstallShieldStDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fInstallShieldStDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8426");
                    fInstallShieldStDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"InstallShield");
                }

                return fInstallShieldStDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text InstallShieldStDup1Text
        {
            get
            {
                if (null == fInstallShieldStDup1Text)
                {
                    fInstallShieldStDup1Text = new Text("InstallShieldStDup1Text", HPDigitalSendinWindow);
                    fInstallShieldStDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fInstallShieldStDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fInstallShieldStDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8428");
                    fInstallShieldStDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"InstallShield");
                }

                return fInstallShieldStDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text InstallShieldStDup2Text
        {
            get
            {
                if (null == fInstallShieldStDup2Text)
                {
                    fInstallShieldStDup2Text = new Text("InstallShieldStDup2Text", HPDigitalSendinWindow);
                    fInstallShieldStDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fInstallShieldStDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fInstallShieldStDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8437");
                    fInstallShieldStDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"InstallShield");
                }

                return fInstallShieldStDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar HPDigitalSendinTitleBar
        {
            get
            {
                if (null == fHPDigitalSendinTitleBar)
                {
                    fHPDigitalSendinTitleBar = new TitleBar("HPDigitalSendinTitleBar", HPDigitalSendinWindow);
                    fHPDigitalSendinTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software {_version} - InstallShield Wizard");
                }

                return fHPDigitalSendinTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyMenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyMenuBar)
                {
                    fSystemMenuBarSyMenuBar = new MenuBar("SystemMenuBarSyMenuBar", HPDigitalSendinTitleBar);
                    fSystemMenuBarSyMenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyMenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1MenuItem
        {
            get
            {
                if (null == fSystemItem1MenuItem)
                {
                    fSystemItem1MenuItem = new MenuItem("SystemItem1MenuItem", SystemMenuBarSyMenuBar);
                    fSystemItem1MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseButton
        {
            get
            {
                if (null == fCloseCloseButton)
                {
                    fCloseCloseButton = new Button("CloseCloseButton", HPDigitalSendinTitleBar);
                    fCloseCloseButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseButton;
            }
        }
    }
}

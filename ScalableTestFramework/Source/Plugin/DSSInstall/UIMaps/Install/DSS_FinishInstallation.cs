//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------


using System.Security.Cryptography.X509Certificates;
using HP.ScalableTest.Framework.Plugin;
using TopCat.TestApi.Enums;
using TopCat.TestApi.GUIAutomation;

namespace HP.ScalableTest.Plugin.DSSInstall.UIMaps
{
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class DSS_FinishInstallation: UIMap
    {
        private string _version;
        private bool _launchApplication;
        private bool _viewReadme;
       
        /// <summary>
        /// Backing field for HPDigitalSendinWindow property
        /// </summary>
        private Window fHPDigitalSendinWindow;

        /// <summary>
        /// Backing field for FinishButton723Button property
        /// </summary>
        private Button fFinishButton723Button;

        /// <summary>
        /// Backing field for CancelButton713Button property
        /// </summary>
        private Button fCancelButton713Button;

        /// <summary>
        /// Backing field for NewBinary19StatImage property
        /// </summary>
        private Image fNewBinary19StatImage;

        /// <summary>
        /// Backing field for Button7159CheckBox property
        /// </summary>
        private CheckBox fButton7159CheckBox;

        /// <summary>
        /// Backing field for Button7158CheckBox property
        /// </summary>
        private CheckBox fButton7158CheckBox;

        /// <summary>
        /// Backing field for Button7144CheckBox property
        /// </summary>
        private CheckBox fButton7144CheckBox;

        /// <summary>
        /// Backing field for BackButton7139Button property
        /// </summary>
        private Button fBackButton7139Button;

        /// <summary>
        /// Backing field for ShowtheWindowsIText property
        /// </summary>
        private Text fShowtheWindowsIText;

        /// <summary>
        /// Backing field for TheInstallShielText property
        /// </summary>
        private Text fTheInstallShielText;

        /// <summary>
        /// Backing field for LaunchHPDigitalText property
        /// </summary>
        private Text fLaunchHPDigitalText;

        /// <summary>
        /// Backing field for ShowthereadmefiText property
        /// </summary>
        private Text fShowthereadmefiText;

        /// <summary>
        /// Backing field for YourInternetconText property
        /// </summary>
        private Text fYourInternetconText;

        /// <summary>
        /// Backing field for InstallShieldWiText property
        /// </summary>
        private Text fInstallShieldWiText;

        /// <summary>
        /// Backing field for HPDigitalSendinTitleBar property
        /// </summary>
        private TitleBar fHPDigitalSendinTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyMenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyMenuBar;

        /// <summary>
        /// Backing field for SystemItem1MenuItem property
        /// </summary>
        private MenuItem fSystemItem1MenuItem;

        /// <summary>
        /// Backing field for CloseCloseButton property
        /// </summary>
        private Button fCloseCloseButton;

        /// <summary>
        /// Initializes a new instance of the <see cref="DSS_FinishInstallation"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public DSS_FinishInstallation(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
            ScreenName = "Finish Screen";
            ScreenIndex = 9;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSS_FinishInstallation"/> class using the default UIAFramework.
        /// </summary>
        public DSS_FinishInstallation()
        {
            Desktop = new Desktop();
            ScreenName = "Finish Screen";
            ScreenIndex = 9;
        }

        public DSS_FinishInstallation(string version, bool LaunchApplication, bool ViewReadme)
        {
            Desktop = new Desktop(UIAFramework.ManagedUIA);
            _version = version;
            ScreenName = "Finish Screen";
            ScreenIndex = 9;
            _launchApplication = LaunchApplication;
            _viewReadme = ViewReadme;
        }

        public void WaitForAvailable(int timeout)
        {
            HPDigitalSendinWindow.WaitForAvailable(timeout);
            FinishButton723Button.WaitForAvailable(timeout);

        }

        public override PluginExecutionResult PerformAction(int cancelScreen)
        {
            WaitForAvailable(600);
            if (cancelScreen == ScreenIndex)
            {
                if (CancelButton713Button.Click() != ResultCode.Passed)
                {
                    return new PluginExecutionResult(PluginResult.Failed, $"Failed to cancel installation at { (object)ScreenName}");
                }

                return new PluginExecutionResult(PluginResult.Skipped, $"Cancelled the installation at {ScreenName}");
            }

            if (_viewReadme)
            {
                ShowthereadmefiText.ClickWithMouse(MouseButton.Left,
                    new PointCoordinate(-15, 5, CoordinateType.Relative), true, true, 5);
            }

            if (_launchApplication)
            {
                LaunchHPDigitalText.ClickWithMouse(MouseButton.Left,
                    new PointCoordinate(-15, 5, CoordinateType.Relative), true, true, 5);
            }
            if (FinishButton723Button.Click() != ResultCode.Passed)
            {
                return new PluginExecutionResult(PluginResult.Failed, "Failed to select finish installation");
            }

            return new PluginExecutionResult(PluginResult.Passed);

        }
        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinWindow
        {
            get
            {
                if (null == fHPDigitalSendinWindow)
                {
                    fHPDigitalSendinWindow = new Window("HPDigitalSendinWindow", Desktop);
                    fHPDigitalSendinWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"MsiDialogCloseClass");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software {_version} - InstallShield Wizard");
                }

                return fHPDigitalSendinWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button FinishButton723Button
        {
            get
            {
                if (null == fFinishButton723Button)
                {
                    fFinishButton723Button = new Button("FinishButton723Button", HPDigitalSendinWindow);
                    fFinishButton723Button.UIMap.Scope = UIASeachScope.Children;
                    fFinishButton723Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fFinishButton723Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Finish");
                }

                return fFinishButton723Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButton713Button
        {
            get
            {
                if (null == fCancelButton713Button)
                {
                    fCancelButton713Button = new Button("CancelButton713Button", HPDigitalSendinWindow);
                    fCancelButton713Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton713Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButton713Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButton713Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image NewBinary19StatImage
        {
            get
            {
                if (null == fNewBinary19StatImage)
                {
                    fNewBinary19StatImage = new Image("NewBinary19StatImage", HPDigitalSendinWindow);
                    fNewBinary19StatImage.UIMap.Scope = UIASeachScope.Children;
                    fNewBinary19StatImage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fNewBinary19StatImage.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8451");
                    fNewBinary19StatImage.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NewBinary19");
                }

                return fNewBinary19StatImage;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox Button7159CheckBox
        {
            get
            {
                if (null == fButton7159CheckBox)
                {
                    fButton7159CheckBox = new CheckBox("Button7159CheckBox", HPDigitalSendinWindow);
                    fButton7159CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fButton7159CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButton7159CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7158");
                }

                return fButton7159CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox Button7158CheckBox
        {
            get
            {
                if (null == fButton7158CheckBox)
                {
                    fButton7158CheckBox = new CheckBox("Button7158CheckBox", HPDigitalSendinWindow);
                    fButton7158CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fButton7158CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButton7158CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7157");
                }

                return fButton7158CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox Button7144CheckBox
        {
            get
            {
                if (null == fButton7144CheckBox)
                {
                    fButton7144CheckBox = new CheckBox("Button7144CheckBox", HPDigitalSendinWindow);
                    fButton7144CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fButton7144CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButton7144CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7143");
                }

                return fButton7144CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button BackButton7139Button
        {
            get
            {
                if (null == fBackButton7139Button)
                {
                    fBackButton7139Button = new Button("BackButton7139Button", HPDigitalSendinWindow);
                    fBackButton7139Button.UIMap.Scope = UIASeachScope.Children;
                    fBackButton7139Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fBackButton7139Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7138");
                    fBackButton7139Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"< Back");
                }

                return fBackButton7139Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ShowtheWindowsIText
        {
            get
            {
                if (null == fShowtheWindowsIText)
                {
                    fShowtheWindowsIText = new Text("ShowtheWindowsIText", HPDigitalSendinWindow);
                    fShowtheWindowsIText.UIMap.Scope = UIASeachScope.Children;
                    fShowtheWindowsIText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fShowtheWindowsIText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7149");
                    fShowtheWindowsIText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Show the Windows Installer log");
                }

                return fShowtheWindowsIText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TheInstallShielText
        {
            get
            {
                if (null == fTheInstallShielText)
                {
                    fTheInstallShielText = new Text("TheInstallShielText", HPDigitalSendinWindow);
                    fTheInstallShielText.UIMap.Scope = UIASeachScope.Children;
                    fTheInstallShielText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fTheInstallShielText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7151");
                    fTheInstallShielText.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"The InstallShield Wizard has successfully installed HP Digital Sending Software {_version}. Click Finish to exit the wizard.");
                }

                return fTheInstallShielText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text LaunchHPDigitalText
        {
            get
            {
                if (null == fLaunchHPDigitalText)
                {
                    fLaunchHPDigitalText = new Text("LaunchHPDigitalText", HPDigitalSendinWindow);
                    fLaunchHPDigitalText.UIMap.Scope = UIASeachScope.Children;
                    fLaunchHPDigitalText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fLaunchHPDigitalText.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"Launch HP Digital Sending Software {_version}");
                }

                return fLaunchHPDigitalText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ShowthereadmefiText
        {
            get
            {
                if (null == fShowthereadmefiText)
                {
                    fShowthereadmefiText = new Text("ShowthereadmefiText", HPDigitalSendinWindow);
                    fShowthereadmefiText.UIMap.Scope = UIASeachScope.Children;
                    fShowthereadmefiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fShowthereadmefiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Show the readme file");
                }

                return fShowthereadmefiText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text YourInternetconText
        {
            get
            {
                if (null == fYourInternetconText)
                {
                    fYourInternetconText = new Text("YourInternetconText", HPDigitalSendinWindow);
                    fYourInternetconText.UIMap.Scope = UIASeachScope.Children;
                    fYourInternetconText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fYourInternetconText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8437");
                    fYourInternetconText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Your Internet connection can be used to make sure that you have the latest updates.");
                }

                return fYourInternetconText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text InstallShieldWiText
        {
            get
            {
                if (null == fInstallShieldWiText)
                {
                    fInstallShieldWiText = new Text("InstallShieldWiText", HPDigitalSendinWindow);
                    fInstallShieldWiText.UIMap.Scope = UIASeachScope.Children;
                    fInstallShieldWiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fInstallShieldWiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8461");
                    fInstallShieldWiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"InstallShield Wizard Completed");
                }

                return fInstallShieldWiText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar HPDigitalSendinTitleBar
        {
            get
            {
                if (null == fHPDigitalSendinTitleBar)
                {
                    fHPDigitalSendinTitleBar = new TitleBar("HPDigitalSendinTitleBar", HPDigitalSendinWindow);
                    fHPDigitalSendinTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software {_version} - InstallShield Wizard");
                }

                return fHPDigitalSendinTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyMenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyMenuBar)
                {
                    fSystemMenuBarSyMenuBar = new MenuBar("SystemMenuBarSyMenuBar", HPDigitalSendinTitleBar);
                    fSystemMenuBarSyMenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyMenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1MenuItem
        {
            get
            {
                if (null == fSystemItem1MenuItem)
                {
                    fSystemItem1MenuItem = new MenuItem("SystemItem1MenuItem", SystemMenuBarSyMenuBar);
                    fSystemItem1MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseButton
        {
            get
            {
                if (null == fCloseCloseButton)
                {
                    fCloseCloseButton = new Button("CloseCloseButton", HPDigitalSendinTitleBar);
                    fCloseCloseButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseButton;
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------


using HP.ScalableTest.Framework.Plugin;
using TopCat.TestApi.Enums;

namespace HP.ScalableTest.Plugin.DSSInstall.UIMaps
{
    using System;
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class DSS_Languages: UIMap
    {
        private string _version;
        
        /// <summary>
        /// Backing field for HPDigitalSendinWindow property
        /// </summary>
        private Window fHPDigitalSendinWindow;

        /// <summary>
        /// Backing field for EnglishUnitedStComboBox property
        /// </summary>
        private ComboBox fEnglishUnitedStComboBox;

        /// <summary>
        /// Backing field for ComboLBoxListBoList property
        /// </summary>
        private List fComboLBoxListBoList;

        /// <summary>
        /// Backing field for CatalanListItem property
        /// </summary>
        private ListItem fCatalanListItem;

        /// <summary>
        /// Backing field for ChineseSimplifiListItem property
        /// </summary>
        private ListItem fChineseSimplifiListItem;

        /// <summary>
        /// Backing field for ChineseTraditioListItem property
        /// </summary>
        private ListItem fChineseTraditioListItem;

        /// <summary>
        /// Backing field for CroatianListItem property
        /// </summary>
        private ListItem fCroatianListItem;

        /// <summary>
        /// Backing field for CzechListItem property
        /// </summary>
        private ListItem fCzechListItem;

        /// <summary>
        /// Backing field for DanishListItem property
        /// </summary>
        private ListItem fDanishListItem;

        /// <summary>
        /// Backing field for DutchListItem property
        /// </summary>
        private ListItem fDutchListItem;

        /// <summary>
        /// Backing field for EnglishUnitedStListItem property
        /// </summary>
        private ListItem fEnglishUnitedStListItem;

        /// <summary>
        /// Backing field for FinnishListItem property
        /// </summary>
        private ListItem fFinnishListItem;

        /// <summary>
        /// Backing field for FrenchStandardListItem property
        /// </summary>
        private ListItem fFrenchStandardListItem;

        /// <summary>
        /// Backing field for GermanListItem property
        /// </summary>
        private ListItem fGermanListItem;

        /// <summary>
        /// Backing field for GreekListItem property
        /// </summary>
        private ListItem fGreekListItem;

        /// <summary>
        /// Backing field for HungarianListItem property
        /// </summary>
        private ListItem fHungarianListItem;

        /// <summary>
        /// Backing field for IndonesianListItem property
        /// </summary>
        private ListItem fIndonesianListItem;

        /// <summary>
        /// Backing field for ItalianListItem property
        /// </summary>
        private ListItem fItalianListItem;

        /// <summary>
        /// Backing field for JapaneseListItem property
        /// </summary>
        private ListItem fJapaneseListItem;

        /// <summary>
        /// Backing field for KoreanListItem property
        /// </summary>
        private ListItem fKoreanListItem;

        /// <summary>
        /// Backing field for NorwegianListItem property
        /// </summary>
        private ListItem fNorwegianListItem;

        /// <summary>
        /// Backing field for PolishListItem property
        /// </summary>
        private ListItem fPolishListItem;

        /// <summary>
        /// Backing field for PortugueseStandListItem property
        /// </summary>
        private ListItem fPortugueseStandListItem;

        /// <summary>
        /// Backing field for RomanianListItem property
        /// </summary>
        private ListItem fRomanianListItem;

        /// <summary>
        /// Backing field for RussianListItem property
        /// </summary>
        private ListItem fRussianListItem;

        /// <summary>
        /// Backing field for SlovakListItem property
        /// </summary>
        private ListItem fSlovakListItem;

        /// <summary>
        /// Backing field for SlovenianListItem property
        /// </summary>
        private ListItem fSlovenianListItem;

        /// <summary>
        /// Backing field for SpanishListItem property
        /// </summary>
        private ListItem fSpanishListItem;

        /// <summary>
        /// Backing field for SwedishListItem property
        /// </summary>
        private ListItem fSwedishListItem;

        /// <summary>
        /// Backing field for ThaiListItem property
        /// </summary>
        private ListItem fThaiListItem;

        /// <summary>
        /// Backing field for TurkishListItem property
        /// </summary>
        private ListItem fTurkishListItem;

        /// <summary>
        /// Backing field for DropDownButtonDButton property
        /// </summary>
        private Button fDropDownButtonDButton;

        /// <summary>
        /// Backing field for OKButton1Button property
        /// </summary>
        private Button fOKButton1Button;

        /// <summary>
        /// Backing field for CancelButton2Button property
        /// </summary>
        private Button fCancelButton2Button;

        /// <summary>
        /// Backing field for SelectthelanguaText property
        /// </summary>
        private Text fSelectthelanguaText;

        /// <summary>
        /// Backing field for SelectthelanguaImage property
        /// </summary>
        private Image fSelectthelanguaImage;

        /// <summary>
        /// Backing field for HPDigitalSendinTitleBar property
        /// </summary>
        private TitleBar fHPDigitalSendinTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyMenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyMenuBar;

        /// <summary>
        /// Backing field for SystemItem1MenuItem property
        /// </summary>
        private MenuItem fSystemItem1MenuItem;

        /// <summary>
        /// Backing field for CloseCloseButton property
        /// </summary>
        private Button fCloseCloseButton;

        
        /// <summary>
        /// Initializes a new instance of the <see cref="DSS_Languages"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public DSS_Languages(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
            ScreenName = "Language Screen";
            ScreenIndex = 1;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSS_Languages"/> class using the default UIAFramework.
        /// </summary>
        public DSS_Languages()
        {
            Desktop = new Desktop(UIAFramework.ManagedUIA);
            ScreenName = "Language Screen";
            ScreenIndex = 1;
        }

        public DSS_Languages(string version)
        {
            Desktop = new Desktop(UIAFramework.ManagedUIA);
            _version = version;
            ScreenName = "Language Screen";
            ScreenIndex = 1;

        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        public void WaitForAvailable(int timeout)
        {
            HPDigitalSendinWindow.WaitForAvailable(timeout);
            OKButton1Button.WaitForAvailable(timeout);
            
        }
        

        public override PluginExecutionResult PerformAction(int cancelScreen)
        {
            WaitForAvailable(5);
            if (cancelScreen == ScreenIndex)
            {
                if (CancelButton2Button.Click() != ResultCode.Passed)
                {
                    return new PluginExecutionResult(PluginResult.Failed, $"Failed to cancel installation at {ScreenName}");
                }

                return new PluginExecutionResult(PluginResult.Skipped, $"Cancelled the installation at {ScreenName}");
            }

            if (OKButton1Button.Click() != ResultCode.Passed)
            {
                return new PluginExecutionResult(PluginResult.Failed, "Failed to set Language");
            }

            return new PluginExecutionResult(PluginResult.Passed);
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinWindow
        {
            get
            {
                if (null == fHPDigitalSendinWindow)
                {
                    fHPDigitalSendinWindow = new Window("HPDigitalSendinWindow", Desktop);
                    fHPDigitalSendinWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"#32770");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software {_version} - InstallShield Wizard");
                }

                return fHPDigitalSendinWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox EnglishUnitedStComboBox
        {
            get
            {
                if (null == fEnglishUnitedStComboBox)
                {
                    fEnglishUnitedStComboBox = new ComboBox("EnglishUnitedStComboBox", HPDigitalSendinWindow);
                    fEnglishUnitedStComboBox.UIMap.Scope = UIASeachScope.Children;
                    fEnglishUnitedStComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fEnglishUnitedStComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"306");
                    fEnglishUnitedStComboBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"English (United States)");
                }

                return fEnglishUnitedStComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public List ComboLBoxListBoList
        {
            get
            {
                if (null == fComboLBoxListBoList)
                {
                    fComboLBoxListBoList = new List("ComboLBoxListBoList", EnglishUnitedStComboBox);
                    fComboLBoxListBoList.UIMap.Scope = UIASeachScope.Children;
                    fComboLBoxListBoList.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboLBox");
                    fComboLBoxListBoList.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ListBox");
                }

                return fComboLBoxListBoList;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem CatalanListItem
        {
            get
            {
                if (null == fCatalanListItem)
                {
                    fCatalanListItem = new ListItem("CatalanListItem", ComboLBoxListBoList);
                    fCatalanListItem.UIMap.Scope = UIASeachScope.Children;
                    fCatalanListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Catalan");
                }

                return fCatalanListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem ChineseSimplifiListItem
        {
            get
            {
                if (null == fChineseSimplifiListItem)
                {
                    fChineseSimplifiListItem = new ListItem("ChineseSimplifiListItem", ComboLBoxListBoList);
                    fChineseSimplifiListItem.UIMap.Scope = UIASeachScope.Children;
                    fChineseSimplifiListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Chinese (Simplified)");
                }

                return fChineseSimplifiListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem ChineseTraditioListItem
        {
            get
            {
                if (null == fChineseTraditioListItem)
                {
                    fChineseTraditioListItem = new ListItem("ChineseTraditioListItem", ComboLBoxListBoList);
                    fChineseTraditioListItem.UIMap.Scope = UIASeachScope.Children;
                    fChineseTraditioListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Chinese (Traditional)");
                }

                return fChineseTraditioListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem CroatianListItem
        {
            get
            {
                if (null == fCroatianListItem)
                {
                    fCroatianListItem = new ListItem("CroatianListItem", ComboLBoxListBoList);
                    fCroatianListItem.UIMap.Scope = UIASeachScope.Children;
                    fCroatianListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Croatian");
                }

                return fCroatianListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem CzechListItem
        {
            get
            {
                if (null == fCzechListItem)
                {
                    fCzechListItem = new ListItem("CzechListItem", ComboLBoxListBoList);
                    fCzechListItem.UIMap.Scope = UIASeachScope.Children;
                    fCzechListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Czech");
                }

                return fCzechListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem DanishListItem
        {
            get
            {
                if (null == fDanishListItem)
                {
                    fDanishListItem = new ListItem("DanishListItem", ComboLBoxListBoList);
                    fDanishListItem.UIMap.Scope = UIASeachScope.Children;
                    fDanishListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Danish");
                }

                return fDanishListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem DutchListItem
        {
            get
            {
                if (null == fDutchListItem)
                {
                    fDutchListItem = new ListItem("DutchListItem", ComboLBoxListBoList);
                    fDutchListItem.UIMap.Scope = UIASeachScope.Children;
                    fDutchListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Dutch");
                }

                return fDutchListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem EnglishUnitedStListItem
        {
            get
            {
                if (null == fEnglishUnitedStListItem)
                {
                    fEnglishUnitedStListItem = new ListItem("EnglishUnitedStListItem", ComboLBoxListBoList);
                    fEnglishUnitedStListItem.UIMap.Scope = UIASeachScope.Children;
                    fEnglishUnitedStListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"English (United States)");
                }

                return fEnglishUnitedStListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem FinnishListItem
        {
            get
            {
                if (null == fFinnishListItem)
                {
                    fFinnishListItem = new ListItem("FinnishListItem", ComboLBoxListBoList);
                    fFinnishListItem.UIMap.Scope = UIASeachScope.Children;
                    fFinnishListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Finnish");
                }

                return fFinnishListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem FrenchStandardListItem
        {
            get
            {
                if (null == fFrenchStandardListItem)
                {
                    fFrenchStandardListItem = new ListItem("FrenchStandardListItem", ComboLBoxListBoList);
                    fFrenchStandardListItem.UIMap.Scope = UIASeachScope.Children;
                    fFrenchStandardListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"French (Standard)");
                }

                return fFrenchStandardListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem GermanListItem
        {
            get
            {
                if (null == fGermanListItem)
                {
                    fGermanListItem = new ListItem("GermanListItem", ComboLBoxListBoList);
                    fGermanListItem.UIMap.Scope = UIASeachScope.Children;
                    fGermanListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"German");
                }

                return fGermanListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem GreekListItem
        {
            get
            {
                if (null == fGreekListItem)
                {
                    fGreekListItem = new ListItem("GreekListItem", ComboLBoxListBoList);
                    fGreekListItem.UIMap.Scope = UIASeachScope.Children;
                    fGreekListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Greek");
                }

                return fGreekListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem HungarianListItem
        {
            get
            {
                if (null == fHungarianListItem)
                {
                    fHungarianListItem = new ListItem("HungarianListItem", ComboLBoxListBoList);
                    fHungarianListItem.UIMap.Scope = UIASeachScope.Children;
                    fHungarianListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Hungarian");
                }

                return fHungarianListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem IndonesianListItem
        {
            get
            {
                if (null == fIndonesianListItem)
                {
                    fIndonesianListItem = new ListItem("IndonesianListItem", ComboLBoxListBoList);
                    fIndonesianListItem.UIMap.Scope = UIASeachScope.Children;
                    fIndonesianListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Indonesian");
                }

                return fIndonesianListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem ItalianListItem
        {
            get
            {
                if (null == fItalianListItem)
                {
                    fItalianListItem = new ListItem("ItalianListItem", ComboLBoxListBoList);
                    fItalianListItem.UIMap.Scope = UIASeachScope.Children;
                    fItalianListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Italian");
                }

                return fItalianListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem JapaneseListItem
        {
            get
            {
                if (null == fJapaneseListItem)
                {
                    fJapaneseListItem = new ListItem("JapaneseListItem", ComboLBoxListBoList);
                    fJapaneseListItem.UIMap.Scope = UIASeachScope.Children;
                    fJapaneseListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Japanese");
                }

                return fJapaneseListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem KoreanListItem
        {
            get
            {
                if (null == fKoreanListItem)
                {
                    fKoreanListItem = new ListItem("KoreanListItem", ComboLBoxListBoList);
                    fKoreanListItem.UIMap.Scope = UIASeachScope.Children;
                    fKoreanListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Korean");
                }

                return fKoreanListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem NorwegianListItem
        {
            get
            {
                if (null == fNorwegianListItem)
                {
                    fNorwegianListItem = new ListItem("NorwegianListItem", ComboLBoxListBoList);
                    fNorwegianListItem.UIMap.Scope = UIASeachScope.Children;
                    fNorwegianListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Norwegian");
                }

                return fNorwegianListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem PolishListItem
        {
            get
            {
                if (null == fPolishListItem)
                {
                    fPolishListItem = new ListItem("PolishListItem", ComboLBoxListBoList);
                    fPolishListItem.UIMap.Scope = UIASeachScope.Children;
                    fPolishListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Polish");
                }

                return fPolishListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem PortugueseStandListItem
        {
            get
            {
                if (null == fPortugueseStandListItem)
                {
                    fPortugueseStandListItem = new ListItem("PortugueseStandListItem", ComboLBoxListBoList);
                    fPortugueseStandListItem.UIMap.Scope = UIASeachScope.Children;
                    fPortugueseStandListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Portuguese (Standard)");
                }

                return fPortugueseStandListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem RomanianListItem
        {
            get
            {
                if (null == fRomanianListItem)
                {
                    fRomanianListItem = new ListItem("RomanianListItem", ComboLBoxListBoList);
                    fRomanianListItem.UIMap.Scope = UIASeachScope.Children;
                    fRomanianListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Romanian");
                }

                return fRomanianListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem RussianListItem
        {
            get
            {
                if (null == fRussianListItem)
                {
                    fRussianListItem = new ListItem("RussianListItem", ComboLBoxListBoList);
                    fRussianListItem.UIMap.Scope = UIASeachScope.Children;
                    fRussianListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Russian");
                }

                return fRussianListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem SlovakListItem
        {
            get
            {
                if (null == fSlovakListItem)
                {
                    fSlovakListItem = new ListItem("SlovakListItem", ComboLBoxListBoList);
                    fSlovakListItem.UIMap.Scope = UIASeachScope.Children;
                    fSlovakListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Slovak");
                }

                return fSlovakListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem SlovenianListItem
        {
            get
            {
                if (null == fSlovenianListItem)
                {
                    fSlovenianListItem = new ListItem("SlovenianListItem", ComboLBoxListBoList);
                    fSlovenianListItem.UIMap.Scope = UIASeachScope.Children;
                    fSlovenianListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Slovenian");
                }

                return fSlovenianListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem SpanishListItem
        {
            get
            {
                if (null == fSpanishListItem)
                {
                    fSpanishListItem = new ListItem("SpanishListItem", ComboLBoxListBoList);
                    fSpanishListItem.UIMap.Scope = UIASeachScope.Children;
                    fSpanishListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Spanish");
                }

                return fSpanishListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem SwedishListItem
        {
            get
            {
                if (null == fSwedishListItem)
                {
                    fSwedishListItem = new ListItem("SwedishListItem", ComboLBoxListBoList);
                    fSwedishListItem.UIMap.Scope = UIASeachScope.Children;
                    fSwedishListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Swedish");
                }

                return fSwedishListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem ThaiListItem
        {
            get
            {
                if (null == fThaiListItem)
                {
                    fThaiListItem = new ListItem("ThaiListItem", ComboLBoxListBoList);
                    fThaiListItem.UIMap.Scope = UIASeachScope.Children;
                    fThaiListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Thai");
                }

                return fThaiListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem TurkishListItem
        {
            get
            {
                if (null == fTurkishListItem)
                {
                    fTurkishListItem = new ListItem("TurkishListItem", ComboLBoxListBoList);
                    fTurkishListItem.UIMap.Scope = UIASeachScope.Children;
                    fTurkishListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Turkish");
                }

                return fTurkishListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button DropDownButtonDButton
        {
            get
            {
                if (null == fDropDownButtonDButton)
                {
                    fDropDownButtonDButton = new Button("DropDownButtonDButton", EnglishUnitedStComboBox);
                    fDropDownButtonDButton.UIMap.Scope = UIASeachScope.Children;
                    fDropDownButtonDButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"DropDown");
                    fDropDownButtonDButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Drop Down Button");
                }

                return fDropDownButtonDButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button OKButton1Button
        {
            get
            {
                if (null == fOKButton1Button)
                {
                    fOKButton1Button = new Button("OKButton1Button", HPDigitalSendinWindow);
                    fOKButton1Button.UIMap.Scope = UIASeachScope.Children;
                    fOKButton1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButton1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1");
                    fOKButton1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButton1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButton2Button
        {
            get
            {
                if (null == fCancelButton2Button)
                {
                    fCancelButton2Button = new Button("CancelButton2Button", HPDigitalSendinWindow);
                    fCancelButton2Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton2Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButton2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2");
                    fCancelButton2Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButton2Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SelectthelanguaText
        {
            get
            {
                if (null == fSelectthelanguaText)
                {
                    fSelectthelanguaText = new Text("SelectthelanguaText", HPDigitalSendinWindow);
                    fSelectthelanguaText.UIMap.Scope = UIASeachScope.Children;
                    fSelectthelanguaText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fSelectthelanguaText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"51");
                    fSelectthelanguaText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Select the language for the installation from the choices below.");
                }

                return fSelectthelanguaText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image SelectthelanguaImage
        {
            get
            {
                if (null == fSelectthelanguaImage)
                {
                    fSelectthelanguaImage = new Image("SelectthelanguaImage", HPDigitalSendinWindow);
                    fSelectthelanguaImage.UIMap.Scope = UIASeachScope.Children;
                    fSelectthelanguaImage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fSelectthelanguaImage.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Select the language for the installation from the choices below.");
                }

                return fSelectthelanguaImage;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar HPDigitalSendinTitleBar
        {
            get
            {
                if (null == fHPDigitalSendinTitleBar)
                {
                    fHPDigitalSendinTitleBar = new TitleBar("HPDigitalSendinTitleBar", HPDigitalSendinWindow);
                    fHPDigitalSendinTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software {_version} - InstallShield Wizard");
                }

                return fHPDigitalSendinTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyMenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyMenuBar)
                {
                    fSystemMenuBarSyMenuBar = new MenuBar("SystemMenuBarSyMenuBar", HPDigitalSendinTitleBar);
                    fSystemMenuBarSyMenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyMenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1MenuItem
        {
            get
            {
                if (null == fSystemItem1MenuItem)
                {
                    fSystemItem1MenuItem = new MenuItem("SystemItem1MenuItem", SystemMenuBarSyMenuBar);
                    fSystemItem1MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseButton
        {
            get
            {
                if (null == fCloseCloseButton)
                {
                    fCloseCloseButton = new Button("CloseCloseButton", HPDigitalSendinTitleBar);
                    fCloseCloseButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseButton;
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------


using HP.ScalableTest.Framework.Plugin;
using TopCat.TestApi.Enums;

namespace HP.ScalableTest.Plugin.DSSInstall.UIMaps
{
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class DSS_License: UIMap
    {
        private string _version;

         
        /// <summary>
        /// Backing field for HPDigitalSendinWindow property
        /// </summary>
        private Window fHPDigitalSendinWindow;

        /// <summary>
        /// Backing field for Button8581Button property
        /// </summary>
        private Button fButton8581Button;

        /// <summary>
        /// Backing field for IdonotaccepttheRadioButton property
        /// </summary>
        private RadioButton fIdonotaccepttheRadioButton;

        /// <summary>
        /// Backing field for IacceptthetermsRadioButton property
        /// </summary>
        private RadioButton fIacceptthetermsRadioButton;

        /// <summary>
        /// Backing field for BackButton7139Button property
        /// </summary>
        private Button fBackButton7139Button;

        /// <summary>
        /// Backing field for NextButton7196Button property
        /// </summary>
        private Button fNextButton7196Button;

        /// <summary>
        /// Backing field for CancelButton713Button property
        /// </summary>
        private Button fCancelButton713Button;

        /// <summary>
        /// Backing field for PrintButton7298Button property
        /// </summary>
        private Button fPrintButton7298Button;

        /// <summary>
        /// Backing field for PleasereadthefoText property
        /// </summary>
        private Text fPleasereadthefoText;

        /// <summary>
        /// Backing field for LicenseAgreemenText property
        /// </summary>
        private Text fLicenseAgreemenText;

        /// <summary>
        /// Backing field for LicenseAgreemenImage property
        /// </summary>
        private Image fLicenseAgreemenImage;

        /// <summary>
        /// Backing field for NewBinary20StatText property
        /// </summary>
        private Text fNewBinary20StatText;

        /// <summary>
        /// Backing field for InstallShieldStDup0Text property
        /// </summary>
        private Text fInstallShieldStDup0Text;

        /// <summary>
        /// Backing field for InstallShieldStDup1Text property
        /// </summary>
        private Text fInstallShieldStDup1Text;

        /// <summary>
        /// Backing field for InstallShieldStDup2Text property
        /// </summary>
        private Text fInstallShieldStDup2Text;

        /// <summary>
        /// Backing field for HPEndUserLicensDocument property
        /// </summary>
        private Document fHPEndUserLicensDocument;

        /// <summary>
        /// Backing field for VerticalScrollBScrollBar property
        /// </summary>
        private ScrollBar fVerticalScrollBScrollBar;

        /// <summary>
        /// Backing field for BackbysmallamouButton property
        /// </summary>
        private Button fBackbysmallamouButton;

        /// <summary>
        /// Backing field for BackbylargeamouButton property
        /// </summary>
        private Button fBackbylargeamouButton;

        /// <summary>
        /// Backing field for ThumbThumb property
        /// </summary>
        private Thumb fThumbThumb;

        /// <summary>
        /// Backing field for ForwardbylargeaButton property
        /// </summary>
        private Button fForwardbylargeaButton;

        /// <summary>
        /// Backing field for ForwardbysmallaButton property
        /// </summary>
        private Button fForwardbysmallaButton;

        /// <summary>
        /// Backing field for HPDigitalSendinTitleBar property
        /// </summary>
        private TitleBar fHPDigitalSendinTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyMenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyMenuBar;

        /// <summary>
        /// Backing field for SystemItem1MenuItem property
        /// </summary>
        private MenuItem fSystemItem1MenuItem;

        /// <summary>
        /// Backing field for CloseCloseButton property
        /// </summary>
        private Button fCloseCloseButton;

        /// <summary>
        /// Initializes a new instance of the <see cref="DSS_License"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public DSS_License(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
            ScreenName = "License Screen";
            ScreenIndex = 3;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSS_License"/> class using the default UIAFramework.
        /// </summary>
        public DSS_License()
        {
            Desktop = new Desktop();
            ScreenName = "License Screen";
            ScreenIndex = 3;
        }

        public DSS_License(string version)
        {
            Desktop = new Desktop(UIAFramework.ManagedUIA);
            _version = version;
            ScreenName = "License Screen";
            ScreenIndex = 3;
        }

        public void WaitForAvailable(int timeout)
        {
            HPDigitalSendinWindow.WaitForAvailable(timeout);
            IacceptthetermsRadioButton.WaitForAvailable(timeout);
           
        }

        public override PluginExecutionResult PerformAction(int cancelScreen)
        {
            WaitForAvailable(20);
            if (cancelScreen == ScreenIndex)
            {
                if (CancelButton713Button.Click() != ResultCode.Passed)
                {
                    return new PluginExecutionResult(PluginResult.Failed, $"Failed to cancel installation at { (object)ScreenName}");
                }

                return new PluginExecutionResult(PluginResult.Skipped, $"Cancelled the installation at {ScreenName}");
            }

            if (IacceptthetermsRadioButton.Select(5) != ResultCode.Passed)
            {
                return new PluginExecutionResult(PluginResult.Failed, "Failed to accept the terms and condition");
            }

            if (NextButton7196Button.IsAvailable(5))
            {
                if (NextButton7196Button.Click() != ResultCode.Passed)
                {
                    return new PluginExecutionResult(PluginResult.Failed, "Failed to proceed beyond license acceptance screen");
                }
            }

            return new PluginExecutionResult(PluginResult.Passed);

        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinWindow
        {
            get
            {
                if (null == fHPDigitalSendinWindow)
                {
                    fHPDigitalSendinWindow = new Window("HPDigitalSendinWindow", Desktop);
                    fHPDigitalSendinWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"MsiDialogCloseClass");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software {_version} - InstallShield Wizard");
                }

                return fHPDigitalSendinWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button Button8581Button
        {
            get
            {
                if (null == fButton8581Button)
                {
                    fButton8581Button = new Button("Button8581Button", HPDigitalSendinWindow);
                    fButton8581Button.UIMap.Scope = UIASeachScope.Children;
                    fButton8581Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                   
                }

                return fButton8581Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public RadioButton IdonotaccepttheRadioButton
        {
            get
            {
                if (null == fIdonotaccepttheRadioButton)
                {
                    fIdonotaccepttheRadioButton = new RadioButton("IdonotaccepttheRadioButton", Button8581Button);
                    fIdonotaccepttheRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fIdonotaccepttheRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fIdonotaccepttheRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"I do not accept the terms in the license agreement");
                }

                return fIdonotaccepttheRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public RadioButton IacceptthetermsRadioButton
        {
            get
            {
                if (null == fIacceptthetermsRadioButton)
                {
                    fIacceptthetermsRadioButton = new RadioButton("IacceptthetermsRadioButton", Button8581Button);
                    fIacceptthetermsRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fIacceptthetermsRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fIacceptthetermsRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"I accept the terms in the license agreement");
                }

                return fIacceptthetermsRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button BackButton7139Button
        {
            get
            {
                if (null == fBackButton7139Button)
                {
                    fBackButton7139Button = new Button("BackButton7139Button", HPDigitalSendinWindow);
                    fBackButton7139Button.UIMap.Scope = UIASeachScope.Children;
                    fBackButton7139Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fBackButton7139Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"< Back");
                }

                return fBackButton7139Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button NextButton7196Button
        {
            get
            {
                if (null == fNextButton7196Button)
                {
                    fNextButton7196Button = new Button("NextButton7196Button", HPDigitalSendinWindow);
                    fNextButton7196Button.UIMap.Scope = UIASeachScope.Children;
                    fNextButton7196Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fNextButton7196Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Next >");
                }

                return fNextButton7196Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButton713Button
        {
            get
            {
                if (null == fCancelButton713Button)
                {
                    fCancelButton713Button = new Button("CancelButton713Button", HPDigitalSendinWindow);
                    fCancelButton713Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton713Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButton713Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButton713Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button PrintButton7298Button
        {
            get
            {
                if (null == fPrintButton7298Button)
                {
                    fPrintButton7298Button = new Button("PrintButton7298Button", HPDigitalSendinWindow);
                    fPrintButton7298Button.UIMap.Scope = UIASeachScope.Children;
                    fPrintButton7298Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fPrintButton7298Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Print");
                }

                return fPrintButton7298Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PleasereadthefoText
        {
            get
            {
                if (null == fPleasereadthefoText)
                {
                    fPleasereadthefoText = new Text("PleasereadthefoText", HPDigitalSendinWindow);
                    fPleasereadthefoText.UIMap.Scope = UIASeachScope.Children;
                    fPleasereadthefoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fPleasereadthefoText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7168");
                    fPleasereadthefoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Please read the following license agreement carefully.");
                }

                return fPleasereadthefoText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text LicenseAgreemenText
        {
            get
            {
                if (null == fLicenseAgreemenText)
                {
                    fLicenseAgreemenText = new Text("LicenseAgreemenText", HPDigitalSendinWindow);
                    fLicenseAgreemenText.UIMap.Scope = UIASeachScope.Children;
                    fLicenseAgreemenText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fLicenseAgreemenText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7170");
                    fLicenseAgreemenText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"License Agreement");
                }

                return fLicenseAgreemenText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image LicenseAgreemenImage
        {
            get
            {
                if (null == fLicenseAgreemenImage)
                {
                    fLicenseAgreemenImage = new Image("LicenseAgreemenImage", HPDigitalSendinWindow);
                    fLicenseAgreemenImage.UIMap.Scope = UIASeachScope.Children;
                    fLicenseAgreemenImage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fLicenseAgreemenImage.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8422");
                    fLicenseAgreemenImage.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"License Agreement");
                }

                return fLicenseAgreemenImage;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NewBinary20StatText
        {
            get
            {
                if (null == fNewBinary20StatText)
                {
                    fNewBinary20StatText = new Text("NewBinary20StatText", HPDigitalSendinWindow);
                    fNewBinary20StatText.UIMap.Scope = UIASeachScope.Children;
                    fNewBinary20StatText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fNewBinary20StatText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8424");
                    fNewBinary20StatText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NewBinary20");
                }

                return fNewBinary20StatText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text InstallShieldStDup0Text
        {
            get
            {
                if (null == fInstallShieldStDup0Text)
                {
                    fInstallShieldStDup0Text = new Text("InstallShieldStDup0Text", HPDigitalSendinWindow);
                    fInstallShieldStDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fInstallShieldStDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fInstallShieldStDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8426");
                    fInstallShieldStDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"InstallShield");
                }

                return fInstallShieldStDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text InstallShieldStDup1Text
        {
            get
            {
                if (null == fInstallShieldStDup1Text)
                {
                    fInstallShieldStDup1Text = new Text("InstallShieldStDup1Text", HPDigitalSendinWindow);
                    fInstallShieldStDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fInstallShieldStDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fInstallShieldStDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8428");
                    fInstallShieldStDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"InstallShield");
                }

                return fInstallShieldStDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text InstallShieldStDup2Text
        {
            get
            {
                if (null == fInstallShieldStDup2Text)
                {
                    fInstallShieldStDup2Text = new Text("InstallShieldStDup2Text", HPDigitalSendinWindow);
                    fInstallShieldStDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fInstallShieldStDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fInstallShieldStDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8437");
                    fInstallShieldStDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"InstallShield");
                }

                return fInstallShieldStDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Document HPEndUserLicensDocument
        {
            get
            {
                if (null == fHPEndUserLicensDocument)
                {
                    fHPEndUserLicensDocument = new Document("HPEndUserLicensDocument", HPDigitalSendinWindow);
                    fHPEndUserLicensDocument.UIMap.Scope = UIASeachScope.Children;
                    fHPEndUserLicensDocument.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichEdit20W");
                    fHPEndUserLicensDocument.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8589");
                    fHPEndUserLicensDocument.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"
HP End User License Agreement - Enterprise Version
 
1. Applicability.  This end user license agreement (the “Agreement”) governs the use of accompanying software, unless it is subject to a separate agreement between you and HP Company and its subsidiaries (“HP”).  By downloading, copying, or using the software you agree to this Agreement.  HP provides translations of this Agreement in certain languages other than English, which may be found at:  <http://www.hp.com/go/SWLicensing>. 
 
2. Terms.  This Agreement includes supporting material accompanying the software or referenced by HP, which may be software license information, additional license authorizations, software specifications, published warranties, supplier terms, open source software licenses and similar content (“Supporting Material”).  Additional license authorizations are at:  <http://www.hp.com/go/SWLicensing>. 

 
3. Authorization.  If you agree to this Agreement on behalf of another person or entity, you warrant you have authority to do so.   

 
4. Consumer Rights.  If you obtained software as a consumer, nothing in this Agreement affects your statutory rights. 

 
5. Electronic Delivery.  HP may elect to deliver software and related software product or license information by electronic transmission or download. 

 
6. License Grant.  If you abide by this Agreement, HP grants you a non-exclusive non-transferable license to use one copy of the version or release of the accompanying software for your internal purposes only, and is subject to any specific software licensing information that is in the software product or its Supporting Material.  

 
Your use is subject to the following restrictions, unless specifically allowed in Supporting Material: 
·	You may not use software to provide services to third parties. 
·	You may not make copies and distribute, resell or sublicense software to third parties. 
·	You may not download and use patches, enhancements, bug fixes, or similar updates unless you have a license to the underlying software.  However, such license doesn’t automatically give you a right to receive such updates and HP reserves the right to make such updates only available to customers with support contracts. 
·	You may not copy software or make it available on a public or external distributed network. 
·	You may not allow access on an intranet unless it is restricted to authorized users. 
·	You may make one copy of the software for archival purposes or when it is an essential step in authorized use. 
·	You may not modify, reverse engineer, disassemble, decrypt, decompile or make derivative works of software.  If you have a mandatory right to do so under statute, you must inform HP in writing about such modifications. 

 
7. Remote Monitoring.  Some software may require keys or other technical protection measures and HP may monitor your compliance with the Agreement, remotely or otherwise.  If HP makes a license management program for recording and reporting license usage information, you will use such program no later than 180 days from the date it’s made available. 

 
8. Ownership.  No transfer of ownership of any intellectual property will occur under this Agreement.   

 
9. Copyright Notices.  You must reproduce copyright notices on software and documentation for authorized copies. 

 
10. Operating Systems.  Operating system software may only be used on approved hardware and configurations. 

 
11. 90-day Limited Warranty for HP Software  
·	HP-branded software materially conforms to its specifications, if any, and is free of malware at the time of delivery; if you notify HP within 90 days of delivery of non-conformance to this warranty, HP will replace your copy.  This Agreement states all remedies for warranty claims.   
·	HP does not warrant that the operation of software will be uninterrupted or error free, or that software will operate in hardware and software combinations other than as authorized by HP in Supporting Material.  To the extent permitted by law, HP disclaims all other warranties. 

 
12. Intellectual Property Rights Infringement.  HP will defend and/or settle any claims against you that allege that HP-branded software as supplied under this Agreement infringes the intellectual property rights of a third party.  HP will rely on your prompt notification of the claim and cooperation with our defense.  HP may modify the software so as to be non-infringing and materially equivalent, or we may procure a license. If these options are not available, we will refund to you the amount paid for the affected product in the first year or the depreciated value thereafter. HP is not responsible for claims resulting from any unauthorized use of the software.   

 
13. Limitation of Liability.  HP’s liability to you under this Agreement is limited to the amount actually paid by you to HP for the relevant software, except for amounts in Section 12 (“Intellectual Property Rights Infringement”).   Neither you nor HP will be liable for lost revenues or profits, downtime costs, loss or damage to data or indirect, special or consequential costs or damages. This provision does not limit either party’s liability for: unauthorized use of intellectual property, death or bodily injury caused by their negligence; acts of fraud; willful repudiation of the Agreement; or any liability that may not be excluded or limited by applicable law. 

 
14. Termination.  This Agreement is effective until terminated or in the case of a limited-term license, upon expiration; however, your rights under this Agreement terminate if you fail to comply with it.  Immediately upon termination or expiration, you will destroy the software and documentation and any copies, or return them to HP.  You may keep one copy of software and documentation for archival purposes.  We may ask you to certify in writing you have complied with this section.  Warranty disclaimers, the limitation of liability, this section on termination, and Section 15 (“General”) will survive termination. 

 
15. General.   
a. Assignment.  You may not assign this Agreement without prior written consent of HP, payment of transfer fees and compliance with HP’s software license transfer policies.  Authorized assignments will terminate your license to the software and you must deliver software and documentation and copies thereof to the assignee.  The assignee will agree in writing to this Agreement.  You may only transfer firmware if you transfer associated hardware. 
b. U.S. Government.  If the software is licensed to you for use in the performance of a U.S. Government prime contract or subcontract, you agree that, consistent with FAR 12.211 and 12.212, commercial computer software, computer software documentation and technical data for commercial items are licensed under HP’s standard commercial license. 
c. Global Trade Compliance.  You agree to comply with the trade-related laws and regulations of the U.S. and other national governments.   If you export, import or otherwise transfer products provided under this Agreement, you will be responsible for obtaining any required export or import authorizations.  You confirm that you are not located in a country that is subject to trade control sanctions (currently Cuba, Iran, N. Korea, N. Sudan, and Syria) and further agree that you will not retransfer the products to any such country.  HP may suspend its performance under this Agreement to the extent required by laws applicable to either party. 
d. Audit.  HP may audit you for compliance with the software license terms. Upon reasonable notice, HP may conduct an audit during normal business hours (with the auditor’s costs being at 


HP’s expense). If an audit reveals underpayments then you will pay to HP such underpayments.  If underpayments discovered exceed five (5) percent, you will reimburse HP for the auditor costs. 
e. Open Source Components.  To the extent the Supporting Material includes open source licenses, such licenses shall control over this Agreement with respect to the particular open source component.   To the extent Supporting Material includes the GNU General Public License or the GNU Lesser General Public License: (a) the software includes a copy of the source code; or (b) if you downloaded the software from a website, a copy of the source code is available on the same website; or (c) if you send HP written notice, HP will send you a copy of the source code for a reasonable fee. 
f. Notices.  Written notices under this Agreement may be provided to HP via the method provided in the Supporting Material or if none, via “contact HP” site on www.hp.com. 
g. Governing Law.  This Agreement will be governed by the laws of the state of California, U.S.A., excluding rules as to choice and conflict of law. You and HP agree that the United Nations Convention on Contracts for the International Sale of Goods will not apply.  
h. Force Majeure. Neither party will be liable for performance delays nor for non-performance due to causes beyond its reasonable control, except for payment obligations. 
i. Entire Agreement. This Agreement represents our entire understanding with respect to its subject matter and supersedes any previous communication or agreements that may exist.  Modifications to the Agreement will be made only through a written amendment signed by both parties.  If HP doesn’t exercise its rights under this Agreement, such delay is not a waiver of its rights. 

 
16.  Australian Consumers.   If you acquired the software as a consumer within the meaning of the ‘Australian Consumer Law’ under the Australian Competition and Consumer Act 2010 (Cth) then despite any other provision of this Agreement, the terms at this URL apply:  <http://www.hp.com/go/SWLicensing>. 


5066-3227, Created March 2013
© Copyright 2013 HP Development Company, L.P.");
                }

                return fHPEndUserLicensDocument;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar VerticalScrollBScrollBar
        {
            get
            {
                if (null == fVerticalScrollBScrollBar)
                {
                    fVerticalScrollBScrollBar = new ScrollBar("VerticalScrollBScrollBar", HPEndUserLicensDocument);
                    fVerticalScrollBScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fVerticalScrollBScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Vertical ScrollBar");
                    fVerticalScrollBScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Vertical Scroll Bar");
                }

                return fVerticalScrollBScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button BackbysmallamouButton
        {
            get
            {
                if (null == fBackbysmallamouButton)
                {
                    fBackbysmallamouButton = new Button("BackbysmallamouButton", VerticalScrollBScrollBar);
                    fBackbysmallamouButton.UIMap.Scope = UIASeachScope.Children;
                    fBackbysmallamouButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SmallDecrement");
                    fBackbysmallamouButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Back by small amount");
                }

                return fBackbysmallamouButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button BackbylargeamouButton
        {
            get
            {
                if (null == fBackbylargeamouButton)
                {
                    fBackbylargeamouButton = new Button("BackbylargeamouButton", VerticalScrollBScrollBar);
                    fBackbylargeamouButton.UIMap.Scope = UIASeachScope.Children;
                    fBackbylargeamouButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"LargeDecrement");
                    fBackbylargeamouButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Back by large amount");
                }

                return fBackbylargeamouButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Thumb ThumbThumb
        {
            get
            {
                if (null == fThumbThumb)
                {
                    fThumbThumb = new Thumb("ThumbThumb", VerticalScrollBScrollBar);
                    fThumbThumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbThumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Thumb");
                    fThumbThumb.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Thumb");
                }

                return fThumbThumb;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ForwardbylargeaButton
        {
            get
            {
                if (null == fForwardbylargeaButton)
                {
                    fForwardbylargeaButton = new Button("ForwardbylargeaButton", VerticalScrollBScrollBar);
                    fForwardbylargeaButton.UIMap.Scope = UIASeachScope.Children;
                    fForwardbylargeaButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"LargeIncrement");
                    fForwardbylargeaButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Forward by large amount");
                }

                return fForwardbylargeaButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ForwardbysmallaButton
        {
            get
            {
                if (null == fForwardbysmallaButton)
                {
                    fForwardbysmallaButton = new Button("ForwardbysmallaButton", VerticalScrollBScrollBar);
                    fForwardbysmallaButton.UIMap.Scope = UIASeachScope.Children;
                    fForwardbysmallaButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SmallIncrement");
                    fForwardbysmallaButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Forward by small amount");
                }

                return fForwardbysmallaButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar HPDigitalSendinTitleBar
        {
            get
            {
                if (null == fHPDigitalSendinTitleBar)
                {
                    fHPDigitalSendinTitleBar = new TitleBar("HPDigitalSendinTitleBar", HPDigitalSendinWindow);
                    fHPDigitalSendinTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software {_version} - InstallShield Wizard");
                }

                return fHPDigitalSendinTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyMenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyMenuBar)
                {
                    fSystemMenuBarSyMenuBar = new MenuBar("SystemMenuBarSyMenuBar", HPDigitalSendinTitleBar);
                    fSystemMenuBarSyMenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyMenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1MenuItem
        {
            get
            {
                if (null == fSystemItem1MenuItem)
                {
                    fSystemItem1MenuItem = new MenuItem("SystemItem1MenuItem", SystemMenuBarSyMenuBar);
                    fSystemItem1MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseButton
        {
            get
            {
                if (null == fCloseCloseButton)
                {
                    fCloseCloseButton = new Button("CloseCloseButton", HPDigitalSendinTitleBar);
                    fCloseCloseButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseButton;
            }
        }
    }
}

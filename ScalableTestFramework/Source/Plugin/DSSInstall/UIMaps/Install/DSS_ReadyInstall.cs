//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------


using HP.ScalableTest.Framework.Plugin;
using TopCat.TestApi.Enums;

namespace HP.ScalableTest.Plugin.DSSInstall.UIMaps
{
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class DSS_ReadyInstall: UIMap
    {
        private string _version;

       
        /// <summary>
        /// Backing field for HPDigitalSendinWindow property
        /// </summary>
        private Window fHPDigitalSendinWindow;

        /// <summary>
        /// Backing field for InstallButton72Button property
        /// </summary>
        private Button fInstallButton72Button;

        /// <summary>
        /// Backing field for CancelButton713Button property
        /// </summary>
        private Button fCancelButton713Button;

        /// <summary>
        /// Backing field for BackButton7139Button property
        /// </summary>
        private Button fBackButton7139Button;

        /// <summary>
        /// Backing field for ThewizardisreadText property
        /// </summary>
        private Text fThewizardisreadText;

        /// <summary>
        /// Backing field for ClickInstalltobText property
        /// </summary>
        private Text fClickInstalltobText;

        /// <summary>
        /// Backing field for ReadytoInstalltText property
        /// </summary>
        private Text fReadytoInstalltText;

        /// <summary>
        /// Backing field for ReadytoInstalltImage property
        /// </summary>
        private Image fReadytoInstalltImage;

        /// <summary>
        /// Backing field for NewBinary20StatText property
        /// </summary>
        private Text fNewBinary20StatText;

        /// <summary>
        /// Backing field for InstallShieldStDup0Text property
        /// </summary>
        private Text fInstallShieldStDup0Text;

        /// <summary>
        /// Backing field for InstallShieldStDup1Text property
        /// </summary>
        private Text fInstallShieldStDup1Text;

        /// <summary>
        /// Backing field for InstallShieldStDup2Text property
        /// </summary>
        private Text fInstallShieldStDup2Text;

        /// <summary>
        /// Backing field for RebootsmaybereqText property
        /// </summary>
        private Text fRebootsmaybereqText;

        /// <summary>
        /// Backing field for IfyouwanttoreviText property
        /// </summary>
        private Text fIfyouwanttoreviText;

        /// <summary>
        /// Backing field for HPDigitalSendinTitleBar property
        /// </summary>
        private TitleBar fHPDigitalSendinTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyMenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyMenuBar;

        /// <summary>
        /// Backing field for SystemItem1MenuItem property
        /// </summary>
        private MenuItem fSystemItem1MenuItem;

        /// <summary>
        /// Backing field for CloseCloseButton property
        /// </summary>
        private Button fCloseCloseButton;

        /// <summary>
        /// Initializes a new instance of the <see cref="DSS_ReadyInstall"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public DSS_ReadyInstall(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
            ScreenName = "Ready to Install Screen";
            ScreenIndex = 8;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSS_ReadyInstall"/> class using the default UIAFramework.
        /// </summary>
        public DSS_ReadyInstall()
        {
            Desktop = new Desktop();
            ScreenName = "Ready to Install Screen";
            ScreenIndex = 8;
        }

        public DSS_ReadyInstall(string version)
        {
            Desktop = new Desktop();
            _version = version;
            ScreenName = "Ready to Install Screen";
            ScreenIndex = 8;
        }

        public void WaitForAvailable(int timeout)
        {
            HPDigitalSendinWindow.WaitForAvailable(timeout);
            InstallButton72Button.WaitForAvailable(timeout);

        }

        public override PluginExecutionResult PerformAction(int cancelScreen)
        {
            WaitForAvailable(5);
            if (cancelScreen == ScreenIndex)
            {
                if (CancelButton713Button.Click() != ResultCode.Passed)
                {
                    return new PluginExecutionResult(PluginResult.Failed, $"Failed to cancel installation at { (object)ScreenName}");
                }

                return new PluginExecutionResult(PluginResult.Skipped, $"Cancelled the installation at {ScreenName}");
            }

            if (InstallButton72Button.Click() != ResultCode.Passed)
            {
                return new PluginExecutionResult(PluginResult.Failed, "Failed to proceed beyond ready to install selection screen");
            }

            return new PluginExecutionResult(PluginResult.Passed);

        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinWindow
        {
            get
            {
                if (null == fHPDigitalSendinWindow)
                {
                    fHPDigitalSendinWindow = new Window("HPDigitalSendinWindow", Desktop);
                    fHPDigitalSendinWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"MsiDialogCloseClass");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software {_version} - InstallShield Wizard");
                }

                return fHPDigitalSendinWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button InstallButton72Button
        {
            get
            {
                if (null == fInstallButton72Button)
                {
                    fInstallButton72Button = new Button("InstallButton72Button", HPDigitalSendinWindow);
                    fInstallButton72Button.UIMap.Scope = UIASeachScope.Children;
                    fInstallButton72Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fInstallButton72Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Install");
                }

                return fInstallButton72Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButton713Button
        {
            get
            {
                if (null == fCancelButton713Button)
                {
                    fCancelButton713Button = new Button("CancelButton713Button", HPDigitalSendinWindow);
                    fCancelButton713Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton713Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButton713Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButton713Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button BackButton7139Button
        {
            get
            {
                if (null == fBackButton7139Button)
                {
                    fBackButton7139Button = new Button("BackButton7139Button", HPDigitalSendinWindow);
                    fBackButton7139Button.UIMap.Scope = UIASeachScope.Children;
                    fBackButton7139Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fBackButton7139Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"< Back");
                }

                return fBackButton7139Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ThewizardisreadText
        {
            get
            {
                if (null == fThewizardisreadText)
                {
                    fThewizardisreadText = new Text("ThewizardisreadText", HPDigitalSendinWindow);
                    fThewizardisreadText.UIMap.Scope = UIASeachScope.Children;
                    fThewizardisreadText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fThewizardisreadText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7167");
                    fThewizardisreadText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"The wizard is ready to begin installation.");
                }

                return fThewizardisreadText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ClickInstalltobText
        {
            get
            {
                if (null == fClickInstalltobText)
                {
                    fClickInstalltobText = new Text("ClickInstalltobText", HPDigitalSendinWindow);
                    fClickInstalltobText.UIMap.Scope = UIASeachScope.Children;
                    fClickInstalltobText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fClickInstalltobText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7171");
                    fClickInstalltobText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Click Install to begin the installation.");
                }

                return fClickInstalltobText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ReadytoInstalltText
        {
            get
            {
                if (null == fReadytoInstalltText)
                {
                    fReadytoInstalltText = new Text("ReadytoInstalltText", HPDigitalSendinWindow);
                    fReadytoInstalltText.UIMap.Scope = UIASeachScope.Children;
                    fReadytoInstalltText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fReadytoInstalltText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7211");
                    fReadytoInstalltText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Ready to Install the Program");
                }

                return fReadytoInstalltText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ReadytoInstalltImage
        {
            get
            {
                if (null == fReadytoInstalltImage)
                {
                    fReadytoInstalltImage = new Image("ReadytoInstalltImage", HPDigitalSendinWindow);
                    fReadytoInstalltImage.UIMap.Scope = UIASeachScope.Children;
                    fReadytoInstalltImage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fReadytoInstalltImage.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8422");
                    fReadytoInstalltImage.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Ready to Install the Program");
                }

                return fReadytoInstalltImage;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NewBinary20StatText
        {
            get
            {
                if (null == fNewBinary20StatText)
                {
                    fNewBinary20StatText = new Text("NewBinary20StatText", HPDigitalSendinWindow);
                    fNewBinary20StatText.UIMap.Scope = UIASeachScope.Children;
                    fNewBinary20StatText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fNewBinary20StatText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8424");
                    fNewBinary20StatText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NewBinary20");
                }

                return fNewBinary20StatText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text InstallShieldStDup0Text
        {
            get
            {
                if (null == fInstallShieldStDup0Text)
                {
                    fInstallShieldStDup0Text = new Text("InstallShieldStDup0Text", HPDigitalSendinWindow);
                    fInstallShieldStDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fInstallShieldStDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fInstallShieldStDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8426");
                    fInstallShieldStDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"InstallShield");
                }

                return fInstallShieldStDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text InstallShieldStDup1Text
        {
            get
            {
                if (null == fInstallShieldStDup1Text)
                {
                    fInstallShieldStDup1Text = new Text("InstallShieldStDup1Text", HPDigitalSendinWindow);
                    fInstallShieldStDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fInstallShieldStDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fInstallShieldStDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8428");
                    fInstallShieldStDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"InstallShield");
                }

                return fInstallShieldStDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text InstallShieldStDup2Text
        {
            get
            {
                if (null == fInstallShieldStDup2Text)
                {
                    fInstallShieldStDup2Text = new Text("InstallShieldStDup2Text", HPDigitalSendinWindow);
                    fInstallShieldStDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fInstallShieldStDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fInstallShieldStDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8437");
                    fInstallShieldStDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"InstallShield");
                }

                return fInstallShieldStDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text RebootsmaybereqText
        {
            get
            {
                if (null == fRebootsmaybereqText)
                {
                    fRebootsmaybereqText = new Text("RebootsmaybereqText", HPDigitalSendinWindow);
                    fRebootsmaybereqText.UIMap.Scope = UIASeachScope.Children;
                    fRebootsmaybereqText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fRebootsmaybereqText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8463");
                    fRebootsmaybereqText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Reboots may be required during the install process.  Please save any work and close other applications before beginning install.");
                }

                return fRebootsmaybereqText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text IfyouwanttoreviText
        {
            get
            {
                if (null == fIfyouwanttoreviText)
                {
                    fIfyouwanttoreviText = new Text("IfyouwanttoreviText", HPDigitalSendinWindow);
                    fIfyouwanttoreviText.UIMap.Scope = UIASeachScope.Children;
                    fIfyouwanttoreviText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fIfyouwanttoreviText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8615");
                    fIfyouwanttoreviText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"If you want to review or change any of your installation settings, click Back. Click Cancel to exit the wizard.");
                }

                return fIfyouwanttoreviText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar HPDigitalSendinTitleBar
        {
            get
            {
                if (null == fHPDigitalSendinTitleBar)
                {
                    fHPDigitalSendinTitleBar = new TitleBar("HPDigitalSendinTitleBar", HPDigitalSendinWindow);
                    fHPDigitalSendinTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software {_version} - InstallShield Wizard");
                }

                return fHPDigitalSendinTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyMenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyMenuBar)
                {
                    fSystemMenuBarSyMenuBar = new MenuBar("SystemMenuBarSyMenuBar", HPDigitalSendinTitleBar);
                    fSystemMenuBarSyMenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyMenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1MenuItem
        {
            get
            {
                if (null == fSystemItem1MenuItem)
                {
                    fSystemItem1MenuItem = new MenuItem("SystemItem1MenuItem", SystemMenuBarSyMenuBar);
                    fSystemItem1MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseButton
        {
            get
            {
                if (null == fCloseCloseButton)
                {
                    fCloseCloseButton = new Button("CloseCloseButton", HPDigitalSendinTitleBar);
                    fCloseCloseButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseButton;
            }
        }
    }
}

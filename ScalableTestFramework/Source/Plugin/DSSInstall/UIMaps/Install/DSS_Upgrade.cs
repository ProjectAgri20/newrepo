//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------

using HP.ScalableTest.Framework.Plugin;
using TopCat.TestApi.Enums;

namespace HP.ScalableTest.Plugin.DSSInstall.UIMaps
{
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class DSS_Upgrade: UIMap
    {
        /// <summary>
        /// Backing field for HPDigitalSendinWindow property
        /// </summary>
        private Window fHPDigitalSendinWindow;

        /// <summary>
        /// Backing field for NextButton7198Button property
        /// </summary>
        private Button fNextButton7198Button;

        /// <summary>
        /// Backing field for CancelButton713Button property
        /// </summary>
        private Button fCancelButton713Button;

        /// <summary>
        /// Backing field for BackButton7141Button property
        /// </summary>
        private Button fBackButton7141Button;

        /// <summary>
        /// Backing field for PreviousDSSversText property
        /// </summary>
        private Text fPreviousDSSversText;

        /// <summary>
        /// Backing field for SavesettingsfroCheckBox property
        /// </summary>
        private CheckBox fSavesettingsfroCheckBox;

        /// <summary>
        /// Backing field for Static7170Text property
        /// </summary>
        private Text fStatic7170Text;

        /// <summary>
        /// Backing field for PreviousVersionText property
        /// </summary>
        private Text fPreviousVersionText;

        /// <summary>
        /// Backing field for PreviousVersionImage property
        /// </summary>
        private Image fPreviousVersionImage;

        /// <summary>
        /// Backing field for NewBinary20StatText property
        /// </summary>
        private Text fNewBinary20StatText;

        /// <summary>
        /// Backing field for InstallShieldStDup0Text property
        /// </summary>
        private Text fInstallShieldStDup0Text;

        /// <summary>
        /// Backing field for InstallShieldStDup1Text property
        /// </summary>
        private Text fInstallShieldStDup1Text;

        /// <summary>
        /// Backing field for InstallShieldStDup2Text property
        /// </summary>
        private Text fInstallShieldStDup2Text;

        /// <summary>
        /// Backing field for HPDigitalSendinTitleBar property
        /// </summary>
        private TitleBar fHPDigitalSendinTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyMenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyMenuBar;

        /// <summary>
        /// Backing field for SystemItem1MenuItem property
        /// </summary>
        private MenuItem fSystemItem1MenuItem;

        /// <summary>
        /// Backing field for CloseCloseButton property
        /// </summary>
        private Button fCloseCloseButton;

        private string _version;
        private bool _saveSettings;

        /// <summary>
        /// Initializes a new instance of the <see cref="DSS_Upgrade"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public DSS_Upgrade(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSS_Upgrade"/> class using the default UIAFramework.
        /// </summary>
        public DSS_Upgrade()
        {
            Desktop = new Desktop();
        }
        public DSS_Upgrade(string version, bool saveSettings)
        {
            Desktop = new Desktop(UIAFramework.ManagedUIA);
            _version = version;
            ScreenName = "Upgrade Screen";
            ScreenIndex = 4;
            _saveSettings = saveSettings;
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinWindow
        {
            get
            {
                if (null == fHPDigitalSendinWindow)
                {
                    fHPDigitalSendinWindow = new Window("HPDigitalSendinWindow", Desktop);
                    fHPDigitalSendinWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"MsiDialogCloseClass");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software {_version} - InstallShield Wizard");
                }

                return fHPDigitalSendinWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button NextButton7198Button
        {
            get
            {
                if (null == fNextButton7198Button)
                {
                    fNextButton7198Button = new Button("NextButton7198Button", HPDigitalSendinWindow);
                    fNextButton7198Button.UIMap.Scope = UIASeachScope.Children;
                    fNextButton7198Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fNextButton7198Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Next >");
                }

                return fNextButton7198Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButton713Button
        {
            get
            {
                if (null == fCancelButton713Button)
                {
                    fCancelButton713Button = new Button("CancelButton713Button", HPDigitalSendinWindow);
                    fCancelButton713Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton713Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButton713Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButton713Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button BackButton7141Button
        {
            get
            {
                if (null == fBackButton7141Button)
                {
                    fBackButton7141Button = new Button("BackButton7141Button", HPDigitalSendinWindow);
                    fBackButton7141Button.UIMap.Scope = UIASeachScope.Children;
                    fBackButton7141Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fBackButton7141Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"< Back");
                }

                return fBackButton7141Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PreviousDSSversText
        {
            get
            {
                if (null == fPreviousDSSversText)
                {
                    fPreviousDSSversText = new Text("PreviousDSSversText", HPDigitalSendinWindow);
                    fPreviousDSSversText.UIMap.Scope = UIASeachScope.Children;
                    fPreviousDSSversText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fPreviousDSSversText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Previous DSS version is currently installed. The installation wizard will save the previous version's settings and uninstall prior to installing the new software.");
                }

                return fPreviousDSSversText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox SavesettingsfroCheckBox
        {
            get
            {
                if (null == fSavesettingsfroCheckBox)
                {
                    fSavesettingsfroCheckBox = new CheckBox("SavesettingsfroCheckBox", HPDigitalSendinWindow);
                    fSavesettingsfroCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fSavesettingsfroCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fSavesettingsfroCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Save settings from previous version (Settings can be imported or restored to the new software.)");
                }

                return fSavesettingsfroCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Static7170Text
        {
            get
            {
                if (null == fStatic7170Text)
                {
                    fStatic7170Text = new Text("Static7170Text", HPDigitalSendinWindow);
                    fStatic7170Text.UIMap.Scope = UIASeachScope.Children;
                    fStatic7170Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fStatic7170Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7170");
                }

                return fStatic7170Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PreviousVersionText
        {
            get
            {
                if (null == fPreviousVersionText)
                {
                    fPreviousVersionText = new Text("PreviousVersionText", HPDigitalSendinWindow);
                    fPreviousVersionText.UIMap.Scope = UIASeachScope.Children;
                    fPreviousVersionText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fPreviousVersionText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"7172");
                    fPreviousVersionText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Previous Version of DSS Detected");
                }

                return fPreviousVersionText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image PreviousVersionImage
        {
            get
            {
                if (null == fPreviousVersionImage)
                {
                    fPreviousVersionImage = new Image("PreviousVersionImage", HPDigitalSendinWindow);
                    fPreviousVersionImage.UIMap.Scope = UIASeachScope.Children;
                    fPreviousVersionImage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fPreviousVersionImage.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8425");
                    fPreviousVersionImage.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Previous Version of DSS Detected");
                }

                return fPreviousVersionImage;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NewBinary20StatText
        {
            get
            {
                if (null == fNewBinary20StatText)
                {
                    fNewBinary20StatText = new Text("NewBinary20StatText", HPDigitalSendinWindow);
                    fNewBinary20StatText.UIMap.Scope = UIASeachScope.Children;
                    fNewBinary20StatText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fNewBinary20StatText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8427");
                    fNewBinary20StatText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NewBinary20");
                }

                return fNewBinary20StatText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text InstallShieldStDup0Text
        {
            get
            {
                if (null == fInstallShieldStDup0Text)
                {
                    fInstallShieldStDup0Text = new Text("InstallShieldStDup0Text", HPDigitalSendinWindow);
                    fInstallShieldStDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fInstallShieldStDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fInstallShieldStDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8429");
                    fInstallShieldStDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"InstallShield");
                }

                return fInstallShieldStDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text InstallShieldStDup1Text
        {
            get
            {
                if (null == fInstallShieldStDup1Text)
                {
                    fInstallShieldStDup1Text = new Text("InstallShieldStDup1Text", HPDigitalSendinWindow);
                    fInstallShieldStDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fInstallShieldStDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fInstallShieldStDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8431");
                    fInstallShieldStDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"InstallShield");
                }

                return fInstallShieldStDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text InstallShieldStDup2Text
        {
            get
            {
                if (null == fInstallShieldStDup2Text)
                {
                    fInstallShieldStDup2Text = new Text("InstallShieldStDup2Text", HPDigitalSendinWindow);
                    fInstallShieldStDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fInstallShieldStDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fInstallShieldStDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8440");
                    fInstallShieldStDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"InstallShield");
                }

                return fInstallShieldStDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar HPDigitalSendinTitleBar
        {
            get
            {
                if (null == fHPDigitalSendinTitleBar)
                {
                    fHPDigitalSendinTitleBar = new TitleBar("HPDigitalSendinTitleBar", HPDigitalSendinWindow);
                    fHPDigitalSendinTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software {_version} - InstallShield Wizard");
                }

                return fHPDigitalSendinTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyMenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyMenuBar)
                {
                    fSystemMenuBarSyMenuBar = new MenuBar("SystemMenuBarSyMenuBar", HPDigitalSendinTitleBar);
                    fSystemMenuBarSyMenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyMenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1MenuItem
        {
            get
            {
                if (null == fSystemItem1MenuItem)
                {
                    fSystemItem1MenuItem = new MenuItem("SystemItem1MenuItem", SystemMenuBarSyMenuBar);
                    fSystemItem1MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseButton
        {
            get
            {
                if (null == fCloseCloseButton)
                {
                    fCloseCloseButton = new Button("CloseCloseButton", HPDigitalSendinTitleBar);
                    fCloseCloseButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseButton;
            }
        }

        public void WaitForAvailable(int timeout)
        {
            HPDigitalSendinWindow.WaitForAvailable(timeout);
        }

        public override PluginExecutionResult PerformAction(int cancelScreen)
        {
            WaitForAvailable(10);
            if (!SavesettingsfroCheckBox.IsVisible(5))
            {
                //this is not the upgrade path return skip
                return new PluginExecutionResult(PluginResult.Skipped);
            }

            if (cancelScreen == ScreenIndex)
            {
                if (CancelButton713Button.Click() != ResultCode.Passed)
                {
                    return new PluginExecutionResult(PluginResult.Failed, $"Failed to cancel installation at {ScreenName}");
                }

                return new PluginExecutionResult(PluginResult.Passed, $"Cancelled the installation at { (object)ScreenName}");
            }
            if (_saveSettings)
            {
                SavesettingsfroCheckBox.Check(5);
            }
            else
            {
                SavesettingsfroCheckBox.Uncheck(5);
            }
            if (NextButton7198Button.Click() != ResultCode.Passed)
            {
                return new PluginExecutionResult(PluginResult.Failed, "Failed to proceed beyond upgrade selection screen");
            }

            return new PluginExecutionResult(PluginResult.Passed);

        }
    }
}

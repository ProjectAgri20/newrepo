//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------

namespace HP.ScalableTest.Plugin.DSSInstall.UIMaps.Uninstall
{
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class Uninstall_Finish
    {
        /// <summary>
        /// Backing field for HPDigitalSendinWindow property
        /// </summary>
        private Window fHPDigitalSendinWindow;

        /// <summary>
        /// Backing field for FinishButton697Button property
        /// </summary>
        private Button fFinishButton697Button;

        /// <summary>
        /// Backing field for CancelButton688Button property
        /// </summary>
        private Button fCancelButton688Button;

        /// <summary>
        /// Backing field for NewBinary19StatImage property
        /// </summary>
        private Image fNewBinary19StatImage;

        /// <summary>
        /// Backing field for Button6891CheckBox property
        /// </summary>
        private CheckBox fButton6891CheckBox;

        /// <summary>
        /// Backing field for BackButton6886Button property
        /// </summary>
        private Button fBackButton6886Button;

        /// <summary>
        /// Backing field for ShowtheWindowsIText property
        /// </summary>
        private Text fShowtheWindowsIText;

        /// <summary>
        /// Backing field for TheInstallShielText property
        /// </summary>
        private Text fTheInstallShielText;

        /// <summary>
        /// Backing field for YourInternetconText property
        /// </summary>
        private Text fYourInternetconText;

        /// <summary>
        /// Backing field for InstallShieldWiText property
        /// </summary>
        private Text fInstallShieldWiText;

        /// <summary>
        /// Backing field for HPDigitalSendinTitleBar property
        /// </summary>
        private TitleBar fHPDigitalSendinTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyMenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyMenuBar;

        /// <summary>
        /// Backing field for SystemItem1MenuItem property
        /// </summary>
        private MenuItem fSystemItem1MenuItem;

        /// <summary>
        /// Backing field for CloseCloseButton property
        /// </summary>
        private Button fCloseCloseButton;

        private string _version;

        /// <summary>
        /// Initializes a new instance of the <see cref="Uninstall_Finish"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public Uninstall_Finish(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Uninstall_Finish"/> class using the default UIAFramework.
        /// </summary>
        public Uninstall_Finish()
        {
            Desktop = new Desktop();
        }

        public Uninstall_Finish(string version)
        {
            Desktop = new Desktop(UIAFramework.ManagedUIA);
            _version = version;
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        public void WaitForAvailable(int timeout)
        {
            HPDigitalSendinWindow.WaitForAvailable(timeout);
            TheInstallShielText.WaitForAvailable(timeout);
        }
        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPDigitalSendinWindow
        {
            get
            {
                if (null == fHPDigitalSendinWindow)
                {
                    fHPDigitalSendinWindow = new Window("HPDigitalSendinWindow", Desktop);
                    fHPDigitalSendinWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"MsiDialogCloseClass");
                    fHPDigitalSendinWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software {_version} - InstallShield Wizard");
                }

                return fHPDigitalSendinWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button FinishButton697Button
        {
            get
            {
                if (null == fFinishButton697Button)
                {
                    fFinishButton697Button = new Button("FinishButton697Button", HPDigitalSendinWindow);
                    fFinishButton697Button.UIMap.Scope = UIASeachScope.Children;
                    fFinishButton697Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                   fFinishButton697Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Finish");
                }

                return fFinishButton697Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButton688Button
        {
            get
            {
                if (null == fCancelButton688Button)
                {
                    fCancelButton688Button = new Button("CancelButton688Button", HPDigitalSendinWindow);
                    fCancelButton688Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton688Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                   fCancelButton688Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                }

                return fCancelButton688Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image NewBinary19StatImage
        {
            get
            {
                if (null == fNewBinary19StatImage)
                {
                    fNewBinary19StatImage = new Image("NewBinary19StatImage", HPDigitalSendinWindow);
                    fNewBinary19StatImage.UIMap.Scope = UIASeachScope.Children;
                    fNewBinary19StatImage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fNewBinary19StatImage.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8198");
                    fNewBinary19StatImage.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"NewBinary19");
                }

                return fNewBinary19StatImage;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox Button6891CheckBox
        {
            get
            {
                if (null == fButton6891CheckBox)
                {
                    fButton6891CheckBox = new CheckBox("Button6891CheckBox", HPDigitalSendinWindow);
                    fButton6891CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fButton6891CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButton6891CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6891");
                }

                return fButton6891CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button BackButton6886Button
        {
            get
            {
                if (null == fBackButton6886Button)
                {
                    fBackButton6886Button = new Button("BackButton6886Button", HPDigitalSendinWindow);
                    fBackButton6886Button.UIMap.Scope = UIASeachScope.Children;
                    fBackButton6886Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fBackButton6886Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6886");
                    fBackButton6886Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"< Back");
                }

                return fBackButton6886Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ShowtheWindowsIText
        {
            get
            {
                if (null == fShowtheWindowsIText)
                {
                    fShowtheWindowsIText = new Text("ShowtheWindowsIText", HPDigitalSendinWindow);
                    fShowtheWindowsIText.UIMap.Scope = UIASeachScope.Children;
                    fShowtheWindowsIText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fShowtheWindowsIText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6897");
                    fShowtheWindowsIText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Show the Windows Installer log");
                }

                return fShowtheWindowsIText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text TheInstallShielText
        {
            get
            {
                if (null == fTheInstallShielText)
                {
                    fTheInstallShielText = new Text("TheInstallShielText", HPDigitalSendinWindow);
                    fTheInstallShielText.UIMap.Scope = UIASeachScope.Children;
                    fTheInstallShielText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fTheInstallShielText.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"The InstallShield Wizard has successfully uninstalled HP Digital Sending Software {_version}. Click Finish to exit the wizard.");
                }

                return fTheInstallShielText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text YourInternetconText
        {
            get
            {
                if (null == fYourInternetconText)
                {
                    fYourInternetconText = new Text("YourInternetconText", HPDigitalSendinWindow);
                    fYourInternetconText.UIMap.Scope = UIASeachScope.Children;
                    fYourInternetconText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fYourInternetconText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8184");
                    fYourInternetconText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Your Internet connection can be used to make sure that you have the latest updates.");
                }

                return fYourInternetconText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text InstallShieldWiText
        {
            get
            {
                if (null == fInstallShieldWiText)
                {
                    fInstallShieldWiText = new Text("InstallShieldWiText", HPDigitalSendinWindow);
                    fInstallShieldWiText.UIMap.Scope = UIASeachScope.Children;
                    fInstallShieldWiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fInstallShieldWiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"8208");
                    fInstallShieldWiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"InstallShield Wizard Completed");
                }

                return fInstallShieldWiText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar HPDigitalSendinTitleBar
        {
            get
            {
                if (null == fHPDigitalSendinTitleBar)
                {
                    fHPDigitalSendinTitleBar = new TitleBar("HPDigitalSendinTitleBar", HPDigitalSendinWindow);
                    fHPDigitalSendinTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fHPDigitalSendinTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Digital Sending Software {_version} - InstallShield Wizard");
                }

                return fHPDigitalSendinTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyMenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyMenuBar)
                {
                    fSystemMenuBarSyMenuBar = new MenuBar("SystemMenuBarSyMenuBar", HPDigitalSendinTitleBar);
                    fSystemMenuBarSyMenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyMenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1MenuItem
        {
            get
            {
                if (null == fSystemItem1MenuItem)
                {
                    fSystemItem1MenuItem = new MenuItem("SystemItem1MenuItem", SystemMenuBarSyMenuBar);
                    fSystemItem1MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseButton
        {
            get
            {
                if (null == fCloseCloseButton)
                {
                    fCloseCloseButton = new Button("CloseCloseButton", HPDigitalSendinTitleBar);
                    fCloseCloseButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseButton;
            }
        }
    }
}

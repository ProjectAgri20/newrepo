//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------

namespace HP.ScalableTest.Plugin.DriverConfigurationPrint.UIMaps
{
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class PrintPreferences
    {
        /// <summary>
        /// Backing field for DriverWindow property
        /// </summary>
        private Window fIONWindow;

        /// <summary>
        /// Backing field for IONTitleBar property
        /// </summary>
        private TitleBar fIONTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyMenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyMenuBar;

        /// <summary>
        /// Backing field for SystemItem1MenuItem property
        /// </summary>
        private MenuItem fSystemItem1MenuItem;

        /// <summary>
        /// Backing field for CloseCloseButton property
        /// </summary>
        private Button fCloseCloseButton;

        /// <summary>
        /// Backing field for ValidationModalCustom property
        /// </summary>
        private Custom fValidationModalCustom;

        /// <summary>
        /// Backing field for ValidatingpleasText property
        /// </summary>
        private Text fValidatingpleasText;

        /// <summary>
        /// Backing field for CancelButtonCanDup0Button property
        /// </summary>
        private Button fCancelButtonCanDup0Button;

        /// <summary>
        /// Backing field for CancelTextBlockText property
        /// </summary>
        private Text fCancelTextBlockText;

        /// <summary>
        /// Backing field for TabControlTab property
        /// </summary>
        private Tab fTabControlTab;

        /// <summary>
        /// Backing field for PrintingShortcuTabItem property
        /// </summary>
        private TabItem fPrintingShortcuTabItem;

        /// <summary>
        /// Backing field for PrintingShortcuText property
        /// </summary>
        private Text fPrintingShortcuText;

        /// <summary>
        /// Backing field for AprintingshortcText property
        /// </summary>
        private Text fAprintingshortcText;

        /// <summary>
        /// Backing field for PrintingshortcuDup0Text property
        /// </summary>
        private Text fPrintingshortcuDup0Text;

        /// <summary>
        /// Backing field for PrintingshortcuDup1Text property
        /// </summary>
        private Text fPrintingshortcuDup1Text;

        /// <summary>
        /// Backing field for ListBoxlistPrinList property
        /// </summary>
        private List fListBoxlistPrinList;

        /// <summary>
        /// Backing field for SystemWindowsCoDup0I0XListItem property
        /// </summary>
        private ListItem fSystemWindowsCoDup0I0XListItem;

        /// <summary>
        /// Backing field for ImageDup0Image property
        /// </summary>
        private Image fImageDup0Image;

        /// <summary>
        /// Backing field for FactorydefaultsText property
        /// </summary>
        private Text fFactorydefaultsText;

        /// <summary>
        /// Backing field for SystemWindowsCoDup1I1XListItem property
        /// </summary>
        private ListItem fSystemWindowsCoDup1I1XListItem;

        /// <summary>
        /// Backing field for ImageDup1Image property
        /// </summary>
        private Image fImageDup1Image;

        /// <summary>
        /// Backing field for GeneralEverydayText property
        /// </summary>
        private Text fGeneralEverydayText;

        /// <summary>
        /// Backing field for SystemWindowsCoDup2I2XListItem property
        /// </summary>
        private ListItem fSystemWindowsCoDup2I2XListItem;

        /// <summary>
        /// Backing field for ImageDup2Image property
        /// </summary>
        private Image fImageDup2Image;

        /// <summary>
        /// Backing field for EnvelopesTextBlText property
        /// </summary>
        private Text fEnvelopesTextBlText;

        /// <summary>
        /// Backing field for SystemWindowsCoDup3I3XListItem property
        /// </summary>
        private ListItem fSystemWindowsCoDup3I3XListItem;

        /// <summary>
        /// Backing field for ImageDup3Image property
        /// </summary>
        private Image fImageDup3Image;

        /// <summary>
        /// Backing field for LabelsTextBlockText property
        /// </summary>
        private Text fLabelsTextBlockText;

        /// <summary>
        /// Backing field for SystemWindowsCoDup4I4XListItem property
        /// </summary>
        private ListItem fSystemWindowsCoDup4I4XListItem;

        /// <summary>
        /// Backing field for ImageDup4Image property
        /// </summary>
        private Image fImageDup4Image;

        /// <summary>
        /// Backing field for TransparenciesTText property
        /// </summary>
        private Text fTransparenciesTText;

        /// <summary>
        /// Backing field for SystemWindowsCoDup5I5XListItem property
        /// </summary>
        private ListItem fSystemWindowsCoDup5I5XListItem;

        /// <summary>
        /// Backing field for ImageDup5Image property
        /// </summary>
        private Image fImageDup5Image;

        /// <summary>
        /// Backing field for EcoSMARTSettingText property
        /// </summary>
        private Text fEcoSMARTSettingText;

        /// <summary>
        /// Backing field for SystemWindowsCoDup6I6XListItem property
        /// </summary>
        private ListItem fSystemWindowsCoDup6I6XListItem;

        /// <summary>
        /// Backing field for ImageDup6Image property
        /// </summary>
        private Image fImageDup6Image;

        /// <summary>
        /// Backing field for BookletPrintingText property
        /// </summary>
        private Text fBookletPrintingText;

        /// <summary>
        /// Backing field for SaveAsButtonbtnButton property
        /// </summary>
        private Button fSaveAsButtonbtnButton;

        /// <summary>
        /// Backing field for ASaveAsTextBloText property
        /// </summary>
        private Text fASaveAsTextBloText;

        /// <summary>
        /// Backing field for DeleteButtonbtnButton property
        /// </summary>
        private Button fDeleteButtonbtnButton;

        /// <summary>
        /// Backing field for DeleteTextBlocText property
        /// </summary>
        private Text fDeleteTextBlocText;

        /// <summary>
        /// Backing field for ResetButtonbtnSButton property
        /// </summary>
        private Button fResetButtonbtnSButton;

        /// <summary>
        /// Backing field for ResetTextBlockText property
        /// </summary>
        private Text fResetTextBlockText;

        /// <summary>
        /// Backing field for PapersizesTextlText property
        /// </summary>
        private Text fPapersizesTextlText;

        /// <summary>
        /// Backing field for PapersizesTextText property
        /// </summary>
        private Text fPapersizesTextText;

        /// <summary>
        /// Backing field for A85x110inchesTeText property
        /// </summary>
        private Text fA85x110inchesTeText;

        /// <summary>
        /// Backing field for ComboBoxcboSCPaDup0ComboBox property
        /// </summary>
        private ComboBox fComboBoxcboSCPaDup0ComboBox;

        /// <summary>
        /// Backing field for PapersourceTextText property
        /// </summary>
        private Text fPapersourceTextText;

        /// <summary>
        /// Backing field for PapersourceTexText property
        /// </summary>
        private Text fPapersourceTexText;

        /// <summary>
        /// Backing field for ListBoxlistSpecList property
        /// </summary>
        private List fListBoxlistSpecList;

        /// <summary>
        /// Backing field for FrontCoverNoCovListItem property
        /// </summary>
        private ListItem fFrontCoverNoCovListItem;

        /// <summary>
        /// Backing field for FrontCoverNoCovText property
        /// </summary>
        private Text fFrontCoverNoCovText;

        /// <summary>
        /// Backing field for BackCoverNoCoveListItem property
        /// </summary>
        private ListItem fBackCoverNoCoveListItem;

        /// <summary>
        /// Backing field for BackCoverNoCoveText property
        /// </summary>
        private Text fBackCoverNoCoveText;

        /// <summary>
        /// Backing field for PrintpagesondifListItem property
        /// </summary>
        private ListItem fPrintpagesondifListItem;

        /// <summary>
        /// Backing field for PrintpagesondifText property
        /// </summary>
        private Text fPrintpagesondifText;

        /// <summary>
        /// Backing field for InsertblankorprListItem property
        /// </summary>
        private ListItem fInsertblankorprListItem;

        /// <summary>
        /// Backing field for OutwardCfoldopeDup1I1XListItem property
        /// </summary>
        private ListItem fOutwardCfoldopeDup1I1XListItem;

        /// <summary>
        /// Backing field for OutwardCfoldopeDup3I1XListItem property
        /// </summary>
        private ListItem fOutwardCfoldopeDup3I1XListItem;

        /// <summary>
        /// Backing field for InsertblankorprText property
        /// </summary>
        private Text fInsertblankorprText;

        /// <summary>
        /// Backing field for OutputOptionsTeText property
        /// </summary>
        private Text fOutputOptionsTeText;

        /// <summary>
        /// Backing field for StapleTextlblStText property
        /// </summary>
        private Text fStapleTextlblStText;

        /// <summary>
        /// Backing field for AStapleTextBloText property
        /// </summary>
        private Text fAStapleTextBloText;

        /// <summary>
        /// Backing field for ComboBoxcboStapComboBox property
        /// </summary>
        private ComboBox fComboBoxcboStapComboBox;

        /// <summary>
        /// Backing field for ComboBoxcboHoleComboBox property
        /// </summary>
        private ComboBox fComboBoxcboHoleComboBox;

        /// <summary>
        /// Backing field for ComboBoxcboFoldComboBox property
        /// </summary>
        private ComboBox fComboBoxcboFoldComboBox;

        /// <summary>
        /// Backing field for InwardCfoldopenDup1I1XListItem property
        /// </summary>
        private ListItem fInwardCfoldopenDup1I1XListItem;

        /// <summary>
        /// Backing field for InwardCfoldopenDup2I0XListItem property
        /// </summary>
        private ListItem fInwardCfoldopenDup2I0XListItem;

        /// <summary>
        /// Backing field for OutwardCfoldopeDup0I0XListItem property
        /// </summary>
        private ListItem fOutwardCfoldopeDup0I0XListItem;

        /// <summary>
        /// Backing field for OutwardCfoldopeDup2I0XListItem property
        /// </summary>
        private ListItem fOutwardCfoldopeDup2I0XListItem;

        /// <summary>
        /// Backing field for InwardCfoldopenDup1Text property
        /// </summary>
        private Text fInwardCfoldopenDup1Text;

        /// <summary>
        /// Backing field for InwardVfoldListDup0I0XListItem property
        /// </summary>
        private ListItem fInwardVfoldListDup0I0XListItem;

        /// <summary>
        /// Backing field for OutwardVfoldLisDup0I0XListItem property
        /// </summary>
        private ListItem fOutwardVfoldLisDup0I0XListItem;

        /// <summary>
        /// Backing field for InwardVfoldListDup1I1XListItem property
        /// </summary>
        private ListItem fInwardVfoldListDup1I1XListItem;

        /// <summary>
        /// Backing field for InwardVfoldTextText property
        /// </summary>
        private Text fInwardVfoldTextText;

        /// <summary>
        /// Backing field for NoneListBoxItemDup2ListItem property
        /// </summary>
        private ListItem fNoneListBoxItemDup2ListItem;

        /// <summary>
        /// Backing field for NoneTextBlockDup2Text property
        /// </summary>
        private Text fNoneTextBlockDup2Text;

        /// <summary>
        /// Backing field for OutwardCfoldopeDup1Text property
        /// </summary>
        private Text fOutwardCfoldopeDup1Text;

        /// <summary>
        /// Backing field for OutwardVfoldLisDup1I1XListItem property
        /// </summary>
        private ListItem fOutwardVfoldLisDup1I1XListItem;

        /// <summary>
        /// Backing field for InwardCfoldopenDup0I0XListItem property
        /// </summary>
        private ListItem fInwardCfoldopenDup0I0XListItem;

        /// <summary>
        /// Backing field for InwardCfoldopenDup0Text property
        /// </summary>
        private Text fInwardCfoldopenDup0Text;

        /// <summary>
        /// Backing field for OutwardVfoldTexText property
        /// </summary>
        private Text fOutwardVfoldTexText;

        /// <summary>
        /// Backing field for TextBoxedMaxSheEdit property
        /// </summary>
        private Edit fTextBoxedMaxSheEdit;

        /// <summary>
        /// Backing field for A13TextlblPerseText property
        /// </summary>
        private Text fA13TextlblPerseText;

        /// <summary>
        /// Backing field for A13TextBlockText property
        /// </summary>
        private Text fA13TextBlockText;

        /// <summary>
        /// Backing field for ScrollViewerPARPane property
        /// </summary>
        private Pane fScrollViewerPARPane;

        /// <summary>
        /// Backing field for ScrollBarVerticScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoScrollBar;

        /// <summary>
        /// Backing field for ColorOptionsGroGroup property
        /// </summary>
        private Group fColorOptionsGroGroup;

        /// <summary>
        /// Backing field for PrintinGrayscalDup0Text property
        /// </summary>
        private Text fPrintinGrayscalDup0Text;

        /// <summary>
        /// Backing field for ColorTextBlockText property
        /// </summary>
        private Text fColorTextBlockText;

        /// <summary>
        /// Backing field for PrintinGrayscalDup1Text property
        /// </summary>
        private Text fPrintinGrayscalDup1Text;

        /// <summary>
        /// Backing field for ColorThemesGrouGroup property
        /// </summary>
        private Group fColorThemesGrouGroup;

        /// <summary>
        /// Backing field for ColorThemesTextText property
        /// </summary>
        private Text fColorThemesTextText;

        /// <summary>
        /// Backing field for RGBcolorTextlblText property
        /// </summary>
        private Text fRGBcolorTextlblText;

        /// <summary>
        /// Backing field for RGBcolorTextBlText property
        /// </summary>
        private Text fRGBcolorTextBlText;

        /// <summary>
        /// Backing field for DefaultsRGBTextDup1Text property
        /// </summary>
        private Text fDefaultsRGBTextDup1Text;

        /// <summary>
        /// Backing field for PhotosRGBTextBlDup1Text property
        /// </summary>
        private Text fPhotosRGBTextBlDup1Text;

        /// <summary>
        /// Backing field for PhotoAdobeRGB19Dup1Text property
        /// </summary>
        private Text fPhotoAdobeRGB19Dup1Text;

        /// <summary>
        /// Backing field for VividsRGBTextBlDup1Text property
        /// </summary>
        private Text fVividsRGBTextBlDup1Text;

        /// <summary>
        /// Backing field for NoneTextBlockDup1Text property
        /// </summary>
        private Text fNoneTextBlockDup1Text;

        /// <summary>
        /// Backing field for CustomprofileTeDup1Text property
        /// </summary>
        private Text fCustomprofileTeDup1Text;

        /// <summary>
        /// Backing field for HighQualityCMYKListItem property
        /// </summary>
        private ListItem fHighQualityCMYKListItem;

        /// <summary>
        /// Backing field for HighQualityCMYKText property
        /// </summary>
        private Text fHighQualityCMYKText;

        /// <summary>
        /// Backing field for InwardCfoldopenDup3I1XListItem property
        /// </summary>
        private ListItem fInwardCfoldopenDup3I1XListItem;

        /// <summary>
        /// Backing field for ComboBoxcboRGBCComboBox property
        /// </summary>
        private ComboBox fComboBoxcboRGBCComboBox;

        /// <summary>
        /// Backing field for ComboBoxcboSCDoDup0ComboBox property
        /// </summary>
        private ComboBox fComboBoxcboSCDoDup0ComboBox;

        /// <summary>
        /// Backing field for PapertypeTextlbText property
        /// </summary>
        private Text fPapertypeTextlbText;

        /// <summary>
        /// Backing field for PapertypeTextBText property
        /// </summary>
        private Text fPapertypeTextBText;

        /// <summary>
        /// Backing field for ComboBoxcboSCPaDup1ComboBox property
        /// </summary>
        private ComboBox fComboBoxcboSCPaDup1ComboBox;

        /// <summary>
        /// Backing field for PrintonbothsideText property
        /// </summary>
        private Text fPrintonbothsideText;

        /// <summary>
        /// Backing field for PrintonbothsidText property
        /// </summary>
        private Text fPrintonbothsidText;

        /// <summary>
        /// Backing field for ComboBoxcboSCPrDup0ComboBox property
        /// </summary>
        private ComboBox fComboBoxcboSCPrDup0ComboBox;

        /// <summary>
        /// Backing field for PagespersheetTeText property
        /// </summary>
        private Text fPagespersheetTeText;

        /// <summary>
        /// Backing field for PagespersheetTText property
        /// </summary>
        private Text fPagespersheetTText;

        /// <summary>
        /// Backing field for ComboBoxcboSCDoDup1ComboBox property
        /// </summary>
        private ComboBox fComboBoxcboSCDoDup1ComboBox;

        /// <summary>
        /// Backing field for BookletLayoutTeText property
        /// </summary>
        private Text fBookletLayoutTeText;

        /// <summary>
        /// Backing field for ComboBoxcboSCBoComboBox property
        /// </summary>
        private ComboBox fComboBoxcboSCBoComboBox;

        /// <summary>
        /// Backing field for ColorthemeTextlText property
        /// </summary>
        private Text fColorthemeTextlText;

        /// <summary>
        /// Backing field for ComboBoxcboSCRGComboBox property
        /// </summary>
        private ComboBox fComboBoxcboSCRGComboBox;

        /// <summary>
        /// Backing field for PrintinGrayscalText property
        /// </summary>
        private Text fPrintinGrayscalText;

        /// <summary>
        /// Backing field for ComboBoxcboSCPrDup1ComboBox property
        /// </summary>
        private ComboBox fComboBoxcboSCPrDup1ComboBox;

        /// <summary>
        /// Backing field for PaperQualityTabTabItem property
        /// </summary>
        private TabItem fPaperQualityTabTabItem;

        /// <summary>
        /// Backing field for PaperQualityTexText property
        /// </summary>
        private Text fPaperQualityTexText;

        /// <summary>
        /// Backing field for EffectsTabItemETabItem property
        /// </summary>
        private TabItem fEffectsTabItemETabItem;

        /// <summary>
        /// Backing field for EffectsTextBlocText property
        /// </summary>
        private Text fEffectsTextBlocText;

        /// <summary>
        /// Backing field for FinishingTabIteTabItem property
        /// </summary>
        private TabItem fFinishingTabIteTabItem;

        /// <summary>
        /// Backing field for FinishingTextBlText property
        /// </summary>
        private Text fFinishingTextBlText;

        /// <summary>
        /// Backing field for OutputTabItemOuTabItem property
        /// </summary>
        private TabItem fOutputTabItemOuTabItem;

        /// <summary>
        /// Backing field for OutputTextBlockText property
        /// </summary>
        private Text fOutputTextBlockText;

        /// <summary>
        /// Backing field for JobStorageTabItTabItem property
        /// </summary>
        private TabItem fJobStorageTabItTabItem;

        /// <summary>
        /// Backing field for JobStorageTextBText property
        /// </summary>
        private Text fJobStorageTextBText;

        /// <summary>
        /// Backing field for ColorTabItemColTabItem property
        /// </summary>
        private TabItem fColorTabItemColTabItem;

        /// <summary>
        /// Backing field for AdvancedTabItemTabItem property
        /// </summary>
        private TabItem fAdvancedTabItemTabItem;

        /// <summary>
        /// Backing field for AdvancedTextBloText property
        /// </summary>
        private Text fAdvancedTextBloText;

        /// <summary>
        /// Backing field for OthersTabItemOtTabItem property
        /// </summary>
        private TabItem fOthersTabItemOtTabItem;

        /// <summary>
        /// Backing field for ImageDup7Image property
        /// </summary>
        private Image fImageDup7Image;

        /// <summary>
        /// Backing field for AboutButtonAbouButton property
        /// </summary>
        private Button fAboutButtonAbouButton;

        /// <summary>
        /// Backing field for AboutTextBlockText property
        /// </summary>
        private Text fAboutTextBlockText;

        /// <summary>
        /// Backing field for HelpButtonHelpButton property
        /// </summary>
        private Button fHelpButtonHelpButton;

        /// <summary>
        /// Backing field for AHelpTextBlockText property
        /// </summary>
        private Text fAHelpTextBlockText;

        /// <summary>
        /// Backing field for OKButtonOkButton property
        /// </summary>
        private Button fOKButtonOkButton;

        /// <summary>
        /// Backing field for AOKTextBlockText property
        /// </summary>
        private Text fAOKTextBlockText;

        /// <summary>
        /// Backing field for CancelButtonCanDup1Button property
        /// </summary>
        private Button fCancelButtonCanDup1Button;

        /// <summary>
        /// Backing field for ACancelTextBloText property
        /// </summary>
        private Text fACancelTextBloText;

        /// <summary>
        /// Backing field for ATextBlocktxtBoText property
        /// </summary>
        private Text fATextBlocktxtBoText;

        /// <summary>
        /// Backing field for BTextBlocktxtBoText property
        /// </summary>
        private Text fBTextBlocktxtBoText;

        /// <summary>
        /// Backing field for aTextBlocktxtBoText property
        /// </summary>
        private Text faTextBlocktxtBoText;

        /// <summary>
        /// Backing field for bTextBlocktxtBoText property
        /// </summary>
        private Text fbTextBlocktxtBoText;

        /// <summary>
        /// Backing field for ETextBlocktxtPrText property
        /// </summary>
        private Text fETextBlocktxtPrText;

        /// <summary>
        /// Backing field for TextBlockdescStText property
        /// </summary>
        private Text fTextBlockdescStText;

        /// <summary>
        /// Backing field for UnknownTextBlocText property
        /// </summary>
        private Text fUnknownTextBlocText;

        /// <summary>
        /// Backing field for TextBlockDup0I0XText property
        /// </summary>
        private Text fTextBlockDup0I0XText;

        /// <summary>
        /// Backing field for TextBlockDup1I1XText property
        /// </summary>
        private Text fTextBlockDup1I1XText;

        /// <summary>
        /// Backing field for TextBlockDup2I2XText property
        /// </summary>
        private Text fTextBlockDup2I2XText;

        /// <summary>
        /// Backing field for TextBlockDup3I3XText property
        /// </summary>
        private Text fTextBlockDup3I3XText;

        /// <summary>
        /// Backing field for TextBlockDup4I4XText property
        /// </summary>
        private Text fTextBlockDup4I4XText;

        /// <summary>
        /// Backing field for TextBlockDup5I5XText property
        /// </summary>
        private Text fTextBlockDup5I5XText;

        /// <summary>
        /// Backing field for TextBlockDup6I6XText property
        /// </summary>
        private Text fTextBlockDup6I6XText;

        /// <summary>
        /// Backing field for ManualDuplexInsText property
        /// </summary>
        private Text fManualDuplexInsText;

        /// <summary>
        /// Backing field for ActualsizeRadioRadioButton property
        /// </summary>
        private RadioButton fActualsizeRadioRadioButton;

        /// <summary>
        /// Backing field for ResizingOptionsGroup property
        /// </summary>
        private Group fResizingOptionsGroup;

        /// <summary>
        /// Backing field for PrintdocumentonRadioButton property
        /// </summary>
        private RadioButton fPrintdocumentonRadioButton;

        /// <summary>
        /// Backing field for ComboBoxcboPrinComboBox property
        /// </summary>
        private ComboBox fComboBoxcboPrinComboBox;

        /// <summary>
        /// Backing field for ComboBoxcboPrinComboBoxColor property
        /// </summary>
        private ComboBox fComboBoxcboPrinComboBoxColor;

        /// <summary>
        /// Backing field for OffListBoxItemListItem property
        /// </summary>
        private ListItem fOffListBoxItemListItem;

        /// <summary>
        /// Backing field for BlackOnlyListBoListItem property
        /// </summary>
        private ListItem fBlackOnlyListBoListItem;

        /// <summary>
        /// Backing field for BlackOnlyTextBlText property
        /// </summary>
        private Text fBlackOnlyTextBlText;

        /// <summary>
        /// Backing field for OnListBoxItemListItem property
        /// </summary>
        private ListItem fOnListBoxItemListItem;

        /// <summary>
        /// Backing field for OnTextBlockText property
        /// </summary>
        private Text fOnTextBlockText;

        /// <summary>
        /// Backing field for ScaletofitCheckCheckBox property
        /// </summary>
        private CheckBox fScaletofitCheckCheckBox;

        /// <summary>
        /// Backing field for ofactualsizeRadRadioButton property
        /// </summary>
        private RadioButton fofactualsizeRadRadioButton;

        /// <summary>
        /// Backing field for TextBoxedZoomEdit property
        /// </summary>
        private Edit fTextBoxedZoomEdit;

        /// <summary>
        /// Backing field for WatermarksGroupGroup property
        /// </summary>
        private Group fWatermarksGroupGroup;

        /// <summary>
        /// Backing field for ComboBoxcboWateComboBox property
        /// </summary>
        private ComboBox fComboBoxcboWateComboBox;

        /// <summary>
        /// Backing field for FirstpageonlyChCheckBox property
        /// </summary>
        private CheckBox fFirstpageonlyChCheckBox;

        /// <summary>
        /// Backing field for DocumentOptionsGroup property
        /// </summary>
        private Group fDocumentOptionsGroup;

        /// <summary>
        /// Backing field for PrintonbothsideCheckBox property
        /// </summary>
        private CheckBox fPrintonbothsideCheckBox;

        /// <summary>
        /// Backing field for FlipPagesUpChecCheckBox property
        /// </summary>
        private CheckBox fFlipPagesUpChecCheckBox;

        /// <summary>
        /// Backing field for ComboBoxcboBookComboBox property
        /// </summary>
        private ComboBox fComboBoxcboBookComboBox;

        /// <summary>
        /// Backing field for ComboBoxcboBookComboBox property
        /// </summary>
        private ComboBox fComboBoxcboDocuComboBox_Finishing;

        /// <summary>
        /// Backing field for ComboBoxcboDocuDup0ComboBox property
        /// </summary>
        private ComboBox fComboBoxcboDocuDup0ComboBox;

        /// <summary>
        /// Backing field for PrintpageborderCheckBox property
        /// </summary>
        private CheckBox fPrintpageborderCheckBox;

        /// <summary>
        /// Backing field for ComboBoxcboJobPComboBox property
        /// </summary>
        private ComboBox fComboBoxcboJobPComboBox;

        /// <summary>
        /// Backing field for MonotypePrinterDup10I0XListItem property
        /// </summary>
        private ListItem fMonotypePrinterDup10I0XListItem;

        /// <summary>
        /// Backing field for RightthenDownTeDup1Text property
        /// </summary>
        private Text fRightthenDownTeDup1Text;

        /// <summary>
        /// Backing field for MonotypePrinterDup11I1XListItem property
        /// </summary>
        private ListItem fMonotypePrinterDup11I1XListItem;

        /// <summary>
        /// Backing field for DownthenRightTeDup1Text property
        /// </summary>
        private Text fDownthenRightTeDup1Text;

        /// <summary>
        /// Backing field for MonotypePrinterDup12I2XListItem property
        /// </summary>
        private ListItem fMonotypePrinterDup12I2XListItem;

        /// <summary>
        /// Backing field for LeftthenDownTexDup1Text property
        /// </summary>
        private Text fLeftthenDownTexDup1Text;

        /// <summary>
        /// Backing field for MonotypePrinterDup13I3XListItem property
        /// </summary>
        private ListItem fMonotypePrinterDup13I3XListItem;

        /// <summary>
        /// Backing field for DownthenLeftTexDup1Text property
        /// </summary>
        private Text fDownthenLeftTexDup1Text;

        /// <summary>
        /// Backing field for UserNameGroupBoGroup property
        /// </summary>
        private Group fUserNameGroupBoGroup;

        /// <summary>
        /// Backing field for UserNameRadioBuRadioButton property
        /// </summary>
        private RadioButton fUserNameRadioBuRadioButton;

        /// <summary>
        /// Backing field for CustomRadioButtDup0RadioButton property
        /// </summary>
        private RadioButton fCustomRadioButtDup0RadioButton;

        /// <summary>
        /// Backing field for AutomaticRadioBRadioButton property
        /// </summary>
        private RadioButton fAutomaticRadioBRadioButton;

        /// <summary>
        /// Backing field for CustomRadioButtDup1RadioButton property
        /// </summary>
        private RadioButton fCustomRadioButtDup1RadioButton;

        /// <summary>
        /// Backing field for TextBoxedJobNamEdit property
        /// </summary>
        private Edit fTextBoxedJobNamEdit;

        /// <summary>
        /// Backing field for JobNameGroupBoxGroup property
        /// </summary>
        private Group fJobNameGroupBoxGroup;

        /// <summary>
        /// Backing field for TextBoxedUserNaEdit property
        /// </summary>
        private Edit fTextBoxedUserNaEdit;

        /// <summary>
        /// Backing field for PasswordBoxedPIDup0Edit property
        /// </summary>
        private Edit fPasswordBoxedPIDup0Edit;

        /// <summary>
        /// Backing field for PasswordBoxedPaDup0Edit property
        /// </summary>
        private Edit fPasswordBoxedPaDup0Edit;

        /// <summary>
        /// Backing field for PasswordBoxedCoDup0Edit property
        /// </summary>
        private Edit fPasswordBoxedCoDup0Edit;

        /// <summary>
        /// Backing field for SaveasdefaultpaDup0CheckBox property
        /// </summary>
        private CheckBox fSaveasdefaultpaDup0CheckBox;

        /// <summary>
        /// Backing field for ComboBoxcboJobNComboBox property
        /// </summary>
        private ComboBox fComboBoxcboJobNComboBox;

        /// <summary>
        /// Backing field for MonotypePrinterDup0I0XListItem property
        /// </summary>
        private ListItem fMonotypePrinterDup0I0XListItem;

        /// <summary>
        /// Backing field for MonotypePrinterDup0I0XListItemPrintQuality property
        /// </summary>
        private ListItem fMonotypePrinterDup0I0XListItemPrintQuality;

        /// <summary>
        /// Backing field for fMonotypePrinterDup1I1XListItemPrintQuality property
        /// </summary>
        private ListItem fMonotypePrinterDup1I1XListItemPrintQuality;

        /// <summary>
        /// Backing field for GeneralOfficeTeText property
        /// </summary>
        private Text fGeneralOfficeTeText;

        /// <summary>
        /// Backing field for ProfessionalTexText property
        /// </summary>
        private Text fProfessionalTexText;

        /// <summary>
        /// Backing field for MonotypePrinterDup2I2XListItem property
        /// </summary>
        private ListItem fMonotypePrinterDup2I2XListItem;

        /// <summary>
        /// Backing field for PresentationTexText property
        /// </summary>
        private Text fPresentationTexText;

        /// <summary>
        /// Backing field for UseJobName199TeDup0Text property
        /// </summary>
        private Text fUseJobName199TeDup0Text;

        /// <summary>
        /// Backing field for AdvancedGroupBoGroup property
        /// </summary>
        private Group fAdvancedGroupBoGroup;

        /// <summary>
        /// Backing field for TextBoxedCopiesEdit property
        /// </summary>
        private Edit fTextBoxedCopiesEdit;

        /// <summary>
        /// Backing field for CollateCheckBoxCheckBox property
        /// </summary>
        private CheckBox fCollateCheckBoxCheckBox;

        /// <summary>
        /// Backing field for ReversepageordeCheckBox property
        /// </summary>
        private CheckBox fReversepageordeCheckBox;

        /// <summary>
        /// Backing field for ReversepageordeText property
        /// </summary>
        private Text fReversepageordeText;

        /// <summary>
        /// Backing field for PrintAllTextasBCheckBox property
        /// </summary>
        private CheckBox fPrintAllTextasBCheckBox;

        /// <summary>
        /// Backing field for PrintAllTextasBText property
        /// </summary>
        private Text fPrintAllTextasBText;

        /// <summary>
        /// Backing field for HPEasyColorChecCheckBox property
        /// </summary>
        private CheckBox fHPEasyColorChecCheckBox;

        /// <summary>
        /// Backing field for HPEasyColorTextText property
        /// </summary>
        private Text fHPEasyColorTextText;

        /// <summary>
        /// Backing field for EdgetoEdgeCheckCheckBox property
        /// </summary>
        private CheckBox fEdgetoEdgeCheckCheckBox;

        /// <summary>
        /// Backing field for EdgetoEdgeTextBText property
        /// </summary>
        private Text fEdgetoEdgeTextBText;

        /// <summary>
        /// Backing field for AlternativeLettCheckBox property
        /// </summary>
        private CheckBox fAlternativeLettCheckBox;

        /// <summary>
        /// Backing field for MonotypePrinterDup1I1XListItem property
        /// </summary>
        private ListItem fMonotypePrinterDup1I1XListItem;

        /// <summary>
        /// Backing field for ReplaceExistingDup0Text property
        /// </summary>
        private Text fReplaceExistingDup0Text;

        /// <summary>
        /// Backing field for MakeJobPrivateSDup0Group property
        /// </summary>
        private Group fMakeJobPrivateSDup0Group;

        /// <summary>
        /// Backing field for OrientationGrouGroup property
        /// </summary>
        private Group fOrientationGrouGroup;

        /// <summary>
        /// Backing field for LandscapeRadioBRadioButton property
        /// </summary>
        private RadioButton fLandscapeRadioBRadioButton;

        /// <summary>
        /// Backing field for PortraitRadioBuRadioButton property
        /// </summary>
        private RadioButton fPortraitRadioBuRadioButton;

        /// <summary>
        /// Backing field for Rotateby180degrCheckBox property
        /// </summary>
        private CheckBox fRotateby180degrCheckBox;

        /// <summary>
        /// Backing field for MonotypePrinterDup6I0XListItem property
        /// </summary>
        private ListItem fMonotypePrinterDup6I0XListItem;

        /// <summary>
        /// Backing field for MonotypePrinterDup6I0XListItemRGB property
        /// </summary>
        private ListItem fMonotypePrinterDup6I0XListItemRGB;

        /// <summary>
        /// Backing field for A1pagepersheetTDup1Text property
        /// </summary>
        private Text fA1pagepersheetTDup1Text;

        /// <summary>
        /// Backing field for MonotypePrinterDup7I1XListItem property
        /// </summary>
        private ListItem fMonotypePrinterDup7I1XListItem;

        /// <summary>
        /// Backing field for MonotypePrinterDup7I1XListItemRGB property
        /// </summary>
        private ListItem fMonotypePrinterDup7I1XListItemRGB;

        /// <summary>
        /// Backing field for A2pagespersheetDup1Text property
        /// </summary>
        private Text fA2pagespersheetDup1Text;

        /// <summary>
        /// Backing field for MonotypePrinterDup8I2XListItem property
        /// </summary>
        private ListItem fMonotypePrinterDup8I2XListItem;

        /// <summary>
        /// Backing field for MonotypePrinterDup8I2XListItemRGB property
        /// </summary>
        private ListItem fMonotypePrinterDup8I2XListItemRGB;

        /// <summary>
        /// Backing field for A4pagespersheetDup1Text property
        /// </summary>
        private Text fA4pagespersheetDup1Text;

        /// <summary>
        /// Backing field for MonotypePrinterDup9I3XListItem property
        /// </summary>
        private ListItem fMonotypePrinterDup9I3XListItem;

        /// <summary>
        /// Backing field for MonotypePrinterDup9I3XListItemRGB property
        /// </summary>
        private ListItem fMonotypePrinterDup9I3XListItemRGB;

        /// <summary>
        /// Backing field for A6pagespersheetDup1Text property
        /// </summary>
        private Text fA6pagespersheetDup1Text;

        /// <summary>
        /// Backing field for MonotypePrinterDup10I4XListItem property
        /// </summary>
        private ListItem fMonotypePrinterDup10I4XListItem;

        /// <summary>
        /// Backing field for MonotypePrinterDup10I4XListItemRGB property
        /// </summary>
        private ListItem fMonotypePrinterDup10I4XListItemRGB;

        /// <summary>
        /// Backing field for A9pagespersheetDup1Text property
        /// </summary>
        private Text fA9pagespersheetDup1Text;

        /// <summary>
        /// Backing field for MonotypePrinterDup11I5XListItem property
        /// </summary>
        private ListItem fMonotypePrinterDup11I5XListItem;

        /// <summary>
        /// Backing field for MonotypePrinterDup11I5XListItemRGB property
        /// </summary>
        private ListItem fMonotypePrinterDup11I5XListItemRGB;

        /// <summary>
        /// Backing field for A16pagespersheeDup1Text property
        /// </summary>
        private Text fA16pagespersheeDup1Text;

        /// <summary>
        /// Backing field for ScrollViewerDroDup1Pane property
        /// </summary>
        private Pane fScrollViewerDroDup1Pane;

        /// <summary>
        /// Backing field for PopupDup1Window property
        /// </summary>
        private Window fPopupDup1Window;

        /// <summary>
        /// Backing field for SelectionsconflWindow property
        /// </summary>
        private Window fSelectionsconflWindow;

        /// <summary>
        /// Backing field for fYesButton6Button property
        /// </summary>
        private Button fYesButton6Button;

        /// <summary>
        /// Backing field for ComboBoxcboJobPComboBox_Finishing property
        /// </summary>
        private ComboBox fComboBoxcboJobPComboBox_Finishing;

        /// <summary>
        /// Backing field for AutomaticTextBlDup1Text property
        /// </summary>
        private Text fAutomaticTextBlDup1Text;

        /// <summary>
        /// Backing field for OutputOptionsGrGroup property
        /// </summary>
        private Group fOutputOptionsGrGroup;

        /// <summary>
        /// Backing field for OutputBinOptionGroup property
        /// </summary>
        private Group fOutputBinOptionGroup;

        /// <summary>
        /// Backing field for ComboBoxcboOutpComboBox property
        /// </summary>
        private ComboBox fComboBoxcboOutpComboBox;

        /// <summary>
        /// Backing field for JobStorageModeGGroup property
        /// </summary>
        private Group fJobStorageModeGGroup;

        /// <summary>
        /// Backing field for OffRadioButtonrRadioButton property
        /// </summary>
        private RadioButton fOffRadioButtonrRadioButton;

        /// <summary>
        /// Backing field for OffTextBlockText property
        /// </summary>
        private Text fOffTextBlockText;

        /// <summary>
        /// Backing field for ProofandHoldRadRadioButton property
        /// </summary>
        private RadioButton fProofandHoldRadRadioButton;

        /// <summary>
        /// Backing field for AProofandHoldTText property
        /// </summary>
        private Text fAProofandHoldTText;

        /// <summary>
        /// Backing field for PersonalJobRadiRadioButton property
        /// </summary>
        private RadioButton fPersonalJobRadiRadioButton;

        /// <summary>
        /// Backing field for PersonalJobTexText property
        /// </summary>
        private Text fPersonalJobTexText;

        /// <summary>
        /// Backing field for QuickCopyRadioBRadioButton property
        /// </summary>
        private RadioButton fQuickCopyRadioBRadioButton;

        /// <summary>
        /// Backing field for QuickCopyTextBText property
        /// </summary>
        private Text fQuickCopyTextBText;

        /// <summary>
        /// Backing field for StoredJobRadioBRadioButton property
        /// </summary>
        private RadioButton fStoredJobRadioBRadioButton;

        /// <summary>
        /// Backing field for StoredJobTextBText property
        /// </summary>
        private Text fStoredJobTextBText;

        /// <summary>
        /// Backing field for MakeJobPrivateSGroup property
        /// </summary>
        private Group fMakeJobPrivateSGroup;

        /// <summary>
        /// Backing field for ComboBoxcboJobPComboBox property
        /// </summary>
        private ComboBox fComboBoxcboJobPComboBox_JobStorage;

        /// <summary>
        /// Backing field for MonotypePrinterDup3I1XListItem1 property
        /// </summary>
        private ListItem fMonotypePrinterDup3I1XListItem1;

        /// <summary>
        /// Backing field for ReplaceExistingDup1Text property
        /// </summary>
        private Text fReplaceExistingDup1Text;

        /// <summary>
        /// Backing field for MonotypePrinterDup3I0XListItem property
        /// </summary>
        private ListItem fMonotypePrinterDup3I0XListItem;

        /// <summary>
        /// Backing field for MonotypePrinterDup3I0XListItem1 property
        /// </summary>
        private ListItem fMonotypePrinterDup3I0XListItem1;

        /// <summary>
        /// Backing field for NormalTextBlockDup1Text property
        /// </summary>
        private Text fNormalTextBlockDup1Text;

        /// <summary>
        /// Backing field for MonotypePrinterDup4I1XListItem property
        /// </summary>
        private ListItem fMonotypePrinterDup4I1XListItem;

        /// <summary>
        /// Backing field for MonotypePrinterDup4I1XListItemRast property
        /// </summary>
        private ListItem fMonotypePrinterDup4I1XListItemRast;

        /// <summary>
        /// Backing field for FineLinesTextBlDup1Text property
        /// </summary>
        private Text fFineLinesTextBlDup1Text;

        /// <summary>
        /// Backing field for MonotypePrinterDup5I2XListItem property
        /// </summary>
        private ListItem fMonotypePrinterDup5I2XListItem;

        /// <summary>
        /// Backing field for MonotypePrinterDup5I2XListItemRast property
        /// </summary>
        private ListItem fMonotypePrinterDup5I2XListItemRast;

        /// <summary>
        /// Backing field for QuickViewTextBlDup1Text property
        /// </summary>
        private Text fQuickViewTextBlDup1Text;

        /// <summary>
        /// Backing field for ComboBoxcboDocuComboBox property
        /// </summary>
        private ComboBox fComboBoxcboDocuComboBox;

        /// <summary>
        /// Backing field for ComboBoxcboPageDup0ComboBox property
        /// </summary>
        private ComboBox fComboBoxcboPageDup0ComboBox;

        /// <summary>
        /// Backing field for MonotypePrinterDup2I0XListItem property
        /// </summary>
        private ListItem fMonotypePrinterDup2I0XListItem;

        /// <summary>
        /// Backing field for FastRes1200TextDup1Text property
        /// </summary>
        private Text fFastRes1200TextDup1Text;

        /// <summary>
        /// Backing field for A1200x1200TextBDup1Text property
        /// </summary>
        private Text fA1200x1200TextBDup1Text;

        /// <summary>
        /// Backing field for MonotypePrinterDup3I1XListItem property
        /// </summary>
        private ListItem fMonotypePrinterDup3I1XListItem;

        /// <summary>
        /// Backing field for PaperOptionsGroGroup property
        /// </summary>
        private Group fPaperOptionsGroGroup;

        /// <summary>
        /// Backing field for ComboBoxcboPageDup1ComboBox property
        /// </summary>
        private ComboBox fComboBoxcboPageDup1ComboBox;

        /// <summary>
        /// Backing field for ComboBoxcboResoComboBox property
        /// </summary>
        private ComboBox fComboBoxcboResoComboBox;

        /// <summary>
        /// Backing field for PrintQualityGroGroup property
        /// </summary>
        private Group fPrintQualityGroGroup;

        /// <summary>
        /// Model Name property
        /// </summary>
        private string _queueName;

        /// <summary>
        /// Backing field for BestQualityTextDup1Text property
        /// </summary>
        private Text fBestQualityTextDup1Text;

        /// <summary>
        /// Backing field for MaximumCompressDup1Text property
        /// </summary>
        private Text fMaximumCompressDup1Text;

        /// <summary>
        /// Backing field for ComboBoxcboRastComboBox property
        /// </summary>
        private ComboBox fComboBoxcboRastComboBox;

        /// <summary>
        /// Initializes a new instance of the <see cref="PrintPreferences"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public PrintPreferences(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PrintPreferences"/> class using the default UIAFramework.
        /// </summary>
        public PrintPreferences()
        {
            Desktop = new Desktop();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PrintPreferences"/> class.
        /// </summary>
        /// <param name="queueName">
        /// The framework.
        /// </param>
        public PrintPreferences(string queueName)
        {
            _queueName = queueName;
            Desktop = new Desktop(UIAFramework.ManagedUIA);
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to DriverWindow
        /// </summary>
        public Window DriverWindow
        {
            get
            {
                if (null == fIONWindow)
                {
                    fIONWindow = new Window("DriverWindow", Desktop);
                    fIONWindow.UIMap.Scope = UIASeachScope.Children;
                    fIONWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, $"{_queueName}");
                    fIONWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                }

                return fIONWindow;
            }
        }

        /// <summary>
        /// Gets Reference to DriverTitleBar
        /// </summary>
        public TitleBar DriverTitleBar
        {
            get
            {
                if (null == fIONTitleBar)
                {
                    fIONTitleBar = new TitleBar("DriverTitleBar", DriverWindow);
                    fIONTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fIONTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, $"{_queueName}");
                    fIONTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                }

                return fIONTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemMenuBarSyMenuBar
        /// </summary>
        public MenuBar SystemMenuBarSyMenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyMenuBar)
                {
                    fSystemMenuBarSyMenuBar = new MenuBar("SystemMenuBarSyMenuBar", DriverTitleBar);
                    fSystemMenuBarSyMenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                }

                return fSystemMenuBarSyMenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemItem1MenuItem
        /// </summary>
        public MenuItem SystemItem1MenuItem
        {
            get
            {
                if (null == fSystemItem1MenuItem)
                {
                    fSystemItem1MenuItem = new MenuItem("SystemItem1MenuItem", SystemMenuBarSyMenuBar);
                    fSystemItem1MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                }

                return fSystemItem1MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboPageDup0ComboBox
        /// </summary>
        public ComboBox ComboBoxcboPageDup0ComboBox
        {
            get
            {
                if (null == fComboBoxcboPageDup0ComboBox)
                {
                    fComboBoxcboPageDup0ComboBox = new ComboBox("ComboBoxcboPageDup0ComboBox", PaperOptionsGroGroup);
                    fComboBoxcboPageDup0ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboPageDup0ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboPageMediaSize");
                    fComboBoxcboPageDup0ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                }

                return fComboBoxcboPageDup0ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup2I0XListItem
        /// </summary>
        public ListItem MonotypePrinterDup2I0XListItem
        {
            get
            {
                if (null == fMonotypePrinterDup2I0XListItem)
                {
                    fMonotypePrinterDup2I0XListItem = new ListItem("MonotypePrinterDup2I0XListItem", ComboBoxcboResoComboBox);
                    fMonotypePrinterDup2I0XListItem.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup2I0XListItem.UIMap.Index = 0;
                    fMonotypePrinterDup2I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMonotypePrinterDup2I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                }

                return fMonotypePrinterDup2I0XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to FastRes1200TextDup1Text
        /// </summary>
        public Text FastRes1200TextDup1Text
        {
            get
            {
                if (null == fFastRes1200TextDup1Text)
                {
                    fFastRes1200TextDup1Text = new Text("FastRes1200TextDup1Text", MonotypePrinterDup2I0XListItem);
                    fFastRes1200TextDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fFastRes1200TextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fFastRes1200TextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"FastRes 1200");
                }

                return fFastRes1200TextDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to A1200x1200TextBDup1Text
        /// </summary>
        public Text A1200x1200TextBDup1Text
        {
            get
            {
                if (null == fA1200x1200TextBDup1Text)
                {
                    fA1200x1200TextBDup1Text = new Text("A1200x1200TextBDup1Text", MonotypePrinterDup3I1XListItem);
                    fA1200x1200TextBDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fA1200x1200TextBDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fA1200x1200TextBDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"1200 x 1200");
                }

                return fA1200x1200TextBDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup3I1XListItem
        /// </summary>
        public ListItem MonotypePrinterDup3I1XListItem
        {
            get
            {
                if (null == fMonotypePrinterDup3I1XListItem)
                {
                    fMonotypePrinterDup3I1XListItem = new ListItem("MonotypePrinterDup3I1XListItem", ComboBoxcboResoComboBox);
                    fMonotypePrinterDup3I1XListItem.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup3I1XListItem.UIMap.Index = 1;
                    fMonotypePrinterDup3I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMonotypePrinterDup3I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                }

                return fMonotypePrinterDup3I1XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to PaperOptionsGroGroup
        /// </summary>
        public Group PaperOptionsGroGroup
        {
            get
            {
                if (null == fPaperOptionsGroGroup)
                {
                    fPaperOptionsGroGroup = new Group("PaperOptionsGroGroup", PaperQualityTabTabItem);
                    fPaperOptionsGroGroup.UIMap.Scope = UIASeachScope.Children;
                    fPaperOptionsGroGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"groupPaperOptions");
                    fPaperOptionsGroGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Paper Options");
                    fPaperOptionsGroGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                }

                return fPaperOptionsGroGroup;
            }
        }

        /// <summary>
        /// Gets Reference to CloseCloseButton
        /// </summary>
        public Button CloseCloseButton
        {
            get
            {
                if (null == fCloseCloseButton)
                {
                    fCloseCloseButton = new Button("CloseCloseButton", DriverTitleBar);
                    fCloseCloseButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                }

                return fCloseCloseButton;
            }
        }

        /// <summary>
        /// Gets Reference to ValidationModalCustom
        /// </summary>
        public Custom ValidationModalCustom
        {
            get
            {
                if (null == fValidationModalCustom)
                {
                    fValidationModalCustom = new Custom("ValidationModalCustom", DriverWindow);
                    fValidationModalCustom.UIMap.Scope = UIASeachScope.Children;
                    fValidationModalCustom.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ValidationModalDialog");
                    fValidationModalCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ValidationModalDialog");
                }

                return fValidationModalCustom;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboPageDup1ComboBox
        /// </summary>
        public ComboBox ComboBoxcboPageDup1ComboBox
        {
            get
            {
                if (null == fComboBoxcboPageDup1ComboBox)
                {
                    fComboBoxcboPageDup1ComboBox = new ComboBox("ComboBoxcboPageDup1ComboBox", PaperOptionsGroGroup);
                    fComboBoxcboPageDup1ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboPageDup1ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboPageMediaType");
                    fComboBoxcboPageDup1ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                }

                return fComboBoxcboPageDup1ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboResoComboBox
        /// </summary>
        public ComboBox ComboBoxcboResoComboBox
        {
            get
            {
                if (null == fComboBoxcboResoComboBox)
                {
                    fComboBoxcboResoComboBox = new ComboBox("ComboBoxcboResoComboBox", PrintQualityGroGroup);
                    fComboBoxcboResoComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboResoComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboResolution");
                    fComboBoxcboResoComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                }

                return fComboBoxcboResoComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to PrintQualityGroGroup
        /// </summary>
        public Group PrintQualityGroGroup
        {
            get
            {
                if (null == fPrintQualityGroGroup)
                {
                    fPrintQualityGroGroup = new Group("PrintQualityGroGroup", PaperQualityTabTabItem);
                    fPrintQualityGroGroup.UIMap.Scope = UIASeachScope.Children;
                    fPrintQualityGroGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"groupPrintQuality");
                    fPrintQualityGroGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Print Quality");
                    fPrintQualityGroGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                }

                return fPrintQualityGroGroup;
            }
        }

        /// <summary>
        /// Gets Reference to ValidatingpleasText
        /// </summary>
        public Text ValidatingpleasText
        {
            get
            {
                if (null == fValidatingpleasText)
                {
                    fValidatingpleasText = new Text("ValidatingpleasText", ValidationModalCustom);
                    fValidatingpleasText.UIMap.Scope = UIASeachScope.Children;
                    fValidatingpleasText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Validating.. please wait");
                    fValidatingpleasText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fValidatingpleasText;
            }
        }

        /// <summary>
        /// Gets Reference to CancelButtonCanDup0Button
        /// </summary>
        public Button CancelButtonCanDup0Button
        {
            get
            {
                if (null == fCancelButtonCanDup0Button)
                {
                    fCancelButtonCanDup0Button = new Button("CancelButtonCanDup0Button", ValidationModalCustom);
                    fCancelButtonCanDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButtonCanDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                    fCancelButtonCanDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"CancelValidationButton");
                    fCancelButtonCanDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fCancelButtonCanDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to CancelTextBlockText
        /// </summary>
        public Text CancelTextBlockText
        {
            get
            {
                if (null == fCancelTextBlockText)
                {
                    fCancelTextBlockText = new Text("CancelTextBlockText", CancelButtonCanDup0Button);
                    fCancelTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fCancelTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                    fCancelTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fCancelTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to TabControlTab
        /// </summary>
        public Tab TabControlTab
        {
            get
            {
                if (null == fTabControlTab)
                {
                    fTabControlTab = new Tab("TabControlTab", DriverWindow);
                    fTabControlTab.UIMap.Scope = UIASeachScope.Children;
                    fTabControlTab.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabControl");
                }

                return fTabControlTab;
            }
        }

        /// <summary>
        /// Gets Reference to PrintingShortcuTabItem
        /// </summary>
        public TabItem PrintingShortcuTabItem
        {
            get
            {
                if (null == fPrintingShortcuTabItem)
                {
                    fPrintingShortcuTabItem = new TabItem("PrintingShortcuTabItem", TabControlTab);
                    fPrintingShortcuTabItem.UIMap.Scope = UIASeachScope.Children;
                    fPrintingShortcuTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printing Shortcuts");
                    fPrintingShortcuTabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ShortCutsTab");
                    fPrintingShortcuTabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                }

                return fPrintingShortcuTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to PrintingShortcuText
        /// </summary>
        public Text PrintingShortcuText
        {
            get
            {
                if (null == fPrintingShortcuText)
                {
                    fPrintingShortcuText = new Text("PrintingShortcuText", PrintingShortcuTabItem);
                    fPrintingShortcuText.UIMap.Scope = UIASeachScope.Children;
                    fPrintingShortcuText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printing Shortcuts");
                    fPrintingShortcuText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fPrintingShortcuText;
            }
        }

        /// <summary>
        /// Gets Reference to AprintingshortcText
        /// </summary>
        public Text AprintingshortcText
        {
            get
            {
                if (null == fAprintingshortcText)
                {
                    fAprintingshortcText = new Text("AprintingshortcText", PrintingShortcuTabItem);
                    fAprintingshortcText.UIMap.Scope = UIASeachScope.Children;
                    fAprintingshortcText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"A printing shortcut is a collection of saved print settings that you can select with a single click.");
                    fAprintingshortcText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"lblPrintingShortcutsDesc");
                    fAprintingshortcText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fAprintingshortcText;
            }
        }

        /// <summary>
        /// Gets Reference to PrintingshortcuDup0Text
        /// </summary>
        public Text PrintingshortcuDup0Text
        {
            get
            {
                if (null == fPrintingshortcuDup0Text)
                {
                    fPrintingshortcuDup0Text = new Text("PrintingshortcuDup0Text", PrintingShortcuTabItem);
                    fPrintingshortcuDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fPrintingshortcuDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printing shortcuts:");
                    fPrintingshortcuDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"lblPrintingShortcuts");
                    fPrintingshortcuDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                }

                return fPrintingshortcuDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to PrintingshortcuDup1Text
        /// </summary>
        public Text PrintingshortcuDup1Text
        {
            get
            {
                if (null == fPrintingshortcuDup1Text)
                {
                    fPrintingshortcuDup1Text = new Text("PrintingshortcuDup1Text", PrintingshortcuDup0Text);
                    fPrintingshortcuDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fPrintingshortcuDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printing shortcuts:");
                    fPrintingshortcuDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fPrintingshortcuDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to ListBoxlistPrinList
        /// </summary>
        public List ListBoxlistPrinList
        {
            get
            {
                if (null == fListBoxlistPrinList)
                {
                    fListBoxlistPrinList = new List("ListBoxlistPrinList", PrintingShortcuTabItem);
                    fListBoxlistPrinList.UIMap.Scope = UIASeachScope.Children;
                    fListBoxlistPrinList.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"listPrintingShortcuts");
                    fListBoxlistPrinList.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBox");
                }

                return fListBoxlistPrinList;
            }
        }

        /// <summary>
        /// Gets Reference to SystemWindowsCoDup0I0XListItem
        /// </summary>
        public ListItem SystemWindowsCoDup0I0XListItem
        {
            get
            {
                if (null == fSystemWindowsCoDup0I0XListItem)
                {
                    fSystemWindowsCoDup0I0XListItem = new ListItem("SystemWindowsCoDup0I0XListItem", ListBoxlistPrinList);
                    fSystemWindowsCoDup0I0XListItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup0I0XListItem.UIMap.Index = 0;
                    fSystemWindowsCoDup0I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.ListBoxItem");
                    fSystemWindowsCoDup0I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fSystemWindowsCoDup0I0XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to ImageDup0Image
        /// </summary>
        public Image ImageDup0Image
        {
            get
            {
                if (null == fImageDup0Image)
                {
                    fImageDup0Image = new Image("ImageDup0Image", SystemWindowsCoDup0I0XListItem);
                    fImageDup0Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup0Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup0Image;
            }
        }

        /// <summary>
        /// Gets Reference to FactorydefaultsText
        /// </summary>
        public Text FactorydefaultsText
        {
            get
            {
                if (null == fFactorydefaultsText)
                {
                    fFactorydefaultsText = new Text("FactorydefaultsText", SystemWindowsCoDup0I0XListItem);
                    fFactorydefaultsText.UIMap.Scope = UIASeachScope.Children;
                    fFactorydefaultsText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Factory defaults");
                    fFactorydefaultsText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fFactorydefaultsText;
            }
        }

        /// <summary>
        /// Gets Reference to SystemWindowsCoDup1I1XListItem
        /// </summary>
        public ListItem SystemWindowsCoDup1I1XListItem
        {
            get
            {
                if (null == fSystemWindowsCoDup1I1XListItem)
                {
                    fSystemWindowsCoDup1I1XListItem = new ListItem("SystemWindowsCoDup1I1XListItem", ListBoxlistPrinList);
                    fSystemWindowsCoDup1I1XListItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup1I1XListItem.UIMap.Index = 1;
                    fSystemWindowsCoDup1I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.ListBoxItem");
                    fSystemWindowsCoDup1I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fSystemWindowsCoDup1I1XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to ImageDup1Image
        /// </summary>
        public Image ImageDup1Image
        {
            get
            {
                if (null == fImageDup1Image)
                {
                    fImageDup1Image = new Image("ImageDup1Image", SystemWindowsCoDup1I1XListItem);
                    fImageDup1Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup1Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup1Image;
            }
        }

        /// <summary>
        /// Gets Reference to GeneralEverydayText
        /// </summary>
        public Text GeneralEverydayText
        {
            get
            {
                if (null == fGeneralEverydayText)
                {
                    fGeneralEverydayText = new Text("GeneralEverydayText", SystemWindowsCoDup1I1XListItem);
                    fGeneralEverydayText.UIMap.Scope = UIASeachScope.Children;
                    fGeneralEverydayText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"General Everyday Printing");
                    fGeneralEverydayText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fGeneralEverydayText;
            }
        }

        /// <summary>
        /// Gets Reference to SystemWindowsCoDup2I2XListItem
        /// </summary>
        public ListItem SystemWindowsCoDup2I2XListItem
        {
            get
            {
                if (null == fSystemWindowsCoDup2I2XListItem)
                {
                    fSystemWindowsCoDup2I2XListItem = new ListItem("SystemWindowsCoDup2I2XListItem", ListBoxlistPrinList);
                    fSystemWindowsCoDup2I2XListItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup2I2XListItem.UIMap.Index = 2;
                    fSystemWindowsCoDup2I2XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.ListBoxItem");
                    fSystemWindowsCoDup2I2XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fSystemWindowsCoDup2I2XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to ImageDup2Image
        /// </summary>
        public Image ImageDup2Image
        {
            get
            {
                if (null == fImageDup2Image)
                {
                    fImageDup2Image = new Image("ImageDup2Image", SystemWindowsCoDup2I2XListItem);
                    fImageDup2Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup2Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup2Image;
            }
        }

        /// <summary>
        /// Gets Reference to EnvelopesTextBlText
        /// </summary>
        public Text EnvelopesTextBlText
        {
            get
            {
                if (null == fEnvelopesTextBlText)
                {
                    fEnvelopesTextBlText = new Text("EnvelopesTextBlText", SystemWindowsCoDup2I2XListItem);
                    fEnvelopesTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fEnvelopesTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Envelopes");
                    fEnvelopesTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fEnvelopesTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to SystemWindowsCoDup3I3XListItem
        /// </summary>
        public ListItem SystemWindowsCoDup3I3XListItem
        {
            get
            {
                if (null == fSystemWindowsCoDup3I3XListItem)
                {
                    fSystemWindowsCoDup3I3XListItem = new ListItem("SystemWindowsCoDup3I3XListItem", ListBoxlistPrinList);
                    fSystemWindowsCoDup3I3XListItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup3I3XListItem.UIMap.Index = 3;
                    fSystemWindowsCoDup3I3XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.ListBoxItem");
                    fSystemWindowsCoDup3I3XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fSystemWindowsCoDup3I3XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to ImageDup3Image
        /// </summary>
        public Image ImageDup3Image
        {
            get
            {
                if (null == fImageDup3Image)
                {
                    fImageDup3Image = new Image("ImageDup3Image", SystemWindowsCoDup3I3XListItem);
                    fImageDup3Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup3Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup3Image;
            }
        }

        /// <summary>
        /// Gets Reference to LabelsTextBlockText
        /// </summary>
        public Text LabelsTextBlockText
        {
            get
            {
                if (null == fLabelsTextBlockText)
                {
                    fLabelsTextBlockText = new Text("LabelsTextBlockText", SystemWindowsCoDup3I3XListItem);
                    fLabelsTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fLabelsTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Labels");
                    fLabelsTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fLabelsTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to SystemWindowsCoDup4I4XListItem
        /// </summary>
        public ListItem SystemWindowsCoDup4I4XListItem
        {
            get
            {
                if (null == fSystemWindowsCoDup4I4XListItem)
                {
                    fSystemWindowsCoDup4I4XListItem = new ListItem("SystemWindowsCoDup4I4XListItem", ListBoxlistPrinList);
                    fSystemWindowsCoDup4I4XListItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup4I4XListItem.UIMap.Index = 4;
                    fSystemWindowsCoDup4I4XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.ListBoxItem");
                    fSystemWindowsCoDup4I4XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fSystemWindowsCoDup4I4XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to ImageDup4Image
        /// </summary>
        public Image ImageDup4Image
        {
            get
            {
                if (null == fImageDup4Image)
                {
                    fImageDup4Image = new Image("ImageDup4Image", SystemWindowsCoDup4I4XListItem);
                    fImageDup4Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup4Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup4Image;
            }
        }

        /// <summary>
        /// Gets Reference to TransparenciesTText
        /// </summary>
        public Text TransparenciesTText
        {
            get
            {
                if (null == fTransparenciesTText)
                {
                    fTransparenciesTText = new Text("TransparenciesTText", SystemWindowsCoDup4I4XListItem);
                    fTransparenciesTText.UIMap.Scope = UIASeachScope.Children;
                    fTransparenciesTText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Transparencies");
                    fTransparenciesTText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fTransparenciesTText;
            }
        }

        /// <summary>
        /// Gets Reference to SystemWindowsCoDup5I5XListItem
        /// </summary>
        public ListItem SystemWindowsCoDup5I5XListItem
        {
            get
            {
                if (null == fSystemWindowsCoDup5I5XListItem)
                {
                    fSystemWindowsCoDup5I5XListItem = new ListItem("SystemWindowsCoDup5I5XListItem", ListBoxlistPrinList);
                    fSystemWindowsCoDup5I5XListItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup5I5XListItem.UIMap.Index = 5;
                    fSystemWindowsCoDup5I5XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.ListBoxItem");
                    fSystemWindowsCoDup5I5XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fSystemWindowsCoDup5I5XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to ImageDup5Image
        /// </summary>
        public Image ImageDup5Image
        {
            get
            {
                if (null == fImageDup5Image)
                {
                    fImageDup5Image = new Image("ImageDup5Image", SystemWindowsCoDup5I5XListItem);
                    fImageDup5Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup5Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup5Image;
            }
        }

        /// <summary>
        /// Gets Reference to EcoSMARTSettingText
        /// </summary>
        public Text EcoSMARTSettingText
        {
            get
            {
                if (null == fEcoSMARTSettingText)
                {
                    fEcoSMARTSettingText = new Text("EcoSMARTSettingText", SystemWindowsCoDup5I5XListItem);
                    fEcoSMARTSettingText.UIMap.Scope = UIASeachScope.Children;
                    fEcoSMARTSettingText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"EcoSMART Settings");
                    fEcoSMARTSettingText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fEcoSMARTSettingText;
            }
        }

        /// <summary>
        /// Gets Reference to SystemWindowsCoDup6I6XListItem
        /// </summary>
        public ListItem SystemWindowsCoDup6I6XListItem
        {
            get
            {
                if (null == fSystemWindowsCoDup6I6XListItem)
                {
                    fSystemWindowsCoDup6I6XListItem = new ListItem("SystemWindowsCoDup6I6XListItem", ListBoxlistPrinList);
                    fSystemWindowsCoDup6I6XListItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemWindowsCoDup6I6XListItem.UIMap.Index = 6;
                    fSystemWindowsCoDup6I6XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System.Windows.Controls.ListBoxItem");
                    fSystemWindowsCoDup6I6XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fSystemWindowsCoDup6I6XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to ImageDup6Image
        /// </summary>
        public Image ImageDup6Image
        {
            get
            {
                if (null == fImageDup6Image)
                {
                    fImageDup6Image = new Image("ImageDup6Image", SystemWindowsCoDup6I6XListItem);
                    fImageDup6Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup6Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup6Image;
            }
        }

        /// <summary>
        /// Gets Reference to BookletPrintingText
        /// </summary>
        public Text BookletPrintingText
        {
            get
            {
                if (null == fBookletPrintingText)
                {
                    fBookletPrintingText = new Text("BookletPrintingText", SystemWindowsCoDup6I6XListItem);
                    fBookletPrintingText.UIMap.Scope = UIASeachScope.Children;
                    fBookletPrintingText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Booklet Printing");
                    fBookletPrintingText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fBookletPrintingText;
            }
        }

        /// <summary>
        /// Gets Reference to SaveAsButtonbtnButton
        /// </summary>
        public Button SaveAsButtonbtnButton
        {
            get
            {
                if (null == fSaveAsButtonbtnButton)
                {
                    fSaveAsButtonbtnButton = new Button("SaveAsButtonbtnButton", PrintingShortcuTabItem);
                    fSaveAsButtonbtnButton.UIMap.Scope = UIASeachScope.Children;
                    fSaveAsButtonbtnButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Save As...");
                    fSaveAsButtonbtnButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"btnSettingsSaveAs");
                    fSaveAsButtonbtnButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fSaveAsButtonbtnButton;
            }
        }

        /// <summary>
        /// Gets Reference to ASaveAsTextBloText
        /// </summary>
        public Text ASaveAsTextBloText
        {
            get
            {
                if (null == fASaveAsTextBloText)
                {
                    fASaveAsTextBloText = new Text("ASaveAsTextBloText", SaveAsButtonbtnButton);
                    fASaveAsTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fASaveAsTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"_Save As...");
                    fASaveAsTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fASaveAsTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to DeleteButtonbtnButton
        /// </summary>
        public Button DeleteButtonbtnButton
        {
            get
            {
                if (null == fDeleteButtonbtnButton)
                {
                    fDeleteButtonbtnButton = new Button("DeleteButtonbtnButton", PrintingShortcuTabItem);
                    fDeleteButtonbtnButton.UIMap.Scope = UIASeachScope.Children;
                    fDeleteButtonbtnButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Delete");
                    fDeleteButtonbtnButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"btnSettingsDelete");
                    fDeleteButtonbtnButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fDeleteButtonbtnButton;
            }
        }

        /// <summary>
        /// Gets Reference to DeleteTextBlocText
        /// </summary>
        public Text DeleteTextBlocText
        {
            get
            {
                if (null == fDeleteTextBlocText)
                {
                    fDeleteTextBlocText = new Text("DeleteTextBlocText", DeleteButtonbtnButton);
                    fDeleteTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fDeleteTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"De_lete");
                    fDeleteTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fDeleteTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to ResetButtonbtnSButton
        /// </summary>
        public Button ResetButtonbtnSButton
        {
            get
            {
                if (null == fResetButtonbtnSButton)
                {
                    fResetButtonbtnSButton = new Button("ResetButtonbtnSButton", PrintingShortcuTabItem);
                    fResetButtonbtnSButton.UIMap.Scope = UIASeachScope.Children;
                    fResetButtonbtnSButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Reset");
                    fResetButtonbtnSButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"btnSettingsReset");
                    fResetButtonbtnSButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fResetButtonbtnSButton;
            }
        }

        /// <summary>
        /// Gets Reference to ResetTextBlockText
        /// </summary>
        public Text ResetTextBlockText
        {
            get
            {
                if (null == fResetTextBlockText)
                {
                    fResetTextBlockText = new Text("ResetTextBlockText", ResetButtonbtnSButton);
                    fResetTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fResetTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Rese_t");
                    fResetTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fResetTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to PapersizesTextlText
        /// </summary>
        public Text PapersizesTextlText
        {
            get
            {
                if (null == fPapersizesTextlText)
                {
                    fPapersizesTextlText = new Text("PapersizesTextlText", PrintingShortcuTabItem);
                    fPapersizesTextlText.UIMap.Scope = UIASeachScope.Children;
                    fPapersizesTextlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Paper sizes:");
                    fPapersizesTextlText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"lblSCMediaSize");
                    fPapersizesTextlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                }

                return fPapersizesTextlText;
            }
        }

        /// <summary>
        /// Gets Reference to PapersizesTextText
        /// </summary>
        public Text PapersizesTextText
        {
            get
            {
                if (null == fPapersizesTextText)
                {
                    fPapersizesTextText = new Text("PapersizesTextText", PapersizesTextlText);
                    fPapersizesTextText.UIMap.Scope = UIASeachScope.Children;
                    fPapersizesTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Paper si_zes:");
                    fPapersizesTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fPapersizesTextText;
            }
        }

        /// <summary>
        /// Gets Reference to A85x110inchesTeText
        /// </summary>
        public Text A85x110inchesTeText
        {
            get
            {
                if (null == fA85x110inchesTeText)
                {
                    fA85x110inchesTeText = new Text("A85x110inchesTeText", PrintingShortcuTabItem);
                    fA85x110inchesTeText.UIMap.Scope = UIASeachScope.Children;
                    fA85x110inchesTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"8.5 x 11.0 inches");
                    fA85x110inchesTeText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"txtSCPaperDim");
                    fA85x110inchesTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fA85x110inchesTeText;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboSCPaDup0ComboBox
        /// </summary>
        public ComboBox ComboBoxcboSCPaDup0ComboBox
        {
            get
            {
                if (null == fComboBoxcboSCPaDup0ComboBox)
                {
                    fComboBoxcboSCPaDup0ComboBox = new ComboBox("ComboBoxcboSCPaDup0ComboBox", PrintingShortcuTabItem);
                    fComboBoxcboSCPaDup0ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboSCPaDup0ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboSCPageMediaSize");
                    fComboBoxcboSCPaDup0ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                }

                return fComboBoxcboSCPaDup0ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to PapersourceTextText
        /// </summary>
        public Text PapersourceTextText
        {
            get
            {
                if (null == fPapersourceTextText)
                {
                    fPapersourceTextText = new Text("PapersourceTextText", PrintingShortcuTabItem);
                    fPapersourceTextText.UIMap.Scope = UIASeachScope.Children;
                    fPapersourceTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Paper source:");
                    fPapersourceTextText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"lblSCInputBin");
                    fPapersourceTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                }

                return fPapersourceTextText;
            }
        }

        /// <summary>
        /// Gets Reference to PapersourceTexText
        /// </summary>
        public Text PapersourceTexText
        {
            get
            {
                if (null == fPapersourceTexText)
                {
                    fPapersourceTexText = new Text("PapersourceTexText", PapersourceTextText);
                    fPapersourceTexText.UIMap.Scope = UIASeachScope.Children;
                    fPapersourceTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Paper so_urce:");
                    fPapersourceTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fPapersourceTexText;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboSCDoDup0ComboBox
        /// </summary>
        public ComboBox ComboBoxcboSCDoDup0ComboBox
        {
            get
            {
                if (null == fComboBoxcboSCDoDup0ComboBox)
                {
                    fComboBoxcboSCDoDup0ComboBox = new ComboBox("ComboBoxcboSCDoDup0ComboBox", PrintingShortcuTabItem);
                    fComboBoxcboSCDoDup0ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboSCDoDup0ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboSCDocumentInputBin");
                    fComboBoxcboSCDoDup0ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                }

                return fComboBoxcboSCDoDup0ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to PapertypeTextlbText
        /// </summary>
        public Text PapertypeTextlbText
        {
            get
            {
                if (null == fPapertypeTextlbText)
                {
                    fPapertypeTextlbText = new Text("PapertypeTextlbText", PrintingShortcuTabItem);
                    fPapertypeTextlbText.UIMap.Scope = UIASeachScope.Children;
                    fPapertypeTextlbText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Paper type:");
                    fPapertypeTextlbText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"lblSCPaperType");
                    fPapertypeTextlbText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                }

                return fPapertypeTextlbText;
            }
        }

        /// <summary>
        /// Gets Reference to PapertypeTextBText
        /// </summary>
        public Text PapertypeTextBText
        {
            get
            {
                if (null == fPapertypeTextBText)
                {
                    fPapertypeTextBText = new Text("PapertypeTextBText", PapertypeTextlbText);
                    fPapertypeTextBText.UIMap.Scope = UIASeachScope.Children;
                    fPapertypeTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Paper t_ype:");
                    fPapertypeTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fPapertypeTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to ListBoxlistSpecList
        /// </summary>
        public List ListBoxlistSpecList
        {
            get
            {
                if (null == fListBoxlistSpecList)
                {
                    fListBoxlistSpecList = new List("ListBoxlistSpecList", PaperOptionsGroGroup);
                    fListBoxlistSpecList.UIMap.Scope = UIASeachScope.Children;
                    fListBoxlistSpecList.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"listSpecialPages");
                    fListBoxlistSpecList.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBox");
                }

                return fListBoxlistSpecList;
            }
        }

        /// <summary>
        /// Gets Reference to FrontCoverNoCovListItem
        /// </summary>
        public ListItem FrontCoverNoCovListItem
        {
            get
            {
                if (null == fFrontCoverNoCovListItem)
                {
                    fFrontCoverNoCovListItem = new ListItem("FrontCoverNoCovListItem", ListBoxlistSpecList);
                    fFrontCoverNoCovListItem.UIMap.Scope = UIASeachScope.Children;
                    fFrontCoverNoCovListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Front Cover: No Covers");
                    fFrontCoverNoCovListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fFrontCoverNoCovListItem;
            }
        }

        /// <summary>
        /// Gets Reference to FrontCoverNoCovText
        /// </summary>
        public Text FrontCoverNoCovText
        {
            get
            {
                if (null == fFrontCoverNoCovText)
                {
                    fFrontCoverNoCovText = new Text("FrontCoverNoCovText", FrontCoverNoCovListItem);
                    fFrontCoverNoCovText.UIMap.Scope = UIASeachScope.Children;
                    fFrontCoverNoCovText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Front Cover: No Covers");
                    fFrontCoverNoCovText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fFrontCoverNoCovText;
            }
        }

        /// <summary>
        /// Gets Reference to BackCoverNoCoveListItem
        /// </summary>
        public ListItem BackCoverNoCoveListItem
        {
            get
            {
                if (null == fBackCoverNoCoveListItem)
                {
                    fBackCoverNoCoveListItem = new ListItem("BackCoverNoCoveListItem", ListBoxlistSpecList);
                    fBackCoverNoCoveListItem.UIMap.Scope = UIASeachScope.Children;
                    fBackCoverNoCoveListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Back Cover: No Covers");
                    fBackCoverNoCoveListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fBackCoverNoCoveListItem;
            }
        }

        /// <summary>
        /// Gets Reference to BackCoverNoCoveText
        /// </summary>
        public Text BackCoverNoCoveText
        {
            get
            {
                if (null == fBackCoverNoCoveText)
                {
                    fBackCoverNoCoveText = new Text("BackCoverNoCoveText", BackCoverNoCoveListItem);
                    fBackCoverNoCoveText.UIMap.Scope = UIASeachScope.Children;
                    fBackCoverNoCoveText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Back Cover: No Covers");
                    fBackCoverNoCoveText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fBackCoverNoCoveText;
            }
        }

        /// <summary>
        /// Gets Reference to PrintpagesondifListItem
        /// </summary>
        public ListItem PrintpagesondifListItem
        {
            get
            {
                if (null == fPrintpagesondifListItem)
                {
                    fPrintpagesondifListItem = new ListItem("PrintpagesondifListItem", ListBoxlistSpecList);
                    fPrintpagesondifListItem.UIMap.Scope = UIASeachScope.Children;
                    fPrintpagesondifListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Print pages on different paper: None");
                    fPrintpagesondifListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fPrintpagesondifListItem;
            }
        }

        /// <summary>
        /// Gets Reference to PrintpagesondifText
        /// </summary>
        public Text PrintpagesondifText
        {
            get
            {
                if (null == fPrintpagesondifText)
                {
                    fPrintpagesondifText = new Text("PrintpagesondifText", PrintpagesondifListItem);
                    fPrintpagesondifText.UIMap.Scope = UIASeachScope.Children;
                    fPrintpagesondifText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Print pages on different paper: None");
                    fPrintpagesondifText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fPrintpagesondifText;
            }
        }

        /// <summary>
        /// Gets Reference to InsertblankorprListItem
        /// </summary>
        public ListItem InsertblankorprListItem
        {
            get
            {
                if (null == fInsertblankorprListItem)
                {
                    fInsertblankorprListItem = new ListItem("InsertblankorprListItem", ListBoxlistSpecList);
                    fInsertblankorprListItem.UIMap.Scope = UIASeachScope.Children;
                    fInsertblankorprListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Insert blank or preprinted sheets: None");
                    fInsertblankorprListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fInsertblankorprListItem;
            }
        }

        /// <summary>
        /// Gets Reference to InsertblankorprText
        /// </summary>
        public Text InsertblankorprText
        {
            get
            {
                if (null == fInsertblankorprText)
                {
                    fInsertblankorprText = new Text("InsertblankorprText", InsertblankorprListItem);
                    fInsertblankorprText.UIMap.Scope = UIASeachScope.Children;
                    fInsertblankorprText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Insert blank or preprinted sheets: None");
                    fInsertblankorprText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fInsertblankorprText;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboSCPaDup1ComboBox
        /// </summary>
        public ComboBox ComboBoxcboSCPaDup1ComboBox
        {
            get
            {
                if (null == fComboBoxcboSCPaDup1ComboBox)
                {
                    fComboBoxcboSCPaDup1ComboBox = new ComboBox("ComboBoxcboSCPaDup1ComboBox", PrintingShortcuTabItem);
                    fComboBoxcboSCPaDup1ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboSCPaDup1ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboSCPageMediaType");
                    fComboBoxcboSCPaDup1ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                }

                return fComboBoxcboSCPaDup1ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to PrintonbothsideText
        /// </summary>
        public Text PrintonbothsideText
        {
            get
            {
                if (null == fPrintonbothsideText)
                {
                    fPrintonbothsideText = new Text("PrintonbothsideText", PrintingShortcuTabItem);
                    fPrintonbothsideText.UIMap.Scope = UIASeachScope.Children;
                    fPrintonbothsideText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Print on both sides:");
                    fPrintonbothsideText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"lblSCPrintOnBothSides");
                    fPrintonbothsideText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                }

                return fPrintonbothsideText;
            }
        }

        /// <summary>
        /// Gets Reference to PrintonbothsidText
        /// </summary>
        public Text PrintonbothsidText
        {
            get
            {
                if (null == fPrintonbothsidText)
                {
                    fPrintonbothsidText = new Text("PrintonbothsidText", PrintonbothsideText);
                    fPrintonbothsidText.UIMap.Scope = UIASeachScope.Children;
                    fPrintonbothsidText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Print on both sid_es:");
                    fPrintonbothsidText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fPrintonbothsidText;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboSCPrDup0ComboBox
        /// </summary>
        public ComboBox ComboBoxcboSCPrDup0ComboBox
        {
            get
            {
                if (null == fComboBoxcboSCPrDup0ComboBox)
                {
                    fComboBoxcboSCPrDup0ComboBox = new ComboBox("ComboBoxcboSCPrDup0ComboBox", PrintingShortcuTabItem);
                    fComboBoxcboSCPrDup0ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboSCPrDup0ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboSCPrintOnBothSides");
                    fComboBoxcboSCPrDup0ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                }

                return fComboBoxcboSCPrDup0ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to PagespersheetTeText
        /// </summary>
        public Text PagespersheetTeText
        {
            get
            {
                if (null == fPagespersheetTeText)
                {
                    fPagespersheetTeText = new Text("PagespersheetTeText", PrintingShortcuTabItem);
                    fPagespersheetTeText.UIMap.Scope = UIASeachScope.Children;
                    fPagespersheetTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Pages per sheet:");
                    fPagespersheetTeText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"lblSCPagesPerSheet");
                    fPagespersheetTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                }

                return fPagespersheetTeText;
            }
        }

        /// <summary>
        /// Gets Reference to PagespersheetTText
        /// </summary>
        public Text PagespersheetTText
        {
            get
            {
                if (null == fPagespersheetTText)
                {
                    fPagespersheetTText = new Text("PagespersheetTText", PagespersheetTeText);
                    fPagespersheetTText.UIMap.Scope = UIASeachScope.Children;
                    fPagespersheetTText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Pages _per sheet:");
                    fPagespersheetTText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fPagespersheetTText;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboSCDoDup1ComboBox
        /// </summary>
        public ComboBox ComboBoxcboSCDoDup1ComboBox
        {
            get
            {
                if (null == fComboBoxcboSCDoDup1ComboBox)
                {
                    fComboBoxcboSCDoDup1ComboBox = new ComboBox("ComboBoxcboSCDoDup1ComboBox", PrintingShortcuTabItem);
                    fComboBoxcboSCDoDup1ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboSCDoDup1ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboSCDocumentNUp");
                    fComboBoxcboSCDoDup1ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                }

                return fComboBoxcboSCDoDup1ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to BookletLayoutTeText
        /// </summary>
        public Text BookletLayoutTeText
        {
            get
            {
                if (null == fBookletLayoutTeText)
                {
                    fBookletLayoutTeText = new Text("BookletLayoutTeText", PrintingShortcuTabItem);
                    fBookletLayoutTeText.UIMap.Scope = UIASeachScope.Children;
                    fBookletLayoutTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Booklet Layout:");
                    fBookletLayoutTeText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"lblSCBookletLayout");
                    fBookletLayoutTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                }

                return fBookletLayoutTeText;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboSCBoComboBox
        /// </summary>
        public ComboBox ComboBoxcboSCBoComboBox
        {
            get
            {
                if (null == fComboBoxcboSCBoComboBox)
                {
                    fComboBoxcboSCBoComboBox = new ComboBox("ComboBoxcboSCBoComboBox", PrintingShortcuTabItem);
                    fComboBoxcboSCBoComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboSCBoComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboSCBookletLayout");
                    fComboBoxcboSCBoComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                }

                return fComboBoxcboSCBoComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to ColorthemeTextlText
        /// </summary>
        public Text ColorthemeTextlText
        {
            get
            {
                if (null == fColorthemeTextlText)
                {
                    fColorthemeTextlText = new Text("ColorthemeTextlText", PrintingShortcuTabItem);
                    fColorthemeTextlText.UIMap.Scope = UIASeachScope.Children;
                    fColorthemeTextlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"+Color theme:");
                    fColorthemeTextlText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"lblSCRGBColor");
                    fColorthemeTextlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                }

                return fColorthemeTextlText;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboSCRGComboBox
        /// </summary>
        public ComboBox ComboBoxcboSCRGComboBox
        {
            get
            {
                if (null == fComboBoxcboSCRGComboBox)
                {
                    fComboBoxcboSCRGComboBox = new ComboBox("ComboBoxcboSCRGComboBox", PrintingShortcuTabItem);
                    fComboBoxcboSCRGComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboSCRGComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboSCRGBColor");
                    fComboBoxcboSCRGComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                }

                return fComboBoxcboSCRGComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to PrintinGrayscalText
        /// </summary>
        public Text PrintinGrayscalText
        {
            get
            {
                if (null == fPrintinGrayscalText)
                {
                    fPrintinGrayscalText = new Text("PrintinGrayscalText", PrintingShortcuTabItem);
                    fPrintinGrayscalText.UIMap.Scope = UIASeachScope.Children;
                    fPrintinGrayscalText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Print in Grayscale");
                    fPrintinGrayscalText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"lblSCPrintInGrayScale");
                    fPrintinGrayscalText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                }

                return fPrintinGrayscalText;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboSCPrDup1ComboBox
        /// </summary>
        public ComboBox ComboBoxcboSCPrDup1ComboBox
        {
            get
            {
                if (null == fComboBoxcboSCPrDup1ComboBox)
                {
                    fComboBoxcboSCPrDup1ComboBox = new ComboBox("ComboBoxcboSCPrDup1ComboBox", PrintingShortcuTabItem);
                    fComboBoxcboSCPrDup1ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboSCPrDup1ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboSCPrintInGrayscale");
                    fComboBoxcboSCPrDup1ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                }

                return fComboBoxcboSCPrDup1ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to PaperQualityTabTabItem
        /// </summary>
        public TabItem PaperQualityTabTabItem
        {
            get
            {
                if (null == fPaperQualityTabTabItem)
                {
                    fPaperQualityTabTabItem = new TabItem("PaperQualityTabTabItem", TabControlTab);
                    fPaperQualityTabTabItem.UIMap.Scope = UIASeachScope.Children;
                    fPaperQualityTabTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Paper/Quality");
                    fPaperQualityTabTabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PaperTab");
                    fPaperQualityTabTabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                }

                return fPaperQualityTabTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to PaperQualityTexText
        /// </summary>
        public Text PaperQualityTexText
        {
            get
            {
                if (null == fPaperQualityTexText)
                {
                    fPaperQualityTexText = new Text("PaperQualityTexText", PaperQualityTabTabItem);
                    fPaperQualityTexText.UIMap.Scope = UIASeachScope.Children;
                    fPaperQualityTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Paper/Quality");
                    fPaperQualityTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fPaperQualityTexText;
            }
        }

        /// <summary>
        /// Gets Reference to EffectsTabItemETabItem
        /// </summary>
        public TabItem EffectsTabItemETabItem
        {
            get
            {
                if (null == fEffectsTabItemETabItem)
                {
                    fEffectsTabItemETabItem = new TabItem("EffectsTabItemETabItem", TabControlTab);
                    fEffectsTabItemETabItem.UIMap.Scope = UIASeachScope.Children;
                    fEffectsTabItemETabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Effects");
                    fEffectsTabItemETabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"EffectTab");
                    fEffectsTabItemETabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                }

                return fEffectsTabItemETabItem;
            }
        }

        /// <summary>
        /// Gets Reference to EffectsTextBlocText
        /// </summary>
        public Text EffectsTextBlocText
        {
            get
            {
                if (null == fEffectsTextBlocText)
                {
                    fEffectsTextBlocText = new Text("EffectsTextBlocText", EffectsTabItemETabItem);
                    fEffectsTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fEffectsTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Effects");
                    fEffectsTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fEffectsTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to FinishingTabIteTabItem
        /// </summary>
        public TabItem FinishingTabIteTabItem
        {
            get
            {
                if (null == fFinishingTabIteTabItem)
                {
                    fFinishingTabIteTabItem = new TabItem("FinishingTabIteTabItem", TabControlTab);
                    fFinishingTabIteTabItem.UIMap.Scope = UIASeachScope.Children;
                    fFinishingTabIteTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Finishing");
                    fFinishingTabIteTabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"FinishingTab");
                    fFinishingTabIteTabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                }

                return fFinishingTabIteTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to FinishingTextBlText
        /// </summary>
        public Text FinishingTextBlText
        {
            get
            {
                if (null == fFinishingTextBlText)
                {
                    fFinishingTextBlText = new Text("FinishingTextBlText", FinishingTabIteTabItem);
                    fFinishingTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fFinishingTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Finishing");
                    fFinishingTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fFinishingTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to OutputTabItemOuTabItem
        /// </summary>
        public TabItem OutputTabItemOuTabItem
        {
            get
            {
                if (null == fOutputTabItemOuTabItem)
                {
                    fOutputTabItemOuTabItem = new TabItem("OutputTabItemOuTabItem", TabControlTab);
                    fOutputTabItemOuTabItem.UIMap.Scope = UIASeachScope.Children;
                    fOutputTabItemOuTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Output");
                    fOutputTabItemOuTabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"OutputTab");
                    fOutputTabItemOuTabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                }

                return fOutputTabItemOuTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to OutputTextBlockText
        /// </summary>
        public Text OutputTextBlockText
        {
            get
            {
                if (null == fOutputTextBlockText)
                {
                    fOutputTextBlockText = new Text("OutputTextBlockText", OutputTabItemOuTabItem);
                    fOutputTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fOutputTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Output");
                    fOutputTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fOutputTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to JobStorageTabItTabItem
        /// </summary>
        public TabItem JobStorageTabItTabItem
        {
            get
            {
                if (null == fJobStorageTabItTabItem)
                {
                    fJobStorageTabItTabItem = new TabItem("JobStorageTabItTabItem", TabControlTab);
                    fJobStorageTabItTabItem.UIMap.Scope = UIASeachScope.Children;
                    fJobStorageTabItTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Job Storage");
                    fJobStorageTabItTabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"JobStorageTab");
                    fJobStorageTabItTabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                }

                return fJobStorageTabItTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to JobStorageTextBText
        /// </summary>
        public Text JobStorageTextBText
        {
            get
            {
                if (null == fJobStorageTextBText)
                {
                    fJobStorageTextBText = new Text("JobStorageTextBText", JobStorageTabItTabItem);
                    fJobStorageTextBText.UIMap.Scope = UIASeachScope.Children;
                    fJobStorageTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Job Storage");
                    fJobStorageTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fJobStorageTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to ColorTabItemColTabItem
        /// </summary>
        public TabItem ColorTabItemColTabItem
        {
            get
            {
                if (null == fColorTabItemColTabItem)
                {
                    fColorTabItemColTabItem = new TabItem("ColorTabItemColTabItem", TabControlTab);
                    fColorTabItemColTabItem.UIMap.Scope = UIASeachScope.Children;
                    fColorTabItemColTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Color");
                    fColorTabItemColTabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ColorTab");
                    fColorTabItemColTabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                }

                return fColorTabItemColTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to AdvancedTabItemTabItem
        /// </summary>
        public TabItem AdvancedTabItemTabItem
        {
            get
            {
                if (null == fAdvancedTabItemTabItem)
                {
                    fAdvancedTabItemTabItem = new TabItem("AdvancedTabItemTabItem", TabControlTab);
                    fAdvancedTabItemTabItem.UIMap.Scope = UIASeachScope.Children;
                    fAdvancedTabItemTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Advanced");
                    fAdvancedTabItemTabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AdvancedTab");
                    fAdvancedTabItemTabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                }

                return fAdvancedTabItemTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to AdvancedTextBloText
        /// </summary>
        public Text AdvancedTextBloText
        {
            get
            {
                if (null == fAdvancedTextBloText)
                {
                    fAdvancedTextBloText = new Text("AdvancedTextBloText", AdvancedTabItemTabItem);
                    fAdvancedTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fAdvancedTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Advanced");
                    fAdvancedTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fAdvancedTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to OthersTabItemOtTabItem
        /// </summary>
        public TabItem OthersTabItemOtTabItem
        {
            get
            {
                if (null == fOthersTabItemOtTabItem)
                {
                    fOthersTabItemOtTabItem = new TabItem("OthersTabItemOtTabItem", TabControlTab);
                    fOthersTabItemOtTabItem.UIMap.Scope = UIASeachScope.Children;
                    fOthersTabItemOtTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"+Others");
                    fOthersTabItemOtTabItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"OtherTab");
                    fOthersTabItemOtTabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TabItem");
                }

                return fOthersTabItemOtTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to ImageDup7Image
        /// </summary>
        public Image ImageDup7Image
        {
            get
            {
                if (null == fImageDup7Image)
                {
                    fImageDup7Image = new Image("ImageDup7Image", DriverWindow);
                    fImageDup7Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup7Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup7Image;
            }
        }

        /// <summary>
        /// Gets Reference to AboutButtonAbouButton
        /// </summary>
        public Button AboutButtonAbouButton
        {
            get
            {
                if (null == fAboutButtonAbouButton)
                {
                    fAboutButtonAbouButton = new Button("AboutButtonAbouButton", DriverWindow);
                    fAboutButtonAbouButton.UIMap.Scope = UIASeachScope.Children;
                    fAboutButtonAbouButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"About...");
                    fAboutButtonAbouButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AboutButton");
                    fAboutButtonAbouButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fAboutButtonAbouButton;
            }
        }

        /// <summary>
        /// Gets Reference to AboutTextBlockText
        /// </summary>
        public Text AboutTextBlockText
        {
            get
            {
                if (null == fAboutTextBlockText)
                {
                    fAboutTextBlockText = new Text("AboutTextBlockText", AboutButtonAbouButton);
                    fAboutTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fAboutTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"A_bout...");
                    fAboutTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fAboutTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to HelpButtonHelpButton
        /// </summary>
        public Button HelpButtonHelpButton
        {
            get
            {
                if (null == fHelpButtonHelpButton)
                {
                    fHelpButtonHelpButton = new Button("HelpButtonHelpButton", DriverWindow);
                    fHelpButtonHelpButton.UIMap.Scope = UIASeachScope.Children;
                    fHelpButtonHelpButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                    fHelpButtonHelpButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HelpButton");
                    fHelpButtonHelpButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fHelpButtonHelpButton;
            }
        }

        /// <summary>
        /// Gets Reference to AHelpTextBlockText
        /// </summary>
        public Text AHelpTextBlockText
        {
            get
            {
                if (null == fAHelpTextBlockText)
                {
                    fAHelpTextBlockText = new Text("AHelpTextBlockText", HelpButtonHelpButton);
                    fAHelpTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fAHelpTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"_Help");
                    fAHelpTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fAHelpTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to OKButtonOkButton
        /// </summary>
        public Button OKButtonOkButton
        {
            get
            {
                if (null == fOKButtonOkButton)
                {
                    fOKButtonOkButton = new Button("OKButtonOkButton", DriverWindow);
                    fOKButtonOkButton.UIMap.Scope = UIASeachScope.Children;
                    fOKButtonOkButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                    fOKButtonOkButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"OkButton");
                    fOKButtonOkButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fOKButtonOkButton;
            }
        }

        /// <summary>
        /// Gets Reference to AOKTextBlockText
        /// </summary>
        public Text AOKTextBlockText
        {
            get
            {
                if (null == fAOKTextBlockText)
                {
                    fAOKTextBlockText = new Text("AOKTextBlockText", OKButtonOkButton);
                    fAOKTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fAOKTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"_OK");
                    fAOKTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fAOKTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to CancelButtonCanDup1Button
        /// </summary>
        public Button CancelButtonCanDup1Button
        {
            get
            {
                if (null == fCancelButtonCanDup1Button)
                {
                    fCancelButtonCanDup1Button = new Button("CancelButtonCanDup1Button", DriverWindow);
                    fCancelButtonCanDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButtonCanDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                    fCancelButtonCanDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"CancelButton");
                    fCancelButtonCanDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fCancelButtonCanDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to ACancelTextBloText
        /// </summary>
        public Text ACancelTextBloText
        {
            get
            {
                if (null == fACancelTextBloText)
                {
                    fACancelTextBloText = new Text("ACancelTextBloText", CancelButtonCanDup1Button);
                    fACancelTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fACancelTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"_Cancel");
                    fACancelTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fACancelTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to ATextBlocktxtBoText
        /// </summary>
        public Text ATextBlocktxtBoText
        {
            get
            {
                if (null == fATextBlocktxtBoText)
                {
                    fATextBlocktxtBoText = new Text("ATextBlocktxtBoText", DriverWindow);
                    fATextBlocktxtBoText.UIMap.Scope = UIASeachScope.Children;
                    fATextBlocktxtBoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"A");
                    fATextBlocktxtBoText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"txtBookletUp");
                    fATextBlocktxtBoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fATextBlocktxtBoText;
            }
        }

        /// <summary>
        /// Gets Reference to BTextBlocktxtBoText
        /// </summary>
        public Text BTextBlocktxtBoText
        {
            get
            {
                if (null == fBTextBlocktxtBoText)
                {
                    fBTextBlocktxtBoText = new Text("BTextBlocktxtBoText", DriverWindow);
                    fBTextBlocktxtBoText.UIMap.Scope = UIASeachScope.Children;
                    fBTextBlocktxtBoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"B");
                    fBTextBlocktxtBoText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"txtBookletDown");
                    fBTextBlocktxtBoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fBTextBlocktxtBoText;
            }
        }

        /// <summary>
        /// Gets Reference to aTextBlocktxtBoText
        /// </summary>
        public Text aTextBlocktxtBoText
        {
            get
            {
                if (null == faTextBlocktxtBoText)
                {
                    faTextBlocktxtBoText = new Text("aTextBlocktxtBoText", DriverWindow);
                    faTextBlocktxtBoText.UIMap.Scope = UIASeachScope.Children;
                    faTextBlocktxtBoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"a");
                    faTextBlocktxtBoText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"txtBookletLeft");
                    faTextBlocktxtBoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return faTextBlocktxtBoText;
            }
        }

        /// <summary>
        /// Gets Reference to bTextBlocktxtBoText
        /// </summary>
        public Text bTextBlocktxtBoText
        {
            get
            {
                if (null == fbTextBlocktxtBoText)
                {
                    fbTextBlocktxtBoText = new Text("bTextBlocktxtBoText", DriverWindow);
                    fbTextBlocktxtBoText.UIMap.Scope = UIASeachScope.Children;
                    fbTextBlocktxtBoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"b");
                    fbTextBlocktxtBoText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"txtBookletRight");
                    fbTextBlocktxtBoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fbTextBlocktxtBoText;
            }
        }

        /// <summary>
        /// Gets Reference to ETextBlocktxtPrText
        /// </summary>
        public Text ETextBlocktxtPrText
        {
            get
            {
                if (null == fETextBlocktxtPrText)
                {
                    fETextBlocktxtPrText = new Text("ETextBlocktxtPrText", DriverWindow);
                    fETextBlocktxtPrText.UIMap.Scope = UIASeachScope.Children;
                    fETextBlocktxtPrText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"E");
                    fETextBlocktxtPrText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"txtPreviewCaption");
                    fETextBlocktxtPrText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fETextBlocktxtPrText;
            }
        }

        /// <summary>
        /// Gets Reference to TextBlockdescStText
        /// </summary>
        public Text TextBlockdescStText
        {
            get
            {
                if (null == fTextBlockdescStText)
                {
                    fTextBlockdescStText = new Text("TextBlockdescStText", DriverWindow);
                    fTextBlockdescStText.UIMap.Scope = UIASeachScope.Children;
                    fTextBlockdescStText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"descStr2");
                    fTextBlockdescStText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fTextBlockdescStText;
            }
        }

        /// <summary>
        /// Gets Reference to UnknownTextBlocText
        /// </summary>
        public Text UnknownTextBlocText
        {
            get
            {
                if (null == fUnknownTextBlocText)
                {
                    fUnknownTextBlocText = new Text("UnknownTextBlocText", DriverWindow);
                    fUnknownTextBlocText.UIMap.Scope = UIASeachScope.Children;
                    fUnknownTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"+Unknown");
                    fUnknownTextBlocText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fUnknownTextBlocText;
            }
        }

        /// <summary>
        /// Gets Reference to TextBlockDup0I0XText
        /// </summary>
        public Text TextBlockDup0I0XText
        {
            get
            {
                if (null == fTextBlockDup0I0XText)
                {
                    fTextBlockDup0I0XText = new Text("TextBlockDup0I0XText", DriverWindow);
                    fTextBlockDup0I0XText.UIMap.Scope = UIASeachScope.Children;
                    fTextBlockDup0I0XText.UIMap.Index = 7;
                    fTextBlockDup0I0XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fTextBlockDup0I0XText;
            }
        }

        /// <summary>
        /// Gets Reference to TextBlockDup1I1XText
        /// </summary>
        public Text TextBlockDup1I1XText
        {
            get
            {
                if (null == fTextBlockDup1I1XText)
                {
                    fTextBlockDup1I1XText = new Text("TextBlockDup1I1XText", DriverWindow);
                    fTextBlockDup1I1XText.UIMap.Scope = UIASeachScope.Children;
                    fTextBlockDup1I1XText.UIMap.Index = 8;
                    fTextBlockDup1I1XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fTextBlockDup1I1XText;
            }
        }

        /// <summary>
        /// Gets Reference to TextBlockDup2I2XText
        /// </summary>
        public Text TextBlockDup2I2XText
        {
            get
            {
                if (null == fTextBlockDup2I2XText)
                {
                    fTextBlockDup2I2XText = new Text("TextBlockDup2I2XText", DriverWindow);
                    fTextBlockDup2I2XText.UIMap.Scope = UIASeachScope.Children;
                    fTextBlockDup2I2XText.UIMap.Index = 9;
                    fTextBlockDup2I2XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fTextBlockDup2I2XText;
            }
        }

        /// <summary>
        /// Gets Reference to TextBlockDup3I3XText
        /// </summary>
        public Text TextBlockDup3I3XText
        {
            get
            {
                if (null == fTextBlockDup3I3XText)
                {
                    fTextBlockDup3I3XText = new Text("TextBlockDup3I3XText", DriverWindow);
                    fTextBlockDup3I3XText.UIMap.Scope = UIASeachScope.Children;
                    fTextBlockDup3I3XText.UIMap.Index = 10;
                    fTextBlockDup3I3XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fTextBlockDup3I3XText;
            }
        }

        /// <summary>
        /// Gets Reference to TextBlockDup4I4XText
        /// </summary>
        public Text TextBlockDup4I4XText
        {
            get
            {
                if (null == fTextBlockDup4I4XText)
                {
                    fTextBlockDup4I4XText = new Text("TextBlockDup4I4XText", DriverWindow);
                    fTextBlockDup4I4XText.UIMap.Scope = UIASeachScope.Children;
                    fTextBlockDup4I4XText.UIMap.Index = 11;
                    fTextBlockDup4I4XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fTextBlockDup4I4XText;
            }
        }

        /// <summary>
        /// Gets Reference to TextBlockDup5I5XText
        /// </summary>
        public Text TextBlockDup5I5XText
        {
            get
            {
                if (null == fTextBlockDup5I5XText)
                {
                    fTextBlockDup5I5XText = new Text("TextBlockDup5I5XText", DriverWindow);
                    fTextBlockDup5I5XText.UIMap.Scope = UIASeachScope.Children;
                    fTextBlockDup5I5XText.UIMap.Index = 12;
                    fTextBlockDup5I5XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fTextBlockDup5I5XText;
            }
        }

        /// <summary>
        /// Gets Reference to TextBlockDup6I6XText
        /// </summary>
        public Text TextBlockDup6I6XText
        {
            get
            {
                if (null == fTextBlockDup6I6XText)
                {
                    fTextBlockDup6I6XText = new Text("TextBlockDup6I6XText", DriverWindow);
                    fTextBlockDup6I6XText.UIMap.Scope = UIASeachScope.Children;
                    fTextBlockDup6I6XText.UIMap.Index = 13;
                    fTextBlockDup6I6XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fTextBlockDup6I6XText;
            }
        }

        /// <summary>
        /// Gets Reference to ManualDuplexInsText
        /// </summary>
        public Text ManualDuplexInsText
        {
            get
            {
                if (null == fManualDuplexInsText)
                {
                    fManualDuplexInsText = new Text("ManualDuplexInsText", DriverWindow);
                    fManualDuplexInsText.UIMap.Scope = UIASeachScope.Children;
                    fManualDuplexInsText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Manual Duplex Instructions");
                    fManualDuplexInsText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"txtManualDuplex");
                    fManualDuplexInsText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fManualDuplexInsText;
            }
        }

        /// <summary>
        /// Gets Reference to ActualsizeRadioRadioButton
        /// </summary>
        public RadioButton ActualsizeRadioRadioButton
        {
            get
            {
                if (null == fActualsizeRadioRadioButton)
                {
                    fActualsizeRadioRadioButton = new RadioButton("ActualsizeRadioRadioButton", ResizingOptionsGroup);
                    fActualsizeRadioRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fActualsizeRadioRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"rdoZoomNone");
                    fActualsizeRadioRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RadioButton");
                    fActualsizeRadioRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Actual size");
                }

                return fActualsizeRadioRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to ResizingOptionsGroup
        /// </summary>
        public Group ResizingOptionsGroup
        {
            get
            {
                if (null == fResizingOptionsGroup)
                {
                    fResizingOptionsGroup = new Group("ResizingOptionsGroup", EffectsTabItemETabItem);
                    fResizingOptionsGroup.UIMap.Scope = UIASeachScope.Children;
                    fResizingOptionsGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"groupZoom");
                    fResizingOptionsGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fResizingOptionsGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Resizing Options");
                }

                return fResizingOptionsGroup;
            }
        }

        /// <summary>
        /// Gets Reference to PrintdocumentonRadioButton
        /// </summary>
        public RadioButton PrintdocumentonRadioButton
        {
            get
            {
                if (null == fPrintdocumentonRadioButton)
                {
                    fPrintdocumentonRadioButton = new RadioButton("PrintdocumentonRadioButton", ResizingOptionsGroup);
                    fPrintdocumentonRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fPrintdocumentonRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"rdoPrintDocumentOn");
                    fPrintdocumentonRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RadioButton");
                    fPrintdocumentonRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Print document on:");
                }

                return fPrintdocumentonRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboPrinComboBox
        /// </summary>
        public ComboBox ComboBoxcboPrinComboBox
        {
            get
            {
                if (null == fComboBoxcboPrinComboBox)
                {
                    fComboBoxcboPrinComboBox = new ComboBox("ComboBoxcboPrinComboBox", ResizingOptionsGroup);
                    fComboBoxcboPrinComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboPrinComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboPrintDocumentOn");
                    fComboBoxcboPrinComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                }

                return fComboBoxcboPrinComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to ScaletofitCheckCheckBox
        /// </summary>
        public CheckBox ScaletofitCheckCheckBox
        {
            get
            {
                if (null == fScaletofitCheckCheckBox)
                {
                    fScaletofitCheckCheckBox = new CheckBox("ScaletofitCheckCheckBox", ResizingOptionsGroup);
                    fScaletofitCheckCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fScaletofitCheckCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"chkScaleToFit");
                    fScaletofitCheckCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fScaletofitCheckCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Scale to fit");
                }

                return fScaletofitCheckCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to ofactualsizeRadRadioButton
        /// </summary>
        public RadioButton ofactualsizeRadRadioButton
        {
            get
            {
                if (null == fofactualsizeRadRadioButton)
                {
                    fofactualsizeRadRadioButton = new RadioButton("ofactualsizeRadRadioButton", ResizingOptionsGroup);
                    fofactualsizeRadRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fofactualsizeRadRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"rdoZoomPercentage");
                    fofactualsizeRadRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RadioButton");
                    fofactualsizeRadRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"% of actual size:");
                }

                return fofactualsizeRadRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to TextBoxedZoomEdit
        /// </summary>
        public Edit TextBoxedZoomEdit
        {
            get
            {
                if (null == fTextBoxedZoomEdit)
                {
                    fTextBoxedZoomEdit = new Edit("TextBoxedZoomEdit", ResizingOptionsGroup);
                    fTextBoxedZoomEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxedZoomEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"edZoom");
                    fTextBoxedZoomEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                }

                return fTextBoxedZoomEdit;
            }
        }

        /// <summary>
        /// Gets Reference to WatermarksGroupGroup
        /// </summary>
        public Group WatermarksGroupGroup
        {
            get
            {
                if (null == fWatermarksGroupGroup)
                {
                    fWatermarksGroupGroup = new Group("WatermarksGroupGroup", EffectsTabItemETabItem);
                    fWatermarksGroupGroup.UIMap.Scope = UIASeachScope.Children;
                    fWatermarksGroupGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"groupPageWatermark");
                    fWatermarksGroupGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fWatermarksGroupGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Watermarks");
                }

                return fWatermarksGroupGroup;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboWateComboBox
        /// </summary>
        public ComboBox ComboBoxcboWateComboBox
        {
            get
            {
                if (null == fComboBoxcboWateComboBox)
                {
                    fComboBoxcboWateComboBox = new ComboBox("ComboBoxcboWateComboBox", WatermarksGroupGroup);
                    fComboBoxcboWateComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboWateComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboWatermarks");
                    fComboBoxcboWateComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                }

                return fComboBoxcboWateComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to FirstpageonlyChCheckBox
        /// </summary>
        public CheckBox FirstpageonlyChCheckBox
        {
            get
            {
                if (null == fFirstpageonlyChCheckBox)
                {
                    fFirstpageonlyChCheckBox = new CheckBox("FirstpageonlyChCheckBox", WatermarksGroupGroup);
                    fFirstpageonlyChCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fFirstpageonlyChCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"chkFirstPageOnly");
                    fFirstpageonlyChCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fFirstpageonlyChCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"First page only");
                }

                return fFirstpageonlyChCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to DocumentOptionsGroup
        /// </summary>
        public Group DocumentOptionsGroup
        {
            get
            {
                if (null == fDocumentOptionsGroup)
                {
                    fDocumentOptionsGroup = new Group("DocumentOptionsGroup", FinishingTabIteTabItem);
                    fDocumentOptionsGroup.UIMap.Scope = UIASeachScope.Children;
                    fDocumentOptionsGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Document Options");
                    fDocumentOptionsGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fDocumentOptionsGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"groupDocumentOptions");
                }

                return fDocumentOptionsGroup;
            }
        }

        /// <summary>
        /// Gets Reference to PrintonbothsideCheckBox
        /// </summary>
        public CheckBox PrintonbothsideCheckBox
        {
            get
            {
                if (null == fPrintonbothsideCheckBox)
                {
                    fPrintonbothsideCheckBox = new CheckBox("PrintonbothsideCheckBox", DocumentOptionsGroup);
                    fPrintonbothsideCheckBox.UIMap.Scope = UIASeachScope.Children;
                    //fPrintonbothsideCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Print on both sides");
                    fPrintonbothsideCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fPrintonbothsideCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"chkPrintOnBothSides");
                }

                return fPrintonbothsideCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to FlipPagesUpChecCheckBox
        /// </summary>
        public CheckBox FlipPagesUpChecCheckBox
        {
            get
            {
                if (null == fFlipPagesUpChecCheckBox)
                {
                    fFlipPagesUpChecCheckBox = new CheckBox("FlipPagesUpChecCheckBox", DocumentOptionsGroup);
                    fFlipPagesUpChecCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fFlipPagesUpChecCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Flip Pages Up");
                    fFlipPagesUpChecCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fFlipPagesUpChecCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"chkFlipPagesUp");
                }

                return fFlipPagesUpChecCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboBookComboBox
        /// </summary>
        public ComboBox ComboBoxcboBookComboBox
        {
            get
            {
                if (null == fComboBoxcboBookComboBox)
                {
                    fComboBoxcboBookComboBox = new ComboBox("ComboBoxcboBookComboBox", DocumentOptionsGroup);
                    fComboBoxcboBookComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboBookComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxcboBookComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboBookletLayout");
                }

                return fComboBoxcboBookComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboDocuComboBox
        /// </summary>
        public ComboBox ComboBoxcboDocuComboBox_Finishing
        {
            get
            {
                if (null == fComboBoxcboDocuComboBox_Finishing)
                {
                    fComboBoxcboDocuComboBox_Finishing = new ComboBox("ComboBoxcboDocuComboBox", DocumentOptionsGroup);
                    fComboBoxcboDocuComboBox_Finishing.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboDocuComboBox_Finishing.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxcboDocuComboBox_Finishing.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboDocumentNUp");
                }

                return fComboBoxcboDocuComboBox_Finishing;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboDocuDup0ComboBox
        /// </summary>
        public ComboBox ComboBoxcboDocuDup0ComboBox
        {
            get
            {
                if (null == fComboBoxcboDocuDup0ComboBox)
                {
                    fComboBoxcboDocuDup0ComboBox = new ComboBox("ComboBoxcboDocuDup0ComboBox", DocumentOptionsGroup);
                    fComboBoxcboDocuDup0ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboDocuDup0ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxcboDocuDup0ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboDocumentNUp");
                }

                return fComboBoxcboDocuDup0ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to PrintpageborderCheckBox
        /// </summary>
        public CheckBox PrintpageborderCheckBox
        {
            get
            {
                if (null == fPrintpageborderCheckBox)
                {
                    fPrintpageborderCheckBox = new CheckBox("PrintpageborderCheckBox", DocumentOptionsGroup);
                    fPrintpageborderCheckBox.UIMap.Scope = UIASeachScope.Children;
                    //fPrintpageborderCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Print page borders");
                    fPrintpageborderCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fPrintpageborderCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"chkNUpBorders");
                }

                return fPrintpageborderCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboJobPComboBox
        /// </summary>
        public ComboBox ComboBoxcboJobPComboBox
        {
            get
            {
                if (null == fComboBoxcboJobPComboBox)
                {
                    fComboBoxcboJobPComboBox = new ComboBox("ComboBoxcboJobPComboBox", DocumentOptionsGroup);
                    fComboBoxcboJobPComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboJobPComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxcboJobPComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboJobPresentationDirection");
                }

                return fComboBoxcboJobPComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to OrientationGrouGroup
        /// </summary>
        public Group OrientationGrouGroup
        {
            get
            {
                if (null == fOrientationGrouGroup)
                {
                    fOrientationGrouGroup = new Group("OrientationGrouGroup", FinishingTabIteTabItem);
                    fOrientationGrouGroup.UIMap.Scope = UIASeachScope.Children;
                    fOrientationGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Orientation");
                    fOrientationGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fOrientationGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"groupOrientation");
                }

                return fOrientationGrouGroup;
            }
        }

        /// <summary>
        /// Gets Reference to PortraitRadioBuRadioButton
        /// </summary>
        public RadioButton PortraitRadioBuRadioButton
        {
            get
            {
                if (null == fPortraitRadioBuRadioButton)
                {
                    fPortraitRadioBuRadioButton = new RadioButton("PortraitRadioBuRadioButton", OrientationGrouGroup);
                    fPortraitRadioBuRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fPortraitRadioBuRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Portrait");
                    fPortraitRadioBuRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RadioButton");
                    fPortraitRadioBuRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"rdoPortrait");
                }

                return fPortraitRadioBuRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to LandscapeRadioBRadioButton
        /// </summary>
        public RadioButton LandscapeRadioBRadioButton
        {
            get
            {
                if (null == fLandscapeRadioBRadioButton)
                {
                    fLandscapeRadioBRadioButton = new RadioButton("LandscapeRadioBRadioButton", OrientationGrouGroup);
                    fLandscapeRadioBRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fLandscapeRadioBRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Landscape");
                    fLandscapeRadioBRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RadioButton");
                    fLandscapeRadioBRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"rdoLandscape");
                }

                return fLandscapeRadioBRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to Rotateby180degrCheckBox
        /// </summary>
        public CheckBox Rotateby180degrCheckBox
        {
            get
            {
                if (null == fRotateby180degrCheckBox)
                {
                    fRotateby180degrCheckBox = new CheckBox("Rotateby180degrCheckBox", OrientationGrouGroup);
                    fRotateby180degrCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fRotateby180degrCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Rotate by 180 degrees");
                    fRotateby180degrCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fRotateby180degrCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"chkRotate180");
                }

                return fRotateby180degrCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup6I0XListItem
        /// </summary>
        public ListItem MonotypePrinterDup6I0XListItem
        {
            get
            {
                if (null == fMonotypePrinterDup6I0XListItem)
                {
                    fMonotypePrinterDup6I0XListItem = new ListItem("MonotypePrinterDup6I0XListItem", ComboBoxcboDocuDup0ComboBox);
                    fMonotypePrinterDup6I0XListItem.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup6I0XListItem.UIMap.Index = 0;
                    fMonotypePrinterDup6I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMonotypePrinterDup6I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaNUpOption");
                }

                return fMonotypePrinterDup6I0XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to A1pagepersheetTDup1Text
        /// </summary>
        public Text A1pagepersheetTDup1Text
        {
            get
            {
                if (null == fA1pagepersheetTDup1Text)
                {
                    fA1pagepersheetTDup1Text = new Text("A1pagepersheetTDup1Text", MonotypePrinterDup6I0XListItem);
                    fA1pagepersheetTDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fA1pagepersheetTDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fA1pagepersheetTDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"1 page per sheet");
                }

                return fA1pagepersheetTDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup7I1XListItem
        /// </summary>
        public ListItem MonotypePrinterDup7I1XListItem
        {
            get
            {
                if (null == fMonotypePrinterDup7I1XListItem)
                {
                    fMonotypePrinterDup7I1XListItem = new ListItem("MonotypePrinterDup7I1XListItem", ComboBoxcboDocuDup0ComboBox);
                    fMonotypePrinterDup7I1XListItem.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup7I1XListItem.UIMap.Index = 1;
                    fMonotypePrinterDup7I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMonotypePrinterDup7I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaNUpOption");
                }

                return fMonotypePrinterDup7I1XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to A2pagespersheetDup1Text
        /// </summary>
        public Text A2pagespersheetDup1Text
        {
            get
            {
                if (null == fA2pagespersheetDup1Text)
                {
                    fA2pagespersheetDup1Text = new Text("A2pagespersheetDup1Text", MonotypePrinterDup7I1XListItem);
                    fA2pagespersheetDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fA2pagespersheetDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fA2pagespersheetDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"2 pages per sheet");
                }

                return fA2pagespersheetDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup8I2XListItem
        /// </summary>
        public ListItem MonotypePrinterDup8I2XListItem
        {
            get
            {
                if (null == fMonotypePrinterDup8I2XListItem)
                {
                    fMonotypePrinterDup8I2XListItem = new ListItem("MonotypePrinterDup8I2XListItem", ComboBoxcboDocuDup0ComboBox);
                    fMonotypePrinterDup8I2XListItem.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup8I2XListItem.UIMap.Index = 2;
                    fMonotypePrinterDup8I2XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMonotypePrinterDup8I2XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaNUpOption");
                }

                return fMonotypePrinterDup8I2XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to A4pagespersheetDup1Text
        /// </summary>
        public Text A4pagespersheetDup1Text
        {
            get
            {
                if (null == fA4pagespersheetDup1Text)
                {
                    fA4pagespersheetDup1Text = new Text("A4pagespersheetDup1Text", MonotypePrinterDup8I2XListItem);
                    fA4pagespersheetDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fA4pagespersheetDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fA4pagespersheetDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"4 pages per sheet");
                }

                return fA4pagespersheetDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup9I3XListItem
        /// </summary>
        public ListItem MonotypePrinterDup9I3XListItem
        {
            get
            {
                if (null == fMonotypePrinterDup9I3XListItem)
                {
                    fMonotypePrinterDup9I3XListItem = new ListItem("MonotypePrinterDup9I3XListItem", ComboBoxcboDocuDup0ComboBox);
                    fMonotypePrinterDup9I3XListItem.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup9I3XListItem.UIMap.Index = 3;
                    fMonotypePrinterDup9I3XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMonotypePrinterDup9I3XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaNUpOption");
                }

                return fMonotypePrinterDup9I3XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to A6pagespersheetDup1Text
        /// </summary>
        public Text A6pagespersheetDup1Text
        {
            get
            {
                if (null == fA6pagespersheetDup1Text)
                {
                    fA6pagespersheetDup1Text = new Text("A6pagespersheetDup1Text", MonotypePrinterDup9I3XListItem);
                    fA6pagespersheetDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fA6pagespersheetDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fA6pagespersheetDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"6 pages per sheet");
                }

                return fA6pagespersheetDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup10I4XListItem
        /// </summary>
        public ListItem MonotypePrinterDup10I4XListItem
        {
            get
            {
                if (null == fMonotypePrinterDup10I4XListItem)
                {
                    fMonotypePrinterDup10I4XListItem = new ListItem("MonotypePrinterDup10I4XListItem", ComboBoxcboDocuDup0ComboBox);
                    fMonotypePrinterDup10I4XListItem.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup10I4XListItem.UIMap.Index = 4;
                    fMonotypePrinterDup10I4XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMonotypePrinterDup10I4XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaNUpOption");
                }

                return fMonotypePrinterDup10I4XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to A9pagespersheetDup1Text
        /// </summary>
        public Text A9pagespersheetDup1Text
        {
            get
            {
                if (null == fA9pagespersheetDup1Text)
                {
                    fA9pagespersheetDup1Text = new Text("A9pagespersheetDup1Text", MonotypePrinterDup10I4XListItem);
                    fA9pagespersheetDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fA9pagespersheetDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fA9pagespersheetDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"9 pages per sheet");
                }

                return fA9pagespersheetDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup11I5XListItem
        /// </summary>
        public ListItem MonotypePrinterDup11I5XListItem
        {
            get
            {
                if (null == fMonotypePrinterDup11I5XListItem)
                {
                    fMonotypePrinterDup11I5XListItem = new ListItem("MonotypePrinterDup11I5XListItem", ComboBoxcboDocuDup0ComboBox);
                    fMonotypePrinterDup11I5XListItem.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup11I5XListItem.UIMap.Index = 5;
                    fMonotypePrinterDup11I5XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMonotypePrinterDup11I5XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaNUpOption");
                }

                return fMonotypePrinterDup11I5XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to A16pagespersheeDup1Text
        /// </summary>
        public Text A16pagespersheeDup1Text
        {
            get
            {
                if (null == fA16pagespersheeDup1Text)
                {
                    fA16pagespersheeDup1Text = new Text("A16pagespersheeDup1Text", MonotypePrinterDup11I5XListItem);
                    fA16pagespersheeDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fA16pagespersheeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fA16pagespersheeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"16 pages per sheet");
                }

                return fA16pagespersheeDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to ScrollViewerDroDup1Pane
        /// </summary>
        public Pane ScrollViewerDroDup1Pane
        {
            get
            {
                if (null == fScrollViewerDroDup1Pane)
                {
                    fScrollViewerDroDup1Pane = new Pane("ScrollViewerDroDup1Pane", PopupDup1Window);
                    fScrollViewerDroDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerDroDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                    fScrollViewerDroDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"DropDownScrollViewer");
                }

                return fScrollViewerDroDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to PopupDup1Window
        /// </summary>
        public Window PopupDup1Window
        {
            get
            {
                if (null == fPopupDup1Window)
                {
                    fPopupDup1Window = new Window("PopupDup1Window", DriverWindow);
                    fPopupDup1Window.UIMap.Scope = UIASeachScope.Children;
                    fPopupDup1Window.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Popup");
                }

                return fPopupDup1Window;
            }
        }

        /// <summary>
        /// Gets Reference to SelectionsconflWindow
        /// </summary>
        public Window SelectionsconflWindow
        {
            get
            {
                if (null == fSelectionsconflWindow)
                {
                    fSelectionsconflWindow = new Window("SelectionsconflWindow", DriverWindow);
                    fSelectionsconflWindow.UIMap.Scope = UIASeachScope.Children;
                    fSelectionsconflWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"#32770");
                    fSelectionsconflWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Selections conflicts");
                }

                return fSelectionsconflWindow;
            }
        }
        /// <summary>
        /// Gets Reference to ComboBoxcboJobPComboBox
        /// </summary>
        public ComboBox ComboBoxcboJobPComboBox_Finishing
        {
            get
            {
                if (null == fComboBoxcboJobPComboBox_Finishing)
                {
                    fComboBoxcboJobPComboBox_Finishing = new ComboBox("ComboBoxcboJobPComboBox_Finishing", DocumentOptionsGroup);
                    fComboBoxcboJobPComboBox_Finishing.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboJobPComboBox_Finishing.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxcboJobPComboBox_Finishing.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboJobPresentationDirection");
                }

                return fComboBoxcboJobPComboBox_Finishing;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup10I0XListItem
        /// </summary>
        public ListItem MonotypePrinterDup10I0XListItem
        {
            get
            {
                if (null == fMonotypePrinterDup10I0XListItem)
                {
                    fMonotypePrinterDup10I0XListItem = new ListItem("MonotypePrinterDup10I0XListItem", ComboBoxcboJobPComboBox_Finishing);
                    fMonotypePrinterDup10I0XListItem.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup10I0XListItem.UIMap.Index = 0;
                    fMonotypePrinterDup10I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMonotypePrinterDup10I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                }

                return fMonotypePrinterDup10I0XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to RightthenDownTeDup1Text
        /// </summary>
        public Text RightthenDownTeDup1Text
        {
            get
            {
                if (null == fRightthenDownTeDup1Text)
                {
                    fRightthenDownTeDup1Text = new Text("RightthenDownTeDup1Text", MonotypePrinterDup10I0XListItem);
                    fRightthenDownTeDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fRightthenDownTeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fRightthenDownTeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Right, then Down");
                }

                return fRightthenDownTeDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup11I1XListItem
        /// </summary>
        public ListItem MonotypePrinterDup11I1XListItem
        {
            get
            {
                if (null == fMonotypePrinterDup11I1XListItem)
                {
                    fMonotypePrinterDup11I1XListItem = new ListItem("MonotypePrinterDup11I1XListItem", ComboBoxcboJobPComboBox);
                    fMonotypePrinterDup11I1XListItem.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup11I1XListItem.UIMap.Index = 1;
                    fMonotypePrinterDup11I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMonotypePrinterDup11I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                }

                return fMonotypePrinterDup11I1XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to DownthenRightTeDup1Text
        /// </summary>
        public Text DownthenRightTeDup1Text
        {
            get
            {
                if (null == fDownthenRightTeDup1Text)
                {
                    fDownthenRightTeDup1Text = new Text("DownthenRightTeDup1Text", MonotypePrinterDup11I1XListItem);
                    fDownthenRightTeDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fDownthenRightTeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDownthenRightTeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Down, then Right");
                }

                return fDownthenRightTeDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup12I2XListItem
        /// </summary>
        public ListItem MonotypePrinterDup12I2XListItem
        {
            get
            {
                if (null == fMonotypePrinterDup12I2XListItem)
                {
                    fMonotypePrinterDup12I2XListItem = new ListItem("MonotypePrinterDup12I2XListItem", ComboBoxcboJobPComboBox);
                    fMonotypePrinterDup12I2XListItem.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup12I2XListItem.UIMap.Index = 2;
                    fMonotypePrinterDup12I2XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMonotypePrinterDup12I2XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                }

                return fMonotypePrinterDup12I2XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to LeftthenDownTexDup1Text
        /// </summary>
        public Text LeftthenDownTexDup1Text
        {
            get
            {
                if (null == fLeftthenDownTexDup1Text)
                {
                    fLeftthenDownTexDup1Text = new Text("LeftthenDownTexDup1Text", MonotypePrinterDup12I2XListItem);
                    fLeftthenDownTexDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fLeftthenDownTexDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fLeftthenDownTexDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Left, then Down");
                }

                return fLeftthenDownTexDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup13I3XListItem
        /// </summary>
        public ListItem MonotypePrinterDup13I3XListItem
        {
            get
            {
                if (null == fMonotypePrinterDup13I3XListItem)
                {
                    fMonotypePrinterDup13I3XListItem = new ListItem("MonotypePrinterDup13I3XListItem", ComboBoxcboJobPComboBox);
                    fMonotypePrinterDup13I3XListItem.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup13I3XListItem.UIMap.Index = 3;
                    fMonotypePrinterDup13I3XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMonotypePrinterDup13I3XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                }

                return fMonotypePrinterDup13I3XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to DownthenLeftTexDup1Text
        /// </summary>
        public Text DownthenLeftTexDup1Text
        {
            get
            {
                if (null == fDownthenLeftTexDup1Text)
                {
                    fDownthenLeftTexDup1Text = new Text("DownthenLeftTexDup1Text", MonotypePrinterDup13I3XListItem);
                    fDownthenLeftTexDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fDownthenLeftTexDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fDownthenLeftTexDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Down, then Left");
                }

                return fDownthenLeftTexDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to OutputOptionsGrGroup
        /// </summary>
        public Group OutputOptionsGrGroup
        {
            get
            {
                if (null == fOutputOptionsGrGroup)
                {
                    fOutputOptionsGrGroup = new Group("OutputOptionsGrGroup", OutputTabItemOuTabItem);
                    fOutputOptionsGrGroup.UIMap.Scope = UIASeachScope.Children;
                    fOutputOptionsGrGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fOutputOptionsGrGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"groupOutputOptions");
                    fOutputOptionsGrGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Output Options");
                }

                return fOutputOptionsGrGroup;
            }
        }

        /// <summary>
        /// Gets Reference to OutputOptionsTeText
        /// </summary>
        public Text OutputOptionsTeText
        {
            get
            {
                if (null == fOutputOptionsTeText)
                {
                    fOutputOptionsTeText = new Text("OutputOptionsTeText", OutputOptionsGrGroup);
                    fOutputOptionsTeText.UIMap.Scope = UIASeachScope.Children;
                    fOutputOptionsTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOutputOptionsTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Output Options");
                }

                return fOutputOptionsTeText;
            }
        }

        /// <summary>
        /// Gets Reference to StapleTextlblStText
        /// </summary>
        public Text StapleTextlblStText
        {
            get
            {
                if (null == fStapleTextlblStText)
                {
                    fStapleTextlblStText = new Text("StapleTextlblStText", OutputOptionsGrGroup);
                    fStapleTextlblStText.UIMap.Scope = UIASeachScope.Children;
                    fStapleTextlblStText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fStapleTextlblStText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"lblStaple");
                    fStapleTextlblStText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Staple:");
                }

                return fStapleTextlblStText;
            }
        }

        /// <summary>
        /// Gets Reference to AStapleTextBloText
        /// </summary>
        public Text AStapleTextBloText
        {
            get
            {
                if (null == fAStapleTextBloText)
                {
                    fAStapleTextBloText = new Text("AStapleTextBloText", StapleTextlblStText);
                    fAStapleTextBloText.UIMap.Scope = UIASeachScope.Children;
                    fAStapleTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAStapleTextBloText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"_Staple:");
                }

                return fAStapleTextBloText;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboStapComboBox
        /// </summary>
        public ComboBox ComboBoxcboStapComboBox
        {
            get
            {
                if (null == fComboBoxcboStapComboBox)
                {
                    fComboBoxcboStapComboBox = new ComboBox("ComboBoxcboStapComboBox", OutputOptionsGrGroup);
                    fComboBoxcboStapComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboStapComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxcboStapComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboStapling");
                }

                return fComboBoxcboStapComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboHoleComboBox
        /// </summary>
        public ComboBox ComboBoxcboHoleComboBox
        {
            get
            {
                if (null == fComboBoxcboHoleComboBox)
                {
                    fComboBoxcboHoleComboBox = new ComboBox("ComboBoxcboHoleComboBox", OutputOptionsGrGroup);
                    fComboBoxcboHoleComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboHoleComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxcboHoleComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboHolePunch");
                }

                return fComboBoxcboHoleComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboFoldComboBox
        /// </summary>
        public ComboBox ComboBoxcboFoldComboBox
        {
            get
            {
                if (null == fComboBoxcboFoldComboBox)
                {
                    fComboBoxcboFoldComboBox = new ComboBox("ComboBoxcboFoldComboBox", OutputOptionsGrGroup);
                    fComboBoxcboFoldComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboFoldComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboFolder");
                    fComboBoxcboFoldComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                }

                return fComboBoxcboFoldComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to NoneListBoxItemDup2ListItem
        /// </summary>
        public ListItem NoneListBoxItemDup2ListItem
        {
            get
            {
                if (null == fNoneListBoxItemDup2ListItem)
                {
                    fNoneListBoxItemDup2ListItem = new ListItem("NoneListBoxItemDup2ListItem", ComboBoxcboFoldComboBox);
                    fNoneListBoxItemDup2ListItem.UIMap.Scope = UIASeachScope.Children;
                    fNoneListBoxItemDup2ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"None");
                    fNoneListBoxItemDup2ListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fNoneListBoxItemDup2ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to NoneTextBlockDup2Text
        /// </summary>
        public Text NoneTextBlockDup2Text
        {
            get
            {
                if (null == fNoneTextBlockDup2Text)
                {
                    fNoneTextBlockDup2Text = new Text("NoneTextBlockDup2Text", NoneListBoxItemDup2ListItem);
                    fNoneTextBlockDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fNoneTextBlockDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"None");
                    fNoneTextBlockDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fNoneTextBlockDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to InwardCfoldopenDup0I0XListItem
        /// </summary>
        public ListItem InwardCfoldopenDup0I0XListItem
        {
            get
            {
                if (null == fInwardCfoldopenDup0I0XListItem)
                {
                    fInwardCfoldopenDup0I0XListItem = new ListItem("InwardCfoldopenDup0I0XListItem", ComboBoxcboFoldComboBox);
                    fInwardCfoldopenDup0I0XListItem.UIMap.Scope = UIASeachScope.Children;
                    fInwardCfoldopenDup0I0XListItem.UIMap.Index = 0;
                    fInwardCfoldopenDup0I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Inward C-fold, opens to left or up");
                    fInwardCfoldopenDup0I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fInwardCfoldopenDup0I0XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to InwardCfoldopenDup0Text
        /// </summary>
        public Text InwardCfoldopenDup0Text
        {
            get
            {
                if (null == fInwardCfoldopenDup0Text)
                {
                    fInwardCfoldopenDup0Text = new Text("InwardCfoldopenDup0Text", InwardCfoldopenDup1I1XListItem);
                    fInwardCfoldopenDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fInwardCfoldopenDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Inward C-fold, opens to left or up");
                    fInwardCfoldopenDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fInwardCfoldopenDup0Text;
            }
        }
        /// <summary>
        /// Gets Reference to InwardCfoldopenDup1I1XListItem
        /// </summary>
        public ListItem InwardCfoldopenDup1I1XListItem
        {
            get
            {
                if (null == fInwardCfoldopenDup1I1XListItem)
                {
                    fInwardCfoldopenDup1I1XListItem = new ListItem("InwardCfoldopenDup1I1XListItem", ComboBoxcboFoldComboBox);
                    fInwardCfoldopenDup1I1XListItem.UIMap.Scope = UIASeachScope.Children;
                    fInwardCfoldopenDup1I1XListItem.UIMap.Index = 1;
                    fInwardCfoldopenDup1I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Inward C-fold, opens to left or up");
                    fInwardCfoldopenDup1I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fInwardCfoldopenDup1I1XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to InwardCfoldopenDup2I0XListItem
        /// </summary>
        public ListItem InwardCfoldopenDup2I0XListItem
        {
            get
            {
                if (null == fInwardCfoldopenDup2I0XListItem)
                {
                    fInwardCfoldopenDup2I0XListItem = new ListItem("InwardCfoldopenDup2I0XListItem", ComboBoxcboFoldComboBox);
                    fInwardCfoldopenDup2I0XListItem.UIMap.Scope = UIASeachScope.Children;
                    fInwardCfoldopenDup2I0XListItem.UIMap.Index = 0;
                    fInwardCfoldopenDup2I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Inward C-fold, opens to right or down");
                    fInwardCfoldopenDup2I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fInwardCfoldopenDup2I0XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to InwardCfoldopenDup3I1XListItem
        /// </summary>
        public ListItem InwardCfoldopenDup3I1XListItem
        {
            get
            {
                if (null == fInwardCfoldopenDup3I1XListItem)
                {
                    fInwardCfoldopenDup3I1XListItem = new ListItem("InwardCfoldopenDup3I1XListItem", ComboBoxcboFoldComboBox);
                    fInwardCfoldopenDup3I1XListItem.UIMap.Scope = UIASeachScope.Children;
                    fInwardCfoldopenDup3I1XListItem.UIMap.Index = 1;
                    fInwardCfoldopenDup3I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Inward C-fold, opens to right or down");
                    fInwardCfoldopenDup3I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fInwardCfoldopenDup3I1XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to InwardCfoldopenDup1Text
        /// </summary>
        public Text InwardCfoldopenDup1Text
        {
            get
            {
                if (null == fInwardCfoldopenDup1Text)
                {
                    fInwardCfoldopenDup1Text = new Text("InwardCfoldopenDup1Text", InwardCfoldopenDup3I1XListItem);
                    fInwardCfoldopenDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fInwardCfoldopenDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Inward C-fold, opens to right or down");
                    fInwardCfoldopenDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fInwardCfoldopenDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to OutwardCfoldopeDup0I0XListItem
        /// </summary>
        public ListItem OutwardCfoldopeDup0I0XListItem
        {
            get
            {
                if (null == fOutwardCfoldopeDup0I0XListItem)
                {
                    fOutwardCfoldopeDup0I0XListItem = new ListItem("OutwardCfoldopeDup0I0XListItem", ComboBoxcboFoldComboBox);
                    fOutwardCfoldopeDup0I0XListItem.UIMap.Scope = UIASeachScope.Children;
                    fOutwardCfoldopeDup0I0XListItem.UIMap.Index = 0;
                    fOutwardCfoldopeDup0I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Outward C-fold, opens to left or up");
                    fOutwardCfoldopeDup0I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fOutwardCfoldopeDup0I0XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to OutwardCfoldopeDup1I1XListItem
        /// </summary>
        public ListItem OutwardCfoldopeDup1I1XListItem
        {
            get
            {
                if (null == fOutwardCfoldopeDup1I1XListItem)
                {
                    fOutwardCfoldopeDup1I1XListItem = new ListItem("OutwardCfoldopeDup1I1XListItem", ComboBoxcboFoldComboBox);
                    fOutwardCfoldopeDup1I1XListItem.UIMap.Scope = UIASeachScope.Children;
                    fOutwardCfoldopeDup1I1XListItem.UIMap.Index = 1;
                    fOutwardCfoldopeDup1I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Outward C-fold, opens to left or up");
                    fOutwardCfoldopeDup1I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fOutwardCfoldopeDup1I1XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to OutwardCfoldopeDup2I0XListItem
        /// </summary>
        public ListItem OutwardCfoldopeDup2I0XListItem
        {
            get
            {
                if (null == fOutwardCfoldopeDup2I0XListItem)
                {
                    fOutwardCfoldopeDup2I0XListItem = new ListItem("OutwardCfoldopeDup2I0XListItem", ComboBoxcboFoldComboBox);
                    fOutwardCfoldopeDup2I0XListItem.UIMap.Scope = UIASeachScope.Children;
                    fOutwardCfoldopeDup2I0XListItem.UIMap.Index = 0;
                    fOutwardCfoldopeDup2I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Outward C-fold, opens to right or down");
                    fOutwardCfoldopeDup2I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fOutwardCfoldopeDup2I0XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to OutwardCfoldopeDup3I1XListItem
        /// </summary>
        public ListItem OutwardCfoldopeDup3I1XListItem
        {
            get
            {
                if (null == fOutwardCfoldopeDup3I1XListItem)
                {
                    fOutwardCfoldopeDup3I1XListItem = new ListItem("OutwardCfoldopeDup3I1XListItem", ComboBoxcboFoldComboBox);
                    fOutwardCfoldopeDup3I1XListItem.UIMap.Scope = UIASeachScope.Children;
                    fOutwardCfoldopeDup3I1XListItem.UIMap.Index = 1;
                    fOutwardCfoldopeDup3I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Outward C-fold, opens to right or down");
                    fOutwardCfoldopeDup3I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fOutwardCfoldopeDup3I1XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to OutwardCfoldopeDup1Text
        /// </summary>
        public Text OutwardCfoldopeDup1Text
        {
            get
            {
                if (null == fOutwardCfoldopeDup1Text)
                {
                    fOutwardCfoldopeDup1Text = new Text("OutwardCfoldopeDup1Text", OutwardCfoldopeDup3I1XListItem);
                    fOutwardCfoldopeDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fOutwardCfoldopeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Outward C-fold, opens to right or down");
                    fOutwardCfoldopeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fOutwardCfoldopeDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to InwardVfoldListDup0I0XListItem
        /// </summary>
        public ListItem InwardVfoldListDup0I0XListItem
        {
            get
            {
                if (null == fInwardVfoldListDup0I0XListItem)
                {
                    fInwardVfoldListDup0I0XListItem = new ListItem("InwardVfoldListDup0I0XListItem", ComboBoxcboFoldComboBox);
                    fInwardVfoldListDup0I0XListItem.UIMap.Scope = UIASeachScope.Children;
                    fInwardVfoldListDup0I0XListItem.UIMap.Index = 0;
                    fInwardVfoldListDup0I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Inward V-fold");
                    fInwardVfoldListDup0I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fInwardVfoldListDup0I0XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to InwardVfoldListDup1I1XListItem
        /// </summary>
        public ListItem InwardVfoldListDup1I1XListItem
        {
            get
            {
                if (null == fInwardVfoldListDup1I1XListItem)
                {
                    fInwardVfoldListDup1I1XListItem = new ListItem("InwardVfoldListDup1I1XListItem", ComboBoxcboFoldComboBox);
                    fInwardVfoldListDup1I1XListItem.UIMap.Scope = UIASeachScope.Children;
                    fInwardVfoldListDup1I1XListItem.UIMap.Index = 1;
                    fInwardVfoldListDup1I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Inward V-fold");
                    fInwardVfoldListDup1I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fInwardVfoldListDup1I1XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to InwardVfoldTextText
        /// </summary>
        public Text InwardVfoldTextText
        {
            get
            {
                if (null == fInwardVfoldTextText)
                {
                    fInwardVfoldTextText = new Text("InwardVfoldTextText", InwardVfoldListDup1I1XListItem);
                    fInwardVfoldTextText.UIMap.Scope = UIASeachScope.Children;
                    fInwardVfoldTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Inward V-fold");
                    fInwardVfoldTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fInwardVfoldTextText;
            }
        }

        /// <summary>
        /// Gets Reference to OutwardVfoldLisDup0I0XListItem
        /// </summary>
        public ListItem OutwardVfoldLisDup0I0XListItem
        {
            get
            {
                if (null == fOutwardVfoldLisDup0I0XListItem)
                {
                    fOutwardVfoldLisDup0I0XListItem = new ListItem("OutwardVfoldLisDup0I0XListItem", ComboBoxcboFoldComboBox);
                    fOutwardVfoldLisDup0I0XListItem.UIMap.Scope = UIASeachScope.Children;
                    fOutwardVfoldLisDup0I0XListItem.UIMap.Index = 0;
                    fOutwardVfoldLisDup0I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Outward V-fold");
                    fOutwardVfoldLisDup0I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fOutwardVfoldLisDup0I0XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to OutwardVfoldLisDup1I1XListItem
        /// </summary>
        public ListItem OutwardVfoldLisDup1I1XListItem
        {
            get
            {
                if (null == fOutwardVfoldLisDup1I1XListItem)
                {
                    fOutwardVfoldLisDup1I1XListItem = new ListItem("OutwardVfoldLisDup1I1XListItem", ComboBoxcboFoldComboBox);
                    fOutwardVfoldLisDup1I1XListItem.UIMap.Scope = UIASeachScope.Children;
                    fOutwardVfoldLisDup1I1XListItem.UIMap.Index = 1;
                    fOutwardVfoldLisDup1I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Outward V-fold");
                    fOutwardVfoldLisDup1I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fOutwardVfoldLisDup1I1XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to OutwardVfoldTexText
        /// </summary>
        public Text OutwardVfoldTexText
        {
            get
            {
                if (null == fOutwardVfoldTexText)
                {
                    fOutwardVfoldTexText = new Text("OutwardVfoldTexText", OutwardVfoldLisDup1I1XListItem);
                    fOutwardVfoldTexText.UIMap.Scope = UIASeachScope.Children;
                    fOutwardVfoldTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Outward V-fold");
                    fOutwardVfoldTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fOutwardVfoldTexText;
            }
        }

        /// <summary>
        /// Gets Reference to TextBoxedMaxSheEdit
        /// </summary>
        public Edit TextBoxedMaxSheEdit
        {
            get
            {
                if (null == fTextBoxedMaxSheEdit)
                {
                    fTextBoxedMaxSheEdit = new Edit("TextBoxedMaxSheEdit", OutputOptionsGrGroup);
                    fTextBoxedMaxSheEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxedMaxSheEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"edMaxSheetPerSet");
                    fTextBoxedMaxSheEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                }

                return fTextBoxedMaxSheEdit;
            }
        }

        /// <summary>
        /// Gets Reference to ScrollViewerPARPane
        /// </summary>
        public Pane ScrollViewerPARPane
        {
            get
            {
                if (null == fScrollViewerPARPane)
                {
                    fScrollViewerPARPane = new Pane("ScrollViewerPARPane", TextBoxedMaxSheEdit);
                    fScrollViewerPARPane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerPARPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PART_ContentHost");
                    fScrollViewerPARPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                }

                return fScrollViewerPARPane;
            }
        }

        /// <summary>
        /// Gets Reference to ScrollBarVerticScrollBar
        /// </summary>
        public ScrollBar ScrollBarVerticScrollBar
        {
            get
            {
                if (null == fScrollBarVerticScrollBar)
                {
                    fScrollBarVerticScrollBar = new ScrollBar("ScrollBarVerticScrollBar", ScrollViewerPARPane);
                    fScrollBarVerticScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                    fScrollBarVerticScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                }

                return fScrollBarVerticScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to ScrollBarHorizoScrollBar
        /// </summary>
        public ScrollBar ScrollBarHorizoScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoScrollBar)
                {
                    fScrollBarHorizoScrollBar = new ScrollBar("ScrollBarHorizoScrollBar", ScrollViewerPARPane);
                    fScrollBarHorizoScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                    fScrollBarHorizoScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                }

                return fScrollBarHorizoScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to A13TextlblPerseText
        /// </summary>
        public Text A13TextlblPerseText
        {
            get
            {
                if (null == fA13TextlblPerseText)
                {
                    fA13TextlblPerseText = new Text("A13TextlblPerseText", OutputOptionsGrGroup);
                    fA13TextlblPerseText.UIMap.Scope = UIASeachScope.Children;
                    fA13TextlblPerseText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"(1 - 3)");
                    fA13TextlblPerseText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"lblPersetRange");
                    fA13TextlblPerseText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                }

                return fA13TextlblPerseText;
            }
        }

        /// <summary>
        /// Gets Reference to A13TextBlockText
        /// </summary>
        public Text A13TextBlockText
        {
            get
            {
                if (null == fA13TextBlockText)
                {
                    fA13TextBlockText = new Text("A13TextBlockText", A13TextlblPerseText);
                    fA13TextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fA13TextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"(1 - 3)");
                    fA13TextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fA13TextBlockText;
            }
        }
        /// <summary>
        /// Gets Reference to OutputBinOptionGroup
        /// </summary>
        public Group OutputBinOptionGroup
        {
            get
            {
                if (null == fOutputBinOptionGroup)
                {
                    fOutputBinOptionGroup = new Group("OutputBinOptionGroup", OutputTabItemOuTabItem);
                    fOutputBinOptionGroup.UIMap.Scope = UIASeachScope.Children;
                    fOutputBinOptionGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fOutputBinOptionGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Output Bin Options");
                    fOutputBinOptionGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"groupOutputBinOptions");
                }

                return fOutputBinOptionGroup;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboOutpComboBox
        /// </summary>
        public ComboBox ComboBoxcboOutpComboBox
        {
            get
            {
                if (null == fComboBoxcboOutpComboBox)
                {
                    fComboBoxcboOutpComboBox = new ComboBox("ComboBoxcboOutpComboBox", OutputBinOptionGroup);
                    fComboBoxcboOutpComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboOutpComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxcboOutpComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboOutputBin");
                }

                return fComboBoxcboOutpComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to JobStorageModeGGroup
        /// </summary>
        public Group JobStorageModeGGroup
        {
            get
            {
                if (null == fJobStorageModeGGroup)
                {
                    fJobStorageModeGGroup = new Group("JobStorageModeGGroup", JobStorageTabItTabItem);
                    fJobStorageModeGGroup.UIMap.Scope = UIASeachScope.Children;
                    fJobStorageModeGGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"groupJobStorageMode");
                    fJobStorageModeGGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fJobStorageModeGGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Job Storage Mode");
                }

                return fJobStorageModeGGroup;
            }
        }

        /// <summary>
        /// Gets Reference to OffRadioButtonrRadioButton
        /// </summary>
        public RadioButton OffRadioButtonrRadioButton
        {
            get
            {
                if (null == fOffRadioButtonrRadioButton)
                {
                    fOffRadioButtonrRadioButton = new RadioButton("OffRadioButtonrRadioButton", JobStorageModeGGroup);
                    fOffRadioButtonrRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fOffRadioButtonrRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"rdoJobStorageOff");
                    fOffRadioButtonrRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RadioButton");
                    fOffRadioButtonrRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Off");
                }

                return fOffRadioButtonrRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to OffTextBlockText
        /// </summary>
        public Text OffTextBlockText
        {
            get
            {
                if (null == fOffTextBlockText)
                {
                    fOffTextBlockText = new Text("OffTextBlockText", OffRadioButtonrRadioButton);
                    fOffTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fOffTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fOffTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Off");
                }

                return fOffTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to ProofandHoldRadRadioButton
        /// </summary>
        public RadioButton ProofandHoldRadRadioButton
        {
            get
            {
                if (null == fProofandHoldRadRadioButton)
                {
                    fProofandHoldRadRadioButton = new RadioButton("ProofandHoldRadRadioButton", JobStorageModeGGroup);
                    fProofandHoldRadRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fProofandHoldRadRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"rdoJobStorageProof");
                    fProofandHoldRadRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RadioButton");
                    fProofandHoldRadRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Proof and Hold");
                }

                return fProofandHoldRadRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to AProofandHoldTText
        /// </summary>
        public Text AProofandHoldTText
        {
            get
            {
                if (null == fAProofandHoldTText)
                {
                    fAProofandHoldTText = new Text("AProofandHoldTText", ProofandHoldRadRadioButton);
                    fAProofandHoldTText.UIMap.Scope = UIASeachScope.Children;
                    fAProofandHoldTText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAProofandHoldTText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"_Proof and Hold");
                }

                return fAProofandHoldTText;
            }
        }

        /// <summary>
        /// Gets Reference to PersonalJobRadiRadioButton
        /// </summary>
        public RadioButton PersonalJobRadiRadioButton
        {
            get
            {
                if (null == fPersonalJobRadiRadioButton)
                {
                    fPersonalJobRadiRadioButton = new RadioButton("PersonalJobRadiRadioButton", JobStorageModeGGroup);
                    fPersonalJobRadiRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fPersonalJobRadiRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"rdoJobStoragePersonal");
                    fPersonalJobRadiRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RadioButton");
                    fPersonalJobRadiRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Personal Job");
                }

                return fPersonalJobRadiRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to PersonalJobTexText
        /// </summary>
        public Text PersonalJobTexText
        {
            get
            {
                if (null == fPersonalJobTexText)
                {
                    fPersonalJobTexText = new Text("PersonalJobTexText", PersonalJobRadiRadioButton);
                    fPersonalJobTexText.UIMap.Scope = UIASeachScope.Children;
                    fPersonalJobTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPersonalJobTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Persona_l Job");
                }

                return fPersonalJobTexText;
            }
        }

        /// <summary>
        /// Gets Reference to QuickCopyRadioBRadioButton
        /// </summary>
        public RadioButton QuickCopyRadioBRadioButton
        {
            get
            {
                if (null == fQuickCopyRadioBRadioButton)
                {
                    fQuickCopyRadioBRadioButton = new RadioButton("QuickCopyRadioBRadioButton", JobStorageModeGGroup);
                    fQuickCopyRadioBRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fQuickCopyRadioBRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"rdoJobQuickCopy");
                    fQuickCopyRadioBRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RadioButton");
                    fQuickCopyRadioBRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Quick Copy");
                }

                return fQuickCopyRadioBRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to QuickCopyTextBText
        /// </summary>
        public Text QuickCopyTextBText
        {
            get
            {
                if (null == fQuickCopyTextBText)
                {
                    fQuickCopyTextBText = new Text("QuickCopyTextBText", QuickCopyRadioBRadioButton);
                    fQuickCopyTextBText.UIMap.Scope = UIASeachScope.Children;
                    fQuickCopyTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fQuickCopyTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Q_uick Copy");
                }

                return fQuickCopyTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to StoredJobRadioBRadioButton
        /// </summary>
        public RadioButton StoredJobRadioBRadioButton
        {
            get
            {
                if (null == fStoredJobRadioBRadioButton)
                {
                    fStoredJobRadioBRadioButton = new RadioButton("StoredJobRadioBRadioButton", JobStorageModeGGroup);
                    fStoredJobRadioBRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fStoredJobRadioBRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"rdoStoredJob");
                    fStoredJobRadioBRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RadioButton");
                    fStoredJobRadioBRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Stored Job");
                }

                return fStoredJobRadioBRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to StoredJobTextBText
        /// </summary>
        public Text StoredJobTextBText
        {
            get
            {
                if (null == fStoredJobTextBText)
                {
                    fStoredJobTextBText = new Text("StoredJobTextBText", StoredJobRadioBRadioButton);
                    fStoredJobTextBText.UIMap.Scope = UIASeachScope.Children;
                    fStoredJobTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fStoredJobTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Stored _Job");
                }

                return fStoredJobTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to MakeJobPrivateSGroup
        /// </summary>
        public Group MakeJobPrivateSGroup
        {
            get
            {
                if (null == fMakeJobPrivateSGroup)
                {
                    fMakeJobPrivateSGroup = new Group("MakeJobPrivateSGroup", JobStorageTabItTabItem);
                    fMakeJobPrivateSGroup.UIMap.Scope = UIASeachScope.Children;
                    fMakeJobPrivateSGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"groupJobPrivateSecure");
                    fMakeJobPrivateSGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fMakeJobPrivateSGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Make Job Private/Secure");
                }

                return fMakeJobPrivateSGroup;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboJobPComboBox
        /// </summary>
        public ComboBox ComboBoxcboJobPComboBox_JobStorage
        {
            get
            {
                if (null == fComboBoxcboJobPComboBox_JobStorage)
                {
                    fComboBoxcboJobPComboBox_JobStorage = new ComboBox("ComboBoxcboJobPComboBox_JobStorage", MakeJobPrivateSGroup);
                    fComboBoxcboJobPComboBox_JobStorage.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboJobPComboBox_JobStorage.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboJobPrivateSecure");
                    fComboBoxcboJobPComboBox_JobStorage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                }

                return fComboBoxcboJobPComboBox_JobStorage;
            }
        }

        /// <summary>
        /// Gets Reference to UserNameGroupBoGroup
        /// </summary>
        public Group UserNameGroupBoGroup
        {
            get
            {
                if (null == fUserNameGroupBoGroup)
                {
                    fUserNameGroupBoGroup = new Group("UserNameGroupBoGroup", JobStorageTabItTabItem);
                    fUserNameGroupBoGroup.UIMap.Scope = UIASeachScope.Children;
                    fUserNameGroupBoGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"groupUserName");
                    fUserNameGroupBoGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fUserNameGroupBoGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"User Name:");
                }

                return fUserNameGroupBoGroup;
            }
        }

        /// <summary>
        /// Gets Reference to UserNameRadioBuRadioButton
        /// </summary>
        public RadioButton UserNameRadioBuRadioButton
        {
            get
            {
                if (null == fUserNameRadioBuRadioButton)
                {
                    fUserNameRadioBuRadioButton = new RadioButton("UserNameRadioBuRadioButton", UserNameGroupBoGroup);
                    fUserNameRadioBuRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fUserNameRadioBuRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"rdoUserName");
                    fUserNameRadioBuRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RadioButton");
                    fUserNameRadioBuRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"User Name");
                }

                return fUserNameRadioBuRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to CustomRadioButtDup0RadioButton
        /// </summary>
        public RadioButton CustomRadioButtDup0RadioButton
        {
            get
            {
                if (null == fCustomRadioButtDup0RadioButton)
                {
                    fCustomRadioButtDup0RadioButton = new RadioButton("CustomRadioButtDup0RadioButton", UserNameGroupBoGroup);
                    fCustomRadioButtDup0RadioButton.UIMap.Scope = UIASeachScope.Children;
                    fCustomRadioButtDup0RadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"rdoCustomUserName");
                    fCustomRadioButtDup0RadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RadioButton");
                    fCustomRadioButtDup0RadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Custom");
                }

                return fCustomRadioButtDup0RadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to AutomaticRadioBRadioButton
        /// </summary>
        public RadioButton AutomaticRadioBRadioButton
        {
            get
            {
                if (null == fAutomaticRadioBRadioButton)
                {
                    fAutomaticRadioBRadioButton = new RadioButton("AutomaticRadioBRadioButton", JobNameGroupBoxGroup);
                    fAutomaticRadioBRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fAutomaticRadioBRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"rdoAutomatic");
                    fAutomaticRadioBRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RadioButton");
                    fAutomaticRadioBRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Automatic");
                }

                return fAutomaticRadioBRadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to CustomRadioButtDup1RadioButton
        /// </summary>
        public RadioButton CustomRadioButtDup1RadioButton
        {
            get
            {
                if (null == fCustomRadioButtDup1RadioButton)
                {
                    fCustomRadioButtDup1RadioButton = new RadioButton("CustomRadioButtDup1RadioButton", JobNameGroupBoxGroup);
                    fCustomRadioButtDup1RadioButton.UIMap.Scope = UIASeachScope.Children;
                    fCustomRadioButtDup1RadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"rdoCustomJobName");
                    fCustomRadioButtDup1RadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RadioButton");
                    fCustomRadioButtDup1RadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Custom");
                }

                return fCustomRadioButtDup1RadioButton;
            }
        }

        /// <summary>
        /// Gets Reference to TextBoxedJobNamEdit
        /// </summary>
        public Edit TextBoxedJobNamEdit
        {
            get
            {
                if (null == fTextBoxedJobNamEdit)
                {
                    fTextBoxedJobNamEdit = new Edit("TextBoxedJobNamEdit", JobNameGroupBoxGroup);
                    fTextBoxedJobNamEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxedJobNamEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"edJobName");
                    fTextBoxedJobNamEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                }

                return fTextBoxedJobNamEdit;
            }
        }

        /// <summary>
        /// Gets Reference to JobNameGroupBoxGroup
        /// </summary>
        public Group JobNameGroupBoxGroup
        {
            get
            {
                if (null == fJobNameGroupBoxGroup)
                {
                    fJobNameGroupBoxGroup = new Group("JobNameGroupBoxGroup", JobStorageTabItTabItem);
                    fJobNameGroupBoxGroup.UIMap.Scope = UIASeachScope.Children;
                    fJobNameGroupBoxGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"groupJobName");
                    fJobNameGroupBoxGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fJobNameGroupBoxGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Job Name:");
                }

                return fJobNameGroupBoxGroup;
            }
        }

        /// <summary>
        /// Gets Reference to TextBoxedUserNaEdit
        /// </summary>
        public Edit TextBoxedUserNaEdit
        {
            get
            {
                if (null == fTextBoxedUserNaEdit)
                {
                    fTextBoxedUserNaEdit = new Edit("TextBoxedUserNaEdit", UserNameGroupBoGroup);
                    fTextBoxedUserNaEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxedUserNaEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"edUserName");
                    fTextBoxedUserNaEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                }

                return fTextBoxedUserNaEdit;
            }
        }

        /// <summary>
        /// Gets Reference to MakeJobPrivateSDup0Group
        /// </summary>
        public Group MakeJobPrivateSDup0Group
        {
            get
            {
                if (null == fMakeJobPrivateSDup0Group)
                {
                    fMakeJobPrivateSDup0Group = new Group("MakeJobPrivateSDup0Group", JobStorageTabItTabItem);
                    fMakeJobPrivateSDup0Group.UIMap.Scope = UIASeachScope.Children;
                    fMakeJobPrivateSDup0Group.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"groupJobPrivateSecure");
                    fMakeJobPrivateSDup0Group.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fMakeJobPrivateSDup0Group.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Make Job Private/Secure");
                }

                return fMakeJobPrivateSDup0Group;
            }
        }

        /// <summary>
        /// Gets Reference to PasswordBoxedPIDup0Edit
        /// </summary>
        public Edit PasswordBoxedPIDup0Edit
        {
            get
            {
                if (null == fPasswordBoxedPIDup0Edit)
                {
                    fPasswordBoxedPIDup0Edit = new Edit("PasswordBoxedPIDup0Edit", MakeJobPrivateSDup0Group);
                    fPasswordBoxedPIDup0Edit.UIMap.Scope = UIASeachScope.Children;
                    fPasswordBoxedPIDup0Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"edPIN");
                    fPasswordBoxedPIDup0Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"PasswordBox");
                }

                return fPasswordBoxedPIDup0Edit;
            }
        }

        /// <summary>
        /// Gets Reference to PasswordBoxedPaDup0Edit
        /// </summary>
        public Edit PasswordBoxedPaDup0Edit
        {
            get
            {
                if (null == fPasswordBoxedPaDup0Edit)
                {
                    fPasswordBoxedPaDup0Edit = new Edit("PasswordBoxedPaDup0Edit", MakeJobPrivateSDup0Group);
                    fPasswordBoxedPaDup0Edit.UIMap.Scope = UIASeachScope.Children;
                    fPasswordBoxedPaDup0Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"edPassword");
                    fPasswordBoxedPaDup0Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"PasswordBox");
                }

                return fPasswordBoxedPaDup0Edit;
            }
        }

        /// <summary>
        /// Gets Reference to PasswordBoxedCoDup0Edit
        /// </summary>
        public Edit PasswordBoxedCoDup0Edit
        {
            get
            {
                if (null == fPasswordBoxedCoDup0Edit)
                {
                    fPasswordBoxedCoDup0Edit = new Edit("PasswordBoxedCoDup0Edit", MakeJobPrivateSDup0Group);
                    fPasswordBoxedCoDup0Edit.UIMap.Scope = UIASeachScope.Children;
                    fPasswordBoxedCoDup0Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"edConfirm");
                    fPasswordBoxedCoDup0Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"PasswordBox");
                }

                return fPasswordBoxedCoDup0Edit;
            }
        }

        /// <summary>
        /// Gets Reference to SaveasdefaultpaDup0CheckBox
        /// </summary>
        public CheckBox SaveasdefaultpaDup0CheckBox
        {
            get
            {
                if (null == fSaveasdefaultpaDup0CheckBox)
                {
                    fSaveasdefaultpaDup0CheckBox = new CheckBox("SaveasdefaultpaDup0CheckBox", MakeJobPrivateSDup0Group);
                    fSaveasdefaultpaDup0CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fSaveasdefaultpaDup0CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"chkSavePasswordAsDefault");
                    fSaveasdefaultpaDup0CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fSaveasdefaultpaDup0CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Save as default password");
                }

                return fSaveasdefaultpaDup0CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboJobNComboBox
        /// </summary>
        public ComboBox ComboBoxcboJobNComboBox
        {
            get
            {
                if (null == fComboBoxcboJobNComboBox)
                {
                    fComboBoxcboJobNComboBox = new ComboBox("ComboBoxcboJobNComboBox", JobNameGroupBoxGroup);
                    fComboBoxcboJobNComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboJobNComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboJobNameExists");
                    fComboBoxcboJobNComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                }

                return fComboBoxcboJobNComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup1I1XListItem
        /// </summary>
        public ListItem MonotypePrinterDup1I1XListItem
        {
            get
            {
                if (null == fMonotypePrinterDup1I1XListItem)
                {
                    fMonotypePrinterDup1I1XListItem = new ListItem("MonotypePrinterDup1I1XListItem", ComboBoxcboJobNComboBox);
                    fMonotypePrinterDup1I1XListItem.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup1I1XListItem.UIMap.Index = 1;
                    fMonotypePrinterDup1I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMonotypePrinterDup1I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                }

                return fMonotypePrinterDup1I1XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to ReplaceExistingDup0Text
        /// </summary>
        public Text ReplaceExistingDup0Text
        {
            get
            {
                if (null == fReplaceExistingDup0Text)
                {
                    fReplaceExistingDup0Text = new Text("ReplaceExistingDup0Text", MonotypePrinterDup1I1XListItem);
                    fReplaceExistingDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fReplaceExistingDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fReplaceExistingDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Replace Existing File");
                }

                return fReplaceExistingDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup0I0XListItem
        /// </summary>
        public ListItem MonotypePrinterDup0I0XListItem
        {
            get
            {
                if (null == fMonotypePrinterDup0I0XListItem)
                {
                    fMonotypePrinterDup0I0XListItem = new ListItem("MonotypePrinterDup0I0XListItem", ComboBoxcboJobNComboBox);
                    fMonotypePrinterDup0I0XListItem.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup0I0XListItem.UIMap.Index = 0;
                    fMonotypePrinterDup0I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMonotypePrinterDup0I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                }

                return fMonotypePrinterDup0I0XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to UseJobName199TeDup0Text
        /// </summary>
        public Text UseJobName199TeDup0Text
        {
            get
            {
                if (null == fUseJobName199TeDup0Text)
                {
                    fUseJobName199TeDup0Text = new Text("UseJobName199TeDup0Text", MonotypePrinterDup0I0XListItem);
                    fUseJobName199TeDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fUseJobName199TeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fUseJobName199TeDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Use Job Name + (1-99)");
                }

                return fUseJobName199TeDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to AdvancedGroupBoGroup
        /// </summary>
        public Group AdvancedGroupBoGroup
        {
            get
            {
                if (null == fAdvancedGroupBoGroup)
                {
                    fAdvancedGroupBoGroup = new Group("AdvancedGroupBoGroup", AdvancedTabItemTabItem);
                    fAdvancedGroupBoGroup.UIMap.Scope = UIASeachScope.Children;
                    fAdvancedGroupBoGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"groupAdvanced");
                    fAdvancedGroupBoGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fAdvancedGroupBoGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Advanced");
                }

                return fAdvancedGroupBoGroup;
            }
        }

        /// <summary>
        /// Gets Reference to TextBoxedCopiesEdit
        /// </summary>
        public Edit TextBoxedCopiesEdit
        {
            get
            {
                if (null == fTextBoxedCopiesEdit)
                {
                    fTextBoxedCopiesEdit = new Edit("TextBoxedCopiesEdit", AdvancedGroupBoGroup);
                    fTextBoxedCopiesEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxedCopiesEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"edCopies");
                    fTextBoxedCopiesEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                }

                return fTextBoxedCopiesEdit;
            }
        }

        /// <summary>
        /// Gets Reference to CollateCheckBoxCheckBox
        /// </summary>
        public CheckBox CollateCheckBoxCheckBox
        {
            get
            {
                if (null == fCollateCheckBoxCheckBox)
                {
                    fCollateCheckBoxCheckBox = new CheckBox("CollateCheckBoxCheckBox", AdvancedGroupBoGroup);
                    fCollateCheckBoxCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fCollateCheckBoxCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"chkCollate");
                    fCollateCheckBoxCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fCollateCheckBoxCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Collate");
                }

                return fCollateCheckBoxCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to ReversepageordeCheckBox
        /// </summary>
        public CheckBox ReversepageordeCheckBox
        {
            get
            {
                if (null == fReversepageordeCheckBox)
                {
                    fReversepageordeCheckBox = new CheckBox("ReversepageordeCheckBox", AdvancedGroupBoGroup);
                    fReversepageordeCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fReversepageordeCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"chkReverse");
                    fReversepageordeCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fReversepageordeCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Reverse page order");
                }

                return fReversepageordeCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to ReversepageordeText
        /// </summary>
        public Text ReversepageordeText
        {
            get
            {
                if (null == fReversepageordeText)
                {
                    fReversepageordeText = new Text("ReversepageordeText", ReversepageordeCheckBox);
                    fReversepageordeText.UIMap.Scope = UIASeachScope.Children;
                    fReversepageordeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fReversepageordeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Reverse page order");
                }

                return fReversepageordeText;
            }
        }

        /// <summary>
        /// Gets Reference to PrintAllTextasBCheckBox
        /// </summary>
        public CheckBox PrintAllTextasBCheckBox
        {
            get
            {
                if (null == fPrintAllTextasBCheckBox)
                {
                    fPrintAllTextasBCheckBox = new CheckBox("PrintAllTextasBCheckBox", AdvancedGroupBoGroup);
                    fPrintAllTextasBCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fPrintAllTextasBCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"chkBlackText");
                    fPrintAllTextasBCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fPrintAllTextasBCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Print All Text as Black");
                }

                return fPrintAllTextasBCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to PrintAllTextasBText
        /// </summary>
        public Text PrintAllTextasBText
        {
            get
            {
                if (null == fPrintAllTextasBText)
                {
                    fPrintAllTextasBText = new Text("PrintAllTextasBText", PrintAllTextasBCheckBox);
                    fPrintAllTextasBText.UIMap.Scope = UIASeachScope.Children;
                    fPrintAllTextasBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPrintAllTextasBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Print All Text as Black");
                }

                return fPrintAllTextasBText;
            }
        }

        /// <summary>
        /// Gets Reference to HPEasyColorChecCheckBox
        /// </summary>
        public CheckBox HPEasyColorChecCheckBox
        {
            get
            {
                if (null == fHPEasyColorChecCheckBox)
                {
                    fHPEasyColorChecCheckBox = new CheckBox("HPEasyColorChecCheckBox", AdvancedGroupBoGroup);
                    fHPEasyColorChecCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fHPEasyColorChecCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"chkEasyColor");
                    fHPEasyColorChecCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fHPEasyColorChecCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP EasyColor");
                }

                return fHPEasyColorChecCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to HPEasyColorTextText
        /// </summary>
        public Text HPEasyColorTextText
        {
            get
            {
                if (null == fHPEasyColorTextText)
                {
                    fHPEasyColorTextText = new Text("HPEasyColorTextText", HPEasyColorChecCheckBox);
                    fHPEasyColorTextText.UIMap.Scope = UIASeachScope.Children;
                    fHPEasyColorTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHPEasyColorTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP EasyColor");
                }

                return fHPEasyColorTextText;
            }
        }

        /// <summary>
        /// Gets Reference to EdgetoEdgeCheckCheckBox
        /// </summary>
        public CheckBox EdgetoEdgeCheckCheckBox
        {
            get
            {
                if (null == fEdgetoEdgeCheckCheckBox)
                {
                    fEdgetoEdgeCheckCheckBox = new CheckBox("EdgetoEdgeCheckCheckBox", AdvancedGroupBoGroup);
                    fEdgetoEdgeCheckCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fEdgetoEdgeCheckCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"chkEdgetoEdge");
                    fEdgetoEdgeCheckCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fEdgetoEdgeCheckCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Edge-to-Edge");
                }

                return fEdgetoEdgeCheckCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to EdgetoEdgeTextBText
        /// </summary>
        public Text EdgetoEdgeTextBText
        {
            get
            {
                if (null == fEdgetoEdgeTextBText)
                {
                    fEdgetoEdgeTextBText = new Text("EdgetoEdgeTextBText", EdgetoEdgeCheckCheckBox);
                    fEdgetoEdgeTextBText.UIMap.Scope = UIASeachScope.Children;
                    fEdgetoEdgeTextBText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEdgetoEdgeTextBText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Edge-to-Edge");
                }

                return fEdgetoEdgeTextBText;
            }
        }

        /// <summary>
        /// Gets Reference to AlternativeLettCheckBox
        /// </summary>
        public CheckBox AlternativeLettCheckBox
        {
            get
            {
                if (null == fAlternativeLettCheckBox)
                {
                    fAlternativeLettCheckBox = new CheckBox("AlternativeLettCheckBox", AdvancedGroupBoGroup);
                    fAlternativeLettCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fAlternativeLettCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"chkAltLetterheadMode");
                    fAlternativeLettCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fAlternativeLettCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"+Alternative Letterhead Mode");
                }

                return fAlternativeLettCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup3I1XListItem
        /// </summary>
        public ListItem MonotypePrinterDup3I1XListItem1
        {
            get
            {
                if (null == fMonotypePrinterDup3I1XListItem1)
                {
                    fMonotypePrinterDup3I1XListItem1 = new ListItem("MonotypePrinterDup3I1XListItem1", ComboBoxcboJobNComboBox);
                    fMonotypePrinterDup3I1XListItem1.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup3I1XListItem1.UIMap.Index = 1;
                    fMonotypePrinterDup3I1XListItem1.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMonotypePrinterDup3I1XListItem1.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                }

                return fMonotypePrinterDup3I1XListItem1;
            }
        }

        /// <summary>
        /// Gets Reference to ReplaceExistingDup1Text
        /// </summary>
        public Text ReplaceExistingDup1Text
        {
            get
            {
                if (null == fReplaceExistingDup1Text)
                {
                    fReplaceExistingDup1Text = new Text("ReplaceExistingDup1Text", MonotypePrinterDup3I1XListItem1);
                    fReplaceExistingDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fReplaceExistingDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fReplaceExistingDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Replace Existing File");
                }

                return fReplaceExistingDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup3I0XListItem
        /// </summary>
        public ListItem MonotypePrinterDup3I0XListItem
        {
            get
            {
                if (null == fMonotypePrinterDup3I0XListItem)
                {
                    fMonotypePrinterDup3I0XListItem = new ListItem("MonotypePrinterDup3I0XListItem", ComboBoxcboResoComboBox);
                    fMonotypePrinterDup3I0XListItem.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup3I0XListItem.UIMap.Index = 0;
                    fMonotypePrinterDup3I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                    fMonotypePrinterDup3I0XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fMonotypePrinterDup3I0XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to NormalTextBlockDup1Text
        /// </summary>
        public Text NormalTextBlockDup1Text
        {
            get
            {
                if (null == fNormalTextBlockDup1Text)
                {
                    fNormalTextBlockDup1Text = new Text("NormalTextBlockDup1Text", MonotypePrinterDup3I0XListItem);
                    fNormalTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fNormalTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Normal");
                    fNormalTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fNormalTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup4I1XListItem
        /// </summary>
        public ListItem MonotypePrinterDup4I1XListItem
        {
            get
            {
                if (null == fMonotypePrinterDup4I1XListItem)
                {
                    fMonotypePrinterDup4I1XListItem = new ListItem("MonotypePrinterDup4I1XListItem", ComboBoxcboResoComboBox);
                    fMonotypePrinterDup4I1XListItem.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup4I1XListItem.UIMap.Index = 1;
                    fMonotypePrinterDup4I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                    fMonotypePrinterDup4I1XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fMonotypePrinterDup4I1XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to FineLinesTextBlDup1Text
        /// </summary>
        public Text FineLinesTextBlDup1Text
        {
            get
            {
                if (null == fFineLinesTextBlDup1Text)
                {
                    fFineLinesTextBlDup1Text = new Text("FineLinesTextBlDup1Text", MonotypePrinterDup4I1XListItem);
                    fFineLinesTextBlDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fFineLinesTextBlDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Fine Lines");
                    fFineLinesTextBlDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fFineLinesTextBlDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup5I2XListItem
        /// </summary>
        public ListItem MonotypePrinterDup5I2XListItem
        {
            get
            {
                if (null == fMonotypePrinterDup5I2XListItem)
                {
                    fMonotypePrinterDup5I2XListItem = new ListItem("MonotypePrinterDup5I2XListItem", ComboBoxcboResoComboBox);
                    fMonotypePrinterDup5I2XListItem.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup5I2XListItem.UIMap.Index = 2;
                    fMonotypePrinterDup5I2XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                    fMonotypePrinterDup5I2XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fMonotypePrinterDup5I2XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to QuickViewTextBlDup1Text
        /// </summary>
        public Text QuickViewTextBlDup1Text
        {
            get
            {
                if (null == fQuickViewTextBlDup1Text)
                {
                    fQuickViewTextBlDup1Text = new Text("QuickViewTextBlDup1Text", MonotypePrinterDup5I2XListItem);
                    fQuickViewTextBlDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fQuickViewTextBlDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Quick View");
                    fQuickViewTextBlDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fQuickViewTextBlDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup0I0XListItem
        /// </summary>
        public ListItem MonotypePrinterDup0I0XListItemPrintQuality
        {
            get
            {
                if (null == fMonotypePrinterDup0I0XListItemPrintQuality)
                {
                    fMonotypePrinterDup0I0XListItemPrintQuality = new ListItem("MonotypePrinterDup0I0XListItemPrintQuality", ComboBoxcboResoComboBox);
                    fMonotypePrinterDup0I0XListItemPrintQuality.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup0I0XListItemPrintQuality.UIMap.Index = 0;
                    fMonotypePrinterDup0I0XListItemPrintQuality.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMonotypePrinterDup0I0XListItemPrintQuality.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                }

                return fMonotypePrinterDup0I0XListItemPrintQuality;
            }
        }

        /// <summary>
        /// Gets Reference to GeneralOfficeTeText
        /// </summary>
        public Text GeneralOfficeTeText
        {
            get
            {
                if (null == fGeneralOfficeTeText)
                {
                    fGeneralOfficeTeText = new Text("GeneralOfficeTeText", MonotypePrinterDup0I0XListItemPrintQuality);
                    fGeneralOfficeTeText.UIMap.Scope = UIASeachScope.Children;
                    fGeneralOfficeTeText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fGeneralOfficeTeText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"General Office");
                }

                return fGeneralOfficeTeText;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup1I1XListItem
        /// </summary>
        public ListItem MonotypePrinterDup1I1XListItemPrintQuality
        {
            get
            {
                if (null == fMonotypePrinterDup1I1XListItemPrintQuality)
                {
                    fMonotypePrinterDup1I1XListItemPrintQuality = new ListItem("MonotypePrinterDup1I1XListItemPrintQuality", ComboBoxcboResoComboBox);
                    fMonotypePrinterDup1I1XListItemPrintQuality.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup1I1XListItemPrintQuality.UIMap.Index = 1;
                    fMonotypePrinterDup1I1XListItemPrintQuality.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMonotypePrinterDup1I1XListItemPrintQuality.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                }

                return fMonotypePrinterDup1I1XListItemPrintQuality;
            }
        }

        /// <summary>
        /// Gets Reference to ProfessionalTexText
        /// </summary>
        public Text ProfessionalTexText
        {
            get
            {
                if (null == fProfessionalTexText)
                {
                    fProfessionalTexText = new Text("ProfessionalTexText", MonotypePrinterDup1I1XListItemPrintQuality);
                    fProfessionalTexText.UIMap.Scope = UIASeachScope.Children;
                    fProfessionalTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fProfessionalTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Professional");
                }

                return fProfessionalTexText;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup2I2XListItem
        /// </summary>
        public ListItem MonotypePrinterDup2I2XListItem
        {
            get
            {
                if (null == fMonotypePrinterDup2I2XListItem)
                {
                    fMonotypePrinterDup2I2XListItem = new ListItem("MonotypePrinterDup2I2XListItem", ComboBoxcboResoComboBox);
                    fMonotypePrinterDup2I2XListItem.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup2I2XListItem.UIMap.Index = 2;
                    fMonotypePrinterDup2I2XListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMonotypePrinterDup2I2XListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                }

                return fMonotypePrinterDup2I2XListItem;
            }
        }

        /// <summary>
        /// Gets Reference to PresentationTexText
        /// </summary>
        public Text PresentationTexText
        {
            get
            {
                if (null == fPresentationTexText)
                {
                    fPresentationTexText = new Text("PresentationTexText", MonotypePrinterDup2I2XListItem);
                    fPresentationTexText.UIMap.Scope = UIASeachScope.Children;
                    fPresentationTexText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fPresentationTexText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Presentation");
                }

                return fPresentationTexText;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboDocuComboBox
        /// </summary>
        public ComboBox ComboBoxcboDocuComboBox
        {
            get
            {
                if (null == fComboBoxcboDocuComboBox)
                {
                    fComboBoxcboDocuComboBox = new ComboBox("ComboBoxcboDocuComboBox", PaperOptionsGroGroup);
                    fComboBoxcboDocuComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboDocuComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboDocumentInputBin");
                    fComboBoxcboDocuComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                }

                return fComboBoxcboDocuComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to ColorTextBlockText
        /// </summary>
        public Text ColorTextBlockText
        {
            get
            {
                if (null == fColorTextBlockText)
                {
                    fColorTextBlockText = new Text("ColorTextBlockText", ColorTabItemColTabItem);
                    fColorTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fColorTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Color");
                    fColorTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fColorTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to ColorOptionsGroGroup
        /// </summary>
        public Group ColorOptionsGroGroup
        {
            get
            {
                if (null == fColorOptionsGroGroup)
                {
                    fColorOptionsGroGroup = new Group("ColorOptionsGroGroup", ColorTabItemColTabItem);
                    fColorOptionsGroGroup.UIMap.Scope = UIASeachScope.Children;
                    fColorOptionsGroGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Color Options");
                    fColorOptionsGroGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fColorOptionsGroGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"groupColorOptions");
                }

                return fColorOptionsGroGroup;
            }
        }
        /// <summary>
        /// Gets Reference to ComboBoxcboPrinComboBox
        /// </summary>
        public ComboBox ComboBoxcboPrinComboBoxColor
        {
            get
            {
                if (null == fComboBoxcboPrinComboBoxColor)
                {
                    fComboBoxcboPrinComboBoxColor = new ComboBox("ComboBoxcboPrinComboBoxColor", ColorOptionsGroGroup);
                    fComboBoxcboPrinComboBoxColor.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboPrinComboBoxColor.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboPrintInGrayscale");
                    fComboBoxcboPrinComboBoxColor.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                }

                return fComboBoxcboPrinComboBoxColor;
            }
        }
        /// <summary>
        /// Gets Reference to PrintinGrayscalDup0Text
        /// </summary>
        public Text PrintinGrayscalDup0Text
        {
            get
            {
                if (null == fPrintinGrayscalDup0Text)
                {
                    fPrintinGrayscalDup0Text = new Text("PrintinGrayscalDup0Text", ColorOptionsGroGroup);
                    fPrintinGrayscalDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fPrintinGrayscalDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Print in Grayscale");
                    fPrintinGrayscalDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fPrintinGrayscalDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"lblPrintInGrayscale");
                }

                return fPrintinGrayscalDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to PrintinGrayscalDup1Text
        /// </summary>
        public Text PrintinGrayscalDup1Text
        {
            get
            {
                if (null == fPrintinGrayscalDup1Text)
                {
                    fPrintinGrayscalDup1Text = new Text("PrintinGrayscalDup1Text", PrintinGrayscalDup0Text);
                    fPrintinGrayscalDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fPrintinGrayscalDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Print in Grayscale");
                    fPrintinGrayscalDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fPrintinGrayscalDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to OffListBoxItemListItem
        /// </summary>
        public ListItem OffListBoxItemListItem
        {
            get
            {
                if (null == fOffListBoxItemListItem)
                {
                    fOffListBoxItemListItem = new ListItem("OffListBoxItemListItem", ComboBoxcboPrinComboBoxColor);
                    fOffListBoxItemListItem.UIMap.Scope = UIASeachScope.Children;
                    fOffListBoxItemListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Off");
                    fOffListBoxItemListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fOffListBoxItemListItem;
            }
        }

        /// <summary>
        /// Gets Reference to OffTextBlockText
        /// </summary>
        public Text OffTextBlockTextColor
        {
            get
            {
                if (null == fOffTextBlockText)
                {
                    fOffTextBlockText = new Text("OffTextBlockTextColor", OffListBoxItemListItem);
                    fOffTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fOffTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Off");
                    fOffTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fOffTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to OnListBoxItemListItem
        /// </summary>
        public ListItem OnListBoxItemListItem
        {
            get
            {
                if (null == fOnListBoxItemListItem)
                {
                    fOnListBoxItemListItem = new ListItem("OnListBoxItemListItem", ComboBoxcboPrinComboBoxColor);
                    fOnListBoxItemListItem.UIMap.Scope = UIASeachScope.Children;
                    fOnListBoxItemListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"On");
                    fOnListBoxItemListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fOnListBoxItemListItem;
            }
        }

        /// <summary>
        /// Gets Reference to OnTextBlockText
        /// </summary>
        public Text OnTextBlockText
        {
            get
            {
                if (null == fOnTextBlockText)
                {
                    fOnTextBlockText = new Text("OnTextBlockText", OnListBoxItemListItem);
                    fOnTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fOnTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"On");
                    fOnTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fOnTextBlockText;
            }
        }
        /// <summary>
        /// Gets Reference to BlackOnlyListBoListItem
        /// </summary>
        public ListItem BlackOnlyListBoListItem
        {
            get
            {
                if (null == fBlackOnlyListBoListItem)
                {
                    fBlackOnlyListBoListItem = new ListItem("BlackOnlyListBoListItem", ComboBoxcboPrinComboBoxColor);
                    fBlackOnlyListBoListItem.UIMap.Scope = UIASeachScope.Children;
                    fBlackOnlyListBoListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Black Only");
                    fBlackOnlyListBoListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fBlackOnlyListBoListItem;
            }
        }

        /// <summary>
        /// Gets Reference to BlackOnlyTextBlText
        /// </summary>
        public Text BlackOnlyTextBlText
        {
            get
            {
                if (null == fBlackOnlyTextBlText)
                {
                    fBlackOnlyTextBlText = new Text("BlackOnlyTextBlText", BlackOnlyListBoListItem);
                    fBlackOnlyTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fBlackOnlyTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Black Only");
                    fBlackOnlyTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fBlackOnlyTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to HighQualityCMYKListItem
        /// </summary>
        public ListItem HighQualityCMYKListItem
        {
            get
            {
                if (null == fHighQualityCMYKListItem)
                {
                    fHighQualityCMYKListItem = new ListItem("HighQualityCMYKListItem", ComboBoxcboPrinComboBoxColor);
                    fHighQualityCMYKListItem.UIMap.Scope = UIASeachScope.Children;
                    fHighQualityCMYKListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"High Quality CMYK Grayscale");
                    fHighQualityCMYKListItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fHighQualityCMYKListItem;
            }
        }

        /// <summary>
        /// Gets Reference to HighQualityCMYKText
        /// </summary>
        public Text HighQualityCMYKText
        {
            get
            {
                if (null == fHighQualityCMYKText)
                {
                    fHighQualityCMYKText = new Text("HighQualityCMYKText", HighQualityCMYKListItem);
                    fHighQualityCMYKText.UIMap.Scope = UIASeachScope.Children;
                    fHighQualityCMYKText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"High Quality CMYK Grayscale");
                    fHighQualityCMYKText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fHighQualityCMYKText;
            }
        }

        /// <summary>
        /// Gets Reference to ColorThemesGrouGroup
        /// </summary>
        public Group ColorThemesGrouGroup
        {
            get
            {
                if (null == fColorThemesGrouGroup)
                {
                    fColorThemesGrouGroup = new Group("ColorThemesGrouGroup", ColorTabItemColTabItem);
                    fColorThemesGrouGroup.UIMap.Scope = UIASeachScope.Children;
                    fColorThemesGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Color Themes");
                    fColorThemesGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"GroupBox");
                    fColorThemesGrouGroup.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"groupColorThemes");
                }

                return fColorThemesGrouGroup;
            }
        }

        /// <summary>
        /// Gets Reference to ColorThemesTextText
        /// </summary>
        public Text ColorThemesTextText
        {
            get
            {
                if (null == fColorThemesTextText)
                {
                    fColorThemesTextText = new Text("ColorThemesTextText", ColorThemesGrouGroup);
                    fColorThemesTextText.UIMap.Scope = UIASeachScope.Children;
                    fColorThemesTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Color Themes");
                    fColorThemesTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fColorThemesTextText;
            }
        }

        /// <summary>
        /// Gets Reference to RGBcolorTextlblText
        /// </summary>
        public Text RGBcolorTextlblText
        {
            get
            {
                if (null == fRGBcolorTextlblText)
                {
                    fRGBcolorTextlblText = new Text("RGBcolorTextlblText", ColorThemesGrouGroup);
                    fRGBcolorTextlblText.UIMap.Scope = UIASeachScope.Children;
                    fRGBcolorTextlblText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"RGB color:");
                    fRGBcolorTextlblText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Text");
                    fRGBcolorTextlblText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"lblRGBColor");
                }

                return fRGBcolorTextlblText;
            }
        }

        /// <summary>
        /// Gets Reference to RGBcolorTextBlText
        /// </summary>
        public Text RGBcolorTextBlText
        {
            get
            {
                if (null == fRGBcolorTextBlText)
                {
                    fRGBcolorTextBlText = new Text("RGBcolorTextBlText", RGBcolorTextlblText);
                    fRGBcolorTextBlText.UIMap.Scope = UIASeachScope.Children;
                    fRGBcolorTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"RGB _color:");
                    fRGBcolorTextBlText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fRGBcolorTextBlText;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboRGBCComboBox
        /// </summary>
        public ComboBox ComboBoxcboRGBCComboBox
        {
            get
            {
                if (null == fComboBoxcboRGBCComboBox)
                {
                    fComboBoxcboRGBCComboBox = new ComboBox("ComboBoxcboRGBCComboBox", ColorThemesGrouGroup);
                    fComboBoxcboRGBCComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboRGBCComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboRGBColor");
                    fComboBoxcboRGBCComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                }

                return fComboBoxcboRGBCComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup6I0XListItem
        /// </summary>
        public ListItem MonotypePrinterDup6I0XListItemRGB
        {
            get
            {
                if (null == fMonotypePrinterDup6I0XListItemRGB)
                {
                    fMonotypePrinterDup6I0XListItemRGB = new ListItem("MonotypePrinterDup6I0XListItemRGB", ComboBoxcboRGBCComboBox);
                    fMonotypePrinterDup6I0XListItemRGB.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup6I0XListItemRGB.UIMap.Index = 0;
                    fMonotypePrinterDup6I0XListItemRGB.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                    fMonotypePrinterDup6I0XListItemRGB.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fMonotypePrinterDup6I0XListItemRGB;
            }
        }

        /// <summary>
        /// Gets Reference to DefaultsRGBTextDup1Text
        /// </summary>
        public Text DefaultsRGBTextDup1Text
        {
            get
            {
                if (null == fDefaultsRGBTextDup1Text)
                {
                    fDefaultsRGBTextDup1Text = new Text("DefaultsRGBTextDup1Text", MonotypePrinterDup6I0XListItemRGB);
                    fDefaultsRGBTextDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fDefaultsRGBTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Default (sRGB)");
                    fDefaultsRGBTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fDefaultsRGBTextDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup7I1XListItem
        /// </summary>
        public ListItem MonotypePrinterDup7I1XListItemRGB
        {
            get
            {
                if (null == fMonotypePrinterDup7I1XListItemRGB)
                {
                    fMonotypePrinterDup7I1XListItemRGB = new ListItem("MonotypePrinterDup7I1XListItemRGB", ComboBoxcboRGBCComboBox);
                    fMonotypePrinterDup7I1XListItemRGB.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup7I1XListItemRGB.UIMap.Index = 1;
                    fMonotypePrinterDup7I1XListItemRGB.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                    fMonotypePrinterDup7I1XListItemRGB.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fMonotypePrinterDup7I1XListItemRGB;
            }
        }

        /// <summary>
        /// Gets Reference to PhotosRGBTextBlDup1Text
        /// </summary>
        public Text PhotosRGBTextBlDup1Text
        {
            get
            {
                if (null == fPhotosRGBTextBlDup1Text)
                {
                    fPhotosRGBTextBlDup1Text = new Text("PhotosRGBTextBlDup1Text", MonotypePrinterDup7I1XListItemRGB);
                    fPhotosRGBTextBlDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fPhotosRGBTextBlDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Photo (sRGB)");
                    fPhotosRGBTextBlDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fPhotosRGBTextBlDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup8I2XListItem
        /// </summary>
        public ListItem MonotypePrinterDup8I2XListItemRGB
        {
            get
            {
                if (null == fMonotypePrinterDup8I2XListItemRGB)
                {
                    fMonotypePrinterDup8I2XListItemRGB = new ListItem("MonotypePrinterDup8I2XListItemRGB", ComboBoxcboRGBCComboBox);
                    fMonotypePrinterDup8I2XListItemRGB.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup8I2XListItemRGB.UIMap.Index = 2;
                    fMonotypePrinterDup8I2XListItemRGB.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                    fMonotypePrinterDup8I2XListItemRGB.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fMonotypePrinterDup8I2XListItemRGB;
            }
        }

        /// <summary>
        /// Gets Reference to PhotoAdobeRGB19Dup1Text
        /// </summary>
        public Text PhotoAdobeRGB19Dup1Text
        {
            get
            {
                if (null == fPhotoAdobeRGB19Dup1Text)
                {
                    fPhotoAdobeRGB19Dup1Text = new Text("PhotoAdobeRGB19Dup1Text", MonotypePrinterDup8I2XListItemRGB);
                    fPhotoAdobeRGB19Dup1Text.UIMap.Scope = UIASeachScope.Children;
                    fPhotoAdobeRGB19Dup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Photo (Adobe RGB 1998)");
                    fPhotoAdobeRGB19Dup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fPhotoAdobeRGB19Dup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup9I3XListItem
        /// </summary>
        public ListItem MonotypePrinterDup9I3XListItemRGB
        {
            get
            {
                if (null == fMonotypePrinterDup9I3XListItemRGB)
                {
                    fMonotypePrinterDup9I3XListItemRGB = new ListItem("MonotypePrinterDup9I3XListItemRGB", ComboBoxcboRGBCComboBox);
                    fMonotypePrinterDup9I3XListItemRGB.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup9I3XListItemRGB.UIMap.Index = 3;
                    fMonotypePrinterDup9I3XListItemRGB.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                    fMonotypePrinterDup9I3XListItemRGB.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fMonotypePrinterDup9I3XListItemRGB;
            }
        }

        /// <summary>
        /// Gets Reference to VividsRGBTextBlDup1Text
        /// </summary>
        public Text VividsRGBTextBlDup1Text
        {
            get
            {
                if (null == fVividsRGBTextBlDup1Text)
                {
                    fVividsRGBTextBlDup1Text = new Text("VividsRGBTextBlDup1Text", MonotypePrinterDup9I3XListItemRGB);
                    fVividsRGBTextBlDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fVividsRGBTextBlDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Vivid (sRGB)");
                    fVividsRGBTextBlDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fVividsRGBTextBlDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup10I4XListItem
        /// </summary>
        public ListItem MonotypePrinterDup10I4XListItemRGB
        {
            get
            {
                if (null == fMonotypePrinterDup10I4XListItemRGB)
                {
                    fMonotypePrinterDup10I4XListItemRGB = new ListItem("MonotypePrinterDup10I4XListItemRGB", ComboBoxcboRGBCComboBox);
                    fMonotypePrinterDup10I4XListItemRGB.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup10I4XListItemRGB.UIMap.Index = 4;
                    fMonotypePrinterDup10I4XListItemRGB.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                    fMonotypePrinterDup10I4XListItemRGB.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fMonotypePrinterDup10I4XListItemRGB;
            }
        }

        /// <summary>
        /// Gets Reference to NoneTextBlockDup1Text
        /// </summary>
        public Text NoneTextBlockDup1Text
        {
            get
            {
                if (null == fNoneTextBlockDup1Text)
                {
                    fNoneTextBlockDup1Text = new Text("NoneTextBlockDup1Text", MonotypePrinterDup10I4XListItemRGB);
                    fNoneTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fNoneTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"None");
                    fNoneTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fNoneTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup11I5XListItem
        /// </summary>
        public ListItem MonotypePrinterDup11I5XListItemRGB
        {
            get
            {
                if (null == fMonotypePrinterDup11I5XListItemRGB)
                {
                    fMonotypePrinterDup11I5XListItemRGB = new ListItem("MonotypePrinterDup11I5XListItemRGB", ComboBoxcboRGBCComboBox);
                    fMonotypePrinterDup11I5XListItemRGB.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup11I5XListItemRGB.UIMap.Index = 5;
                    fMonotypePrinterDup11I5XListItemRGB.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                    fMonotypePrinterDup11I5XListItemRGB.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                }

                return fMonotypePrinterDup11I5XListItemRGB;
            }
        }

        /// <summary>
        /// Gets Reference to CustomprofileTeDup1Text
        /// </summary>
        public Text CustomprofileTeDup1Text
        {
            get
            {
                if (null == fCustomprofileTeDup1Text)
                {
                    fCustomprofileTeDup1Text = new Text("CustomprofileTeDup1Text", MonotypePrinterDup11I5XListItemRGB);
                    fCustomprofileTeDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fCustomprofileTeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Custom profile");
                    fCustomprofileTeDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                }

                return fCustomprofileTeDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to ComboBoxcboRastComboBox
        /// </summary>
        public ComboBox ComboBoxcboRastComboBox
        {
            get
            {
                if (null == fComboBoxcboRastComboBox)
                {
                    fComboBoxcboRastComboBox = new ComboBox("ComboBoxcboRastComboBox", AdvancedGroupBoGroup);
                    fComboBoxcboRastComboBox.UIMap.Scope = UIASeachScope.Children;
                    fComboBoxcboRastComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fComboBoxcboRastComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"cboRasterCompression");
                }

                return fComboBoxcboRastComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup3I0XListItem
        /// </summary>
        public ListItem MonotypePrinterDup3I0XListItemRast
        {
            get
            {
                if (null == fMonotypePrinterDup3I0XListItem1)
                {
                    fMonotypePrinterDup3I0XListItem1 = new ListItem("MonotypePrinterDup3I0XListItemRast", ComboBoxcboRastComboBox);
                    fMonotypePrinterDup3I0XListItem1.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup3I0XListItem1.UIMap.Index = 0;
                    fMonotypePrinterDup3I0XListItem1.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMonotypePrinterDup3I0XListItem1.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                }

                return fMonotypePrinterDup3I0XListItem1;
            }
        }

        /// <summary>
        /// Gets Reference to AutomaticTextBlDup1Text
        /// </summary>
        public Text AutomaticTextBlDup1Text
        {
            get
            {
                if (null == fAutomaticTextBlDup1Text)
                {
                    fAutomaticTextBlDup1Text = new Text("AutomaticTextBlDup1Text", MonotypePrinterDup3I0XListItemRast);
                    fAutomaticTextBlDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fAutomaticTextBlDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAutomaticTextBlDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Automatic");
                }

                return fAutomaticTextBlDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup4I1XListItem
        /// </summary>
        public ListItem MonotypePrinterDup4I1XListItemRast
        {
            get
            {
                if (null == fMonotypePrinterDup4I1XListItemRast)
                {
                    fMonotypePrinterDup4I1XListItemRast = new ListItem("MonotypePrinterDup4I1XListItemRast", ComboBoxcboRastComboBox);
                    fMonotypePrinterDup4I1XListItemRast.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup4I1XListItemRast.UIMap.Index = 1;
                    fMonotypePrinterDup4I1XListItemRast.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMonotypePrinterDup4I1XListItemRast.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                }

                return fMonotypePrinterDup4I1XListItemRast;
            }
        }

        /// <summary>
        /// Gets Reference to BestQualityTextDup1Text
        /// </summary>
        public Text BestQualityTextDup1Text
        {
            get
            {
                if (null == fBestQualityTextDup1Text)
                {
                    fBestQualityTextDup1Text = new Text("BestQualityTextDup1Text", MonotypePrinterDup4I1XListItemRast);
                    fBestQualityTextDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fBestQualityTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fBestQualityTextDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Best Quality");
                }

                return fBestQualityTextDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to MonotypePrinterDup5I2XListItem
        /// </summary>
        public ListItem MonotypePrinterDup5I2XListItemRast
        {
            get
            {
                if (null == fMonotypePrinterDup5I2XListItemRast)
                {
                    fMonotypePrinterDup5I2XListItemRast = new ListItem("MonotypePrinterDup5I2XListItemRast", ComboBoxcboRastComboBox);
                    fMonotypePrinterDup5I2XListItemRast.UIMap.Scope = UIASeachScope.Children;
                    fMonotypePrinterDup5I2XListItemRast.UIMap.Index = 2;
                    fMonotypePrinterDup5I2XListItemRast.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBoxItem");
                    fMonotypePrinterDup5I2XListItemRast.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Monotype.PrinterExtension.PrintSchemaOption");
                }

                return fMonotypePrinterDup5I2XListItemRast;
            }
        }

        /// <summary>
        /// Gets Reference to MaximumCompressDup1Text
        /// </summary>
        public Text MaximumCompressDup1Text
        {
            get
            {
                if (null == fMaximumCompressDup1Text)
                {
                    fMaximumCompressDup1Text = new Text("MaximumCompressDup1Text", MonotypePrinterDup5I2XListItemRast);
                    fMaximumCompressDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fMaximumCompressDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fMaximumCompressDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximum Compression");
                }

                return fMaximumCompressDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to YesButton6Button
        /// </summary>
        public Button YesButton6Button
        {
            get
            {
                if (null == fYesButton6Button)
                {
                    fYesButton6Button = new Button("YesButton6Button", SelectionsconflWindow);
                    fYesButton6Button.UIMap.Scope = UIASeachScope.Children;
                    fYesButton6Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fYesButton6Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Yes");
                    fYesButton6Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"6");
                }

                return fYesButton6Button;
            }
        }
    }
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using HP.ScalableTest.Email;
using HP.ScalableTest.Print;
using HP.ScalableTest.Framework;
using HP.ScalableTest.Framework.Assets;
using HP.ScalableTest.Framework.Data;
using HP.ScalableTest.Framework.Documents;
using HP.ScalableTest.Framework.Plugin;
using HP.ScalableTest.Framework.Synchronization;
using HP.ScalableTest.Utility;

namespace HP.ScalableTest.Plugin.EPrint
{
    /// <summary>
    /// ePrint Execution Control.
    /// </summary>
    [ToolboxItem(false)]
    public partial class EPrintExecutionControl : UserControl, IPluginExecutionEngine
    {
        private PluginExecutionData _executionData = null;
        private IEmailController _emailController = null;
        private string _emailSubject = null;

        public EPrintExecutionControl()
        {
            InitializeComponent();
        }

        public PluginExecutionResult Execute(PluginExecutionData executionData)
        {
            _executionData = executionData;
            EPrintActivityData activityData = _executionData.GetMetadata<EPrintActivityData>();

            IAssetInfo assetInfo = _executionData.Assets.GetRandom();

            if (_emailController == null)
            {
                ServerInfo exchangeServerInfo = _executionData.Servers.Where(s => s.HostName.Contains("EXCHANGE", StringComparison.InvariantCultureIgnoreCase)).First();
                ConfigureEmailController(exchangeServerInfo, executionData.Credential);
            }

            if (_emailSubject == null)
            {
                _emailSubject = "SessionId:" + _executionData.SessionId;
            }

            UpdateUI(activityData.PrinterEmail);
            LogUsageData(assetInfo, _executionData.Servers);

            //Prepare the email attachments 
            List<UniqueFile> attachments = null;

            // Lock the document pool so that we don't get conflicts with other users.
            ExecutionServices.CriticalSection.Run(new LocalLockToken("LocalDocument", new TimeSpan(0, 5, 0), new TimeSpan(0, 5, 0)), () =>
            {
                attachments = PrepareDocuments(activityData.NumberOfDocuments);
            });

            //Send the email
            SendEmail(activityData.PrinterEmail, _emailSubject, "Auto-generated by STF", attachments.ConvertAll(x => x.FileInfo));
            LogAttachments(attachments, activityData);

            CleanupPrintJobs(attachments);

            // Check email responses from the ePrint server
            Task.Factory.StartNew(() => CheckForServerResponses());

            return new PluginExecutionResult(PluginResult.Passed);
        }

        private void SendEmail(string toAddress, string subject, string bodyText, List<FileInfo> attachments)
        {
            using (MailMessage message = new MailMessage())
            {
                message.To.Add(toAddress);
                message.Subject = subject;
                message.Body = bodyText;

                if (attachments != null && attachments.Count > 0)
                {
                    _emailController.Send(message, attachments);
                }
            }
        }

        private void UpdateUI(string printerEmail)
        {
            sessionIdName_Label.Text = _executionData.SessionId;
            ePrintServerName_Label.Text = _executionData.Servers.FirstOrDefault().HostName;
            inventoryIdName_Label.Text = _executionData.Assets.FirstOrDefault().AssetId;
            eMailName_Label.Text = printerEmail;

            foreach (Document document in _executionData.Documents)
            {
                docs_ListBox.Items.Add(document.FileName);
            }
        }

        private void ConfigureEmailController(ServerInfo serverInfo, NetworkCredential credential)
        {
            Action action = new Action(() =>
            {
                ExchangeConnectionSettings settings = new ExchangeConnectionSettings(serverInfo);
                _emailController = new ExchangeEmailController(credential, settings);
            });

            // For some reason, Autodiscover hangs when we do not have this local lock in place.
            // Putting the lock in, then Autodiscover no longer hangs. 
            ExecutionServices.CriticalSection.Run(new ExchangeAutodiscoverLockToken(new TimeSpan(0, 8, 0), new TimeSpan(0, 5, 0)), action);
        }

        private void LogUsageData(IAssetInfo asset, ServerInfoCollection servers)
        {
            //Log device usage
            ActivityExecutionAssetUsageLog deviceLog = new ActivityExecutionAssetUsageLog(_executionData, asset);
            ExecutionServices.DataLogger.Submit(deviceLog);

            //Log Server usage
            foreach (ServerInfo server in servers)
            {
                ActivityExecutionServerUsageLog serverLog = new ActivityExecutionServerUsageLog(_executionData, server);
                ExecutionServices.DataLogger.Submit(serverLog);
            }
        }

        /// <summary>
        /// Creates log entries for each attachment on the email.
        /// </summary>
        /// <param name="attachments">The attachments</param>
        /// <param name="ePrintData">The ePrintActivityData</param>
        private void LogAttachments(List<UniqueFile> attachments, EPrintActivityData activityData)
        {
            // Log each attachment as it's own print job
            foreach (UniqueFile printJob in attachments)
            {
                LogPrintJobData(printJob, activityData);
            }
        }

        private void LogPrintJobData(UniqueFile printJob, EPrintActivityData activityData)
        {
            PrintJobClientLog printJobClientLog = new PrintJobClientLog(_executionData, printJob, activityData.PrinterEmail, "ePrint", printJob.Id);

            try
            {
                ExecutionServices.DataLogger.Submit(printJobClientLog);
            }
            catch (Exception ex)
            {
                ExecutionServices.SystemTrace.LogError("Failed to log PrintJobClientLog data.", ex);
            }
        }

        private List<UniqueFile> PrepareDocuments(int numberOf)
        {
            List<UniqueFile> attachments = new List<UniqueFile>();
            for (int i = 0; i < numberOf; i++)
            {
                Document document = _executionData.Documents.GetRandom();
                if (document != null)
                {
                    FileInfo fileInfo = ExecutionServices.FileRepository.GetFile(document);

                    //Create a Print Job
                    attachments.Add(UniqueFile.Create(fileInfo));
                }
            }
            return attachments;
        }

        private void UpdateStatus(string text)
        {
            //Check for UI thread
            if (status_TextBox.InvokeRequired)
            {
                status_TextBox.Invoke(new MethodInvoker(() => UpdateStatus(text)));
            }
            else
            {
                StringBuilder logText = new StringBuilder(DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.fff"));
                logText.Append("  ");
                logText.AppendLine(text);
                status_TextBox.SuspendLayout();
                status_TextBox.AppendText(logText.ToString());
                status_TextBox.ResumeLayout();
                status_TextBox.ClearUndo();
                ExecutionServices.SystemTrace.LogDebug(text);
            }
        }

        private static void CleanupPrintJobs(List<UniqueFile> printJobs)
        {
            foreach (FileInfo printJob in printJobs)
            {
                ThreadPool.QueueUserWorkItem(new WaitCallback(fileDeleteWorker_DoWork), printJob.FullName);
            }
        }

        private static void fileDeleteWorker_DoWork(object fileAsObject)
        {
            try
            {
                string filename = (string)fileAsObject;

                while (true)
                {
                    try
                    {
                        File.Delete(filename);
                        ExecutionServices.SystemTrace.LogDebug("Deleted file: " + filename);
                        return;
                    }
                    catch (UnauthorizedAccessException)
                    {
                        Thread.Sleep(5 * 1000);
                    }
                    catch (IOException)
                    {
                        Thread.Sleep(5 * 1000);
                    }
                }
            }
            catch (Exception ex)
            {
                // If we simply re-throw the exception, the application will die.  Since this operation is to simply
                // delete a file, we do not want the application to die because of it.
                ExecutionServices.SystemTrace.LogError("Ignoring exception", ex);
            }
        }

        private void CheckForServerResponses()
        {
            EmailResponseManager manager = new EmailResponseManager(_emailController);
            manager.EmailResponseReceived += ResponseManager_EmailResponseReceived;
            manager.CheckForEmailResponse();
        }

        private void ResponseManager_EmailResponseReceived(object sender, StatusChangedEventArgs e)
        {
            UpdateStatus(e.StatusMessage);
        }
    }
}

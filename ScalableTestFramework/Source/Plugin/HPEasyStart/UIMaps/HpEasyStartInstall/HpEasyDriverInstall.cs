//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------

using HP.ScalableTest.Framework.Plugin;
using TopCat.TestApi.Enums;

namespace HP.ScalableTest.Plugin.HpEasyStart.UIMaps
{
    using System;
    using System.Diagnostics;
    using System.IO;
    using System.Linq;
    using System.Text.RegularExpressions;
    using System.Threading;
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;
    using Utility;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class HpEasyDriverInstall:UIMap
    {
        /// <summary>
        /// IP Address of the device
        /// </summary>
        private string _ipAddress;

        /// <summary>
        /// Whether the test page has to be printed
        /// </summary>
        private bool _printTestPage;

        /// <summary>
        /// Whether the driver has to be set as default
        /// </summary>
        private bool _setAsDefaultDriver;

        /// <summary>
        /// Model name of the device
        /// </summary>
        private string _modelName;

        /// <summary>
        /// Initializes a new instance of the <see cref="HpEasyDriverInstall"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public HpEasyDriverInstall(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HpEasyDriverInstall"/> class using the default UIAFramework.
        /// </summary>
        public HpEasyDriverInstall()
        {
            Desktop = new Desktop();
        }

        public HpEasyDriverInstall(string Screen, string ipAddress, string modelName, bool printTestPage, bool defaultDriver)
        {
            Desktop = new Desktop(UIAFramework.ManagedUIA);
            ScreenName = Screen;
            _ipAddress = ipAddress;
            _printTestPage = printTestPage;
            _setAsDefaultDriver = defaultDriver;
            _modelName = modelName;
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }


        /// <summary>
        /// Performs the installation of Driver and addition of device.
        /// </summary>
        public override PluginExecutionResult PerformAction()
        {
            Retry.UntilTrue(() => KillProcessByName(), 3600, TimeSpan.FromSeconds(1));
            string msiFilename = string.Empty;
            ProcessExecutionResult result;
            DirectoryInfo dir = new DirectoryInfo(Path.GetTempPath());
            string msiDirectories = dir.EnumerateDirectories()
                .OrderBy(d => d.CreationTime)
                .Where(d => d.Name.StartsWith("7z"))
                .Last().FullName;

            string[] msiFileList = Directory.GetFiles(msiDirectories, "*.msi");
            foreach (string name in msiFileList)
            {
                if (name.Contains("x64"))
                {
                    msiFilename = name;
                }
            }

            Process driverInstallation = new Process();
            driverInstallation.StartInfo.FileName = "msiexec.exe";
            driverInstallation.StartInfo.WorkingDirectory = Path.GetTempPath();
            driverInstallation.StartInfo.Arguments = $"/i {msiFilename} ENTERPRISE=YES";
            driverInstallation.StartInfo.Verb = "runas";
            driverInstallation.Start();
            driverInstallation.WaitForExit();
            if (driverInstallation.ExitCode != 0)
            {
                return new PluginExecutionResult(PluginResult.Failed);
            }

            DirectoryInfo deviceDirectories = new DirectoryInfo(@"C:\Program Files\HP");
            string directoriesname = deviceDirectories.EnumerateDirectories()
                .OrderBy(d => d.CreationTime)
                .Last().FullName;

            Process deviceAddtion = new Process();
            string command = $"START /WAIT /D\"{ directoriesname}\\Bin\" DeviceSetup.exe /networkaddress { _ipAddress }";
            deviceAddtion.StartInfo.Arguments = command;
            deviceAddtion.StartInfo.Verb = "runas";
            deviceAddtion.StartInfo.FileName = "DeviceSetup.exe";
            deviceAddtion.StartInfo.WorkingDirectory = $"{directoriesname}\\Bin";
            deviceAddtion.Start();
            deviceAddtion.WaitForExit();
            string installedPrinterName = string.Empty;
            if (deviceAddtion.ExitCode != 0)
            {
                return new PluginExecutionResult(PluginResult.Failed);
            }

            Thread.Sleep(TimeSpan.FromMinutes(1.5));
            string modelNumber = string.Empty;
            string[] modelnumbers = Regex.Split(_modelName, @"\D+");
            foreach (var value in modelnumbers)
            {
                if (!string.IsNullOrEmpty(value))
                {
                    modelNumber = value.Substring(0, 2);
                }
            }

            foreach (string printerName in System.Drawing.Printing.PrinterSettings.InstalledPrinters)
            {
                if (printerName.Contains(modelNumber))
                {
                    installedPrinterName = printerName;
                    break;
                }
            }

            if (_setAsDefaultDriver)
            {
                result = ProcessUtil.Execute("cmd.exe", $"/C RUNDLL32 PRINTUI.DLL,PrintUIEntry /y /n \"{installedPrinterName}\"", TimeSpan.FromSeconds(60));
                if (result.ExitCode != 0)
                {
                    return new PluginExecutionResult(PluginResult.Failed);
                }
            }
            if (_printTestPage)
            {
                result = ProcessUtil.Execute("cmd.exe", $"/C RUNDLL32 PRINTUI.DLL,PrintUIEntry /k /n \"{installedPrinterName}\"", TimeSpan.FromSeconds(150));
                if (result.ExitCode != 0)
                {
                    return new PluginExecutionResult(PluginResult.Failed);
                }
            }

            return new PluginExecutionResult(PluginResult.Passed);
        }

        /// <summary>
        /// checks if the process is HP-DQEX5 or not.
        /// </summary>
        public bool KillProcessByName()
        {
            Process[] result = Process.GetProcessesByName("HP-DQEX5");
            if (result.Count() == 0)
            {
                return false;
            }
            else
            {
                foreach (var process in Process.GetProcessesByName("HP-DQEX5"))
                {
                    Thread.Sleep(100);
                    process.Kill();
                }
                return true;
            }
        }
    }
}

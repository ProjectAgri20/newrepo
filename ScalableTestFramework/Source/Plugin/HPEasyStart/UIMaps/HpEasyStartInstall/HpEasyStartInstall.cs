//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------

using HP.ScalableTest.Framework.Plugin;
using TopCat.TestApi.Enums;

namespace HP.ScalableTest.Plugin.HpEasyStart.UIMaps
{
    using System.Threading;
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class HpEasyStartInstall:UIMap
    {
        private string _ipAddress;
        /// <summary>
        /// Backing field for HPEasyStartWindWindow property
        /// </summary>
        private Window fHPEasyStartWindWindow;

        /// <summary>
        /// Backing field for HPEasyStartTextText property
        /// </summary>
        private Text fHPEasyStartTextText;

        /// <summary>
        /// Backing field for ButtonMinimizeButton property
        /// </summary>
        private Button fButtonMinimizeButton;

        /// <summary>
        /// Backing field for ImageMinimizeImage property
        /// </summary>
        private Image fImageMinimizeImage;

        /// <summary>
        /// Backing field for ButtonExitButton property
        /// </summary>
        private Button fButtonExitButton;

        /// <summary>
        /// Backing field for ImageCloseDup0Image property
        /// </summary>
        private Image fImageCloseDup0Image;

        /// <summary>
        /// Backing field for ImageHpLogoImage property
        /// </summary>
        private Image fImageHpLogoImage;

        /// <summary>
        /// Backing field for ImageDup0Image property
        /// </summary>
        private Image fImageDup0Image;

        /// <summary>
        /// Backing field for HPEasyStartencoText property
        /// </summary>
        private Text fHPEasyStartencoText;

        /// <summary>
        /// Backing field for HPEasyStartdidnText property
        /// </summary>
        private Text fHPEasyStartdidnText;

        /// <summary>
        /// Backing field for SeparatorDup0I0XSeparator property
        /// </summary>
        private Separator fSeparatorDup0I0XSeparator;

        /// <summary>
        /// Backing field for CloseDup0I0XButton property
        /// </summary>
        private Button fCloseDup0I0XButton;

        /// <summary>
        /// Backing field for CloseTextBlockDup0Text property
        /// </summary>
        private Text fCloseTextBlockDup0Text;

        /// <summary>
        /// Backing field for WelcomeViewCustom property
        /// </summary>
        private Custom fWelcomeViewCustom;

        /// <summary>
        /// Backing field for UserProgressVieCustom property
        /// </summary>
        private Custom fUserProgressVieCustom;

        /// <summary>
        /// Backing field for ProgressBarProgressBar property
        /// </summary>
        private ProgressBar fProgressBarProgressBar;

        /// <summary>
        /// Backing field for NextAgreementsTText property
        /// </summary>
        private Text fNextAgreementsTText;

        /// <summary>
        /// Backing field for SeparatorDup1Separator property
        /// </summary>
        private Separator fSeparatorDup1Separator;

        /// <summary>
        /// Backing field for ReadytosetupyouText property
        /// </summary>
        private Text fReadytosetupyouText;

        /// <summary>
        /// Backing field for IfyouveunpackedText property
        /// </summary>
        private Text fIfyouveunpackedText;

        /// <summary>
        /// Backing field for ClickContinuetoDup0Text property
        /// </summary>
        private Text fClickContinuetoDup0Text;

        /// <summary>
        /// Backing field for ImageDup1Image property
        /// </summary>
        private Image fImageDup1Image;

        /// <summary>
        /// Backing field for SeparatorDup2Separator property
        /// </summary>
        private Separator fSeparatorDup2Separator;

        /// <summary>
        /// Backing field for ContinueButtonCDup0Button property
        /// </summary>
        private Button fContinueButtonCDup0Button;

        /// <summary>
        /// Backing field for ContinueTextBloDup0Text property
        /// </summary>
        private Text fContinueTextBloDup0Text;

        /// <summary>
        /// Backing field for ExitTextBlockExText property
        /// </summary>
        private Text fExitTextBlockExText;

        /// <summary>
        /// Backing field for ButtonDup0I0XButton property
        /// </summary>
        private Button fButtonDup0I0XButton;

        /// <summary>
        /// Backing field for ImageCloseDup1Image property
        /// </summary>
        private Image fImageCloseDup1Image;

        /// <summary>
        /// Backing field for SeparatorDup3I1XSeparator property
        /// </summary>
        private Separator fSeparatorDup3I1XSeparator;

        /// <summary>
        /// Backing field for ScrollViewerDup0I0XPane property
        /// </summary>
        private Pane fScrollViewerDup0I0XPane;

        /// <summary>
        /// Backing field for AreyousureyouwaText property
        /// </summary>
        private Text fAreyousureyouwaText;

        /// <summary>
        /// Backing field for IfyoucloseHPEasDup0Text property
        /// </summary>
        private Text fIfyoucloseHPEasDup0Text;

        /// <summary>
        /// Backing field for IfavailableyoumText property
        /// </summary>
        private Text fIfavailableyoumText;

        /// <summary>
        /// Backing field for ClickContinuetoDup1Text property
        /// </summary>
        private Text fClickContinuetoDup1Text;

        /// <summary>
        /// Backing field for ScrollBarVerticDup0ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup0ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup0ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup0ScrollBar;

        /// <summary>
        /// Backing field for SeparatorDup4I2XSeparator property
        /// </summary>
        private Separator fSeparatorDup4I2XSeparator;

        /// <summary>
        /// Backing field for CloseDup1I1XButton property
        /// </summary>
        private Button fCloseDup1I1XButton;

        /// <summary>
        /// Backing field for CloseTextBlockDup1Text property
        /// </summary>
        private Text fCloseTextBlockDup1Text;

        /// <summary>
        /// Backing field for ContinueButtonCDup1Button property
        /// </summary>
        private Button fContinueButtonCDup1Button;

        /// <summary>
        /// Backing field for ContinueTextBloDup1Text property
        /// </summary>
        private Text fContinueTextBloDup1Text;

        /// <summary>
        /// Backing field for ExitTextBlockText property
        /// </summary>
        private Text fExitTextBlockText;

        /// <summary>
        /// Backing field for ButtonDup1I1XButton property
        /// </summary>
        private Button fButtonDup1I1XButton;

        /// <summary>
        /// Backing field for ImageCloseDup2Image property
        /// </summary>
        private Image fImageCloseDup2Image;

        /// <summary>
        /// Backing field for SeparatorDup5I3XSeparator property
        /// </summary>
        private Separator fSeparatorDup5I3XSeparator;

        /// <summary>
        /// Backing field for ScrollViewerDup1I1XPane property
        /// </summary>
        private Pane fScrollViewerDup1I1XPane;

        /// <summary>
        /// Backing field for SetupnotcompletText property
        /// </summary>
        private Text fSetupnotcompletText;

        /// <summary>
        /// Backing field for IfyoucloseHPEasDup1Text property
        /// </summary>
        private Text fIfyoucloseHPEasDup1Text;

        /// <summary>
        /// Backing field for EventhoughyouhaText property
        /// </summary>
        private Text fEventhoughyouhaText;

        /// <summary>
        /// Backing field for ClickContinuetoDup2Text property
        /// </summary>
        private Text fClickContinuetoDup2Text;

        /// <summary>
        /// Backing field for ScrollBarVerticDup1ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarVerticDup1ScrollBar;

        /// <summary>
        /// Backing field for ScrollBarHorizoDup1ScrollBar property
        /// </summary>
        private ScrollBar fScrollBarHorizoDup1ScrollBar;

        /// <summary>
        /// Backing field for SeparatorDup6I4XSeparator property
        /// </summary>
        private Separator fSeparatorDup6I4XSeparator;

        /// <summary>
        /// Backing field for CloseDup2I2XButton property
        /// </summary>
        private Button fCloseDup2I2XButton;

        /// <summary>
        /// Backing field for CloseTextBlockDup2Text property
        /// </summary>
        private Text fCloseTextBlockDup2Text;

        /// <summary>
        /// Backing field for ContinueButton property
        /// </summary>
        private Button fContinueButton;

        /// <summary>
        /// Backing field for IhavereviewedanCheckBox property
        /// </summary>
        private CheckBox fIhavereviewedanCheckBox;

        /// <summary>
        /// Backing field for P10111597 property
        /// </summary>
        private Text fP10111597;

        /// <summary>
        /// Backing field for ContinueTextBloDup2Text property
        /// </summary>
        private Text fContinueTextBloDup2Text;

        /// <summary>
        /// Backing field for RefreshButtonReButton property
        /// </summary>
        private Button fRefreshButtonReButton;

        /// <summary>
        /// Backing field for MyPrinterIsNotSButton property
        /// </summary>
        private Button fMyPrinterIsNotSButton;

        /// <summary>
        /// Backing field for SearchbyPrinterButton property
        /// </summary>
        private Button fSearchbyPrinterButton;

        /// <summary>
        /// Backing field for TextBoxTextEdit property
        /// </summary>
        private Edit fTextBoxTextEdit;

        /// <summary>
        /// Backing field for CheckBoxWelcomeCheckBox property
        /// </summary>
        private CheckBox fCheckBoxWelcomeCheckBox;

        /// <summary>
        /// Backing field for IpSearchButton property
        /// </summary>
        private Button fIpSearchButton;

        /// <summary>
        /// Backing field for SoftwareOptionsCustom property
        /// </summary>
        private Custom fSoftwareOptionsCustom;

        /// <summary>
        /// Backing field for SingleNetworkPrCustom property
        /// </summary>
        private Custom fSingleNetworkPrCustom;

        /// <summary>
        /// Backing field for ProductOffersViCustom property
        /// </summary>
        private Custom fProductOffersViCustom;

        /// <summary>
        /// Backing field for HwndHostOwsWebBPane property
        /// </summary>
        private Pane fHwndHostOwsWebBPane;

        /// <summary>
        /// Backing field for ShellEmbeddingPane property
        /// </summary>
        private Pane fShellEmbeddingPane;

        /// <summary>
        /// Backing field for ShellDocObjectVPane property
        /// </summary>
        private Pane fShellDocObjectVPane;

        /// <summary>
        /// Backing field for SkipwithoutactiButton property
        /// </summary>
        private Button fSkipwithoutactiButton;

        /// <summary>
        /// Backing field for HPProductSetupIPane property
        /// </summary>
        private Pane fHPProductSetupIPane;

        /// <summary>
        /// Backing field for AdvancedSearchButton property
        /// </summary>
        private Button fAdvancedSearchButton;

        /// <summary>
        /// Backing field for ChoosePrinterViCustom property
        /// </summary>
        private Custom fChoosePrinterViCustom;

        /// <summary>
        /// Backing field for TextBoxIpTextEdit property
        /// </summary>
        private Edit fTextBoxIpTextEdit;

        /// <summary>
        /// Backing field for ScrollViewerDup1I1XPane1 property
        /// </summary>
        private Pane fScrollViewerDup1I1XPane1;

        /// <summary>
        /// Initializes a new instance of the <see cref="HpEasyStartInstall"/> class. 
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public HpEasyStartInstall(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HpEasyStartInstall"/> class using the default UIAFramework.
        /// </summary>
        public HpEasyStartInstall()
        {
            Desktop = new Desktop();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HpEasyDriverInstall"/> class.
        /// </summary>
        /// <param name="Screen"></param>
        /// <param name="IpAddress"></param>
        public HpEasyStartInstall(string Screen, string IpAddress)
        {
            Desktop = new Desktop(UIAFramework.ManagedUIA);
            ScreenName = Screen;
            _ipAddress = IpAddress;
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window HPEasyStartWindWindow
        {
            get
            {
                if (null == fHPEasyStartWindWindow)
                {
                    fHPEasyStartWindWindow = new Window("HPEasyStartWindWindow", Desktop);
                    fHPEasyStartWindWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPEasyStartWindWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Window");
                    fHPEasyStartWindWindow.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"MainWindow");
                    fHPEasyStartWindWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Easy Start");
                }

                return fHPEasyStartWindWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HPEasyStartTextText
        {
            get
            {
                if (null == fHPEasyStartTextText)
                {
                    fHPEasyStartTextText = new Text("HPEasyStartTextText", HPEasyStartWindWindow);
                    fHPEasyStartTextText.UIMap.Scope = UIASeachScope.Children;
                    fHPEasyStartTextText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHPEasyStartTextText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AppTitle");
                    fHPEasyStartTextText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Easy Start");
                }

                return fHPEasyStartTextText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ButtonMinimizeButton
        {
            get
            {
                if (null == fButtonMinimizeButton)
                {
                    fButtonMinimizeButton = new Button("ButtonMinimizeButton", HPEasyStartWindWindow);
                    fButtonMinimizeButton.UIMap.Scope = UIASeachScope.Children;
                    fButtonMinimizeButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButtonMinimizeButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"MinimizeButton");
                }

                return fButtonMinimizeButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageMinimizeImage
        {
            get
            {
                if (null == fImageMinimizeImage)
                {
                    fImageMinimizeImage = new Image("ImageMinimizeImage", ButtonMinimizeButton);
                    fImageMinimizeImage.UIMap.Scope = UIASeachScope.Children;
                    fImageMinimizeImage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImageMinimizeImage.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                }

                return fImageMinimizeImage;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ButtonExitButton
        {
            get
            {
                if (null == fButtonExitButton)
                {
                    fButtonExitButton = new Button("ButtonExitButton", HPEasyStartWindWindow);
                    fButtonExitButton.UIMap.Scope = UIASeachScope.Children;
                    fButtonExitButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButtonExitButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ExitButton");
                }

                return fButtonExitButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageCloseDup0Image
        {
            get
            {
                if (null == fImageCloseDup0Image)
                {
                    fImageCloseDup0Image = new Image("ImageCloseDup0Image", ButtonExitButton);
                    fImageCloseDup0Image.UIMap.Scope = UIASeachScope.Children;
                    fImageCloseDup0Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImageCloseDup0Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                }

                return fImageCloseDup0Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageHpLogoImage
        {
            get
            {
                if (null == fImageHpLogoImage)
                {
                    fImageHpLogoImage = new Image("ImageHpLogoImage", HPEasyStartWindWindow);
                    fImageHpLogoImage.UIMap.Scope = UIASeachScope.Children;
                    fImageHpLogoImage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImageHpLogoImage.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HpLogo");
                }

                return fImageHpLogoImage;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup0Image
        {
            get
            {
                if (null == fImageDup0Image)
                {
                    fImageDup0Image = new Image("ImageDup0Image", HPEasyStartWindWindow);
                    fImageDup0Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup0Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup0Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HPEasyStartencoText
        {
            get
            {
                if (null == fHPEasyStartencoText)
                {
                    fHPEasyStartencoText = new Text("HPEasyStartencoText", HPEasyStartWindWindow);
                    fHPEasyStartencoText.UIMap.Scope = UIASeachScope.Children;
                    fHPEasyStartencoText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHPEasyStartencoText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Easy Start encountered an error");
                }

                return fHPEasyStartencoText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text HPEasyStartdidnText
        {
            get
            {
                if (null == fHPEasyStartdidnText)
                {
                    fHPEasyStartdidnText = new Text("HPEasyStartdidnText", HPEasyStartWindWindow);
                    fHPEasyStartdidnText.UIMap.Scope = UIASeachScope.Children;
                    fHPEasyStartdidnText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fHPEasyStartdidnText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Easy Start did not initialize properly. Please close the application and try restarting it.");
                }

                return fHPEasyStartdidnText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Separator SeparatorDup0I0XSeparator
        {
            get
            {
                if (null == fSeparatorDup0I0XSeparator)
                {
                    fSeparatorDup0I0XSeparator = new Separator("SeparatorDup0I0XSeparator", HPEasyStartWindWindow);
                    fSeparatorDup0I0XSeparator.UIMap.Scope = UIASeachScope.Children;
                    fSeparatorDup0I0XSeparator.UIMap.Index = 0;
                    fSeparatorDup0I0XSeparator.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Separator");
                }

                return fSeparatorDup0I0XSeparator;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseDup0I0XButton
        {
            get
            {
                if (null == fCloseDup0I0XButton)
                {
                    fCloseDup0I0XButton = new Button("CloseDup0I0XButton", HPEasyStartWindWindow);
                    fCloseDup0I0XButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseDup0I0XButton.UIMap.Index = 0;
                    fCloseDup0I0XButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCloseDup0I0XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseDup0I0XButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CloseTextBlockDup0Text
        {
            get
            {
                if (null == fCloseTextBlockDup0Text)
                {
                    fCloseTextBlockDup0Text = new Text("CloseTextBlockDup0Text", CloseDup0I0XButton);
                    fCloseTextBlockDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fCloseTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCloseTextBlockDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseTextBlockDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Custom WelcomeViewCustom
        {
            get
            {
                if (null == fWelcomeViewCustom)
                {
                    fWelcomeViewCustom = new Custom("WelcomeViewCustom", HPEasyStartWindWindow);
                    fWelcomeViewCustom.UIMap.Scope = UIASeachScope.Children;
                    fWelcomeViewCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"WelcomeView");
                }

                return fWelcomeViewCustom;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Custom UserProgressVieCustom
        {
            get
            {
                if (null == fUserProgressVieCustom)
                {
                    fUserProgressVieCustom = new Custom("UserProgressVieCustom", WelcomeViewCustom);
                    fUserProgressVieCustom.UIMap.Scope = UIASeachScope.Children;
                    fUserProgressVieCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"UserProgressView");
                }

                return fUserProgressVieCustom;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ProgressBar ProgressBarProgressBar
        {
            get
            {
                if (null == fProgressBarProgressBar)
                {
                    fProgressBarProgressBar = new ProgressBar("ProgressBarProgressBar", UserProgressVieCustom);
                    fProgressBarProgressBar.UIMap.Scope = UIASeachScope.Children;
                    fProgressBarProgressBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ProgressBar");
                }

                return fProgressBarProgressBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text NextAgreementsTText
        {
            get
            {
                if (null == fNextAgreementsTText)
                {
                    fNextAgreementsTText = new Text("NextAgreementsTText", UserProgressVieCustom);
                    fNextAgreementsTText.UIMap.Scope = UIASeachScope.Children;
                    fNextAgreementsTText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fNextAgreementsTText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"NextStep");
                    fNextAgreementsTText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Next: Agreements");
                }

                return fNextAgreementsTText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Separator SeparatorDup1Separator
        {
            get
            {
                if (null == fSeparatorDup1Separator)
                {
                    fSeparatorDup1Separator = new Separator("SeparatorDup1Separator", UserProgressVieCustom);
                    fSeparatorDup1Separator.UIMap.Scope = UIASeachScope.Children;
                    fSeparatorDup1Separator.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Separator");
                }

                return fSeparatorDup1Separator;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ReadytosetupyouText
        {
            get
            {
                if (null == fReadytosetupyouText)
                {
                    fReadytosetupyouText = new Text("ReadytosetupyouText", WelcomeViewCustom);
                    fReadytosetupyouText.UIMap.Scope = UIASeachScope.Children;
                    fReadytosetupyouText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fReadytosetupyouText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"WelcomeTitle");
                    fReadytosetupyouText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Ready to set up your printer?");
                }

                return fReadytosetupyouText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text IfyouveunpackedText
        {
            get
            {
                if (null == fIfyouveunpackedText)
                {
                    fIfyouveunpackedText = new Text("IfyouveunpackedText", WelcomeViewCustom);
                    fIfyouveunpackedText.UIMap.Scope = UIASeachScope.Children;
                    fIfyouveunpackedText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fIfyouveunpackedText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"WelcomeDescription1");
                    fIfyouveunpackedText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"If you've unpacked your printer, powered it up, and loaded paper, then you're ready.");
                }

                return fIfyouveunpackedText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ClickContinuetoDup0Text
        {
            get
            {
                if (null == fClickContinuetoDup0Text)
                {
                    fClickContinuetoDup0Text = new Text("ClickContinuetoDup0Text", WelcomeViewCustom);
                    fClickContinuetoDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fClickContinuetoDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fClickContinuetoDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"WelcomeDescription2");
                    fClickContinuetoDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Click Continue to set up your printer and ensure you get all the best software solutions and services available to you.");
                }

                return fClickContinuetoDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageDup1Image
        {
            get
            {
                if (null == fImageDup1Image)
                {
                    fImageDup1Image = new Image("ImageDup1Image", WelcomeViewCustom);
                    fImageDup1Image.UIMap.Scope = UIASeachScope.Children;
                    fImageDup1Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                }

                return fImageDup1Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Separator SeparatorDup2Separator
        {
            get
            {
                if (null == fSeparatorDup2Separator)
                {
                    fSeparatorDup2Separator = new Separator("SeparatorDup2Separator", WelcomeViewCustom);
                    fSeparatorDup2Separator.UIMap.Scope = UIASeachScope.Children;
                    fSeparatorDup2Separator.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Separator");
                }

                return fSeparatorDup2Separator;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ContinueButtonCDup0Button
        {
            get
            {
                if (null == fContinueButtonCDup0Button)
                {
                    fContinueButtonCDup0Button = new Button("ContinueButtonCDup0Button", WelcomeViewCustom);
                    fContinueButtonCDup0Button.UIMap.Scope = UIASeachScope.Descendants;
                    fContinueButtonCDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fContinueButtonCDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Continue");
                    fContinueButtonCDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Continue");
                }

                return fContinueButtonCDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ContinueTextBloDup0Text
        {
            get
            {
                if (null == fContinueTextBloDup0Text)
                {
                    fContinueTextBloDup0Text = new Text("ContinueTextBloDup0Text", ContinueButtonCDup0Button);
                    fContinueTextBloDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fContinueTextBloDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fContinueTextBloDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Continue");
                }

                return fContinueTextBloDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ExitTextBlockExText
        {
            get
            {
                if (null == fExitTextBlockExText)
                {
                    fExitTextBlockExText = new Text("ExitTextBlockExText", HPEasyStartWindWindow);
                    fExitTextBlockExText.UIMap.Scope = UIASeachScope.Children;
                    fExitTextBlockExText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fExitTextBlockExText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ExitOverlayTitle");
                    fExitTextBlockExText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Exit");
                }

                return fExitTextBlockExText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ButtonDup0I0XButton
        {
            get
            {
                if (null == fButtonDup0I0XButton)
                {
                    fButtonDup0I0XButton = new Button("ButtonDup0I0XButton", HPEasyStartWindWindow);
                    fButtonDup0I0XButton.UIMap.Scope = UIASeachScope.Children;
                    fButtonDup0I0XButton.UIMap.Index = 3;
                    fButtonDup0I0XButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fButtonDup0I0XButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageCloseDup1Image
        {
            get
            {
                if (null == fImageCloseDup1Image)
                {
                    fImageCloseDup1Image = new Image("ImageCloseDup1Image", ButtonDup0I0XButton);
                    fImageCloseDup1Image.UIMap.Scope = UIASeachScope.Children;
                    fImageCloseDup1Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImageCloseDup1Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                }

                return fImageCloseDup1Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Separator SeparatorDup3I1XSeparator
        {
            get
            {
                if (null == fSeparatorDup3I1XSeparator)
                {
                    fSeparatorDup3I1XSeparator = new Separator("SeparatorDup3I1XSeparator", HPEasyStartWindWindow);
                    fSeparatorDup3I1XSeparator.UIMap.Scope = UIASeachScope.Children;
                    fSeparatorDup3I1XSeparator.UIMap.Index = 1;
                    fSeparatorDup3I1XSeparator.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Separator");
                }

                return fSeparatorDup3I1XSeparator;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerDup0I0XPane
        {
            get
            {
                if (null == fScrollViewerDup0I0XPane)
                {
                    fScrollViewerDup0I0XPane = new Pane("ScrollViewerDup0I0XPane", HPEasyStartWindWindow);
                    fScrollViewerDup0I0XPane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerDup0I0XPane.UIMap.Index = 0;
                    fScrollViewerDup0I0XPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                }

                return fScrollViewerDup0I0XPane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AreyousureyouwaText
        {
            get
            {
                if (null == fAreyousureyouwaText)
                {
                    fAreyousureyouwaText = new Text("AreyousureyouwaText", ScrollViewerDup0I0XPane);
                    fAreyousureyouwaText.UIMap.Scope = UIASeachScope.Children;
                    fAreyousureyouwaText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fAreyousureyouwaText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Are you sure you want to close this window?");
                }

                return fAreyousureyouwaText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text IfyoucloseHPEasDup0Text
        {
            get
            {
                if (null == fIfyoucloseHPEasDup0Text)
                {
                    fIfyoucloseHPEasDup0Text = new Text("IfyoucloseHPEasDup0Text", ScrollViewerDup0I0XPane);
                    fIfyoucloseHPEasDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fIfyoucloseHPEasDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fIfyoucloseHPEasDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"If you close HP Easy Start, your printer might not be fully set up and you might not be able to print.");
                }

                return fIfyoucloseHPEasDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text IfavailableyoumText
        {
            get
            {
                if (null == fIfavailableyoumText)
                {
                    fIfavailableyoumText = new Text("IfavailableyoumText", ScrollViewerDup0I0XPane);
                    fIfavailableyoumText.UIMap.Scope = UIASeachScope.Children;
                    fIfavailableyoumText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fIfavailableyoumText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"If available, you might be able to connect your printer to a network using your printer's control panel. However, you will still need to install printer drivers to print from this computer.");
                }

                return fIfavailableyoumText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ClickContinuetoDup1Text
        {
            get
            {
                if (null == fClickContinuetoDup1Text)
                {
                    fClickContinuetoDup1Text = new Text("ClickContinuetoDup1Text", ScrollViewerDup0I0XPane);
                    fClickContinuetoDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fClickContinuetoDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fClickContinuetoDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Click Continue to continue set up (recommended) or Close to exit.");
                }

                return fClickContinuetoDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup0ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup0ScrollBar)
                {
                    fScrollBarVerticDup0ScrollBar = new ScrollBar("ScrollBarVerticDup0ScrollBar", ScrollViewerDup0I0XPane);
                    fScrollBarVerticDup0ScrollBar.UIMap.Scope = UIASeachScope.Descendants;
                    fScrollBarVerticDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup0ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup0ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup0ScrollBar)
                {
                    fScrollBarHorizoDup0ScrollBar = new ScrollBar("ScrollBarHorizoDup0ScrollBar", ScrollViewerDup0I0XPane);
                    fScrollBarHorizoDup0ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup0ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup0ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Separator SeparatorDup4I2XSeparator
        {
            get
            {
                if (null == fSeparatorDup4I2XSeparator)
                {
                    fSeparatorDup4I2XSeparator = new Separator("SeparatorDup4I2XSeparator", HPEasyStartWindWindow);
                    fSeparatorDup4I2XSeparator.UIMap.Scope = UIASeachScope.Children;
                    fSeparatorDup4I2XSeparator.UIMap.Index = 2;
                    fSeparatorDup4I2XSeparator.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Separator");
                }

                return fSeparatorDup4I2XSeparator;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseDup1I1XButton
        {
            get
            {
                if (null == fCloseDup1I1XButton)
                {
                    fCloseDup1I1XButton = new Button("CloseDup1I1XButton", HPEasyStartWindWindow);
                    fCloseDup1I1XButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseDup1I1XButton.UIMap.Index = 1;
                    fCloseDup1I1XButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCloseDup1I1XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseDup1I1XButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CloseTextBlockDup1Text
        {
            get
            {
                if (null == fCloseTextBlockDup1Text)
                {
                    fCloseTextBlockDup1Text = new Text("CloseTextBlockDup1Text", CloseDup1I1XButton);
                    fCloseTextBlockDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fCloseTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCloseTextBlockDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseTextBlockDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ContinueButtonCDup1Button
        {
            get
            {
                if (null == fContinueButtonCDup1Button)
                {
                    fContinueButtonCDup1Button = new Button("ContinueButtonCDup1Button", HPEasyStartWindWindow);
                    fContinueButtonCDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fContinueButtonCDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fContinueButtonCDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"CloseOverlay");
                    fContinueButtonCDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Continue");
                }

                return fContinueButtonCDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ContinueTextBloDup1Text
        {
            get
            {
                if (null == fContinueTextBloDup1Text)
                {
                    fContinueTextBloDup1Text = new Text("ContinueTextBloDup1Text", ContinueButtonCDup1Button);
                    fContinueTextBloDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fContinueTextBloDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fContinueTextBloDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Continue");
                }

                return fContinueTextBloDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ExitTextBlockText
        {
            get
            {
                if (null == fExitTextBlockText)
                {
                    fExitTextBlockText = new Text("ExitTextBlockText", HPEasyStartWindWindow);
                    fExitTextBlockText.UIMap.Scope = UIASeachScope.Children;
                    fExitTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fExitTextBlockText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Exit");
                }

                return fExitTextBlockText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ButtonDup1I1XButton
        {
            get
            {
                if (null == fButtonDup1I1XButton)
                {
                    fButtonDup1I1XButton = new Button("ButtonDup1I1XButton", HPEasyStartWindWindow);
                    fButtonDup1I1XButton.UIMap.Scope = UIASeachScope.Children;
                    fButtonDup1I1XButton.UIMap.Index = 6;
                    fButtonDup1I1XButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fButtonDup1I1XButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Image ImageCloseDup2Image
        {
            get
            {
                if (null == fImageCloseDup2Image)
                {
                    fImageCloseDup2Image = new Image("ImageCloseDup2Image", ButtonDup1I1XButton);
                    fImageCloseDup2Image.UIMap.Scope = UIASeachScope.Children;
                    fImageCloseDup2Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Image");
                    fImageCloseDup2Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                }

                return fImageCloseDup2Image;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Separator SeparatorDup5I3XSeparator
        {
            get
            {
                if (null == fSeparatorDup5I3XSeparator)
                {
                    fSeparatorDup5I3XSeparator = new Separator("SeparatorDup5I3XSeparator", HPEasyStartWindWindow);
                    fSeparatorDup5I3XSeparator.UIMap.Scope = UIASeachScope.Children;
                    fSeparatorDup5I3XSeparator.UIMap.Index = 3;
                    fSeparatorDup5I3XSeparator.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Separator");
                }

                return fSeparatorDup5I3XSeparator;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane ScrollViewerDup1I1XPane
        {
            get
            {
                if (null == fScrollViewerDup1I1XPane)
                {
                    fScrollViewerDup1I1XPane = new Pane("ScrollViewerDup1I1XPane", HPEasyStartWindWindow);
                    fScrollViewerDup1I1XPane.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerDup1I1XPane.UIMap.Index = 1;
                    fScrollViewerDup1I1XPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                }

                return fScrollViewerDup1I1XPane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text SetupnotcompletText
        {
            get
            {
                if (null == fSetupnotcompletText)
                {
                    fSetupnotcompletText = new Text("SetupnotcompletText", ScrollViewerDup1I1XPane);
                    fSetupnotcompletText.UIMap.Scope = UIASeachScope.Children;
                    fSetupnotcompletText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fSetupnotcompletText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Setup not complete");
                }

                return fSetupnotcompletText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text IfyoucloseHPEasDup1Text
        {
            get
            {
                if (null == fIfyoucloseHPEasDup1Text)
                {
                    fIfyoucloseHPEasDup1Text = new Text("IfyoucloseHPEasDup1Text", ScrollViewerDup1I1XPane);
                    fIfyoucloseHPEasDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fIfyoucloseHPEasDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fIfyoucloseHPEasDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"If you close HP Easy Start, you might not be able to print from this computer.");
                }

                return fIfyoucloseHPEasDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text EventhoughyouhaText
        {
            get
            {
                if (null == fEventhoughyouhaText)
                {
                    fEventhoughyouhaText = new Text("EventhoughyouhaText", ScrollViewerDup1I1XPane);
                    fEventhoughyouhaText.UIMap.Scope = UIASeachScope.Children;
                    fEventhoughyouhaText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fEventhoughyouhaText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Even though you have connected your printer to a network, you will still need to install print drivers.");
                }

                return fEventhoughyouhaText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ClickContinuetoDup2Text
        {
            get
            {
                if (null == fClickContinuetoDup2Text)
                {
                    fClickContinuetoDup2Text = new Text("ClickContinuetoDup2Text", ScrollViewerDup1I1XPane);
                    fClickContinuetoDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fClickContinuetoDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fClickContinuetoDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Click Continue to continue set up (recommended) or Close to exit.");
                }

                return fClickContinuetoDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarVerticDup1ScrollBar
        {
            get
            {
                if (null == fScrollBarVerticDup1ScrollBar)
                {
                    fScrollBarVerticDup1ScrollBar = new ScrollBar("ScrollBarVerticDup1ScrollBar", ScrollViewerDup1I1XPane);
                    fScrollBarVerticDup1ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarVerticDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarVerticDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"VerticalScrollBar");
                }

                return fScrollBarVerticDup1ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ScrollBar ScrollBarHorizoDup1ScrollBar
        {
            get
            {
                if (null == fScrollBarHorizoDup1ScrollBar)
                {
                    fScrollBarHorizoDup1ScrollBar = new ScrollBar("ScrollBarHorizoDup1ScrollBar", ScrollViewerDup1I1XPane);
                    fScrollBarHorizoDup1ScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fScrollBarHorizoDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollBar");
                    fScrollBarHorizoDup1ScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HorizontalScrollBar");
                }

                return fScrollBarHorizoDup1ScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Separator SeparatorDup6I4XSeparator
        {
            get
            {
                if (null == fSeparatorDup6I4XSeparator)
                {
                    fSeparatorDup6I4XSeparator = new Separator("SeparatorDup6I4XSeparator", HPEasyStartWindWindow);
                    fSeparatorDup6I4XSeparator.UIMap.Scope = UIASeachScope.Children;
                    fSeparatorDup6I4XSeparator.UIMap.Index = 4;
                    fSeparatorDup6I4XSeparator.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Separator");
                }

                return fSeparatorDup6I4XSeparator;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseDup2I2XButton
        {
            get
            {
                if (null == fCloseDup2I2XButton)
                {
                    fCloseDup2I2XButton = new Button("CloseDup2I2XButton", HPEasyStartWindWindow);
                    fCloseDup2I2XButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseDup2I2XButton.UIMap.Index = 2;
                    fCloseDup2I2XButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCloseDup2I2XButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseDup2I2XButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text CloseTextBlockDup2Text
        {
            get
            {
                if (null == fCloseTextBlockDup2Text)
                {
                    fCloseTextBlockDup2Text = new Text("CloseTextBlockDup2Text", CloseDup2I2XButton);
                    fCloseTextBlockDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fCloseTextBlockDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fCloseTextBlockDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseTextBlockDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ContinueButton
        {
            get
            {
                if (null == fContinueButton)
                {
                    fContinueButton = new Button("ContinueButton", HPEasyStartWindWindow);
                    fContinueButton.UIMap.Scope = UIASeachScope.Descendants;
                    fContinueButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fContinueButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Continue");
                }

                return fContinueButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public CheckBox IhavereviewedanCheckBox
        {
            get
            {
                if (null == fIhavereviewedanCheckBox)
                {
                    fIhavereviewedanCheckBox = new CheckBox("IhavereviewedanCheckBox", HPEasyStartWindWindow);
                    fIhavereviewedanCheckBox.UIMap.Scope = UIASeachScope.Descendants;
                    fIhavereviewedanCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fIhavereviewedanCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"AgreementsCheckBox");
                    fIhavereviewedanCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"I have reviewed and accept the agreements and settings.");
                }

                return fIhavereviewedanCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text P10111597
        {
            get
            {
                if (null == fP10111597)
                {
                    fP10111597 = new Text("P10111597", HPEasyStartWindWindow);
                    fP10111597.UIMap.Scope = UIASeachScope.Descendants;
                    fP10111597.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"IpAddress");
                    fP10111597.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"10.11.15.97");
                }

                return fP10111597;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ContinueTextBloDup2Text
        {
            get
            {
                if (null == fContinueTextBloDup2Text)
                {
                    fContinueTextBloDup2Text = new Text("ContinueTextBloDup2Text", ContinueButton);
                    fContinueTextBloDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fContinueTextBloDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBlock");
                    fContinueTextBloDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Continue");
                }

                return fContinueTextBloDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button RefreshButtonReButton
        {
            get
            {
                if (null == fRefreshButtonReButton)
                {
                    fRefreshButtonReButton = new Button("RefreshButtonReButton", HPEasyStartWindWindow);
                    fRefreshButtonReButton.UIMap.Scope = UIASeachScope.Descendants;
                    fRefreshButtonReButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fRefreshButtonReButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"RefreshList");
                    fRefreshButtonReButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Refresh");
                }

                return fRefreshButtonReButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button MyPrinterIsNotSButton
        {
            get
            {
                if (null == fMyPrinterIsNotSButton)
                {
                    fMyPrinterIsNotSButton = new Button("MyPrinterIsNotSButton", HPEasyStartWindWindow);
                    fMyPrinterIsNotSButton.UIMap.Scope = UIASeachScope.Descendants;
                    fMyPrinterIsNotSButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fMyPrinterIsNotSButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"PrinterNotShown");
                    fMyPrinterIsNotSButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"My Printer Is Not Shown");
                }

                return fMyPrinterIsNotSButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button SearchbyPrinterButton
        {
            get
            {
                if (null == fSearchbyPrinterButton)
                {
                    fSearchbyPrinterButton = new Button("SearchbyPrinterButton", HPEasyStartWindWindow);
                    fSearchbyPrinterButton.UIMap.Scope = UIASeachScope.Descendants;
                    fSearchbyPrinterButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fSearchbyPrinterButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SearchPrinterModel");
                    fSearchbyPrinterButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Search by Printer Model");
                }

                return fSearchbyPrinterButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Edit TextBoxTextEdit
        {
            get
            {
                if (null == fTextBoxTextEdit)
                {
                    fTextBoxTextEdit = new Edit("TextBoxTextEdit", HPEasyStartWindWindow);
                    fTextBoxTextEdit.UIMap.Scope = UIASeachScope.Descendants;
                    fTextBoxTextEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                    fTextBoxTextEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Text");
                }

                return fTextBoxTextEdit;
            }
        }

        /// <summary>
        /// Gets Reference to CheckBoxWelcomeCheckBox
        /// </summary>
        public CheckBox CheckBoxWelcomeCheckBox
        {
            get
            {
                if (null == fCheckBoxWelcomeCheckBox)
                {
                    fCheckBoxWelcomeCheckBox = new CheckBox("CheckBoxWelcomeCheckBox", WelcomeViewCustom);
                    fCheckBoxWelcomeCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fCheckBoxWelcomeCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"CheckBox");
                    fCheckBoxWelcomeCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"WelcomeAgreementsCheckBox");
                }

                return fCheckBoxWelcomeCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to ChoosePrinterViCustom
        /// </summary>
        public Custom ChoosePrinterViCustom
        {
            get
            {
                if (null == fChoosePrinterViCustom)
                {
                    fChoosePrinterViCustom = new Custom("ChoosePrinterViCustom", HPEasyStartWindWindow);
                    fChoosePrinterViCustom.UIMap.Scope = UIASeachScope.Children;
                    fChoosePrinterViCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ChoosePrinterView");
                }

                return fChoosePrinterViCustom;
            }
        }

        /// <summary>
        /// Gets Reference to AdvancedSearchButton
        /// </summary>
        public Button AdvancedSearchButton
        {
            get
            {
                if (null == fAdvancedSearchButton)
                {
                    fAdvancedSearchButton = new Button("AdvancedSearchButton", ChoosePrinterViCustom);
                    fAdvancedSearchButton.UIMap.Scope = UIASeachScope.Children;
                    fAdvancedSearchButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fAdvancedSearchButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Advanced Search");
                }

                return fAdvancedSearchButton;
            }
        }

        /// <summary>
        /// Gets Reference to ScrollViewerDup1I1XPane1
        /// </summary>
        public Pane ScrollViewerDup1I1XPane1
        {
            get
            {
                if (null == fScrollViewerDup1I1XPane1)
                {
                    fScrollViewerDup1I1XPane1 = new Pane("ScrollViewerDup1I1XPane1", ChoosePrinterViCustom);
                    fScrollViewerDup1I1XPane1.UIMap.Scope = UIASeachScope.Children;
                    fScrollViewerDup1I1XPane1.UIMap.Index = 1;
                    fScrollViewerDup1I1XPane1.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ScrollViewer");
                }

                return fScrollViewerDup1I1XPane1;
            }
        }

        /// <summary>
        /// Gets Reference to TextBoxIpTextEdit
        /// </summary>
        public Edit TextBoxIpTextEdit
        {
            get
            {
                if (null == fTextBoxIpTextEdit)
                {
                    fTextBoxIpTextEdit = new Edit("TextBoxIpTextEdit", ScrollViewerDup1I1XPane1);
                    fTextBoxIpTextEdit.UIMap.Scope = UIASeachScope.Children;
                    fTextBoxIpTextEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"IpText");
                    fTextBoxIpTextEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"TextBox");
                }

                return fTextBoxIpTextEdit;
            }
        }

        /// <summary>
        /// Gets Reference to IpSearchButton
        /// </summary>
        public Button IpSearchButton
        {
            get
            {
                if (null == fIpSearchButton)
                {
                    fIpSearchButton = new Button("IpSearchButton", ChoosePrinterViCustom);
                    fIpSearchButton.UIMap.Scope = UIASeachScope.Children;
                    fIpSearchButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Search");
                    fIpSearchButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fIpSearchButton;
            }
        }

        /// <summary>
        /// Gets Reference to SoftwareOptionsCustom
        /// </summary>
        public Custom SoftwareOptionsCustom
        {
            get
            {
                if (null == fSoftwareOptionsCustom)
                {
                    fSoftwareOptionsCustom = new Custom("SoftwareOptionsCustom", HPEasyStartWindWindow);
                    fSoftwareOptionsCustom.UIMap.Scope = UIASeachScope.Children;
                    fSoftwareOptionsCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"SoftwareOptionsView");
                }

                return fSoftwareOptionsCustom;
            }
        }

        /// <summary>
        /// Gets Reference to SingleNetworkPrCustom
        /// </summary>
        public Custom SingleNetworkPrCustom
        {
            get
            {
                if (null == fSingleNetworkPrCustom)
                {
                    fSingleNetworkPrCustom = new Custom("SingleNetworkPrCustom", HPEasyStartWindWindow);
                    fSingleNetworkPrCustom.UIMap.Scope = UIASeachScope.Children;
                    fSingleNetworkPrCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"SingleNetworkPrinterView");
                }

                return fSingleNetworkPrCustom;
            }
        }

        /// <summary>
        /// Gets Reference to ProductOffersViCustom
        /// </summary>
        public Custom ProductOffersViCustom
        {
            get
            {
                if (null == fProductOffersViCustom)
                {
                    fProductOffersViCustom = new Custom("ProductOffersViCustom", HPEasyStartWindWindow);
                    fProductOffersViCustom.UIMap.Scope = UIASeachScope.Children;
                    fProductOffersViCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ProductOffersView");
                    fProductOffersViCustom.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"UserControl");
                }

                return fProductOffersViCustom;
            }
        }

        /// <summary>
        /// Gets Reference to HwndHostOwsWebBPane
        /// </summary>
        public Pane HwndHostOwsWebBPane
        {
            get
            {
                if (null == fHwndHostOwsWebBPane)
                {
                    fHwndHostOwsWebBPane = new Pane("HwndHostOwsWebBPane", ProductOffersViCustom);
                    fHwndHostOwsWebBPane.UIMap.Scope = UIASeachScope.Children;
                    fHwndHostOwsWebBPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"HwndHost");
                    fHwndHostOwsWebBPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"OwsWebBrowser");
                }

                return fHwndHostOwsWebBPane;
            }
        }

        /// <summary>
        /// Gets Reference to ShellEmbeddingPane
        /// </summary>
        public Pane ShellEmbeddingPane
        {
            get
            {
                if (null == fShellEmbeddingPane)
                {
                    fShellEmbeddingPane = new Pane("ShellEmbeddingPane", HwndHostOwsWebBPane);
                    fShellEmbeddingPane.UIMap.Scope = UIASeachScope.Children;
                    fShellEmbeddingPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Shell Embedding");
                }

                return fShellEmbeddingPane;
            }
        }

        /// <summary>
        /// Gets Reference to ShellDocObjectVPane
        /// </summary>
        public Pane ShellDocObjectVPane
        {
            get
            {
                if (null == fShellDocObjectVPane)
                {
                    fShellDocObjectVPane = new Pane("ShellDocObjectVPane", ShellEmbeddingPane);
                    fShellDocObjectVPane.UIMap.Scope = UIASeachScope.Children;
                    fShellDocObjectVPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Shell DocObject View");
                }

                return fShellDocObjectVPane;
            }
        }

        /// <summary>
        /// Gets Reference to HPProductSetupIPane
        /// </summary>
        public Pane HPProductSetupIPane
        {
            get
            {
                if (null == fHPProductSetupIPane)
                {
                    fHPProductSetupIPane = new Pane("HPProductSetupIPane", ShellDocObjectVPane);
                    fHPProductSetupIPane.UIMap.Scope = UIASeachScope.Children;
                    fHPProductSetupIPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Internet Explorer_Server");
                    fHPProductSetupIPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Product Setup");
                }

                return fHPProductSetupIPane;
            }
        }

        /// <summary>
        /// Gets Reference to SkipwithoutactiButton
        /// </summary>
        public Button SkipwithoutactiButton
        {
            get
            {
                if (null == fSkipwithoutactiButton)
                {
                    fSkipwithoutactiButton = new Button("SkipwithoutactiButton", HPProductSetupIPane);
                    fSkipwithoutactiButton.UIMap.Scope = UIASeachScope.Children;
                    fSkipwithoutactiButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Skip without activating");
                }

                return fSkipwithoutactiButton;
            }
        }

        /// <summary>
        /// Backing field for ListBoxList property
        /// </summary>
        private List fListBoxList;

        /// <summary>
        /// Gets Reference to ListBoxList
        /// </summary>
        public List ListBoxList
        {
            get
            {
                if (null == fListBoxList)
                {
                    fListBoxList = new List("ListBoxList", ScrollViewerDup0I0XPane);
                    fListBoxList.UIMap.Scope = UIASeachScope.Children;
                    fListBoxList.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBox");
                }

                return fListBoxList;
            }
        }

        /// <summary>
        /// Performs the dowmload of driver using HP Easy start Application.
        /// </summary>
        public override PluginExecutionResult PerformAction()
        {
            HPEasyStartWindWindow.WaitForAvailable(100);
            CheckBoxWelcomeCheckBox.WaitForAvailable(10);

            if (CheckBoxWelcomeCheckBox.Check() != ResultCode.Passed)
            {
                return new PluginExecutionResult(PluginResult.Failed, "Failed to check I have read and agree to the End User License Agreement and HP Privacy Statement");
            }
            if (ContinueButton.Click() != ResultCode.Passed)
            {
                return new PluginExecutionResult(PluginResult.Failed, "Failed to click continue after Accepting terms and conditions");
            }

            AdvancedSearchButton.WaitForAvailable(200);
            if (AdvancedSearchButton.Click(10) != ResultCode.Passed)
            {
                return new PluginExecutionResult(PluginResult.Failed, "Failed to click Advanced Search Button");
            }
            if (TextBoxIpTextEdit.EnterText(_ipAddress) != ResultCode.Passed)
            {
                return new PluginExecutionResult(PluginResult.Failed, "Failed to Enter Ip Address : " + _ipAddress);
            }
            if (TextBoxIpTextEdit.ClickWithMouse(20) != ResultCode.Passed)
            {
                return new PluginExecutionResult(PluginResult.Failed, "Failed to click Search");
            }
            if (IpSearchButton.ClickWithMouse(20) != ResultCode.Passed)
            {
                return new PluginExecutionResult(PluginResult.Failed, "Failed to click Search");
            }

            SingleNetworkPrCustom.WaitForAvailable(3600);
            if (ContinueButton.Click(500) != ResultCode.Passed)
            {
                return new PluginExecutionResult(PluginResult.Failed, "Failed to click continue Check internet Connectivity");
            }
            if (SkipwithoutactiButton.IsAvailable(180))
            {
                if (SkipwithoutactiButton.ClickWithMouse(20) != ResultCode.Passed)
                {
                    return new PluginExecutionResult(PluginResult.Failed, "Failed to click skip without activation");
                }
            }

            SoftwareOptionsCustom.WaitForAvailable(3600);
            Thread.Sleep(10000);
            if (ContinueButton.ClickWithMouse(60) != ResultCode.Passed)
            {
                return new PluginExecutionResult(PluginResult.Failed, "Failed to click continue Check internet Connectivity.Download did not start");
            }
            return new PluginExecutionResult(PluginResult.Passed);
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------
using HP.ScalableTest.Framework.Plugin;
using TopCat.TestApi.Enums;

namespace HP.ScalableTest.Plugin.HpacClient.UIMaps
{
    using System;
    using System.Threading;
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class HpacClientConfigSelection :UIMap
       {
        private const int ShortTimeout = 5;

        private static readonly TimeSpan HumanTimeSpan = new TimeSpan(0, 0, 0, 1);

        private bool _setQuota;

        private bool _setIPM;

        private bool _setDelegate;

        private bool _setLocalJobStorage;
        /// <summary>
        /// Backing field for HPAccessControlWindow property
        /// </summary>
        private Window fHPAccessControlWindow;

        /// <summary>
        /// Backing field for NextButton1325Button property
        /// </summary>
        private Button fNextButton1325Button;

        /// <summary>
        /// Backing field for QuotaButton1324CheckBox property
        /// </summary>
        private CheckBox fQuotaButton1324CheckBox;

        /// <summary>
        /// Backing field for IPMButton1332CheckBox property
        /// </summary>
        private CheckBox fIPMButton1332CheckBox;

        /// <summary>
        /// Backing field for DelegateButton1CheckBox property
        /// </summary>
        private CheckBox fDelegateButton1CheckBox;

        /// <summary>
        /// Backing field for LocaljobstorageCheckBox property
        /// </summary>
        private CheckBox fLocaljobstorageCheckBox;

        /// <summary>
        /// Backing field for CancelButton118Button property
        /// </summary>
        private Button fCancelButton118Button;

        /// <summary>
        /// Backing field for BackButton1322Button property
        /// </summary>
        private Button fBackButton1322Button;

        /// <summary>
        /// Backing field for DefBannerBitmapImage property
        /// </summary>
        private Image fDefBannerBitmapImage;

        /// <summary>
        /// Backing field for ConfigurationStText property
        /// </summary>
        private Text fConfigurationStText;

        /// <summary>
        /// Backing field for SelectconfiguraText property
        /// </summary>
        private Text fSelectconfiguraText;

        /// <summary>
        /// Backing field for MsiHorizontalLiDup0Text property
        /// </summary>
        private Text fMsiHorizontalLiDup0Text;

        /// <summary>
        /// Backing field for MsiHorizontalLiDup1Text property
        /// </summary>
        private Text fMsiHorizontalLiDup1Text;

        /// <summary>
        /// Backing field for HPAccessControlTitleBar property
        /// </summary>
        private TitleBar fHPAccessControlTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyMenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyMenuBar;

        /// <summary>
        /// Backing field for SystemItem1MenuItem property
        /// </summary>
        private MenuItem fSystemItem1MenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizButton property
        /// </summary>
        private Button fMinimizeMinimizButton;

        /// <summary>
        /// Backing field for MaximizeMaximizButton property
        /// </summary>
        private Button fMaximizeMaximizButton;

        /// <summary>
        /// Backing field for CloseCloseButton property
        /// </summary>
        private Button fCloseCloseButton;

        /// <summary>
        /// Initializes a new instance of the <see cref="HpacClientConfigSelection"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public HpacClientConfigSelection(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
            ScreenName = "Select Server Configuration";
        }

        public HpacClientConfigSelection(bool setQuota, bool setIPM, bool setDelegate, bool setLocalJobStorage)
        {
            Desktop = new Desktop(UIAFramework.ManagedUIA);
            ScreenName = "Select Server Configuration";
            _setQuota = setQuota;
            _setDelegate = setDelegate ;
            _setIPM = setIPM;
            _setLocalJobStorage = setLocalJobStorage; 
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HpacClientConfigSelection"/> class using the default UIAFramework.
        /// </summary>
        public HpacClientConfigSelection()
        {
            Desktop = new Desktop();
            ScreenName = "Select Server Configuration";
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to HPAccessControlWindow
        /// </summary>
        public Window HPAccessControlWindow
        {
            get
            {
                if (null == fHPAccessControlWindow)
                {
                    fHPAccessControlWindow = new Window("HPAccessControlWindow", Desktop);
                    fHPAccessControlWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPAccessControlWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Access Control Print Client");
                    fHPAccessControlWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"MsiDialogCloseClass");
                }

                return fHPAccessControlWindow;
            }
        }

        /// <summary>
        /// Gets Reference to NextButton1325Button
        /// </summary>
        public Button NextButton
        {
            get
            {
                if (null == fNextButton1325Button)
                {
                    fNextButton1325Button = new Button("NextButton1325Button", HPAccessControlWindow);
                    fNextButton1325Button.UIMap.Scope = UIASeachScope.Children;
                    fNextButton1325Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Next >");
                    //03-13-2016 Since Automation Id is changing, we are using Name as reference to perform the click operation.
                    //fNextButton1325Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1325");
                    fNextButton1325Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fNextButton1325Button;
            }
        }

        /// <summary>
        /// Gets Reference to QuotaButton1324CheckBox
        /// </summary>
        public CheckBox QuotaCheckBox
        {
            get
            {
                if (null == fQuotaButton1324CheckBox)
                {
                    fQuotaButton1324CheckBox = new CheckBox("QuotaButton1324CheckBox", HPAccessControlWindow);
                    fQuotaButton1324CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fQuotaButton1324CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Quota");
                    //03-13-2016 Since Automation Id is changing, we are using Name as reference to perform the click operation.
                    //fQuotaButton1324CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1324");
                    fQuotaButton1324CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fQuotaButton1324CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to IPMButton1332CheckBox
        /// </summary>
        public CheckBox IPMCheckBox
        {
            get
            {
                if (null == fIPMButton1332CheckBox)
                {
                    fIPMButton1332CheckBox = new CheckBox("IPMButton1332CheckBox", HPAccessControlWindow);
                    fIPMButton1332CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fIPMButton1332CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"IPM");
                    //03-13-2016 Since Automation Id is changing, we are using Name as reference to perform the click operation.
                    //fIPMButton1332CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1332");
                    fIPMButton1332CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fIPMButton1332CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to DelegateButton1CheckBox
        /// </summary>
        public CheckBox DelegateCheckBox
        {
            get
            {
                if (null == fDelegateButton1CheckBox)
                {
                    fDelegateButton1CheckBox = new CheckBox("DelegateButton1CheckBox", HPAccessControlWindow);
                    fDelegateButton1CheckBox.UIMap.Scope = UIASeachScope.Children;
                    fDelegateButton1CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Delegate");
                    //03-13-2016 Since Automation Id is changing, we are using Name as reference to perform the click operation.
                    //fDelegateButton1CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1329");
                    fDelegateButton1CheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fDelegateButton1CheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to LocaljobstorageCheckBox
        /// </summary>
        public CheckBox LocaljobstorageCheckBox
        {
            get
            {
                if (null == fLocaljobstorageCheckBox)
                {
                    fLocaljobstorageCheckBox = new CheckBox("LocaljobstorageCheckBox", HPAccessControlWindow);
                    fLocaljobstorageCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fLocaljobstorageCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Local job storage");
                    //03-13-2016 Since Automation Id is changing, we are using Name as reference to perform the click operation.
                    //fLocaljobstorageCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1328");
                    fLocaljobstorageCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fLocaljobstorageCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to CancelButton118Button
        /// </summary>
        public Button CancelButton
        {
            get
            {
                if (null == fCancelButton118Button)
                {
                    fCancelButton118Button = new Button("CancelButton118Button", HPAccessControlWindow);
                    fCancelButton118Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton118Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                    fCancelButton118Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1189");
                    fCancelButton118Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fCancelButton118Button;
            }
        }

        /// <summary>
        /// Gets Reference to BackButton1322Button
        /// </summary>
        public Button BackButton
        {
            get
            {
                if (null == fBackButton1322Button)
                {
                    fBackButton1322Button = new Button("BackButton1322Button", HPAccessControlWindow);
                    fBackButton1322Button.UIMap.Scope = UIASeachScope.Children;
                    fBackButton1322Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"< Back");
                    fBackButton1322Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1322");
                    fBackButton1322Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fBackButton1322Button;
            }
        }

        /// <summary>
        /// Gets Reference to DefBannerBitmapImage
        /// </summary>
        public Image DefBannerBitmapImage
        {
            get
            {
                if (null == fDefBannerBitmapImage)
                {
                    fDefBannerBitmapImage = new Image("DefBannerBitmapImage", HPAccessControlWindow);
                    fDefBannerBitmapImage.UIMap.Scope = UIASeachScope.Children;
                    fDefBannerBitmapImage.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DefBannerBitmap");
                    fDefBannerBitmapImage.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1171");
                    fDefBannerBitmapImage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                }

                return fDefBannerBitmapImage;
            }
        }

        /// <summary>
        /// Gets Reference to ConfigurationStText
        /// </summary>
        public Text ConfigurationStText
        {
            get
            {
                if (null == fConfigurationStText)
                {
                    fConfigurationStText = new Text("ConfigurationStText", HPAccessControlWindow);
                    fConfigurationStText.UIMap.Scope = UIASeachScope.Children;
                    fConfigurationStText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Configuration");
                    fConfigurationStText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1205");
                    fConfigurationStText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                }

                return fConfigurationStText;
            }
        }

        /// <summary>
        /// Gets Reference to SelectconfiguraText
        /// </summary>
        public Text SelectconfiguraText
        {
            get
            {
                if (null == fSelectconfiguraText)
                {
                    fSelectconfiguraText = new Text("SelectconfiguraText", HPAccessControlWindow);
                    fSelectconfiguraText.UIMap.Scope = UIASeachScope.Children;
                    fSelectconfiguraText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Select configuration");
                    fSelectconfiguraText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1211");
                    fSelectconfiguraText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                }

                return fSelectconfiguraText;
            }
        }

        /// <summary>
        /// Gets Reference to MsiHorizontalLiDup0Text
        /// </summary>
        public Text MsiHorizontalLiDup0Text
        {
            get
            {
                if (null == fMsiHorizontalLiDup0Text)
                {
                    fMsiHorizontalLiDup0Text = new Text("MsiHorizontalLiDup0Text", HPAccessControlWindow);
                    fMsiHorizontalLiDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fMsiHorizontalLiDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"MsiHorizontalLine");
                    fMsiHorizontalLiDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1339");
                    fMsiHorizontalLiDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                }

                return fMsiHorizontalLiDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to MsiHorizontalLiDup1Text
        /// </summary>
        public Text MsiHorizontalLiDup1Text
        {
            get
            {
                if (null == fMsiHorizontalLiDup1Text)
                {
                    fMsiHorizontalLiDup1Text = new Text("MsiHorizontalLiDup1Text", HPAccessControlWindow);
                    fMsiHorizontalLiDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fMsiHorizontalLiDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"MsiHorizontalLine");
                    fMsiHorizontalLiDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1341");
                    fMsiHorizontalLiDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                }

                return fMsiHorizontalLiDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to HPAccessControlTitleBar
        /// </summary>
        public TitleBar HPAccessControlTitleBar
        {
            get
            {
                if (null == fHPAccessControlTitleBar)
                {
                    fHPAccessControlTitleBar = new TitleBar("HPAccessControlTitleBar", HPAccessControlWindow);
                    fHPAccessControlTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fHPAccessControlTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Access Control Print Client");
                    fHPAccessControlTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                }

                return fHPAccessControlTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemMenuBarSyMenuBar
        /// </summary>
        public MenuBar SystemMenuBarSyMenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyMenuBar)
                {
                    fSystemMenuBarSyMenuBar = new MenuBar("SystemMenuBarSyMenuBar", HPAccessControlTitleBar);
                    fSystemMenuBarSyMenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                }

                return fSystemMenuBarSyMenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemItem1MenuItem
        /// </summary>
        public MenuItem SystemItem1MenuItem
        {
            get
            {
                if (null == fSystemItem1MenuItem)
                {
                    fSystemItem1MenuItem = new MenuItem("SystemItem1MenuItem", SystemMenuBarSyMenuBar);
                    fSystemItem1MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                }

                return fSystemItem1MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to MinimizeMinimizButton
        /// </summary>
        public Button MinimizeButton
        {
            get
            {
                if (null == fMinimizeMinimizButton)
                {
                    fMinimizeMinimizButton = new Button("MinimizeMinimizButton", HPAccessControlTitleBar);
                    fMinimizeMinimizButton.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                    fMinimizeMinimizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                }

                return fMinimizeMinimizButton;
            }
        }

        /// <summary>
        /// Gets Reference to MaximizeMaximizButton
        /// </summary>
        public Button MaximizeButton
        {
            get
            {
                if (null == fMaximizeMaximizButton)
                {
                    fMaximizeMaximizButton = new Button("MaximizeMaximizButton", HPAccessControlTitleBar);
                    fMaximizeMaximizButton.UIMap.Scope = UIASeachScope.Children;
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximize");
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Maximize");
                }

                return fMaximizeMaximizButton;
            }
        }

        /// <summary>
        /// Gets Reference to CloseCloseButton
        /// </summary>
        public Button CloseButton
        {
            get
            {
                if (null == fCloseCloseButton)
                {
                    fCloseCloseButton = new Button("CloseCloseButton", HPAccessControlTitleBar);
                    fCloseCloseButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                }

                return fCloseCloseButton;
            }
        }
        public void WaitForAvailable(int timeout)
        {
            HPAccessControlWindow.WaitForAvailable(timeout);
            QuotaCheckBox.WaitForAvailable(timeout);
            DelegateCheckBox.WaitForAvailable(timeout);
            IPMCheckBox.WaitForAvailable(timeout);
            LocaljobstorageCheckBox.WaitForAvailable(timeout);
        }

        public override PluginExecutionResult PerformAction()
        {
            WaitForAvailable(ShortTimeout);
            if (_setQuota)
            {
                if (QuotaCheckBox.Check(ShortTimeout) != ResultCode.Passed)
                {
                    return new PluginExecutionResult(PluginResult.Failed, "Failed to Select Quota Configuration");
                }
            }
            else
            {
                if (QuotaCheckBox.Uncheck(ShortTimeout) != ResultCode.Passed)
                {
                    return new PluginExecutionResult(PluginResult.Failed, "Failed to Unselect Quota Configuration");
                }

            }
            if (_setDelegate)
            {
                if (DelegateCheckBox.Check(ShortTimeout) != ResultCode.Passed)
                {
                    return new PluginExecutionResult(PluginResult.Failed, "Failed to Select Delegate Configuration");
                }
            }
            else
            {
                if (DelegateCheckBox.Uncheck(ShortTimeout) != ResultCode.Passed)
                {
                    return new PluginExecutionResult(PluginResult.Failed, "Failed to Unselect Delegate Configuration");
                }
            }
            if (_setIPM)
            {
                if (IPMCheckBox.Check(ShortTimeout) != ResultCode.Passed)
                {
                    return new PluginExecutionResult(PluginResult.Failed, "Failed to Select IPM Configuration");
                }
            }
            else
            {
                if (IPMCheckBox.Uncheck(ShortTimeout) != ResultCode.Passed)
                {
                    return new PluginExecutionResult(PluginResult.Failed, "Failed to Unselect Delegate Configuration");
                }
            }
            if (_setLocalJobStorage)
            {
                if (LocaljobstorageCheckBox.Check(ShortTimeout) != ResultCode.Passed)
                {
                    return new PluginExecutionResult(PluginResult.Failed, "Failed to Select LocalJobStorage Configuration");
                }
            }
            else
            {
                if (LocaljobstorageCheckBox.Uncheck(ShortTimeout) != ResultCode.Passed)
                {
                    return new PluginExecutionResult(PluginResult.Failed, "Failed to Unselect LocalJobStorage Configuration");
                }
            }

            Thread.Sleep(HumanTimeSpan);

            if (NextButton.Click(ShortTimeout) != ResultCode.Passed)
            {
                return new PluginExecutionResult(PluginResult.Failed, string.Format("Failed to proceed beyond {0} Screen", ScreenName));
            }
            return new PluginExecutionResult(PluginResult.Passed);
        }        
    }
}

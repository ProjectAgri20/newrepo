//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------

using HP.ScalableTest.Framework.Plugin;
using TopCat.TestApi.Enums;

namespace HP.ScalableTest.Plugin.HpacClient.UIMaps
{
    using System;
    using System.Threading;
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class HpacClientServerSelection :UIMap
    {
        private const int ShortTimeout = 5;

        private static readonly TimeSpan HumanTimeSpan = new TimeSpan(0, 0, 0, 1);

        private string _jaServerName;
        private string _ipmServerName;
        private string _pullprintServerName;
        /// <summary>
        /// Backing field for HPAccessControlWindow property
        /// </summary>
        private Window fHPAccessControlWindow;

        /// <summary>
        /// Backing field for NextButton1164Button property
        /// </summary>
        private Button fNextButton1164Button;

        /// <summary>
        /// Backing field for HPAccessControlDup0Text property
        /// </summary>
        private Text fHPAccessControlDup0Text;

        /// <summary>
        /// Backing field for HPAccessControlDup0Edit property
        /// </summary>
        private Edit fHPAccessControlDup0Edit;

        /// <summary>
        /// Backing field for HPAccessControlDup1Text property
        /// </summary>
        private Text fHPAccessControlDup1Text;

        /// <summary>
        /// Backing field for HPAccessControlDup1Edit property
        /// </summary>
        private Edit fHPAccessControlDup1Edit;

        /// <summary>
        /// Backing field for HPAccessControlDup2Text property
        /// </summary>
        private Text fHPAccessControlDup2Text;

        /// <summary>
        /// Backing field for HPAccessControlDup2Edit property
        /// </summary>
        private Edit fHPAccessControlDup2Edit;

        /// <summary>
        /// Backing field for CancelButton116Button property
        /// </summary>
        private Button fCancelButton116Button;

        /// <summary>
        /// Backing field for BackButton1158Button property
        /// </summary>
        private Button fBackButton1158Button;

        /// <summary>
        /// Backing field for DefBannerBitmapImage property
        /// </summary>
        private Image fDefBannerBitmapImage;

        /// <summary>
        /// Backing field for HPAccessControlDup3Text property
        /// </summary>
        private Text fHPAccessControlDup3Text;

        /// <summary>
        /// Backing field for Static1211Text property
        /// </summary>
        private Text fStatic1211Text;

        /// <summary>
        /// Backing field for MsiHorizontalLiDup0Text property
        /// </summary>
        private Text fMsiHorizontalLiDup0Text;

        /// <summary>
        /// Backing field for MsiHorizontalLiDup1Text property
        /// </summary>
        private Text fMsiHorizontalLiDup1Text;

        /// <summary>
        /// Backing field for HPAccessControlTitleBar property
        /// </summary>
        private TitleBar fHPAccessControlTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyMenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyMenuBar;

        /// <summary>
        /// Backing field for SystemItem1MenuItem property
        /// </summary>
        private MenuItem fSystemItem1MenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizButton property
        /// </summary>
        private Button fMinimizeMinimizButton;

        /// <summary>
        /// Backing field for MaximizeMaximizButton property
        /// </summary>
        private Button fMaximizeMaximizButton;

        /// <summary>
        /// Backing field for CloseCloseButton property
        /// </summary>
        private Button fCloseCloseButton;

        /// <summary>
        /// Initializes a new instance of the <see cref="HpacClientServerSelection"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public HpacClientServerSelection(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
            ScreenName = "Server Selection";
        }
        public HpacClientServerSelection( string jaServerName, string ipmServerName, string pullprintServerName)
        {
            Desktop = new Desktop(UIAFramework.ManagedUIA);
            ScreenName = "Server Selection";
            _jaServerName = jaServerName;
            _ipmServerName = ipmServerName;
            _pullprintServerName = pullprintServerName;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HpacClientServerSelection"/> class using the default UIAFramework.
        /// </summary>
        public HpacClientServerSelection()
        {
            Desktop = new Desktop();
            ScreenName = "Server Selection";
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to HPAccessControlWindow
        /// </summary>
        public Window HPAccessControlWindow
        {
            get
            {
                if (null == fHPAccessControlWindow)
                {
                    fHPAccessControlWindow = new Window("HPAccessControlWindow", Desktop);
                    fHPAccessControlWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPAccessControlWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"MsiDialogCloseClass");
                    fHPAccessControlWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Access Control Print Client");
                }

                return fHPAccessControlWindow;
            }
        }

        /// <summary>
        /// Gets Reference to NextButton1164Button
        /// </summary>
        public Button NextButton
        {
            get
            {
                if (null == fNextButton1164Button)
                {
                    fNextButton1164Button = new Button("NextButton1164Button", HPAccessControlWindow);
                    fNextButton1164Button.UIMap.Scope = UIASeachScope.Children;
                    fNextButton1164Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fNextButton1164Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Next >");
                    //03-13-2016 Since Automation Id is changing,we are using Name as reference to perform the click operation.
                    //fNextButton1164Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1164");
                }

                return fNextButton1164Button;
            }
        }

        /// <summary>
        /// Gets Reference to HPAccessControlDup0Text
        /// </summary>
        public Text HPAccessControlDup0Text
        {
            get
            {
                if (null == fHPAccessControlDup0Text)
                {
                    fHPAccessControlDup0Text = new Text("HPAccessControlDup0Text", HPAccessControlWindow);
                    fHPAccessControlDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fHPAccessControlDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fHPAccessControlDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Access Control JA server name:");
                    fHPAccessControlDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1358");
                }

                return fHPAccessControlDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to HPAccessControlDup0Edit
        /// </summary>
        public Edit HPAccessControlJAServerNameEdit
        {
            get
            {
                if (null == fHPAccessControlDup0Edit)
                {
                    fHPAccessControlDup0Edit = new Edit("HPAccessControlDup0Edit", HPAccessControlWindow);
                    fHPAccessControlDup0Edit.UIMap.Scope = UIASeachScope.Children;
                    fHPAccessControlDup0Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichEdit20W");
                    fHPAccessControlDup0Edit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Access Control JA server name:");
                    //03-13-2016 Since Automation Id is changing,we are using Name as reference to perform the click operation.
                    //fHPAccessControlDup0Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1376");
                }

                return fHPAccessControlDup0Edit;
            }
        }

        /// <summary>
        /// Gets Reference to HPAccessControlDup1Text
        /// </summary>
        public Text HPAccessControlDup1Text
        {
            get
            {
                if (null == fHPAccessControlDup1Text)
                {
                    fHPAccessControlDup1Text = new Text("HPAccessControlDup1Text", HPAccessControlWindow);
                    fHPAccessControlDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fHPAccessControlDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fHPAccessControlDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Access Control IPM server name:");
                    fHPAccessControlDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1373");
                }

                return fHPAccessControlDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to HPAccessControlDup1Edit
        /// </summary>
        public Edit HPAccessControlIPMServerNameEdit
        {
            get
            {
                if (null == fHPAccessControlDup1Edit)
                {
                    fHPAccessControlDup1Edit = new Edit("HPAccessControlDup1Edit", HPAccessControlWindow);
                    fHPAccessControlDup1Edit.UIMap.Scope = UIASeachScope.Children;
                    fHPAccessControlDup1Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichEdit20W");
                    fHPAccessControlDup1Edit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Access Control IPM server name:");
                    //03-13-2016 Since Automation Id is changing,we are using Name as reference to perform the click operation.
                    //fHPAccessControlDup1Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1371");
                }

                return fHPAccessControlDup1Edit;
            }
        }

        /// <summary>
        /// Gets Reference to HPAccessControlDup2Text
        /// </summary>
        public Text HPAccessControlDup2Text
        {
            get
            {
                if (null == fHPAccessControlDup2Text)
                {
                    fHPAccessControlDup2Text = new Text("HPAccessControlDup2Text", HPAccessControlWindow);
                    fHPAccessControlDup2Text.UIMap.Scope = UIASeachScope.Children;
                    fHPAccessControlDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fHPAccessControlDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Access Control Pull Print server name:");
                    fHPAccessControlDup2Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1369");
                }

                return fHPAccessControlDup2Text;
            }
        }

        /// <summary>
        /// Gets Reference to HPAccessControlDup2Edit
        /// </summary>
        public Edit HPAccessControlPullPrintServerNameEdit
        {
            get
            {
                if (null == fHPAccessControlDup2Edit)
                {
                    fHPAccessControlDup2Edit = new Edit("HPAccessControlDup2Edit", HPAccessControlWindow);
                    fHPAccessControlDup2Edit.UIMap.Scope = UIASeachScope.Children;
                    fHPAccessControlDup2Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichEdit20W");
                    fHPAccessControlDup2Edit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Access Control Pull Print server name:");
                    //03-13-2016 Since Automation Id is changing,we are using Name as reference to perform the click operation.
                    //fHPAccessControlDup2Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1367");
                }

                return fHPAccessControlDup2Edit;
            }
        }

        /// <summary>
        /// Gets Reference to CancelButton116Button
        /// </summary>
        public Button CancelButton116Button
        {
            get
            {
                if (null == fCancelButton116Button)
                {
                    fCancelButton116Button = new Button("CancelButton116Button", HPAccessControlWindow);
                    fCancelButton116Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton116Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButton116Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                    fCancelButton116Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1161");
                }

                return fCancelButton116Button;
            }
        }

        /// <summary>
        /// Gets Reference to BackButton1158Button
        /// </summary>
        public Button BackButton1158Button
        {
            get
            {
                if (null == fBackButton1158Button)
                {
                    fBackButton1158Button = new Button("BackButton1158Button", HPAccessControlWindow);
                    fBackButton1158Button.UIMap.Scope = UIASeachScope.Children;
                    fBackButton1158Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fBackButton1158Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"< Back");
                    fBackButton1158Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1158");
                }

                return fBackButton1158Button;
            }
        }

        /// <summary>
        /// Gets Reference to DefBannerBitmapImage
        /// </summary>
        public Image DefBannerBitmapImage
        {
            get
            {
                if (null == fDefBannerBitmapImage)
                {
                    fDefBannerBitmapImage = new Image("DefBannerBitmapImage", HPAccessControlWindow);
                    fDefBannerBitmapImage.UIMap.Scope = UIASeachScope.Children;
                    fDefBannerBitmapImage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fDefBannerBitmapImage.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DefBannerBitmap");
                    fDefBannerBitmapImage.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1171");
                }

                return fDefBannerBitmapImage;
            }
        }

        /// <summary>
        /// Gets Reference to HPAccessControlDup3Text
        /// </summary>
        public Text HPAccessControlDup3Text
        {
            get
            {
                if (null == fHPAccessControlDup3Text)
                {
                    fHPAccessControlDup3Text = new Text("HPAccessControlDup3Text", HPAccessControlWindow);
                    fHPAccessControlDup3Text.UIMap.Scope = UIASeachScope.Children;
                    fHPAccessControlDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fHPAccessControlDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Access Control Print Client");
                    fHPAccessControlDup3Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1205");
                }

                return fHPAccessControlDup3Text;
            }
        }

        /// <summary>
        /// Gets Reference to Static1211Text
        /// </summary>
        public Text Static1211Text
        {
            get
            {
                if (null == fStatic1211Text)
                {
                    fStatic1211Text = new Text("Static1211Text", HPAccessControlWindow);
                    fStatic1211Text.UIMap.Scope = UIASeachScope.Children;
                    fStatic1211Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fStatic1211Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1211");
                }

                return fStatic1211Text;
            }
        }

        /// <summary>
        /// Gets Reference to MsiHorizontalLiDup0Text
        /// </summary>
        public Text MsiHorizontalLiDup0Text
        {
            get
            {
                if (null == fMsiHorizontalLiDup0Text)
                {
                    fMsiHorizontalLiDup0Text = new Text("MsiHorizontalLiDup0Text", HPAccessControlWindow);
                    fMsiHorizontalLiDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fMsiHorizontalLiDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fMsiHorizontalLiDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"MsiHorizontalLine");
                    fMsiHorizontalLiDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1374");
                }

                return fMsiHorizontalLiDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to MsiHorizontalLiDup1Text
        /// </summary>
        public Text MsiHorizontalLiDup1Text
        {
            get
            {
                if (null == fMsiHorizontalLiDup1Text)
                {
                    fMsiHorizontalLiDup1Text = new Text("MsiHorizontalLiDup1Text", HPAccessControlWindow);
                    fMsiHorizontalLiDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fMsiHorizontalLiDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fMsiHorizontalLiDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"MsiHorizontalLine");
                    fMsiHorizontalLiDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1378");
                }

                return fMsiHorizontalLiDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to HPAccessControlTitleBar
        /// </summary>
        public TitleBar HPAccessControlTitleBar
        {
            get
            {
                if (null == fHPAccessControlTitleBar)
                {
                    fHPAccessControlTitleBar = new TitleBar("HPAccessControlTitleBar", HPAccessControlWindow);
                    fHPAccessControlTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fHPAccessControlTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Access Control Print Client");
                    fHPAccessControlTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                }

                return fHPAccessControlTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemMenuBarSyMenuBar
        /// </summary>
        public MenuBar SystemMenuBarSyMenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyMenuBar)
                {
                    fSystemMenuBarSyMenuBar = new MenuBar("SystemMenuBarSyMenuBar", HPAccessControlTitleBar);
                    fSystemMenuBarSyMenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                }

                return fSystemMenuBarSyMenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemItem1MenuItem
        /// </summary>
        public MenuItem SystemItem1MenuItem
        {
            get
            {
                if (null == fSystemItem1MenuItem)
                {
                    fSystemItem1MenuItem = new MenuItem("SystemItem1MenuItem", SystemMenuBarSyMenuBar);
                    fSystemItem1MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                }

                return fSystemItem1MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to MinimizeMinimizButton
        /// </summary>
        public Button MinimizeMinimizButton
        {
            get
            {
                if (null == fMinimizeMinimizButton)
                {
                    fMinimizeMinimizButton = new Button("MinimizeMinimizButton", HPAccessControlTitleBar);
                    fMinimizeMinimizButton.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                    fMinimizeMinimizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                }

                return fMinimizeMinimizButton;
            }
        }

        /// <summary>
        /// Gets Reference to MaximizeMaximizButton
        /// </summary>
        public Button MaximizeMaximizButton
        {
            get
            {
                if (null == fMaximizeMaximizButton)
                {
                    fMaximizeMaximizButton = new Button("MaximizeMaximizButton", HPAccessControlTitleBar);
                    fMaximizeMaximizButton.UIMap.Scope = UIASeachScope.Children;
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximize");
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Maximize");
                }

                return fMaximizeMaximizButton;
            }
        }

        /// <summary>
        /// Gets Reference to CloseCloseButton
        /// </summary>
        public Button CloseCloseButton
        {
            get
            {
                if (null == fCloseCloseButton)
                {
                    fCloseCloseButton = new Button("CloseCloseButton", HPAccessControlTitleBar);
                    fCloseCloseButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                }

                return fCloseCloseButton;
            }
        }
        public void WaitForAvailable(int timeout)
        {
            HPAccessControlWindow.WaitForAvailable(timeout);
            NextButton.WaitForAvailable(timeout);
        }

        public override PluginExecutionResult PerformAction()
        {
            WaitForAvailable(ShortTimeout);           
            if (HPAccessControlJAServerNameEdit.EnterText(_jaServerName, ShortTimeout) != ResultCode.Passed)
            {
                return new PluginExecutionResult(PluginResult.Failed, "Failed to Enter JA Server Name");
            }  
                      
            if (HPAccessControlIPMServerNameEdit.EnterText(_ipmServerName, ShortTimeout) != ResultCode.Passed)
            {
                return new PluginExecutionResult(PluginResult.Failed, "Failed to Enter IPM Server Name");
            }

            if (HPAccessControlPullPrintServerNameEdit.EnterText(_pullprintServerName, ShortTimeout) != ResultCode.Passed)
            {
                return new PluginExecutionResult(PluginResult.Failed, "Failed to Enter Pull Print Server Name");
            }

            Thread.Sleep(HumanTimeSpan);
            if (NextButton.Click(ShortTimeout) != ResultCode.Passed)
            {
                return new PluginExecutionResult(PluginResult.Failed, string.Format("Failed to proceed beyond {0} Screen", ScreenName));
            }
            return new PluginExecutionResult(PluginResult.Passed);
        }
       
    }
}

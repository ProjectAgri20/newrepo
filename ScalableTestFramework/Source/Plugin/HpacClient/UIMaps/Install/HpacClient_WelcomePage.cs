//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------
using HP.ScalableTest.Framework.Plugin;
using TopCat.TestApi.Enums;

namespace HP.ScalableTest.Plugin.HpacClient.UIMaps
{
    using Utility;
    using System;
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;
    using System.Threading;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class HpacClient_WelcomePage : UIMap
    {
        private const int ShortTimeout = 5;

        private static readonly TimeSpan HumanTimeSpan = new TimeSpan(0, 0, 0, 1);
        /// <summary>
        /// Backing field for HPAccessControlWindow property
        /// </summary>
        private Window fHPAccessControlWindow;

        /// <summary>
        /// Backing field for NextButton1164Button property
        /// </summary>
        private Button fNextButton1164Button;

        /// <summary>
        /// Backing field for CancelButton116Button property
        /// </summary>
        private Button fCancelButton116Button;

        /// <summary>
        /// Backing field for BackButton1158Button property
        /// </summary>
        private Button fBackButton1158Button;

        /// <summary>
        /// Backing field for DefBannerBitmapImage property
        /// </summary>
        private Image fDefBannerBitmapImage;

        /// <summary>
        /// Backing field for MsiHorizontalLiDup0Text property
        /// </summary>
        private Text fMsiHorizontalLiDup0Text;

        /// <summary>
        /// Backing field for MsiHorizontalLiDup1Text property
        /// </summary>
        private Text fMsiHorizontalLiDup1Text;

        /// <summary>
        /// Backing field for WelcometotheHPAText property
        /// </summary>
        private Text fWelcometotheHPAText;

        /// <summary>
        /// Backing field for WARNINGThiscompText property
        /// </summary>
        private Text fWARNINGThiscompText;

        /// <summary>
        /// Backing field for TheinstallerwilText property
        /// </summary>
        private Text fTheinstallerwilText;

        /// <summary>
        /// Backing field for HPAccessControlTitleBar property
        /// </summary>
        private TitleBar fHPAccessControlTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyMenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyMenuBar;

        /// <summary>
        /// Backing field for SystemItem1MenuItem property
        /// </summary>
        private MenuItem fSystemItem1MenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizButton property
        /// </summary>
        private Button fMinimizeMinimizButton;

        /// <summary>
        /// Backing field for MaximizeMaximizButton property
        /// </summary>
        private Button fMaximizeMaximizButton;

        /// <summary>
        /// Backing field for CloseCloseButton property
        /// </summary>
        private Button fCloseCloseButton;

        /// <summary>
        /// Backing field for CloseCloseButton property
        /// </summary>
        private Button fOk1447Button;

        private Text fInstallthex64veText;


        /// <summary>
        /// Initializes a new instance of the <see cref="HpacClient_WelcomePage"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public HpacClient_WelcomePage(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
            ScreenName = "Welcome Screen";
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HpacClient_WelcomePage"/> class using the default UIAFramework.
        /// </summary>
        public HpacClient_WelcomePage()
        {
            Desktop = new Desktop();
            ScreenName = "Welcome Screen";
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to HPAccessControlWindow
        /// </summary>
        public Window HPAccessControlWindow
        {
            get
            {
                if (null == fHPAccessControlWindow)
                {
                    fHPAccessControlWindow = new Window("HPAccessControlWindow", Desktop);
                    fHPAccessControlWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPAccessControlWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"MsiDialogCloseClass");
                    fHPAccessControlWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Access Control Print Client");
                }

                return fHPAccessControlWindow;
            }
        }

        /// <summary>
        /// Gets Reference to NextButton1164Button
        /// </summary>
        public Button NextButton
        {
            get
            {
                if (null == fNextButton1164Button)
                {
                    fNextButton1164Button = new Button("NextButton1164Button", HPAccessControlWindow);
                    fNextButton1164Button.UIMap.Scope = UIASeachScope.Children;
                    fNextButton1164Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fNextButton1164Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Next >");
                    //03-13-2016 Since Automation Id is changing,we are using Name as reference to perform the click operation.
                    //fNextButton1164Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1164");                    
                }

                return fNextButton1164Button;
            }
        }

        /// <summary>
        /// Gets Reference to CancelButton116Button
        /// </summary>
        public Button CancelButton116Button
        {
            get
            {
                if (null == fCancelButton116Button)
                {
                    fCancelButton116Button = new Button("CancelButton116Button", HPAccessControlWindow);
                    fCancelButton116Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton116Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButton116Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                    fCancelButton116Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1161");
                }

                return fCancelButton116Button;
            }
        }

        /// <summary>
        /// Gets Reference to BackButton1158Button
        /// </summary>
        public Button BackButton1158Button
        {
            get
            {
                if (null == fBackButton1158Button)
                {
                    fBackButton1158Button = new Button("BackButton1158Button", HPAccessControlWindow);
                    fBackButton1158Button.UIMap.Scope = UIASeachScope.Children;
                    fBackButton1158Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fBackButton1158Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"< Back");
                    fBackButton1158Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1158");
                }

                return fBackButton1158Button;
            }
        }

        /// <summary>
        /// Gets Reference to DefBannerBitmapImage
        /// </summary>
        public Image DefBannerBitmapImage
        {
            get
            {
                if (null == fDefBannerBitmapImage)
                {
                    fDefBannerBitmapImage = new Image("DefBannerBitmapImage", HPAccessControlWindow);
                    fDefBannerBitmapImage.UIMap.Scope = UIASeachScope.Children;
                    fDefBannerBitmapImage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fDefBannerBitmapImage.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DefBannerBitmap");
                    fDefBannerBitmapImage.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1171");
                }

                return fDefBannerBitmapImage;
            }
        }

        /// <summary>
        /// Gets Reference to MsiHorizontalLiDup0Text
        /// </summary>
        public Text MsiHorizontalLiDup0Text
        {
            get
            {
                if (null == fMsiHorizontalLiDup0Text)
                {
                    fMsiHorizontalLiDup0Text = new Text("MsiHorizontalLiDup0Text", HPAccessControlWindow);
                    fMsiHorizontalLiDup0Text.UIMap.Scope = UIASeachScope.Children;
                    fMsiHorizontalLiDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fMsiHorizontalLiDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"MsiHorizontalLine");
                    fMsiHorizontalLiDup0Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1167");
                }

                return fMsiHorizontalLiDup0Text;
            }
        }

        /// <summary>
        /// Gets Reference to MsiHorizontalLiDup1Text
        /// </summary>
        public Text MsiHorizontalLiDup1Text
        {
            get
            {
                if (null == fMsiHorizontalLiDup1Text)
                {
                    fMsiHorizontalLiDup1Text = new Text("MsiHorizontalLiDup1Text", HPAccessControlWindow);
                    fMsiHorizontalLiDup1Text.UIMap.Scope = UIASeachScope.Children;
                    fMsiHorizontalLiDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fMsiHorizontalLiDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"MsiHorizontalLine");
                    fMsiHorizontalLiDup1Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1170");
                }

                return fMsiHorizontalLiDup1Text;
            }
        }

        /// <summary>
        /// Gets Reference to WelcometotheHPAText
        /// </summary>
        public Text WelcometotheHPAText
        {
            get
            {
                if (null == fWelcometotheHPAText)
                {
                    fWelcometotheHPAText = new Text("WelcometotheHPAText", HPAccessControlWindow);
                    fWelcometotheHPAText.UIMap.Scope = UIASeachScope.Children;
                    fWelcometotheHPAText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fWelcometotheHPAText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Welcome to the HP Access Control Print Client Setup Wizard");
                    fWelcometotheHPAText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1205");
                }

                return fWelcometotheHPAText;
            }
        }

        /// <summary>
        /// Gets Reference to WARNINGThiscompText
        /// </summary>
        public Text WARNINGThiscompText
        {
            get
            {
                if (null == fWARNINGThiscompText)
                {
                    fWARNINGThiscompText = new Text("WARNINGThiscompText", HPAccessControlWindow);
                    fWARNINGThiscompText.UIMap.Scope = UIASeachScope.Children;
                    fWARNINGThiscompText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fWARNINGThiscompText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"WARNING: This computer program is protected by copyright law and international treaties. Unauthorized duplication or distribution of this program, or any portion of it, may result in severe civil or criminal penalties, and will be prosecuted to the maximum extent possible under the law.");
                    fWARNINGThiscompText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1304");
                }

                return fWARNINGThiscompText;
            }
        }

        /// <summary>
        /// Gets Reference to TheinstallerwilText
        /// </summary>
        public Text TheinstallerwilText
        {
            get
            {
                if (null == fTheinstallerwilText)
                {
                    fTheinstallerwilText = new Text("TheinstallerwilText", HPAccessControlWindow);
                    fTheinstallerwilText.UIMap.Scope = UIASeachScope.Children;
                    fTheinstallerwilText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fTheinstallerwilText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"The installer will guide you through the steps required to install HP Access Control Print Client on your computer.");
                    fTheinstallerwilText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1306");
                }

                return fTheinstallerwilText;
            }
        }

        /// <summary>
        /// Gets Reference to HPAccessControlTitleBar
        /// </summary>
        public TitleBar HPAccessControlTitleBar
        {
            get
            {
                if (null == fHPAccessControlTitleBar)
                {
                    fHPAccessControlTitleBar = new TitleBar("HPAccessControlTitleBar", HPAccessControlWindow);
                    fHPAccessControlTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fHPAccessControlTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Access Control Print Client");
                    fHPAccessControlTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                }

                return fHPAccessControlTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemMenuBarSyMenuBar
        /// </summary>
        public MenuBar SystemMenuBarSyMenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyMenuBar)
                {
                    fSystemMenuBarSyMenuBar = new MenuBar("SystemMenuBarSyMenuBar", HPAccessControlTitleBar);
                    fSystemMenuBarSyMenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                }

                return fSystemMenuBarSyMenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemItem1MenuItem
        /// </summary>
        public MenuItem SystemItem1MenuItem
        {
            get
            {
                if (null == fSystemItem1MenuItem)
                {
                    fSystemItem1MenuItem = new MenuItem("SystemItem1MenuItem", SystemMenuBarSyMenuBar);
                    fSystemItem1MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                }

                return fSystemItem1MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to MinimizeMinimizButton
        /// </summary>
        public Button MinimizeMinimizButton
        {
            get
            {
                if (null == fMinimizeMinimizButton)
                {
                    fMinimizeMinimizButton = new Button("MinimizeMinimizButton", HPAccessControlTitleBar);
                    fMinimizeMinimizButton.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                    fMinimizeMinimizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                }

                return fMinimizeMinimizButton;
            }
        }

        /// <summary>
        /// Gets Reference to MaximizeMaximizButton
        /// </summary>
        public Button MaximizeMaximizButton
        {
            get
            {
                if (null == fMaximizeMaximizButton)
                {
                    fMaximizeMaximizButton = new Button("MaximizeMaximizButton", HPAccessControlTitleBar);
                    fMaximizeMaximizButton.UIMap.Scope = UIASeachScope.Children;
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximize");
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Maximize");
                }

                return fMaximizeMaximizButton;
            }
        }

        /// <summary>
        /// Gets Reference to CloseCloseButton
        /// </summary>
        public Button CloseCloseButton
        {
            get
            {
                if (null == fCloseCloseButton)
                {
                    fCloseCloseButton = new Button("CloseCloseButton", HPAccessControlTitleBar);
                    fCloseCloseButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                }

                return fCloseCloseButton;
            }
        }

       
        public Button OKButton1447Button
        {
            get
            {
                if (null == fOk1447Button)
                {
                    fOk1447Button = new Button("OKButton1447Button", HPAccessControlWindow);
                    fOk1447Button.UIMap.Scope = UIASeachScope.Children;
                    fOk1447Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOk1447Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                    fOk1447Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1447");
                }

                return fCloseCloseButton;
            }
        }
      

        public Text Installthex64veText
        {
            get
            {
                if (null == fInstallthex64veText)
                {
                    fInstallthex64veText = new Text("Installthex64veText", HPAccessControlWindow);
                    fInstallthex64veText.UIMap.Scope = UIASeachScope.Children;
                    fInstallthex64veText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fInstallthex64veText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Install the x64 version of this package");
                    fInstallthex64veText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1442");
                }

                return fInstallthex64veText;
            }
        }

        private Button fMsiRadioButtonGButton;
        public Button MsiRadioButtonGButton
        {
            get
            {
                if (null == fMsiRadioButtonGButton)
                {
                    fMsiRadioButtonGButton = new Button("MsiRadioButtonGButton", HPAccessControlWindow);
                    fMsiRadioButtonGButton.UIMap.Scope = UIASeachScope.Children;
                    fMsiRadioButtonGButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fMsiRadioButtonGButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"MsiRadioButtonGroup");
                    fMsiRadioButtonGButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1221");
                }
                return fMsiRadioButtonGButton;
            }
        }
        private RadioButton fRepairHPAccessCRadioButton;
        public RadioButton RepairHPAccessCRadioButton
        {
            get
            {
                if (null == fRepairHPAccessCRadioButton)
                {
                    fRepairHPAccessCRadioButton = new RadioButton("RepairHPAccessCRadioButton", MsiRadioButtonGButton);
                    fRepairHPAccessCRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fRepairHPAccessCRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fRepairHPAccessCRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Repair HP Access Control Print Client");
                    fRepairHPAccessCRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1199");
                }
                return fRepairHPAccessCRadioButton;
            }
        }

        private RadioButton fRemoveHPAccessCRadioButton;
        public RadioButton RemoveHPAccessCRadioButton
        {
            get
            {
                if (null == fRemoveHPAccessCRadioButton)
                {
                    fRemoveHPAccessCRadioButton = new RadioButton("RemoveHPAccessCRadioButton", MsiRadioButtonGButton);
                    fRemoveHPAccessCRadioButton.UIMap.Scope = UIASeachScope.Children;
                    fRemoveHPAccessCRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fRemoveHPAccessCRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Remove HP Access Control Print Client");
                    fRemoveHPAccessCRadioButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"629");
                }
                return fRemoveHPAccessCRadioButton;
            }
        }
        
    public void WaitForAvailable(int timeout)
        {
            try {
                HPAccessControlWindow.WaitForAvailable(timeout);
                NextButton.WaitForAvailable(timeout);
            }
            catch
            {
                if (RepairHPAccessCRadioButton.IsAvailable(5) && RemoveHPAccessCRadioButton.IsAvailable(5))
                {
                    throw new Exception("The HPAC Client seems to be already installed on this System");
                }
                if(Installthex64veText.IsAvailable(5))
                {
                    throw new Exception("MSI Package Incompatible with the OS.Check the platform of the MSI Package");
                }
            }
        }
        
        public override PluginExecutionResult PerformAction()
        {            
            WaitForAvailable(ShortTimeout);

            Thread.Sleep(HumanTimeSpan);
            if (NextButton.Click() != ResultCode.Passed)
            {
                return new PluginExecutionResult(PluginResult.Failed, string.Format("Failed to proceed beyond {0} screen", ScreenName));
            }
            return new PluginExecutionResult(PluginResult.Passed);
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------

namespace HP.ScalableTest.Plugins.PrintQueueManagement.UIMap
{
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class PrintPreferences
    {
        /// <summary>
        /// Backing field for HPOfficejetProXWindow property
        /// </summary>
        private Window fPrintPreferencesWindow;

        /// <summary>
        /// Backing field for SysTabControl32Tab property
        /// </summary>
        private Tab fSysTabControl32Tab;

        /// <summary>
        /// Backing field for DeviceSettingsTabItem property
        /// </summary>
        private TabItem fDeviceSettingsTabItem;

        /// <summary>
        /// Backing field for HPUniversalPrintTreeItem property
        /// </summary>
        private TreeItem fHPUniversalPrintTreeItem;

        /// <summary>
        /// Backing field for InstallableOptionTreeItem property
        /// </summary>
        private TreeItem fInstallableOptionTreeItem;

        /// <summary>
        /// Backing field for DuplexUnitfor2STreeItem property
        /// </summary>
        private TreeItem fDuplexUnitfor2STreeItem;

        /// <summary>
        /// Backing field for DuplexUnitfor2SNTreeItem property
        /// </summary>
        private TreeItem fDuplexUnitfor2SNTreeItem;

        /// <summary>
        /// Backing field for NotInstalledListItem property
        /// </summary>
        private ListItem fNotInstalledListItem;

        /// <summary>
        /// Backing field for InstalledListItem property
        /// </summary>
        private ListItem fInstalledListItem;

        /// <summary>
        /// Backing field for DuplexUnitfor2SComboBox property
        /// </summary>
        private ComboBox fDuplexUnitfor2SComboBox;

        /// <summary>
        /// Backing field for DuplexUnitfor2SList property
        /// </summary>
        private List fDuplexUnitfor2SList;

        /// <summary>
        /// Backing field for OKButton1Button property
        /// </summary>
        private Button fOKButton1Button;

        /// <summary>
        /// Backing field for CancelButton2Button property
        /// </summary>
        private Button fCancelButton2Button;

        /// <summary>
        /// Backing field for ApplyButton1232Button property
        /// </summary>
        private Button fApplyButton1232Button;

        /// <summary>
        /// Backing field for AdvancedTabItem property
        /// </summary>
        private TabItem fAdvancedTabItem;

        /// <summary>
        /// Backing field for PrintingShortcutTabItem property
        /// </summary>
        private TabItem fPrintingShortcutTabItem;

        /// <summary>
        /// Backing field for A32770Pane property
        /// </summary>
        private Pane fA32770Pane;

        /// <summary>
        /// Backing field for SysTreeView3291Tree property
        /// </summary>
        private Tree fSysTreeView3291Tree;

        /// <summary>
        /// Backing field for CopyCountmsctlsSpinner property
        /// </summary>
        private Spinner fCopyCountmsctlsSpinner;

        /// <summary>
        /// Backing field for PrintingShortcutPane property
        /// </summary>
        private Pane fPrintingShortcutPane;

        /// <summary>
        /// Backing field for AprintingshortcText property
        /// </summary>
        private Text fAprintingshortcText;

        /// <summary>
        /// Backing field for ListBox956List property
        /// </summary>
        private List fListBox956List;

        /// <summary>
        /// Backing field for FactoryDefaultsListItem property
        /// </summary>
        private ListItem fFactoryDefaultsListItem;

        /// <summary>
        /// Backing field for EcoSMARTSettingListItem property
        /// </summary>
        private ListItem fEcoSMARTSettingListItem;

        /// <summary>
        /// Backing field for PapersizesStaticText property
        /// </summary>
        private Text fPapersizesStaticText;

        /// <summary>
        /// Backing field for PaperSizesComboComboBox property
        /// </summary>
        private ComboBox fPaperSizesComboComboBox;

        /// <summary>
        /// Backing field for PaperSizesComboList property
        /// </summary>
        private List fPaperSizesComboList;

        /// <summary>
        /// Backing field for LetterListItem property
        /// </summary>
        private ListItem fLetterListItem;

        /// <summary>
        /// Backing field for LegalListItem property
        /// </summary>
        private ListItem fLegalListItem;

        /// <summary>
        /// Backing field for ExecutiveListItem property
        /// </summary>
        private ListItem fExecutiveListItem;

        /// <summary>
        /// Backing field for StatementListItem property
        /// </summary>
        private ListItem fStatementListItem;

        /// <summary>
        /// Backing field for Oficio85x13ListItem property
        /// </summary>
        private ListItem fOficio85x13ListItem;

        /// <summary>
        /// Backing field for A3x5ListItem property
        /// </summary>
        private ListItem fA3x5ListItem;

        /// <summary>
        /// Backing field for A4x6ListItem property
        /// </summary>
        private ListItem fA4x6ListItem;

        /// <summary>
        /// Backing field for A5x7ListItem property
        /// </summary>
        private ListItem fA5x7ListItem;

        /// <summary>
        /// Backing field for A5x8ListItem property
        /// </summary>
        private ListItem fA5x8ListItem;

        /// <summary>
        /// Backing field for A4ListItem property
        /// </summary>
        private ListItem fA4ListItem;

        /// <summary>
        /// Backing field for A5ListItem property
        /// </summary>
        private ListItem fA5ListItem;

        /// <summary>
        /// Backing field for A6ListItem property
        /// </summary>
        private ListItem fA6ListItem;

        /// <summary>
        /// Backing field for B5JISListItem property
        /// </summary>
        private ListItem fB5JISListItem;

        /// <summary>
        /// Backing field for B6JISListItem property
        /// </summary>
        private ListItem fB6JISListItem;

        /// <summary>
        /// Backing field for L9x13cmListItem property
        /// </summary>
        private ListItem fL9x13cmListItem;

        /// <summary>
        /// Backing field for A10x15cmListItem property
        /// </summary>
        private ListItem fA10x15cmListItem;

        /// <summary>
        /// Backing field for Oficio216x340mmListItem property
        /// </summary>
        private ListItem fOficio216x340mmListItem;

        /// <summary>
        /// Backing field for A16K195x270mmListItem property
        /// </summary>
        private ListItem fA16K195x270mmListItem;

        /// <summary>
        /// Backing field for A16K184x260mmListItem property
        /// </summary>
        private ListItem fA16K184x260mmListItem;

        /// <summary>
        /// Backing field for A16K197x273mmListItem property
        /// </summary>
        private ListItem fA16K197x273mmListItem;

        /// <summary>
        /// Backing field for JapanesePostcarListItem property
        /// </summary>
        private ListItem fJapanesePostcarListItem;

        /// <summary>
        /// Backing field for DoubleJapanPostListItem property
        /// </summary>
        private ListItem fDoubleJapanPostListItem;

        /// <summary>
        /// Backing field for Envelope10ListItem property
        /// </summary>
        private ListItem fEnvelope10ListItem;

        /// <summary>
        /// Backing field for EnvelopeMonarchListItem property
        /// </summary>
        private ListItem fEnvelopeMonarchListItem;

        /// <summary>
        /// Backing field for EnvelopeB5ListItem property
        /// </summary>
        private ListItem fEnvelopeB5ListItem;

        /// <summary>
        /// Backing field for EnvelopeC5ListItem property
        /// </summary>
        private ListItem fEnvelopeC5ListItem;

        /// <summary>
        /// Backing field for EnvelopeC6ListItem property
        /// </summary>
        private ListItem fEnvelopeC6ListItem;

        /// <summary>
        /// Backing field for EnvelopeDLListItem property
        /// </summary>
        private ListItem fEnvelopeDLListItem;

        /// <summary>
        /// Backing field for JapaneseEnvelopDup0ListItem property
        /// </summary>
        private ListItem fJapaneseEnvelopDup0ListItem;

        /// <summary>
        /// Backing field for JapaneseEnvelopDup1ListItem property
        /// </summary>
        private ListItem fJapaneseEnvelopDup1ListItem;

        /// <summary>
        /// Backing field for DropDownButtonDDup0Button property
        /// </summary>
        private Button fDropDownButtonDDup0Button;

        /// <summary>
        /// Backing field for PapersourceStatText property
        /// </summary>
        private Text fPapersourceStatText;

        /// <summary>
        /// Backing field for PapersourceCombComboBox property
        /// </summary>
        private ComboBox fPapersourceCombComboBox;

        /// <summary>
        /// Backing field for PapersourceCombList property
        /// </summary>
        private List fPapersourceCombList;

        /// <summary>
        /// Backing field for Automatically SelectListItem property
        /// </summary>
        private ListItem fAutomaticallySelectListItem;

        /// <summary>
        /// Backing field for PrinterautoselectListItem property
        /// </summary>
        private ListItem fPrinterAutoSelectListItem;

        /// <summary>
        /// Backing field for ManualFeedinTraListItem property
        /// </summary>
        private ListItem fManualFeedinTraListItem;

        /// <summary>
        /// Backing field for Tray 1ListItem property
        /// </summary>
        private ListItem fTray1ListItem;

        /// <summary>
        /// Backing field for Tray 2ListItem property
        /// </summary>
        private ListItem fTray2ListItem;

        /// <summary>
        /// Backing field for Tray 3ListItem property
        /// </summary>
        private ListItem fTray3ListItem;

        /// <summary>
        /// Backing field for Tray 4ListItem property
        /// </summary>
        private ListItem fTray4ListItem;

        /// <summary>
        /// Backing field for Tray 5ListItem property
        /// </summary>
        private ListItem fTray5ListItem;
        
        /// <summary>
        /// Backing field for Tray 6ListItem property
        /// </summary>
        private ListItem fTray6ListItem;

        /// <summary>
        /// Backing field for Tray 7ListItem property
        /// </summary>
        private ListItem fTray7ListItem;

        /// <summary>
        /// Backing field for Tray 8ListItem property
        /// </summary>
        private ListItem fTray8ListItem;

        /// <summary>
        /// Backing field for Tray 9ListItem property
        /// </summary>
        private ListItem fTray9ListItem;

        /// <summary>
        /// Backing field for Tray 10ListItem property
        /// </summary>
        private ListItem fTray10ListItem;

        /// <summary>
        /// Backing field for DropDownButtonDDup1Button property
        /// </summary>
        private Button fDropDownButtonDDup1Button;

        /// <summary>
        /// Backing field for PagespersheetStText property
        /// </summary>
        private Text fPagespersheetStText;

        /// <summary>
        /// Backing field for PagespersheetCoComboBox property
        /// </summary>
        private ComboBox fPagespersheetCoComboBox;

        /// <summary>
        /// Backing field for PagespersheetCoList property
        /// </summary>
        private List fPagespersheetCoList;

        /// <summary>
        /// Backing field for A1pagepersheetListItem property
        /// </summary>
        private ListItem fA1pagepersheetListItem;

        /// <summary>
        /// Backing field for A2pagespersheetListItem property
        /// </summary>
        private ListItem fA2pagespersheetListItem;

        /// <summary>
        /// Backing field for A4pagespersheetListItem property
        /// </summary>
        private ListItem fA4pagespersheetListItem;

        /// <summary>
        /// Backing field for A6pagespersheetListItem property
        /// </summary>
        private ListItem fA6pagespersheetListItem;

        /// <summary>
        /// Backing field for A9pagespersheetListItem property
        /// </summary>
        private ListItem fA9pagespersheetListItem;

        /// <summary>
        /// Backing field for A16pagespersheeListItem property
        /// </summary>
        private ListItem fA16pagespersheeListItem;

        /// <summary>
        /// Backing field for DropDownButtonDDup2Button property
        /// </summary>
        private Button fDropDownButtonDDup2Button;

        /// <summary>
        /// Backing field for PrintonbothsideText property
        /// </summary>
        private Text fPrintonbothsideText;

        /// <summary>
        /// Backing field for PrintonbothsideComboBox property
        /// </summary>
        private ComboBox fPrintonbothsideComboBox;

        /// <summary>
        /// Backing field for PrintonbothsideList property
        /// </summary>
        private List fPrintonbothsideList;

        /// <summary>
        /// Backing field for NoListItem property
        /// </summary>
        private ListItem fNoListItem;

        /// <summary>
        /// Backing field for YesflipoverListItem property
        /// </summary>
        private ListItem fYesflipoverListItem;

        /// <summary>
        /// Backing field for YesflipupListItem property
        /// </summary>
        private ListItem fYesflipupListItem;

        /// <summary>
        /// Backing field for DropDownButtonDDup3Button property
        /// </summary>
        private Button fDropDownButtonDDup3Button;

        /// <summary>
        /// Backing field for PapertypeStaticText property
        /// </summary>
        private Text fPapertypeStaticText;

        /// <summary>
        /// Backing field for PapertypeComboBComboBox property
        /// </summary>
        private ComboBox fPapertypeComboBComboBox;

        /// <summary>
        /// Backing field for PapertypeComboLList property
        /// </summary>
        private List fPapertypeComboLList;

        /// <summary>
        /// Backing field for UnspecifiedListItem property
        /// </summary>
        private ListItem fUnspecifiedListItem;

        /// <summary>
        /// Backing field for PlainListItem property
        /// </summary>
        private ListItem fPlainListItem;

        /// <summary>
        /// Backing field for HPEcoSMARTLiteListItem property
        /// </summary>
        private ListItem fHPEcoSMARTLiteListItem;

        /// <summary>
        /// Backing field for Light6074gListItem property
        /// </summary>
        private ListItem fLight6074gListItem;

        /// <summary>
        /// Backing field for Intermediate859ListItem property
        /// </summary>
        private ListItem fIntermediate859ListItem;

        /// <summary>
        /// Backing field for HPPremiumPresenListItem property
        /// </summary>
        private ListItem fHPPremiumPresenListItem;

        /// <summary>
        /// Backing field for MidWeight96110gListItem property
        /// </summary>
        private ListItem fMidWeight96110gListItem;

        /// <summary>
        /// Backing field for Heavy111130gListItem property
        /// </summary>
        private ListItem fHeavy111130gListItem;

        /// <summary>
        /// Backing field for HPBrochureMatteListItem property
        /// </summary>
        private ListItem fHPBrochureMatteListItem;

        /// <summary>
        /// Backing field for HPBrochureGlossListItem property
        /// </summary>
        private ListItem fHPBrochureGlossListItem;

        /// <summary>
        /// Backing field for ExtraHeavy13117ListItem property
        /// </summary>
        private ListItem fExtraHeavy13117ListItem;

        /// <summary>
        /// Backing field for HPCoverMatte200ListItem property
        /// </summary>
        private ListItem fHPCoverMatte200ListItem;

        /// <summary>
        /// Backing field for HPAdvancedPhotoListItem property
        /// </summary>
        private ListItem fHPAdvancedPhotoListItem;

        /// <summary>
        /// Backing field for Cardstock176220ListItem property
        /// </summary>
        private ListItem fCardstock176220ListItem;

        /// <summary>
        /// Backing field for LabelsListItem property
        /// </summary>
        private ListItem fLabelsListItem;

        /// <summary>
        /// Backing field for LetterheadListItem property
        /// </summary>
        private ListItem fLetterheadListItem;

        /// <summary>
        /// Backing field for EnvelopeListItem property
        /// </summary>
        private ListItem fEnvelopeListItem;

        /// <summary>
        /// Backing field for HeavyEnvelopeListItem property
        /// </summary>
        private ListItem fHeavyEnvelopeListItem;

        /// <summary>
        /// Backing field for PreprintedListItem property
        /// </summary>
        private ListItem fPreprintedListItem;

        /// <summary>
        /// Backing field for PrepunchedListItem property
        /// </summary>
        private ListItem fPrepunchedListItem;

        /// <summary>
        /// Backing field for DropDownButtonDDup4Button property
        /// </summary>
        private Button fDropDownButtonDDup4Button;

        /// <summary>
        /// Backing field for OrientationStatText property
        /// </summary>
        private Text fOrientationStatText;

        /// <summary>
        /// Backing field for OrientationCombComboBox property
        /// </summary>
        private ComboBox fOrientationCombComboBox;

        /// <summary>
        /// Backing field for OrientationCombList property
        /// </summary>
        private List fOrientationCombList;

        /// <summary>
        /// Backing field for PortraitListItem property
        /// </summary>
        private ListItem fPortraitListItem;

        /// <summary>
        /// Backing field for LandscapeListItem property
        /// </summary>
        private ListItem fLandscapeListItem;

        /// <summary>
        /// Backing field for DropDownButtonDDup5Button property
        /// </summary>
        private Button fDropDownButtonDDup5Button;

        /// <summary>
        /// Backing field for SaveAsButton644Button property
        /// </summary>
        private Button fSaveAsButton644Button;

        /// <summary>
        /// Backing field for DeleteButton676Button property
        /// </summary>
        private Button fDeleteButton676Button;

        /// <summary>
        /// Backing field for ResetButton1027Button property
        /// </summary>
        private Button fResetButton1027Button;

        /// <summary>
        /// Backing field for LandscapeButtonButton property
        /// </summary>
        private Button fLandscapeButtonButton;

        /// <summary>
        /// Backing field for ToresetthesettiText property
        /// </summary>
        private Text fToresetthesettiText;

        /// <summary>
        /// Backing field for Static111Text property
        /// </summary>
        private Text fStatic111Text;

        /// <summary>
        /// Backing field for HelpButton409Button property
        /// </summary>
        private Button fHelpButton409Button;

        /// <summary>
        /// Backing field for PrintingshortcuText property
        /// </summary>
        private Text fPrintingshortcuText;

        /// <summary>
        /// Backing field for A1169827inchesSText property
        /// </summary>
        private Text fA1169827inchesSText;

        /// <summary>
        /// Backing field for AboutButton410Button property
        /// </summary>
        private Button fAboutButton410Button;

        /// <summary>
        /// Backing field for PaperQualityTabItem property
        /// </summary>
        private TabItem fPaperQualityTabItem;

        /// <summary>
        /// Backing field for EffectsTabItem property
        /// </summary>
        private TabItem fEffectsTabItem;

        /// <summary>
        /// Backing field for FinishingTabItem property
        /// </summary>
        private TabItem fFinishingTabItem;

        /// <summary>
        /// Backing field for ColorTabItem property
        /// </summary>
        private TabItem fColorTabItem;

        /// <summary>
        /// Backing field for ServicesTabItem property
        /// </summary>
        private TabItem fServicesTabItem;

        /// <summary>
        /// Backing field for HPOfficejetProXTitleBar property
        /// </summary>
        private TitleBar fHPOfficejetProXTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyMenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyMenuBar;

        /// <summary>
        /// Backing field for SystemItem1MenuItem property
        /// </summary>
        private MenuItem fSystemItem1MenuItem;

        /// <summary>
        /// Backing field for CloseCloseButton property
        /// </summary>
        private Button fCloseCloseButton;



        /// <summary>
        /// Initializes a new instance of the <see cref="PrintPreferences"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public PrintPreferences(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PrintPreferences"/> class using the default UIAFramework.
        /// </summary>
        public PrintPreferences()
        {
            Desktop = new Desktop();
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        public string DriverModel { get; set; }

        public bool SelectListItem(string itemName)
        {
            itemName = $"{itemName}ListItem".Replace(" ", "");
            var listItem = this.GetType().GetProperty(itemName)?.GetValue(this, null) as ListItem;
            if (listItem == null || listItem.Select(5) != TopCat.TestApi.Enums.ResultCode.Passed)
                return false;

            return true;
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Window PrintPreferencesWindow
        {
            get
            {
                if (null == fPrintPreferencesWindow)
                {
                    fPrintPreferencesWindow = new Window("PrintPreferencesWindow", Desktop);
                    fPrintPreferencesWindow.UIMap.Scope = UIASeachScope.Children;
                    fPrintPreferencesWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"#32770");
                }

                return fPrintPreferencesWindow;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Tab SysTabControl32Tab
        {
            get
            {
                if (null == fSysTabControl32Tab)
                {
                    fSysTabControl32Tab = new Tab("SysTabControl32Tab", PrintPreferencesWindow);
                    fSysTabControl32Tab.UIMap.Scope = UIASeachScope.Children;
                    fSysTabControl32Tab.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"SysTabControl32");
                }

                return fSysTabControl32Tab;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem DeviceSettingsTabItem
        {
            get
            {
                if (null == fDeviceSettingsTabItem)
                {
                    fDeviceSettingsTabItem = new TabItem("DeviceSettingsTabItem", SysTabControl32Tab);
                    fDeviceSettingsTabItem.UIMap.Scope = UIASeachScope.Children;
                    fDeviceSettingsTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Device Settings");
                }

                return fDeviceSettingsTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TreeItem HPUniversalPrintTreeItem
        {
            get
            {
                if (null == fHPUniversalPrintTreeItem)
                {
                    fHPUniversalPrintTreeItem = new TreeItem("HPUniversalPrintTreeItem", SysTreeView3291Tree);
                    fHPUniversalPrintTreeItem.UIMap.Scope = UIASeachScope.Children;
                    fHPUniversalPrintTreeItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, $"{DriverModel} Device Settings");
                }

                return fHPUniversalPrintTreeItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TreeItem InstallableOptionTreeItem
        {
            get
            {
                if (null == fInstallableOptionTreeItem)
                {
                    fInstallableOptionTreeItem = new TreeItem("InstallableOptionTreeItem", HPUniversalPrintTreeItem);
                    fInstallableOptionTreeItem.UIMap.Scope = UIASeachScope.Children;
                    fInstallableOptionTreeItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Installable Options");
                }

                return fInstallableOptionTreeItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TreeItem DuplexUnitfor2STreeItem
        {
            get
            {
                if (null == fDuplexUnitfor2STreeItem)
                {
                    fDuplexUnitfor2STreeItem = new TreeItem("DuplexUnitfor2STreeItem", InstallableOptionTreeItem);
                    fDuplexUnitfor2STreeItem.UIMap.Scope = UIASeachScope.Children;
                    fDuplexUnitfor2STreeItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Duplex Unit (for 2-Sided Printing): Installed");
                }

                return fDuplexUnitfor2STreeItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TreeItem DuplexUnitfor2SNTreeItem
        {
            get
            {
                if (null == fDuplexUnitfor2SNTreeItem)
                {
                    fDuplexUnitfor2SNTreeItem = new TreeItem("DuplexUnitfor2SNTreeItem", InstallableOptionTreeItem);
                    fDuplexUnitfor2SNTreeItem.UIMap.Scope = UIASeachScope.Children;
                    fDuplexUnitfor2SNTreeItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Duplex Unit (for 2-Sided Printing): Not Installed");
                }

                return fDuplexUnitfor2SNTreeItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem NotInstalledListItem
        {
            get
            {
                if (null == fNotInstalledListItem)
                {
                    fNotInstalledListItem = new ListItem("NotInstalledListItem", DuplexUnitfor2SList);
                    fNotInstalledListItem.UIMap.Scope = UIASeachScope.Children;
                    fNotInstalledListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Not Installed");
                }

                return fNotInstalledListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem InstalledListItem
        {
            get
            {
                if (null == fInstalledListItem)
                {
                    fInstalledListItem = new ListItem("InstalledListItem", DuplexUnitfor2SList);
                    fInstalledListItem.UIMap.Scope = UIASeachScope.Children;
                    fInstalledListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Installed");
                }

                return fInstalledListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox DuplexUnitfor2SComboBox
        {
            get
            {
                if (null == fDuplexUnitfor2SComboBox)
                {
                    fDuplexUnitfor2SComboBox = new ComboBox("DuplexUnitfor2SComboBox", SysTreeView3291Tree);
                    fDuplexUnitfor2SComboBox.UIMap.Scope = UIASeachScope.Children;
                    fDuplexUnitfor2SComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fDuplexUnitfor2SComboBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Duplex Unit (for 2-Sided Printing): ");
                    fDuplexUnitfor2SComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9060");
                }

                return fDuplexUnitfor2SComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public List DuplexUnitfor2SList
        {
            get
            {
                if (null == fDuplexUnitfor2SList)
                {
                    fDuplexUnitfor2SList = new List("DuplexUnitfor2SList", DuplexUnitfor2SComboBox);
                    fDuplexUnitfor2SList.UIMap.Scope = UIASeachScope.Children;
                    fDuplexUnitfor2SList.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboLBox");
                    fDuplexUnitfor2SList.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Duplex Unit (for 2-Sided Printing): ");
                    fDuplexUnitfor2SList.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ListBox");
                }

                return fDuplexUnitfor2SList;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button OKButton1Button
        {
            get
            {
                if (null == fOKButton1Button)
                {
                    fOKButton1Button = new Button("OKButton1Button", PrintPreferencesWindow);
                    fOKButton1Button.UIMap.Scope = UIASeachScope.Children;
                    fOKButton1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButton1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                    fOKButton1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1");
                }

                return fOKButton1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CancelButton2Button
        {
            get
            {
                if (null == fCancelButton2Button)
                {
                    fCancelButton2Button = new Button("CancelButton2Button", PrintPreferencesWindow);
                    fCancelButton2Button.UIMap.Scope = UIASeachScope.Children;
                    fCancelButton2Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCancelButton2Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cancel");
                    fCancelButton2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2");
                }

                return fCancelButton2Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ApplyButton1232Button
        {
            get
            {
                if (null == fApplyButton1232Button)
                {
                    fApplyButton1232Button = new Button("ApplyButton1232Button", PrintPreferencesWindow);
                    fApplyButton1232Button.UIMap.Scope = UIASeachScope.Children;
                    fApplyButton1232Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fApplyButton1232Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Apply");
                    fApplyButton1232Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"12321");
                }

                return fApplyButton1232Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem AdvancedTabItem
        {
            get
            {
                if (null == fAdvancedTabItem)
                {
                    fAdvancedTabItem = new TabItem("AdvancedTabItem", SysTabControl32Tab);
                    fAdvancedTabItem.UIMap.Scope = UIASeachScope.Children;
                    fAdvancedTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Advanced");
                }

                return fAdvancedTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem PrintingShortcutTabItem
        {
            get
            {
                if (null == fPrintingShortcutTabItem)
                {
                    fPrintingShortcutTabItem = new TabItem("PrintingShortcutTabItem", SysTabControl32Tab);
                    fPrintingShortcutTabItem.UIMap.Scope = UIASeachScope.Children;
                    fPrintingShortcutTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printing Shortcuts");
                }

                return fPrintingShortcutTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane A32770Pane
        {
            get
            {
                if (null == fA32770Pane)
                {
                    fA32770Pane = new Pane("A32770Pane", PrintPreferencesWindow);
                    fA32770Pane.UIMap.Scope = UIASeachScope.Children;
                    fA32770Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"#32770");
                }

                return fA32770Pane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Tree SysTreeView3291Tree
        {
            get
            {
                if (null == fSysTreeView3291Tree)
                {
                    fSysTreeView3291Tree = new Tree("SysTreeView3291Tree", A32770Pane);
                    fSysTreeView3291Tree.UIMap.Scope = UIASeachScope.Children;
                    fSysTreeView3291Tree.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"SysTreeView32");
                    fSysTreeView3291Tree.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9110");
                }

                return fSysTreeView3291Tree;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Spinner CopyCountmsctlsSpinner
        {
            get
            {
                if (null == fCopyCountmsctlsSpinner)
                {
                    fCopyCountmsctlsSpinner = new Spinner("CopyCountmsctlsSpinner", SysTreeView3291Tree);
                    fCopyCountmsctlsSpinner.UIMap.Scope = UIASeachScope.Children;
                    fCopyCountmsctlsSpinner.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"msctls_updown32");
                    fCopyCountmsctlsSpinner.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Copy Count: ");
                    fCopyCountmsctlsSpinner.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"9000");
                }

                return fCopyCountmsctlsSpinner;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Pane PrintingShortcutPane
        {
            get
            {
                if (null == fPrintingShortcutPane)
                {
                    fPrintingShortcutPane = new Pane("PrintingShortcutPane", PrintingShortcutTabItem);
                    fPrintingShortcutPane.UIMap.Scope = UIASeachScope.Children;
                    fPrintingShortcutPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"#32770");
                    fPrintingShortcutPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printing Shortcuts");
                }

                return fPrintingShortcutPane;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text AprintingshortcText
        {
            get
            {
                if (null == fAprintingshortcText)
                {
                    fAprintingshortcText = new Text("AprintingshortcText", PrintingShortcutPane);
                    fAprintingshortcText.UIMap.Scope = UIASeachScope.Children;
                    fAprintingshortcText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fAprintingshortcText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"A printing shortcut is a collection of saved print settings that you can select with a single click.");
                    fAprintingshortcText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"957");
                }

                return fAprintingshortcText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public List ListBox956List
        {
            get
            {
                if (null == fListBox956List)
                {
                    fListBox956List = new List("ListBox956List", PrintingShortcutPane);
                    fListBox956List.UIMap.Scope = UIASeachScope.Children;
                    fListBox956List.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ListBox");
                    fListBox956List.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"956");
                }

                return fListBox956List;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem FactoryDefaultsListItem
        {
            get
            {
                if (null == fFactoryDefaultsListItem)
                {
                    fFactoryDefaultsListItem = new ListItem("FactoryDefaultsListItem", ListBox956List);
                    fFactoryDefaultsListItem.UIMap.Scope = UIASeachScope.Children;
                    fFactoryDefaultsListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Factory Defaults");
                }

                return fFactoryDefaultsListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem EcoSMARTSettingListItem
        {
            get
            {
                if (null == fEcoSMARTSettingListItem)
                {
                    fEcoSMARTSettingListItem = new ListItem("EcoSMARTSettingListItem", ListBox956List);
                    fEcoSMARTSettingListItem.UIMap.Scope = UIASeachScope.Children;
                    fEcoSMARTSettingListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"EcoSMART Settings");
                }

                return fEcoSMARTSettingListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PapersizesStaticText
        {
            get
            {
                if (null == fPapersizesStaticText)
                {
                    fPapersizesStaticText = new Text("PapersizesStaticText", PrintingShortcutPane);
                    fPapersizesStaticText.UIMap.Scope = UIASeachScope.Children;
                    fPapersizesStaticText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fPapersizesStaticText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Paper sizes:");
                    fPapersizesStaticText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"500");
                }

                return fPapersizesStaticText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox PaperSizesComboComboBox
        {
            get
            {
                if (null == fPaperSizesComboComboBox)
                {
                    fPaperSizesComboComboBox = new ComboBox("PaperSizesComboComboBox", PrintingShortcutPane);
                    fPaperSizesComboComboBox.UIMap.Scope = UIASeachScope.Children;
                    fPaperSizesComboComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fPaperSizesComboComboBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Paper sizes:");
                    fPaperSizesComboComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"501");
                }

                return fPaperSizesComboComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public List PaperSizesComboList
        {
            get
            {
                if (null == fPaperSizesComboList)
                {
                    fPaperSizesComboList = new List("PaperSizesComboList", PaperSizesComboComboBox);
                    fPaperSizesComboList.UIMap.Scope = UIASeachScope.Children;
                    fPaperSizesComboList.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboLBox");
                    fPaperSizesComboList.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Paper sizes:");
                    fPaperSizesComboList.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ListBox");
                }

                return fPaperSizesComboList;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem LetterListItem
        {
            get
            {
                if (null == fLetterListItem)
                {
                    fLetterListItem = new ListItem("LetterListItem", PaperSizesComboList);
                    fLetterListItem.UIMap.Scope = UIASeachScope.Children;
                    fLetterListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Letter");
                }

                return fLetterListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem LegalListItem
        {
            get
            {
                if (null == fLegalListItem)
                {
                    fLegalListItem = new ListItem("LegalListItem", PaperSizesComboList);
                    fLegalListItem.UIMap.Scope = UIASeachScope.Children;
                    fLegalListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Legal");
                }

                return fLegalListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem ExecutiveListItem
        {
            get
            {
                if (null == fExecutiveListItem)
                {
                    fExecutiveListItem = new ListItem("ExecutiveListItem", PaperSizesComboList);
                    fExecutiveListItem.UIMap.Scope = UIASeachScope.Children;
                    fExecutiveListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Executive");
                }

                return fExecutiveListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem StatementListItem
        {
            get
            {
                if (null == fStatementListItem)
                {
                    fStatementListItem = new ListItem("StatementListItem", PaperSizesComboList);
                    fStatementListItem.UIMap.Scope = UIASeachScope.Children;
                    fStatementListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Statement");
                }

                return fStatementListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem Oficio85x13ListItem
        {
            get
            {
                if (null == fOficio85x13ListItem)
                {
                    fOficio85x13ListItem = new ListItem("Oficio85x13ListItem", PaperSizesComboList);
                    fOficio85x13ListItem.UIMap.Scope = UIASeachScope.Children;
                    fOficio85x13ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Oficio 8.5x13");
                }

                return fOficio85x13ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem A3x5ListItem
        {
            get
            {
                if (null == fA3x5ListItem)
                {
                    fA3x5ListItem = new ListItem("A3x5ListItem", PaperSizesComboList);
                    fA3x5ListItem.UIMap.Scope = UIASeachScope.Children;
                    fA3x5ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"3x5");
                }

                return fA3x5ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem A4x6ListItem
        {
            get
            {
                if (null == fA4x6ListItem)
                {
                    fA4x6ListItem = new ListItem("A4x6ListItem", PaperSizesComboList);
                    fA4x6ListItem.UIMap.Scope = UIASeachScope.Children;
                    fA4x6ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"4x6");
                }

                return fA4x6ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem A5x7ListItem
        {
            get
            {
                if (null == fA5x7ListItem)
                {
                    fA5x7ListItem = new ListItem("A5x7ListItem", PaperSizesComboList);
                    fA5x7ListItem.UIMap.Scope = UIASeachScope.Children;
                    fA5x7ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"5x7");
                }

                return fA5x7ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem A5x8ListItem
        {
            get
            {
                if (null == fA5x8ListItem)
                {
                    fA5x8ListItem = new ListItem("A5x8ListItem", PaperSizesComboList);
                    fA5x8ListItem.UIMap.Scope = UIASeachScope.Children;
                    fA5x8ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"5x8");
                }

                return fA5x8ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem A4ListItem
        {
            get
            {
                if (null == fA4ListItem)
                {
                    fA4ListItem = new ListItem("A4ListItem", PaperSizesComboList);
                    fA4ListItem.UIMap.Scope = UIASeachScope.Children;
                    fA4ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"A4");
                }

                return fA4ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem A5ListItem
        {
            get
            {
                if (null == fA5ListItem)
                {
                    fA5ListItem = new ListItem("A5ListItem", PaperSizesComboList);
                    fA5ListItem.UIMap.Scope = UIASeachScope.Children;
                    fA5ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"A5");
                }

                return fA5ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem A6ListItem
        {
            get
            {
                if (null == fA6ListItem)
                {
                    fA6ListItem = new ListItem("A6ListItem", PaperSizesComboList);
                    fA6ListItem.UIMap.Scope = UIASeachScope.Children;
                    fA6ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"A6");
                }

                return fA6ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem B5JISListItem
        {
            get
            {
                if (null == fB5JISListItem)
                {
                    fB5JISListItem = new ListItem("B5JISListItem", PaperSizesComboList);
                    fB5JISListItem.UIMap.Scope = UIASeachScope.Children;
                    fB5JISListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"B5 (JIS)");
                }

                return fB5JISListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem B6JISListItem
        {
            get
            {
                if (null == fB6JISListItem)
                {
                    fB6JISListItem = new ListItem("B6JISListItem", PaperSizesComboList);
                    fB6JISListItem.UIMap.Scope = UIASeachScope.Children;
                    fB6JISListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"B6 (JIS)");
                }

                return fB6JISListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem L9x13cmListItem
        {
            get
            {
                if (null == fL9x13cmListItem)
                {
                    fL9x13cmListItem = new ListItem("L9x13cmListItem", PaperSizesComboList);
                    fL9x13cmListItem.UIMap.Scope = UIASeachScope.Children;
                    fL9x13cmListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"L 9x13 cm");
                }

                return fL9x13cmListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem A10x15cmListItem
        {
            get
            {
                if (null == fA10x15cmListItem)
                {
                    fA10x15cmListItem = new ListItem("A10x15cmListItem", PaperSizesComboList);
                    fA10x15cmListItem.UIMap.Scope = UIASeachScope.Children;
                    fA10x15cmListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"10x15cm");
                }

                return fA10x15cmListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem Oficio216x340mmListItem
        {
            get
            {
                if (null == fOficio216x340mmListItem)
                {
                    fOficio216x340mmListItem = new ListItem("Oficio216x340mmListItem", PaperSizesComboList);
                    fOficio216x340mmListItem.UIMap.Scope = UIASeachScope.Children;
                    fOficio216x340mmListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Oficio 216x340 mm");
                }

                return fOficio216x340mmListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem A16K195x270mmListItem
        {
            get
            {
                if (null == fA16K195x270mmListItem)
                {
                    fA16K195x270mmListItem = new ListItem("A16K195x270mmListItem", PaperSizesComboList);
                    fA16K195x270mmListItem.UIMap.Scope = UIASeachScope.Children;
                    fA16K195x270mmListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"16K 195x270 mm");
                }

                return fA16K195x270mmListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem A16K184x260mmListItem
        {
            get
            {
                if (null == fA16K184x260mmListItem)
                {
                    fA16K184x260mmListItem = new ListItem("A16K184x260mmListItem", PaperSizesComboList);
                    fA16K184x260mmListItem.UIMap.Scope = UIASeachScope.Children;
                    fA16K184x260mmListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"16K 184x260 mm");
                }

                return fA16K184x260mmListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem A16K197x273mmListItem
        {
            get
            {
                if (null == fA16K197x273mmListItem)
                {
                    fA16K197x273mmListItem = new ListItem("A16K197x273mmListItem", PaperSizesComboList);
                    fA16K197x273mmListItem.UIMap.Scope = UIASeachScope.Children;
                    fA16K197x273mmListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"16K 197x273 mm");
                }

                return fA16K197x273mmListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem JapanesePostcarListItem
        {
            get
            {
                if (null == fJapanesePostcarListItem)
                {
                    fJapanesePostcarListItem = new ListItem("JapanesePostcarListItem", PaperSizesComboList);
                    fJapanesePostcarListItem.UIMap.Scope = UIASeachScope.Children;
                    fJapanesePostcarListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Japanese Postcard");
                }

                return fJapanesePostcarListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem DoubleJapanPostListItem
        {
            get
            {
                if (null == fDoubleJapanPostListItem)
                {
                    fDoubleJapanPostListItem = new ListItem("DoubleJapanPostListItem", PaperSizesComboList);
                    fDoubleJapanPostListItem.UIMap.Scope = UIASeachScope.Children;
                    fDoubleJapanPostListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Double Japan Postcard Rotated");
                }

                return fDoubleJapanPostListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem Envelope10ListItem
        {
            get
            {
                if (null == fEnvelope10ListItem)
                {
                    fEnvelope10ListItem = new ListItem("Envelope10ListItem", PaperSizesComboList);
                    fEnvelope10ListItem.UIMap.Scope = UIASeachScope.Children;
                    fEnvelope10ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Envelope #10");
                }

                return fEnvelope10ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem EnvelopeMonarchListItem
        {
            get
            {
                if (null == fEnvelopeMonarchListItem)
                {
                    fEnvelopeMonarchListItem = new ListItem("EnvelopeMonarchListItem", PaperSizesComboList);
                    fEnvelopeMonarchListItem.UIMap.Scope = UIASeachScope.Children;
                    fEnvelopeMonarchListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Envelope Monarch");
                }

                return fEnvelopeMonarchListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem EnvelopeB5ListItem
        {
            get
            {
                if (null == fEnvelopeB5ListItem)
                {
                    fEnvelopeB5ListItem = new ListItem("EnvelopeB5ListItem", PaperSizesComboList);
                    fEnvelopeB5ListItem.UIMap.Scope = UIASeachScope.Children;
                    fEnvelopeB5ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Envelope B5");
                }

                return fEnvelopeB5ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem EnvelopeC5ListItem
        {
            get
            {
                if (null == fEnvelopeC5ListItem)
                {
                    fEnvelopeC5ListItem = new ListItem("EnvelopeC5ListItem", PaperSizesComboList);
                    fEnvelopeC5ListItem.UIMap.Scope = UIASeachScope.Children;
                    fEnvelopeC5ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Envelope C5");
                }

                return fEnvelopeC5ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem EnvelopeC6ListItem
        {
            get
            {
                if (null == fEnvelopeC6ListItem)
                {
                    fEnvelopeC6ListItem = new ListItem("EnvelopeC6ListItem", PaperSizesComboList);
                    fEnvelopeC6ListItem.UIMap.Scope = UIASeachScope.Children;
                    fEnvelopeC6ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Envelope C6");
                }

                return fEnvelopeC6ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem EnvelopeDLListItem
        {
            get
            {
                if (null == fEnvelopeDLListItem)
                {
                    fEnvelopeDLListItem = new ListItem("EnvelopeDLListItem", PaperSizesComboList);
                    fEnvelopeDLListItem.UIMap.Scope = UIASeachScope.Children;
                    fEnvelopeDLListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Envelope DL");
                }

                return fEnvelopeDLListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem JapaneseEnvelopDup0ListItem
        {
            get
            {
                if (null == fJapaneseEnvelopDup0ListItem)
                {
                    fJapaneseEnvelopDup0ListItem = new ListItem("JapaneseEnvelopDup0ListItem", PaperSizesComboList);
                    fJapaneseEnvelopDup0ListItem.UIMap.Scope = UIASeachScope.Children;
                    fJapaneseEnvelopDup0ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Japanese Envelope Chou #3");
                }

                return fJapaneseEnvelopDup0ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem JapaneseEnvelopDup1ListItem
        {
            get
            {
                if (null == fJapaneseEnvelopDup1ListItem)
                {
                    fJapaneseEnvelopDup1ListItem = new ListItem("JapaneseEnvelopDup1ListItem", PaperSizesComboList);
                    fJapaneseEnvelopDup1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fJapaneseEnvelopDup1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Japanese Envelope Chou #4");
                }

                return fJapaneseEnvelopDup1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button DropDownButtonDDup0Button
        {
            get
            {
                if (null == fDropDownButtonDDup0Button)
                {
                    fDropDownButtonDDup0Button = new Button("DropDownButtonDDup0Button", PaperSizesComboComboBox);
                    fDropDownButtonDDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fDropDownButtonDDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Drop Down Button");
                    fDropDownButtonDDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"DropDown");
                }

                return fDropDownButtonDDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PapersourceStatText
        {
            get
            {
                if (null == fPapersourceStatText)
                {
                    fPapersourceStatText = new Text("PapersourceStatText", PrintingShortcutPane);
                    fPapersourceStatText.UIMap.Scope = UIASeachScope.Children;
                    fPapersourceStatText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fPapersourceStatText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Paper source:");
                    fPapersourceStatText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"502");
                }

                return fPapersourceStatText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox PapersourceCombComboBox
        {
            get
            {
                if (null == fPapersourceCombComboBox)
                {
                    fPapersourceCombComboBox = new ComboBox("PapersourceCombComboBox", PrintingShortcutPane);
                    fPapersourceCombComboBox.UIMap.Scope = UIASeachScope.Children;
                    fPapersourceCombComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fPapersourceCombComboBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Paper source:");
                    fPapersourceCombComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"503");
                }

                return fPapersourceCombComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public List PapersourceCombList
        {
            get
            {
                if (null == fPapersourceCombList)
                {
                    fPapersourceCombList = new List("PapersourceCombList", PapersourceCombComboBox);
                    fPapersourceCombList.UIMap.Scope = UIASeachScope.Children;
                    fPapersourceCombList.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboLBox");
                    fPapersourceCombList.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Paper source:");
                    fPapersourceCombList.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ListBox");
                }

                return fPapersourceCombList;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem AutomaticallySelectListItem
        {
            get
            {
                if (null == fAutomaticallySelectListItem)
                {
                    fAutomaticallySelectListItem = new ListItem("AutomaticallySelectListItem", PapersourceCombList);
                    fAutomaticallySelectListItem.UIMap.Scope = UIASeachScope.Children;
                    fAutomaticallySelectListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Automatically Select");
                }

                return fAutomaticallySelectListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem PrinterAutoSelectListItem
        {
            get
            {
                if (null == fPrinterAutoSelectListItem)
                {
                    fPrinterAutoSelectListItem = new ListItem("PrinterAutoSelectListItem", PapersourceCombList);
                    fPrinterAutoSelectListItem.UIMap.Scope = UIASeachScope.Children;
                    fPrinterAutoSelectListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printer auto select");
                }

                return fPrinterAutoSelectListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem ManualFeedinTraListItem
        {
            get
            {
                if (null == fManualFeedinTraListItem)
                {
                    fManualFeedinTraListItem = new ListItem("ManualFeedinTraListItem", PapersourceCombList);
                    fManualFeedinTraListItem.UIMap.Scope = UIASeachScope.Children;
                    fManualFeedinTraListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Manual Feed in Tray 1");
                }

                return fManualFeedinTraListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem Tray1ListItem
        {
            get
            {
                if (null == fTray1ListItem)
                {
                    fTray1ListItem = new ListItem("Tray1ListItem", PapersourceCombList);
                    fTray1ListItem.UIMap.Scope = UIASeachScope.Children;
                    fTray1ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Tray 1");
                }

                return fTray1ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem Tray2ListItem
        {
            get
            {
                if (null == fTray2ListItem)
                {
                    fTray2ListItem = new ListItem("Tray2ListItem", PapersourceCombList);
                    fTray2ListItem.UIMap.Scope = UIASeachScope.Children;
                    fTray2ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Tray 2");
                }

                return fTray2ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem Tray3ListItem
        {
            get
            {
                if (null == fTray3ListItem)
                {
                    fTray3ListItem = new ListItem("Tray3ListItem", PapersourceCombList);
                    fTray3ListItem.UIMap.Scope = UIASeachScope.Children;
                    fTray3ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Tray 3");
                }

                return fTray3ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem Tray4ListItem
        {
            get
            {
                if (null == fTray4ListItem)
                {
                    fTray4ListItem = new ListItem("Tray4ListItem", PapersourceCombList);
                    fTray4ListItem.UIMap.Scope = UIASeachScope.Children;
                    fTray4ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Tray 4");
                }

                return fTray4ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem Tray5ListItem
        {
            get
            {
                if (null == fTray5ListItem)
                {
                    fTray5ListItem = new ListItem("Tray5ListItem", PapersourceCombList);
                    fTray5ListItem.UIMap.Scope = UIASeachScope.Children;
                    fTray5ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Tray 5");
                }

                return fTray5ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem Tray6ListItem
        {
            get
            {
                if (null == fTray6ListItem)
                {
                    fTray6ListItem = new ListItem("Tray6ListItem", PapersourceCombList);
                    fTray6ListItem.UIMap.Scope = UIASeachScope.Children;
                    fTray6ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Tray 6");
                }

                return fTray6ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem Tray7ListItem
        {
            get
            {
                if (null == fTray7ListItem)
                {
                    fTray7ListItem = new ListItem("Tray7ListItem", PapersourceCombList);
                    fTray7ListItem.UIMap.Scope = UIASeachScope.Children;
                    fTray7ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Tray 7");
                }

                return fTray7ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem Tray8ListItem
        {
            get
            {
                if (null == fTray8ListItem)
                {
                    fTray8ListItem = new ListItem("Tray8ListItem", PapersourceCombList);
                    fTray8ListItem.UIMap.Scope = UIASeachScope.Children;
                    fTray8ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Tray 8");
                }

                return fTray8ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem Tray9ListItem
        {
            get
            {
                if (null == fTray9ListItem)
                {
                    fTray9ListItem = new ListItem("Tray9ListItem", PapersourceCombList);
                    fTray9ListItem.UIMap.Scope = UIASeachScope.Children;
                    fTray9ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Tray 9");
                }

                return fTray9ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem Tray10ListItem
        {
            get
            {
                if (null == fTray10ListItem)
                {
                    fTray10ListItem = new ListItem("Tray10ListItem", PapersourceCombList);
                    fTray10ListItem.UIMap.Scope = UIASeachScope.Children;
                    fTray10ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Tray 10");
                }

                return fTray10ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button DropDownButtonDDup1Button
        {
            get
            {
                if (null == fDropDownButtonDDup1Button)
                {
                    fDropDownButtonDDup1Button = new Button("DropDownButtonDDup1Button", PapersourceCombComboBox);
                    fDropDownButtonDDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fDropDownButtonDDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Drop Down Button");
                    fDropDownButtonDDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"DropDown");
                }

                return fDropDownButtonDDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PagespersheetStText
        {
            get
            {
                if (null == fPagespersheetStText)
                {
                    fPagespersheetStText = new Text("PagespersheetStText", PrintingShortcutPane);
                    fPagespersheetStText.UIMap.Scope = UIASeachScope.Children;
                    fPagespersheetStText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fPagespersheetStText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Pages per sheet:");
                    fPagespersheetStText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"504");
                }

                return fPagespersheetStText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox PagespersheetCoComboBox
        {
            get
            {
                if (null == fPagespersheetCoComboBox)
                {
                    fPagespersheetCoComboBox = new ComboBox("PagespersheetCoComboBox", PrintingShortcutPane);
                    fPagespersheetCoComboBox.UIMap.Scope = UIASeachScope.Children;
                    fPagespersheetCoComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fPagespersheetCoComboBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Pages per sheet:");
                    fPagespersheetCoComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"505");
                }

                return fPagespersheetCoComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public List PagespersheetCoList
        {
            get
            {
                if (null == fPagespersheetCoList)
                {
                    fPagespersheetCoList = new List("PagespersheetCoList", PagespersheetCoComboBox);
                    fPagespersheetCoList.UIMap.Scope = UIASeachScope.Children;
                    fPagespersheetCoList.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboLBox");
                    fPagespersheetCoList.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Pages per sheet:");
                    fPagespersheetCoList.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ListBox");
                }

                return fPagespersheetCoList;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem A1pagepersheetListItem
        {
            get
            {
                if (null == fA1pagepersheetListItem)
                {
                    fA1pagepersheetListItem = new ListItem("A1pagepersheetListItem", PagespersheetCoList);
                    fA1pagepersheetListItem.UIMap.Scope = UIASeachScope.Children;
                    fA1pagepersheetListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"1 page per sheet");
                }

                return fA1pagepersheetListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem A2pagespersheetListItem
        {
            get
            {
                if (null == fA2pagespersheetListItem)
                {
                    fA2pagespersheetListItem = new ListItem("A2pagespersheetListItem", PagespersheetCoList);
                    fA2pagespersheetListItem.UIMap.Scope = UIASeachScope.Children;
                    fA2pagespersheetListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"2 pages per sheet");
                }

                return fA2pagespersheetListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem A4pagespersheetListItem
        {
            get
            {
                if (null == fA4pagespersheetListItem)
                {
                    fA4pagespersheetListItem = new ListItem("A4pagespersheetListItem", PagespersheetCoList);
                    fA4pagespersheetListItem.UIMap.Scope = UIASeachScope.Children;
                    fA4pagespersheetListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"4 pages per sheet");
                }

                return fA4pagespersheetListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem A6pagespersheetListItem
        {
            get
            {
                if (null == fA6pagespersheetListItem)
                {
                    fA6pagespersheetListItem = new ListItem("A6pagespersheetListItem", PagespersheetCoList);
                    fA6pagespersheetListItem.UIMap.Scope = UIASeachScope.Children;
                    fA6pagespersheetListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"6 pages per sheet");
                }

                return fA6pagespersheetListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem A9pagespersheetListItem
        {
            get
            {
                if (null == fA9pagespersheetListItem)
                {
                    fA9pagespersheetListItem = new ListItem("A9pagespersheetListItem", PagespersheetCoList);
                    fA9pagespersheetListItem.UIMap.Scope = UIASeachScope.Children;
                    fA9pagespersheetListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"9 pages per sheet");
                }

                return fA9pagespersheetListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem A16pagespersheeListItem
        {
            get
            {
                if (null == fA16pagespersheeListItem)
                {
                    fA16pagespersheeListItem = new ListItem("A16pagespersheeListItem", PagespersheetCoList);
                    fA16pagespersheeListItem.UIMap.Scope = UIASeachScope.Children;
                    fA16pagespersheeListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"16 pages per sheet");
                }

                return fA16pagespersheeListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button DropDownButtonDDup2Button
        {
            get
            {
                if (null == fDropDownButtonDDup2Button)
                {
                    fDropDownButtonDDup2Button = new Button("DropDownButtonDDup2Button", PagespersheetCoComboBox);
                    fDropDownButtonDDup2Button.UIMap.Scope = UIASeachScope.Children;
                    fDropDownButtonDDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Drop Down Button");
                    fDropDownButtonDDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"DropDown");
                }

                return fDropDownButtonDDup2Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PrintonbothsideText
        {
            get
            {
                if (null == fPrintonbothsideText)
                {
                    fPrintonbothsideText = new Text("PrintonbothsideText", PrintingShortcutPane);
                    fPrintonbothsideText.UIMap.Scope = UIASeachScope.Children;
                    fPrintonbothsideText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fPrintonbothsideText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Print on both sides:");
                    fPrintonbothsideText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"506");
                }

                return fPrintonbothsideText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox PrintonbothsideComboBox
        {
            get
            {
                if (null == fPrintonbothsideComboBox)
                {
                    fPrintonbothsideComboBox = new ComboBox("PrintonbothsideComboBox", PrintingShortcutPane);
                    fPrintonbothsideComboBox.UIMap.Scope = UIASeachScope.Children;
                    fPrintonbothsideComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fPrintonbothsideComboBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Print on both sides:");
                    fPrintonbothsideComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"507");
                }

                return fPrintonbothsideComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public List PrintonbothsideList
        {
            get
            {
                if (null == fPrintonbothsideList)
                {
                    fPrintonbothsideList = new List("PrintonbothsideList", PrintonbothsideComboBox);
                    fPrintonbothsideList.UIMap.Scope = UIASeachScope.Children;
                    fPrintonbothsideList.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboLBox");
                    fPrintonbothsideList.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Print on both sides:");
                    fPrintonbothsideList.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ListBox");
                }

                return fPrintonbothsideList;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem NoListItem
        {
            get
            {
                if (null == fNoListItem)
                {
                    fNoListItem = new ListItem("NoListItem", PrintonbothsideList);
                    fNoListItem.UIMap.Scope = UIASeachScope.Children;
                    fNoListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"No");
                }

                return fNoListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem YesflipoverListItem
        {
            get
            {
                if (null == fYesflipoverListItem)
                {
                    fYesflipoverListItem = new ListItem("YesflipoverListItem", PrintonbothsideList);
                    fYesflipoverListItem.UIMap.Scope = UIASeachScope.Children;
                    fYesflipoverListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Yes, flip over");
                }

                return fYesflipoverListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem YesflipupListItem
        {
            get
            {
                if (null == fYesflipupListItem)
                {
                    fYesflipupListItem = new ListItem("YesflipupListItem", PrintonbothsideList);
                    fYesflipupListItem.UIMap.Scope = UIASeachScope.Children;
                    fYesflipupListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Yes, flip up");
                }

                return fYesflipupListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button DropDownButtonDDup3Button
        {
            get
            {
                if (null == fDropDownButtonDDup3Button)
                {
                    fDropDownButtonDDup3Button = new Button("DropDownButtonDDup3Button", PrintonbothsideComboBox);
                    fDropDownButtonDDup3Button.UIMap.Scope = UIASeachScope.Children;
                    fDropDownButtonDDup3Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Drop Down Button");
                    fDropDownButtonDDup3Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"DropDown");
                }

                return fDropDownButtonDDup3Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PapertypeStaticText
        {
            get
            {
                if (null == fPapertypeStaticText)
                {
                    fPapertypeStaticText = new Text("PapertypeStaticText", PrintingShortcutPane);
                    fPapertypeStaticText.UIMap.Scope = UIASeachScope.Children;
                    fPapertypeStaticText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fPapertypeStaticText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Paper type:");
                    fPapertypeStaticText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"508");
                }

                return fPapertypeStaticText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox PapertypeComboBComboBox
        {
            get
            {
                if (null == fPapertypeComboBComboBox)
                {
                    fPapertypeComboBComboBox = new ComboBox("PapertypeComboBComboBox", PrintingShortcutPane);
                    fPapertypeComboBComboBox.UIMap.Scope = UIASeachScope.Children;
                    fPapertypeComboBComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fPapertypeComboBComboBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Paper type:");
                    fPapertypeComboBComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"509");
                }

                return fPapertypeComboBComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public List PapertypeComboLList
        {
            get
            {
                if (null == fPapertypeComboLList)
                {
                    fPapertypeComboLList = new List("PapertypeComboLList", PapertypeComboBComboBox);
                    fPapertypeComboLList.UIMap.Scope = UIASeachScope.Children;
                    fPapertypeComboLList.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboLBox");
                    fPapertypeComboLList.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Paper type:");
                    fPapertypeComboLList.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ListBox");
                }

                return fPapertypeComboLList;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem UnspecifiedListItem
        {
            get
            {
                if (null == fUnspecifiedListItem)
                {
                    fUnspecifiedListItem = new ListItem("UnspecifiedListItem", PapertypeComboLList);
                    fUnspecifiedListItem.UIMap.Scope = UIASeachScope.Children;
                    fUnspecifiedListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Unspecified");
                }

                return fUnspecifiedListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem PlainListItem
        {
            get
            {
                if (null == fPlainListItem)
                {
                    fPlainListItem = new ListItem("PlainListItem", PapertypeComboLList);
                    fPlainListItem.UIMap.Scope = UIASeachScope.Children;
                    fPlainListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Plain");
                }

                return fPlainListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem HPEcoSMARTLiteListItem
        {
            get
            {
                if (null == fHPEcoSMARTLiteListItem)
                {
                    fHPEcoSMARTLiteListItem = new ListItem("HPEcoSMARTLiteListItem", PapertypeComboLList);
                    fHPEcoSMARTLiteListItem.UIMap.Scope = UIASeachScope.Children;
                    fHPEcoSMARTLiteListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP EcoSMART Lite");
                }

                return fHPEcoSMARTLiteListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem Light6074gListItem
        {
            get
            {
                if (null == fLight6074gListItem)
                {
                    fLight6074gListItem = new ListItem("Light6074gListItem", PapertypeComboLList);
                    fLight6074gListItem.UIMap.Scope = UIASeachScope.Children;
                    fLight6074gListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Light 60-74g");
                }

                return fLight6074gListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem Intermediate859ListItem
        {
            get
            {
                if (null == fIntermediate859ListItem)
                {
                    fIntermediate859ListItem = new ListItem("Intermediate859ListItem", PapertypeComboLList);
                    fIntermediate859ListItem.UIMap.Scope = UIASeachScope.Children;
                    fIntermediate859ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Intermediate 85-95g");
                }

                return fIntermediate859ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem HPPremiumPresenListItem
        {
            get
            {
                if (null == fHPPremiumPresenListItem)
                {
                    fHPPremiumPresenListItem = new ListItem("HPPremiumPresenListItem", PapertypeComboLList);
                    fHPPremiumPresenListItem.UIMap.Scope = UIASeachScope.Children;
                    fHPPremiumPresenListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Premium Presentation Matte 120g");
                }

                return fHPPremiumPresenListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem MidWeight96110gListItem
        {
            get
            {
                if (null == fMidWeight96110gListItem)
                {
                    fMidWeight96110gListItem = new ListItem("MidWeight96110gListItem", PapertypeComboLList);
                    fMidWeight96110gListItem.UIMap.Scope = UIASeachScope.Children;
                    fMidWeight96110gListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Mid-Weight 96-110g");
                }

                return fMidWeight96110gListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem Heavy111130gListItem
        {
            get
            {
                if (null == fHeavy111130gListItem)
                {
                    fHeavy111130gListItem = new ListItem("Heavy111130gListItem", PapertypeComboLList);
                    fHeavy111130gListItem.UIMap.Scope = UIASeachScope.Children;
                    fHeavy111130gListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Heavy 111-130g");
                }

                return fHeavy111130gListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem HPBrochureMatteListItem
        {
            get
            {
                if (null == fHPBrochureMatteListItem)
                {
                    fHPBrochureMatteListItem = new ListItem("HPBrochureMatteListItem", PapertypeComboLList);
                    fHPBrochureMatteListItem.UIMap.Scope = UIASeachScope.Children;
                    fHPBrochureMatteListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Brochure Matte 180g");
                }

                return fHPBrochureMatteListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem HPBrochureGlossListItem
        {
            get
            {
                if (null == fHPBrochureGlossListItem)
                {
                    fHPBrochureGlossListItem = new ListItem("HPBrochureGlossListItem", PapertypeComboLList);
                    fHPBrochureGlossListItem.UIMap.Scope = UIASeachScope.Children;
                    fHPBrochureGlossListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Brochure Glossy 180g");
                }

                return fHPBrochureGlossListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem ExtraHeavy13117ListItem
        {
            get
            {
                if (null == fExtraHeavy13117ListItem)
                {
                    fExtraHeavy13117ListItem = new ListItem("ExtraHeavy13117ListItem", PapertypeComboLList);
                    fExtraHeavy13117ListItem.UIMap.Scope = UIASeachScope.Children;
                    fExtraHeavy13117ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Extra Heavy 131-175g");
                }

                return fExtraHeavy13117ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem HPCoverMatte200ListItem
        {
            get
            {
                if (null == fHPCoverMatte200ListItem)
                {
                    fHPCoverMatte200ListItem = new ListItem("HPCoverMatte200ListItem", PapertypeComboLList);
                    fHPCoverMatte200ListItem.UIMap.Scope = UIASeachScope.Children;
                    fHPCoverMatte200ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Cover Matte 200g");
                }

                return fHPCoverMatte200ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem HPAdvancedPhotoListItem
        {
            get
            {
                if (null == fHPAdvancedPhotoListItem)
                {
                    fHPAdvancedPhotoListItem = new ListItem("HPAdvancedPhotoListItem", PapertypeComboLList);
                    fHPAdvancedPhotoListItem.UIMap.Scope = UIASeachScope.Children;
                    fHPAdvancedPhotoListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Advanced Photo Papers");
                }

                return fHPAdvancedPhotoListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem Cardstock176220ListItem
        {
            get
            {
                if (null == fCardstock176220ListItem)
                {
                    fCardstock176220ListItem = new ListItem("Cardstock176220ListItem", PapertypeComboLList);
                    fCardstock176220ListItem.UIMap.Scope = UIASeachScope.Children;
                    fCardstock176220ListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cardstock 176-220g");
                }

                return fCardstock176220ListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem LabelsListItem
        {
            get
            {
                if (null == fLabelsListItem)
                {
                    fLabelsListItem = new ListItem("LabelsListItem", PapertypeComboLList);
                    fLabelsListItem.UIMap.Scope = UIASeachScope.Children;
                    fLabelsListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Labels");
                }

                return fLabelsListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem LetterheadListItem
        {
            get
            {
                if (null == fLetterheadListItem)
                {
                    fLetterheadListItem = new ListItem("LetterheadListItem", PapertypeComboLList);
                    fLetterheadListItem.UIMap.Scope = UIASeachScope.Children;
                    fLetterheadListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Letterhead");
                }

                return fLetterheadListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem EnvelopeListItem
        {
            get
            {
                if (null == fEnvelopeListItem)
                {
                    fEnvelopeListItem = new ListItem("EnvelopeListItem", PapertypeComboLList);
                    fEnvelopeListItem.UIMap.Scope = UIASeachScope.Children;
                    fEnvelopeListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Envelope");
                }

                return fEnvelopeListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem HeavyEnvelopeListItem
        {
            get
            {
                if (null == fHeavyEnvelopeListItem)
                {
                    fHeavyEnvelopeListItem = new ListItem("HeavyEnvelopeListItem", PapertypeComboLList);
                    fHeavyEnvelopeListItem.UIMap.Scope = UIASeachScope.Children;
                    fHeavyEnvelopeListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Heavy Envelope");
                }

                return fHeavyEnvelopeListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem PreprintedListItem
        {
            get
            {
                if (null == fPreprintedListItem)
                {
                    fPreprintedListItem = new ListItem("PreprintedListItem", PapertypeComboLList);
                    fPreprintedListItem.UIMap.Scope = UIASeachScope.Children;
                    fPreprintedListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Preprinted");
                }

                return fPreprintedListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem PrepunchedListItem
        {
            get
            {
                if (null == fPrepunchedListItem)
                {
                    fPrepunchedListItem = new ListItem("PrepunchedListItem", PapertypeComboLList);
                    fPrepunchedListItem.UIMap.Scope = UIASeachScope.Children;
                    fPrepunchedListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Prepunched");
                }

                return fPrepunchedListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button DropDownButtonDDup4Button
        {
            get
            {
                if (null == fDropDownButtonDDup4Button)
                {
                    fDropDownButtonDDup4Button = new Button("DropDownButtonDDup4Button", PapertypeComboBComboBox);
                    fDropDownButtonDDup4Button.UIMap.Scope = UIASeachScope.Children;
                    fDropDownButtonDDup4Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Drop Down Button");
                    fDropDownButtonDDup4Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"DropDown");
                }

                return fDropDownButtonDDup4Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text OrientationStatText
        {
            get
            {
                if (null == fOrientationStatText)
                {
                    fOrientationStatText = new Text("OrientationStatText", PrintingShortcutPane);
                    fOrientationStatText.UIMap.Scope = UIASeachScope.Children;
                    fOrientationStatText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fOrientationStatText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Orientation:");
                    fOrientationStatText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"510");
                }

                return fOrientationStatText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ComboBox OrientationCombComboBox
        {
            get
            {
                if (null == fOrientationCombComboBox)
                {
                    fOrientationCombComboBox = new ComboBox("OrientationCombComboBox", PrintingShortcutPane);
                    fOrientationCombComboBox.UIMap.Scope = UIASeachScope.Children;
                    fOrientationCombComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fOrientationCombComboBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Orientation:");
                    fOrientationCombComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"511");
                }

                return fOrientationCombComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public List OrientationCombList
        {
            get
            {
                if (null == fOrientationCombList)
                {
                    fOrientationCombList = new List("OrientationCombList", OrientationCombComboBox);
                    fOrientationCombList.UIMap.Scope = UIASeachScope.Children;
                    fOrientationCombList.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboLBox");
                    fOrientationCombList.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Orientation:");
                    fOrientationCombList.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ListBox");
                }

                return fOrientationCombList;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem PortraitListItem
        {
            get
            {
                if (null == fPortraitListItem)
                {
                    fPortraitListItem = new ListItem("PortraitListItem", OrientationCombList);
                    fPortraitListItem.UIMap.Scope = UIASeachScope.Children;
                    fPortraitListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Portrait");
                }

                return fPortraitListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public ListItem LandscapeListItem
        {
            get
            {
                if (null == fLandscapeListItem)
                {
                    fLandscapeListItem = new ListItem("LandscapeListItem", OrientationCombList);
                    fLandscapeListItem.UIMap.Scope = UIASeachScope.Children;
                    fLandscapeListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Landscape");
                }

                return fLandscapeListItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button DropDownButtonDDup5Button
        {
            get
            {
                if (null == fDropDownButtonDDup5Button)
                {
                    fDropDownButtonDDup5Button = new Button("DropDownButtonDDup5Button", OrientationCombComboBox);
                    fDropDownButtonDDup5Button.UIMap.Scope = UIASeachScope.Children;
                    fDropDownButtonDDup5Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Drop Down Button");
                    fDropDownButtonDDup5Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"DropDown");
                }

                return fDropDownButtonDDup5Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button SaveAsButton644Button
        {
            get
            {
                if (null == fSaveAsButton644Button)
                {
                    fSaveAsButton644Button = new Button("SaveAsButton644Button", PrintingShortcutPane);
                    fSaveAsButton644Button.UIMap.Scope = UIASeachScope.Children;
                    fSaveAsButton644Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fSaveAsButton644Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Save As...");
                    fSaveAsButton644Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"644");
                }

                return fSaveAsButton644Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button DeleteButton676Button
        {
            get
            {
                if (null == fDeleteButton676Button)
                {
                    fDeleteButton676Button = new Button("DeleteButton676Button", PrintingShortcutPane);
                    fDeleteButton676Button.UIMap.Scope = UIASeachScope.Children;
                    fDeleteButton676Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fDeleteButton676Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Delete");
                    fDeleteButton676Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"676");
                }

                return fDeleteButton676Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button ResetButton1027Button
        {
            get
            {
                if (null == fResetButton1027Button)
                {
                    fResetButton1027Button = new Button("ResetButton1027Button", PrintingShortcutPane);
                    fResetButton1027Button.UIMap.Scope = UIASeachScope.Children;
                    fResetButton1027Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fResetButton1027Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Reset");
                    fResetButton1027Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1027");
                }

                return fResetButton1027Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button LandscapeButtonButton
        {
            get
            {
                if (null == fLandscapeButtonButton)
                {
                    fLandscapeButtonButton = new Button("LandscapeButtonButton", PrintingShortcutPane);
                    fLandscapeButtonButton.UIMap.Scope = UIASeachScope.Children;
                    fLandscapeButtonButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fLandscapeButtonButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Landscape");
                    fLandscapeButtonButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"441");
                }

                return fLandscapeButtonButton;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text ToresetthesettiText
        {
            get
            {
                if (null == fToresetthesettiText)
                {
                    fToresetthesettiText = new Text("ToresetthesettiText", PrintingShortcutPane);
                    fToresetthesettiText.UIMap.Scope = UIASeachScope.Children;
                    fToresetthesettiText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fToresetthesettiText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"To reset the settings, select the type of printing you want to do from the Printing Shortcuts menu.");
                    fToresetthesettiText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"960");
                }

                return fToresetthesettiText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text Static111Text
        {
            get
            {
                if (null == fStatic111Text)
                {
                    fStatic111Text = new Text("Static111Text", PrintingShortcutPane);
                    fStatic111Text.UIMap.Scope = UIASeachScope.Children;
                    fStatic111Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fStatic111Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"111");
                }

                return fStatic111Text;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button HelpButton409Button
        {
            get
            {
                if (null == fHelpButton409Button)
                {
                    fHelpButton409Button = new Button("HelpButton409Button", PrintingShortcutPane);
                    fHelpButton409Button.UIMap.Scope = UIASeachScope.Children;
                    fHelpButton409Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fHelpButton409Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Help");
                    fHelpButton409Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"409");
                }

                return fHelpButton409Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text PrintingshortcuText
        {
            get
            {
                if (null == fPrintingshortcuText)
                {
                    fPrintingshortcuText = new Text("PrintingshortcuText", PrintingShortcutPane);
                    fPrintingshortcuText.UIMap.Scope = UIASeachScope.Children;
                    fPrintingshortcuText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fPrintingshortcuText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Printing shortcuts:");
                    fPrintingshortcuText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"958");
                }

                return fPrintingshortcuText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Text A1169827inchesSText
        {
            get
            {
                if (null == fA1169827inchesSText)
                {
                    fA1169827inchesSText = new Text("A1169827inchesSText", PrintingShortcutPane);
                    fA1169827inchesSText.UIMap.Scope = UIASeachScope.Children;
                    fA1169827inchesSText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fA1169827inchesSText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"11.69 × 8.27 inches");
                    fA1169827inchesSText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1014");
                }

                return fA1169827inchesSText;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button AboutButton410Button
        {
            get
            {
                if (null == fAboutButton410Button)
                {
                    fAboutButton410Button = new Button("AboutButton410Button", PrintingShortcutPane);
                    fAboutButton410Button.UIMap.Scope = UIASeachScope.Children;
                    fAboutButton410Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fAboutButton410Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"About...");
                    fAboutButton410Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"410");
                }

                return fAboutButton410Button;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem PaperQualityTabItem
        {
            get
            {
                if (null == fPaperQualityTabItem)
                {
                    fPaperQualityTabItem = new TabItem("PaperQualityTabItem", SysTabControl32Tab);
                    fPaperQualityTabItem.UIMap.Scope = UIASeachScope.Children;
                    fPaperQualityTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Paper/Quality");
                }

                return fPaperQualityTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem EffectsTabItem
        {
            get
            {
                if (null == fEffectsTabItem)
                {
                    fEffectsTabItem = new TabItem("EffectsTabItem", SysTabControl32Tab);
                    fEffectsTabItem.UIMap.Scope = UIASeachScope.Children;
                    fEffectsTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Effects");
                }

                return fEffectsTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem FinishingTabItem
        {
            get
            {
                if (null == fFinishingTabItem)
                {
                    fFinishingTabItem = new TabItem("FinishingTabItem", SysTabControl32Tab);
                    fFinishingTabItem.UIMap.Scope = UIASeachScope.Children;
                    fFinishingTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Finishing");
                }

                return fFinishingTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem ColorTabItem
        {
            get
            {
                if (null == fColorTabItem)
                {
                    fColorTabItem = new TabItem("ColorTabItem", SysTabControl32Tab);
                    fColorTabItem.UIMap.Scope = UIASeachScope.Children;
                    fColorTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Color");
                }

                return fColorTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TabItem ServicesTabItem
        {
            get
            {
                if (null == fServicesTabItem)
                {
                    fServicesTabItem = new TabItem("ServicesTabItem", SysTabControl32Tab);
                    fServicesTabItem.UIMap.Scope = UIASeachScope.Children;
                    fServicesTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Services");
                }

                return fServicesTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public TitleBar HPOfficejetProXTitleBar
        {
            get
            {
                if (null == fHPOfficejetProXTitleBar)
                {
                    fHPOfficejetProXTitleBar = new TitleBar("HPOfficejetProXTitleBar", PrintPreferencesWindow);
                    fHPOfficejetProXTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fHPOfficejetProXTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Officejet Pro X576dw MFP (16.190.4.33) Printing Preferences");
                    fHPOfficejetProXTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                }

                return fHPOfficejetProXTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuBar SystemMenuBarSyMenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyMenuBar)
                {
                    fSystemMenuBarSyMenuBar = new MenuBar("SystemMenuBarSyMenuBar", HPOfficejetProXTitleBar);
                    fSystemMenuBarSyMenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                }

                return fSystemMenuBarSyMenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public MenuItem SystemItem1MenuItem
        {
            get
            {
                if (null == fSystemItem1MenuItem)
                {
                    fSystemItem1MenuItem = new MenuItem("SystemItem1MenuItem", SystemMenuBarSyMenuBar);
                    fSystemItem1MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                }

                return fSystemItem1MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Button CloseCloseButton
        {
            get
            {
                if (null == fCloseCloseButton)
                {
                    fCloseCloseButton = new Button("CloseCloseButton", HPOfficejetProXTitleBar);
                    fCloseCloseButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                }

                return fCloseCloseButton;
            }
        }
    }
}

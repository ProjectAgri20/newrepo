//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------

namespace HP.ScalableTest.Plugin.TwainDriverConfiguration.UIMaps
{
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class Outlook
    {
        /// <summary>
        /// Backing field for HPScanHPLaserJeWindow property
        /// </summary>
        private Window fHPScanHPLaserJeWindow;

        /// <summary>
        /// Backing field for UntitledMessageWindow property
        /// </summary>
        private Window fUntitledMessageWindow;

        /// <summary>
        /// Backing field for MsoDockTopMsoCoPane property
        /// </summary>
        private Pane fMsoDockTopMsoCoPane;

        /// <summary>
        /// Backing field for RibbonMsoCommanToolBar property
        /// </summary>
        private ToolBar fRibbonMsoCommanToolBar;

        /// <summary>
        /// Backing field for RibbonMsoWorkPane property
        /// </summary>
        private Pane fRibbonMsoWorkPane;

        /// <summary>
        /// Backing field for NUIPane property
        /// </summary>
        private Pane fNUIPane;

        /// <summary>
        /// Backing field for NetUIHWNDElemenDup0Pane property
        /// </summary>
        private Pane fNetUIHWNDElemenDup0Pane;

        /// <summary>
        /// Backing field for RibbonNetUInetpPane property
        /// </summary>
        private Pane fRibbonNetUInetpPane;

        /// <summary>
        /// Backing field for QuickAccessToolToolBar property
        /// </summary>
        private ToolBar fQuickAccessToolToolBar;

        /// <summary>
        /// Backing field for SaveNetUIRibbonButton property
        /// </summary>
        private Button fSaveNetUIRibbonButton;

        /// <summary>
        /// Backing field for UndoTypingNetUIButton property
        /// </summary>
        private Button fUndoTypingNetUIButton;

        /// <summary>
        /// Backing field for RepeatTypingNetButton property
        /// </summary>
        private Button fRepeatTypingNetButton;

        /// <summary>
        /// Backing field for PreviousItemNetButton property
        /// </summary>
        private Button fPreviousItemNetButton;

        /// <summary>
        /// Backing field for NextItemNetUIRiButton property
        /// </summary>
        private Button fNextItemNetUIRiButton;

        /// <summary>
        /// Backing field for CustomizeToolbaMenuItem property
        /// </summary>
        private MenuItem fCustomizeToolbaMenuItem;

        /// <summary>
        /// Backing field for NetUIOfficeCaptTitleBar property
        /// </summary>
        private TitleBar fNetUIOfficeCaptTitleBar;

        /// <summary>
        /// Backing field for MicrosoftOutlooButton property
        /// </summary>
        private Button fMicrosoftOutlooButton;

        /// <summary>
        /// Backing field for RibbonDisplayOpMenuItem property
        /// </summary>
        private MenuItem fRibbonDisplayOpMenuItem;

        /// <summary>
        /// Backing field for NetUIStickyButtMenuItem property
        /// </summary>
        private MenuItem fNetUIStickyButtMenuItem;

        /// <summary>
        /// Backing field for MaximizeNetUIApButton property
        /// </summary>
        private Button fMaximizeNetUIApButton;

        /// <summary>
        /// Backing field for CloseNetUIAppFrButton property
        /// </summary>
        private Button fCloseNetUIAppFrButton;

        /// <summary>
        /// Backing field for FileTabNetUIRibButton property
        /// </summary>
        private Button fFileTabNetUIRibButton;

        /// <summary>
        /// Backing field for RibbonTabsNetUITab property
        /// </summary>
        private Tab fRibbonTabsNetUITab;

        /// <summary>
        /// Backing field for MessageNetUIRibTabItem property
        /// </summary>
        private TabItem fMessageNetUIRibTabItem;

        /// <summary>
        /// Backing field for InsertNetUIRibbTabItem property
        /// </summary>
        private TabItem fInsertNetUIRibbTabItem;

        /// <summary>
        /// Backing field for OptionsNetUIRibTabItem property
        /// </summary>
        private TabItem fOptionsNetUIRibTabItem;

        /// <summary>
        /// Backing field for FormatTextNetUITabItem property
        /// </summary>
        private TabItem fFormatTextNetUITabItem;

        /// <summary>
        /// Backing field for ReviewNetUIRibbTabItem property
        /// </summary>
        private TabItem fReviewNetUIRibbTabItem;

        /// <summary>
        /// Backing field for LowerRibbonNetUPane property
        /// </summary>
        private Pane fLowerRibbonNetUPane;

        /// <summary>
        /// Backing field for MessageNetUIOrdCustom property
        /// </summary>
        private Custom fMessageNetUIOrdCustom;

        /// <summary>
        /// Backing field for ClipboardNetUICGroup property
        /// </summary>
        private Group fClipboardNetUICGroup;

        /// <summary>
        /// Backing field for BasicTextNetUICGroup property
        /// </summary>
        private Group fBasicTextNetUICGroup;

        /// <summary>
        /// Backing field for NamesNetUIChunkGroup property
        /// </summary>
        private Group fNamesNetUIChunkGroup;

        /// <summary>
        /// Backing field for IncludeNetUIChuGroup property
        /// </summary>
        private Group fIncludeNetUIChuGroup;

        /// <summary>
        /// Backing field for TagsNetUIChunkGroup property
        /// </summary>
        private Group fTagsNetUIChunkGroup;

        /// <summary>
        /// Backing field for ZoomNetUIChunkGroup property
        /// </summary>
        private Group fZoomNetUIChunkGroup;

        /// <summary>
        /// Backing field for CollapsetheRibbButton property
        /// </summary>
        private Button fCollapsetheRibbButton;

        /// <summary>
        /// Backing field for AfxWndW103Pane property
        /// </summary>
        private Pane fAfxWndW103Pane;

        /// <summary>
        /// Backing field for FormRegionsAfxWPane property
        /// </summary>
        private Pane fFormRegionsAfxWPane;

        /// <summary>
        /// Backing field for A32770Dup0Pane property
        /// </summary>
        private Pane fA32770Dup0Pane;

        /// <summary>
        /// Backing field for ToRichEdit20WPTDocument property
        /// </summary>
        private Document fToRichEdit20WPTDocument;

        /// <summary>
        /// Backing field for CcRichEdit20WPTDocument property
        /// </summary>
        private Document fCcRichEdit20WPTDocument;

        /// <summary>
        /// Backing field for SubjectStatic45Text property
        /// </summary>
        private Text fSubjectStatic45Text;

        /// <summary>
        /// Backing field for SubjectRichEditEdit property
        /// </summary>
        private Edit fSubjectRichEditEdit;

        /// <summary>
        /// Backing field for AttachedStatic4Text property
        /// </summary>
        private Text fAttachedStatic4Text;

        /// <summary>
        /// Backing field for AttachedRichEdiDocument property
        /// </summary>
        private Document fAttachedRichEdiDocument;

        /// <summary>
        /// Backing field for AImage property
        /// </summary>
        private Image fAImage;

        /// <summary>
        /// Backing field for MessageAfxWndA4Pane property
        /// </summary>
        private Pane fMessageAfxWndA4Pane;

        /// <summary>
        /// Backing field for RETalentProProfPane property
        /// </summary>
        private Pane fRETalentProProfPane;

        /// <summary>
        /// Backing field for UntitledMessageDocument property
        /// </summary>
        private Document fUntitledMessageDocument;

        /// <summary>
        /// Backing field for VerticalNUIScroPane property
        /// </summary>
        private Pane fVerticalNUIScroPane;

        /// <summary>
        /// Backing field for NetUIHWNDElemenDup1Pane property
        /// </summary>
        private Pane fNetUIHWNDElemenDup1Pane;

        /// <summary>
        /// Backing field for NetUIScrollBar property
        /// </summary>
        private ScrollBar fNetUIScrollBar;

        /// <summary>
        /// Backing field for SendButton4256Button property
        /// </summary>
        private Button fSendButton4256Button;

        /// <summary>
        /// Backing field for ToButton4352Button property
        /// </summary>
        private Button fToButton4352Button;

        /// <summary>
        /// Backing field for CcButton4353Button property
        /// </summary>
        private Button fCcButton4353Button;

        /// <summary>
        /// Backing field for UntitledMessageTitleBar property
        /// </summary>
        private TitleBar fUntitledMessageTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyMenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyMenuBar;

        /// <summary>
        /// Backing field for SystemItem1MenuItem property
        /// </summary>
        private MenuItem fSystemItem1MenuItem;

        /// <summary>
        /// Backing field for MinimizeMinimizButton property
        /// </summary>
        private Button fMinimizeMinimizButton;

        /// <summary>
        /// Backing field for MaximizeMaximizButton property
        /// </summary>
        private Button fMaximizeMaximizButton;

        /// <summary>
        /// Backing field for CloseCloseButton property
        /// </summary>
        private Button fCloseCloseButton;

        /// <summary>
        /// Backing field for HPScanStatic106Text property
        /// </summary>
        private Text fHPScanStatic106Text;

        /// <summary>
        /// Backing field for HPLaserJetMFPM5Text property
        /// </summary>
        private Text fHPLaserJetMFPM5Text;

        /// <summary>
        /// Backing field for A11Static1066Dup0I0XText property
        /// </summary>
        private Text fA11Static1066Dup0I0XText;

        /// <summary>
        /// Backing field for A11Static1066Dup1I1XText property
        /// </summary>
        private Text fA11Static1066Dup1I1XText;

        /// <summary>
        /// Backing field for AdjustmentsStatText property
        /// </summary>
        private Text fAdjustmentsStatText;

        /// <summary>
        /// Backing field for SendButton1006Button property
        /// </summary>
        private Button fSendButton1006Button;

        /// <summary>
        /// Backing field for ExitButton1007Button property
        /// </summary>
        private Button fExitButton1007Button;

        /// <summary>
        /// Backing field for BackButton1005Button property
        /// </summary>
        private Button fBackButton1005Button;

        /// <summary>
        /// Backing field for Button1000Button property
        /// </summary>
        private Button fButton1000Button;

        /// <summary>
        /// Backing field for Button210Button property
        /// </summary>
        private Button fButton210Button;

        /// <summary>
        /// Backing field for Button1023Button property
        /// </summary>
        private Button fButton1023Button;

        /// <summary>
        /// Backing field for A32770Dup1I0XPane property
        /// </summary>
        private Pane fA32770Dup1I0XPane;

        /// <summary>
        /// Backing field for A32770Dup2I1XPane property
        /// </summary>
        private Pane fA32770Dup2I1XPane;

        /// <summary>
        /// Backing field for Button1079Button property
        /// </summary>
        private Button fButton1079Button;

        /// <summary>
        /// Backing field for Button1110Button property
        /// </summary>
        private Button fButton1110Button;

        /// <summary>
        /// Backing field for AutoExposureButButton property
        /// </summary>
        private Button fAutoExposureButButton;

        /// <summary>
        /// Backing field for msctlstrackbarDup0Slider property
        /// </summary>
        private Slider fmsctlstrackbarDup0Slider;

        /// <summary>
        /// Backing field for BackbylargeamouDup0Button property
        /// </summary>
        private Button fBackbylargeamouDup0Button;

        /// <summary>
        /// Backing field for ThumbDup0Thumb property
        /// </summary>
        private Thumb fThumbDup0Thumb;

        /// <summary>
        /// Backing field for ForwardbylargeaDup0Button property
        /// </summary>
        private Button fForwardbylargeaDup0Button;

        /// <summary>
        /// Backing field for A0Edit1043Edit property
        /// </summary>
        private Edit fA0Edit1043Edit;

        /// <summary>
        /// Backing field for SpinmsctlsupdoDup0Spinner property
        /// </summary>
        private Spinner fSpinmsctlsupdoDup0Spinner;

        /// <summary>
        /// Backing field for ForwardSmallIncDup0Button property
        /// </summary>
        private Button fForwardSmallIncDup0Button;

        /// <summary>
        /// Backing field for BackwardSmallDeDup0Button property
        /// </summary>
        private Button fBackwardSmallDeDup0Button;

        /// <summary>
        /// Backing field for msctlstrackbarDup1Slider property
        /// </summary>
        private Slider fmsctlstrackbarDup1Slider;

        /// <summary>
        /// Backing field for BackbylargeamouDup1Button property
        /// </summary>
        private Button fBackbylargeamouDup1Button;

        /// <summary>
        /// Backing field for ThumbDup1Thumb property
        /// </summary>
        private Thumb fThumbDup1Thumb;

        /// <summary>
        /// Backing field for ForwardbylargeaDup1Button property
        /// </summary>
        private Button fForwardbylargeaDup1Button;

        /// <summary>
        /// Backing field for A0Edit1046Edit property
        /// </summary>
        private Edit fA0Edit1046Edit;

        /// <summary>
        /// Backing field for SpinmsctlsupdoDup1Spinner property
        /// </summary>
        private Spinner fSpinmsctlsupdoDup1Spinner;

        /// <summary>
        /// Backing field for ForwardSmallIncDup1Button property
        /// </summary>
        private Button fForwardSmallIncDup1Button;

        /// <summary>
        /// Backing field for BackwardSmallDeDup1Button property
        /// </summary>
        private Button fBackwardSmallDeDup1Button;

        /// <summary>
        /// Backing field for msctlstrackbarDup2Slider property
        /// </summary>
        private Slider fmsctlstrackbarDup2Slider;

        /// <summary>
        /// Backing field for BackbylargeamouDup2Button property
        /// </summary>
        private Button fBackbylargeamouDup2Button;

        /// <summary>
        /// Backing field for ThumbDup2Thumb property
        /// </summary>
        private Thumb fThumbDup2Thumb;

        /// <summary>
        /// Backing field for ForwardbylargeaDup2Button property
        /// </summary>
        private Button fForwardbylargeaDup2Button;

        /// <summary>
        /// Backing field for A0Edit1049Edit property
        /// </summary>
        private Edit fA0Edit1049Edit;

        /// <summary>
        /// Backing field for SpinmsctlsupdoDup2Spinner property
        /// </summary>
        private Spinner fSpinmsctlsupdoDup2Spinner;

        /// <summary>
        /// Backing field for ForwardSmallIncDup2Button property
        /// </summary>
        private Button fForwardSmallIncDup2Button;

        /// <summary>
        /// Backing field for BackwardSmallDeDup2Button property
        /// </summary>
        private Button fBackwardSmallDeDup2Button;

        /// <summary>
        /// Backing field for PDFComboBox1077ComboBox property
        /// </summary>
        private ComboBox fPDFComboBox1077ComboBox;

        /// <summary>
        /// Backing field for ComboLBoxListBoList property
        /// </summary>
        private List fComboLBoxListBoList;

        /// <summary>
        /// Backing field for PDFListItem property
        /// </summary>
        private ListItem fPDFListItem;

        /// <summary>
        /// Backing field for DropDownButtonDDup0Button property
        /// </summary>
        private Button fDropDownButtonDDup0Button;

        /// <summary>
        /// Backing field for FileTypeStaticText property
        /// </summary>
        private Text fFileTypeStaticText;

        /// <summary>
        /// Backing field for FileTypeComboBoComboBox property
        /// </summary>
        private ComboBox fFileTypeComboBoComboBox;

        /// <summary>
        /// Backing field for FileTypeComboLBList property
        /// </summary>
        private List fFileTypeComboLBList;

        /// <summary>
        /// Backing field for EmailListItem property
        /// </summary>
        private ListItem fEmailListItem;

        /// <summary>
        /// Backing field for DropDownButtonDDup1Button property
        /// </summary>
        private Button fDropDownButtonDDup1Button;

        /// <summary>
        /// Backing field for SendToStaticText property
        /// </summary>
        private Text fSendToStaticText;

        /// <summary>
        /// Backing field for Button2132Button property
        /// </summary>
        private Button fButton2132Button;

        /// <summary>
        /// Backing field for Button1165Button property
        /// </summary>
        private Button fButton1165Button;

        /// <summary>
        /// Backing field for Button288Button property
        /// </summary>
        private Button fButton288Button;

        /// <summary>
        /// Model Name property
        /// </summary>
        private string _modelName;

        /// <summary>
        /// Initializes a new instance of the <see cref="Outlook"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public Outlook(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Outlook"/> class using the default UIAFramework.
        /// </summary>
        public Outlook()
        {
            Desktop = new Desktop();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Outlook"/> class using the default UIAFramework.
        /// </summary>
        /// <param name="modelName">
        /// The framework.
        /// </param>
        public Outlook(string modelName)
        {
            _modelName = modelName;
            Desktop = new Desktop(UIAFramework.ManagedUIA);
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to HPScanHPLaserJeWindow
        /// </summary>
        public Window HPScanHPLaserJeWindow
        {
            get
            {
                if (null == fHPScanHPLaserJeWindow)
                {
                    fHPScanHPLaserJeWindow = new Window("HPScanHPLaserJeWindow", Desktop);
                    fHPScanHPLaserJeWindow.UIMap.Scope = UIASeachScope.Children;
                    fHPScanHPLaserJeWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"#32770");
                    fHPScanHPLaserJeWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, $@"HP Scan - {_modelName}");
                }

                return fHPScanHPLaserJeWindow;
            }
        }

        /// <summary>
        /// Gets Reference to UntitledMessageWindow
        /// </summary>
        public Window UntitledMessageWindow
        {
            get
            {
                if (null == fUntitledMessageWindow)
                {
                    fUntitledMessageWindow = new Window("UntitledMessageWindow", Desktop);
                    fUntitledMessageWindow.UIMap.Scope = UIASeachScope.Children;
                    fUntitledMessageWindow.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Untitled - Message (HTML) ");
                    fUntitledMessageWindow.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"rctrl_renwnd32");
                }

                return fUntitledMessageWindow;
            }
        }

        /// <summary>
        /// Gets Reference to MsoDockTopMsoCoPane
        /// </summary>
        public Pane MsoDockTopMsoCoPane
        {
            get
            {
                if (null == fMsoDockTopMsoCoPane)
                {
                    fMsoDockTopMsoCoPane = new Pane("MsoDockTopMsoCoPane", UntitledMessageWindow);
                    fMsoDockTopMsoCoPane.UIMap.Scope = UIASeachScope.Children;
                    fMsoDockTopMsoCoPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"MsoDockTop");
                    fMsoDockTopMsoCoPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"MsoCommandBarDock");
                }

                return fMsoDockTopMsoCoPane;
            }
        }

        /// <summary>
        /// Gets Reference to RibbonMsoCommanToolBar
        /// </summary>
        public ToolBar RibbonMsoCommanToolBar
        {
            get
            {
                if (null == fRibbonMsoCommanToolBar)
                {
                    fRibbonMsoCommanToolBar = new ToolBar("RibbonMsoCommanToolBar", MsoDockTopMsoCoPane);
                    fRibbonMsoCommanToolBar.UIMap.Scope = UIASeachScope.Children;
                    fRibbonMsoCommanToolBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Ribbon");
                    fRibbonMsoCommanToolBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"MsoCommandBar");
                }

                return fRibbonMsoCommanToolBar;
            }
        }

        /// <summary>
        /// Gets Reference to RibbonMsoWorkPane
        /// </summary>
        public Pane RibbonMsoWorkPane
        {
            get
            {
                if (null == fRibbonMsoWorkPane)
                {
                    fRibbonMsoWorkPane = new Pane("RibbonMsoWorkPane", RibbonMsoCommanToolBar);
                    fRibbonMsoWorkPane.UIMap.Scope = UIASeachScope.Children;
                    fRibbonMsoWorkPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Ribbon");
                    fRibbonMsoWorkPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"MsoWorkPane");
                }

                return fRibbonMsoWorkPane;
            }
        }

        /// <summary>
        /// Gets Reference to NUIPane
        /// </summary>
        public Pane NUIPane
        {
            get
            {
                if (null == fNUIPane)
                {
                    fNUIPane = new Pane("NUIPane", RibbonMsoWorkPane);
                    fNUIPane.UIMap.Scope = UIASeachScope.Children;
                    fNUIPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NUIPane");
                }

                return fNUIPane;
            }
        }

        /// <summary>
        /// Gets Reference to NetUIHWNDElemenDup0Pane
        /// </summary>
        public Pane NetUIHWNDElemenDup0Pane
        {
            get
            {
                if (null == fNetUIHWNDElemenDup0Pane)
                {
                    fNetUIHWNDElemenDup0Pane = new Pane("NetUIHWNDElemenDup0Pane", NUIPane);
                    fNetUIHWNDElemenDup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fNetUIHWNDElemenDup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIHWNDElement");
                }

                return fNetUIHWNDElemenDup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to RibbonNetUInetpPane
        /// </summary>
        public Pane RibbonNetUInetpPane
        {
            get
            {
                if (null == fRibbonNetUInetpPane)
                {
                    fRibbonNetUInetpPane = new Pane("RibbonNetUInetpPane", NetUIHWNDElemenDup0Pane);
                    fRibbonNetUInetpPane.UIMap.Scope = UIASeachScope.Children;
                    fRibbonNetUInetpPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Ribbon");
                    fRibbonNetUInetpPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUInetpane");
                }

                return fRibbonNetUInetpPane;
            }
        }

        /// <summary>
        /// Gets Reference to QuickAccessToolToolBar
        /// </summary>
        public ToolBar QuickAccessToolToolBar
        {
            get
            {
                if (null == fQuickAccessToolToolBar)
                {
                    fQuickAccessToolToolBar = new ToolBar("QuickAccessToolToolBar", RibbonNetUInetpPane);
                    fQuickAccessToolToolBar.UIMap.Scope = UIASeachScope.Children;
                    fQuickAccessToolToolBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Quick Access Toolbar");
                    fQuickAccessToolToolBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIElement");
                }

                return fQuickAccessToolToolBar;
            }
        }

        /// <summary>
        /// Gets Reference to SaveNetUIRibbonButton
        /// </summary>
        public Button SaveNetUIRibbonButton
        {
            get
            {
                if (null == fSaveNetUIRibbonButton)
                {
                    fSaveNetUIRibbonButton = new Button("SaveNetUIRibbonButton", QuickAccessToolToolBar);
                    fSaveNetUIRibbonButton.UIMap.Scope = UIASeachScope.Children;
                    fSaveNetUIRibbonButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Save");
                    fSaveNetUIRibbonButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIRibbonButton");
                }

                return fSaveNetUIRibbonButton;
            }
        }

        /// <summary>
        /// Gets Reference to UndoTypingNetUIButton
        /// </summary>
        public Button UndoTypingNetUIButton
        {
            get
            {
                if (null == fUndoTypingNetUIButton)
                {
                    fUndoTypingNetUIButton = new Button("UndoTypingNetUIButton", QuickAccessToolToolBar);
                    fUndoTypingNetUIButton.UIMap.Scope = UIASeachScope.Children;
                    fUndoTypingNetUIButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Undo Typing");
                    fUndoTypingNetUIButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIRibbonButton");
                }

                return fUndoTypingNetUIButton;
            }
        }

        /// <summary>
        /// Gets Reference to RepeatTypingNetButton
        /// </summary>
        public Button RepeatTypingNetButton
        {
            get
            {
                if (null == fRepeatTypingNetButton)
                {
                    fRepeatTypingNetButton = new Button("RepeatTypingNetButton", QuickAccessToolToolBar);
                    fRepeatTypingNetButton.UIMap.Scope = UIASeachScope.Children;
                    fRepeatTypingNetButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Repeat Typing");
                    fRepeatTypingNetButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIRibbonButton");
                }

                return fRepeatTypingNetButton;
            }
        }

        /// <summary>
        /// Gets Reference to PreviousItemNetButton
        /// </summary>
        public Button PreviousItemNetButton
        {
            get
            {
                if (null == fPreviousItemNetButton)
                {
                    fPreviousItemNetButton = new Button("PreviousItemNetButton", QuickAccessToolToolBar);
                    fPreviousItemNetButton.UIMap.Scope = UIASeachScope.Children;
                    fPreviousItemNetButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Previous Item");
                    fPreviousItemNetButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIRibbonButton");
                }

                return fPreviousItemNetButton;
            }
        }

        /// <summary>
        /// Gets Reference to NextItemNetUIRiButton
        /// </summary>
        public Button NextItemNetUIRiButton
        {
            get
            {
                if (null == fNextItemNetUIRiButton)
                {
                    fNextItemNetUIRiButton = new Button("NextItemNetUIRiButton", QuickAccessToolToolBar);
                    fNextItemNetUIRiButton.UIMap.Scope = UIASeachScope.Children;
                    fNextItemNetUIRiButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Next Item");
                    fNextItemNetUIRiButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIRibbonButton");
                }

                return fNextItemNetUIRiButton;
            }
        }

        /// <summary>
        /// Gets Reference to CustomizeToolbaMenuItem
        /// </summary>
        public MenuItem CustomizeToolbaMenuItem
        {
            get
            {
                if (null == fCustomizeToolbaMenuItem)
                {
                    fCustomizeToolbaMenuItem = new MenuItem("CustomizeToolbaMenuItem", QuickAccessToolToolBar);
                    fCustomizeToolbaMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fCustomizeToolbaMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Customize Toolbar");
                    fCustomizeToolbaMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIAnchor");
                }

                return fCustomizeToolbaMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to NetUIOfficeCaptTitleBar
        /// </summary>
        public TitleBar NetUIOfficeCaptTitleBar
        {
            get
            {
                if (null == fNetUIOfficeCaptTitleBar)
                {
                    fNetUIOfficeCaptTitleBar = new TitleBar("NetUIOfficeCaptTitleBar", RibbonNetUInetpPane);
                    fNetUIOfficeCaptTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fNetUIOfficeCaptTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIOfficeCaption");
                }

                return fNetUIOfficeCaptTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to MicrosoftOutlooButton
        /// </summary>
        public Button MicrosoftOutlooButton
        {
            get
            {
                if (null == fMicrosoftOutlooButton)
                {
                    fMicrosoftOutlooButton = new Button("MicrosoftOutlooButton", RibbonNetUInetpPane);
                    fMicrosoftOutlooButton.UIMap.Scope = UIASeachScope.Children;
                    fMicrosoftOutlooButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Microsoft Outlook Help (F1)");
                    fMicrosoftOutlooButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIAppFrameHelper");
                }

                return fMicrosoftOutlooButton;
            }
        }

        /// <summary>
        /// Gets Reference to RibbonDisplayOpMenuItem
        /// </summary>
        public MenuItem RibbonDisplayOpMenuItem
        {
            get
            {
                if (null == fRibbonDisplayOpMenuItem)
                {
                    fRibbonDisplayOpMenuItem = new MenuItem("RibbonDisplayOpMenuItem", RibbonNetUInetpPane);
                    fRibbonDisplayOpMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fRibbonDisplayOpMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Ribbon Display Options");
                    fRibbonDisplayOpMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIAnchor");
                }

                return fRibbonDisplayOpMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to NetUIStickyButtMenuItem
        /// </summary>
        public MenuItem NetUIStickyButtMenuItem
        {
            get
            {
                if (null == fNetUIStickyButtMenuItem)
                {
                    fNetUIStickyButtMenuItem = new MenuItem("NetUIStickyButtMenuItem", RibbonDisplayOpMenuItem);
                    fNetUIStickyButtMenuItem.UIMap.Scope = UIASeachScope.Children;
                    fNetUIStickyButtMenuItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIStickyButton");
                }

                return fNetUIStickyButtMenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to MaximizeNetUIApButton
        /// </summary>
        public Button MaximizeNetUIApButton
        {
            get
            {
                if (null == fMaximizeNetUIApButton)
                {
                    fMaximizeNetUIApButton = new Button("MaximizeNetUIApButton", RibbonNetUInetpPane);
                    fMaximizeNetUIApButton.UIMap.Scope = UIASeachScope.Children;
                    fMaximizeNetUIApButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximize");
                    fMaximizeNetUIApButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIAppFrameHelper");
                }

                return fMaximizeNetUIApButton;
            }
        }

        /// <summary>
        /// Gets Reference to CloseNetUIAppFrButton
        /// </summary>
        public Button CloseNetUIAppFrButton
        {
            get
            {
                if (null == fCloseNetUIAppFrButton)
                {
                    fCloseNetUIAppFrButton = new Button("CloseNetUIAppFrButton", RibbonNetUInetpPane);
                    fCloseNetUIAppFrButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseNetUIAppFrButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                    fCloseNetUIAppFrButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIAppFrameHelper");
                }

                return fCloseNetUIAppFrButton;
            }
        }

        /// <summary>
        /// Gets Reference to FileTabNetUIRibButton
        /// </summary>
        public Button FileTabNetUIRibButton
        {
            get
            {
                if (null == fFileTabNetUIRibButton)
                {
                    fFileTabNetUIRibButton = new Button("FileTabNetUIRibButton", RibbonNetUInetpPane);
                    fFileTabNetUIRibButton.UIMap.Scope = UIASeachScope.Children;
                    fFileTabNetUIRibButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"File Tab");
                    fFileTabNetUIRibButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIRibbonTab");
                    fFileTabNetUIRibButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"FileTabButton");
                }

                return fFileTabNetUIRibButton;
            }
        }

        /// <summary>
        /// Gets Reference to RibbonTabsNetUITab
        /// </summary>
        public Tab RibbonTabsNetUITab
        {
            get
            {
                if (null == fRibbonTabsNetUITab)
                {
                    fRibbonTabsNetUITab = new Tab("RibbonTabsNetUITab", RibbonNetUInetpPane);
                    fRibbonTabsNetUITab.UIMap.Scope = UIASeachScope.Children;
                    fRibbonTabsNetUITab.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Ribbon Tabs");
                    fRibbonTabsNetUITab.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIPanViewer");
                }

                return fRibbonTabsNetUITab;
            }
        }

        /// <summary>
        /// Gets Reference to MessageNetUIRibTabItem
        /// </summary>
        public TabItem MessageNetUIRibTabItem
        {
            get
            {
                if (null == fMessageNetUIRibTabItem)
                {
                    fMessageNetUIRibTabItem = new TabItem("MessageNetUIRibTabItem", RibbonTabsNetUITab);
                    fMessageNetUIRibTabItem.UIMap.Scope = UIASeachScope.Children;
                    fMessageNetUIRibTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Message");
                    fMessageNetUIRibTabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIRibbonTab");
                }

                return fMessageNetUIRibTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to InsertNetUIRibbTabItem
        /// </summary>
        public TabItem InsertNetUIRibbTabItem
        {
            get
            {
                if (null == fInsertNetUIRibbTabItem)
                {
                    fInsertNetUIRibbTabItem = new TabItem("InsertNetUIRibbTabItem", RibbonTabsNetUITab);
                    fInsertNetUIRibbTabItem.UIMap.Scope = UIASeachScope.Children;
                    fInsertNetUIRibbTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Insert");
                    fInsertNetUIRibbTabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIRibbonTab");
                }

                return fInsertNetUIRibbTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to OptionsNetUIRibTabItem
        /// </summary>
        public TabItem OptionsNetUIRibTabItem
        {
            get
            {
                if (null == fOptionsNetUIRibTabItem)
                {
                    fOptionsNetUIRibTabItem = new TabItem("OptionsNetUIRibTabItem", RibbonTabsNetUITab);
                    fOptionsNetUIRibTabItem.UIMap.Scope = UIASeachScope.Children;
                    fOptionsNetUIRibTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Options");
                    fOptionsNetUIRibTabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIRibbonTab");
                }

                return fOptionsNetUIRibTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to FormatTextNetUITabItem
        /// </summary>
        public TabItem FormatTextNetUITabItem
        {
            get
            {
                if (null == fFormatTextNetUITabItem)
                {
                    fFormatTextNetUITabItem = new TabItem("FormatTextNetUITabItem", RibbonTabsNetUITab);
                    fFormatTextNetUITabItem.UIMap.Scope = UIASeachScope.Children;
                    fFormatTextNetUITabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Format Text");
                    fFormatTextNetUITabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIRibbonTab");
                }

                return fFormatTextNetUITabItem;
            }
        }

        /// <summary>
        /// Gets Reference to ReviewNetUIRibbTabItem
        /// </summary>
        public TabItem ReviewNetUIRibbTabItem
        {
            get
            {
                if (null == fReviewNetUIRibbTabItem)
                {
                    fReviewNetUIRibbTabItem = new TabItem("ReviewNetUIRibbTabItem", RibbonTabsNetUITab);
                    fReviewNetUIRibbTabItem.UIMap.Scope = UIASeachScope.Children;
                    fReviewNetUIRibbTabItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Review");
                    fReviewNetUIRibbTabItem.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIRibbonTab");
                }

                return fReviewNetUIRibbTabItem;
            }
        }

        /// <summary>
        /// Gets Reference to LowerRibbonNetUPane
        /// </summary>
        public Pane LowerRibbonNetUPane
        {
            get
            {
                if (null == fLowerRibbonNetUPane)
                {
                    fLowerRibbonNetUPane = new Pane("LowerRibbonNetUPane", RibbonNetUInetpPane);
                    fLowerRibbonNetUPane.UIMap.Scope = UIASeachScope.Children;
                    fLowerRibbonNetUPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Lower Ribbon");
                    fLowerRibbonNetUPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIPanViewer");
                }

                return fLowerRibbonNetUPane;
            }
        }

        /// <summary>
        /// Gets Reference to MessageNetUIOrdCustom
        /// </summary>
        public Custom MessageNetUIOrdCustom
        {
            get
            {
                if (null == fMessageNetUIOrdCustom)
                {
                    fMessageNetUIOrdCustom = new Custom("MessageNetUIOrdCustom", LowerRibbonNetUPane);
                    fMessageNetUIOrdCustom.UIMap.Scope = UIASeachScope.Children;
                    fMessageNetUIOrdCustom.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Message");
                    fMessageNetUIOrdCustom.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIOrderedGroup");
                }

                return fMessageNetUIOrdCustom;
            }
        }

        /// <summary>
        /// Gets Reference to ClipboardNetUICGroup
        /// </summary>
        public Group ClipboardNetUICGroup
        {
            get
            {
                if (null == fClipboardNetUICGroup)
                {
                    fClipboardNetUICGroup = new Group("ClipboardNetUICGroup", MessageNetUIOrdCustom);
                    fClipboardNetUICGroup.UIMap.Scope = UIASeachScope.Children;
                    fClipboardNetUICGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Clipboard");
                    fClipboardNetUICGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIChunk");
                }

                return fClipboardNetUICGroup;
            }
        }

        /// <summary>
        /// Gets Reference to BasicTextNetUICGroup
        /// </summary>
        public Group BasicTextNetUICGroup
        {
            get
            {
                if (null == fBasicTextNetUICGroup)
                {
                    fBasicTextNetUICGroup = new Group("BasicTextNetUICGroup", MessageNetUIOrdCustom);
                    fBasicTextNetUICGroup.UIMap.Scope = UIASeachScope.Children;
                    fBasicTextNetUICGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Basic Text");
                    fBasicTextNetUICGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIChunk");
                }

                return fBasicTextNetUICGroup;
            }
        }

        /// <summary>
        /// Gets Reference to NamesNetUIChunkGroup
        /// </summary>
        public Group NamesNetUIChunkGroup
        {
            get
            {
                if (null == fNamesNetUIChunkGroup)
                {
                    fNamesNetUIChunkGroup = new Group("NamesNetUIChunkGroup", MessageNetUIOrdCustom);
                    fNamesNetUIChunkGroup.UIMap.Scope = UIASeachScope.Children;
                    fNamesNetUIChunkGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Names");
                    fNamesNetUIChunkGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIChunk");
                }

                return fNamesNetUIChunkGroup;
            }
        }

        /// <summary>
        /// Gets Reference to IncludeNetUIChuGroup
        /// </summary>
        public Group IncludeNetUIChuGroup
        {
            get
            {
                if (null == fIncludeNetUIChuGroup)
                {
                    fIncludeNetUIChuGroup = new Group("IncludeNetUIChuGroup", MessageNetUIOrdCustom);
                    fIncludeNetUIChuGroup.UIMap.Scope = UIASeachScope.Children;
                    fIncludeNetUIChuGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Include");
                    fIncludeNetUIChuGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIChunk");
                }

                return fIncludeNetUIChuGroup;
            }
        }

        /// <summary>
        /// Gets Reference to TagsNetUIChunkGroup
        /// </summary>
        public Group TagsNetUIChunkGroup
        {
            get
            {
                if (null == fTagsNetUIChunkGroup)
                {
                    fTagsNetUIChunkGroup = new Group("TagsNetUIChunkGroup", MessageNetUIOrdCustom);
                    fTagsNetUIChunkGroup.UIMap.Scope = UIASeachScope.Children;
                    fTagsNetUIChunkGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Tags");
                    fTagsNetUIChunkGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIChunk");
                }

                return fTagsNetUIChunkGroup;
            }
        }

        /// <summary>
        /// Gets Reference to ZoomNetUIChunkGroup
        /// </summary>
        public Group ZoomNetUIChunkGroup
        {
            get
            {
                if (null == fZoomNetUIChunkGroup)
                {
                    fZoomNetUIChunkGroup = new Group("ZoomNetUIChunkGroup", MessageNetUIOrdCustom);
                    fZoomNetUIChunkGroup.UIMap.Scope = UIASeachScope.Children;
                    fZoomNetUIChunkGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Zoom");
                    fZoomNetUIChunkGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIChunk");
                }

                return fZoomNetUIChunkGroup;
            }
        }

        /// <summary>
        /// Gets Reference to CollapsetheRibbButton
        /// </summary>
        public Button CollapsetheRibbButton
        {
            get
            {
                if (null == fCollapsetheRibbButton)
                {
                    fCollapsetheRibbButton = new Button("CollapsetheRibbButton", RibbonNetUInetpPane);
                    fCollapsetheRibbButton.UIMap.Scope = UIASeachScope.Children;
                    fCollapsetheRibbButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Collapse the Ribbon");
                    fCollapsetheRibbButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIStickyButton");
                }

                return fCollapsetheRibbButton;
            }
        }

        /// <summary>
        /// Gets Reference to AfxWndW103Pane
        /// </summary>
        public Pane AfxWndW103Pane
        {
            get
            {
                if (null == fAfxWndW103Pane)
                {
                    fAfxWndW103Pane = new Pane("AfxWndW103Pane", UntitledMessageWindow);
                    fAfxWndW103Pane.UIMap.Scope = UIASeachScope.Children;
                    fAfxWndW103Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"AfxWndW");
                    fAfxWndW103Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"103");
                }

                return fAfxWndW103Pane;
            }
        }

        /// <summary>
        /// Gets Reference to FormRegionsAfxWPane
        /// </summary>
        public Pane FormRegionsAfxWPane
        {
            get
            {
                if (null == fFormRegionsAfxWPane)
                {
                    fFormRegionsAfxWPane = new Pane("FormRegionsAfxWPane", AfxWndW103Pane);
                    fFormRegionsAfxWPane.UIMap.Scope = UIASeachScope.Children;
                    fFormRegionsAfxWPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Form Regions");
                    fFormRegionsAfxWPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"AfxWndW");
                    fFormRegionsAfxWPane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"258");
                }

                return fFormRegionsAfxWPane;
            }
        }

        /// <summary>
        /// Gets Reference to A32770Dup0Pane
        /// </summary>
        public Pane A32770Dup0Pane
        {
            get
            {
                if (null == fA32770Dup0Pane)
                {
                    fA32770Dup0Pane = new Pane("A32770Dup0Pane", FormRegionsAfxWPane);
                    fA32770Dup0Pane.UIMap.Scope = UIASeachScope.Children;
                    fA32770Dup0Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"#32770");
                }

                return fA32770Dup0Pane;
            }
        }

        /// <summary>
        /// Gets Reference to ToRichEdit20WPTDocument
        /// </summary>
        public Document ToRichEdit20WPTDocument
        {
            get
            {
                if (null == fToRichEdit20WPTDocument)
                {
                    fToRichEdit20WPTDocument = new Document("ToRichEdit20WPTDocument", A32770Dup0Pane);
                    fToRichEdit20WPTDocument.UIMap.Scope = UIASeachScope.Children;
                    fToRichEdit20WPTDocument.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"To");
                    fToRichEdit20WPTDocument.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4099");
                }

                return fToRichEdit20WPTDocument;
            }
        }

        /// <summary>
        /// Gets Reference to CcRichEdit20WPTDocument
        /// </summary>
        public Document CcRichEdit20WPTDocument
        {
            get
            {
                if (null == fCcRichEdit20WPTDocument)
                {
                    fCcRichEdit20WPTDocument = new Document("CcRichEdit20WPTDocument", A32770Dup0Pane);
                    fCcRichEdit20WPTDocument.UIMap.Scope = UIASeachScope.Children;
                    fCcRichEdit20WPTDocument.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cc");
                    fCcRichEdit20WPTDocument.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichEdit20WPT");
                    fCcRichEdit20WPTDocument.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4100");
                }

                return fCcRichEdit20WPTDocument;
            }
        }

        /// <summary>
        /// Gets Reference to SubjectStatic45Text
        /// </summary>
        public Text SubjectStatic45Text
        {
            get
            {
                if (null == fSubjectStatic45Text)
                {
                    fSubjectStatic45Text = new Text("SubjectStatic45Text", A32770Dup0Pane);
                    fSubjectStatic45Text.UIMap.Scope = UIASeachScope.Children;
                    fSubjectStatic45Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Subject");
                    fSubjectStatic45Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fSubjectStatic45Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4516");
                }

                return fSubjectStatic45Text;
            }
        }

        /// <summary>
        /// Gets Reference to SubjectRichEditEdit
        /// </summary>
        public Edit SubjectRichEditEdit
        {
            get
            {
                if (null == fSubjectRichEditEdit)
                {
                    fSubjectRichEditEdit = new Edit("SubjectRichEditEdit", A32770Dup0Pane);
                    fSubjectRichEditEdit.UIMap.Scope = UIASeachScope.Children;
                    fSubjectRichEditEdit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Subject");
                    fSubjectRichEditEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichEdit20WPT");
                    fSubjectRichEditEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4101");
                }

                return fSubjectRichEditEdit;
            }
        }

        /// <summary>
        /// Gets Reference to AttachedStatic4Text
        /// </summary>
        public Text AttachedStatic4Text
        {
            get
            {
                if (null == fAttachedStatic4Text)
                {
                    fAttachedStatic4Text = new Text("AttachedStatic4Text", A32770Dup0Pane);
                    fAttachedStatic4Text.UIMap.Scope = UIASeachScope.Children;
                    fAttachedStatic4Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Attached");
                    fAttachedStatic4Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fAttachedStatic4Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4536");
                }

                return fAttachedStatic4Text;
            }
        }

        /// <summary>
        /// Gets Reference to AttachedRichEdiDocument
        /// </summary>
        public Document AttachedRichEdiDocument
        {
            get
            {
                if (null == fAttachedRichEdiDocument)
                {
                    fAttachedRichEdiDocument = new Document("AttachedRichEdiDocument", A32770Dup0Pane);
                    fAttachedRichEdiDocument.UIMap.Scope = UIASeachScope.Children;
                    fAttachedRichEdiDocument.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Attached");
                    fAttachedRichEdiDocument.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"RichEdit20WPT");
                    fAttachedRichEdiDocument.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4104");
                }

                return fAttachedRichEdiDocument;
            }
        }

        /// <summary>
        /// Gets Reference to AImage
        /// </summary>
        public Image AImage
        {
            get
            {
                if (null == fAImage)
                {
                    fAImage = new Image("AImage", AttachedRichEdiDocument);
                    fAImage.UIMap.Scope = UIASeachScope.Children;
                }

                return fAImage;
            }
        }

        /// <summary>
        /// Gets Reference to MessageAfxWndA4Pane
        /// </summary>
        public Pane MessageAfxWndA4Pane
        {
            get
            {
                if (null == fMessageAfxWndA4Pane)
                {
                    fMessageAfxWndA4Pane = new Pane("MessageAfxWndA4Pane", A32770Dup0Pane);
                    fMessageAfxWndA4Pane.UIMap.Scope = UIASeachScope.Children;
                    fMessageAfxWndA4Pane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Message");
                    fMessageAfxWndA4Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"AfxWndA");
                    fMessageAfxWndA4Pane.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4159");
                }

                return fMessageAfxWndA4Pane;
            }
        }

        /// <summary>
        /// Gets Reference to RETalentProProfPane
        /// </summary>
        public Pane RETalentProProfPane
        {
            get
            {
                if (null == fRETalentProProfPane)
                {
                    fRETalentProProfPane = new Pane("RETalentProProfPane", MessageAfxWndA4Pane);
                    fRETalentProProfPane.UIMap.Scope = UIASeachScope.Children;
                    fRETalentProProfPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"RE: Talent Pro Profile Completion - Message");
                    fRETalentProProfPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"_WwB");
                }

                return fRETalentProProfPane;
            }
        }

        /// <summary>
        /// Gets Reference to UntitledMessageDocument
        /// </summary>
        public Document UntitledMessageDocument
        {
            get
            {
                if (null == fUntitledMessageDocument)
                {
                    fUntitledMessageDocument = new Document("UntitledMessageDocument", RETalentProProfPane);
                    fUntitledMessageDocument.UIMap.Scope = UIASeachScope.Children;
                    fUntitledMessageDocument.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Untitled Message");
                    fUntitledMessageDocument.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"_WwG");
                }

                return fUntitledMessageDocument;
            }
        }

        /// <summary>
        /// Gets Reference to VerticalNUIScroPane
        /// </summary>
        public Pane VerticalNUIScroPane
        {
            get
            {
                if (null == fVerticalNUIScroPane)
                {
                    fVerticalNUIScroPane = new Pane("VerticalNUIScroPane", RETalentProProfPane);
                    fVerticalNUIScroPane.UIMap.Scope = UIASeachScope.Children;
                    fVerticalNUIScroPane.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Vertical");
                    fVerticalNUIScroPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NUIScrollbar");
                }

                return fVerticalNUIScroPane;
            }
        }

        /// <summary>
        /// Gets Reference to NetUIHWNDElemenDup1Pane
        /// </summary>
        public Pane NetUIHWNDElemenDup1Pane
        {
            get
            {
                if (null == fNetUIHWNDElemenDup1Pane)
                {
                    fNetUIHWNDElemenDup1Pane = new Pane("NetUIHWNDElemenDup1Pane", VerticalNUIScroPane);
                    fNetUIHWNDElemenDup1Pane.UIMap.Scope = UIASeachScope.Children;
                    fNetUIHWNDElemenDup1Pane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIHWNDElement");
                }

                return fNetUIHWNDElemenDup1Pane;
            }
        }

        /// <summary>
        /// Gets Reference to NetUIScrollBar
        /// </summary>
        public ScrollBar NetUIScrollBar
        {
            get
            {
                if (null == fNetUIScrollBar)
                {
                    fNetUIScrollBar = new ScrollBar("NetUIScrollBar", NetUIHWNDElemenDup1Pane);
                    fNetUIScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fNetUIScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"NetUIScrollBar");
                }

                return fNetUIScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to SendButton4256Button
        /// </summary>
        public Button SendButton4256Button
        {
            get
            {
                if (null == fSendButton4256Button)
                {
                    fSendButton4256Button = new Button("SendButton4256Button", A32770Dup0Pane);
                    fSendButton4256Button.UIMap.Scope = UIASeachScope.Children;
                    fSendButton4256Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send");
                    fSendButton4256Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fSendButton4256Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4256");
                }

                return fSendButton4256Button;
            }
        }

        /// <summary>
        /// Gets Reference to ToButton4352Button
        /// </summary>
        public Button ToButton4352Button
        {
            get
            {
                if (null == fToButton4352Button)
                {
                    fToButton4352Button = new Button("ToButton4352Button", A32770Dup0Pane);
                    fToButton4352Button.UIMap.Scope = UIASeachScope.Children;
                    fToButton4352Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"To...");
                    fToButton4352Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fToButton4352Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4352");
                }

                return fToButton4352Button;
            }
        }

        /// <summary>
        /// Gets Reference to CcButton4353Button
        /// </summary>
        public Button CcButton4353Button
        {
            get
            {
                if (null == fCcButton4353Button)
                {
                    fCcButton4353Button = new Button("CcButton4353Button", A32770Dup0Pane);
                    fCcButton4353Button.UIMap.Scope = UIASeachScope.Children;
                    fCcButton4353Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Cc...");
                    fCcButton4353Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fCcButton4353Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"4353");
                }

                return fCcButton4353Button;
            }
        }

        /// <summary>
        /// Gets Reference to UntitledMessageTitleBar
        /// </summary>
        public TitleBar UntitledMessageTitleBar
        {
            get
            {
                if (null == fUntitledMessageTitleBar)
                {
                    fUntitledMessageTitleBar = new TitleBar("UntitledMessageTitleBar", UntitledMessageWindow);
                    fUntitledMessageTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fUntitledMessageTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Untitled - Message (HTML) ");
                    fUntitledMessageTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                }

                return fUntitledMessageTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemMenuBarSyMenuBar
        /// </summary>
        public MenuBar SystemMenuBarSyMenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyMenuBar)
                {
                    fSystemMenuBarSyMenuBar = new MenuBar("SystemMenuBarSyMenuBar", UntitledMessageTitleBar);
                    fSystemMenuBarSyMenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                }

                return fSystemMenuBarSyMenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemItem1MenuItem
        /// </summary>
        public MenuItem SystemItem1MenuItem
        {
            get
            {
                if (null == fSystemItem1MenuItem)
                {
                    fSystemItem1MenuItem = new MenuItem("SystemItem1MenuItem", SystemMenuBarSyMenuBar);
                    fSystemItem1MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                }

                return fSystemItem1MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to MinimizeMinimizButton
        /// </summary>
        public Button MinimizeMinimizButton
        {
            get
            {
                if (null == fMinimizeMinimizButton)
                {
                    fMinimizeMinimizButton = new Button("MinimizeMinimizButton", UntitledMessageTitleBar);
                    fMinimizeMinimizButton.UIMap.Scope = UIASeachScope.Children;
                    fMinimizeMinimizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Minimize");
                    fMinimizeMinimizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Minimize");
                }

                return fMinimizeMinimizButton;
            }
        }

        /// <summary>
        /// Gets Reference to MaximizeMaximizButton
        /// </summary>
        public Button MaximizeMaximizButton
        {
            get
            {
                if (null == fMaximizeMaximizButton)
                {
                    fMaximizeMaximizButton = new Button("MaximizeMaximizButton", UntitledMessageTitleBar);
                    fMaximizeMaximizButton.UIMap.Scope = UIASeachScope.Children;
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Maximize");
                    fMaximizeMaximizButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Maximize");
                }

                return fMaximizeMaximizButton;
            }
        }

        /// <summary>
        /// Gets Reference to CloseCloseButton
        /// </summary>
        public Button CloseCloseButton
        {
            get
            {
                if (null == fCloseCloseButton)
                {
                    fCloseCloseButton = new Button("CloseCloseButton", UntitledMessageTitleBar);
                    fCloseCloseButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                }

                return fCloseCloseButton;
            }
        }

        /// <summary>
        /// Gets Reference to HPScanStatic106Text
        /// </summary>
        public Text HPScanStatic106Text
        {
            get
            {
                if (null == fHPScanStatic106Text)
                {
                    fHPScanStatic106Text = new Text("HPScanStatic106Text", HPScanHPLaserJeWindow);
                    fHPScanStatic106Text.UIMap.Scope = UIASeachScope.Children;
                    fHPScanStatic106Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP Scan");
                    fHPScanStatic106Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fHPScanStatic106Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1066");
                }

                return fHPScanStatic106Text;
            }
        }

        /// <summary>
        /// Gets Reference to HPLaserJetMFPM5Text
        /// </summary>
        public Text HPLaserJetMFPM5Text
        {
            get
            {
                if (null == fHPLaserJetMFPM5Text)
                {
                    fHPLaserJetMFPM5Text = new Text("HPLaserJetMFPM5Text", HPScanHPLaserJeWindow);
                    fHPLaserJetMFPM5Text.UIMap.Scope = UIASeachScope.Children;
                    fHPLaserJetMFPM5Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"HP LaserJet MFP M527");
                    fHPLaserJetMFPM5Text.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fHPLaserJetMFPM5Text.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1066");
                }

                return fHPLaserJetMFPM5Text;
            }
        }

        /// <summary>
        /// Gets Reference to A11Static1066Dup0I0XText
        /// </summary>
        public Text A11Static1066Dup0I0XText
        {
            get
            {
                if (null == fA11Static1066Dup0I0XText)
                {
                    fA11Static1066Dup0I0XText = new Text("A11Static1066Dup0I0XText", HPScanHPLaserJeWindow);
                    fA11Static1066Dup0I0XText.UIMap.Scope = UIASeachScope.Children;
                    fA11Static1066Dup0I0XText.UIMap.Index = 0;
                    fA11Static1066Dup0I0XText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"1/1");
                    fA11Static1066Dup0I0XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fA11Static1066Dup0I0XText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1066");
                }

                return fA11Static1066Dup0I0XText;
            }
        }

        /// <summary>
        /// Gets Reference to A11Static1066Dup1I1XText
        /// </summary>
        public Text A11Static1066Dup1I1XText
        {
            get
            {
                if (null == fA11Static1066Dup1I1XText)
                {
                    fA11Static1066Dup1I1XText = new Text("A11Static1066Dup1I1XText", HPScanHPLaserJeWindow);
                    fA11Static1066Dup1I1XText.UIMap.Scope = UIASeachScope.Children;
                    fA11Static1066Dup1I1XText.UIMap.Index = 1;
                    fA11Static1066Dup1I1XText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"1/1");
                    fA11Static1066Dup1I1XText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fA11Static1066Dup1I1XText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1066");
                }

                return fA11Static1066Dup1I1XText;
            }
        }

        /// <summary>
        /// Gets Reference to AdjustmentsStatText
        /// </summary>
        public Text AdjustmentsStatText
        {
            get
            {
                if (null == fAdjustmentsStatText)
                {
                    fAdjustmentsStatText = new Text("AdjustmentsStatText", HPScanHPLaserJeWindow);
                    fAdjustmentsStatText.UIMap.Scope = UIASeachScope.Children;
                    fAdjustmentsStatText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Adjustments");
                    fAdjustmentsStatText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fAdjustmentsStatText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1066");
                }

                return fAdjustmentsStatText;
            }
        }

        /// <summary>
        /// Gets Reference to SendButton1006Button
        /// </summary>
        public Button SendButton1006Button
        {
            get
            {
                if (null == fSendButton1006Button)
                {
                    fSendButton1006Button = new Button("SendButton1006Button", HPScanHPLaserJeWindow);
                    fSendButton1006Button.UIMap.Scope = UIASeachScope.Children;
                    fSendButton1006Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send");
                    fSendButton1006Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fSendButton1006Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1006");
                }

                return fSendButton1006Button;
            }
        }

        /// <summary>
        /// Gets Reference to ExitButton1007Button
        /// </summary>
        public Button ExitButton1007Button
        {
            get
            {
                if (null == fExitButton1007Button)
                {
                    fExitButton1007Button = new Button("ExitButton1007Button", HPScanHPLaserJeWindow);
                    fExitButton1007Button.UIMap.Scope = UIASeachScope.Children;
                    fExitButton1007Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Exit");
                    fExitButton1007Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fExitButton1007Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1007");
                }

                return fExitButton1007Button;
            }
        }

        /// <summary>
        /// Gets Reference to BackButton1005Button
        /// </summary>
        public Button BackButton1005Button
        {
            get
            {
                if (null == fBackButton1005Button)
                {
                    fBackButton1005Button = new Button("BackButton1005Button", HPScanHPLaserJeWindow);
                    fBackButton1005Button.UIMap.Scope = UIASeachScope.Children;
                    fBackButton1005Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Back");
                    fBackButton1005Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fBackButton1005Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1005");
                }

                return fBackButton1005Button;
            }
        }

        /// <summary>
        /// Gets Reference to Button1000Button
        /// </summary>
        public Button Button1000Button
        {
            get
            {
                if (null == fButton1000Button)
                {
                    fButton1000Button = new Button("Button1000Button", HPScanHPLaserJeWindow);
                    fButton1000Button.UIMap.Scope = UIASeachScope.Children;
                    fButton1000Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButton1000Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1000");
                }

                return fButton1000Button;
            }
        }

        /// <summary>
        /// Gets Reference to Button210Button
        /// </summary>
        public Button Button210Button
        {
            get
            {
                if (null == fButton210Button)
                {
                    fButton210Button = new Button("Button210Button", HPScanHPLaserJeWindow);
                    fButton210Button.UIMap.Scope = UIASeachScope.Children;
                    fButton210Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButton210Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"210");
                }

                return fButton210Button;
            }
        }

        /// <summary>
        /// Gets Reference to Button1023Button
        /// </summary>
        public Button Button1023Button
        {
            get
            {
                if (null == fButton1023Button)
                {
                    fButton1023Button = new Button("Button1023Button", HPScanHPLaserJeWindow);
                    fButton1023Button.UIMap.Scope = UIASeachScope.Children;
                    fButton1023Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButton1023Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1023");
                }

                return fButton1023Button;
            }
        }

        /// <summary>
        /// Gets Reference to A32770Dup1I0XPane
        /// </summary>
        public Pane A32770Dup1I0XPane
        {
            get
            {
                if (null == fA32770Dup1I0XPane)
                {
                    fA32770Dup1I0XPane = new Pane("A32770Dup1I0XPane", HPScanHPLaserJeWindow);
                    fA32770Dup1I0XPane.UIMap.Scope = UIASeachScope.Children;
                    fA32770Dup1I0XPane.UIMap.Index = 0;
                    fA32770Dup1I0XPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"#32770");
                }

                return fA32770Dup1I0XPane;
            }
        }

        /// <summary>
        /// Gets Reference to A32770Dup2I1XPane
        /// </summary>
        public Pane A32770Dup2I1XPane
        {
            get
            {
                if (null == fA32770Dup2I1XPane)
                {
                    fA32770Dup2I1XPane = new Pane("A32770Dup2I1XPane", HPScanHPLaserJeWindow);
                    fA32770Dup2I1XPane.UIMap.Scope = UIASeachScope.Children;
                    fA32770Dup2I1XPane.UIMap.Index = 1;
                    fA32770Dup2I1XPane.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"#32770");
                }

                return fA32770Dup2I1XPane;
            }
        }

        /// <summary>
        /// Gets Reference to Button1079Button
        /// </summary>
        public Button Button1079Button
        {
            get
            {
                if (null == fButton1079Button)
                {
                    fButton1079Button = new Button("Button1079Button", A32770Dup2I1XPane);
                    fButton1079Button.UIMap.Scope = UIASeachScope.Children;
                    fButton1079Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButton1079Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1079");
                }

                return fButton1079Button;
            }
        }

        /// <summary>
        /// Gets Reference to Button1110Button
        /// </summary>
        public Button Button1110Button
        {
            get
            {
                if (null == fButton1110Button)
                {
                    fButton1110Button = new Button("Button1110Button", A32770Dup2I1XPane);
                    fButton1110Button.UIMap.Scope = UIASeachScope.Children;
                    fButton1110Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButton1110Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1110");
                }

                return fButton1110Button;
            }
        }

        /// <summary>
        /// Gets Reference to AutoExposureButButton
        /// </summary>
        public Button AutoExposureButButton
        {
            get
            {
                if (null == fAutoExposureButButton)
                {
                    fAutoExposureButButton = new Button("AutoExposureButButton", A32770Dup2I1XPane);
                    fAutoExposureButButton.UIMap.Scope = UIASeachScope.Children;
                    fAutoExposureButButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Auto Exposure");
                    fAutoExposureButButton.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fAutoExposureButButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1039");
                }

                return fAutoExposureButButton;
            }
        }

        /// <summary>
        /// Gets Reference to msctlstrackbarDup0Slider
        /// </summary>
        public Slider msctlstrackbarDup0Slider
        {
            get
            {
                if (null == fmsctlstrackbarDup0Slider)
                {
                    fmsctlstrackbarDup0Slider = new Slider("msctlstrackbarDup0Slider", A32770Dup2I1XPane);
                    fmsctlstrackbarDup0Slider.UIMap.Scope = UIASeachScope.Children;
                    fmsctlstrackbarDup0Slider.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"msctls_trackbar32");
                    fmsctlstrackbarDup0Slider.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1042");
                }

                return fmsctlstrackbarDup0Slider;
            }
        }

        /// <summary>
        /// Gets Reference to BackbylargeamouDup0Button
        /// </summary>
        public Button BackbylargeamouDup0Button
        {
            get
            {
                if (null == fBackbylargeamouDup0Button)
                {
                    fBackbylargeamouDup0Button = new Button("BackbylargeamouDup0Button", msctlstrackbarDup0Slider);
                    fBackbylargeamouDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fBackbylargeamouDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Back by large amount");
                    fBackbylargeamouDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"LargeDecrement");
                }

                return fBackbylargeamouDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to ThumbDup0Thumb
        /// </summary>
        public Thumb ThumbDup0Thumb
        {
            get
            {
                if (null == fThumbDup0Thumb)
                {
                    fThumbDup0Thumb = new Thumb("ThumbDup0Thumb", msctlstrackbarDup0Slider);
                    fThumbDup0Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbDup0Thumb.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Thumb");
                    fThumbDup0Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Thumb");
                }

                return fThumbDup0Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to ForwardbylargeaDup0Button
        /// </summary>
        public Button ForwardbylargeaDup0Button
        {
            get
            {
                if (null == fForwardbylargeaDup0Button)
                {
                    fForwardbylargeaDup0Button = new Button("ForwardbylargeaDup0Button", msctlstrackbarDup0Slider);
                    fForwardbylargeaDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fForwardbylargeaDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Forward by large amount");
                    fForwardbylargeaDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"LargeIncrement");
                }

                return fForwardbylargeaDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to A0Edit1043Edit
        /// </summary>
        public Edit A0Edit1043Edit
        {
            get
            {
                if (null == fA0Edit1043Edit)
                {
                    fA0Edit1043Edit = new Edit("A0Edit1043Edit", A32770Dup2I1XPane);
                    fA0Edit1043Edit.UIMap.Scope = UIASeachScope.Children;
                    fA0Edit1043Edit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"0");
                    fA0Edit1043Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Edit");
                    fA0Edit1043Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1043");
                }

                return fA0Edit1043Edit;
            }
        }

        /// <summary>
        /// Gets Reference to SpinmsctlsupdoDup0Spinner
        /// </summary>
        public Spinner SpinmsctlsupdoDup0Spinner
        {
            get
            {
                if (null == fSpinmsctlsupdoDup0Spinner)
                {
                    fSpinmsctlsupdoDup0Spinner = new Spinner("SpinmsctlsupdoDup0Spinner", A32770Dup2I1XPane);
                    fSpinmsctlsupdoDup0Spinner.UIMap.Scope = UIASeachScope.Children;
                    fSpinmsctlsupdoDup0Spinner.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Spin");
                    fSpinmsctlsupdoDup0Spinner.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"msctls_updown32");
                    fSpinmsctlsupdoDup0Spinner.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1044");
                }

                return fSpinmsctlsupdoDup0Spinner;
            }
        }

        /// <summary>
        /// Gets Reference to ForwardSmallIncDup0Button
        /// </summary>
        public Button ForwardSmallIncDup0Button
        {
            get
            {
                if (null == fForwardSmallIncDup0Button)
                {
                    fForwardSmallIncDup0Button = new Button("ForwardSmallIncDup0Button", SpinmsctlsupdoDup0Spinner);
                    fForwardSmallIncDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fForwardSmallIncDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Forward");
                    fForwardSmallIncDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SmallIncrement");
                }

                return fForwardSmallIncDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to BackwardSmallDeDup0Button
        /// </summary>
        public Button BackwardSmallDeDup0Button
        {
            get
            {
                if (null == fBackwardSmallDeDup0Button)
                {
                    fBackwardSmallDeDup0Button = new Button("BackwardSmallDeDup0Button", SpinmsctlsupdoDup0Spinner);
                    fBackwardSmallDeDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fBackwardSmallDeDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Backward");
                    fBackwardSmallDeDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SmallDecrement");
                }

                return fBackwardSmallDeDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to msctlstrackbarDup1Slider
        /// </summary>
        public Slider msctlstrackbarDup1Slider
        {
            get
            {
                if (null == fmsctlstrackbarDup1Slider)
                {
                    fmsctlstrackbarDup1Slider = new Slider("msctlstrackbarDup1Slider", A32770Dup2I1XPane);
                    fmsctlstrackbarDup1Slider.UIMap.Scope = UIASeachScope.Children;
                    fmsctlstrackbarDup1Slider.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"msctls_trackbar32");
                    fmsctlstrackbarDup1Slider.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1045");
                }

                return fmsctlstrackbarDup1Slider;
            }
        }

        /// <summary>
        /// Gets Reference to BackbylargeamouDup1Button
        /// </summary>
        public Button BackbylargeamouDup1Button
        {
            get
            {
                if (null == fBackbylargeamouDup1Button)
                {
                    fBackbylargeamouDup1Button = new Button("BackbylargeamouDup1Button", msctlstrackbarDup1Slider);
                    fBackbylargeamouDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fBackbylargeamouDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Back by large amount");
                    fBackbylargeamouDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"LargeDecrement");
                }

                return fBackbylargeamouDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to ThumbDup1Thumb
        /// </summary>
        public Thumb ThumbDup1Thumb
        {
            get
            {
                if (null == fThumbDup1Thumb)
                {
                    fThumbDup1Thumb = new Thumb("ThumbDup1Thumb", msctlstrackbarDup1Slider);
                    fThumbDup1Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbDup1Thumb.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Thumb");
                    fThumbDup1Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Thumb");
                }

                return fThumbDup1Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to ForwardbylargeaDup1Button
        /// </summary>
        public Button ForwardbylargeaDup1Button
        {
            get
            {
                if (null == fForwardbylargeaDup1Button)
                {
                    fForwardbylargeaDup1Button = new Button("ForwardbylargeaDup1Button", msctlstrackbarDup1Slider);
                    fForwardbylargeaDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fForwardbylargeaDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Forward by large amount");
                    fForwardbylargeaDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"LargeIncrement");
                }

                return fForwardbylargeaDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to A0Edit1046Edit
        /// </summary>
        public Edit A0Edit1046Edit
        {
            get
            {
                if (null == fA0Edit1046Edit)
                {
                    fA0Edit1046Edit = new Edit("A0Edit1046Edit", A32770Dup2I1XPane);
                    fA0Edit1046Edit.UIMap.Scope = UIASeachScope.Children;
                    fA0Edit1046Edit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"0");
                    fA0Edit1046Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Edit");
                    fA0Edit1046Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1046");
                }

                return fA0Edit1046Edit;
            }
        }

        /// <summary>
        /// Gets Reference to SpinmsctlsupdoDup1Spinner
        /// </summary>
        public Spinner SpinmsctlsupdoDup1Spinner
        {
            get
            {
                if (null == fSpinmsctlsupdoDup1Spinner)
                {
                    fSpinmsctlsupdoDup1Spinner = new Spinner("SpinmsctlsupdoDup1Spinner", A32770Dup2I1XPane);
                    fSpinmsctlsupdoDup1Spinner.UIMap.Scope = UIASeachScope.Children;
                    fSpinmsctlsupdoDup1Spinner.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Spin");
                    fSpinmsctlsupdoDup1Spinner.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"msctls_updown32");
                    fSpinmsctlsupdoDup1Spinner.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1047");
                }

                return fSpinmsctlsupdoDup1Spinner;
            }
        }

        /// <summary>
        /// Gets Reference to ForwardSmallIncDup1Button
        /// </summary>
        public Button ForwardSmallIncDup1Button
        {
            get
            {
                if (null == fForwardSmallIncDup1Button)
                {
                    fForwardSmallIncDup1Button = new Button("ForwardSmallIncDup1Button", SpinmsctlsupdoDup1Spinner);
                    fForwardSmallIncDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fForwardSmallIncDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Forward");
                    fForwardSmallIncDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SmallIncrement");
                }

                return fForwardSmallIncDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to BackwardSmallDeDup1Button
        /// </summary>
        public Button BackwardSmallDeDup1Button
        {
            get
            {
                if (null == fBackwardSmallDeDup1Button)
                {
                    fBackwardSmallDeDup1Button = new Button("BackwardSmallDeDup1Button", SpinmsctlsupdoDup1Spinner);
                    fBackwardSmallDeDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fBackwardSmallDeDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Backward");
                    fBackwardSmallDeDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SmallDecrement");
                }

                return fBackwardSmallDeDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to msctlstrackbarDup2Slider
        /// </summary>
        public Slider msctlstrackbarDup2Slider
        {
            get
            {
                if (null == fmsctlstrackbarDup2Slider)
                {
                    fmsctlstrackbarDup2Slider = new Slider("msctlstrackbarDup2Slider", A32770Dup2I1XPane);
                    fmsctlstrackbarDup2Slider.UIMap.Scope = UIASeachScope.Children;
                    fmsctlstrackbarDup2Slider.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"msctls_trackbar32");
                    fmsctlstrackbarDup2Slider.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1048");
                }

                return fmsctlstrackbarDup2Slider;
            }
        }

        /// <summary>
        /// Gets Reference to BackbylargeamouDup2Button
        /// </summary>
        public Button BackbylargeamouDup2Button
        {
            get
            {
                if (null == fBackbylargeamouDup2Button)
                {
                    fBackbylargeamouDup2Button = new Button("BackbylargeamouDup2Button", msctlstrackbarDup2Slider);
                    fBackbylargeamouDup2Button.UIMap.Scope = UIASeachScope.Children;
                    fBackbylargeamouDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Back by large amount");
                    fBackbylargeamouDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"LargeDecrement");
                }

                return fBackbylargeamouDup2Button;
            }
        }

        /// <summary>
        /// Gets Reference to ThumbDup2Thumb
        /// </summary>
        public Thumb ThumbDup2Thumb
        {
            get
            {
                if (null == fThumbDup2Thumb)
                {
                    fThumbDup2Thumb = new Thumb("ThumbDup2Thumb", msctlstrackbarDup2Slider);
                    fThumbDup2Thumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbDup2Thumb.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Thumb");
                    fThumbDup2Thumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Thumb");
                }

                return fThumbDup2Thumb;
            }
        }

        /// <summary>
        /// Gets Reference to ForwardbylargeaDup2Button
        /// </summary>
        public Button ForwardbylargeaDup2Button
        {
            get
            {
                if (null == fForwardbylargeaDup2Button)
                {
                    fForwardbylargeaDup2Button = new Button("ForwardbylargeaDup2Button", msctlstrackbarDup2Slider);
                    fForwardbylargeaDup2Button.UIMap.Scope = UIASeachScope.Children;
                    fForwardbylargeaDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Forward by large amount");
                    fForwardbylargeaDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"LargeIncrement");
                }

                return fForwardbylargeaDup2Button;
            }
        }

        /// <summary>
        /// Gets Reference to A0Edit1049Edit
        /// </summary>
        public Edit A0Edit1049Edit
        {
            get
            {
                if (null == fA0Edit1049Edit)
                {
                    fA0Edit1049Edit = new Edit("A0Edit1049Edit", A32770Dup2I1XPane);
                    fA0Edit1049Edit.UIMap.Scope = UIASeachScope.Children;
                    fA0Edit1049Edit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"0");
                    fA0Edit1049Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Edit");
                    fA0Edit1049Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1049");
                }

                return fA0Edit1049Edit;
            }
        }

        /// <summary>
        /// Gets Reference to SpinmsctlsupdoDup2Spinner
        /// </summary>
        public Spinner SpinmsctlsupdoDup2Spinner
        {
            get
            {
                if (null == fSpinmsctlsupdoDup2Spinner)
                {
                    fSpinmsctlsupdoDup2Spinner = new Spinner("SpinmsctlsupdoDup2Spinner", A32770Dup2I1XPane);
                    fSpinmsctlsupdoDup2Spinner.UIMap.Scope = UIASeachScope.Children;
                    fSpinmsctlsupdoDup2Spinner.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Spin");
                    fSpinmsctlsupdoDup2Spinner.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"msctls_updown32");
                    fSpinmsctlsupdoDup2Spinner.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1050");
                }

                return fSpinmsctlsupdoDup2Spinner;
            }
        }

        /// <summary>
        /// Gets Reference to ForwardSmallIncDup2Button
        /// </summary>
        public Button ForwardSmallIncDup2Button
        {
            get
            {
                if (null == fForwardSmallIncDup2Button)
                {
                    fForwardSmallIncDup2Button = new Button("ForwardSmallIncDup2Button", SpinmsctlsupdoDup2Spinner);
                    fForwardSmallIncDup2Button.UIMap.Scope = UIASeachScope.Children;
                    fForwardSmallIncDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Forward");
                    fForwardSmallIncDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SmallIncrement");
                }

                return fForwardSmallIncDup2Button;
            }
        }

        /// <summary>
        /// Gets Reference to BackwardSmallDeDup2Button
        /// </summary>
        public Button BackwardSmallDeDup2Button
        {
            get
            {
                if (null == fBackwardSmallDeDup2Button)
                {
                    fBackwardSmallDeDup2Button = new Button("BackwardSmallDeDup2Button", SpinmsctlsupdoDup2Spinner);
                    fBackwardSmallDeDup2Button.UIMap.Scope = UIASeachScope.Children;
                    fBackwardSmallDeDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Backward");
                    fBackwardSmallDeDup2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SmallDecrement");
                }

                return fBackwardSmallDeDup2Button;
            }
        }

        /// <summary>
        /// Gets Reference to PDFComboBox1077ComboBox
        /// </summary>
        public ComboBox PDFComboBox1077ComboBox
        {
            get
            {
                if (null == fPDFComboBox1077ComboBox)
                {
                    fPDFComboBox1077ComboBox = new ComboBox("PDFComboBox1077ComboBox", A32770Dup2I1XPane);
                    fPDFComboBox1077ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fPDFComboBox1077ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"PDF");
                    fPDFComboBox1077ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fPDFComboBox1077ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1077");
                }

                return fPDFComboBox1077ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to ComboLBoxListBoList
        /// </summary>
        public List ComboLBoxListBoList
        {
            get
            {
                if (null == fComboLBoxListBoList)
                {
                    fComboLBoxListBoList = new List("ComboLBoxListBoList", PDFComboBox1077ComboBox);
                    fComboLBoxListBoList.UIMap.Scope = UIASeachScope.Children;
                    fComboLBoxListBoList.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboLBox");
                    fComboLBoxListBoList.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ListBox");
                }

                return fComboLBoxListBoList;
            }
        }

        /// <summary>
        /// Gets Reference to PDFListItem
        /// </summary>
        public ListItem PDFListItem
        {
            get
            {
                if (null == fPDFListItem)
                {
                    fPDFListItem = new ListItem("PDFListItem", ComboLBoxListBoList);
                    fPDFListItem.UIMap.Scope = UIASeachScope.Children;
                    fPDFListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"PDF");
                }

                return fPDFListItem;
            }
        }

        /// <summary>
        /// Gets Reference to DropDownButtonDDup0Button
        /// </summary>
        public Button DropDownButtonDDup0Button
        {
            get
            {
                if (null == fDropDownButtonDDup0Button)
                {
                    fDropDownButtonDDup0Button = new Button("DropDownButtonDDup0Button", PDFComboBox1077ComboBox);
                    fDropDownButtonDDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fDropDownButtonDDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Drop Down Button");
                    fDropDownButtonDDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"DropDown");
                }

                return fDropDownButtonDDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to FileTypeStaticText
        /// </summary>
        public Text FileTypeStaticText
        {
            get
            {
                if (null == fFileTypeStaticText)
                {
                    fFileTypeStaticText = new Text("FileTypeStaticText", A32770Dup2I1XPane);
                    fFileTypeStaticText.UIMap.Scope = UIASeachScope.Children;
                    fFileTypeStaticText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"File Type");
                    fFileTypeStaticText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                }

                return fFileTypeStaticText;
            }
        }

        /// <summary>
        /// Gets Reference to FileTypeComboBoComboBox
        /// </summary>
        public ComboBox FileTypeComboBoComboBox
        {
            get
            {
                if (null == fFileTypeComboBoComboBox)
                {
                    fFileTypeComboBoComboBox = new ComboBox("FileTypeComboBoComboBox", A32770Dup2I1XPane);
                    fFileTypeComboBoComboBox.UIMap.Scope = UIASeachScope.Children;
                    fFileTypeComboBoComboBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"File Type");
                    fFileTypeComboBoComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                    fFileTypeComboBoComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1118");
                }

                return fFileTypeComboBoComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to FileTypeComboLBList
        /// </summary>
        public List FileTypeComboLBList
        {
            get
            {
                if (null == fFileTypeComboLBList)
                {
                    fFileTypeComboLBList = new List("FileTypeComboLBList", FileTypeComboBoComboBox);
                    fFileTypeComboLBList.UIMap.Scope = UIASeachScope.Children;
                    fFileTypeComboLBList.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"File Type");
                    fFileTypeComboLBList.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboLBox");
                    fFileTypeComboLBList.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ListBox");
                }

                return fFileTypeComboLBList;
            }
        }

        /// <summary>
        /// Gets Reference to EmailListItem
        /// </summary>
        public ListItem EmailListItem
        {
            get
            {
                if (null == fEmailListItem)
                {
                    fEmailListItem = new ListItem("EmailListItem", FileTypeComboLBList);
                    fEmailListItem.UIMap.Scope = UIASeachScope.Children;
                    fEmailListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Email");
                }

                return fEmailListItem;
            }
        }

        /// <summary>
        /// Gets Reference to DropDownButtonDDup1Button
        /// </summary>
        public Button DropDownButtonDDup1Button
        {
            get
            {
                if (null == fDropDownButtonDDup1Button)
                {
                    fDropDownButtonDDup1Button = new Button("DropDownButtonDDup1Button", FileTypeComboBoComboBox);
                    fDropDownButtonDDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fDropDownButtonDDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Drop Down Button");
                    fDropDownButtonDDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"DropDown");
                }

                return fDropDownButtonDDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to SendToStaticText
        /// </summary>
        public Text SendToStaticText
        {
            get
            {
                if (null == fSendToStaticText)
                {
                    fSendToStaticText = new Text("SendToStaticText", A32770Dup2I1XPane);
                    fSendToStaticText.UIMap.Scope = UIASeachScope.Children;
                    fSendToStaticText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Send To");
                    fSendToStaticText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                }

                return fSendToStaticText;
            }
        }

        /// <summary>
        /// Gets Reference to Button2132Button
        /// </summary>
        public Button Button2132Button
        {
            get
            {
                if (null == fButton2132Button)
                {
                    fButton2132Button = new Button("Button2132Button", HPScanHPLaserJeWindow);
                    fButton2132Button.UIMap.Scope = UIASeachScope.Children;
                    fButton2132Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButton2132Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2132");
                }

                return fButton2132Button;
            }
        }

        /// <summary>
        /// Gets Reference to Button1165Button
        /// </summary>
        public Button Button1165Button
        {
            get
            {
                if (null == fButton1165Button)
                {
                    fButton1165Button = new Button("Button1165Button", HPScanHPLaserJeWindow);
                    fButton1165Button.UIMap.Scope = UIASeachScope.Children;
                    fButton1165Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButton1165Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1165");
                }

                return fButton1165Button;
            }
        }

        /// <summary>
        /// Gets Reference to Button288Button
        /// </summary>
        public Button Button288Button
        {
            get
            {
                if (null == fButton288Button)
                {
                    fButton288Button = new Button("Button288Button", HPScanHPLaserJeWindow);
                    fButton288Button.UIMap.Scope = UIASeachScope.Children;
                    fButton288Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fButton288Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"288");
                }

                return fButton288Button;
            }
        }
    }
}

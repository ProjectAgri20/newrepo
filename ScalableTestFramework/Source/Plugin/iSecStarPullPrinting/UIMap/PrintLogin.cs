//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     J2: Template .\Templates
//         using modules ['Xml2CS']
// </auto-generated>
//------------------------------------------------------------------------------

namespace HP.ScalableTest.Plugin.iSecStarPullPrinting.UIMaps
{
    using TopCat.TestApi.GUIAutomation.Controls;
    using TopCat.TestApi.GUIAutomation.Enums;

    /// <summary>
    /// Application which exercises the TopCat Coded C# test API.
    /// </summary>
    public class PrintLogin
    {
        /// <summary>
        /// Backing field for PrintLogin32770Window property
        /// </summary>
        private Window fPrintLogin32770Window;

        // <summary>
        /// Backing field for Message32770Window property
        /// </summary>
        private Window fMessage32770Window;

        /// <summary>
        /// Backing field for OKButton2Button property
        /// </summary>
        private Button fOKButton2Button;

        /// <summary>
        /// Backing field for Static20Image property
        /// </summary>
        private Image fStatic20Image;

        /// <summary>
        /// Backing field for PleaseenteryourText property
        /// </summary>
        private Text fPleaseenteryourText;

        /// <summary>
        /// Backing field for TheuserdoesnoteText property
        /// </summary>
        private Text fTheuserdoesnoteText;

        /// <summary>
        /// Backing field for UsernameorpasswText property
        /// </summary>
        private Text fUsernameorpasswText;

        /// <summary>
        /// Backing field for MessageTitleBar property
        /// </summary>
        private TitleBar fMessageTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyDup0MenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyDup0MenuBar;

        /// <summary>
        /// Backing field for SystemItem1Dup0MenuItem property
        /// </summary>
        private MenuItem fSystemItem1Dup0MenuItem;

        /// <summary>
        /// Backing field for CloseCloseDup0Button property
        /// </summary>
        private Button fCloseCloseDup0Button;

        /// <summary>
        /// Backing field for Edit1000Edit property
        /// </summary>
        private Edit fEdit1000Edit;

        /// <summary>
        /// Backing field for Edit1001Edit property
        /// </summary>
        private Edit fEdit1001Edit;

        /// <summary>
        /// Backing field for SubmitButton1Button property
        /// </summary>
        private Button fSubmitButton1Button;

        /// <summary>
        /// Backing field for CloseButton2Button property
        /// </summary>
        private Button fCloseButton2Button;

        /// <summary>
        /// Backing field for MoreButton1009Button property
        /// </summary>
        private Button fMoreButton1009Button;

        /// <summary>
        /// Backing field for NoneComboBox100ComboBox property
        /// </summary>
        private ComboBox fNoneComboBox100ComboBox;

        /// <summary>
        /// Backing field for ComboLBoxListBoDup0List property
        /// </summary>
        private List fComboLBoxListBoDup0List;

        /// <summary>
        /// Backing field for NoneListItem property
        /// </summary>
        private ListItem fNoneListItem;

        /// <summary>
        /// Backing field for DropDownButtonDDup0Button property
        /// </summary>
        private Button fDropDownButtonDDup0Button;

        /// <summary>
        /// Backing field for UserNameStaticText property
        /// </summary>
        private Text fUserNameStaticText;

        /// <summary>
        /// Backing field for PasswordStaticText property
        /// </summary>
        private Text fPasswordStaticText;

        /// <summary>
        /// Backing field for PasswordStaticImage property
        /// </summary>
        private Image fPasswordStaticImage;

        /// <summary>
        /// Backing field for ChoosePrintProjText property
        /// </summary>
        private Text fChoosePrintProjText;

        /// <summary>
        /// Backing field for DocmentinformatGroup property
        /// </summary>
        private Group fDocmentinformatGroup;

        /// <summary>
        /// Backing field for SubmitalldocmenCheckBox property
        /// </summary>
        private CheckBox fSubmitalldocmenCheckBox;

        /// <summary>
        /// Backing field for UntitledNotepadEdit property
        /// </summary>
        private Edit fUntitledNotepadEdit;

        /// <summary>
        /// Backing field for TheDocmentNameSText property
        /// </summary>
        private Text fTheDocmentNameSText;

        /// <summary>
        /// Backing field for TheDocmentNameSDataGrid property
        /// </summary>
        private DataGrid fTheDocmentNameSDataGrid;

        /// <summary>
        /// Backing field for HeaderSysHeaderHeader property
        /// </summary>
        private Header fHeaderSysHeaderHeader;

        /// <summary>
        /// Backing field for DocumentNameHeaHeaderItem property
        /// </summary>
        private HeaderItem fDocumentNameHeaHeaderItem;

        /// <summary>
        /// Backing field for SubmittimeHeadeHeaderItem property
        /// </summary>
        private HeaderItem fSubmittimeHeadeHeaderItem;

        /// <summary>
        /// Backing field for TypeHeaderItem2HeaderItem property
        /// </summary>
        private HeaderItem fTypeHeaderItem2HeaderItem;

        /// <summary>
        /// Backing field for NumberHeaderIteHeaderItem property
        /// </summary>
        private HeaderItem fNumberHeaderIteHeaderItem;

        /// <summary>
        /// Backing field for ColourHeaderIteHeaderItem property
        /// </summary>
        private HeaderItem fColourHeaderIteHeaderItem;

        /// <summary>
        /// Backing field for SizeHeaderItem5HeaderItem property
        /// </summary>
        private HeaderItem fSizeHeaderItem5HeaderItem;

        /// <summary>
        /// Backing field for StatusHeaderIteHeaderItem property
        /// </summary>
        private HeaderItem fStatusHeaderIteHeaderItem;

        /// <summary>
        /// Backing field for HorizontalScrolScrollBar property
        /// </summary>
        private ScrollBar fHorizontalScrolScrollBar;

        /// <summary>
        /// Backing field for BackbysmallamouButton property
        /// </summary>
        private Button fBackbysmallamouButton;

        /// <summary>
        /// Backing field for BackbylargeamouButton property
        /// </summary>
        private Button fBackbylargeamouButton;

        /// <summary>
        /// Backing field for ThumbThumb property
        /// </summary>
        private Thumb fThumbThumb;

        /// <summary>
        /// Backing field for ForwardbylargeaButton property
        /// </summary>
        private Button fForwardbylargeaButton;

        /// <summary>
        /// Backing field for ForwardbysmallaButton property
        /// </summary>
        private Button fForwardbysmallaButton;

        /// <summary>
        /// Backing field for UntitledNotepadDataItem property
        /// </summary>
        private DataItem fUntitledNotepadDataItem;

        /// <summary>
        /// Backing field for UntitledNotepadText property
        /// </summary>
        private Text fUntitledNotepadText;

        /// <summary>
        /// Backing field for A20180820121922Text property
        /// </summary>
        private Text fA20180820121922Text;

        /// <summary>
        /// Backing field for A4Text property
        /// </summary>
        private Text fA4Text;

        /// <summary>
        /// Backing field for A1Dup0I0XText property
        /// </summary>
        private Text fA1Dup0I0XText;

        /// <summary>
        /// Backing field for A1Dup1I1XText property
        /// </summary>
        private Text fA1Dup1I1XText;

        /// <summary>
        /// Backing field for A4949Text property
        /// </summary>
        private Text fA4949Text;

        /// <summary>
        /// Backing field for AText property
        /// </summary>
        private Text fAText;

        /// <summary>
        /// Backing field for TheDocmentNameEEdit property
        /// </summary>
        private Edit fTheDocmentNameEEdit;

        /// <summary>
        /// Backing field for DocmentnumberStText property
        /// </summary>
        private Text fDocmentnumberStText;

        /// <summary>
        /// Backing field for SaveasdefaultBuCheckBox property
        /// </summary>
        private CheckBox fSaveasdefaultBuCheckBox;

        /// <summary>
        /// Backing field for DocmentnumberCoComboBox property
        /// </summary>
        private ComboBox fDocmentnumberCoComboBox;

        /// <summary>
        /// Backing field for ComboLBoxListBoDup1List property
        /// </summary>
        private List fComboLBoxListBoDup1List;

        /// <summary>
        /// Backing field for SystemAccountListItem property
        /// </summary>
        private ListItem fSystemAccountListItem;

        /// <summary>
        /// Backing field for DropDownButtonDDup1Button property
        /// </summary>
        private Button fDropDownButtonDDup1Button;

        /// <summary>
        /// Backing field for AccountTypeStatText property
        /// </summary>
        private Text fAccountTypeStatText;

        /// <summary>
        /// Backing field for DirectPrintButtCheckBox property
        /// </summary>
        private CheckBox fDirectPrintButtCheckBox;

        /// <summary>
        /// Backing field for PrintLoginTitleBar property
        /// </summary>
        private TitleBar fPrintLoginTitleBar;

        /// <summary>
        /// Backing field for SystemMenuBarSyMenuBar property
        /// </summary>
        private MenuBar fSystemMenuBarSyMenuBar;

        /// <summary>
        /// Backing field for SystemItem1MenuItem property
        /// </summary>
        private MenuItem fSystemItem1MenuItem;

        /// <summary>
        /// Backing field for CloseCloseButton property
        /// </summary>
        private Button fCloseCloseButton;

        /// <summary>
        /// Initializes a new instance of the <see cref="PrintLogin"/> class.
        /// </summary>
        /// <param name="framework">
        /// The framework.
        /// </param>
        public PrintLogin(UIAFramework framework)
        {
            Desktop = new Desktop(framework);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PrintLogin"/> class using the default UIAFramework.
        /// </summary>
        public PrintLogin()
        {
            Desktop = new Desktop();
        }

        /// <summary>
        /// Gets Reference to desktop
        /// </summary>
        public Desktop Desktop { get; private set; }

        /// <summary>
        /// Gets Reference to PrintLogin32770Window
        /// </summary>
        public Window PrintLogin32770Window
        {
            get
            {
                if (null == fPrintLogin32770Window)
                {
                    fPrintLogin32770Window = new Window("PrintLogin32770Window", Desktop);
                    fPrintLogin32770Window.UIMap.Scope = UIASeachScope.Children;
                    fPrintLogin32770Window.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Print Login");
                    fPrintLogin32770Window.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"#32770");
                }

                return fPrintLogin32770Window;
            }
        }

        /// <summary>
        /// Gets Reference to Message32770Window
        /// </summary>
        public Window Message32770Window
        {
            get
            {
                if (null == fMessage32770Window)
                {
                    fMessage32770Window = new Window("Message32770Window", PrintLogin32770Window);
                    fMessage32770Window.UIMap.Scope = UIASeachScope.Children;
                    fMessage32770Window.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"#32770");
                    fMessage32770Window.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Message");
                }

                return fMessage32770Window;
            }
        }

        /// <summary>
        /// Gets Reference to OKButton2Button
        /// </summary>
        public Button OKButton2Button
        {
            get
            {
                if (null == fOKButton2Button)
                {
                    fOKButton2Button = new Button("OKButton2Button", Message32770Window);
                    fOKButton2Button.UIMap.Scope = UIASeachScope.Children;
                    fOKButton2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2");
                    fOKButton2Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                    fOKButton2Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"OK");
                }

                return fOKButton2Button;
            }
        }

        /// <summary>
        /// Gets Reference to Static20Image
        /// </summary>
        public Image Static20Image
        {
            get
            {
                if (null == fStatic20Image)
                {
                    fStatic20Image = new Image("Static20Image", Message32770Window);
                    fStatic20Image.UIMap.Scope = UIASeachScope.Children;
                    fStatic20Image.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"20");
                    fStatic20Image.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                }

                return fStatic20Image;
            }
        }

        /// <summary>
        /// Gets Reference to PleaseenteryourText
        /// </summary>
        public Text PleaseenteryourText
        {
            get
            {
                if (null == fPleaseenteryourText)
                {
                    fPleaseenteryourText = new Text("PleaseenteryourText", Message32770Window);
                    fPleaseenteryourText.UIMap.Scope = UIASeachScope.Children;
                    fPleaseenteryourText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"65535");
                    fPleaseenteryourText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fPleaseenteryourText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Please enter your user name!");
                }

                return fPleaseenteryourText;
            }
        }

        /// <summary>
        /// Gets Reference to TheuserdoesnoteText
        /// </summary>
        public Text TheuserdoesnoteText
        {
            get
            {
                if (null == fTheuserdoesnoteText)
                {
                    fTheuserdoesnoteText = new Text("TheuserdoesnoteText", Message32770Window);
                    fTheuserdoesnoteText.UIMap.Scope = UIASeachScope.Children;
                    fTheuserdoesnoteText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"65535");
                    fTheuserdoesnoteText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fTheuserdoesnoteText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"The user does not exist!");
                }

                return fTheuserdoesnoteText;
            }
        }

        /// <summary>
        /// Gets Reference to UsernameorpasswText
        /// </summary>
        public Text UsernameorpasswText
        {
            get
            {
                if (null == fUsernameorpasswText)
                {
                    fUsernameorpasswText = new Text("UsernameorpasswText", Message32770Window);
                    fUsernameorpasswText.UIMap.Scope = UIASeachScope.Children;
                    fUsernameorpasswText.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"65535");
                    fUsernameorpasswText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                    fUsernameorpasswText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"User name or password error!");
                }

                return fUsernameorpasswText;
            }
        }

        /// <summary>
        /// Gets Reference to MessageTitleBar
        /// </summary>
        public TitleBar MessageTitleBar
        {
            get
            {
                if (null == fMessageTitleBar)
                {
                    fMessageTitleBar = new TitleBar("MessageTitleBar", Message32770Window);
                    fMessageTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fMessageTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                    fMessageTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Message");
                }

                return fMessageTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemMenuBarSyDup0MenuBar
        /// </summary>
        public MenuBar SystemMenuBarSyDup0MenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyDup0MenuBar)
                {
                    fSystemMenuBarSyDup0MenuBar = new MenuBar("SystemMenuBarSyDup0MenuBar", MessageTitleBar);
                    fSystemMenuBarSyDup0MenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                    fSystemMenuBarSyDup0MenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                }

                return fSystemMenuBarSyDup0MenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemItem1Dup0MenuItem
        /// </summary>
        public MenuItem SystemItem1Dup0MenuItem
        {
            get
            {
                if (null == fSystemItem1Dup0MenuItem)
                {
                    fSystemItem1Dup0MenuItem = new MenuItem("SystemItem1Dup0MenuItem", SystemMenuBarSyDup0MenuBar);
                    fSystemItem1Dup0MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1Dup0MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                    fSystemItem1Dup0MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                }

                return fSystemItem1Dup0MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to CloseCloseDup0Button
        /// </summary>
        public Button CloseCloseDup0Button
        {
            get
            {
                if (null == fCloseCloseDup0Button)
                {
                    fCloseCloseDup0Button = new Button("CloseCloseDup0Button", MessageTitleBar);
                    fCloseCloseDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                    fCloseCloseDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                }

                return fCloseCloseDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to Edit1000Edit
        /// </summary>
        public Edit Edit1000Edit
        {
            get
            {
                if (null == fEdit1000Edit)
                {
                    fEdit1000Edit = new Edit("Edit1000Edit", PrintLogin32770Window);
                    fEdit1000Edit.UIMap.Scope = UIASeachScope.Children;
                    fEdit1000Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1000");
                    fEdit1000Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Edit");
                }

                return fEdit1000Edit;
            }
        }

        /// <summary>
        /// Gets Reference to Edit1001Edit
        /// </summary>
        public Edit Edit1001Edit
        {
            get
            {
                if (null == fEdit1001Edit)
                {
                    fEdit1001Edit = new Edit("Edit1001Edit", PrintLogin32770Window);
                    fEdit1001Edit.UIMap.Scope = UIASeachScope.Children;
                    fEdit1001Edit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1001");
                    fEdit1001Edit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Edit");
                }

                return fEdit1001Edit;
            }
        }

        /// <summary>
        /// Gets Reference to SubmitButton1Button
        /// </summary>
        public Button SubmitButton1Button
        {
            get
            {
                if (null == fSubmitButton1Button)
                {
                    fSubmitButton1Button = new Button("SubmitButton1Button", PrintLogin32770Window);
                    fSubmitButton1Button.UIMap.Scope = UIASeachScope.Children;
                    fSubmitButton1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1");
                    fSubmitButton1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Submit");
                    fSubmitButton1Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fSubmitButton1Button;
            }
        }

        /// <summary>
        /// Gets Reference to CloseButton2Button
        /// </summary>
        public Button CloseButton2Button
        {
            get
            {
                if (null == fCloseButton2Button)
                {
                    fCloseButton2Button = new Button("CloseButton2Button", PrintLogin32770Window);
                    fCloseButton2Button.UIMap.Scope = UIASeachScope.Children;
                    fCloseButton2Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"2");
                    fCloseButton2Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                    fCloseButton2Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fCloseButton2Button;
            }
        }

        /// <summary>
        /// Gets Reference to MoreButton1009Button
        /// </summary>
        public Button MoreButton1009Button
        {
            get
            {
                if (null == fMoreButton1009Button)
                {
                    fMoreButton1009Button = new Button("MoreButton1009Button", PrintLogin32770Window);
                    fMoreButton1009Button.UIMap.Scope = UIASeachScope.Children;
                    fMoreButton1009Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1009");
                    fMoreButton1009Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"More >>");
                    fMoreButton1009Button.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fMoreButton1009Button;
            }
        }

        /// <summary>
        /// Gets Reference to NoneComboBox100ComboBox
        /// </summary>
        public ComboBox NoneComboBox100ComboBox
        {
            get
            {
                if (null == fNoneComboBox100ComboBox)
                {
                    fNoneComboBox100ComboBox = new ComboBox("NoneComboBox100ComboBox", PrintLogin32770Window);
                    fNoneComboBox100ComboBox.UIMap.Scope = UIASeachScope.Children;
                    fNoneComboBox100ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1005");
                    fNoneComboBox100ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"None");
                    fNoneComboBox100ComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                }

                return fNoneComboBox100ComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to ComboLBoxListBoDup0List
        /// </summary>
        public List ComboLBoxListBoDup0List
        {
            get
            {
                if (null == fComboLBoxListBoDup0List)
                {
                    fComboLBoxListBoDup0List = new List("ComboLBoxListBoDup0List", NoneComboBox100ComboBox);
                    fComboLBoxListBoDup0List.UIMap.Scope = UIASeachScope.Children;
                    fComboLBoxListBoDup0List.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ListBox");
                    fComboLBoxListBoDup0List.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboLBox");
                }

                return fComboLBoxListBoDup0List;
            }
        }

        /// <summary>
        /// Gets Reference to NoneListItem
        /// </summary>
        public ListItem NoneListItem
        {
            get
            {
                if (null == fNoneListItem)
                {
                    fNoneListItem = new ListItem("NoneListItem", ComboLBoxListBoDup0List);
                    fNoneListItem.UIMap.Scope = UIASeachScope.Children;
                    fNoneListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"None");
                }

                return fNoneListItem;
            }
        }

        /// <summary>
        /// Gets Reference to DropDownButtonDDup0Button
        /// </summary>
        public Button DropDownButtonDDup0Button
        {
            get
            {
                if (null == fDropDownButtonDDup0Button)
                {
                    fDropDownButtonDDup0Button = new Button("DropDownButtonDDup0Button", NoneComboBox100ComboBox);
                    fDropDownButtonDDup0Button.UIMap.Scope = UIASeachScope.Children;
                    fDropDownButtonDDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Drop Down Button");
                    fDropDownButtonDDup0Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"DropDown");
                }

                return fDropDownButtonDDup0Button;
            }
        }

        /// <summary>
        /// Gets Reference to UserNameStaticText
        /// </summary>
        public Text UserNameStaticText
        {
            get
            {
                if (null == fUserNameStaticText)
                {
                    fUserNameStaticText = new Text("UserNameStaticText", PrintLogin32770Window);
                    fUserNameStaticText.UIMap.Scope = UIASeachScope.Children;
                    fUserNameStaticText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"User Name:");
                    fUserNameStaticText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                }

                return fUserNameStaticText;
            }
        }

        /// <summary>
        /// Gets Reference to PasswordStaticText
        /// </summary>
        public Text PasswordStaticText
        {
            get
            {
                if (null == fPasswordStaticText)
                {
                    fPasswordStaticText = new Text("PasswordStaticText", PrintLogin32770Window);
                    fPasswordStaticText.UIMap.Scope = UIASeachScope.Children;
                    fPasswordStaticText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Password:");
                    fPasswordStaticText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                }

                return fPasswordStaticText;
            }
        }

        /// <summary>
        /// Gets Reference to PasswordStaticImage
        /// </summary>
        public Image PasswordStaticImage
        {
            get
            {
                if (null == fPasswordStaticImage)
                {
                    fPasswordStaticImage = new Image("PasswordStaticImage", PrintLogin32770Window);
                    fPasswordStaticImage.UIMap.Scope = UIASeachScope.Children;
                    fPasswordStaticImage.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Password:");
                    fPasswordStaticImage.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                }

                return fPasswordStaticImage;
            }
        }

        /// <summary>
        /// Gets Reference to ChoosePrintProjText
        /// </summary>
        public Text ChoosePrintProjText
        {
            get
            {
                if (null == fChoosePrintProjText)
                {
                    fChoosePrintProjText = new Text("ChoosePrintProjText", PrintLogin32770Window);
                    fChoosePrintProjText.UIMap.Scope = UIASeachScope.Children;
                    fChoosePrintProjText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Choose Print Project:");
                    fChoosePrintProjText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                }

                return fChoosePrintProjText;
            }
        }

        /// <summary>
        /// Gets Reference to DocmentinformatGroup
        /// </summary>
        public Group DocmentinformatGroup
        {
            get
            {
                if (null == fDocmentinformatGroup)
                {
                    fDocmentinformatGroup = new Group("DocmentinformatGroup", PrintLogin32770Window);
                    fDocmentinformatGroup.UIMap.Scope = UIASeachScope.Children;
                    fDocmentinformatGroup.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Docment information");
                    fDocmentinformatGroup.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fDocmentinformatGroup;
            }
        }

        /// <summary>
        /// Gets Reference to SubmitalldocmenCheckBox
        /// </summary>
        public CheckBox SubmitalldocmenCheckBox
        {
            get
            {
                if (null == fSubmitalldocmenCheckBox)
                {
                    fSubmitalldocmenCheckBox = new CheckBox("SubmitalldocmenCheckBox", PrintLogin32770Window);
                    fSubmitalldocmenCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fSubmitalldocmenCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1011");
                    fSubmitalldocmenCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Submit all docments in list");
                    fSubmitalldocmenCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fSubmitalldocmenCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to UntitledNotepadEdit
        /// </summary>
        public Edit UntitledNotepadEdit
        {
            get
            {
                if (null == fUntitledNotepadEdit)
                {
                    fUntitledNotepadEdit = new Edit("UntitledNotepadEdit", PrintLogin32770Window);
                    fUntitledNotepadEdit.UIMap.Scope = UIASeachScope.Children;
                    fUntitledNotepadEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1013");
                    fUntitledNotepadEdit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Untitled - Notepad");
                    fUntitledNotepadEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Edit");
                }

                return fUntitledNotepadEdit;
            }
        }

        /// <summary>
        /// Gets Reference to TheDocmentNameSText
        /// </summary>
        public Text TheDocmentNameSText
        {
            get
            {
                if (null == fTheDocmentNameSText)
                {
                    fTheDocmentNameSText = new Text("TheDocmentNameSText", PrintLogin32770Window);
                    fTheDocmentNameSText.UIMap.Scope = UIASeachScope.Children;
                    fTheDocmentNameSText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"The Docment Name:");
                    fTheDocmentNameSText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                }

                return fTheDocmentNameSText;
            }
        }

        /// <summary>
        /// Gets Reference to TheDocmentNameSDataGrid
        /// </summary>
        public DataGrid TheDocmentNameSDataGrid
        {
            get
            {
                if (null == fTheDocmentNameSDataGrid)
                {
                    fTheDocmentNameSDataGrid = new DataGrid("TheDocmentNameSDataGrid", PrintLogin32770Window);
                    fTheDocmentNameSDataGrid.UIMap.Scope = UIASeachScope.Children;
                    fTheDocmentNameSDataGrid.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1017");
                    fTheDocmentNameSDataGrid.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"The Docment Name:");
                    fTheDocmentNameSDataGrid.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"SysListView32");
                }

                return fTheDocmentNameSDataGrid;
            }
        }

        /// <summary>
        /// Gets Reference to HeaderSysHeaderHeader
        /// </summary>
        public Header HeaderSysHeaderHeader
        {
            get
            {
                if (null == fHeaderSysHeaderHeader)
                {
                    fHeaderSysHeaderHeader = new Header("HeaderSysHeaderHeader", TheDocmentNameSDataGrid);
                    fHeaderSysHeaderHeader.UIMap.Scope = UIASeachScope.Children;
                    fHeaderSysHeaderHeader.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Header");
                    fHeaderSysHeaderHeader.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Header");
                    fHeaderSysHeaderHeader.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"SysHeader32");
                }

                return fHeaderSysHeaderHeader;
            }
        }

        /// <summary>
        /// Gets Reference to DocumentNameHeaHeaderItem
        /// </summary>
        public HeaderItem DocumentNameHeaHeaderItem
        {
            get
            {
                if (null == fDocumentNameHeaHeaderItem)
                {
                    fDocumentNameHeaHeaderItem = new HeaderItem("DocumentNameHeaHeaderItem", HeaderSysHeaderHeader);
                    fDocumentNameHeaHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fDocumentNameHeaHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Document Name");
                    fDocumentNameHeaHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HeaderItem 0");
                }

                return fDocumentNameHeaHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to SubmittimeHeadeHeaderItem
        /// </summary>
        public HeaderItem SubmittimeHeadeHeaderItem
        {
            get
            {
                if (null == fSubmittimeHeadeHeaderItem)
                {
                    fSubmittimeHeadeHeaderItem = new HeaderItem("SubmittimeHeadeHeaderItem", HeaderSysHeaderHeader);
                    fSubmittimeHeadeHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fSubmittimeHeadeHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Submit time");
                    fSubmittimeHeadeHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HeaderItem 1");
                }

                return fSubmittimeHeadeHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to TypeHeaderItem2HeaderItem
        /// </summary>
        public HeaderItem TypeHeaderItem2HeaderItem
        {
            get
            {
                if (null == fTypeHeaderItem2HeaderItem)
                {
                    fTypeHeaderItem2HeaderItem = new HeaderItem("TypeHeaderItem2HeaderItem", HeaderSysHeaderHeader);
                    fTypeHeaderItem2HeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fTypeHeaderItem2HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Type");
                    fTypeHeaderItem2HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HeaderItem 2");
                }

                return fTypeHeaderItem2HeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to NumberHeaderIteHeaderItem
        /// </summary>
        public HeaderItem NumberHeaderIteHeaderItem
        {
            get
            {
                if (null == fNumberHeaderIteHeaderItem)
                {
                    fNumberHeaderIteHeaderItem = new HeaderItem("NumberHeaderIteHeaderItem", HeaderSysHeaderHeader);
                    fNumberHeaderIteHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fNumberHeaderIteHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Number");
                    fNumberHeaderIteHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HeaderItem 3");
                }

                return fNumberHeaderIteHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to ColourHeaderIteHeaderItem
        /// </summary>
        public HeaderItem ColourHeaderIteHeaderItem
        {
            get
            {
                if (null == fColourHeaderIteHeaderItem)
                {
                    fColourHeaderIteHeaderItem = new HeaderItem("ColourHeaderIteHeaderItem", HeaderSysHeaderHeader);
                    fColourHeaderIteHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fColourHeaderIteHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Colour");
                    fColourHeaderIteHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HeaderItem 4");
                }

                return fColourHeaderIteHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to SizeHeaderItem5HeaderItem
        /// </summary>
        public HeaderItem SizeHeaderItem5HeaderItem
        {
            get
            {
                if (null == fSizeHeaderItem5HeaderItem)
                {
                    fSizeHeaderItem5HeaderItem = new HeaderItem("SizeHeaderItem5HeaderItem", HeaderSysHeaderHeader);
                    fSizeHeaderItem5HeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fSizeHeaderItem5HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Size");
                    fSizeHeaderItem5HeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HeaderItem 5");
                }

                return fSizeHeaderItem5HeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to StatusHeaderIteHeaderItem
        /// </summary>
        public HeaderItem StatusHeaderIteHeaderItem
        {
            get
            {
                if (null == fStatusHeaderIteHeaderItem)
                {
                    fStatusHeaderIteHeaderItem = new HeaderItem("StatusHeaderIteHeaderItem", HeaderSysHeaderHeader);
                    fStatusHeaderIteHeaderItem.UIMap.Scope = UIASeachScope.Children;
                    fStatusHeaderIteHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Status");
                    fStatusHeaderIteHeaderItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"HeaderItem 6");
                }

                return fStatusHeaderIteHeaderItem;
            }
        }

        /// <summary>
        /// Gets Reference to HorizontalScrolScrollBar
        /// </summary>
        public ScrollBar HorizontalScrolScrollBar
        {
            get
            {
                if (null == fHorizontalScrolScrollBar)
                {
                    fHorizontalScrolScrollBar = new ScrollBar("HorizontalScrolScrollBar", TheDocmentNameSDataGrid);
                    fHorizontalScrolScrollBar.UIMap.Scope = UIASeachScope.Children;
                    fHorizontalScrolScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Horizontal Scroll Bar");
                    fHorizontalScrolScrollBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Horizontal ScrollBar");
                }

                return fHorizontalScrolScrollBar;
            }
        }

        /// <summary>
        /// Gets Reference to BackbysmallamouButton
        /// </summary>
        public Button BackbysmallamouButton
        {
            get
            {
                if (null == fBackbysmallamouButton)
                {
                    fBackbysmallamouButton = new Button("BackbysmallamouButton", HorizontalScrolScrollBar);
                    fBackbysmallamouButton.UIMap.Scope = UIASeachScope.Children;
                    fBackbysmallamouButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Back by small amount");
                    fBackbysmallamouButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SmallDecrement");
                }

                return fBackbysmallamouButton;
            }
        }

        /// <summary>
        /// Gets Reference to BackbylargeamouButton
        /// </summary>
        public Button BackbylargeamouButton
        {
            get
            {
                if (null == fBackbylargeamouButton)
                {
                    fBackbylargeamouButton = new Button("BackbylargeamouButton", HorizontalScrolScrollBar);
                    fBackbylargeamouButton.UIMap.Scope = UIASeachScope.Children;
                    fBackbylargeamouButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Back by large amount");
                    fBackbylargeamouButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"LargeDecrement");
                }

                return fBackbylargeamouButton;
            }
        }

        /// <summary>
        /// Gets Reference to ThumbThumb
        /// </summary>
        public Thumb ThumbThumb
        {
            get
            {
                if (null == fThumbThumb)
                {
                    fThumbThumb = new Thumb("ThumbThumb", HorizontalScrolScrollBar);
                    fThumbThumb.UIMap.Scope = UIASeachScope.Children;
                    fThumbThumb.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Thumb");
                    fThumbThumb.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Thumb");
                }

                return fThumbThumb;
            }
        }

        /// <summary>
        /// Gets Reference to ForwardbylargeaButton
        /// </summary>
        public Button ForwardbylargeaButton
        {
            get
            {
                if (null == fForwardbylargeaButton)
                {
                    fForwardbylargeaButton = new Button("ForwardbylargeaButton", HorizontalScrolScrollBar);
                    fForwardbylargeaButton.UIMap.Scope = UIASeachScope.Children;
                    fForwardbylargeaButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Forward by large amount");
                    fForwardbylargeaButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"LargeIncrement");
                }

                return fForwardbylargeaButton;
            }
        }

        /// <summary>
        /// Gets Reference to ForwardbysmallaButton
        /// </summary>
        public Button ForwardbysmallaButton
        {
            get
            {
                if (null == fForwardbysmallaButton)
                {
                    fForwardbysmallaButton = new Button("ForwardbysmallaButton", HorizontalScrolScrollBar);
                    fForwardbysmallaButton.UIMap.Scope = UIASeachScope.Children;
                    fForwardbysmallaButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Forward by small amount");
                    fForwardbysmallaButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SmallIncrement");
                }

                return fForwardbysmallaButton;
            }
        }

        /// <summary>
        /// Gets Reference to UntitledNotepadDataItem
        /// </summary>
        public DataItem UntitledNotepadDataItem
        {
            get
            {
                if (null == fUntitledNotepadDataItem)
                {
                    fUntitledNotepadDataItem = new DataItem("UntitledNotepadDataItem", TheDocmentNameSDataGrid);
                    fUntitledNotepadDataItem.UIMap.Scope = UIASeachScope.Children;
                    fUntitledNotepadDataItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Untitled - Notepad");
                }

                return fUntitledNotepadDataItem;
            }
        }

        /// <summary>
        /// Gets Reference to UntitledNotepadText
        /// </summary>
        public Text UntitledNotepadText
        {
            get
            {
                if (null == fUntitledNotepadText)
                {
                    fUntitledNotepadText = new Text("UntitledNotepadText", UntitledNotepadDataItem);
                    fUntitledNotepadText.UIMap.Scope = UIASeachScope.Children;
                    fUntitledNotepadText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Untitled - Notepad");
                }

                return fUntitledNotepadText;
            }
        }

        /// <summary>
        /// Gets Reference to A20180820121922Text
        /// </summary>
        public Text A20180820121922Text
        {
            get
            {
                if (null == fA20180820121922Text)
                {
                    fA20180820121922Text = new Text("A20180820121922Text", UntitledNotepadDataItem);
                    fA20180820121922Text.UIMap.Scope = UIASeachScope.Children;
                    fA20180820121922Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"2018-08-20 12:19:22");
                }

                return fA20180820121922Text;
            }
        }

        /// <summary>
        /// Gets Reference to A4Text
        /// </summary>
        public Text A4Text
        {
            get
            {
                if (null == fA4Text)
                {
                    fA4Text = new Text("A4Text", UntitledNotepadDataItem);
                    fA4Text.UIMap.Scope = UIASeachScope.Children;
                    fA4Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"A4");
                }

                return fA4Text;
            }
        }

        /// <summary>
        /// Gets Reference to A1Dup0I0XText
        /// </summary>
        public Text A1Dup0I0XText
        {
            get
            {
                if (null == fA1Dup0I0XText)
                {
                    fA1Dup0I0XText = new Text("A1Dup0I0XText", UntitledNotepadDataItem);
                    fA1Dup0I0XText.UIMap.Scope = UIASeachScope.Children;
                    fA1Dup0I0XText.UIMap.Index = 0;
                    fA1Dup0I0XText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"1");
                }

                return fA1Dup0I0XText;
            }
        }

        /// <summary>
        /// Gets Reference to A1Dup1I1XText
        /// </summary>
        public Text A1Dup1I1XText
        {
            get
            {
                if (null == fA1Dup1I1XText)
                {
                    fA1Dup1I1XText = new Text("A1Dup1I1XText", UntitledNotepadDataItem);
                    fA1Dup1I1XText.UIMap.Scope = UIASeachScope.Children;
                    fA1Dup1I1XText.UIMap.Index = 1;
                    fA1Dup1I1XText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"1");
                }

                return fA1Dup1I1XText;
            }
        }

        /// <summary>
        /// Gets Reference to A4949Text
        /// </summary>
        public Text A4949Text
        {
            get
            {
                if (null == fA4949Text)
                {
                    fA4949Text = new Text("A4949Text", UntitledNotepadDataItem);
                    fA4949Text.UIMap.Scope = UIASeachScope.Children;
                    fA4949Text.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"4949");
                }

                return fA4949Text;
            }
        }

        /// <summary>
        /// Gets Reference to AText
        /// </summary>
        public Text AText
        {
            get
            {
                if (null == fAText)
                {
                    fAText = new Text("AText", UntitledNotepadDataItem);
                    fAText.UIMap.Scope = UIASeachScope.Children;
                }

                return fAText;
            }
        }

        /// <summary>
        /// Gets Reference to TheDocmentNameEEdit
        /// </summary>
        public Edit TheDocmentNameEEdit
        {
            get
            {
                if (null == fTheDocmentNameEEdit)
                {
                    fTheDocmentNameEEdit = new Edit("TheDocmentNameEEdit", PrintLogin32770Window);
                    fTheDocmentNameEEdit.UIMap.Scope = UIASeachScope.Children;
                    fTheDocmentNameEEdit.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1018");
                    fTheDocmentNameEEdit.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"The Docment Name:");
                    fTheDocmentNameEEdit.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Edit");
                }

                return fTheDocmentNameEEdit;
            }
        }

        /// <summary>
        /// Gets Reference to DocmentnumberStText
        /// </summary>
        public Text DocmentnumberStText
        {
            get
            {
                if (null == fDocmentnumberStText)
                {
                    fDocmentnumberStText = new Text("DocmentnumberStText", PrintLogin32770Window);
                    fDocmentnumberStText.UIMap.Scope = UIASeachScope.Children;
                    fDocmentnumberStText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Docment number:");
                    fDocmentnumberStText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                }

                return fDocmentnumberStText;
            }
        }

        /// <summary>
        /// Gets Reference to SaveasdefaultBuCheckBox
        /// </summary>
        public CheckBox SaveasdefaultBuCheckBox
        {
            get
            {
                if (null == fSaveasdefaultBuCheckBox)
                {
                    fSaveasdefaultBuCheckBox = new CheckBox("SaveasdefaultBuCheckBox", PrintLogin32770Window);
                    fSaveasdefaultBuCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fSaveasdefaultBuCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1020");
                    fSaveasdefaultBuCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Save as default:");
                    fSaveasdefaultBuCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fSaveasdefaultBuCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to DocmentnumberCoComboBox
        /// </summary>
        public ComboBox DocmentnumberCoComboBox
        {
            get
            {
                if (null == fDocmentnumberCoComboBox)
                {
                    fDocmentnumberCoComboBox = new ComboBox("DocmentnumberCoComboBox", PrintLogin32770Window);
                    fDocmentnumberCoComboBox.UIMap.Scope = UIASeachScope.Children;
                    fDocmentnumberCoComboBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1008");
                    fDocmentnumberCoComboBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Docment number:");
                    fDocmentnumberCoComboBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboBox");
                }

                return fDocmentnumberCoComboBox;
            }
        }

        /// <summary>
        /// Gets Reference to ComboLBoxListBoDup1List
        /// </summary>
        public List ComboLBoxListBoDup1List
        {
            get
            {
                if (null == fComboLBoxListBoDup1List)
                {
                    fComboLBoxListBoDup1List = new List("ComboLBoxListBoDup1List", DocmentnumberCoComboBox);
                    fComboLBoxListBoDup1List.UIMap.Scope = UIASeachScope.Children;
                    fComboLBoxListBoDup1List.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"ListBox");
                    fComboLBoxListBoDup1List.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"ComboLBox");
                }

                return fComboLBoxListBoDup1List;
            }
        }

        /// <summary>
        /// Gets Reference to SystemAccountListItem
        /// </summary>
        public ListItem SystemAccountListItem
        {
            get
            {
                if (null == fSystemAccountListItem)
                {
                    fSystemAccountListItem = new ListItem("SystemAccountListItem", ComboLBoxListBoDup1List);
                    fSystemAccountListItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemAccountListItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Account");
                }

                return fSystemAccountListItem;
            }
        }

        /// <summary>
        /// Gets Reference to DropDownButtonDDup1Button
        /// </summary>
        public Button DropDownButtonDDup1Button
        {
            get
            {
                if (null == fDropDownButtonDDup1Button)
                {
                    fDropDownButtonDDup1Button = new Button("DropDownButtonDDup1Button", DocmentnumberCoComboBox);
                    fDropDownButtonDDup1Button.UIMap.Scope = UIASeachScope.Children;
                    fDropDownButtonDDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Drop Down Button");
                    fDropDownButtonDDup1Button.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"DropDown");
                }

                return fDropDownButtonDDup1Button;
            }
        }

        /// <summary>
        /// Gets Reference to AccountTypeStatText
        /// </summary>
        public Text AccountTypeStatText
        {
            get
            {
                if (null == fAccountTypeStatText)
                {
                    fAccountTypeStatText = new Text("AccountTypeStatText", PrintLogin32770Window);
                    fAccountTypeStatText.UIMap.Scope = UIASeachScope.Children;
                    fAccountTypeStatText.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Account Type:");
                    fAccountTypeStatText.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Static");
                }

                return fAccountTypeStatText;
            }
        }

        /// <summary>
        /// Gets Reference to DirectPrintButtCheckBox
        /// </summary>
        public CheckBox DirectPrintButtCheckBox
        {
            get
            {
                if (null == fDirectPrintButtCheckBox)
                {
                    fDirectPrintButtCheckBox = new CheckBox("DirectPrintButtCheckBox", PrintLogin32770Window);
                    fDirectPrintButtCheckBox.UIMap.Scope = UIASeachScope.Children;
                    fDirectPrintButtCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"1026");
                    fDirectPrintButtCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"DirectPrint");
                    fDirectPrintButtCheckBox.UIMap.SearchProperties.Add(UIASearchProperty.ClassName, @"Button");
                }

                return fDirectPrintButtCheckBox;
            }
        }

        /// <summary>
        /// Gets Reference to PrintLoginTitleBar
        /// </summary>
        public TitleBar PrintLoginTitleBar
        {
            get
            {
                if (null == fPrintLoginTitleBar)
                {
                    fPrintLoginTitleBar = new TitleBar("PrintLoginTitleBar", PrintLogin32770Window);
                    fPrintLoginTitleBar.UIMap.Scope = UIASeachScope.Children;
                    fPrintLoginTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Print Login");
                    fPrintLoginTitleBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"TitleBar");
                }

                return fPrintLoginTitleBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemMenuBarSyMenuBar
        /// </summary>
        public MenuBar SystemMenuBarSyMenuBar
        {
            get
            {
                if (null == fSystemMenuBarSyMenuBar)
                {
                    fSystemMenuBarSyMenuBar = new MenuBar("SystemMenuBarSyMenuBar", PrintLoginTitleBar);
                    fSystemMenuBarSyMenuBar.UIMap.Scope = UIASeachScope.Children;
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System Menu Bar");
                    fSystemMenuBarSyMenuBar.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"SystemMenuBar");
                }

                return fSystemMenuBarSyMenuBar;
            }
        }

        /// <summary>
        /// Gets Reference to SystemItem1MenuItem
        /// </summary>
        public MenuItem SystemItem1MenuItem
        {
            get
            {
                if (null == fSystemItem1MenuItem)
                {
                    fSystemItem1MenuItem = new MenuItem("SystemItem1MenuItem", SystemMenuBarSyMenuBar);
                    fSystemItem1MenuItem.UIMap.Scope = UIASeachScope.Children;
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"System");
                    fSystemItem1MenuItem.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Item 1");
                }

                return fSystemItem1MenuItem;
            }
        }

        /// <summary>
        /// Gets Reference to CloseCloseButton
        /// </summary>
        public Button CloseCloseButton
        {
            get
            {
                if (null == fCloseCloseButton)
                {
                    fCloseCloseButton = new Button("CloseCloseButton", PrintLoginTitleBar);
                    fCloseCloseButton.UIMap.Scope = UIASeachScope.Children;
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.Name, @"Close");
                    fCloseCloseButton.UIMap.SearchProperties.Add(UIASearchProperty.AutomationId, @"Close");
                }

                return fCloseCloseButton;
            }
        }
    }
}
